2	2	1	1	0	-1	char nettest _ sdp [ ] = strlit	EMPTY	EMPTY
2	3	2	-1	0	-1	@ ( # ) nettest _ sdp . c ( c ) copyright numconst - numconst hewlett - packard co . version numconst \;	EMPTY	EMPTY
2	4	2	-1	0	-1	# else	EMPTY	EMPTY
2	5	2	-1	0	-1	# define dirty	EMPTY	EMPTY
2	6	2	-1	0	-1	# define want _ histogram	EMPTY	EMPTY
2	7	2	-1	0	-1	# define want _ intervals	EMPTY	EMPTY
2	8	3	-1	1	-1	# endif	EMPTY	EMPTY
2	27	1	1	1	-1	# if have _ config _ h	EMPTY	EMPTY
2	28	2	-1	0	-1	# include < config . h >	EMPTY	EMPTY
2	29	3	-1	0	-1	# endif	EMPTY	EMPTY
2	31	1	0	0	-1	# if defined ( want _ sdp )	EMPTY	EMPTY
2	33	1	1	0	-1	# include < sys / types . h >	EMPTY	EMPTY
2	34	2	-1	0	-1	# include < fcntl . h >	EMPTY	EMPTY
2	35	2	-1	0	-1	# include < errno . h >	EMPTY	EMPTY
2	36	2	-1	0	-1	# include < signal . h >	EMPTY	EMPTY
2	37	2	-1	0	-1	# include < stdio . h >	EMPTY	EMPTY
2	38	2	-1	0	-1	# include < string . h >	EMPTY	EMPTY
2	39	2	-1	0	-1	# include < time . h >	EMPTY	EMPTY
2	40	2	-1	0	-1	# ifdef nostdlibh	EMPTY	EMPTY
2	41	2	-1	0	-1	# include < malloc . h >	EMPTY	EMPTY
2	42	2	-1	1	-1	# else	EMPTY	EMPTY
2	43	2	-1	0	-1	# include < stdlib . h >	EMPTY	EMPTY
2	44	3	-1	1	-1	# endif	EMPTY	EMPTY
2	46	1	1	0	-1	# if ! defined (  _  _ vms )	EMPTY	EMPTY
2	47	2	-1	0	-1	# include < sys / ipc . h >	EMPTY	EMPTY
2	48	2	-1	1	-1	# endif	EMPTY	EMPTY
2	49	2	-1	0	-1	# include < unistd . h >	EMPTY	EMPTY
2	50	2	-1	0	-1	# include < sys / types . h >	EMPTY	EMPTY
2	51	2	-1	0	-1	# include < sys / socket . h >	EMPTY	EMPTY
2	52	2	-1	0	-1	# include < netinet / in . h >	EMPTY	EMPTY
2	53	2	-1	0	-1	# include < netinet / tcp . h >	EMPTY	EMPTY
2	54	2	-1	0	-1	# include < arpa / inet . h >	EMPTY	EMPTY
2	55	3	-1	0	-1	# include < netdb . h >	EMPTY	EMPTY
2	60	1	1	1	-1	# ifndef msg _ eof	EMPTY	EMPTY
2	61	2	-1	0	-1	# ifdef msg _ fin	EMPTY	EMPTY
2	62	2	-1	0	-1	# define msg _ eof msg _ fin	EMPTY	EMPTY
2	63	2	-1	0	-1	# else	EMPTY	EMPTY
2	64	2	-1	0	-1	# error must have either msg _ eof or msg _ fin defined	EMPTY	EMPTY
2	65	2	-1	0	-1	# endif	EMPTY	EMPTY
2	66	3	-1	0	-1	# endif	EMPTY	EMPTY
2	68	1	1	0	-1	# include strlit	EMPTY	EMPTY
2	69	2	-1	0	-1	# include strlit	EMPTY	EMPTY
2	71	2	-1	1	-1	# include strlit	EMPTY	EMPTY
2	72	3	-1	0	-1	# include strlit	EMPTY	EMPTY
2	74	1	1	0	-1	# ifdef want _ histogram	EMPTY	EMPTY
2	75	2	-1	0	-1	# ifdef  _  _ sgi	EMPTY	EMPTY
2	76	2	-1	0	-1	# include < sys / time . h >	EMPTY	EMPTY
2	77	2	-1	1	-1	# endif	EMPTY	EMPTY
2	78	2	-1	0	-1	# include strlit	EMPTY	EMPTY
2	79	3	-1	1	-1	# endif	EMPTY	EMPTY
2	81	1	1	0	-1	# ifdef want _ first _ burst	EMPTY	EMPTY
2	82	2	-1	0	-1	extern int first _ burst _ size ;	EMPTY	EMPTY
2	83	3	-1	1	-1	# endif	EMPTY	EMPTY
2	90	1	1	1	-1	static int	EMPTY	EMPTY
2	91	2	-1	1	-1	msg _ count = numconst	EMPTY	EMPTY
2	92	2	-1	1	-1	non _ block = numconst	EMPTY	EMPTY
2	93	3	-1	1	-1	num _ associations = numconst ;	EMPTY	EMPTY
2	95	1	0	0	-1	static int confidence _ iteration ;	EMPTY	EMPTY
2	96	2	-1	0	-1	static char local _ cpu _ method ;	EMPTY	EMPTY
2	97	3	-1	0	-1	static char remote _ cpu _ method ;	EMPTY	EMPTY
2	99	1	1	0	-1	# ifdef want _ histogram	EMPTY	EMPTY
2	100	2	-1	0	-1	static struct timeval time _ one ;	EMPTY	EMPTY
2	101	2	-1	0	-1	static struct timeval time _ two ;	EMPTY	EMPTY
2	102	2	-1	0	-1	static hist time _ hist ;	EMPTY	EMPTY
2	103	3	-1	1	-1	# endif	EMPTY	EMPTY
2	106	1	0	0	-1	char sdp _ usage [ ] = strlit	EMPTY	EMPTY
2	107	2	-1	0	-1	usage : netperf [ global options ] -- [ test options ] \\ n \\\n\\	EMPTY	EMPTY
2	108	2	-1	0	-1	\\ n\\\nsdp	EMPTY	EMPTY
2	109	2	-1	0	-1	sdp sockets test options : \\ n \\	EMPTY	EMPTY
2	110	2	-1	0	-1	- b number send number requests at the start of  _ rr tests \\ n \\	EMPTY	EMPTY
2	111	2	-1	0	-1	- d [ l ] [  r ] set sdp _ nodelay locally and / or remotely \\ n \\	EMPTY	EMPTY
2	112	2	-1	0	-1	- h display this text \\ n \\	EMPTY	EMPTY
2	113	2	-1	0	-1	- h name  fam use name ( or ip ) and family as target of data connection \\ n \\	EMPTY	EMPTY
2	114	2	-1	0	-1	- l name  fam use name ( or ip ) and family as source of data connextion \\ n \\	EMPTY	EMPTY
2	115	2	-1	0	-1	- m bytes set the size of each sent message \\ n \\	EMPTY	EMPTY
2	116	2	-1	0	-1	- m bytes set the size of each received messages \\ n \\	EMPTY	EMPTY
2	117	2	-1	0	-1	- p local [  remote ] set the local / remote port for the data socket \\ n \\	EMPTY	EMPTY
2	118	2	-1	0	-1	- r req  [ rsp ] set request / response sizes (  _ rr tests ) \\ n \\	EMPTY	EMPTY
2	119	2	-1	0	-1	- s send [  recv ] set local socket send / recv buffer sizes \\ n \\	EMPTY	EMPTY
2	120	2	-1	0	-1	- s send [  recv ] set remote socket send / recv buffer sizes \\ n \\	EMPTY	EMPTY
2	121	2	-1	0	-1	- v enable copy avoidance if supported \\ n \\	EMPTY	EMPTY
2	122	2	-1	0	-1	- numconst use af _ inet ( eg ipv4 ) on both ends of the data conn \\ n \\	EMPTY	EMPTY
2	123	2	-1	0	-1	- numconst use af _ inet6 ( eg ipv6 ) on both ends of the data conn \\ n \\\n\\	EMPTY	EMPTY
2	124	2	-1	0	-1	\\ n\\\nfor	EMPTY	EMPTY
2	125	2	-1	0	-1	for those options taking two parms  at least one must be specified ; \\ n\\\nspecifying	EMPTY	EMPTY
2	126	2	-1	0	-1	specifying one value without a comma will set both parms to that \\ n\\\nvalue	EMPTY	EMPTY
2	127	2	-1	0	-1	value  specifying a value with a leading comma will set just the second \\ n\\\nparm	EMPTY	EMPTY
2	128	2	-1	0	-1	parm  a value with a trailing comma will set just the first . to set \\ n\\\neach	EMPTY	EMPTY
2	129	2	-1	0	-1	each parm to unique values  specify both and separate them with a \\ n\\\ncomma	EMPTY	EMPTY
2	130	3	-1	0	-1	comma . \\ n \;	EMPTY	EMPTY
2	140	1	1	1	-1	static	EMPTY	EMPTY
2	141	2	-1	0	-1	void	EMPTY	EMPTY
2	142	2	-1	0	-1	get _ sdp _ info ( int socket  int * mss )	EMPTY	EMPTY
2	143	3	-1	0	-1	{	EMPTY	EMPTY
2	145	1	0	0	-1	# ifdef tcp _ maxseg	EMPTY	EMPTY
2	146	3	-1	0	-1	netperf _ socklen _ t sock _ opt _ len ;	EMPTY	EMPTY
2	148	1	0	0	-1	sock _ opt _ len = sizeof ( netperf _ socklen _ t ) ;	EMPTY	EMPTY
2	149	2	-1	0	-1	if ( getsockopt ( socket	EMPTY	EMPTY
2	150	2	-1	0	-1	getprotobyname ( strlit ) -> p _ proto	EMPTY	EMPTY
2	151	2	-1	0	-1	tcp _ maxseg	EMPTY	EMPTY
2	152	2	-1	0	-1	( char * ) mss	EMPTY	EMPTY
2	153	2	-1	0	-1	& sock _ opt _ len ) == socket _ error ) {	EMPTY	EMPTY
2	154	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	155	2	-1	0	-1	strlit	EMPTY	EMPTY
2	156	2	-1	0	-1	errno ) ;	EMPTY	EMPTY
2	157	3	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	159	1	0	0	-1	}	EMPTY	EMPTY
2	160	3	-1	0	-1	# else	EMPTY	EMPTY
2	162	1	1	1	-1	# endif	EMPTY	EMPTY
2	164	1	0	0	-1	}	EMPTY	EMPTY
2	166	1	0	0	-1	void	EMPTY	EMPTY
2	167	2	-1	0	-1	send _ sdp _ stream ( char remote _ host [ ] )	EMPTY	EMPTY
2	168	3	-1	0	-1	{	EMPTY	EMPTY
2	170	1	0	0	-1	char * tput _ title = strlit	EMPTY	EMPTY
2	171	2	-1	0	-1	recv send send \\ n\\\nsocket	EMPTY	EMPTY
2	172	2	-1	0	-1	socket socket message elapsed \\ n\\\nsize	EMPTY	EMPTY
2	173	2	-1	0	-1	size size size time throughput \\ n\\\nbytes	EMPTY	EMPTY
2	174	3	-1	0	-1	bytes bytes bytes secs . % s / sec \\ n \\ n \;	EMPTY	EMPTY
2	176	1	0	0	-1	char * tput _ fmt _ 0 =	EMPTY	EMPTY
2	177	3	-1	0	-1	strlit ;	EMPTY	EMPTY
2	179	1	0	0	-1	char * tput _ fmt _ 1 =	EMPTY	EMPTY
2	180	3	-1	0	-1	strlit ;	EMPTY	EMPTY
2	182	1	0	0	-1	char * cpu _ title = strlit	EMPTY	EMPTY
2	183	2	-1	0	-1	recv send send utilization service demand \\ n\\\nsocket	EMPTY	EMPTY
2	184	2	-1	0	-1	socket socket message elapsed send recv send recv \\ n\\\nsize	EMPTY	EMPTY
2	185	2	-1	0	-1	size size size time throughput local remote local remote \\ n\\\nbytes	EMPTY	EMPTY
2	186	3	-1	0	-1	bytes bytes bytes secs . % - numconst / s % % % c % % % c us / kb us / kb \\ n \\ n \;	EMPTY	EMPTY
2	188	1	0	0	-1	char * cpu _ fmt _ 0 =	EMPTY	EMPTY
2	189	3	-1	0	-1	strlit ;	EMPTY	EMPTY
2	191	1	0	0	-1	char * cpu _ fmt _ 1 =	EMPTY	EMPTY
2	192	3	-1	0	-1	strlit ;	EMPTY	EMPTY
2	194	1	0	0	-1	char * ksink _ fmt = strlit	EMPTY	EMPTY
2	195	2	-1	0	-1	alignment offset % - numconst % - numconst sends % - numconst recvs \\ n\\\nlocal	EMPTY	EMPTY
2	196	2	-1	0	-1	local remote local remote xfered per per \\ n\\\nsend	EMPTY	EMPTY
2	197	2	-1	0	-1	send recv send recv send ( avg ) recv ( avg ) \\ n \\\n%	EMPTY	EMPTY
2	198	3	-1	0	-1	% numconst % numconst % numconst % numconst % numconst % numconst % numconst % numconst % numconst \\ n \;	EMPTY	EMPTY
2	200	1	0	0	-1	char * ksink _ fmt2 = strlit	EMPTY	EMPTY
2	201	2	-1	0	-1	maximum \\ n\\\nsegment	EMPTY	EMPTY
2	202	2	-1	0	-1	segment \\ n\\\nsize	EMPTY	EMPTY
2	203	2	-1	0	-1	size ( bytes ) \\ n \\\n%	EMPTY	EMPTY
2	204	3	-1	0	-1	% numconst \\ n \;	EMPTY	EMPTY
2	207	1	0	0	-1	float elapsed _ time ;	EMPTY	EMPTY
2	216	1	1	1	-1	struct ring _ elt * send _ ring ;	EMPTY	EMPTY
2	218	1	1	0	-1	int len ;	EMPTY	EMPTY
2	219	2	-1	0	-1	unsigned int nummessages = numconst ;	EMPTY	EMPTY
2	220	2	-1	0	-1	socket send _ socket ;	EMPTY	EMPTY
2	221	2	-1	0	-1	int bytes _ remaining ;	EMPTY	EMPTY
2	222	3	-1	1	-1	int sdp _ mss = - numconst ;	EMPTY	EMPTY
2	228	1	1	1	-1	unsigned long long local _ bytes _ sent = numconst ;	EMPTY	EMPTY
2	229	3	-1	0	-1	double bytes _ sent = numconst ;	EMPTY	EMPTY
2	231	1	0	0	-1	float local _ cpu _ utilization ;	EMPTY	EMPTY
2	232	2	-1	0	-1	float local _ service _ demand ;	EMPTY	EMPTY
2	233	2	-1	0	-1	float remote _ cpu _ utilization ;	EMPTY	EMPTY
2	234	3	-1	0	-1	float remote _ service _ demand ;	EMPTY	EMPTY
2	236	1	0	0	-1	double thruput ;	EMPTY	EMPTY
2	238	1	0	0	-1	struct addrinfo * remote _ res ;	EMPTY	EMPTY
2	239	3	-1	0	-1	struct addrinfo * local _ res ;	EMPTY	EMPTY
2	241	1	0	0	-1	struct sdp _ stream _ request _ struct * sdp _ stream _ request ;	EMPTY	EMPTY
2	242	2	-1	0	-1	struct sdp _ stream _ response _ struct * sdp _ stream _ response ;	EMPTY	EMPTY
2	243	3	-1	0	-1	struct sdp _ stream _ results _ struct * sdp _ stream _ result ;	EMPTY	EMPTY
2	245	1	0	0	-1	sdp _ stream _ request =	EMPTY	EMPTY
2	246	2	-1	0	-1	( struct sdp _ stream _ request _ struct * ) netperf _ request . content . test _ specific _ data ;	EMPTY	EMPTY
2	247	2	-1	0	-1	sdp _ stream _ response =	EMPTY	EMPTY
2	248	2	-1	0	-1	( struct sdp _ stream _ response _ struct * ) netperf _ response . content . test _ specific _ data ;	EMPTY	EMPTY
2	249	2	-1	0	-1	sdp _ stream _ result =	EMPTY	EMPTY
2	250	3	-1	0	-1	( struct sdp _ stream _ results _ struct * ) netperf _ response . content . test _ specific _ data ;	EMPTY	EMPTY
2	252	1	1	0	-1	# ifdef want _ histogram	EMPTY	EMPTY
2	253	2	-1	0	-1	if ( verbosity > numconst ) {	EMPTY	EMPTY
2	254	2	-1	0	-1	time _ hist = hist _ new ( ) ;	EMPTY	EMPTY
2	255	2	-1	0	-1	}	EMPTY	EMPTY
2	256	3	-1	1	-1	# endif	EMPTY	EMPTY
2	263	1	1	1	-1	complete _ addrinfos ( & remote _ res	EMPTY	EMPTY
2	264	2	-1	0	-1	& local _ res	EMPTY	EMPTY
2	265	2	-1	0	-1	remote _ host	EMPTY	EMPTY
2	266	2	-1	0	-1	sock _ stream	EMPTY	EMPTY
2	267	2	-1	0	-1	ipproto _ tcp	EMPTY	EMPTY
2	268	3	-1	0	-1	numconst ) ;	EMPTY	EMPTY
2	270	1	0	0	-1	if ( print _ headers ) {	EMPTY	EMPTY
2	271	2	-1	0	-1	print _ top _ test _ header ( strlit  local _ res  remote _ res ) ;	EMPTY	EMPTY
2	272	3	-1	0	-1	}	EMPTY	EMPTY
2	274	1	0	0	-1	send _ ring = null ;	EMPTY	EMPTY
2	275	2	-1	0	-1	confidence _ iteration = numconst ;	EMPTY	EMPTY
2	276	3	-1	0	-1	init _ stat ( ) ;	EMPTY	EMPTY
2	285	1	1	1	-1	while ( ( ( confidence < numconst ) && ( confidence _ iteration < iteration _ max ) ) ||	EMPTY	EMPTY
2	286	3	-1	0	-1	( confidence _ iteration <= iteration _ min ) ) {	EMPTY	EMPTY
2	291	1	1	1	-1	nummessages = numconst ;	EMPTY	EMPTY
2	292	2	-1	0	-1	bytes _ sent = numconst ;	EMPTY	EMPTY
2	293	3	-1	0	-1	times _ up = numconst ;	EMPTY	EMPTY
2	297	1	1	1	-1	local _ res -> ai _ family = af _ inet _ sdp ;	EMPTY	EMPTY
2	298	2	-1	0	-1	local _ res -> ai _ protocol = numconst ;	EMPTY	EMPTY
2	299	3	-1	0	-1	send _ socket = create _ data _ socket ( local _ res ) ;	EMPTY	EMPTY
2	301	1	0	0	-1	if ( send _ socket == invalid _ socket ) {	EMPTY	EMPTY
2	302	2	-1	0	-1	perror ( strlit ) ;	EMPTY	EMPTY
2	303	2	-1	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	304	3	-1	0	-1	}	EMPTY	EMPTY
2	306	1	0	0	-1	if ( debug ) {	EMPTY	EMPTY
2	307	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	308	3	-1	0	-1	}	EMPTY	EMPTY
2	316	1	1	1	-1	if ( send _ size == numconst ) {	EMPTY	EMPTY
2	317	2	-1	0	-1	if ( lss _ size > numconst ) {	EMPTY	EMPTY
2	318	2	-1	0	-1	send _ size = lss _ size ;	EMPTY	EMPTY
2	319	2	-1	0	-1	}	EMPTY	EMPTY
2	320	2	-1	0	-1	else {	EMPTY	EMPTY
2	321	2	-1	0	-1	send _ size = numconst ;	EMPTY	EMPTY
2	322	2	-1	0	-1	}	EMPTY	EMPTY
2	323	3	-1	0	-1	}	EMPTY	EMPTY
2	333	1	1	1	-1	if ( send _ width == numconst ) {	EMPTY	EMPTY
2	334	2	-1	0	-1	send _ width = ( lss _ size / send _ size ) + numconst ;	EMPTY	EMPTY
2	335	2	-1	0	-1	if ( send _ width == numconst ) send _ width ++ ;	EMPTY	EMPTY
2	336	3	-1	0	-1	}	EMPTY	EMPTY
2	338	1	1	0	-1	if ( send _ ring == null ) {	EMPTY	EMPTY
2	343	2	-1	1	-1	send _ ring = allocate _ buffer _ ring ( send _ width	EMPTY	EMPTY
2	344	2	-1	0	-1	send _ size	EMPTY	EMPTY
2	345	2	-1	0	-1	local _ send _ align	EMPTY	EMPTY
2	346	2	-1	0	-1	local _ send _ offset ) ;	EMPTY	EMPTY
2	347	3	-1	0	-1	}	EMPTY	EMPTY
2	356	1	1	1	-1	if ( local _ cpu _ usage ) {	EMPTY	EMPTY
2	357	2	-1	0	-1	local _ cpu _ rate = calibrate _ local _ cpu ( local _ cpu _ rate ) ;	EMPTY	EMPTY
2	358	3	-1	0	-1	}	EMPTY	EMPTY
2	360	1	0	0	-1	if ( ! no _ control ) {	EMPTY	EMPTY
2	370	1	1	1	-1	netperf _ request . content . request _ type = do _ sdp _ stream ;	EMPTY	EMPTY
2	371	2	-1	0	-1	sdp _ stream _ request -> send _ buf _ size = rss _ size _ req ;	EMPTY	EMPTY
2	372	2	-1	0	-1	sdp _ stream _ request -> recv _ buf _ size = rsr _ size _ req ;	EMPTY	EMPTY
2	373	2	-1	0	-1	sdp _ stream _ request -> receive _ size = recv _ size ;	EMPTY	EMPTY
2	374	2	-1	0	-1	sdp _ stream _ request -> no _ delay = rem _ nodelay ;	EMPTY	EMPTY
2	375	2	-1	0	-1	sdp _ stream _ request -> recv _ alignment = remote _ recv _ align ;	EMPTY	EMPTY
2	376	2	-1	0	-1	sdp _ stream _ request -> recv _ offset = remote _ recv _ offset ;	EMPTY	EMPTY
2	377	2	-1	0	-1	sdp _ stream _ request -> measure _ cpu = remote _ cpu _ usage ;	EMPTY	EMPTY
2	378	2	-1	0	-1	sdp _ stream _ request -> cpu _ rate = remote _ cpu _ rate ;	EMPTY	EMPTY
2	379	2	-1	0	-1	if ( test _ time ) {	EMPTY	EMPTY
2	380	2	-1	0	-1	sdp _ stream _ request -> test _ length = test _ time ;	EMPTY	EMPTY
2	381	2	-1	0	-1	}	EMPTY	EMPTY
2	382	2	-1	0	-1	else {	EMPTY	EMPTY
2	383	2	-1	0	-1	sdp _ stream _ request -> test _ length = test _ bytes ;	EMPTY	EMPTY
2	384	2	-1	0	-1	}	EMPTY	EMPTY
2	385	2	-1	0	-1	sdp _ stream _ request -> so _ rcvavoid = rem _ rcvavoid ;	EMPTY	EMPTY
2	386	2	-1	0	-1	sdp _ stream _ request -> so _ sndavoid = rem _ sndavoid ;	EMPTY	EMPTY
2	387	2	-1	0	-1	# ifdef dirty	EMPTY	EMPTY
2	388	2	-1	0	-1	sdp _ stream _ request -> dirty _ count = rem _ dirty _ count ;	EMPTY	EMPTY
2	389	2	-1	0	-1	sdp _ stream _ request -> clean _ count = rem _ clean _ count ;	EMPTY	EMPTY
2	390	2	-1	1	-1	# endif	EMPTY	EMPTY
2	391	2	-1	0	-1	sdp _ stream _ request -> port = atoi ( remote _ data _ port ) ;	EMPTY	EMPTY
2	392	2	-1	0	-1	sdp _ stream _ request -> ipfamily = af _ to _ nf ( remote _ res -> ai _ family ) ;	EMPTY	EMPTY
2	393	2	-1	0	-1	if ( debug > numconst ) {	EMPTY	EMPTY
2	394	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	395	2	-1	0	-1	strlit ) ;	EMPTY	EMPTY
2	396	3	-1	0	-1	}	EMPTY	EMPTY
2	398	1	0	0	-1	send _ request ( ) ;	EMPTY	EMPTY
2	411	1	1	1	-1	recv _ response ( ) ;	EMPTY	EMPTY
2	413	1	0	0	-1	if ( ! netperf _ response . content . serv _ errno ) {	EMPTY	EMPTY
2	414	2	-1	0	-1	if ( debug )	EMPTY	EMPTY
2	415	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	416	2	-1	0	-1	rsr _ size = sdp _ stream _ response -> recv _ buf _ size ;	EMPTY	EMPTY
2	417	2	-1	0	-1	rss _ size = sdp _ stream _ response -> send _ buf _ size ;	EMPTY	EMPTY
2	418	2	-1	0	-1	rem _ nodelay = sdp _ stream _ response -> no _ delay ;	EMPTY	EMPTY
2	419	2	-1	0	-1	remote _ cpu _ usage = sdp _ stream _ response -> measure _ cpu ;	EMPTY	EMPTY
2	420	3	-1	0	-1	remote _ cpu _ rate = sdp _ stream _ response -> cpu _ rate ;	EMPTY	EMPTY
2	424	1	1	1	-1	set _ port _ number ( remote _ res	EMPTY	EMPTY
2	425	3	-1	0	-1	( short ) sdp _ stream _ response -> data _ port _ number ) ;	EMPTY	EMPTY
2	427	1	0	0	-1	rem _ rcvavoid = sdp _ stream _ response -> so _ rcvavoid ;	EMPTY	EMPTY
2	428	2	-1	0	-1	rem _ sndavoid = sdp _ stream _ response -> so _ sndavoid ;	EMPTY	EMPTY
2	429	2	-1	0	-1	}	EMPTY	EMPTY
2	430	2	-1	0	-1	else {	EMPTY	EMPTY
2	431	2	-1	0	-1	set _ errno ( netperf _ response . content . serv _ errno ) ;	EMPTY	EMPTY
2	432	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	433	2	-1	0	-1	strlit	EMPTY	EMPTY
2	434	2	-1	0	-1	netperf _ response . content . serv _ errno ) ;	EMPTY	EMPTY
2	435	2	-1	0	-1	perror ( strlit ) ;	EMPTY	EMPTY
2	436	3	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	438	1	0	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	439	2	-1	0	-1	}	EMPTY	EMPTY
2	440	3	-1	0	-1	}	EMPTY	EMPTY
2	442	1	0	0	-1	# ifdef want _ demo	EMPTY	EMPTY
2	443	2	-1	0	-1	demo _ stream _ setup ( lss _ size  rsr _ size )	EMPTY	EMPTY
2	444	3	-1	0	-1	# endif	EMPTY	EMPTY
2	447	1	1	1	-1	if ( connect ( send _ socket	EMPTY	EMPTY
2	448	2	-1	0	-1	remote _ res -> ai _ addr	EMPTY	EMPTY
2	449	2	-1	0	-1	remote _ res -> ai _ addrlen ) == invalid _ socket ) {	EMPTY	EMPTY
2	450	2	-1	0	-1	perror ( strlit ) ;	EMPTY	EMPTY
2	451	2	-1	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	452	3	-1	0	-1	}	EMPTY	EMPTY
2	464	1	1	1	-1	if ( test _ time ) {	EMPTY	EMPTY
2	466	2	-1	1	-1	times _ up = numconst ;	EMPTY	EMPTY
2	467	2	-1	0	-1	bytes _ remaining = numconst ;	EMPTY	EMPTY
2	474	2	-1	1	-1	start _ timer ( test _ time ) ;	EMPTY	EMPTY
2	475	2	-1	0	-1	}	EMPTY	EMPTY
2	476	2	-1	0	-1	else {	EMPTY	EMPTY
2	478	2	-1	1	-1	bytes _ remaining = test _ bytes ;	EMPTY	EMPTY
2	479	2	-1	0	-1	times _ up = numconst ;	EMPTY	EMPTY
2	480	3	-1	0	-1	}	EMPTY	EMPTY
2	486	1	1	1	-1	cpu _ start ( local _ cpu _ usage ) ;	EMPTY	EMPTY
2	491	1	1	1	-1	# if defined ( want _ intervals )	EMPTY	EMPTY
2	492	2	-1	0	-1	intervals _ init ( ) ;	EMPTY	EMPTY
2	493	3	-1	1	-1	# endif	EMPTY	EMPTY
2	497	1	1	1	-1	# ifdef want _ demo	EMPTY	EMPTY
2	498	2	-1	0	-1	if ( demo _ mode ) {	EMPTY	EMPTY
2	499	2	-1	0	-1	hist _ timestamp ( demo _ one _ ptr ) ;	EMPTY	EMPTY
2	500	2	-1	0	-1	}	EMPTY	EMPTY
2	501	3	-1	0	-1	# endif	EMPTY	EMPTY
2	510	1	1	1	-1	while ( ( ! times _ up ) || ( bytes _ remaining > numconst ) ) {	EMPTY	EMPTY
2	512	1	1	0	-1	# ifdef dirty	EMPTY	EMPTY
2	513	2	-1	0	-1	access _ buffer ( send _ ring -> buffer _ ptr	EMPTY	EMPTY
2	514	2	-1	0	-1	send _ size	EMPTY	EMPTY
2	515	2	-1	0	-1	loc _ dirty _ count	EMPTY	EMPTY
2	516	2	-1	0	-1	loc _ clean _ count ) ;	EMPTY	EMPTY
2	517	3	-1	1	-1	# endif	EMPTY	EMPTY
2	519	1	1	0	-1	# ifdef want _ histogram	EMPTY	EMPTY
2	520	2	-1	0	-1	if ( verbosity > numconst ) {	EMPTY	EMPTY
2	525	2	-1	1	-1	hist _ timestamp ( & time _ one ) ;	EMPTY	EMPTY
2	526	2	-1	0	-1	}	EMPTY	EMPTY
2	527	3	-1	1	-1	# endif	EMPTY	EMPTY
2	529	1	1	0	-1	if ( ( len = send ( send _ socket	EMPTY	EMPTY
2	530	2	-1	0	-1	send _ ring -> buffer _ ptr	EMPTY	EMPTY
2	531	2	-1	0	-1	send _ size	EMPTY	EMPTY
2	532	2	-1	0	-1	numconst ) ) != send _ size ) {	EMPTY	EMPTY
2	533	2	-1	0	-1	if ( ( len >= numconst ) || socket _ eintr ( len ) ) {	EMPTY	EMPTY
2	535	2	-1	1	-1	break ;	EMPTY	EMPTY
2	536	2	-1	0	-1	}	EMPTY	EMPTY
2	537	2	-1	0	-1	perror ( strlit ) ;	EMPTY	EMPTY
2	538	2	-1	0	-1	printf ( strlit  len ) ;	EMPTY	EMPTY
2	539	2	-1	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	540	3	-1	0	-1	}	EMPTY	EMPTY
2	542	1	0	0	-1	local _ bytes _ sent += send _ size ;	EMPTY	EMPTY
2	544	1	1	0	-1	# ifdef want _ histogram	EMPTY	EMPTY
2	545	2	-1	0	-1	if ( verbosity > numconst ) {	EMPTY	EMPTY
2	547	2	-1	1	-1	hist _ timestamp ( & time _ two ) ;	EMPTY	EMPTY
2	548	2	-1	0	-1	hist _ add ( time _ hist  delta _ micro ( & time _ one  & time _ two ) ) ;	EMPTY	EMPTY
2	549	2	-1	0	-1	}	EMPTY	EMPTY
2	550	3	-1	1	-1	# endif	EMPTY	EMPTY
2	552	1	0	0	-1	# ifdef want _ demo	EMPTY	EMPTY
2	553	2	-1	0	-1	demo _ stream _ interval ( send _ size )	EMPTY	EMPTY
2	554	3	-1	0	-1	# endif	EMPTY	EMPTY
2	556	1	1	0	-1	# if defined ( want _ intervals )	EMPTY	EMPTY
2	557	2	-1	0	-1	intervals _ wait ( ) ;	EMPTY	EMPTY
2	558	3	-1	1	-1	# endif	EMPTY	EMPTY
2	565	1	1	1	-1	nummessages ++ ;	EMPTY	EMPTY
2	566	2	-1	0	-1	send _ ring = send _ ring -> next ;	EMPTY	EMPTY
2	567	2	-1	0	-1	if ( bytes _ remaining ) {	EMPTY	EMPTY
2	568	2	-1	0	-1	bytes _ remaining -= send _ size ;	EMPTY	EMPTY
2	569	2	-1	0	-1	}	EMPTY	EMPTY
2	570	3	-1	0	-1	}	EMPTY	EMPTY
2	578	1	1	1	-1	if ( verbosity > numconst ) {	EMPTY	EMPTY
2	579	2	-1	0	-1	sdp _ mss = - numconst ;	EMPTY	EMPTY
2	580	2	-1	0	-1	get _ sdp _ info ( send _ socket  & sdp _ mss ) ;	EMPTY	EMPTY
2	581	3	-1	0	-1	}	EMPTY	EMPTY
2	583	1	0	0	-1	if ( shutdown ( send _ socket  shut _ wr ) == socket _ error ) {	EMPTY	EMPTY
2	584	2	-1	0	-1	perror ( strlit ) ;	EMPTY	EMPTY
2	585	2	-1	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	586	3	-1	0	-1	}	EMPTY	EMPTY
2	593	1	1	1	-1	recv ( send _ socket  send _ ring -> buffer _ ptr  send _ size  numconst ) ;	EMPTY	EMPTY
2	598	1	1	1	-1	cpu _ stop ( local _ cpu _ usage  & elapsed _ time ) ;	EMPTY	EMPTY
2	606	1	1	1	-1	close ( send _ socket ) ;	EMPTY	EMPTY
2	608	1	0	0	-1	if ( ! no _ control ) {	EMPTY	EMPTY
2	614	1	1	1	-1	recv _ response ( ) ;	EMPTY	EMPTY
2	615	2	-1	0	-1	if ( ! netperf _ response . content . serv _ errno ) {	EMPTY	EMPTY
2	616	2	-1	0	-1	if ( debug )	EMPTY	EMPTY
2	617	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	618	2	-1	0	-1	}	EMPTY	EMPTY
2	619	2	-1	0	-1	else {	EMPTY	EMPTY
2	620	2	-1	0	-1	set _ errno ( netperf _ response . content . serv _ errno ) ;	EMPTY	EMPTY
2	621	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	622	2	-1	0	-1	strlit	EMPTY	EMPTY
2	623	2	-1	0	-1	netperf _ response . content . serv _ errno ) ;	EMPTY	EMPTY
2	624	2	-1	0	-1	perror ( strlit ) ;	EMPTY	EMPTY
2	625	3	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	627	1	0	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	628	3	-1	0	-1	}	EMPTY	EMPTY
2	640	1	1	1	-1	bytes _ sent = ntohd ( sdp _ stream _ result -> bytes _ received ) ;	EMPTY	EMPTY
2	641	2	-1	0	-1	}	EMPTY	EMPTY
2	642	2	-1	0	-1	else {	EMPTY	EMPTY
2	643	2	-1	0	-1	bytes _ sent = ( double ) local _ bytes _ sent ;	EMPTY	EMPTY
2	644	3	-1	0	-1	}	EMPTY	EMPTY
2	646	1	0	0	-1	thruput = calc _ thruput ( bytes _ sent ) ;	EMPTY	EMPTY
2	648	1	1	0	-1	if ( local _ cpu _ usage || remote _ cpu _ usage ) {	EMPTY	EMPTY
2	654	3	-1	1	-1	if ( local _ cpu _ usage ) {	EMPTY	EMPTY
2	656	1	0	0	-1	local _ cpu _ utilization = calc _ cpu _ util ( numconst ) ;	EMPTY	EMPTY
2	657	2	-1	0	-1	local _ service _ demand = calc _ service _ demand ( bytes _ sent	EMPTY	EMPTY
2	658	2	-1	0	-1	numconst	EMPTY	EMPTY
2	659	2	-1	0	-1	numconst	EMPTY	EMPTY
2	660	2	-1	0	-1	numconst ) ;	EMPTY	EMPTY
2	661	2	-1	0	-1	}	EMPTY	EMPTY
2	662	2	-1	0	-1	else {	EMPTY	EMPTY
2	663	2	-1	0	-1	local _ cpu _ utilization = ( float ) - numconst ;	EMPTY	EMPTY
2	664	2	-1	0	-1	local _ service _ demand = ( float ) - numconst ;	EMPTY	EMPTY
2	665	3	-1	0	-1	}	EMPTY	EMPTY
2	667	1	0	0	-1	if ( remote _ cpu _ usage ) {	EMPTY	EMPTY
2	669	1	1	0	-1	remote _ cpu _ utilization = sdp _ stream _ result -> cpu _ util ;	EMPTY	EMPTY
2	670	2	-1	0	-1	remote _ service _ demand = calc _ service _ demand ( bytes _ sent	EMPTY	EMPTY
2	671	2	-1	0	-1	numconst	EMPTY	EMPTY
2	672	2	-1	0	-1	remote _ cpu _ utilization	EMPTY	EMPTY
2	673	2	-1	0	-1	sdp _ stream _ result -> num _ cpus ) ;	EMPTY	EMPTY
2	674	2	-1	0	-1	}	EMPTY	EMPTY
2	675	2	-1	0	-1	else {	EMPTY	EMPTY
2	676	2	-1	0	-1	remote _ cpu _ utilization = ( float ) - numconst ;	EMPTY	EMPTY
2	677	2	-1	0	-1	remote _ service _ demand = ( float ) - numconst ;	EMPTY	EMPTY
2	678	2	-1	0	-1	}	EMPTY	EMPTY
2	679	2	-1	0	-1	}	EMPTY	EMPTY
2	680	2	-1	0	-1	else {	EMPTY	EMPTY
2	683	2	-1	1	-1	local _ cpu _ utilization = ( float ) - numconst ;	EMPTY	EMPTY
2	684	2	-1	0	-1	local _ service _ demand = ( float ) - numconst ;	EMPTY	EMPTY
2	685	2	-1	0	-1	remote _ cpu _ utilization = ( float ) - numconst ;	EMPTY	EMPTY
2	686	2	-1	0	-1	remote _ service _ demand = ( float ) - numconst ;	EMPTY	EMPTY
2	687	3	-1	0	-1	}	EMPTY	EMPTY
2	693	1	1	1	-1	calculate _ confidence ( confidence _ iteration	EMPTY	EMPTY
2	694	2	-1	0	-1	elapsed _ time	EMPTY	EMPTY
2	695	2	-1	0	-1	thruput	EMPTY	EMPTY
2	696	2	-1	0	-1	local _ cpu _ utilization	EMPTY	EMPTY
2	697	2	-1	0	-1	remote _ cpu _ utilization	EMPTY	EMPTY
2	698	2	-1	0	-1	local _ service _ demand	EMPTY	EMPTY
2	699	3	-1	0	-1	remote _ service _ demand ) ;	EMPTY	EMPTY
2	702	1	0	0	-1	confidence _ iteration ++ ;	EMPTY	EMPTY
2	703	3	-1	0	-1	}	EMPTY	EMPTY
2	713	1	1	1	-1	retrieve _ confident _ values ( & elapsed _ time	EMPTY	EMPTY
2	714	2	-1	0	-1	& thruput	EMPTY	EMPTY
2	715	2	-1	0	-1	& local _ cpu _ utilization	EMPTY	EMPTY
2	716	2	-1	0	-1	& remote _ cpu _ utilization	EMPTY	EMPTY
2	717	2	-1	0	-1	& local _ service _ demand	EMPTY	EMPTY
2	718	3	-1	0	-1	& remote _ service _ demand ) ;	EMPTY	EMPTY
2	729	1	1	1	-1	if ( confidence < numconst ) {	EMPTY	EMPTY
2	731	2	-1	1	-1	if ( iteration _ max > numconst ) {	EMPTY	EMPTY
2	732	2	-1	0	-1	display _ confidence ( ) ;	EMPTY	EMPTY
2	733	2	-1	0	-1	}	EMPTY	EMPTY
2	734	3	-1	0	-1	}	EMPTY	EMPTY
2	736	1	0	0	-1	if ( local _ cpu _ usage || remote _ cpu _ usage ) {	EMPTY	EMPTY
2	737	2	-1	0	-1	local _ cpu _ method = format _ cpu _ method ( cpu _ method ) ;	EMPTY	EMPTY
2	738	3	-1	0	-1	remote _ cpu _ method = format _ cpu _ method ( sdp _ stream _ result -> cpu _ method ) ;	EMPTY	EMPTY
2	740	1	0	0	-1	switch ( verbosity ) {	EMPTY	EMPTY
2	741	2	-1	0	-1	case numconst :	EMPTY	EMPTY
2	742	2	-1	0	-1	if ( local _ cpu _ usage ) {	EMPTY	EMPTY
2	743	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	744	2	-1	0	-1	cpu _ fmt _ 0	EMPTY	EMPTY
2	745	2	-1	0	-1	local _ service _ demand	EMPTY	EMPTY
2	746	2	-1	0	-1	local _ cpu _ method	EMPTY	EMPTY
2	747	2	-1	0	-1	( ( print _ headers ) ||	EMPTY	EMPTY
2	748	2	-1	0	-1	( result _ brand == null ) ) ? strlit : result _ brand ) ;	EMPTY	EMPTY
2	749	2	-1	0	-1	}	EMPTY	EMPTY
2	750	2	-1	0	-1	else {	EMPTY	EMPTY
2	751	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	752	2	-1	0	-1	cpu _ fmt _ 0	EMPTY	EMPTY
2	753	2	-1	0	-1	remote _ service _ demand	EMPTY	EMPTY
2	754	2	-1	0	-1	remote _ cpu _ method	EMPTY	EMPTY
2	755	2	-1	0	-1	( ( print _ headers ) ||	EMPTY	EMPTY
2	756	2	-1	0	-1	( result _ brand == null ) ) ? strlit : result _ brand ) ;	EMPTY	EMPTY
2	757	2	-1	0	-1	}	EMPTY	EMPTY
2	758	2	-1	0	-1	break ;	EMPTY	EMPTY
2	759	2	-1	0	-1	case numconst :	EMPTY	EMPTY
2	760	2	-1	0	-1	case numconst :	EMPTY	EMPTY
2	761	2	-1	0	-1	if ( print _ headers ) {	EMPTY	EMPTY
2	762	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	763	2	-1	0	-1	cpu _ title	EMPTY	EMPTY
2	764	2	-1	0	-1	format _ units ( )	EMPTY	EMPTY
2	765	2	-1	0	-1	local _ cpu _ method	EMPTY	EMPTY
2	766	2	-1	0	-1	remote _ cpu _ method ) ;	EMPTY	EMPTY
2	767	3	-1	0	-1	}	EMPTY	EMPTY
2	769	1	1	0	-1	fprintf ( where	EMPTY	EMPTY
2	770	2	-1	1	-1	cpu _ fmt _ 1	EMPTY	EMPTY
2	771	2	-1	1	-1	rsr _ size	EMPTY	EMPTY
2	772	2	-1	1	-1	lss _ size	EMPTY	EMPTY
2	773	2	-1	1	-1	send _ size	EMPTY	EMPTY
2	774	2	-1	1	-1	elapsed _ time	EMPTY	EMPTY
2	775	2	-1	1	-1	thruput	EMPTY	EMPTY
2	776	2	-1	1	-1	local _ cpu _ utilization	EMPTY	EMPTY
2	777	2	-1	1	-1	remote _ cpu _ utilization	EMPTY	EMPTY
2	778	2	-1	1	-1	local _ service _ demand	EMPTY	EMPTY
2	779	2	-1	1	-1	remote _ service _ demand	EMPTY	EMPTY
2	780	2	-1	0	-1	( ( print _ headers ) ||	EMPTY	EMPTY
2	781	2	-1	0	-1	( result _ brand == null ) ) ? strlit : result _ brand ) ;	EMPTY	EMPTY
2	782	2	-1	0	-1	break ;	EMPTY	EMPTY
2	783	2	-1	0	-1	}	EMPTY	EMPTY
2	784	2	-1	0	-1	}	EMPTY	EMPTY
2	785	3	-1	0	-1	else {	EMPTY	EMPTY
2	788	1	1	1	-1	switch ( verbosity ) {	EMPTY	EMPTY
2	789	2	-1	0	-1	case numconst :	EMPTY	EMPTY
2	790	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	791	2	-1	0	-1	tput _ fmt _ 0	EMPTY	EMPTY
2	792	2	-1	0	-1	thruput	EMPTY	EMPTY
2	793	2	-1	0	-1	( ( print _ headers ) ||	EMPTY	EMPTY
2	794	2	-1	0	-1	( result _ brand == null ) ) ? strlit : result _ brand ) ;	EMPTY	EMPTY
2	795	2	-1	0	-1	break ;	EMPTY	EMPTY
2	796	2	-1	0	-1	case numconst :	EMPTY	EMPTY
2	797	2	-1	0	-1	case numconst :	EMPTY	EMPTY
2	798	2	-1	0	-1	if ( print _ headers ) {	EMPTY	EMPTY
2	799	2	-1	0	-1	fprintf ( where  tput _ title  format _ units ( ) ) ;	EMPTY	EMPTY
2	800	2	-1	0	-1	}	EMPTY	EMPTY
2	801	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	802	2	-1	1	-1	tput _ fmt _ 1	EMPTY	EMPTY
2	803	2	-1	1	-1	rsr _ size	EMPTY	EMPTY
2	804	2	-1	1	-1	lss _ size	EMPTY	EMPTY
2	805	2	-1	1	-1	send _ size	EMPTY	EMPTY
2	806	2	-1	1	-1	elapsed _ time	EMPTY	EMPTY
2	807	2	-1	1	-1	thruput	EMPTY	EMPTY
2	808	2	-1	0	-1	( ( print _ headers ) ||	EMPTY	EMPTY
2	809	2	-1	0	-1	( result _ brand == null ) ) ? strlit : result _ brand ) ;	EMPTY	EMPTY
2	810	2	-1	0	-1	break ;	EMPTY	EMPTY
2	811	2	-1	0	-1	}	EMPTY	EMPTY
2	812	3	-1	0	-1	}	EMPTY	EMPTY
2	820	1	1	1	-1	if ( verbosity > numconst ) {	EMPTY	EMPTY
2	829	1	1	1	-1	fprintf ( where	EMPTY	EMPTY
2	830	2	-1	0	-1	ksink _ fmt	EMPTY	EMPTY
2	831	2	-1	0	-1	strlit	EMPTY	EMPTY
2	832	2	-1	0	-1	strlit	EMPTY	EMPTY
2	833	2	-1	0	-1	strlit	EMPTY	EMPTY
2	834	2	-1	0	-1	local _ send _ align	EMPTY	EMPTY
2	835	2	-1	0	-1	remote _ recv _ align	EMPTY	EMPTY
2	836	2	-1	0	-1	local _ send _ offset	EMPTY	EMPTY
2	837	2	-1	0	-1	remote _ recv _ offset	EMPTY	EMPTY
2	838	2	-1	0	-1	bytes _ sent	EMPTY	EMPTY
2	839	2	-1	0	-1	bytes _ sent / ( double ) nummessages	EMPTY	EMPTY
2	840	2	-1	0	-1	nummessages	EMPTY	EMPTY
2	841	2	-1	0	-1	bytes _ sent / ( double ) sdp _ stream _ result -> recv _ calls	EMPTY	EMPTY
2	842	2	-1	0	-1	sdp _ stream _ result -> recv _ calls ) ;	EMPTY	EMPTY
2	843	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	844	2	-1	0	-1	ksink _ fmt2	EMPTY	EMPTY
2	845	2	-1	0	-1	sdp _ mss ) ;	EMPTY	EMPTY
2	846	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	847	2	-1	0	-1	# ifdef want _ histogram	EMPTY	EMPTY
2	848	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	849	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	850	2	-1	0	-1	hist _ report ( time _ hist ) ;	EMPTY	EMPTY
2	851	2	-1	1	-1	# endif	EMPTY	EMPTY
2	852	3	-1	0	-1	}	EMPTY	EMPTY
2	854	1	0	0	-1	}	EMPTY	EMPTY
2	865	1	1	1	-1	void	EMPTY	EMPTY
2	866	2	-1	0	-1	send _ sdp _ maerts ( char remote _ host [ ] )	EMPTY	EMPTY
2	867	3	-1	0	-1	{	EMPTY	EMPTY
2	869	1	0	0	-1	char * tput _ title = strlit	EMPTY	EMPTY
2	870	2	-1	0	-1	recv send send \\ n\\\nsocket	EMPTY	EMPTY
2	871	2	-1	0	-1	socket socket message elapsed \\ n\\\nsize	EMPTY	EMPTY
2	872	2	-1	0	-1	size size size time throughput \\ n\\\nbytes	EMPTY	EMPTY
2	873	3	-1	0	-1	bytes bytes bytes secs . % s / sec \\ n \\ n \;	EMPTY	EMPTY
2	875	1	0	0	-1	char * tput _ fmt _ 0 =	EMPTY	EMPTY
2	876	3	-1	0	-1	strlit ;	EMPTY	EMPTY
2	878	1	0	0	-1	char * tput _ fmt _ 1 =	EMPTY	EMPTY
2	879	3	-1	0	-1	strlit ;	EMPTY	EMPTY
2	881	1	0	0	-1	char * cpu _ title = strlit	EMPTY	EMPTY
2	882	2	-1	0	-1	recv send send utilization service demand \\ n\\\nsocket	EMPTY	EMPTY
2	883	2	-1	0	-1	socket socket message elapsed send recv send recv \\ n\\\nsize	EMPTY	EMPTY
2	884	2	-1	0	-1	size size size time throughput local remote local remote \\ n\\\nbytes	EMPTY	EMPTY
2	885	3	-1	0	-1	bytes bytes bytes secs . % - numconst / s % % % c % % % c us / kb us / kb \\ n \\ n \;	EMPTY	EMPTY
2	887	1	0	0	-1	char * cpu _ fmt _ 0 =	EMPTY	EMPTY
2	888	3	-1	0	-1	strlit ;	EMPTY	EMPTY
2	890	1	0	0	-1	char * cpu _ fmt _ 1 =	EMPTY	EMPTY
2	891	3	-1	0	-1	strlit ;	EMPTY	EMPTY
2	893	1	0	0	-1	char * ksink _ fmt = strlit	EMPTY	EMPTY
2	894	2	-1	0	-1	alignment offset % - numconst % - numconst recvs % - numconst sends \\ n\\\nlocal	EMPTY	EMPTY
2	895	2	-1	0	-1	local remote local remote xfered per per \\ n\\\nrecv	EMPTY	EMPTY
2	896	2	-1	0	-1	recv send recv send recv ( avg ) send ( avg ) \\ n \\\n%	EMPTY	EMPTY
2	897	3	-1	0	-1	% numconst % numconst % numconst % numconst % numconst % numconst % numconst % numconst % numconst \\ n \;	EMPTY	EMPTY
2	899	1	0	0	-1	char * ksink _ fmt2 = strlit	EMPTY	EMPTY
2	900	2	-1	0	-1	maximum \\ n\\\nsegment	EMPTY	EMPTY
2	901	2	-1	0	-1	segment \\ n\\\nsize	EMPTY	EMPTY
2	902	2	-1	0	-1	size ( bytes ) \\ n \\\n%	EMPTY	EMPTY
2	903	3	-1	0	-1	% numconst \\ n \;	EMPTY	EMPTY
2	906	1	0	0	-1	float elapsed _ time ;	EMPTY	EMPTY
2	915	1	1	1	-1	struct ring _ elt * recv _ ring ;	EMPTY	EMPTY
2	917	1	1	0	-1	int len ;	EMPTY	EMPTY
2	918	2	-1	0	-1	unsigned int nummessages = numconst ;	EMPTY	EMPTY
2	919	2	-1	0	-1	socket recv _ socket ;	EMPTY	EMPTY
2	920	2	-1	0	-1	int bytes _ remaining ;	EMPTY	EMPTY
2	921	3	-1	1	-1	int sdp _ mss = - numconst ;	EMPTY	EMPTY
2	926	1	1	1	-1	double bytes _ sent = numconst ;	EMPTY	EMPTY
2	927	3	-1	0	-1	unsigned long long local _ bytes _ recvd = numconst ;	EMPTY	EMPTY
2	929	1	0	0	-1	float local _ cpu _ utilization ;	EMPTY	EMPTY
2	930	2	-1	0	-1	float local _ service _ demand ;	EMPTY	EMPTY
2	931	2	-1	0	-1	float remote _ cpu _ utilization ;	EMPTY	EMPTY
2	932	3	-1	0	-1	float remote _ service _ demand ;	EMPTY	EMPTY
2	934	1	0	0	-1	double thruput ;	EMPTY	EMPTY
2	936	1	0	0	-1	struct addrinfo * remote _ res ;	EMPTY	EMPTY
2	937	3	-1	0	-1	struct addrinfo * local _ res ;	EMPTY	EMPTY
2	939	1	0	0	-1	struct sdp _ maerts _ request _ struct * sdp _ maerts _ request ;	EMPTY	EMPTY
2	940	2	-1	0	-1	struct sdp _ maerts _ response _ struct * sdp _ maerts _ response ;	EMPTY	EMPTY
2	941	3	-1	0	-1	struct sdp _ maerts _ results _ struct * sdp _ maerts _ result ;	EMPTY	EMPTY
2	943	1	0	0	-1	sdp _ maerts _ request =	EMPTY	EMPTY
2	944	2	-1	0	-1	( struct sdp _ maerts _ request _ struct * ) netperf _ request . content . test _ specific _ data ;	EMPTY	EMPTY
2	945	2	-1	0	-1	sdp _ maerts _ response =	EMPTY	EMPTY
2	946	2	-1	0	-1	( struct sdp _ maerts _ response _ struct * ) netperf _ response . content . test _ specific _ data ;	EMPTY	EMPTY
2	947	2	-1	0	-1	sdp _ maerts _ result =	EMPTY	EMPTY
2	948	3	-1	0	-1	( struct sdp _ maerts _ results _ struct * ) netperf _ response . content . test _ specific _ data ;	EMPTY	EMPTY
2	950	1	1	0	-1	# ifdef want _ histogram	EMPTY	EMPTY
2	951	2	-1	0	-1	if ( verbosity > numconst ) {	EMPTY	EMPTY
2	952	2	-1	0	-1	time _ hist = hist _ new ( ) ;	EMPTY	EMPTY
2	953	2	-1	0	-1	}	EMPTY	EMPTY
2	954	3	-1	1	-1	# endif	EMPTY	EMPTY
2	960	1	1	1	-1	complete _ addrinfos ( & remote _ res	EMPTY	EMPTY
2	961	2	-1	0	-1	& local _ res	EMPTY	EMPTY
2	962	2	-1	0	-1	remote _ host	EMPTY	EMPTY
2	963	2	-1	0	-1	sock _ stream	EMPTY	EMPTY
2	964	2	-1	0	-1	ipproto _ tcp	EMPTY	EMPTY
2	965	3	-1	0	-1	numconst ) ;	EMPTY	EMPTY
2	967	1	0	0	-1	if ( print _ headers ) {	EMPTY	EMPTY
2	968	2	-1	0	-1	print _ top _ test _ header ( strlit  local _ res  remote _ res ) ;	EMPTY	EMPTY
2	969	3	-1	0	-1	}	EMPTY	EMPTY
2	971	1	0	0	-1	recv _ ring = null ;	EMPTY	EMPTY
2	972	2	-1	0	-1	confidence _ iteration = numconst ;	EMPTY	EMPTY
2	973	3	-1	0	-1	init _ stat ( ) ;	EMPTY	EMPTY
2	982	1	1	1	-1	while ( ( ( confidence < numconst ) && ( confidence _ iteration < iteration _ max ) ) ||	EMPTY	EMPTY
2	983	3	-1	0	-1	( confidence _ iteration <= iteration _ min ) ) {	EMPTY	EMPTY
2	988	1	1	1	-1	nummessages = numconst ;	EMPTY	EMPTY
2	989	2	-1	0	-1	bytes _ sent = numconst ;	EMPTY	EMPTY
2	990	3	-1	0	-1	times _ up = numconst ;	EMPTY	EMPTY
2	994	1	1	1	-1	local _ res -> ai _ family = af _ inet _ sdp ;	EMPTY	EMPTY
2	995	2	-1	0	-1	local _ res -> ai _ protocol = numconst ;	EMPTY	EMPTY
2	996	3	-1	0	-1	recv _ socket = create _ data _ socket ( local _ res ) ;	EMPTY	EMPTY
2	998	1	0	0	-1	if ( recv _ socket == invalid _ socket ) {	EMPTY	EMPTY
2	999	2	-1	0	-1	perror ( strlit ) ;	EMPTY	EMPTY
2	1000	2	-1	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	1001	3	-1	0	-1	}	EMPTY	EMPTY
2	1003	1	0	0	-1	if ( debug ) {	EMPTY	EMPTY
2	1004	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	1005	3	-1	0	-1	}	EMPTY	EMPTY
2	1013	1	1	1	-1	if ( recv _ size == numconst ) {	EMPTY	EMPTY
2	1014	2	-1	0	-1	if ( lsr _ size > numconst ) {	EMPTY	EMPTY
2	1015	2	-1	0	-1	recv _ size = lsr _ size ;	EMPTY	EMPTY
2	1016	2	-1	0	-1	}	EMPTY	EMPTY
2	1017	2	-1	0	-1	else {	EMPTY	EMPTY
2	1018	2	-1	0	-1	recv _ size = numconst ;	EMPTY	EMPTY
2	1019	2	-1	0	-1	}	EMPTY	EMPTY
2	1020	3	-1	0	-1	}	EMPTY	EMPTY
2	1030	1	1	1	-1	if ( recv _ width == numconst ) {	EMPTY	EMPTY
2	1031	2	-1	0	-1	recv _ width = ( lsr _ size / recv _ size ) + numconst ;	EMPTY	EMPTY
2	1032	2	-1	0	-1	if ( recv _ width == numconst ) recv _ width ++ ;	EMPTY	EMPTY
2	1033	3	-1	0	-1	}	EMPTY	EMPTY
2	1035	1	1	0	-1	if ( recv _ ring == null ) {	EMPTY	EMPTY
2	1040	2	-1	1	-1	recv _ ring = allocate _ buffer _ ring ( recv _ width	EMPTY	EMPTY
2	1041	2	-1	0	-1	recv _ size	EMPTY	EMPTY
2	1042	2	-1	0	-1	local _ recv _ align	EMPTY	EMPTY
2	1043	2	-1	0	-1	local _ recv _ offset ) ;	EMPTY	EMPTY
2	1044	3	-1	0	-1	}	EMPTY	EMPTY
2	1053	1	1	1	-1	if ( local _ cpu _ usage ) {	EMPTY	EMPTY
2	1054	2	-1	0	-1	local _ cpu _ rate = calibrate _ local _ cpu ( local _ cpu _ rate ) ;	EMPTY	EMPTY
2	1055	3	-1	0	-1	}	EMPTY	EMPTY
2	1057	1	0	0	-1	if ( ! no _ control ) {	EMPTY	EMPTY
2	1067	1	1	1	-1	netperf _ request . content . request _ type = do _ sdp _ maerts ;	EMPTY	EMPTY
2	1068	2	-1	0	-1	sdp _ maerts _ request -> send _ buf _ size = rss _ size _ req ;	EMPTY	EMPTY
2	1069	2	-1	0	-1	sdp _ maerts _ request -> recv _ buf _ size = rsr _ size _ req ;	EMPTY	EMPTY
2	1070	2	-1	0	-1	sdp _ maerts _ request -> send _ size = send _ size ;	EMPTY	EMPTY
2	1071	2	-1	0	-1	sdp _ maerts _ request -> no _ delay = rem _ nodelay ;	EMPTY	EMPTY
2	1072	2	-1	0	-1	sdp _ maerts _ request -> send _ alignment = remote _ send _ align ;	EMPTY	EMPTY
2	1073	2	-1	0	-1	sdp _ maerts _ request -> send _ offset = remote _ send _ offset ;	EMPTY	EMPTY
2	1074	2	-1	0	-1	sdp _ maerts _ request -> measure _ cpu = remote _ cpu _ usage ;	EMPTY	EMPTY
2	1075	2	-1	0	-1	sdp _ maerts _ request -> cpu _ rate = remote _ cpu _ rate ;	EMPTY	EMPTY
2	1076	2	-1	0	-1	if ( test _ time ) {	EMPTY	EMPTY
2	1077	2	-1	0	-1	sdp _ maerts _ request -> test _ length = test _ time ;	EMPTY	EMPTY
2	1078	2	-1	0	-1	}	EMPTY	EMPTY
2	1079	2	-1	0	-1	else {	EMPTY	EMPTY
2	1080	2	-1	0	-1	sdp _ maerts _ request -> test _ length = test _ bytes ;	EMPTY	EMPTY
2	1081	2	-1	0	-1	}	EMPTY	EMPTY
2	1082	2	-1	0	-1	sdp _ maerts _ request -> so _ rcvavoid = rem _ rcvavoid ;	EMPTY	EMPTY
2	1083	2	-1	0	-1	sdp _ maerts _ request -> so _ sndavoid = rem _ sndavoid ;	EMPTY	EMPTY
2	1084	2	-1	0	-1	# ifdef dirty	EMPTY	EMPTY
2	1085	2	-1	0	-1	sdp _ maerts _ request -> dirty _ count = rem _ dirty _ count ;	EMPTY	EMPTY
2	1086	2	-1	0	-1	sdp _ maerts _ request -> clean _ count = rem _ clean _ count ;	EMPTY	EMPTY
2	1087	2	-1	1	-1	# endif	EMPTY	EMPTY
2	1088	2	-1	0	-1	sdp _ maerts _ request -> port = atoi ( remote _ data _ port ) ;	EMPTY	EMPTY
2	1089	2	-1	0	-1	sdp _ maerts _ request -> ipfamily = af _ to _ nf ( remote _ res -> ai _ family ) ;	EMPTY	EMPTY
2	1090	2	-1	0	-1	if ( debug > numconst ) {	EMPTY	EMPTY
2	1091	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	1092	2	-1	0	-1	strlit ) ;	EMPTY	EMPTY
2	1093	3	-1	0	-1	}	EMPTY	EMPTY
2	1095	1	0	0	-1	send _ request ( ) ;	EMPTY	EMPTY
2	1108	1	1	1	-1	recv _ response ( ) ;	EMPTY	EMPTY
2	1110	1	0	0	-1	if ( ! netperf _ response . content . serv _ errno ) {	EMPTY	EMPTY
2	1111	2	-1	0	-1	if ( debug )	EMPTY	EMPTY
2	1112	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	1113	2	-1	0	-1	rsr _ size = sdp _ maerts _ response -> recv _ buf _ size ;	EMPTY	EMPTY
2	1114	2	-1	0	-1	rss _ size = sdp _ maerts _ response -> send _ buf _ size ;	EMPTY	EMPTY
2	1115	2	-1	0	-1	rem _ nodelay = sdp _ maerts _ response -> no _ delay ;	EMPTY	EMPTY
2	1116	2	-1	0	-1	remote _ cpu _ usage = sdp _ maerts _ response -> measure _ cpu ;	EMPTY	EMPTY
2	1117	2	-1	0	-1	remote _ cpu _ rate = sdp _ maerts _ response -> cpu _ rate ;	EMPTY	EMPTY
2	1118	3	-1	0	-1	send _ size = sdp _ maerts _ response -> send _ size ;	EMPTY	EMPTY
2	1122	1	1	1	-1	set _ port _ number ( remote _ res	EMPTY	EMPTY
2	1123	2	-1	0	-1	( short ) sdp _ maerts _ response -> data _ port _ number ) ;	EMPTY	EMPTY
2	1124	2	-1	0	-1	rem _ rcvavoid = sdp _ maerts _ response -> so _ rcvavoid ;	EMPTY	EMPTY
2	1125	2	-1	0	-1	rem _ sndavoid = sdp _ maerts _ response -> so _ sndavoid ;	EMPTY	EMPTY
2	1126	2	-1	0	-1	}	EMPTY	EMPTY
2	1127	2	-1	0	-1	else {	EMPTY	EMPTY
2	1128	2	-1	0	-1	set _ errno ( netperf _ response . content . serv _ errno ) ;	EMPTY	EMPTY
2	1129	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	1130	2	-1	0	-1	strlit	EMPTY	EMPTY
2	1131	2	-1	0	-1	netperf _ response . content . serv _ errno ) ;	EMPTY	EMPTY
2	1132	2	-1	0	-1	perror ( strlit ) ;	EMPTY	EMPTY
2	1133	3	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	1135	1	0	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	1136	2	-1	0	-1	}	EMPTY	EMPTY
2	1137	3	-1	0	-1	}	EMPTY	EMPTY
2	1139	1	0	0	-1	# ifdef want _ demo	EMPTY	EMPTY
2	1140	2	-1	0	-1	demo _ stream _ setup ( lsr _ size  rss _ size )	EMPTY	EMPTY
2	1141	3	-1	0	-1	# endif	EMPTY	EMPTY
2	1144	1	1	1	-1	if ( connect ( recv _ socket	EMPTY	EMPTY
2	1145	2	-1	0	-1	remote _ res -> ai _ addr	EMPTY	EMPTY
2	1146	2	-1	0	-1	remote _ res -> ai _ addrlen ) == invalid _ socket ) {	EMPTY	EMPTY
2	1147	2	-1	0	-1	perror ( strlit ) ;	EMPTY	EMPTY
2	1148	2	-1	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	1149	3	-1	0	-1	}	EMPTY	EMPTY
2	1161	1	1	1	-1	if ( test _ time ) {	EMPTY	EMPTY
2	1163	2	-1	1	-1	times _ up = numconst ;	EMPTY	EMPTY
2	1164	2	-1	0	-1	bytes _ remaining = numconst ;	EMPTY	EMPTY
2	1171	2	-1	1	-1	if ( ! no _ control ) {	EMPTY	EMPTY
2	1175	2	-1	1	-1	start _ timer ( test _ time + pad _ time ) ;	EMPTY	EMPTY
2	1176	2	-1	0	-1	}	EMPTY	EMPTY
2	1177	2	-1	0	-1	else {	EMPTY	EMPTY
2	1179	2	-1	1	-1	start _ timer ( test _ time ) ;	EMPTY	EMPTY
2	1180	2	-1	0	-1	}	EMPTY	EMPTY
2	1181	2	-1	0	-1	}	EMPTY	EMPTY
2	1182	2	-1	0	-1	else {	EMPTY	EMPTY
2	1185	2	-1	1	-1	printf ( strlit ) ;	EMPTY	EMPTY
2	1186	2	-1	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	1187	3	-1	0	-1	}	EMPTY	EMPTY
2	1193	1	1	1	-1	cpu _ start ( local _ cpu _ usage ) ;	EMPTY	EMPTY
2	1195	1	1	0	-1	# ifdef want _ intervals	EMPTY	EMPTY
2	1196	2	-1	0	-1	intervals _ init ( ) ;	EMPTY	EMPTY
2	1197	3	-1	1	-1	# endif	EMPTY	EMPTY
2	1201	1	1	1	-1	# ifdef want _ demo	EMPTY	EMPTY
2	1202	2	-1	0	-1	if ( demo _ mode ) {	EMPTY	EMPTY
2	1203	2	-1	0	-1	hist _ timestamp ( demo _ one _ ptr ) ;	EMPTY	EMPTY
2	1204	2	-1	0	-1	}	EMPTY	EMPTY
2	1205	3	-1	0	-1	# endif	EMPTY	EMPTY
2	1212	1	1	1	-1	# ifdef want _ histogram	EMPTY	EMPTY
2	1213	2	-1	0	-1	if ( verbosity > numconst ) {	EMPTY	EMPTY
2	1218	2	-1	1	-1	hist _ timestamp ( & time _ one ) ;	EMPTY	EMPTY
2	1219	2	-1	0	-1	}	EMPTY	EMPTY
2	1220	3	-1	1	-1	# endif	EMPTY	EMPTY
2	1222	1	0	0	-1	while ( ( ! times _ up ) && ( len = recv ( recv _ socket	EMPTY	EMPTY
2	1223	2	-1	0	-1	recv _ ring -> buffer _ ptr	EMPTY	EMPTY
2	1224	2	-1	0	-1	recv _ size	EMPTY	EMPTY
2	1225	3	-1	0	-1	numconst ) ) > numconst ) {	EMPTY	EMPTY
2	1227	1	1	0	-1	# ifdef want _ histogram	EMPTY	EMPTY
2	1228	2	-1	0	-1	if ( verbosity > numconst ) {	EMPTY	EMPTY
2	1230	2	-1	1	-1	hist _ timestamp ( & time _ two ) ;	EMPTY	EMPTY
2	1231	2	-1	0	-1	hist _ add ( time _ hist  delta _ micro ( & time _ one  & time _ two ) ) ;	EMPTY	EMPTY
2	1232	2	-1	0	-1	}	EMPTY	EMPTY
2	1233	3	-1	1	-1	# endif	EMPTY	EMPTY
2	1235	1	1	0	-1	# ifdef dirty	EMPTY	EMPTY
2	1236	2	-1	0	-1	access _ buffer ( recv _ ring -> buffer _ ptr	EMPTY	EMPTY
2	1237	2	-1	0	-1	recv _ size	EMPTY	EMPTY
2	1238	2	-1	0	-1	loc _ dirty _ count	EMPTY	EMPTY
2	1239	2	-1	0	-1	loc _ clean _ count ) ;	EMPTY	EMPTY
2	1240	3	-1	1	-1	# endif	EMPTY	EMPTY
2	1242	1	0	0	-1	# ifdef want _ demo	EMPTY	EMPTY
2	1243	2	-1	0	-1	demo _ stream _ interval ( len ) ;	EMPTY	EMPTY
2	1244	3	-1	0	-1	# endif	EMPTY	EMPTY
2	1246	1	1	0	-1	# ifdef want _ intervals	EMPTY	EMPTY
2	1247	2	-1	0	-1	intervals _ wait ( ) ;	EMPTY	EMPTY
2	1248	3	-1	1	-1	# endif	EMPTY	EMPTY
2	1255	1	1	1	-1	nummessages ++ ;	EMPTY	EMPTY
2	1256	2	-1	0	-1	recv _ ring = recv _ ring -> next ;	EMPTY	EMPTY
2	1257	2	-1	0	-1	if ( bytes _ remaining ) {	EMPTY	EMPTY
2	1258	2	-1	0	-1	bytes _ remaining -= len ;	EMPTY	EMPTY
2	1259	3	-1	0	-1	}	EMPTY	EMPTY
2	1261	1	0	0	-1	local _ bytes _ recvd += len ;	EMPTY	EMPTY
2	1263	1	1	0	-1	# ifdef want _ histogram	EMPTY	EMPTY
2	1264	2	-1	0	-1	if ( verbosity > numconst ) {	EMPTY	EMPTY
2	1267	2	-1	1	-1	hist _ timestamp ( & time _ one ) ;	EMPTY	EMPTY
2	1268	2	-1	0	-1	}	EMPTY	EMPTY
2	1269	3	-1	1	-1	# endif	EMPTY	EMPTY
2	1271	1	0	0	-1	}	EMPTY	EMPTY
2	1274	1	1	1	-1	if ( ( ( len < numconst ) || socket _ eintr ( len ) ) && ( ! no _ control ) ) {	EMPTY	EMPTY
2	1275	2	-1	0	-1	perror ( strlit ) ;	EMPTY	EMPTY
2	1276	2	-1	0	-1	printf ( strlit  len ) ;	EMPTY	EMPTY
2	1277	2	-1	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	1278	3	-1	0	-1	}	EMPTY	EMPTY
2	1289	1	1	1	-1	if ( verbosity > numconst ) {	EMPTY	EMPTY
2	1290	2	-1	0	-1	sdp _ mss = - numconst ;	EMPTY	EMPTY
2	1291	2	-1	0	-1	get _ sdp _ info ( recv _ socket  & sdp _ mss ) ;	EMPTY	EMPTY
2	1292	3	-1	0	-1	}	EMPTY	EMPTY
2	1294	1	0	0	-1	if ( shutdown ( recv _ socket  shut _ wr ) == socket _ error ) {	EMPTY	EMPTY
2	1295	2	-1	0	-1	perror ( strlit ) ;	EMPTY	EMPTY
2	1296	2	-1	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	1297	3	-1	0	-1	}	EMPTY	EMPTY
2	1299	1	0	0	-1	stop _ timer ( ) ;	EMPTY	EMPTY
2	1305	1	1	1	-1	cpu _ stop ( local _ cpu _ usage  & elapsed _ time ) ;	EMPTY	EMPTY
2	1313	1	1	1	-1	close ( recv _ socket ) ;	EMPTY	EMPTY
2	1315	1	0	0	-1	if ( ! no _ control ) {	EMPTY	EMPTY
2	1321	1	1	1	-1	recv _ response ( ) ;	EMPTY	EMPTY
2	1322	2	-1	0	-1	if ( ! netperf _ response . content . serv _ errno ) {	EMPTY	EMPTY
2	1323	2	-1	0	-1	if ( debug )	EMPTY	EMPTY
2	1324	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	1325	2	-1	0	-1	}	EMPTY	EMPTY
2	1326	2	-1	0	-1	else {	EMPTY	EMPTY
2	1327	2	-1	0	-1	set _ errno ( netperf _ response . content . serv _ errno ) ;	EMPTY	EMPTY
2	1328	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	1329	2	-1	0	-1	strlit	EMPTY	EMPTY
2	1330	2	-1	0	-1	netperf _ response . content . serv _ errno ) ;	EMPTY	EMPTY
2	1331	2	-1	0	-1	perror ( strlit ) ;	EMPTY	EMPTY
2	1332	3	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	1334	1	0	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	1335	3	-1	0	-1	}	EMPTY	EMPTY
2	1347	1	1	1	-1	bytes _ sent = ntohd ( sdp _ maerts _ result -> bytes _ sent ) ;	EMPTY	EMPTY
2	1348	2	-1	0	-1	}	EMPTY	EMPTY
2	1349	2	-1	0	-1	else {	EMPTY	EMPTY
2	1350	2	-1	0	-1	bytes _ sent = ( double ) local _ bytes _ recvd ;	EMPTY	EMPTY
2	1351	3	-1	0	-1	}	EMPTY	EMPTY
2	1354	1	0	0	-1	thruput = calc _ thruput ( bytes _ sent ) ;	EMPTY	EMPTY
2	1356	1	1	0	-1	if ( local _ cpu _ usage || remote _ cpu _ usage ) {	EMPTY	EMPTY
2	1362	3	-1	1	-1	if ( local _ cpu _ usage ) {	EMPTY	EMPTY
2	1364	1	0	0	-1	local _ cpu _ utilization = calc _ cpu _ util ( numconst ) ;	EMPTY	EMPTY
2	1365	2	-1	0	-1	local _ service _ demand = calc _ service _ demand ( bytes _ sent	EMPTY	EMPTY
2	1366	2	-1	0	-1	numconst	EMPTY	EMPTY
2	1367	2	-1	0	-1	numconst	EMPTY	EMPTY
2	1368	2	-1	0	-1	numconst ) ;	EMPTY	EMPTY
2	1369	2	-1	0	-1	}	EMPTY	EMPTY
2	1370	2	-1	0	-1	else {	EMPTY	EMPTY
2	1371	2	-1	0	-1	local _ cpu _ utilization = ( float ) - numconst ;	EMPTY	EMPTY
2	1372	2	-1	0	-1	local _ service _ demand = ( float ) - numconst ;	EMPTY	EMPTY
2	1373	3	-1	0	-1	}	EMPTY	EMPTY
2	1375	1	0	0	-1	if ( remote _ cpu _ usage ) {	EMPTY	EMPTY
2	1377	1	1	0	-1	remote _ cpu _ utilization = sdp _ maerts _ result -> cpu _ util ;	EMPTY	EMPTY
2	1378	2	-1	0	-1	remote _ service _ demand = calc _ service _ demand ( bytes _ sent	EMPTY	EMPTY
2	1379	2	-1	0	-1	numconst	EMPTY	EMPTY
2	1380	2	-1	0	-1	remote _ cpu _ utilization	EMPTY	EMPTY
2	1381	2	-1	0	-1	sdp _ maerts _ result -> num _ cpus ) ;	EMPTY	EMPTY
2	1382	2	-1	0	-1	}	EMPTY	EMPTY
2	1383	2	-1	0	-1	else {	EMPTY	EMPTY
2	1384	2	-1	0	-1	remote _ cpu _ utilization = ( float ) - numconst ;	EMPTY	EMPTY
2	1385	2	-1	0	-1	remote _ service _ demand = ( float ) - numconst ;	EMPTY	EMPTY
2	1386	2	-1	0	-1	}	EMPTY	EMPTY
2	1387	2	-1	0	-1	}	EMPTY	EMPTY
2	1388	2	-1	0	-1	else {	EMPTY	EMPTY
2	1391	2	-1	1	-1	local _ cpu _ utilization = ( float ) - numconst ;	EMPTY	EMPTY
2	1392	2	-1	0	-1	local _ service _ demand = ( float ) - numconst ;	EMPTY	EMPTY
2	1393	2	-1	0	-1	remote _ cpu _ utilization = ( float ) - numconst ;	EMPTY	EMPTY
2	1394	2	-1	0	-1	remote _ service _ demand = ( float ) - numconst ;	EMPTY	EMPTY
2	1395	3	-1	0	-1	}	EMPTY	EMPTY
2	1401	1	1	1	-1	calculate _ confidence ( confidence _ iteration	EMPTY	EMPTY
2	1402	2	-1	0	-1	elapsed _ time	EMPTY	EMPTY
2	1403	2	-1	0	-1	thruput	EMPTY	EMPTY
2	1404	2	-1	0	-1	local _ cpu _ utilization	EMPTY	EMPTY
2	1405	2	-1	0	-1	remote _ cpu _ utilization	EMPTY	EMPTY
2	1406	2	-1	0	-1	local _ service _ demand	EMPTY	EMPTY
2	1407	3	-1	0	-1	remote _ service _ demand ) ;	EMPTY	EMPTY
2	1410	1	0	0	-1	confidence _ iteration ++ ;	EMPTY	EMPTY
2	1411	3	-1	0	-1	}	EMPTY	EMPTY
2	1421	1	1	1	-1	retrieve _ confident _ values ( & elapsed _ time	EMPTY	EMPTY
2	1422	2	-1	0	-1	& thruput	EMPTY	EMPTY
2	1423	2	-1	0	-1	& local _ cpu _ utilization	EMPTY	EMPTY
2	1424	2	-1	0	-1	& remote _ cpu _ utilization	EMPTY	EMPTY
2	1425	2	-1	0	-1	& local _ service _ demand	EMPTY	EMPTY
2	1426	3	-1	0	-1	& remote _ service _ demand ) ;	EMPTY	EMPTY
2	1437	1	1	1	-1	if ( confidence < numconst ) {	EMPTY	EMPTY
2	1439	2	-1	1	-1	if ( iteration _ max > numconst ) {	EMPTY	EMPTY
2	1440	2	-1	0	-1	display _ confidence ( ) ;	EMPTY	EMPTY
2	1441	2	-1	0	-1	}	EMPTY	EMPTY
2	1442	3	-1	0	-1	}	EMPTY	EMPTY
2	1444	1	0	0	-1	if ( local _ cpu _ usage || remote _ cpu _ usage ) {	EMPTY	EMPTY
2	1445	2	-1	0	-1	local _ cpu _ method = format _ cpu _ method ( cpu _ method ) ;	EMPTY	EMPTY
2	1446	3	-1	0	-1	remote _ cpu _ method = format _ cpu _ method ( sdp _ maerts _ result -> cpu _ method ) ;	EMPTY	EMPTY
2	1448	1	0	0	-1	switch ( verbosity ) {	EMPTY	EMPTY
2	1449	2	-1	0	-1	case numconst :	EMPTY	EMPTY
2	1450	2	-1	0	-1	if ( local _ cpu _ usage ) {	EMPTY	EMPTY
2	1451	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	1452	2	-1	0	-1	cpu _ fmt _ 0	EMPTY	EMPTY
2	1453	2	-1	0	-1	local _ service _ demand	EMPTY	EMPTY
2	1454	2	-1	0	-1	local _ cpu _ method	EMPTY	EMPTY
2	1455	2	-1	0	-1	( ( print _ headers ) ||	EMPTY	EMPTY
2	1456	2	-1	0	-1	( result _ brand == null ) ) ? strlit : result _ brand ) ;	EMPTY	EMPTY
2	1457	2	-1	0	-1	}	EMPTY	EMPTY
2	1458	2	-1	0	-1	else {	EMPTY	EMPTY
2	1459	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	1460	2	-1	0	-1	cpu _ fmt _ 0	EMPTY	EMPTY
2	1461	2	-1	0	-1	remote _ service _ demand	EMPTY	EMPTY
2	1462	2	-1	0	-1	remote _ cpu _ method	EMPTY	EMPTY
2	1463	2	-1	0	-1	( ( print _ headers ) ||	EMPTY	EMPTY
2	1464	2	-1	0	-1	( result _ brand == null ) ) ? strlit : result _ brand ) ;	EMPTY	EMPTY
2	1465	2	-1	0	-1	}	EMPTY	EMPTY
2	1466	2	-1	0	-1	break ;	EMPTY	EMPTY
2	1467	2	-1	0	-1	case numconst :	EMPTY	EMPTY
2	1468	2	-1	0	-1	case numconst :	EMPTY	EMPTY
2	1469	2	-1	0	-1	if ( print _ headers ) {	EMPTY	EMPTY
2	1470	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	1471	2	-1	0	-1	cpu _ title	EMPTY	EMPTY
2	1472	2	-1	0	-1	format _ units ( )	EMPTY	EMPTY
2	1473	2	-1	0	-1	local _ cpu _ method	EMPTY	EMPTY
2	1474	2	-1	0	-1	remote _ cpu _ method ) ;	EMPTY	EMPTY
2	1475	3	-1	0	-1	}	EMPTY	EMPTY
2	1477	1	1	0	-1	fprintf ( where	EMPTY	EMPTY
2	1478	2	-1	1	-1	cpu _ fmt _ 1	EMPTY	EMPTY
2	1479	2	-1	1	-1	rsr _ size	EMPTY	EMPTY
2	1480	2	-1	1	-1	lss _ size	EMPTY	EMPTY
2	1481	2	-1	1	-1	send _ size	EMPTY	EMPTY
2	1482	2	-1	1	-1	elapsed _ time	EMPTY	EMPTY
2	1483	2	-1	1	-1	thruput	EMPTY	EMPTY
2	1484	2	-1	1	-1	local _ cpu _ utilization	EMPTY	EMPTY
2	1485	2	-1	1	-1	remote _ cpu _ utilization	EMPTY	EMPTY
2	1486	2	-1	1	-1	local _ service _ demand	EMPTY	EMPTY
2	1487	2	-1	1	-1	remote _ service _ demand	EMPTY	EMPTY
2	1488	2	-1	0	-1	( ( print _ headers ) ||	EMPTY	EMPTY
2	1489	2	-1	0	-1	( result _ brand == null ) ) ? strlit : result _ brand ) ;	EMPTY	EMPTY
2	1490	2	-1	0	-1	break ;	EMPTY	EMPTY
2	1491	2	-1	0	-1	}	EMPTY	EMPTY
2	1492	2	-1	0	-1	}	EMPTY	EMPTY
2	1493	3	-1	0	-1	else {	EMPTY	EMPTY
2	1496	1	1	1	-1	switch ( verbosity ) {	EMPTY	EMPTY
2	1497	2	-1	0	-1	case numconst :	EMPTY	EMPTY
2	1498	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	1499	2	-1	0	-1	tput _ fmt _ 0	EMPTY	EMPTY
2	1500	2	-1	0	-1	thruput	EMPTY	EMPTY
2	1501	2	-1	0	-1	( ( print _ headers ) ||	EMPTY	EMPTY
2	1502	2	-1	0	-1	( result _ brand == null ) ) ? strlit : result _ brand ) ;	EMPTY	EMPTY
2	1503	2	-1	0	-1	break ;	EMPTY	EMPTY
2	1504	2	-1	0	-1	case numconst :	EMPTY	EMPTY
2	1505	2	-1	0	-1	case numconst :	EMPTY	EMPTY
2	1506	2	-1	0	-1	if ( print _ headers ) {	EMPTY	EMPTY
2	1507	2	-1	0	-1	fprintf ( where  tput _ title  format _ units ( ) ) ;	EMPTY	EMPTY
2	1508	2	-1	0	-1	}	EMPTY	EMPTY
2	1509	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	1510	2	-1	1	-1	tput _ fmt _ 1	EMPTY	EMPTY
2	1511	2	-1	1	-1	lsr _ size	EMPTY	EMPTY
2	1512	2	-1	1	-1	rss _ size	EMPTY	EMPTY
2	1513	2	-1	1	-1	send _ size	EMPTY	EMPTY
2	1514	2	-1	1	-1	elapsed _ time	EMPTY	EMPTY
2	1515	2	-1	1	-1	thruput	EMPTY	EMPTY
2	1516	2	-1	0	-1	( ( print _ headers ) ||	EMPTY	EMPTY
2	1517	2	-1	0	-1	( result _ brand == null ) ) ? strlit : result _ brand ) ;	EMPTY	EMPTY
2	1518	2	-1	0	-1	break ;	EMPTY	EMPTY
2	1519	2	-1	0	-1	}	EMPTY	EMPTY
2	1520	3	-1	0	-1	}	EMPTY	EMPTY
2	1528	1	1	1	-1	if ( verbosity > numconst ) {	EMPTY	EMPTY
2	1537	1	1	1	-1	fprintf ( where	EMPTY	EMPTY
2	1538	2	-1	0	-1	ksink _ fmt	EMPTY	EMPTY
2	1539	2	-1	0	-1	strlit	EMPTY	EMPTY
2	1540	2	-1	0	-1	strlit	EMPTY	EMPTY
2	1541	2	-1	0	-1	strlit	EMPTY	EMPTY
2	1542	2	-1	0	-1	local _ recv _ align	EMPTY	EMPTY
2	1543	2	-1	0	-1	remote _ recv _ align	EMPTY	EMPTY
2	1544	2	-1	0	-1	local _ recv _ offset	EMPTY	EMPTY
2	1545	2	-1	0	-1	remote _ recv _ offset	EMPTY	EMPTY
2	1546	2	-1	0	-1	bytes _ sent	EMPTY	EMPTY
2	1547	2	-1	0	-1	bytes _ sent / ( double ) nummessages	EMPTY	EMPTY
2	1548	2	-1	0	-1	nummessages	EMPTY	EMPTY
2	1549	2	-1	0	-1	bytes _ sent / ( double ) sdp _ maerts _ result -> send _ calls	EMPTY	EMPTY
2	1550	2	-1	0	-1	sdp _ maerts _ result -> send _ calls ) ;	EMPTY	EMPTY
2	1551	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	1552	2	-1	0	-1	ksink _ fmt2	EMPTY	EMPTY
2	1553	2	-1	0	-1	sdp _ mss ) ;	EMPTY	EMPTY
2	1554	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	1555	2	-1	0	-1	# ifdef want _ histogram	EMPTY	EMPTY
2	1556	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	1557	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	1558	2	-1	0	-1	hist _ report ( time _ hist ) ;	EMPTY	EMPTY
2	1559	2	-1	1	-1	# endif	EMPTY	EMPTY
2	1560	3	-1	0	-1	}	EMPTY	EMPTY
2	1562	1	0	0	-1	}	EMPTY	EMPTY
2	1567	1	1	1	-1	void	EMPTY	EMPTY
2	1568	2	-1	0	-1	recv _ sdp _ stream ( )	EMPTY	EMPTY
2	1569	3	-1	0	-1	{	EMPTY	EMPTY
2	1571	1	0	0	-1	struct sockaddr _ in myaddr _ in  peeraddr _ in ;	EMPTY	EMPTY
2	1572	2	-1	0	-1	socket s _ listen  s _ data ;	EMPTY	EMPTY
2	1573	2	-1	0	-1	netperf _ socklen _ t addrlen ;	EMPTY	EMPTY
2	1574	2	-1	0	-1	int len ;	EMPTY	EMPTY
2	1575	2	-1	0	-1	unsigned int receive _ calls ;	EMPTY	EMPTY
2	1576	2	-1	0	-1	float elapsed _ time ;	EMPTY	EMPTY
2	1577	3	-1	0	-1	double bytes _ received ;	EMPTY	EMPTY
2	1579	1	0	0	-1	struct ring _ elt * recv _ ring ;	EMPTY	EMPTY
2	1581	1	0	0	-1	struct addrinfo * local _ res ;	EMPTY	EMPTY
2	1582	2	-1	0	-1	char local _ name [ bufsiz ] ;	EMPTY	EMPTY
2	1583	3	-1	0	-1	char port _ buffer [ portbufsize ] ;	EMPTY	EMPTY
2	1585	1	1	0	-1	# ifdef do _ select	EMPTY	EMPTY
2	1586	2	-1	0	-1	fd _ set readfds ;	EMPTY	EMPTY
2	1587	2	-1	0	-1	struct timeval timeout ;	EMPTY	EMPTY
2	1588	3	-1	1	-1	# endif	EMPTY	EMPTY
2	1590	1	0	0	-1	struct sdp _ stream _ request _ struct * sdp _ stream _ request ;	EMPTY	EMPTY
2	1591	2	-1	0	-1	struct sdp _ stream _ response _ struct * sdp _ stream _ response ;	EMPTY	EMPTY
2	1592	3	-1	0	-1	struct sdp _ stream _ results _ struct * sdp _ stream _ results ;	EMPTY	EMPTY
2	1594	1	1	0	-1	# ifdef do _ select	EMPTY	EMPTY
2	1595	2	-1	0	-1	fd _ zero ( & readfds ) ;	EMPTY	EMPTY
2	1596	2	-1	0	-1	timeout . tv _ sec = numconst ;	EMPTY	EMPTY
2	1597	2	-1	0	-1	timeout . tv _ usec = numconst ;	EMPTY	EMPTY
2	1598	3	-1	1	-1	# endif	EMPTY	EMPTY
2	1600	1	0	0	-1	sdp _ stream _ request =	EMPTY	EMPTY
2	1601	2	-1	0	-1	( struct sdp _ stream _ request _ struct * ) netperf _ request . content . test _ specific _ data ;	EMPTY	EMPTY
2	1602	2	-1	0	-1	sdp _ stream _ response =	EMPTY	EMPTY
2	1603	2	-1	0	-1	( struct sdp _ stream _ response _ struct * ) netperf _ response . content . test _ specific _ data ;	EMPTY	EMPTY
2	1604	2	-1	0	-1	sdp _ stream _ results =	EMPTY	EMPTY
2	1605	3	-1	0	-1	( struct sdp _ stream _ results _ struct * ) netperf _ response . content . test _ specific _ data ;	EMPTY	EMPTY
2	1607	1	0	0	-1	if ( debug ) {	EMPTY	EMPTY
2	1608	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	1609	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	1610	3	-1	0	-1	}	EMPTY	EMPTY
2	1625	1	1	1	-1	if ( debug ) {	EMPTY	EMPTY
2	1626	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	1627	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	1628	3	-1	0	-1	}	EMPTY	EMPTY
2	1630	1	0	0	-1	netperf _ response . content . response _ type = sdp _ stream _ response ;	EMPTY	EMPTY
2	1632	1	0	0	-1	if ( debug ) {	EMPTY	EMPTY
2	1633	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	1634	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	1635	3	-1	0	-1	}	EMPTY	EMPTY
2	1640	1	1	1	-1	if ( debug ) {	EMPTY	EMPTY
2	1641	2	-1	0	-1	fprintf ( where  strlit	EMPTY	EMPTY
2	1642	2	-1	0	-1	sdp _ stream _ request -> recv _ alignment ) ;	EMPTY	EMPTY
2	1643	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	1644	3	-1	0	-1	}	EMPTY	EMPTY
2	1650	1	1	1	-1	lss _ size _ req = sdp _ stream _ request -> send _ buf _ size ;	EMPTY	EMPTY
2	1651	2	-1	0	-1	lsr _ size _ req = sdp _ stream _ request -> recv _ buf _ size ;	EMPTY	EMPTY
2	1652	2	-1	0	-1	loc _ nodelay = sdp _ stream _ request -> no _ delay ;	EMPTY	EMPTY
2	1653	2	-1	0	-1	loc _ rcvavoid = sdp _ stream _ request -> so _ rcvavoid ;	EMPTY	EMPTY
2	1654	3	-1	0	-1	loc _ sndavoid = sdp _ stream _ request -> so _ sndavoid ;	EMPTY	EMPTY
2	1656	1	0	0	-1	set _ hostname _ and _ port ( local _ name	EMPTY	EMPTY
2	1657	2	-1	0	-1	port _ buffer	EMPTY	EMPTY
2	1658	2	-1	0	-1	nf _ to _ af ( sdp _ stream _ request -> ipfamily )	EMPTY	EMPTY
2	1659	3	-1	0	-1	sdp _ stream _ request -> port ) ;	EMPTY	EMPTY
2	1661	1	0	0	-1	local _ res = complete _ addrinfo ( local _ name	EMPTY	EMPTY
2	1662	2	-1	0	-1	local _ name	EMPTY	EMPTY
2	1663	2	-1	0	-1	port _ buffer	EMPTY	EMPTY
2	1664	2	-1	0	-1	nf _ to _ af ( sdp _ stream _ request -> ipfamily )	EMPTY	EMPTY
2	1665	2	-1	0	-1	sock _ stream	EMPTY	EMPTY
2	1666	2	-1	0	-1	ipproto _ tcp	EMPTY	EMPTY
2	1667	3	-1	0	-1	numconst ) ;	EMPTY	EMPTY
2	1670	1	1	1	-1	local _ res -> ai _ family = af _ inet _ sdp ;	EMPTY	EMPTY
2	1671	2	-1	0	-1	local _ res -> ai _ protocol = numconst ;	EMPTY	EMPTY
2	1672	3	-1	0	-1	s _ listen = create _ data _ socket ( local _ res ) ;	EMPTY	EMPTY
2	1674	1	0	0	-1	if ( s _ listen == invalid _ socket ) {	EMPTY	EMPTY
2	1675	2	-1	0	-1	netperf _ response . content . serv _ errno = errno ;	EMPTY	EMPTY
2	1676	2	-1	0	-1	send _ response ( ) ;	EMPTY	EMPTY
2	1677	2	-1	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	1678	3	-1	0	-1	}	EMPTY	EMPTY
2	1680	1	1	0	-1	# ifdef win32	EMPTY	EMPTY
2	1684	2	-1	1	-1	win _ kludge _ socket2 = s _ listen ;	EMPTY	EMPTY
2	1685	3	-1	0	-1	# endif	EMPTY	EMPTY
2	1688	1	1	1	-1	if ( sdp _ stream _ request -> receive _ size == numconst ) {	EMPTY	EMPTY
2	1689	2	-1	0	-1	if ( lsr _ size > numconst ) {	EMPTY	EMPTY
2	1690	2	-1	0	-1	recv _ size = lsr _ size ;	EMPTY	EMPTY
2	1691	2	-1	0	-1	}	EMPTY	EMPTY
2	1692	2	-1	0	-1	else {	EMPTY	EMPTY
2	1693	2	-1	0	-1	recv _ size = numconst ;	EMPTY	EMPTY
2	1694	2	-1	0	-1	}	EMPTY	EMPTY
2	1695	2	-1	0	-1	}	EMPTY	EMPTY
2	1696	2	-1	0	-1	else {	EMPTY	EMPTY
2	1697	2	-1	0	-1	recv _ size = sdp _ stream _ request -> receive _ size ;	EMPTY	EMPTY
2	1698	3	-1	0	-1	}	EMPTY	EMPTY
2	1707	1	1	1	-1	if ( recv _ width == numconst ) {	EMPTY	EMPTY
2	1708	2	-1	0	-1	recv _ width = ( lsr _ size / recv _ size ) + numconst ;	EMPTY	EMPTY
2	1709	2	-1	0	-1	if ( recv _ width == numconst ) recv _ width ++ ;	EMPTY	EMPTY
2	1710	3	-1	0	-1	}	EMPTY	EMPTY
2	1712	1	0	0	-1	recv _ ring = allocate _ buffer _ ring ( recv _ width	EMPTY	EMPTY
2	1713	2	-1	0	-1	recv _ size	EMPTY	EMPTY
2	1714	2	-1	0	-1	sdp _ stream _ request -> recv _ alignment	EMPTY	EMPTY
2	1715	3	-1	0	-1	sdp _ stream _ request -> recv _ offset ) ;	EMPTY	EMPTY
2	1717	1	0	0	-1	if ( debug ) {	EMPTY	EMPTY
2	1718	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	1719	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	1720	3	-1	0	-1	}	EMPTY	EMPTY
2	1723	1	1	1	-1	if ( listen ( s _ listen  numconst ) == socket _ error ) {	EMPTY	EMPTY
2	1724	2	-1	0	-1	netperf _ response . content . serv _ errno = errno ;	EMPTY	EMPTY
2	1725	2	-1	0	-1	close ( s _ listen ) ;	EMPTY	EMPTY
2	1726	3	-1	0	-1	send _ response ( ) ;	EMPTY	EMPTY
2	1728	1	0	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	1729	3	-1	0	-1	}	EMPTY	EMPTY
2	1733	1	1	1	-1	addrlen = sizeof ( myaddr _ in ) ;	EMPTY	EMPTY
2	1734	2	-1	0	-1	if ( getsockname ( s _ listen	EMPTY	EMPTY
2	1735	2	-1	0	-1	( struct sockaddr * ) & myaddr _ in	EMPTY	EMPTY
2	1736	2	-1	0	-1	& addrlen ) == socket _ error ) {	EMPTY	EMPTY
2	1737	2	-1	0	-1	netperf _ response . content . serv _ errno = errno ;	EMPTY	EMPTY
2	1738	2	-1	0	-1	close ( s _ listen ) ;	EMPTY	EMPTY
2	1739	3	-1	0	-1	send _ response ( ) ;	EMPTY	EMPTY
2	1741	1	0	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	1742	3	-1	0	-1	}	EMPTY	EMPTY
2	1748	1	1	1	-1	sdp _ stream _ response -> data _ port _ number = ( int ) ntohs ( myaddr _ in . sin _ port ) ;	EMPTY	EMPTY
2	1749	3	-1	0	-1	netperf _ response . content . serv _ errno = numconst ;	EMPTY	EMPTY
2	1757	1	1	1	-1	sdp _ stream _ response -> cpu _ rate = ( float ) numconst ;	EMPTY	EMPTY
2	1758	2	-1	0	-1	if ( sdp _ stream _ request -> measure _ cpu ) {	EMPTY	EMPTY
2	1759	2	-1	0	-1	sdp _ stream _ response -> measure _ cpu = numconst ;	EMPTY	EMPTY
2	1760	2	-1	0	-1	sdp _ stream _ response -> cpu _ rate =	EMPTY	EMPTY
2	1761	2	-1	0	-1	calibrate _ local _ cpu ( sdp _ stream _ request -> cpu _ rate ) ;	EMPTY	EMPTY
2	1762	2	-1	0	-1	}	EMPTY	EMPTY
2	1763	2	-1	0	-1	else {	EMPTY	EMPTY
2	1764	2	-1	0	-1	sdp _ stream _ response -> measure _ cpu = numconst ;	EMPTY	EMPTY
2	1765	3	-1	0	-1	}	EMPTY	EMPTY
2	1769	1	1	1	-1	sdp _ stream _ response -> send _ buf _ size = lss _ size ;	EMPTY	EMPTY
2	1770	2	-1	0	-1	sdp _ stream _ response -> recv _ buf _ size = lsr _ size ;	EMPTY	EMPTY
2	1771	2	-1	0	-1	sdp _ stream _ response -> no _ delay = loc _ nodelay ;	EMPTY	EMPTY
2	1772	2	-1	0	-1	sdp _ stream _ response -> so _ rcvavoid = loc _ rcvavoid ;	EMPTY	EMPTY
2	1773	2	-1	0	-1	sdp _ stream _ response -> so _ sndavoid = loc _ sndavoid ;	EMPTY	EMPTY
2	1774	3	-1	0	-1	sdp _ stream _ response -> receive _ size = recv _ size ;	EMPTY	EMPTY
2	1776	1	0	0	-1	send _ response ( ) ;	EMPTY	EMPTY
2	1778	1	0	0	-1	addrlen = sizeof ( peeraddr _ in ) ;	EMPTY	EMPTY
2	1780	1	1	0	-1	if ( ( s _ data = accept ( s _ listen	EMPTY	EMPTY
2	1781	2	-1	0	-1	( struct sockaddr * ) & peeraddr _ in	EMPTY	EMPTY
2	1782	2	-1	0	-1	& addrlen ) ) == invalid _ socket ) {	EMPTY	EMPTY
2	1784	2	-1	1	-1	close ( s _ listen ) ;	EMPTY	EMPTY
2	1785	2	-1	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	1786	3	-1	0	-1	}	EMPTY	EMPTY
2	1788	1	0	0	-1	# ifdef kludge _ socket _ options	EMPTY	EMPTY
2	1793	1	1	1	-1	kludge _ socket _ options ( s _ data ) ;	EMPTY	EMPTY
2	1795	1	1	1	-1	# endif	EMPTY	EMPTY
2	1800	1	1	1	-1	cpu _ start ( sdp _ stream _ request -> measure _ cpu ) ;	EMPTY	EMPTY
2	1811	1	1	1	-1	bytes _ received = numconst ;	EMPTY	EMPTY
2	1812	3	-1	0	-1	receive _ calls = numconst ;	EMPTY	EMPTY
2	1814	1	0	0	-1	while ( ( len = recv ( s _ data  recv _ ring -> buffer _ ptr  recv _ size  numconst ) ) != numconst ) {	EMPTY	EMPTY
2	1815	2	-1	0	-1	if ( len == socket _ error )	EMPTY	EMPTY
2	1816	2	-1	0	-1	{	EMPTY	EMPTY
2	1817	2	-1	0	-1	netperf _ response . content . serv _ errno = errno ;	EMPTY	EMPTY
2	1818	2	-1	0	-1	send _ response ( ) ;	EMPTY	EMPTY
2	1819	2	-1	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	1820	2	-1	0	-1	}	EMPTY	EMPTY
2	1821	2	-1	0	-1	bytes _ received += len ;	EMPTY	EMPTY
2	1822	3	-1	0	-1	receive _ calls ++ ;	EMPTY	EMPTY
2	1824	1	1	0	-1	# ifdef dirty	EMPTY	EMPTY
2	1826	2	-1	1	-1	access _ buffer ( recv _ ring -> buffer _ ptr	EMPTY	EMPTY
2	1827	2	-1	0	-1	recv _ size	EMPTY	EMPTY
2	1828	2	-1	0	-1	sdp _ stream _ request -> dirty _ count	EMPTY	EMPTY
2	1829	2	-1	0	-1	sdp _ stream _ request -> clean _ count ) ;	EMPTY	EMPTY
2	1830	3	-1	1	-1	# endif	EMPTY	EMPTY
2	1834	1	1	1	-1	recv _ ring = recv _ ring -> next ;	EMPTY	EMPTY
2	1836	1	1	0	-1	# ifdef pause	EMPTY	EMPTY
2	1837	2	-1	0	-1	sleep ( numconst ) ;	EMPTY	EMPTY
2	1838	3	-1	1	-1	# endif	EMPTY	EMPTY
2	1840	1	1	0	-1	# ifdef do _ select	EMPTY	EMPTY
2	1841	2	-1	0	-1	fd _ set ( s _ data  & readfds ) ;	EMPTY	EMPTY
2	1842	2	-1	0	-1	select ( s _ data + numconst  & readfds  null  null  & timeout ) ;	EMPTY	EMPTY
2	1843	3	-1	1	-1	# endif	EMPTY	EMPTY
2	1845	1	0	0	-1	}	EMPTY	EMPTY
2	1850	1	1	1	-1	if ( shutdown ( s _ data  shut _ wr ) == socket _ error ) {	EMPTY	EMPTY
2	1851	2	-1	0	-1	netperf _ response . content . serv _ errno = errno ;	EMPTY	EMPTY
2	1852	2	-1	0	-1	send _ response ( ) ;	EMPTY	EMPTY
2	1853	2	-1	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	1854	3	-1	0	-1	}	EMPTY	EMPTY
2	1856	1	0	0	-1	cpu _ stop ( sdp _ stream _ request -> measure _ cpu  & elapsed _ time ) ;	EMPTY	EMPTY
2	1860	1	1	1	-1	if ( debug ) {	EMPTY	EMPTY
2	1861	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	1862	2	-1	0	-1	strlit	EMPTY	EMPTY
2	1863	2	-1	0	-1	bytes _ received ) ;	EMPTY	EMPTY
2	1864	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	1865	2	-1	0	-1	strlit	EMPTY	EMPTY
2	1866	2	-1	0	-1	receive _ calls ) ;	EMPTY	EMPTY
2	1867	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	1868	3	-1	0	-1	}	EMPTY	EMPTY
2	1870	1	0	0	-1	sdp _ stream _ results -> bytes _ received = htond ( bytes _ received ) ;	EMPTY	EMPTY
2	1871	2	-1	0	-1	sdp _ stream _ results -> elapsed _ time = elapsed _ time ;	EMPTY	EMPTY
2	1872	3	-1	0	-1	sdp _ stream _ results -> recv _ calls = receive _ calls ;	EMPTY	EMPTY
2	1874	1	0	0	-1	sdp _ stream _ results -> cpu _ method = cpu _ method ;	EMPTY	EMPTY
2	1875	3	-1	0	-1	sdp _ stream _ results -> num _ cpus = lib _ num _ loc _ cpus ;	EMPTY	EMPTY
2	1877	1	0	0	-1	if ( sdp _ stream _ request -> measure _ cpu ) {	EMPTY	EMPTY
2	1878	2	-1	0	-1	sdp _ stream _ results -> cpu _ util = calc _ cpu _ util ( numconst ) ;	EMPTY	EMPTY
2	1879	3	-1	0	-1	} ;	EMPTY	EMPTY
2	1881	1	0	0	-1	if ( debug ) {	EMPTY	EMPTY
2	1882	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	1883	2	-1	0	-1	strlit ) ;	EMPTY	EMPTY
2	1884	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	1885	2	-1	0	-1	strlit	EMPTY	EMPTY
2	1886	2	-1	0	-1	bytes _ received	EMPTY	EMPTY
2	1887	2	-1	0	-1	receive _ calls ) ;	EMPTY	EMPTY
2	1888	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	1889	2	-1	0	-1	strlit	EMPTY	EMPTY
2	1890	2	-1	0	-1	len ) ;	EMPTY	EMPTY
2	1891	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	1892	3	-1	0	-1	}	EMPTY	EMPTY
2	1894	1	0	0	-1	send _ response ( ) ;	EMPTY	EMPTY
2	1897	1	1	1	-1	close ( s _ data ) ;	EMPTY	EMPTY
2	1898	3	-1	0	-1	close ( s _ listen ) ;	EMPTY	EMPTY
2	1900	1	0	0	-1	}	EMPTY	EMPTY
2	1906	1	1	1	-1	void	EMPTY	EMPTY
2	1907	2	-1	0	-1	recv _ sdp _ maerts ( )	EMPTY	EMPTY
2	1908	3	-1	0	-1	{	EMPTY	EMPTY
2	1910	1	0	0	-1	struct sockaddr _ in myaddr _ in  peeraddr _ in ;	EMPTY	EMPTY
2	1911	2	-1	0	-1	struct addrinfo * local _ res ;	EMPTY	EMPTY
2	1912	2	-1	0	-1	char local _ name [ bufsiz ] ;	EMPTY	EMPTY
2	1913	3	-1	0	-1	char port _ buffer [ portbufsize ] ;	EMPTY	EMPTY
2	1915	1	0	0	-1	socket s _ listen  s _ data ;	EMPTY	EMPTY
2	1916	2	-1	0	-1	netperf _ socklen _ t addrlen ;	EMPTY	EMPTY
2	1917	2	-1	0	-1	int len ;	EMPTY	EMPTY
2	1918	2	-1	0	-1	unsigned int send _ calls ;	EMPTY	EMPTY
2	1919	2	-1	0	-1	float elapsed _ time ;	EMPTY	EMPTY
2	1920	3	-1	0	-1	double bytes _ sent = numconst ;	EMPTY	EMPTY
2	1922	1	0	0	-1	struct ring _ elt * send _ ring ;	EMPTY	EMPTY
2	1924	1	0	0	-1	struct sdp _ maerts _ request _ struct * sdp _ maerts _ request ;	EMPTY	EMPTY
2	1925	2	-1	0	-1	struct sdp _ maerts _ response _ struct * sdp _ maerts _ response ;	EMPTY	EMPTY
2	1926	3	-1	0	-1	struct sdp _ maerts _ results _ struct * sdp _ maerts _ results ;	EMPTY	EMPTY
2	1928	1	0	0	-1	sdp _ maerts _ request =	EMPTY	EMPTY
2	1929	2	-1	0	-1	( struct sdp _ maerts _ request _ struct * ) netperf _ request . content . test _ specific _ data ;	EMPTY	EMPTY
2	1930	2	-1	0	-1	sdp _ maerts _ response =	EMPTY	EMPTY
2	1931	2	-1	0	-1	( struct sdp _ maerts _ response _ struct * ) netperf _ response . content . test _ specific _ data ;	EMPTY	EMPTY
2	1932	2	-1	0	-1	sdp _ maerts _ results =	EMPTY	EMPTY
2	1933	3	-1	0	-1	( struct sdp _ maerts _ results _ struct * ) netperf _ response . content . test _ specific _ data ;	EMPTY	EMPTY
2	1935	1	0	0	-1	if ( debug ) {	EMPTY	EMPTY
2	1936	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	1937	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	1938	3	-1	0	-1	}	EMPTY	EMPTY
2	1953	1	1	1	-1	if ( debug ) {	EMPTY	EMPTY
2	1954	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	1955	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	1956	3	-1	0	-1	}	EMPTY	EMPTY
2	1958	1	0	0	-1	netperf _ response . content . response _ type = sdp _ maerts _ response ;	EMPTY	EMPTY
2	1960	1	0	0	-1	if ( debug ) {	EMPTY	EMPTY
2	1961	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	1962	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	1963	3	-1	0	-1	}	EMPTY	EMPTY
2	1968	1	1	1	-1	if ( debug ) {	EMPTY	EMPTY
2	1969	2	-1	0	-1	fprintf ( where  strlit	EMPTY	EMPTY
2	1970	2	-1	0	-1	sdp _ maerts _ request -> send _ alignment ) ;	EMPTY	EMPTY
2	1971	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	1972	3	-1	0	-1	}	EMPTY	EMPTY
2	1976	1	1	1	-1	if ( debug ) {	EMPTY	EMPTY
2	1977	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	1978	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	1979	3	-1	0	-1	}	EMPTY	EMPTY
2	1985	1	1	1	-1	lss _ size _ req = sdp _ maerts _ request -> send _ buf _ size ;	EMPTY	EMPTY
2	1986	2	-1	0	-1	lsr _ size _ req = sdp _ maerts _ request -> recv _ buf _ size ;	EMPTY	EMPTY
2	1987	2	-1	0	-1	loc _ nodelay = sdp _ maerts _ request -> no _ delay ;	EMPTY	EMPTY
2	1988	2	-1	0	-1	loc _ rcvavoid = sdp _ maerts _ request -> so _ rcvavoid ;	EMPTY	EMPTY
2	1989	3	-1	0	-1	loc _ sndavoid = sdp _ maerts _ request -> so _ sndavoid ;	EMPTY	EMPTY
2	1991	1	0	0	-1	set _ hostname _ and _ port ( local _ name	EMPTY	EMPTY
2	1992	2	-1	0	-1	port _ buffer	EMPTY	EMPTY
2	1993	2	-1	0	-1	nf _ to _ af ( sdp _ maerts _ request -> ipfamily )	EMPTY	EMPTY
2	1994	3	-1	0	-1	sdp _ maerts _ request -> port ) ;	EMPTY	EMPTY
2	1996	1	0	0	-1	local _ res = complete _ addrinfo ( local _ name	EMPTY	EMPTY
2	1997	2	-1	0	-1	local _ name	EMPTY	EMPTY
2	1998	2	-1	0	-1	port _ buffer	EMPTY	EMPTY
2	1999	2	-1	0	-1	nf _ to _ af ( sdp _ maerts _ request -> ipfamily )	EMPTY	EMPTY
2	2000	2	-1	0	-1	sock _ stream	EMPTY	EMPTY
2	2001	2	-1	0	-1	ipproto _ tcp	EMPTY	EMPTY
2	2002	3	-1	0	-1	numconst ) ;	EMPTY	EMPTY
2	2005	1	1	1	-1	local _ res -> ai _ family = af _ inet _ sdp ;	EMPTY	EMPTY
2	2006	2	-1	0	-1	local _ res -> ai _ protocol = numconst ;	EMPTY	EMPTY
2	2007	3	-1	0	-1	s _ listen = create _ data _ socket ( local _ res ) ;	EMPTY	EMPTY
2	2009	1	0	0	-1	if ( s _ listen == invalid _ socket ) {	EMPTY	EMPTY
2	2010	2	-1	0	-1	netperf _ response . content . serv _ errno = errno ;	EMPTY	EMPTY
2	2011	2	-1	0	-1	send _ response ( ) ;	EMPTY	EMPTY
2	2012	2	-1	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	2013	3	-1	0	-1	}	EMPTY	EMPTY
2	2015	1	1	0	-1	# ifdef win32	EMPTY	EMPTY
2	2019	2	-1	1	-1	win _ kludge _ socket2 = s _ listen ;	EMPTY	EMPTY
2	2020	3	-1	0	-1	# endif	EMPTY	EMPTY
2	2024	1	1	1	-1	if ( sdp _ maerts _ request -> send _ size == numconst ) {	EMPTY	EMPTY
2	2025	2	-1	0	-1	if ( lss _ size > numconst ) {	EMPTY	EMPTY
2	2026	2	-1	0	-1	send _ size = lss _ size ;	EMPTY	EMPTY
2	2027	2	-1	0	-1	}	EMPTY	EMPTY
2	2028	2	-1	0	-1	else {	EMPTY	EMPTY
2	2029	2	-1	0	-1	send _ size = numconst ;	EMPTY	EMPTY
2	2030	2	-1	0	-1	}	EMPTY	EMPTY
2	2031	2	-1	0	-1	}	EMPTY	EMPTY
2	2032	2	-1	0	-1	else {	EMPTY	EMPTY
2	2033	2	-1	0	-1	send _ size = sdp _ maerts _ request -> send _ size ;	EMPTY	EMPTY
2	2034	3	-1	0	-1	}	EMPTY	EMPTY
2	2043	1	1	1	-1	if ( send _ width == numconst ) {	EMPTY	EMPTY
2	2044	2	-1	0	-1	send _ width = ( lsr _ size / send _ size ) + numconst ;	EMPTY	EMPTY
2	2045	2	-1	0	-1	if ( send _ width == numconst ) send _ width ++ ;	EMPTY	EMPTY
2	2046	3	-1	0	-1	}	EMPTY	EMPTY
2	2048	1	0	0	-1	send _ ring = allocate _ buffer _ ring ( send _ width	EMPTY	EMPTY
2	2049	2	-1	0	-1	send _ size	EMPTY	EMPTY
2	2050	2	-1	0	-1	sdp _ maerts _ request -> send _ alignment	EMPTY	EMPTY
2	2051	3	-1	0	-1	sdp _ maerts _ request -> send _ offset ) ;	EMPTY	EMPTY
2	2053	1	0	0	-1	if ( debug ) {	EMPTY	EMPTY
2	2054	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	2055	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	2056	3	-1	0	-1	}	EMPTY	EMPTY
2	2059	1	1	1	-1	if ( listen ( s _ listen  numconst ) == socket _ error ) {	EMPTY	EMPTY
2	2060	2	-1	0	-1	netperf _ response . content . serv _ errno = errno ;	EMPTY	EMPTY
2	2061	2	-1	0	-1	close ( s _ listen ) ;	EMPTY	EMPTY
2	2062	3	-1	0	-1	send _ response ( ) ;	EMPTY	EMPTY
2	2064	1	0	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	2065	3	-1	0	-1	}	EMPTY	EMPTY
2	2069	1	1	1	-1	addrlen = sizeof ( myaddr _ in ) ;	EMPTY	EMPTY
2	2070	2	-1	0	-1	if ( getsockname ( s _ listen	EMPTY	EMPTY
2	2071	2	-1	0	-1	( struct sockaddr * ) & myaddr _ in	EMPTY	EMPTY
2	2072	2	-1	0	-1	& addrlen ) == socket _ error ) {	EMPTY	EMPTY
2	2073	2	-1	0	-1	netperf _ response . content . serv _ errno = errno ;	EMPTY	EMPTY
2	2074	2	-1	0	-1	close ( s _ listen ) ;	EMPTY	EMPTY
2	2075	3	-1	0	-1	send _ response ( ) ;	EMPTY	EMPTY
2	2077	1	0	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	2078	3	-1	0	-1	}	EMPTY	EMPTY
2	2084	1	1	1	-1	sdp _ maerts _ response -> data _ port _ number = ( int ) ntohs ( myaddr _ in . sin _ port ) ;	EMPTY	EMPTY
2	2085	3	-1	0	-1	netperf _ response . content . serv _ errno = numconst ;	EMPTY	EMPTY
2	2093	1	1	1	-1	sdp _ maerts _ response -> cpu _ rate = ( float ) numconst ;	EMPTY	EMPTY
2	2094	2	-1	0	-1	if ( sdp _ maerts _ request -> measure _ cpu ) {	EMPTY	EMPTY
2	2095	2	-1	0	-1	sdp _ maerts _ response -> measure _ cpu = numconst ;	EMPTY	EMPTY
2	2096	2	-1	0	-1	sdp _ maerts _ response -> cpu _ rate =	EMPTY	EMPTY
2	2097	2	-1	0	-1	calibrate _ local _ cpu ( sdp _ maerts _ request -> cpu _ rate ) ;	EMPTY	EMPTY
2	2098	2	-1	0	-1	}	EMPTY	EMPTY
2	2099	2	-1	0	-1	else {	EMPTY	EMPTY
2	2100	2	-1	0	-1	sdp _ maerts _ response -> measure _ cpu = numconst ;	EMPTY	EMPTY
2	2101	3	-1	0	-1	}	EMPTY	EMPTY
2	2105	1	1	1	-1	sdp _ maerts _ response -> send _ buf _ size = lss _ size ;	EMPTY	EMPTY
2	2106	2	-1	0	-1	sdp _ maerts _ response -> recv _ buf _ size = lsr _ size ;	EMPTY	EMPTY
2	2107	2	-1	0	-1	sdp _ maerts _ response -> no _ delay = loc _ nodelay ;	EMPTY	EMPTY
2	2108	2	-1	0	-1	sdp _ maerts _ response -> so _ rcvavoid = loc _ rcvavoid ;	EMPTY	EMPTY
2	2109	2	-1	0	-1	sdp _ maerts _ response -> so _ sndavoid = loc _ sndavoid ;	EMPTY	EMPTY
2	2110	3	-1	0	-1	sdp _ maerts _ response -> send _ size = send _ size ;	EMPTY	EMPTY
2	2112	1	0	0	-1	send _ response ( ) ;	EMPTY	EMPTY
2	2114	1	0	0	-1	addrlen = sizeof ( peeraddr _ in ) ;	EMPTY	EMPTY
2	2120	1	1	1	-1	start _ timer ( sdp _ maerts _ request -> test _ length ) ;	EMPTY	EMPTY
2	2125	1	1	1	-1	cpu _ start ( sdp _ maerts _ request -> measure _ cpu ) ;	EMPTY	EMPTY
2	2128	1	1	0	-1	if ( ( s _ data = accept ( s _ listen	EMPTY	EMPTY
2	2129	2	-1	0	-1	( struct sockaddr * ) & peeraddr _ in	EMPTY	EMPTY
2	2130	2	-1	0	-1	& addrlen ) ) == invalid _ socket ) {	EMPTY	EMPTY
2	2132	2	-1	1	-1	close ( s _ listen ) ;	EMPTY	EMPTY
2	2133	2	-1	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	2134	3	-1	0	-1	}	EMPTY	EMPTY
2	2136	1	0	0	-1	# ifdef kludge _ socket _ options	EMPTY	EMPTY
2	2142	1	1	1	-1	kludge _ socket _ options ( s _ data ) ;	EMPTY	EMPTY
2	2144	1	1	1	-1	# endif	EMPTY	EMPTY
2	2149	1	1	1	-1	bytes _ sent = numconst ;	EMPTY	EMPTY
2	2150	3	-1	0	-1	send _ calls = numconst ;	EMPTY	EMPTY
2	2152	1	1	1	-1	len = numconst ;	EMPTY	EMPTY
2	2153	2	-1	1	-1	times _ up initially true . * /	EMPTY	EMPTY
2	2154	2	-1	1	-1	times _ up = numconst ;	EMPTY	EMPTY
2	2155	3	-1	0	-1	while ( ! times _ up ) {	EMPTY	EMPTY
2	2157	1	0	0	-1	# ifdef dirty	EMPTY	EMPTY
2	2163	1	1	1	-1	access _ buffer ( send _ ring -> buffer _ ptr	EMPTY	EMPTY
2	2164	2	-1	0	-1	send _ size	EMPTY	EMPTY
2	2165	2	-1	0	-1	sdp _ maerts _ request -> dirty _ count	EMPTY	EMPTY
2	2166	3	-1	0	-1	sdp _ maerts _ request -> clean _ count ) ;	EMPTY	EMPTY
2	2168	1	1	1	-1	# endif	EMPTY	EMPTY
2	2170	1	1	0	-1	if ( ( len = send ( s _ data	EMPTY	EMPTY
2	2171	2	-1	0	-1	send _ ring -> buffer _ ptr	EMPTY	EMPTY
2	2172	2	-1	0	-1	send _ size	EMPTY	EMPTY
2	2173	2	-1	0	-1	numconst ) ) != send _ size ) {	EMPTY	EMPTY
2	2174	2	-1	0	-1	if ( ( len >= numconst ) || socket _ eintr ( len ) ) {	EMPTY	EMPTY
2	2176	2	-1	1	-1	break ;	EMPTY	EMPTY
2	2177	2	-1	0	-1	}	EMPTY	EMPTY
2	2178	2	-1	0	-1	netperf _ response . content . serv _ errno = errno ;	EMPTY	EMPTY
2	2179	2	-1	0	-1	send _ response ( ) ;	EMPTY	EMPTY
2	2180	2	-1	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	2181	3	-1	0	-1	}	EMPTY	EMPTY
2	2183	1	0	0	-1	bytes _ sent += len ;	EMPTY	EMPTY
2	2184	3	-1	0	-1	send _ calls ++ ;	EMPTY	EMPTY
2	2187	1	1	1	-1	send _ ring = send _ ring -> next ;	EMPTY	EMPTY
2	2189	1	0	0	-1	}	EMPTY	EMPTY
2	2194	1	1	1	-1	if ( shutdown ( s _ data  shut _ wr ) == socket _ error ) {	EMPTY	EMPTY
2	2195	2	-1	0	-1	netperf _ response . content . serv _ errno = errno ;	EMPTY	EMPTY
2	2196	2	-1	0	-1	send _ response ( ) ;	EMPTY	EMPTY
2	2197	2	-1	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	2198	3	-1	0	-1	}	EMPTY	EMPTY
2	2205	1	1	1	-1	recv ( s _ data  send _ ring -> buffer _ ptr  send _ size  numconst ) ;	EMPTY	EMPTY
2	2208	1	0	0	-1	cpu _ stop ( sdp _ maerts _ request -> measure _ cpu  & elapsed _ time ) ;	EMPTY	EMPTY
2	2212	1	1	1	-1	if ( debug ) {	EMPTY	EMPTY
2	2213	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	2214	2	-1	0	-1	strlit	EMPTY	EMPTY
2	2215	2	-1	0	-1	bytes _ sent ) ;	EMPTY	EMPTY
2	2216	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	2217	2	-1	0	-1	strlit	EMPTY	EMPTY
2	2218	2	-1	0	-1	send _ calls ) ;	EMPTY	EMPTY
2	2219	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	2220	3	-1	0	-1	}	EMPTY	EMPTY
2	2222	1	0	0	-1	sdp _ maerts _ results -> bytes _ sent = htond ( bytes _ sent ) ;	EMPTY	EMPTY
2	2223	2	-1	0	-1	sdp _ maerts _ results -> elapsed _ time = elapsed _ time ;	EMPTY	EMPTY
2	2224	3	-1	0	-1	sdp _ maerts _ results -> send _ calls = send _ calls ;	EMPTY	EMPTY
2	2226	1	0	0	-1	if ( sdp _ maerts _ request -> measure _ cpu ) {	EMPTY	EMPTY
2	2227	2	-1	0	-1	sdp _ maerts _ results -> cpu _ util = calc _ cpu _ util ( numconst ) ;	EMPTY	EMPTY
2	2228	3	-1	0	-1	} ;	EMPTY	EMPTY
2	2230	1	0	0	-1	if ( debug ) {	EMPTY	EMPTY
2	2231	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	2232	2	-1	0	-1	strlit ) ;	EMPTY	EMPTY
2	2233	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	2234	2	-1	0	-1	strlit	EMPTY	EMPTY
2	2235	2	-1	0	-1	bytes _ sent	EMPTY	EMPTY
2	2236	2	-1	0	-1	send _ calls ) ;	EMPTY	EMPTY
2	2237	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	2238	2	-1	0	-1	strlit	EMPTY	EMPTY
2	2239	2	-1	0	-1	len ) ;	EMPTY	EMPTY
2	2240	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	2241	3	-1	0	-1	}	EMPTY	EMPTY
2	2243	1	0	0	-1	sdp _ maerts _ results -> cpu _ method = cpu _ method ;	EMPTY	EMPTY
2	2244	2	-1	0	-1	sdp _ maerts _ results -> num _ cpus = lib _ num _ loc _ cpus ;	EMPTY	EMPTY
2	2245	3	-1	0	-1	send _ response ( ) ;	EMPTY	EMPTY
2	2248	1	1	1	-1	close ( s _ data ) ;	EMPTY	EMPTY
2	2249	3	-1	0	-1	close ( s _ listen ) ;	EMPTY	EMPTY
2	2251	1	0	0	-1	}	EMPTY	EMPTY
2	2257	1	1	1	-1	void	EMPTY	EMPTY
2	2258	2	-1	0	-1	send _ sdp _ rr ( char remote _ host [ ] )	EMPTY	EMPTY
2	2259	3	-1	0	-1	{	EMPTY	EMPTY
2	2261	1	0	0	-1	char * tput _ title = strlit	EMPTY	EMPTY
2	2262	2	-1	0	-1	local / remote \\ n\\\nsocket	EMPTY	EMPTY
2	2263	2	-1	0	-1	socket size request resp . elapsed trans . \\ n\\\nsend	EMPTY	EMPTY
2	2264	2	-1	0	-1	send recv size size time rate \\ n\\\nbytes	EMPTY	EMPTY
2	2265	3	-1	0	-1	bytes bytes bytes bytes secs . per sec \\ n \\ n \;	EMPTY	EMPTY
2	2267	1	0	0	-1	char * tput _ fmt _ 0 =	EMPTY	EMPTY
2	2268	3	-1	0	-1	strlit ;	EMPTY	EMPTY
2	2270	1	0	0	-1	char * tput _ fmt _ 1 _ line _ 1 = strlit	EMPTY	EMPTY
2	2271	2	-1	0	-1	% - numconst % - numconst % - numconst % - numconst % - numconst % numconst % s \\ n \;	EMPTY	EMPTY
2	2272	2	-1	0	-1	char * tput _ fmt _ 1 _ line _ 2 = strlit	EMPTY	EMPTY
2	2273	3	-1	0	-1	% - numconst % - numconst \\ n \;	EMPTY	EMPTY
2	2275	1	0	0	-1	char * cpu _ title = strlit	EMPTY	EMPTY
2	2276	2	-1	0	-1	local / remote \\ n\\\nsocket	EMPTY	EMPTY
2	2277	2	-1	0	-1	socket size request resp . elapsed trans . cpu cpu s . dem s . dem \\ n\\\nsend	EMPTY	EMPTY
2	2278	2	-1	0	-1	send recv size size time rate local remote local remote \\ n\\\nbytes	EMPTY	EMPTY
2	2279	3	-1	0	-1	bytes bytes bytes bytes secs . per sec % % % c % % % c us / tr us / tr \\ n \\ n \;	EMPTY	EMPTY
2	2281	1	0	0	-1	char * cpu _ fmt _ 0 =	EMPTY	EMPTY
2	2282	3	-1	0	-1	strlit ;	EMPTY	EMPTY
2	2284	1	0	0	-1	char * cpu _ fmt _ 1 _ line _ 1 = strlit	EMPTY	EMPTY
2	2285	3	-1	0	-1	% - numconst % - numconst % - numconst % - numconst % - numconst % - numconst % - numconst % - numconst % - numconst % - numconst % s \\ n \;	EMPTY	EMPTY
2	2287	1	0	0	-1	char * cpu _ fmt _ 1 _ line _ 2 = strlit	EMPTY	EMPTY
2	2288	3	-1	0	-1	% - numconst % - numconst \\ n \;	EMPTY	EMPTY
2	2290	1	0	0	-1	char * ksink _ fmt = strlit	EMPTY	EMPTY
2	2291	2	-1	0	-1	alignment offset \\ n\\\nlocal	EMPTY	EMPTY
2	2292	2	-1	0	-1	local remote local remote \\ n\\\nsend	EMPTY	EMPTY
2	2293	2	-1	0	-1	send recv send recv \\ n \\\n%	EMPTY	EMPTY
2	2294	3	-1	0	-1	% numconst % numconst % numconst % numconst \\ n \;	EMPTY	EMPTY
2	2297	1	0	0	-1	int timed _ out = numconst ;	EMPTY	EMPTY
2	2298	3	-1	0	-1	float elapsed _ time ;	EMPTY	EMPTY
2	2300	1	0	0	-1	int len ;	EMPTY	EMPTY
2	2301	2	-1	0	-1	char * temp _ message _ ptr ;	EMPTY	EMPTY
2	2302	2	-1	0	-1	int nummessages ;	EMPTY	EMPTY
2	2303	2	-1	0	-1	socket send _ socket ;	EMPTY	EMPTY
2	2304	2	-1	0	-1	int trans _ remaining ;	EMPTY	EMPTY
2	2305	3	-1	0	-1	double bytes _ xferd ;	EMPTY	EMPTY
2	2307	1	0	0	-1	struct ring _ elt * send _ ring ;	EMPTY	EMPTY
2	2308	3	-1	0	-1	struct ring _ elt * recv _ ring ;	EMPTY	EMPTY
2	2310	1	0	0	-1	int rsp _ bytes _ left ;	EMPTY	EMPTY
2	2311	3	-1	0	-1	int rsp _ bytes _ recvd ;	EMPTY	EMPTY
2	2313	1	0	0	-1	float local _ cpu _ utilization ;	EMPTY	EMPTY
2	2314	2	-1	0	-1	float local _ service _ demand ;	EMPTY	EMPTY
2	2315	2	-1	0	-1	float remote _ cpu _ utilization ;	EMPTY	EMPTY
2	2316	2	-1	0	-1	float remote _ service _ demand ;	EMPTY	EMPTY
2	2317	3	-1	0	-1	double thruput ;	EMPTY	EMPTY
2	2319	1	0	0	-1	struct addrinfo * local _ res ;	EMPTY	EMPTY
2	2320	3	-1	0	-1	struct addrinfo * remote _ res ;	EMPTY	EMPTY
2	2322	1	0	0	-1	struct sdp _ rr _ request _ struct * sdp _ rr _ request ;	EMPTY	EMPTY
2	2323	2	-1	0	-1	struct sdp _ rr _ response _ struct * sdp _ rr _ response ;	EMPTY	EMPTY
2	2324	3	-1	0	-1	struct sdp _ rr _ results _ struct * sdp _ rr _ result ;	EMPTY	EMPTY
2	2326	1	1	0	-1	# ifdef want _ first _ burst	EMPTY	EMPTY
2	2327	2	-1	0	-1	# define request _ cwnd _ initial numconst	EMPTY	EMPTY
2	2337	2	-1	1	-1	int requests _ outstanding = numconst ;	EMPTY	EMPTY
2	2338	2	-1	1	-1	int request _ cwnd = request _ cwnd _ initial ;	EMPTY	EMPTY
2	2339	2	-1	1	-1	three requests	EMPTY	EMPTY
2	2340	2	-1	1	-1	outstanding at the	EMPTY	EMPTY
2	2341	2	-1	1	-1	beginning of the test	EMPTY	EMPTY
2	2342	2	-1	1	-1	is ok with sdp stacks	EMPTY	EMPTY
2	2343	2	-1	1	-1	of interest . the first	EMPTY	EMPTY
2	2344	2	-1	1	-1	two will come from our	EMPTY	EMPTY
2	2345	2	-1	1	-1	first _ burst loop  and	EMPTY	EMPTY
2	2346	2	-1	1	-1	the third from our	EMPTY	EMPTY
2	2347	2	-1	1	-1	regularly scheduled	EMPTY	EMPTY
2	2348	2	-1	1	-1	send * /	EMPTY	EMPTY
2	2349	3	-1	0	-1	# endif	EMPTY	EMPTY
2	2351	1	0	0	-1	sdp _ rr _ request =	EMPTY	EMPTY
2	2352	2	-1	0	-1	( struct sdp _ rr _ request _ struct * ) netperf _ request . content . test _ specific _ data ;	EMPTY	EMPTY
2	2353	2	-1	0	-1	sdp _ rr _ response =	EMPTY	EMPTY
2	2354	2	-1	0	-1	( struct sdp _ rr _ response _ struct * ) netperf _ response . content . test _ specific _ data ;	EMPTY	EMPTY
2	2355	2	-1	0	-1	sdp _ rr _ result =	EMPTY	EMPTY
2	2356	3	-1	0	-1	( struct sdp _ rr _ results _ struct * ) netperf _ response . content . test _ specific _ data ;	EMPTY	EMPTY
2	2358	1	1	0	-1	# ifdef want _ histogram	EMPTY	EMPTY
2	2359	2	-1	0	-1	if ( verbosity > numconst ) {	EMPTY	EMPTY
2	2360	2	-1	0	-1	time _ hist = hist _ new ( ) ;	EMPTY	EMPTY
2	2361	2	-1	0	-1	}	EMPTY	EMPTY
2	2362	3	-1	1	-1	# endif	EMPTY	EMPTY
2	2369	1	1	1	-1	complete _ addrinfos ( & remote _ res	EMPTY	EMPTY
2	2370	2	-1	0	-1	& local _ res	EMPTY	EMPTY
2	2371	2	-1	0	-1	remote _ host	EMPTY	EMPTY
2	2372	2	-1	0	-1	sock _ stream	EMPTY	EMPTY
2	2373	2	-1	0	-1	ipproto _ tcp	EMPTY	EMPTY
2	2374	3	-1	0	-1	numconst ) ;	EMPTY	EMPTY
2	2376	1	0	0	-1	if ( print _ headers ) {	EMPTY	EMPTY
2	2377	2	-1	0	-1	print _ top _ test _ header ( strlit  local _ res  remote _ res ) ;	EMPTY	EMPTY
2	2378	3	-1	0	-1	}	EMPTY	EMPTY
2	2382	1	1	1	-1	send _ ring = null ;	EMPTY	EMPTY
2	2383	2	-1	0	-1	recv _ ring = null ;	EMPTY	EMPTY
2	2384	2	-1	0	-1	confidence _ iteration = numconst ;	EMPTY	EMPTY
2	2385	3	-1	0	-1	init _ stat ( ) ;	EMPTY	EMPTY
2	2394	1	1	1	-1	while ( ( ( confidence < numconst ) && ( confidence _ iteration < iteration _ max ) ) ||	EMPTY	EMPTY
2	2395	3	-1	0	-1	( confidence _ iteration <= iteration _ min ) ) {	EMPTY	EMPTY
2	2400	1	1	1	-1	nummessages = numconst ;	EMPTY	EMPTY
2	2401	2	-1	0	-1	bytes _ xferd = numconst ;	EMPTY	EMPTY
2	2402	2	-1	0	-1	times _ up = numconst ;	EMPTY	EMPTY
2	2403	2	-1	0	-1	timed _ out = numconst ;	EMPTY	EMPTY
2	2404	3	-1	0	-1	trans _ remaining = numconst ;	EMPTY	EMPTY
2	2406	1	1	0	-1	# ifdef want _ first _ burst	EMPTY	EMPTY
2	2410	2	-1	1	-1	requests _ outstanding = numconst ;	EMPTY	EMPTY
2	2411	2	-1	0	-1	request _ cwnd = request _ cwnd _ initial ;	EMPTY	EMPTY
2	2412	3	-1	0	-1	# endif	EMPTY	EMPTY
2	2419	1	1	1	-1	if ( send _ width == numconst ) send _ width = numconst ;	EMPTY	EMPTY
2	2420	3	-1	0	-1	if ( recv _ width == numconst ) recv _ width = numconst ;	EMPTY	EMPTY
2	2422	1	0	0	-1	if ( send _ ring == null ) {	EMPTY	EMPTY
2	2423	2	-1	0	-1	send _ ring = allocate _ buffer _ ring ( send _ width	EMPTY	EMPTY
2	2424	2	-1	0	-1	req _ size	EMPTY	EMPTY
2	2425	2	-1	0	-1	local _ send _ align	EMPTY	EMPTY
2	2426	2	-1	0	-1	local _ send _ offset ) ;	EMPTY	EMPTY
2	2427	3	-1	0	-1	}	EMPTY	EMPTY
2	2429	1	0	0	-1	if ( recv _ ring == null ) {	EMPTY	EMPTY
2	2430	2	-1	0	-1	recv _ ring = allocate _ buffer _ ring ( recv _ width	EMPTY	EMPTY
2	2431	2	-1	0	-1	rsp _ size	EMPTY	EMPTY
2	2432	2	-1	0	-1	local _ recv _ align	EMPTY	EMPTY
2	2433	2	-1	0	-1	local _ recv _ offset ) ;	EMPTY	EMPTY
2	2434	3	-1	0	-1	}	EMPTY	EMPTY
2	2438	1	1	1	-1	local _ res -> ai _ family = af _ inet _ sdp ;	EMPTY	EMPTY
2	2439	2	-1	0	-1	local _ res -> ai _ protocol = numconst ;	EMPTY	EMPTY
2	2440	3	-1	0	-1	send _ socket = create _ data _ socket ( local _ res ) ;	EMPTY	EMPTY
2	2442	1	0	0	-1	if ( send _ socket == invalid _ socket ) {	EMPTY	EMPTY
2	2443	2	-1	0	-1	perror ( strlit ) ;	EMPTY	EMPTY
2	2444	2	-1	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	2445	3	-1	0	-1	}	EMPTY	EMPTY
2	2447	1	0	0	-1	if ( debug ) {	EMPTY	EMPTY
2	2448	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	2449	3	-1	0	-1	}	EMPTY	EMPTY
2	2458	1	1	1	-1	if ( local _ cpu _ usage ) {	EMPTY	EMPTY
2	2459	2	-1	0	-1	local _ cpu _ rate = calibrate _ local _ cpu ( local _ cpu _ rate ) ;	EMPTY	EMPTY
2	2460	3	-1	0	-1	}	EMPTY	EMPTY
2	2462	1	0	0	-1	if ( ! no _ control ) {	EMPTY	EMPTY
2	2472	1	1	1	-1	netperf _ request . content . request _ type = do _ sdp _ rr ;	EMPTY	EMPTY
2	2473	2	-1	0	-1	sdp _ rr _ request -> recv _ buf _ size = rsr _ size _ req ;	EMPTY	EMPTY
2	2474	2	-1	0	-1	sdp _ rr _ request -> send _ buf _ size = rss _ size _ req ;	EMPTY	EMPTY
2	2475	2	-1	0	-1	sdp _ rr _ request -> recv _ alignment = remote _ recv _ align ;	EMPTY	EMPTY
2	2476	2	-1	0	-1	sdp _ rr _ request -> recv _ offset = remote _ recv _ offset ;	EMPTY	EMPTY
2	2477	2	-1	0	-1	sdp _ rr _ request -> send _ alignment = remote _ send _ align ;	EMPTY	EMPTY
2	2478	2	-1	0	-1	sdp _ rr _ request -> send _ offset = remote _ send _ offset ;	EMPTY	EMPTY
2	2479	2	-1	0	-1	sdp _ rr _ request -> request _ size = req _ size ;	EMPTY	EMPTY
2	2480	2	-1	0	-1	sdp _ rr _ request -> response _ size = rsp _ size ;	EMPTY	EMPTY
2	2481	2	-1	0	-1	sdp _ rr _ request -> no _ delay = rem _ nodelay ;	EMPTY	EMPTY
2	2482	2	-1	0	-1	sdp _ rr _ request -> measure _ cpu = remote _ cpu _ usage ;	EMPTY	EMPTY
2	2483	2	-1	0	-1	sdp _ rr _ request -> cpu _ rate = remote _ cpu _ rate ;	EMPTY	EMPTY
2	2484	2	-1	0	-1	sdp _ rr _ request -> so _ rcvavoid = rem _ rcvavoid ;	EMPTY	EMPTY
2	2485	2	-1	0	-1	sdp _ rr _ request -> so _ sndavoid = rem _ sndavoid ;	EMPTY	EMPTY
2	2486	2	-1	0	-1	if ( test _ time ) {	EMPTY	EMPTY
2	2487	2	-1	0	-1	sdp _ rr _ request -> test _ length = test _ time ;	EMPTY	EMPTY
2	2488	2	-1	0	-1	}	EMPTY	EMPTY
2	2489	2	-1	0	-1	else {	EMPTY	EMPTY
2	2490	2	-1	0	-1	sdp _ rr _ request -> test _ length = test _ trans * - numconst ;	EMPTY	EMPTY
2	2491	2	-1	0	-1	}	EMPTY	EMPTY
2	2492	2	-1	0	-1	sdp _ rr _ request -> port = atoi ( remote _ data _ port ) ;	EMPTY	EMPTY
2	2493	3	-1	0	-1	sdp _ rr _ request -> ipfamily = af _ to _ nf ( remote _ res -> ai _ family ) ;	EMPTY	EMPTY
2	2495	1	0	0	-1	if ( debug > numconst ) {	EMPTY	EMPTY
2	2496	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	2497	3	-1	0	-1	}	EMPTY	EMPTY
2	2499	1	0	0	-1	send _ request ( ) ;	EMPTY	EMPTY
2	2512	1	1	1	-1	recv _ response ( ) ;	EMPTY	EMPTY
2	2514	1	1	0	-1	if ( ! netperf _ response . content . serv _ errno ) {	EMPTY	EMPTY
2	2515	2	-1	0	-1	if ( debug )	EMPTY	EMPTY
2	2516	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	2517	2	-1	0	-1	rsr _ size = sdp _ rr _ response -> recv _ buf _ size ;	EMPTY	EMPTY
2	2518	2	-1	0	-1	rss _ size = sdp _ rr _ response -> send _ buf _ size ;	EMPTY	EMPTY
2	2519	2	-1	0	-1	rem _ nodelay = sdp _ rr _ response -> no _ delay ;	EMPTY	EMPTY
2	2520	2	-1	0	-1	remote _ cpu _ usage = sdp _ rr _ response -> measure _ cpu ;	EMPTY	EMPTY
2	2521	2	-1	0	-1	remote _ cpu _ rate = sdp _ rr _ response -> cpu _ rate ;	EMPTY	EMPTY
2	2523	2	-1	1	-1	set _ port _ number ( remote _ res  ( short ) sdp _ rr _ response -> data _ port _ number ) ;	EMPTY	EMPTY
2	2524	2	-1	0	-1	}	EMPTY	EMPTY
2	2525	2	-1	0	-1	else {	EMPTY	EMPTY
2	2526	2	-1	0	-1	set _ errno ( netperf _ response . content . serv _ errno ) ;	EMPTY	EMPTY
2	2527	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	2528	2	-1	0	-1	strlit	EMPTY	EMPTY
2	2529	2	-1	0	-1	netperf _ response . content . serv _ errno ) ;	EMPTY	EMPTY
2	2530	2	-1	0	-1	perror ( strlit ) ;	EMPTY	EMPTY
2	2531	3	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	2533	1	0	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	2534	2	-1	0	-1	}	EMPTY	EMPTY
2	2535	3	-1	0	-1	}	EMPTY	EMPTY
2	2537	1	0	0	-1	# ifdef want _ demo	EMPTY	EMPTY
2	2538	2	-1	0	-1	demo _ rr _ setup ( numconst )	EMPTY	EMPTY
2	2539	3	-1	0	-1	# endif	EMPTY	EMPTY
2	2542	1	1	1	-1	if ( connect ( send _ socket	EMPTY	EMPTY
2	2543	2	-1	0	-1	remote _ res -> ai _ addr	EMPTY	EMPTY
2	2544	2	-1	0	-1	remote _ res -> ai _ addrlen ) == invalid _ socket ) {	EMPTY	EMPTY
2	2545	3	-1	0	-1	perror ( strlit ) ;	EMPTY	EMPTY
2	2547	1	0	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	2548	3	-1	0	-1	}	EMPTY	EMPTY
2	2559	1	1	1	-1	if ( test _ time ) {	EMPTY	EMPTY
2	2561	2	-1	1	-1	times _ up = numconst ;	EMPTY	EMPTY
2	2562	2	-1	0	-1	trans _ remaining = numconst ;	EMPTY	EMPTY
2	2563	2	-1	0	-1	start _ timer ( test _ time ) ;	EMPTY	EMPTY
2	2564	2	-1	0	-1	}	EMPTY	EMPTY
2	2565	2	-1	0	-1	else {	EMPTY	EMPTY
2	2567	2	-1	1	-1	trans _ remaining = test _ bytes ;	EMPTY	EMPTY
2	2568	2	-1	0	-1	times _ up = numconst ;	EMPTY	EMPTY
2	2569	3	-1	0	-1	}	EMPTY	EMPTY
2	2575	1	1	1	-1	cpu _ start ( local _ cpu _ usage ) ;	EMPTY	EMPTY
2	2577	1	1	0	-1	# ifdef want _ intervals	EMPTY	EMPTY
2	2578	2	-1	0	-1	intervals _ init ( ) ;	EMPTY	EMPTY
2	2579	3	-1	1	-1	# endif	EMPTY	EMPTY
2	2590	1	1	1	-1	# ifdef want _ demo	EMPTY	EMPTY
2	2591	2	-1	0	-1	if ( demo _ mode ) {	EMPTY	EMPTY
2	2592	2	-1	0	-1	hist _ timestamp ( demo _ one _ ptr ) ;	EMPTY	EMPTY
2	2593	2	-1	0	-1	}	EMPTY	EMPTY
2	2594	3	-1	0	-1	# endif	EMPTY	EMPTY
2	2596	1	0	0	-1	while ( ( ! times _ up ) || ( trans _ remaining > numconst ) ) {	EMPTY	EMPTY
2	2600	1	1	1	-1	# ifdef want _ first _ burst	EMPTY	EMPTY
2	2611	2	-1	1	-1	while ( ( first _ burst _ size > numconst ) &&	EMPTY	EMPTY
2	2612	2	-1	0	-1	( requests _ outstanding < request _ cwnd ) &&	EMPTY	EMPTY
2	2613	2	-1	0	-1	( requests _ outstanding < first _ burst _ size ) ) {	EMPTY	EMPTY
2	2614	2	-1	0	-1	if ( debug ) {	EMPTY	EMPTY
2	2615	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	2616	2	-1	0	-1	strlit	EMPTY	EMPTY
2	2617	2	-1	0	-1	requests _ outstanding	EMPTY	EMPTY
2	2618	2	-1	0	-1	request _ cwnd	EMPTY	EMPTY
2	2619	2	-1	0	-1	first _ burst _ size ) ;	EMPTY	EMPTY
2	2620	2	-1	0	-1	}	EMPTY	EMPTY
2	2621	2	-1	0	-1	if ( ( len = send ( send _ socket	EMPTY	EMPTY
2	2622	2	-1	0	-1	send _ ring -> buffer _ ptr	EMPTY	EMPTY
2	2623	2	-1	0	-1	req _ size	EMPTY	EMPTY
2	2624	2	-1	0	-1	numconst ) ) != req _ size ) {	EMPTY	EMPTY
2	2626	2	-1	1	-1	perror ( strlit ) ;	EMPTY	EMPTY
2	2627	2	-1	0	-1	exit ( - numconst ) ;	EMPTY	EMPTY
2	2628	2	-1	0	-1	}	EMPTY	EMPTY
2	2629	2	-1	0	-1	requests _ outstanding += numconst ;	EMPTY	EMPTY
2	2630	3	-1	0	-1	}	EMPTY	EMPTY
2	2632	1	1	1	-1	# endif	EMPTY	EMPTY
2	2634	1	0	0	-1	# ifdef want _ histogram	EMPTY	EMPTY
2	2635	3	-1	0	-1	if ( verbosity > numconst ) {	EMPTY	EMPTY
2	2641	1	1	1	-1	hist _ timestamp ( & time _ one ) ;	EMPTY	EMPTY
2	2642	2	-1	0	-1	}	EMPTY	EMPTY
2	2643	3	-1	1	-1	# endif	EMPTY	EMPTY
2	2645	1	1	0	-1	if ( ( len = send ( send _ socket	EMPTY	EMPTY
2	2646	2	-1	0	-1	send _ ring -> buffer _ ptr	EMPTY	EMPTY
2	2647	2	-1	0	-1	req _ size	EMPTY	EMPTY
2	2648	2	-1	0	-1	numconst ) ) != req _ size ) {	EMPTY	EMPTY
2	2649	2	-1	0	-1	if ( socket _ eintr ( len ) || ( errno == numconst ) ) {	EMPTY	EMPTY
2	2652	2	-1	1	-1	timed _ out = numconst ;	EMPTY	EMPTY
2	2653	2	-1	0	-1	break ;	EMPTY	EMPTY
2	2654	2	-1	0	-1	}	EMPTY	EMPTY
2	2655	2	-1	0	-1	perror ( strlit ) ;	EMPTY	EMPTY
2	2656	2	-1	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	2657	2	-1	0	-1	}	EMPTY	EMPTY
2	2658	3	-1	0	-1	send _ ring = send _ ring -> next ;	EMPTY	EMPTY
2	2660	1	0	0	-1	# ifdef want _ first _ burst	EMPTY	EMPTY
2	2661	2	-1	0	-1	requests _ outstanding += numconst ;	EMPTY	EMPTY
2	2662	3	-1	0	-1	# endif	EMPTY	EMPTY
2	2665	1	1	1	-1	rsp _ bytes _ left = rsp _ size ;	EMPTY	EMPTY
2	2666	2	-1	0	-1	temp _ message _ ptr = recv _ ring -> buffer _ ptr ;	EMPTY	EMPTY
2	2667	2	-1	0	-1	while ( rsp _ bytes _ left > numconst ) {	EMPTY	EMPTY
2	2668	2	-1	0	-1	if ( ( rsp _ bytes _ recvd = recv ( send _ socket	EMPTY	EMPTY
2	2669	2	-1	0	-1	temp _ message _ ptr	EMPTY	EMPTY
2	2670	2	-1	0	-1	rsp _ bytes _ left	EMPTY	EMPTY
2	2671	2	-1	0	-1	numconst ) ) == socket _ error ) {	EMPTY	EMPTY
2	2672	2	-1	0	-1	if ( socket _ eintr ( rsp _ bytes _ recvd ) ) {	EMPTY	EMPTY
2	2674	2	-1	1	-1	timed _ out = numconst ;	EMPTY	EMPTY
2	2675	2	-1	0	-1	break ;	EMPTY	EMPTY
2	2676	2	-1	0	-1	}	EMPTY	EMPTY
2	2677	2	-1	0	-1	perror ( strlit ) ;	EMPTY	EMPTY
2	2678	2	-1	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	2679	2	-1	0	-1	}	EMPTY	EMPTY
2	2680	2	-1	0	-1	rsp _ bytes _ left -= rsp _ bytes _ recvd ;	EMPTY	EMPTY
2	2681	2	-1	0	-1	temp _ message _ ptr += rsp _ bytes _ recvd ;	EMPTY	EMPTY
2	2682	2	-1	0	-1	}	EMPTY	EMPTY
2	2683	3	-1	0	-1	recv _ ring = recv _ ring -> next ;	EMPTY	EMPTY
2	2685	1	1	0	-1	# ifdef want _ first _ burst	EMPTY	EMPTY
2	2689	2	-1	1	-1	requests _ outstanding -= numconst ;	EMPTY	EMPTY
2	2690	2	-1	0	-1	if ( request _ cwnd < first _ burst _ size ) {	EMPTY	EMPTY
2	2691	2	-1	0	-1	request _ cwnd += numconst ;	EMPTY	EMPTY
2	2692	2	-1	0	-1	if ( debug ) {	EMPTY	EMPTY
2	2693	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	2694	2	-1	0	-1	strlit	EMPTY	EMPTY
2	2695	2	-1	0	-1	request _ cwnd	EMPTY	EMPTY
2	2696	2	-1	0	-1	first _ burst _ size	EMPTY	EMPTY
2	2697	2	-1	0	-1	requests _ outstanding ) ;	EMPTY	EMPTY
2	2698	2	-1	0	-1	}	EMPTY	EMPTY
2	2699	2	-1	0	-1	}	EMPTY	EMPTY
2	2700	2	-1	0	-1	# endif	EMPTY	EMPTY
2	2701	2	-1	0	-1	if ( timed _ out ) {	EMPTY	EMPTY
2	2704	2	-1	1	-1	break ;	EMPTY	EMPTY
2	2705	3	-1	0	-1	}	EMPTY	EMPTY
2	2707	1	1	0	-1	# ifdef want _ histogram	EMPTY	EMPTY
2	2708	2	-1	0	-1	if ( verbosity > numconst ) {	EMPTY	EMPTY
2	2709	2	-1	0	-1	hist _ timestamp ( & time _ two ) ;	EMPTY	EMPTY
2	2710	2	-1	0	-1	hist _ add ( time _ hist  delta _ micro ( & time _ one  & time _ two ) ) ;	EMPTY	EMPTY
2	2711	2	-1	0	-1	}	EMPTY	EMPTY
2	2712	3	-1	1	-1	# endif	EMPTY	EMPTY
2	2714	1	0	0	-1	# ifdef want _ demo	EMPTY	EMPTY
2	2715	2	-1	0	-1	demo _ rr _ interval ( numconst ) ;	EMPTY	EMPTY
2	2716	3	-1	0	-1	# endif	EMPTY	EMPTY
2	2718	1	1	0	-1	# ifdef want _ intervals	EMPTY	EMPTY
2	2719	2	-1	0	-1	intervals _ wait ( ) ;	EMPTY	EMPTY
2	2720	3	-1	1	-1	# endif	EMPTY	EMPTY
2	2722	1	0	0	-1	nummessages ++ ;	EMPTY	EMPTY
2	2723	2	-1	0	-1	if ( trans _ remaining ) {	EMPTY	EMPTY
2	2724	2	-1	0	-1	trans _ remaining -- ;	EMPTY	EMPTY
2	2725	3	-1	0	-1	}	EMPTY	EMPTY
2	2727	1	0	0	-1	if ( debug > numconst ) {	EMPTY	EMPTY
2	2728	2	-1	0	-1	if ( ( nummessages % numconst ) == numconst ) {	EMPTY	EMPTY
2	2729	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	2730	2	-1	0	-1	strlit	EMPTY	EMPTY
2	2731	2	-1	0	-1	nummessages ) ;	EMPTY	EMPTY
2	2732	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	2733	2	-1	0	-1	}	EMPTY	EMPTY
2	2734	2	-1	0	-1	}	EMPTY	EMPTY
2	2735	3	-1	0	-1	}	EMPTY	EMPTY
2	2747	1	1	1	-1	cpu _ stop ( local _ cpu _ usage  & elapsed _ time ) ;	EMPTY	EMPTY
2	2751	1	1	1	-1	if ( ! no _ control ) {	EMPTY	EMPTY
2	2756	1	1	1	-1	recv _ response ( ) ;	EMPTY	EMPTY
2	2757	2	-1	0	-1	if ( ! netperf _ response . content . serv _ errno ) {	EMPTY	EMPTY
2	2758	2	-1	0	-1	if ( debug )	EMPTY	EMPTY
2	2759	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	2760	2	-1	0	-1	}	EMPTY	EMPTY
2	2761	2	-1	0	-1	else {	EMPTY	EMPTY
2	2762	2	-1	0	-1	set _ errno ( netperf _ response . content . serv _ errno ) ;	EMPTY	EMPTY
2	2763	2	-1	0	-1	fprintf ( where  strlit	EMPTY	EMPTY
2	2764	2	-1	0	-1	netperf _ response . content . serv _ errno ) ;	EMPTY	EMPTY
2	2765	2	-1	0	-1	perror ( strlit ) ;	EMPTY	EMPTY
2	2766	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	2767	2	-1	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	2768	2	-1	0	-1	}	EMPTY	EMPTY
2	2769	3	-1	0	-1	}	EMPTY	EMPTY
2	2773	1	1	1	-1	bytes _ xferd = ( req _ size * nummessages ) + ( rsp _ size * nummessages ) ;	EMPTY	EMPTY
2	2774	3	-1	0	-1	thruput = nummessages / elapsed _ time ;	EMPTY	EMPTY
2	2776	1	1	0	-1	if ( local _ cpu _ usage || remote _ cpu _ usage ) {	EMPTY	EMPTY
2	2782	2	-1	1	-1	if ( local _ cpu _ usage ) {	EMPTY	EMPTY
2	2783	2	-1	0	-1	local _ cpu _ utilization = calc _ cpu _ util ( numconst ) ;	EMPTY	EMPTY
2	2787	2	-1	1	-1	local _ service _ demand = calc _ service _ demand ( ( double ) nummessages * numconst	EMPTY	EMPTY
2	2788	2	-1	0	-1	numconst	EMPTY	EMPTY
2	2789	2	-1	0	-1	numconst	EMPTY	EMPTY
2	2790	2	-1	0	-1	numconst ) ;	EMPTY	EMPTY
2	2791	2	-1	0	-1	}	EMPTY	EMPTY
2	2792	2	-1	0	-1	else {	EMPTY	EMPTY
2	2793	2	-1	0	-1	local _ cpu _ utilization = ( float ) - numconst ;	EMPTY	EMPTY
2	2794	2	-1	0	-1	local _ service _ demand = ( float ) - numconst ;	EMPTY	EMPTY
2	2795	3	-1	0	-1	}	EMPTY	EMPTY
2	2797	1	1	0	-1	if ( remote _ cpu _ usage ) {	EMPTY	EMPTY
2	2798	2	-1	0	-1	remote _ cpu _ utilization = sdp _ rr _ result -> cpu _ util ;	EMPTY	EMPTY
2	2802	2	-1	1	-1	remote _ service _ demand = calc _ service _ demand ( ( double ) nummessages * numconst	EMPTY	EMPTY
2	2803	2	-1	0	-1	numconst	EMPTY	EMPTY
2	2804	2	-1	0	-1	remote _ cpu _ utilization	EMPTY	EMPTY
2	2805	2	-1	0	-1	sdp _ rr _ result -> num _ cpus ) ;	EMPTY	EMPTY
2	2806	2	-1	0	-1	}	EMPTY	EMPTY
2	2807	2	-1	0	-1	else {	EMPTY	EMPTY
2	2808	2	-1	0	-1	remote _ cpu _ utilization = ( float ) - numconst ;	EMPTY	EMPTY
2	2809	2	-1	0	-1	remote _ service _ demand = ( float ) - numconst ;	EMPTY	EMPTY
2	2810	3	-1	0	-1	}	EMPTY	EMPTY
2	2812	1	1	0	-1	}	EMPTY	EMPTY
2	2813	2	-1	0	-1	else {	EMPTY	EMPTY
2	2816	2	-1	1	-1	local _ cpu _ utilization = ( float ) - numconst ;	EMPTY	EMPTY
2	2817	2	-1	0	-1	local _ service _ demand = ( float ) - numconst ;	EMPTY	EMPTY
2	2818	2	-1	0	-1	remote _ cpu _ utilization = ( float ) - numconst ;	EMPTY	EMPTY
2	2819	2	-1	0	-1	remote _ service _ demand = ( float ) - numconst ;	EMPTY	EMPTY
2	2820	3	-1	0	-1	}	EMPTY	EMPTY
2	2826	1	1	1	-1	calculate _ confidence ( confidence _ iteration	EMPTY	EMPTY
2	2827	2	-1	0	-1	elapsed _ time	EMPTY	EMPTY
2	2828	2	-1	0	-1	thruput	EMPTY	EMPTY
2	2829	2	-1	0	-1	local _ cpu _ utilization	EMPTY	EMPTY
2	2830	2	-1	0	-1	remote _ cpu _ utilization	EMPTY	EMPTY
2	2831	2	-1	0	-1	local _ service _ demand	EMPTY	EMPTY
2	2832	3	-1	0	-1	remote _ service _ demand ) ;	EMPTY	EMPTY
2	2835	1	0	0	-1	confidence _ iteration ++ ;	EMPTY	EMPTY
2	2838	1	1	1	-1	close ( send _ socket ) ;	EMPTY	EMPTY
2	2840	1	0	0	-1	}	EMPTY	EMPTY
2	2842	1	0	0	-1	retrieve _ confident _ values ( & elapsed _ time	EMPTY	EMPTY
2	2843	2	-1	0	-1	& thruput	EMPTY	EMPTY
2	2844	2	-1	0	-1	& local _ cpu _ utilization	EMPTY	EMPTY
2	2845	2	-1	0	-1	& remote _ cpu _ utilization	EMPTY	EMPTY
2	2846	2	-1	0	-1	& local _ service _ demand	EMPTY	EMPTY
2	2847	3	-1	0	-1	& remote _ service _ demand ) ;	EMPTY	EMPTY
2	2858	1	1	1	-1	if ( confidence < numconst ) {	EMPTY	EMPTY
2	2860	2	-1	1	-1	if ( iteration _ max > numconst ) {	EMPTY	EMPTY
2	2861	2	-1	0	-1	display _ confidence ( ) ;	EMPTY	EMPTY
2	2862	2	-1	0	-1	}	EMPTY	EMPTY
2	2863	3	-1	0	-1	}	EMPTY	EMPTY
2	2865	1	0	0	-1	if ( local _ cpu _ usage || remote _ cpu _ usage ) {	EMPTY	EMPTY
2	2866	2	-1	0	-1	local _ cpu _ method = format _ cpu _ method ( cpu _ method ) ;	EMPTY	EMPTY
2	2867	3	-1	0	-1	remote _ cpu _ method = format _ cpu _ method ( sdp _ rr _ result -> cpu _ method ) ;	EMPTY	EMPTY
2	2869	1	0	0	-1	switch ( verbosity ) {	EMPTY	EMPTY
2	2870	2	-1	0	-1	case numconst :	EMPTY	EMPTY
2	2871	2	-1	0	-1	if ( local _ cpu _ usage ) {	EMPTY	EMPTY
2	2872	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	2873	2	-1	0	-1	cpu _ fmt _ 0	EMPTY	EMPTY
2	2874	2	-1	0	-1	local _ service _ demand	EMPTY	EMPTY
2	2875	2	-1	0	-1	local _ cpu _ method	EMPTY	EMPTY
2	2876	2	-1	0	-1	( ( print _ headers ) ||	EMPTY	EMPTY
2	2877	2	-1	0	-1	( result _ brand == null ) ) ? strlit : result _ brand ) ;	EMPTY	EMPTY
2	2878	2	-1	0	-1	}	EMPTY	EMPTY
2	2879	2	-1	0	-1	else {	EMPTY	EMPTY
2	2880	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	2881	2	-1	0	-1	cpu _ fmt _ 0	EMPTY	EMPTY
2	2882	2	-1	0	-1	remote _ service _ demand	EMPTY	EMPTY
2	2883	2	-1	0	-1	remote _ cpu _ method	EMPTY	EMPTY
2	2884	2	-1	0	-1	( ( print _ headers ) ||	EMPTY	EMPTY
2	2885	2	-1	0	-1	( result _ brand == null ) ) ? strlit : result _ brand ) ;	EMPTY	EMPTY
2	2886	2	-1	0	-1	}	EMPTY	EMPTY
2	2887	2	-1	0	-1	break ;	EMPTY	EMPTY
2	2888	2	-1	0	-1	case numconst :	EMPTY	EMPTY
2	2889	2	-1	0	-1	case numconst :	EMPTY	EMPTY
2	2890	2	-1	0	-1	if ( print _ headers ) {	EMPTY	EMPTY
2	2891	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	2892	2	-1	0	-1	cpu _ title	EMPTY	EMPTY
2	2893	2	-1	0	-1	local _ cpu _ method	EMPTY	EMPTY
2	2894	2	-1	0	-1	remote _ cpu _ method ) ;	EMPTY	EMPTY
2	2895	3	-1	0	-1	}	EMPTY	EMPTY
2	2897	1	1	0	-1	fprintf ( where	EMPTY	EMPTY
2	2898	2	-1	1	-1	cpu _ fmt _ 1 _ line _ 1	EMPTY	EMPTY
2	2899	2	-1	1	-1	lss _ size	EMPTY	EMPTY
2	2900	2	-1	0	-1	lsr _ size	EMPTY	EMPTY
2	2901	2	-1	1	-1	req _ size	EMPTY	EMPTY
2	2902	2	-1	1	-1	rsp _ size	EMPTY	EMPTY
2	2903	2	-1	1	-1	elapsed _ time	EMPTY	EMPTY
2	2904	2	-1	0	-1	thruput	EMPTY	EMPTY
2	2905	2	-1	1	-1	local _ cpu _ utilization	EMPTY	EMPTY
2	2906	2	-1	1	-1	remote _ cpu _ utilization	EMPTY	EMPTY
2	2907	2	-1	1	-1	local _ service _ demand	EMPTY	EMPTY
2	2908	2	-1	1	-1	remote _ service _ demand	EMPTY	EMPTY
2	2909	2	-1	0	-1	( ( print _ headers ) ||	EMPTY	EMPTY
2	2910	2	-1	0	-1	( result _ brand == null ) ) ? strlit : result _ brand ) ;	EMPTY	EMPTY
2	2911	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	2912	2	-1	0	-1	cpu _ fmt _ 1 _ line _ 2	EMPTY	EMPTY
2	2913	2	-1	0	-1	rss _ size	EMPTY	EMPTY
2	2914	2	-1	0	-1	rsr _ size ) ;	EMPTY	EMPTY
2	2915	2	-1	0	-1	break ;	EMPTY	EMPTY
2	2916	2	-1	0	-1	}	EMPTY	EMPTY
2	2917	2	-1	0	-1	}	EMPTY	EMPTY
2	2918	3	-1	0	-1	else {	EMPTY	EMPTY
2	2921	1	1	1	-1	switch ( verbosity ) {	EMPTY	EMPTY
2	2922	2	-1	0	-1	case numconst :	EMPTY	EMPTY
2	2923	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	2924	2	-1	0	-1	tput _ fmt _ 0	EMPTY	EMPTY
2	2925	2	-1	0	-1	thruput	EMPTY	EMPTY
2	2926	2	-1	0	-1	( ( print _ headers ) ||	EMPTY	EMPTY
2	2927	2	-1	0	-1	( result _ brand == null ) ) ? strlit : result _ brand ) ;	EMPTY	EMPTY
2	2928	2	-1	0	-1	break ;	EMPTY	EMPTY
2	2929	2	-1	0	-1	case numconst :	EMPTY	EMPTY
2	2930	2	-1	0	-1	case numconst :	EMPTY	EMPTY
2	2931	2	-1	0	-1	if ( print _ headers ) {	EMPTY	EMPTY
2	2932	2	-1	0	-1	fprintf ( where  tput _ title  format _ units ( ) ) ;	EMPTY	EMPTY
2	2933	3	-1	0	-1	}	EMPTY	EMPTY
2	2935	1	1	0	-1	fprintf ( where	EMPTY	EMPTY
2	2936	2	-1	1	-1	tput _ fmt _ 1 _ line _ 1	EMPTY	EMPTY
2	2937	2	-1	0	-1	lss _ size	EMPTY	EMPTY
2	2938	2	-1	0	-1	lsr _ size	EMPTY	EMPTY
2	2939	2	-1	1	-1	req _ size	EMPTY	EMPTY
2	2940	2	-1	1	-1	rsp _ size	EMPTY	EMPTY
2	2941	2	-1	1	-1	elapsed _ time	EMPTY	EMPTY
2	2942	2	-1	0	-1	thruput	EMPTY	EMPTY
2	2943	2	-1	0	-1	( ( print _ headers ) ||	EMPTY	EMPTY
2	2944	2	-1	0	-1	( result _ brand == null ) ) ? strlit : result _ brand ) ;	EMPTY	EMPTY
2	2945	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	2946	2	-1	0	-1	tput _ fmt _ 1 _ line _ 2	EMPTY	EMPTY
2	2947	2	-1	1	-1	rss _ size	EMPTY	EMPTY
2	2948	3	-1	0	-1	rsr _ size ) ;	EMPTY	EMPTY
2	2950	1	0	0	-1	break ;	EMPTY	EMPTY
2	2951	2	-1	0	-1	}	EMPTY	EMPTY
2	2952	3	-1	0	-1	}	EMPTY	EMPTY
2	2962	1	1	1	-1	if ( verbosity > numconst ) {	EMPTY	EMPTY
2	2968	1	1	1	-1	fprintf ( where	EMPTY	EMPTY
2	2969	2	-1	0	-1	ksink _ fmt	EMPTY	EMPTY
2	2970	2	-1	0	-1	local _ send _ align	EMPTY	EMPTY
2	2971	2	-1	0	-1	remote _ recv _ offset	EMPTY	EMPTY
2	2972	2	-1	0	-1	local _ send _ offset	EMPTY	EMPTY
2	2973	3	-1	0	-1	remote _ recv _ offset ) ;	EMPTY	EMPTY
2	2975	1	1	0	-1	# ifdef want _ histogram	EMPTY	EMPTY
2	2976	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	2977	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	2978	2	-1	0	-1	hist _ report ( time _ hist ) ;	EMPTY	EMPTY
2	2979	3	-1	1	-1	# endif	EMPTY	EMPTY
2	2981	1	0	0	-1	}	EMPTY	EMPTY
2	2983	1	1	0	-1	}	EMPTY	EMPTY
2	2986	2	-1	1	-1	void	EMPTY	EMPTY
2	2987	2	-1	0	-1	recv _ sdp _ rr ( )	EMPTY	EMPTY
2	2988	3	-1	0	-1	{	EMPTY	EMPTY
2	2990	1	0	0	-1	struct ring _ elt * send _ ring ;	EMPTY	EMPTY
2	2991	3	-1	0	-1	struct ring _ elt * recv _ ring ;	EMPTY	EMPTY
2	2993	1	0	0	-1	struct addrinfo * local _ res ;	EMPTY	EMPTY
2	2994	2	-1	0	-1	char local _ name [ bufsiz ] ;	EMPTY	EMPTY
2	2995	3	-1	0	-1	char port _ buffer [ portbufsize ] ;	EMPTY	EMPTY
2	2997	1	0	0	-1	struct sockaddr _ in myaddr _ in	EMPTY	EMPTY
2	2998	2	-1	0	-1	peeraddr _ in ;	EMPTY	EMPTY
2	2999	2	-1	0	-1	socket s _ listen  s _ data ;	EMPTY	EMPTY
2	3000	2	-1	0	-1	netperf _ socklen _ t addrlen ;	EMPTY	EMPTY
2	3001	2	-1	0	-1	char * temp _ message _ ptr ;	EMPTY	EMPTY
2	3002	2	-1	0	-1	int trans _ received ;	EMPTY	EMPTY
2	3003	2	-1	0	-1	int trans _ remaining ;	EMPTY	EMPTY
2	3004	2	-1	0	-1	int bytes _ sent ;	EMPTY	EMPTY
2	3005	2	-1	0	-1	int request _ bytes _ recvd ;	EMPTY	EMPTY
2	3006	2	-1	0	-1	int request _ bytes _ remaining ;	EMPTY	EMPTY
2	3007	2	-1	0	-1	int timed _ out = numconst ;	EMPTY	EMPTY
2	3008	2	-1	0	-1	int sock _ closed = numconst ;	EMPTY	EMPTY
2	3009	3	-1	0	-1	float elapsed _ time ;	EMPTY	EMPTY
2	3011	1	0	0	-1	struct sdp _ rr _ request _ struct * sdp _ rr _ request ;	EMPTY	EMPTY
2	3012	2	-1	0	-1	struct sdp _ rr _ response _ struct * sdp _ rr _ response ;	EMPTY	EMPTY
2	3013	3	-1	0	-1	struct sdp _ rr _ results _ struct * sdp _ rr _ results ;	EMPTY	EMPTY
2	3015	1	0	0	-1	sdp _ rr _ request =	EMPTY	EMPTY
2	3016	2	-1	0	-1	( struct sdp _ rr _ request _ struct * ) netperf _ request . content . test _ specific _ data ;	EMPTY	EMPTY
2	3017	2	-1	0	-1	sdp _ rr _ response =	EMPTY	EMPTY
2	3018	2	-1	0	-1	( struct sdp _ rr _ response _ struct * ) netperf _ response . content . test _ specific _ data ;	EMPTY	EMPTY
2	3019	2	-1	0	-1	sdp _ rr _ results =	EMPTY	EMPTY
2	3020	3	-1	0	-1	( struct sdp _ rr _ results _ struct * ) netperf _ response . content . test _ specific _ data ;	EMPTY	EMPTY
2	3022	1	0	0	-1	if ( debug ) {	EMPTY	EMPTY
2	3023	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	3024	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	3025	3	-1	0	-1	}	EMPTY	EMPTY
2	3040	1	1	1	-1	if ( debug ) {	EMPTY	EMPTY
2	3041	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	3042	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	3043	3	-1	0	-1	}	EMPTY	EMPTY
2	3045	1	0	0	-1	netperf _ response . content . response _ type = sdp _ rr _ response ;	EMPTY	EMPTY
2	3047	1	0	0	-1	if ( debug ) {	EMPTY	EMPTY
2	3048	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	3049	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	3050	3	-1	0	-1	}	EMPTY	EMPTY
2	3054	1	1	1	-1	if ( debug ) {	EMPTY	EMPTY
2	3055	2	-1	0	-1	fprintf ( where  strlit	EMPTY	EMPTY
2	3056	2	-1	0	-1	sdp _ rr _ request -> recv _ alignment	EMPTY	EMPTY
2	3057	2	-1	0	-1	sdp _ rr _ request -> recv _ offset ) ;	EMPTY	EMPTY
2	3058	2	-1	0	-1	fprintf ( where  strlit	EMPTY	EMPTY
2	3059	2	-1	0	-1	sdp _ rr _ request -> send _ alignment	EMPTY	EMPTY
2	3060	2	-1	0	-1	sdp _ rr _ request -> send _ offset ) ;	EMPTY	EMPTY
2	3061	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	3062	3	-1	0	-1	}	EMPTY	EMPTY
2	3065	1	1	1	-1	if ( send _ width == numconst ) send _ width = numconst ;	EMPTY	EMPTY
2	3066	3	-1	0	-1	if ( recv _ width == numconst ) recv _ width = numconst ;	EMPTY	EMPTY
2	3068	1	0	0	-1	send _ ring = allocate _ buffer _ ring ( send _ width	EMPTY	EMPTY
2	3069	2	-1	0	-1	sdp _ rr _ request -> response _ size	EMPTY	EMPTY
2	3070	2	-1	0	-1	sdp _ rr _ request -> send _ alignment	EMPTY	EMPTY
2	3071	3	-1	0	-1	sdp _ rr _ request -> send _ offset ) ;	EMPTY	EMPTY
2	3073	1	0	0	-1	recv _ ring = allocate _ buffer _ ring ( recv _ width	EMPTY	EMPTY
2	3074	2	-1	0	-1	sdp _ rr _ request -> request _ size	EMPTY	EMPTY
2	3075	2	-1	0	-1	sdp _ rr _ request -> recv _ alignment	EMPTY	EMPTY
2	3076	3	-1	0	-1	sdp _ rr _ request -> recv _ offset ) ;	EMPTY	EMPTY
2	3081	1	1	1	-1	if ( debug ) {	EMPTY	EMPTY
2	3082	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	3083	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	3084	3	-1	0	-1	}	EMPTY	EMPTY
2	3090	1	1	1	-1	lss _ size _ req = sdp _ rr _ request -> send _ buf _ size ;	EMPTY	EMPTY
2	3091	2	-1	0	-1	lsr _ size _ req = sdp _ rr _ request -> recv _ buf _ size ;	EMPTY	EMPTY
2	3092	2	-1	0	-1	loc _ nodelay = sdp _ rr _ request -> no _ delay ;	EMPTY	EMPTY
2	3093	2	-1	0	-1	loc _ rcvavoid = sdp _ rr _ request -> so _ rcvavoid ;	EMPTY	EMPTY
2	3094	3	-1	0	-1	loc _ sndavoid = sdp _ rr _ request -> so _ sndavoid ;	EMPTY	EMPTY
2	3096	1	0	0	-1	set _ hostname _ and _ port ( local _ name	EMPTY	EMPTY
2	3097	2	-1	0	-1	port _ buffer	EMPTY	EMPTY
2	3098	2	-1	0	-1	nf _ to _ af ( sdp _ rr _ request -> ipfamily )	EMPTY	EMPTY
2	3099	3	-1	0	-1	sdp _ rr _ request -> port ) ;	EMPTY	EMPTY
2	3101	1	0	0	-1	local _ res = complete _ addrinfo ( local _ name	EMPTY	EMPTY
2	3102	2	-1	0	-1	local _ name	EMPTY	EMPTY
2	3103	2	-1	0	-1	port _ buffer	EMPTY	EMPTY
2	3104	2	-1	0	-1	nf _ to _ af ( sdp _ rr _ request -> ipfamily )	EMPTY	EMPTY
2	3105	2	-1	0	-1	sock _ stream	EMPTY	EMPTY
2	3106	2	-1	0	-1	ipproto _ tcp	EMPTY	EMPTY
2	3107	3	-1	0	-1	numconst ) ;	EMPTY	EMPTY
2	3110	1	1	1	-1	local _ res -> ai _ family = af _ inet _ sdp ;	EMPTY	EMPTY
2	3111	2	-1	0	-1	local _ res -> ai _ protocol = numconst ;	EMPTY	EMPTY
2	3112	3	-1	0	-1	s _ listen = create _ data _ socket ( local _ res ) ;	EMPTY	EMPTY
2	3114	1	0	0	-1	if ( s _ listen == invalid _ socket ) {	EMPTY	EMPTY
2	3115	2	-1	0	-1	netperf _ response . content . serv _ errno = errno ;	EMPTY	EMPTY
2	3116	3	-1	0	-1	send _ response ( ) ;	EMPTY	EMPTY
2	3118	1	0	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	3119	3	-1	0	-1	}	EMPTY	EMPTY
2	3122	1	1	0	-1	# ifdef win32	EMPTY	EMPTY
2	3126	2	-1	1	-1	win _ kludge _ socket2 = s _ listen ;	EMPTY	EMPTY
2	3127	3	-1	0	-1	# endif	EMPTY	EMPTY
2	3131	1	1	1	-1	if ( listen ( s _ listen  numconst ) == socket _ error ) {	EMPTY	EMPTY
2	3132	2	-1	0	-1	netperf _ response . content . serv _ errno = errno ;	EMPTY	EMPTY
2	3133	2	-1	0	-1	close ( s _ listen ) ;	EMPTY	EMPTY
2	3134	3	-1	0	-1	send _ response ( ) ;	EMPTY	EMPTY
2	3136	1	0	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	3137	3	-1	0	-1	}	EMPTY	EMPTY
2	3141	1	1	1	-1	addrlen = sizeof ( myaddr _ in ) ;	EMPTY	EMPTY
2	3142	2	-1	0	-1	if ( getsockname ( s _ listen	EMPTY	EMPTY
2	3143	2	-1	0	-1	( struct sockaddr * ) & myaddr _ in	EMPTY	EMPTY
2	3144	2	-1	0	-1	& addrlen ) == socket _ error ) {	EMPTY	EMPTY
2	3145	2	-1	0	-1	netperf _ response . content . serv _ errno = errno ;	EMPTY	EMPTY
2	3146	2	-1	0	-1	close ( s _ listen ) ;	EMPTY	EMPTY
2	3147	3	-1	0	-1	send _ response ( ) ;	EMPTY	EMPTY
2	3149	1	0	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	3150	3	-1	0	-1	}	EMPTY	EMPTY
2	3156	1	1	1	-1	sdp _ rr _ response -> data _ port _ number = ( int ) ntohs ( myaddr _ in . sin _ port ) ;	EMPTY	EMPTY
2	3157	3	-1	0	-1	netperf _ response . content . serv _ errno = numconst ;	EMPTY	EMPTY
2	3165	1	1	1	-1	sdp _ rr _ response -> cpu _ rate = ( float ) numconst ;	EMPTY	EMPTY
2	3166	3	-1	0	-1	sdp _ rr _ response -> measure _ cpu = numconst ;	EMPTY	EMPTY
2	3168	1	0	0	-1	if ( sdp _ rr _ request -> measure _ cpu ) {	EMPTY	EMPTY
2	3169	2	-1	0	-1	sdp _ rr _ response -> measure _ cpu = numconst ;	EMPTY	EMPTY
2	3170	2	-1	0	-1	sdp _ rr _ response -> cpu _ rate = calibrate _ local _ cpu ( sdp _ rr _ request -> cpu _ rate ) ;	EMPTY	EMPTY
2	3171	3	-1	0	-1	}	EMPTY	EMPTY
2	3176	1	1	1	-1	sdp _ rr _ response -> send _ buf _ size = lss _ size ;	EMPTY	EMPTY
2	3177	2	-1	0	-1	sdp _ rr _ response -> recv _ buf _ size = lsr _ size ;	EMPTY	EMPTY
2	3178	2	-1	0	-1	sdp _ rr _ response -> no _ delay = loc _ nodelay ;	EMPTY	EMPTY
2	3179	2	-1	0	-1	sdp _ rr _ response -> so _ rcvavoid = loc _ rcvavoid ;	EMPTY	EMPTY
2	3180	2	-1	0	-1	sdp _ rr _ response -> so _ sndavoid = loc _ sndavoid ;	EMPTY	EMPTY
2	3181	2	-1	0	-1	sdp _ rr _ response -> test _ length = sdp _ rr _ request -> test _ length ;	EMPTY	EMPTY
2	3182	3	-1	0	-1	send _ response ( ) ;	EMPTY	EMPTY
2	3184	1	0	0	-1	addrlen = sizeof ( peeraddr _ in ) ;	EMPTY	EMPTY
2	3186	1	1	0	-1	if ( ( s _ data = accept ( s _ listen	EMPTY	EMPTY
2	3187	2	-1	0	-1	( struct sockaddr * ) & peeraddr _ in	EMPTY	EMPTY
2	3188	2	-1	0	-1	& addrlen ) ) == invalid _ socket ) {	EMPTY	EMPTY
2	3190	3	-1	1	-1	close ( s _ listen ) ;	EMPTY	EMPTY
2	3192	1	0	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	3193	3	-1	0	-1	}	EMPTY	EMPTY
2	3195	1	0	0	-1	# ifdef kludge _ socket _ options	EMPTY	EMPTY
2	3200	1	1	1	-1	kludge _ socket _ options ( s _ data ) ;	EMPTY	EMPTY
2	3202	1	1	1	-1	# endif	EMPTY	EMPTY
2	3204	1	1	0	-1	# ifdef win32	EMPTY	EMPTY
2	3211	2	-1	1	-1	win _ kludge _ socket = s _ data ;	EMPTY	EMPTY
2	3212	3	-1	1	-1	# endif	EMPTY	EMPTY
2	3214	1	0	0	-1	if ( debug ) {	EMPTY	EMPTY
2	3215	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	3216	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	3217	3	-1	0	-1	}	EMPTY	EMPTY
2	3222	1	1	1	-1	cpu _ start ( sdp _ rr _ request -> measure _ cpu ) ;	EMPTY	EMPTY
2	3227	1	1	1	-1	if ( sdp _ rr _ request -> test _ length > numconst ) {	EMPTY	EMPTY
2	3228	2	-1	0	-1	times _ up = numconst ;	EMPTY	EMPTY
2	3229	2	-1	0	-1	trans _ remaining = numconst ;	EMPTY	EMPTY
2	3230	2	-1	0	-1	start _ timer ( sdp _ rr _ request -> test _ length + pad _ time ) ;	EMPTY	EMPTY
2	3231	2	-1	0	-1	}	EMPTY	EMPTY
2	3232	2	-1	0	-1	else {	EMPTY	EMPTY
2	3233	2	-1	0	-1	times _ up = numconst ;	EMPTY	EMPTY
2	3234	2	-1	0	-1	trans _ remaining = sdp _ rr _ request -> test _ length * - numconst ;	EMPTY	EMPTY
2	3235	3	-1	0	-1	}	EMPTY	EMPTY
2	3237	1	0	0	-1	trans _ received = numconst ;	EMPTY	EMPTY
2	3239	1	0	0	-1	while ( ( ! times _ up ) || ( trans _ remaining > numconst ) ) {	EMPTY	EMPTY
2	3240	2	-1	0	-1	temp _ message _ ptr = recv _ ring -> buffer _ ptr ;	EMPTY	EMPTY
2	3241	2	-1	0	-1	request _ bytes _ remaining = sdp _ rr _ request -> request _ size ;	EMPTY	EMPTY
2	3242	2	-1	0	-1	while ( request _ bytes _ remaining > numconst ) {	EMPTY	EMPTY
2	3243	2	-1	0	-1	if ( ( request _ bytes _ recvd = recv ( s _ data	EMPTY	EMPTY
2	3244	2	-1	0	-1	temp _ message _ ptr	EMPTY	EMPTY
2	3245	2	-1	0	-1	request _ bytes _ remaining	EMPTY	EMPTY
2	3246	2	-1	0	-1	numconst ) ) == socket _ error ) {	EMPTY	EMPTY
2	3247	2	-1	0	-1	if ( socket _ eintr ( request _ bytes _ recvd ) )	EMPTY	EMPTY
2	3248	2	-1	0	-1	{	EMPTY	EMPTY
2	3249	2	-1	0	-1	timed _ out = numconst ;	EMPTY	EMPTY
2	3250	2	-1	0	-1	break ;	EMPTY	EMPTY
2	3251	3	-1	0	-1	}	EMPTY	EMPTY
2	3253	1	0	0	-1	netperf _ response . content . serv _ errno = errno ;	EMPTY	EMPTY
2	3254	2	-1	0	-1	send _ response ( ) ;	EMPTY	EMPTY
2	3255	2	-1	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	3256	2	-1	0	-1	}	EMPTY	EMPTY
2	3257	2	-1	0	-1	else if ( request _ bytes _ recvd == numconst ) {	EMPTY	EMPTY
2	3258	2	-1	0	-1	if ( debug ) {	EMPTY	EMPTY
2	3259	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	3260	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	3261	2	-1	0	-1	}	EMPTY	EMPTY
2	3262	2	-1	0	-1	sock _ closed = numconst ;	EMPTY	EMPTY
2	3263	2	-1	0	-1	break ;	EMPTY	EMPTY
2	3264	2	-1	0	-1	}	EMPTY	EMPTY
2	3265	2	-1	0	-1	else {	EMPTY	EMPTY
2	3266	2	-1	0	-1	request _ bytes _ remaining -= request _ bytes _ recvd ;	EMPTY	EMPTY
2	3267	2	-1	0	-1	temp _ message _ ptr += request _ bytes _ recvd ;	EMPTY	EMPTY
2	3268	2	-1	0	-1	}	EMPTY	EMPTY
2	3269	3	-1	0	-1	}	EMPTY	EMPTY
2	3271	1	0	0	-1	recv _ ring = recv _ ring -> next ;	EMPTY	EMPTY
2	3273	1	1	0	-1	if ( ( timed _ out ) || ( sock _ closed ) ) {	EMPTY	EMPTY
2	3276	2	-1	1	-1	if ( debug ) {	EMPTY	EMPTY
2	3277	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	3278	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	3279	2	-1	0	-1	}	EMPTY	EMPTY
2	3280	2	-1	0	-1	break ;	EMPTY	EMPTY
2	3281	3	-1	0	-1	}	EMPTY	EMPTY
2	3284	1	1	1	-1	if ( ( bytes _ sent = send ( s _ data	EMPTY	EMPTY
2	3285	2	-1	0	-1	send _ ring -> buffer _ ptr	EMPTY	EMPTY
2	3286	2	-1	0	-1	sdp _ rr _ request -> response _ size	EMPTY	EMPTY
2	3287	2	-1	0	-1	numconst ) ) == socket _ error ) {	EMPTY	EMPTY
2	3288	2	-1	0	-1	if ( socket _ eintr ( bytes _ sent ) ) {	EMPTY	EMPTY
2	3290	2	-1	1	-1	timed _ out = numconst ;	EMPTY	EMPTY
2	3291	2	-1	0	-1	fprintf ( where  strlit ) ;	EMPTY	EMPTY
2	3292	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	3293	2	-1	0	-1	break ;	EMPTY	EMPTY
2	3294	2	-1	0	-1	}	EMPTY	EMPTY
2	3295	2	-1	0	-1	netperf _ response . content . serv _ errno = numconst ;	EMPTY	EMPTY
2	3296	2	-1	0	-1	send _ response ( ) ;	EMPTY	EMPTY
2	3297	2	-1	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	3298	3	-1	0	-1	}	EMPTY	EMPTY
2	3300	1	0	0	-1	send _ ring = send _ ring -> next ;	EMPTY	EMPTY
2	3302	1	0	0	-1	trans _ received ++ ;	EMPTY	EMPTY
2	3303	2	-1	0	-1	if ( trans _ remaining ) {	EMPTY	EMPTY
2	3304	2	-1	0	-1	trans _ remaining -- ;	EMPTY	EMPTY
2	3305	2	-1	0	-1	}	EMPTY	EMPTY
2	3306	3	-1	0	-1	}	EMPTY	EMPTY
2	3312	1	1	1	-1	cpu _ stop ( sdp _ rr _ request -> measure _ cpu  & elapsed _ time ) ;	EMPTY	EMPTY
2	3314	1	0	0	-1	stop _ timer ( ) ;	EMPTY	EMPTY
2	3316	1	1	0	-1	if ( timed _ out ) {	EMPTY	EMPTY
2	3320	2	-1	1	-1	elapsed _ time -= pad _ time ;	EMPTY	EMPTY
2	3321	3	-1	0	-1	}	EMPTY	EMPTY
2	3325	1	1	1	-1	if ( debug ) {	EMPTY	EMPTY
2	3326	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	3327	2	-1	0	-1	strlit	EMPTY	EMPTY
2	3328	2	-1	0	-1	trans _ received ) ;	EMPTY	EMPTY
2	3329	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	3330	3	-1	0	-1	}	EMPTY	EMPTY
2	3332	1	0	0	-1	sdp _ rr _ results -> bytes _ received = ( trans _ received *	EMPTY	EMPTY
2	3333	2	-1	0	-1	( sdp _ rr _ request -> request _ size +	EMPTY	EMPTY
2	3334	2	-1	0	-1	sdp _ rr _ request -> response _ size ) ) ;	EMPTY	EMPTY
2	3335	2	-1	0	-1	sdp _ rr _ results -> trans _ received = trans _ received ;	EMPTY	EMPTY
2	3336	2	-1	0	-1	sdp _ rr _ results -> elapsed _ time = elapsed _ time ;	EMPTY	EMPTY
2	3337	2	-1	0	-1	sdp _ rr _ results -> cpu _ method = cpu _ method ;	EMPTY	EMPTY
2	3338	2	-1	0	-1	sdp _ rr _ results -> num _ cpus = lib _ num _ loc _ cpus ;	EMPTY	EMPTY
2	3339	2	-1	0	-1	if ( sdp _ rr _ request -> measure _ cpu ) {	EMPTY	EMPTY
2	3340	2	-1	0	-1	sdp _ rr _ results -> cpu _ util = calc _ cpu _ util ( elapsed _ time ) ;	EMPTY	EMPTY
2	3341	3	-1	0	-1	}	EMPTY	EMPTY
2	3343	1	0	0	-1	if ( debug ) {	EMPTY	EMPTY
2	3344	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	3345	2	-1	0	-1	strlit ) ;	EMPTY	EMPTY
2	3346	2	-1	0	-1	fflush ( where ) ;	EMPTY	EMPTY
2	3347	3	-1	0	-1	}	EMPTY	EMPTY
2	3350	1	1	1	-1	close ( s _ data ) ;	EMPTY	EMPTY
2	3351	3	-1	0	-1	close ( s _ listen ) ;	EMPTY	EMPTY
2	3353	1	0	0	-1	send _ response ( ) ;	EMPTY	EMPTY
2	3355	1	0	0	-1	}	EMPTY	EMPTY
2	3359	1	0	0	-1	void	EMPTY	EMPTY
2	3360	2	-1	0	-1	print _ sdp _ usage ( )	EMPTY	EMPTY
2	3361	3	-1	0	-1	{	EMPTY	EMPTY
2	3363	1	0	0	-1	printf ( strlit  sdp _ usage ) ;	EMPTY	EMPTY
2	3364	3	-1	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	3366	1	0	0	-1	}	EMPTY	EMPTY
2	3367	2	-1	0	-1	void	EMPTY	EMPTY
2	3368	2	-1	0	-1	scan _ sdp _ args ( argc  argv )	EMPTY	EMPTY
2	3369	2	-1	0	-1	int argc ;	EMPTY	EMPTY
2	3370	3	-1	0	-1	char * argv [ ] ;	EMPTY	EMPTY
2	3372	1	0	0	-1	{	EMPTY	EMPTY
2	3374	1	0	0	-1	# define sockets _ args strlit	EMPTY	EMPTY
2	3376	1	1	1	-1	extern char * optarg ;	EMPTY	EMPTY
2	3378	1	0	0	-1	int c ;	EMPTY	EMPTY
2	3380	1	1	0	-1	char	EMPTY	EMPTY
2	3381	2	-1	1	-1	arg1 [ bufsiz ]	EMPTY	EMPTY
2	3382	3	-1	0	-1	arg2 [ bufsiz ] ;	EMPTY	EMPTY
2	3384	1	0	0	-1	if ( no _ control ) {	EMPTY	EMPTY
2	3385	2	-1	0	-1	fprintf ( where	EMPTY	EMPTY
2	3386	2	-1	0	-1	strlit ) ;	EMPTY	EMPTY
2	3387	2	-1	0	-1	exit ( - numconst ) ;	EMPTY	EMPTY
2	3388	3	-1	0	-1	}	EMPTY	EMPTY
2	3390	1	0	0	-1	strncpy ( local _ data _ port  strlit  sizeof ( local _ data _ port ) ) ;	EMPTY	EMPTY
2	3391	3	-1	0	-1	strncpy ( remote _ data _ port  strlit  sizeof ( remote _ data _ port ) ) ;	EMPTY	EMPTY
2	3399	1	1	1	-1	while ( ( c = getopt ( argc  argv  sockets _ args ) ) != eof ) {	EMPTY	EMPTY
2	3400	2	-1	0	-1	switch ( c ) {	EMPTY	EMPTY
2	3401	2	-1	0	-1	case '?' :	EMPTY	EMPTY
2	3402	2	-1	0	-1	case '4' :	EMPTY	EMPTY
2	3403	2	-1	0	-1	remote _ data _ family = af _ inet ;	EMPTY	EMPTY
2	3404	2	-1	0	-1	local _ data _ family = af _ inet ;	EMPTY	EMPTY
2	3405	2	-1	0	-1	break ;	EMPTY	EMPTY
2	3406	2	-1	0	-1	case '6' :	EMPTY	EMPTY
2	3407	2	-1	0	-1	# if defined ( af _ inet6 )	EMPTY	EMPTY
2	3408	2	-1	0	-1	remote _ data _ family = af _ inet6 ;	EMPTY	EMPTY
2	3409	2	-1	0	-1	local _ data _ family = af _ inet6 ;	EMPTY	EMPTY
2	3410	2	-1	0	-1	# else	EMPTY	EMPTY
2	3411	2	-1	0	-1	fprintf ( stderr	EMPTY	EMPTY
2	3412	2	-1	0	-1	strlit ) ;	EMPTY	EMPTY
2	3413	2	-1	0	-1	fflush ( stderr ) ;	EMPTY	EMPTY
2	3414	2	-1	0	-1	exit ( - numconst ) ;	EMPTY	EMPTY
2	3415	2	-1	0	-1	# endif	EMPTY	EMPTY
2	3416	2	-1	0	-1	break ;	EMPTY	EMPTY
2	3417	2	-1	0	-1	case 'h' :	EMPTY	EMPTY
2	3418	2	-1	0	-1	print _ sdp _ usage ( ) ;	EMPTY	EMPTY
2	3419	2	-1	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	3420	2	-1	0	-1	case 'b' :	EMPTY	EMPTY
2	3421	2	-1	0	-1	# ifdef want _ first _ burst	EMPTY	EMPTY
2	3422	2	-1	0	-1	first _ burst _ size = atoi ( optarg ) ;	EMPTY	EMPTY
2	3423	2	-1	1	-1	# else	EMPTY	EMPTY
2	3424	2	-1	0	-1	printf ( strlit ) ;	EMPTY	EMPTY
2	3425	2	-1	1	-1	# endif	EMPTY	EMPTY
2	3426	2	-1	0	-1	break ;	EMPTY	EMPTY
2	3427	2	-1	0	-1	case 'd' :	EMPTY	EMPTY
2	3429	3	-1	1	-1	loc _ nodelay = numconst ;	EMPTY	EMPTY
2	3430	1	1	0	-1	rem _ nodelay = numconst ;	EMPTY	EMPTY
2	3431	2	-1	0	-1	break ;	EMPTY	EMPTY
2	3432	2	-1	0	-1	case 'h' :	EMPTY	EMPTY
2	3433	2	-1	0	-1	break _ args _ explicit ( optarg  arg1  arg2 ) ;	EMPTY	EMPTY
2	3434	2	-1	0	-1	if ( arg1 [ numconst ] ) {	EMPTY	EMPTY
2	3437	2	-1	1	-1	remote _ data _ address = malloc ( strlen ( arg1 ) + numconst ) ;	EMPTY	EMPTY
2	3438	2	-1	0	-1	strncpy ( remote _ data _ address  arg1  strlen ( arg1 ) ) ;	EMPTY	EMPTY
2	3439	2	-1	0	-1	}	EMPTY	EMPTY
2	3440	2	-1	0	-1	if ( arg2 [ numconst ] )	EMPTY	EMPTY
2	3441	2	-1	0	-1	remote _ data _ family = parse _ address _ family ( arg2 ) ;	EMPTY	EMPTY
2	3442	2	-1	0	-1	break ;	EMPTY	EMPTY
2	3443	2	-1	0	-1	case 'l' :	EMPTY	EMPTY
2	3444	2	-1	0	-1	break _ args _ explicit ( optarg  arg1  arg2 ) ;	EMPTY	EMPTY
2	3445	2	-1	0	-1	if ( arg1 [ numconst ] ) {	EMPTY	EMPTY
2	3448	2	-1	1	-1	local _ data _ address = malloc ( strlen ( arg1 ) + numconst ) ;	EMPTY	EMPTY
2	3449	2	-1	0	-1	strncpy ( local _ data _ address  arg1  strlen ( arg1 ) ) ;	EMPTY	EMPTY
2	3450	2	-1	0	-1	}	EMPTY	EMPTY
2	3451	2	-1	0	-1	if ( arg2 [ numconst ] )	EMPTY	EMPTY
2	3452	2	-1	0	-1	local _ data _ family = parse _ address _ family ( arg2 ) ;	EMPTY	EMPTY
2	3453	2	-1	0	-1	break ;	EMPTY	EMPTY
2	3454	2	-1	0	-1	case 'p' :	EMPTY	EMPTY
2	3458	2	-1	1	-1	break _ args ( optarg  arg1  arg2 ) ;	EMPTY	EMPTY
2	3459	2	-1	0	-1	if ( arg1 [ numconst ] )	EMPTY	EMPTY
2	3460	2	-1	0	-1	strncpy ( local _ data _ port  arg1  sizeof ( local _ data _ port ) ) ;	EMPTY	EMPTY
2	3461	2	-1	0	-1	if ( arg2 [ numconst ] )	EMPTY	EMPTY
2	3462	2	-1	0	-1	strncpy ( remote _ data _ port  arg2  sizeof ( remote _ data _ port ) ) ;	EMPTY	EMPTY
2	3463	2	-1	0	-1	break ;	EMPTY	EMPTY
2	3464	2	-1	0	-1	case 's' :	EMPTY	EMPTY
2	3466	2	-1	1	-1	break _ args ( optarg  arg1  arg2 ) ;	EMPTY	EMPTY
2	3467	3	-1	0	-1	if ( arg1 [ numconst ] )	EMPTY	EMPTY
2	3468	1	1	0	-1	lss _ size _ req = convert ( arg1 ) ;	EMPTY	EMPTY
2	3469	2	-1	0	-1	if ( arg2 [ numconst ] )	EMPTY	EMPTY
2	3470	2	-1	0	-1	lsr _ size _ req = convert ( arg2 ) ;	EMPTY	EMPTY
2	3471	2	-1	0	-1	break ;	EMPTY	EMPTY
2	3472	2	-1	0	-1	case 's' :	EMPTY	EMPTY
2	3474	2	-1	1	-1	break _ args ( optarg  arg1  arg2 ) ;	EMPTY	EMPTY
2	3475	2	-1	0	-1	if ( arg1 [ numconst ] )	EMPTY	EMPTY
2	3476	2	-1	0	-1	rss _ size _ req = convert ( arg1 ) ;	EMPTY	EMPTY
2	3477	2	-1	0	-1	if ( arg2 [ numconst ] )	EMPTY	EMPTY
2	3478	2	-1	0	-1	rsr _ size _ req = convert ( arg2 ) ;	EMPTY	EMPTY
2	3479	2	-1	0	-1	break ;	EMPTY	EMPTY
2	3480	2	-1	0	-1	case 'r' :	EMPTY	EMPTY
2	3482	2	-1	1	-1	break _ args ( optarg  arg1  arg2 ) ;	EMPTY	EMPTY
2	3483	2	-1	0	-1	if ( arg1 [ numconst ] )	EMPTY	EMPTY
2	3484	2	-1	0	-1	req _ size = convert ( arg1 ) ;	EMPTY	EMPTY
2	3485	2	-1	0	-1	if ( arg2 [ numconst ] )	EMPTY	EMPTY
2	3486	2	-1	0	-1	rsp _ size = convert ( arg2 ) ;	EMPTY	EMPTY
2	3487	2	-1	0	-1	break ;	EMPTY	EMPTY
2	3488	2	-1	0	-1	case 'm' :	EMPTY	EMPTY
2	3490	2	-1	1	-1	send _ size = convert ( optarg ) ;	EMPTY	EMPTY
2	3491	2	-1	0	-1	break ;	EMPTY	EMPTY
2	3492	2	-1	0	-1	case 'm' :	EMPTY	EMPTY
2	3494	2	-1	1	-1	recv _ size = convert ( optarg ) ;	EMPTY	EMPTY
2	3495	2	-1	0	-1	break ;	EMPTY	EMPTY
2	3496	2	-1	0	-1	case 't' :	EMPTY	EMPTY
2	3498	2	-1	1	-1	strcpy ( test _ name  optarg ) ;	EMPTY	EMPTY
2	3499	2	-1	0	-1	break ;	EMPTY	EMPTY
2	3500	2	-1	0	-1	case 'w' :	EMPTY	EMPTY
2	3507	2	-1	1	-1	send _ width = convert ( optarg ) ;	EMPTY	EMPTY
2	3508	3	-1	0	-1	break ;	EMPTY	EMPTY
2	3509	1	1	0	-1	case 'v' :	EMPTY	EMPTY
2	3514	2	-1	1	-1	# ifdef so _ snd _ copyavoid	EMPTY	EMPTY
2	3515	2	-1	0	-1	loc _ sndavoid = numconst ;	EMPTY	EMPTY
2	3516	2	-1	0	-1	# else	EMPTY	EMPTY
2	3517	2	-1	0	-1	loc _ sndavoid = numconst ;	EMPTY	EMPTY
2	3518	2	-1	0	-1	printf ( strlit ) ;	EMPTY	EMPTY
2	3519	2	-1	0	-1	# endif	EMPTY	EMPTY
2	3520	2	-1	0	-1	# ifdef so _ rcv _ copyavoid	EMPTY	EMPTY
2	3521	2	-1	0	-1	loc _ rcvavoid = numconst ;	EMPTY	EMPTY
2	3522	2	-1	0	-1	# else	EMPTY	EMPTY
2	3523	2	-1	0	-1	loc _ rcvavoid = numconst ;	EMPTY	EMPTY
2	3524	2	-1	0	-1	printf ( strlit ) ;	EMPTY	EMPTY
2	3525	2	-1	0	-1	# endif	EMPTY	EMPTY
2	3526	2	-1	0	-1	rem _ sndavoid = numconst ;	EMPTY	EMPTY
2	3527	2	-1	0	-1	rem _ rcvavoid = numconst ;	EMPTY	EMPTY
2	3528	2	-1	0	-1	break ;	EMPTY	EMPTY
2	3529	2	-1	0	-1	case 'n' :	EMPTY	EMPTY
2	3535	2	-1	1	-1	msg _ count = convert ( optarg ) ;	EMPTY	EMPTY
2	3536	2	-1	0	-1	if ( msg _ count > numconst )	EMPTY	EMPTY
2	3537	2	-1	0	-1	test _ time = numconst ;	EMPTY	EMPTY
2	3538	2	-1	0	-1	break ;	EMPTY	EMPTY
2	3539	2	-1	0	-1	case 'b' :	EMPTY	EMPTY
2	3540	2	-1	0	-1	non _ block = numconst ;	EMPTY	EMPTY
2	3541	2	-1	0	-1	break ;	EMPTY	EMPTY
2	3542	2	-1	0	-1	case 't' :	EMPTY	EMPTY
2	3543	2	-1	0	-1	num _ associations = atoi ( optarg ) ;	EMPTY	EMPTY
2	3544	2	-1	0	-1	if ( num _ associations <= numconst ) {	EMPTY	EMPTY
2	3545	2	-1	0	-1	printf ( strlit ) ;	EMPTY	EMPTY
2	3546	2	-1	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
2	3547	3	-1	0	-1	}	EMPTY	EMPTY
2	3548	1	0	0	-1	break ;	EMPTY	EMPTY
2	3549	2	-1	0	-1	} ;	EMPTY	EMPTY
2	3550	2	-1	0	-1	}	EMPTY	EMPTY
2	3551	3	-1	0	-1	}	EMPTY	EMPTY
2	3553	1	1	1	-1	# endif	EMPTY	EMPTY
13	49	1	0	0	0	int parse _ ipqos ( const char * cp )	EMPTY	EMPTY
13	50	3	-1	0	-1	const char * iptos2str ( int iptos ) ;	EMPTY	EMPTY
13	56	1	1	1	-1	# if have _ netinet _ in _ systm _ h	EMPTY	EMPTY
13	57	2	-1	0	-1	# include < netinet / in _ systm . h >	EMPTY	EMPTY
13	58	2	-1	0	-1	# endif	EMPTY	EMPTY
13	59	2	-1	0	-1	# if have _ netinet _ ip _ h	EMPTY	EMPTY
13	60	2	-1	0	-1	# include < netinet / ip . h >	EMPTY	EMPTY
13	61	3	-1	0	-1	# endif	EMPTY	EMPTY
13	63	1	1	0	-1	# ifndef iptos _ lowdelay	EMPTY	EMPTY
13	64	2	-1	0	-1	# define iptos _ lowdelay numconst	EMPTY	EMPTY
13	65	2	-1	0	-1	# define iptos _ throughput numconst	EMPTY	EMPTY
13	66	2	-1	0	-1	# define iptos _ reliability numconst	EMPTY	EMPTY
13	67	2	-1	0	-1	# define iptos _ lowcost numconst	EMPTY	EMPTY
13	68	2	-1	0	-1	# define iptos _ mincost iptos _ lowcost	EMPTY	EMPTY
13	69	3	-1	1	-1	# endif	EMPTY	EMPTY
13	74	1	1	1	-1	# ifndef iptos _ dscp _ af11	EMPTY	EMPTY
13	75	2	-1	0	-1	# define iptos _ dscp _ af11 numconst	EMPTY	EMPTY
13	76	2	-1	0	-1	# define iptos _ dscp _ af12 numconst	EMPTY	EMPTY
13	77	2	-1	0	-1	# define iptos _ dscp _ af13 numconst	EMPTY	EMPTY
13	78	2	-1	0	-1	# define iptos _ dscp _ af21 numconst	EMPTY	EMPTY
13	79	2	-1	0	-1	# define iptos _ dscp _ af22 numconst	EMPTY	EMPTY
13	80	2	-1	0	-1	# define iptos _ dscp _ af23 numconst	EMPTY	EMPTY
13	81	2	-1	0	-1	# define iptos _ dscp _ af31 numconst	EMPTY	EMPTY
13	82	2	-1	0	-1	# define iptos _ dscp _ af32 numconst	EMPTY	EMPTY
13	83	2	-1	0	-1	# define iptos _ dscp _ af33 numconst	EMPTY	EMPTY
13	84	2	-1	0	-1	# define iptos _ dscp _ af41 numconst	EMPTY	EMPTY
13	85	2	-1	0	-1	# define iptos _ dscp _ af42 numconst	EMPTY	EMPTY
13	86	2	-1	0	-1	# define iptos _ dscp _ af43 numconst	EMPTY	EMPTY
13	87	2	-1	0	-1	# define iptos _ dscp _ ef numconst	EMPTY	EMPTY
13	88	3	-1	1	-1	# endif	EMPTY	EMPTY
13	90	1	1	0	-1	# ifndef iptos _ dscp _ cs0	EMPTY	EMPTY
13	91	2	-1	0	-1	# define iptos _ dscp _ cs0 numconst	EMPTY	EMPTY
13	92	2	-1	0	-1	# define iptos _ dscp _ cs1 numconst	EMPTY	EMPTY
13	93	2	-1	0	-1	# define iptos _ dscp _ cs2 numconst	EMPTY	EMPTY
13	94	2	-1	0	-1	# define iptos _ dscp _ cs3 numconst	EMPTY	EMPTY
13	95	2	-1	0	-1	# define iptos _ dscp _ cs4 numconst	EMPTY	EMPTY
13	96	2	-1	0	-1	# define iptos _ dscp _ cs5 numconst	EMPTY	EMPTY
13	97	2	-1	0	-1	# define iptos _ dscp _ cs6 numconst	EMPTY	EMPTY
13	98	2	-1	0	-1	# define iptos _ dscp _ cs7 numconst	EMPTY	EMPTY
13	99	2	-1	1	-1	# endif	EMPTY	EMPTY
13	100	2	-1	0	-1	# ifndef iptos _ dscp _ ef	EMPTY	EMPTY
13	101	2	-1	0	-1	# define iptos _ dscp _ ef numconst	EMPTY	EMPTY
13	102	3	-1	1	-1	# endif	EMPTY	EMPTY
13	104	1	0	0	0	struct {	EMPTY	EMPTY
13	105	2	-1	0	-1	const char * name ;	EMPTY	EMPTY
13	106	2	-1	0	-1	int value ;	EMPTY	EMPTY
13	107	2	-1	0	-1	} ipqos [ ] = {	EMPTY	EMPTY
13	108	2	-1	0	-1	{ strlit  iptos _ dscp _ af11 }	EMPTY	EMPTY
13	109	2	-1	0	-1	{ strlit  iptos _ dscp _ af12 }	EMPTY	EMPTY
13	110	2	-1	0	-1	{ strlit  iptos _ dscp _ af13 }	EMPTY	EMPTY
13	111	2	-1	0	-1	{ strlit  iptos _ dscp _ af21 }	EMPTY	EMPTY
13	112	2	-1	0	-1	{ strlit  iptos _ dscp _ af22 }	EMPTY	EMPTY
13	113	2	-1	0	-1	{ strlit  iptos _ dscp _ af23 }	EMPTY	EMPTY
13	114	2	-1	0	-1	{ strlit  iptos _ dscp _ af31 }	EMPTY	EMPTY
13	115	2	-1	0	-1	{ strlit  iptos _ dscp _ af32 }	EMPTY	EMPTY
13	116	2	-1	0	-1	{ strlit  iptos _ dscp _ af33 }	EMPTY	EMPTY
13	117	2	-1	0	-1	{ strlit  iptos _ dscp _ af41 }	EMPTY	EMPTY
13	118	2	-1	0	-1	{ strlit  iptos _ dscp _ af42 }	EMPTY	EMPTY
13	119	2	-1	0	-1	{ strlit  iptos _ dscp _ af43 }	EMPTY	EMPTY
13	120	2	-1	0	-1	{ strlit  iptos _ dscp _ cs0 }	EMPTY	EMPTY
13	121	2	-1	0	-1	{ strlit  iptos _ dscp _ cs1 }	EMPTY	EMPTY
13	122	2	-1	0	-1	{ strlit  iptos _ dscp _ cs2 }	EMPTY	EMPTY
13	123	2	-1	0	-1	{ strlit  iptos _ dscp _ cs3 }	EMPTY	EMPTY
13	124	2	-1	0	-1	{ strlit  iptos _ dscp _ cs4 }	EMPTY	EMPTY
13	125	2	-1	0	-1	{ strlit  iptos _ dscp _ cs5 }	EMPTY	EMPTY
13	126	2	-1	0	-1	{ strlit  iptos _ dscp _ cs6 }	EMPTY	EMPTY
13	127	2	-1	0	-1	{ strlit  iptos _ dscp _ cs7 }	EMPTY	EMPTY
13	128	2	-1	0	-1	{ strlit  iptos _ dscp _ ef }	EMPTY	EMPTY
13	129	2	-1	0	-1	{ strlit  iptos _ lowdelay }	EMPTY	EMPTY
13	130	2	-1	0	-1	{ strlit  iptos _ throughput }	EMPTY	EMPTY
13	131	2	-1	0	-1	{ strlit  iptos _ reliability }	EMPTY	EMPTY
13	132	2	-1	0	-1	{ null  - numconst }	EMPTY	EMPTY
13	133	3	-1	0	-1	} ;	EMPTY	EMPTY
13	135	1	0	0	-1	int	EMPTY	EMPTY
13	136	2	-1	0	-1	parse _ ipqos ( const char * cp )	EMPTY	EMPTY
13	137	2	-1	0	-1	{	EMPTY	EMPTY
13	138	2	-1	0	-1	unsigned int i ;	EMPTY	EMPTY
13	139	2	-1	0	-1	char * ep = null ;	EMPTY	EMPTY
13	140	3	-1	0	-1	long val ;	EMPTY	EMPTY
13	142	1	1	0	1	if ( cp == null )	EMPTY	EMPTY
13	143	2	-1	0	-1	return - 1	EMPTY	EMPTY
13	144	2	-1	0	-1	for ( i = 0 ; ipqos [ i ] . name != null ; i ++ ) {	EMPTY	EMPTY
13	145	2	-1	0	-1	if ( strcasecmp ( cp , ipqos [ i ] . name ) == 0 )	EMPTY	strcasecmp
13	146	2	-1	0	-1	return ipqos [ i ] . value ;	EMPTY	EMPTY
13	147	2	-1	0	-1	}	EMPTY	EMPTY
13	149	2	-1	1	-1	val = strtol ( cp , & ep , 0 )	EMPTY	strtol
13	150	2	-1	0	-1	if ( * cp == '\0' || * ep != '\0' || val < 0 || val > 255 )	EMPTY	EMPTY
13	151	2	-1	0	-1	return - 1	EMPTY	EMPTY
13	152	2	-1	0	-1	return val	EMPTY	EMPTY
13	153	3	-1	0	-1	}	EMPTY	EMPTY
13	155	1	0	0	-1	const char *	EMPTY	EMPTY
13	156	2	-1	0	-1	iptos2str ( int iptos )	EMPTY	EMPTY
13	157	2	-1	0	-1	{	EMPTY	EMPTY
13	158	2	-1	0	-1	int i ;	EMPTY	EMPTY
13	159	2	-1	0	-1	static char iptos _ str [ sizeof strlit ] ;	EMPTY	EMPTY
13	160	2	-1	0	-1	if ( iptos < numconst || iptos > numconst ) iptos = numconst ;	EMPTY	EMPTY
13	161	2	-1	0	-1	for ( i = numconst ; ipqos [ i ] . name != null ; i ++ ) {	EMPTY	EMPTY
13	162	2	-1	0	-1	if ( ipqos [ i ] . value == iptos )	EMPTY	EMPTY
13	163	2	-1	0	-1	return ipqos [ i ] . name ;	EMPTY	EMPTY
13	164	2	-1	0	-1	}	EMPTY	EMPTY
13	165	2	-1	0	-1	snprintf ( iptos _ str  sizeof iptos _ str  strlit  iptos ) ;	EMPTY	EMPTY
13	166	2	-1	0	-1	return iptos _ str ;	EMPTY	EMPTY
13	167	3	-1	0	-1	}	EMPTY	EMPTY
28	27	1	0	0	-1	const struct tok oui _ values [ ] = {	EMPTY	EMPTY
28	28	2	-1	0	-1	{ oui _ encap _ ether  strlit }	EMPTY	EMPTY
28	29	2	-1	0	-1	{ oui _ cisco  strlit }	EMPTY	EMPTY
28	30	2	-1	0	-1	{ oui _ nortel  strlit }	EMPTY	EMPTY
28	31	2	-1	0	-1	{ oui _ cisco _ 90  strlit }	EMPTY	EMPTY
28	32	2	-1	0	-1	{ oui _ rfc2684  strlit }	EMPTY	EMPTY
28	33	2	-1	0	-1	{ oui _ atm _ forum  strlit }	EMPTY	EMPTY
28	34	2	-1	0	-1	{ oui _ cable _ bpdu  strlit }	EMPTY	EMPTY
28	35	2	-1	0	-1	{ oui _ appletalk  strlit }	EMPTY	EMPTY
28	36	2	-1	0	-1	{ oui _ juniper  strlit }	EMPTY	EMPTY
28	37	2	-1	0	-1	{ oui _ hp  strlit }	EMPTY	EMPTY
28	38	2	-1	0	-1	{ oui _ ieee _ 8021 _ private  strlit }	EMPTY	EMPTY
28	39	2	-1	0	-1	{ oui _ ieee _ 8023 _ private  strlit }	EMPTY	EMPTY
28	40	2	-1	0	-1	{ oui _ tia  strlit }	EMPTY	EMPTY
28	41	2	-1	0	-1	{ oui _ dcbx  strlit }	EMPTY	EMPTY
28	42	2	-1	0	-1	{ oui _ nicira  strlit }	EMPTY	EMPTY
28	43	2	-1	0	-1	{ oui _ bsn  strlit }	EMPTY	EMPTY
28	44	2	-1	0	-1	{ oui _ vello  strlit }	EMPTY	EMPTY
28	45	2	-1	0	-1	{ oui _ hp2  strlit }	EMPTY	EMPTY
28	46	2	-1	0	-1	{ oui _ hplabs  strlit }	EMPTY	EMPTY
28	47	2	-1	0	-1	{ oui _ infoblox  strlit }	EMPTY	EMPTY
28	48	2	-1	0	-1	{ oui _ onlab  strlit }	EMPTY	EMPTY
28	49	2	-1	0	-1	{ oui _ freescale  strlit }	EMPTY	EMPTY
28	50	2	-1	0	-1	{ oui _ netronome  strlit }	EMPTY	EMPTY
28	51	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
28	52	3	-1	0	-1	} ;	EMPTY	EMPTY
28	64	1	0	0	-1	const struct tok smi _ values [ ] = {	smi _ values	EMPTY
28	65	2	-1	0	-1	{ smi _ ietf  strlit }	EMPTY	EMPTY
28	66	2	-1	0	-1	{ smi _ acc  strlit }	EMPTY	EMPTY
28	67	2	-1	0	-1	{ smi _ cisco  strlit }	EMPTY	EMPTY
28	68	2	-1	0	-1	{ smi _ hewlett _ packard  strlit }	EMPTY	EMPTY
28	69	2	-1	0	-1	{ smi _ sun _ microsystems  strlit }	EMPTY	EMPTY
28	70	2	-1	0	-1	{ smi _ merit  strlit }	EMPTY	EMPTY
28	71	2	-1	0	-1	{ smi _ shiva  strlit }	EMPTY	EMPTY
28	72	2	-1	0	-1	{ smi _ ericsson  strlit }	EMPTY	EMPTY
28	73	2	-1	0	-1	{ smi _ cisco _ vpn5000  strlit }	EMPTY	EMPTY
28	74	2	-1	0	-1	{ smi _ livingston  strlit }	EMPTY	EMPTY
28	75	2	-1	0	-1	{ smi _ microsoft  strlit }	EMPTY	EMPTY
28	76	2	-1	0	-1	{ smi _ 3com  strlit }	EMPTY	EMPTY
28	77	2	-1	0	-1	{ smi _ ascend  strlit }	EMPTY	EMPTY
28	78	2	-1	0	-1	{ smi _ bay  strlit }	EMPTY	EMPTY
28	79	2	-1	0	-1	{ smi _ foundry  strlit }	EMPTY	EMPTY
28	80	2	-1	0	-1	{ smi _ versanet  strlit }	EMPTY	EMPTY
28	81	2	-1	0	-1	{ smi _ redback  strlit }	EMPTY	EMPTY
28	82	2	-1	0	-1	{ smi _ juniper  strlit }	EMPTY	EMPTY
28	83	2	-1	0	-1	{ smi _ aptis  strlit }	EMPTY	EMPTY
28	84	2	-1	0	-1	{ smi _ cisco _ vpn3000  strlit }	EMPTY	EMPTY
28	85	2	-1	0	-1	{ smi _ cosine  strlit }	EMPTY	EMPTY
28	86	2	-1	0	-1	{ smi _ netscreen  strlit }	EMPTY	EMPTY
28	87	2	-1	0	-1	{ smi _ shasta  strlit }	EMPTY	EMPTY
28	88	2	-1	0	-1	{ smi _ nomadix  strlit }	EMPTY	EMPTY
28	89	2	-1	0	-1	{ smi _ siemens  strlit }	EMPTY	EMPTY
28	90	2	-1	0	-1	{ smi _ cablelabs  strlit }	EMPTY	EMPTY
28	91	2	-1	0	-1	{ smi _ unisphere  strlit }	EMPTY	EMPTY
28	92	2	-1	0	-1	{ smi _ cisco _ bbsm  strlit }	EMPTY	EMPTY
28	93	3	-1	0	-1	{ smi _ the3gpp2  strlit }	EMPTY	EMPTY
28	94	1	0	0	-1	{ smi _ ip _ unplugged  strlit }	EMPTY	EMPTY
28	95	2	-1	0	-1	{ smi _ issanni  strlit }	EMPTY	EMPTY
28	96	2	-1	0	-1	{ smi _ quintum  strlit }	EMPTY	EMPTY
28	97	2	-1	0	-1	{ smi _ interlink  strlit }	EMPTY	EMPTY
28	98	2	-1	0	-1	{ smi _ colubris  strlit }	EMPTY	EMPTY
28	99	2	-1	0	-1	{ smi _ columbia _ university  strlit }	EMPTY	EMPTY
28	100	2	-1	0	-1	{ smi _ the3gpp  strlit }	EMPTY	EMPTY
28	101	2	-1	0	-1	{ smi _ gemtek _ systems  strlit }	EMPTY	EMPTY
28	102	2	-1	0	-1	{ smi _ wifi _ alliance  strlit }	EMPTY	EMPTY
28	103	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
28	104	3	-1	0	-1	} ;	EMPTY	EMPTY
39	70	1	0	0	-1	static const char tstr [ ] = strlit ;	EMPTY	EMPTY
39	72	1	1	1	-1	# define l2tp _ msgtype _ sccrq numconst	EMPTY	EMPTY
39	73	2	-1	1	-1	# define l2tp _ msgtype _ sccrp numconst	EMPTY	EMPTY
39	74	2	-1	1	-1	# define l2tp _ msgtype _ scccn numconst	EMPTY	EMPTY
39	75	2	-1	1	-1	# define l2tp _ msgtype _ stopccn numconst	EMPTY	EMPTY
39	76	2	-1	1	-1	# define l2tp _ msgtype _ hello numconst	EMPTY	EMPTY
39	77	2	-1	1	-1	# define l2tp _ msgtype _ ocrq numconst	EMPTY	EMPTY
39	78	2	-1	1	-1	# define l2tp _ msgtype _ ocrp numconst	EMPTY	EMPTY
39	79	2	-1	1	-1	# define l2tp _ msgtype _ occn numconst	EMPTY	EMPTY
39	80	2	-1	1	-1	# define l2tp _ msgtype _ icrq numconst	EMPTY	EMPTY
39	81	2	-1	1	-1	# define l2tp _ msgtype _ icrp numconst	EMPTY	EMPTY
39	82	2	-1	1	-1	# define l2tp _ msgtype _ iccn numconst	EMPTY	EMPTY
39	83	2	-1	1	-1	# define l2tp _ msgtype _ cdn numconst	EMPTY	EMPTY
39	84	2	-1	1	-1	# define l2tp _ msgtype _ wen numconst	EMPTY	EMPTY
39	85	3	-1	1	-1	# define l2tp _ msgtype _ sli numconst	EMPTY	EMPTY
39	87	1	0	0	-1	static const struct tok l2tp _ msgtype2str [ ] = {	EMPTY	EMPTY
39	88	2	-1	0	-1	{ l2tp _ msgtype _ sccrq  strlit }	EMPTY	EMPTY
39	89	2	-1	0	-1	{ l2tp _ msgtype _ sccrp  strlit }	EMPTY	EMPTY
39	90	2	-1	0	-1	{ l2tp _ msgtype _ scccn  strlit }	EMPTY	EMPTY
39	91	2	-1	0	-1	{ l2tp _ msgtype _ stopccn  strlit }	EMPTY	EMPTY
39	92	2	-1	0	-1	{ l2tp _ msgtype _ hello  strlit }	EMPTY	EMPTY
39	93	2	-1	0	-1	{ l2tp _ msgtype _ ocrq  strlit }	EMPTY	EMPTY
39	94	2	-1	0	-1	{ l2tp _ msgtype _ ocrp  strlit }	EMPTY	EMPTY
39	95	2	-1	0	-1	{ l2tp _ msgtype _ occn  strlit }	EMPTY	EMPTY
39	96	2	-1	0	-1	{ l2tp _ msgtype _ icrq  strlit }	EMPTY	EMPTY
39	97	2	-1	0	-1	{ l2tp _ msgtype _ icrp  strlit }	EMPTY	EMPTY
39	98	2	-1	0	-1	{ l2tp _ msgtype _ iccn  strlit }	EMPTY	EMPTY
39	99	2	-1	0	-1	{ l2tp _ msgtype _ cdn  strlit }	EMPTY	EMPTY
39	100	2	-1	0	-1	{ l2tp _ msgtype _ wen  strlit }	EMPTY	EMPTY
39	101	2	-1	0	-1	{ l2tp _ msgtype _ sli  strlit }	EMPTY	EMPTY
39	102	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
39	103	3	-1	0	-1	} ;	EMPTY	EMPTY
39	105	1	1	1	-1	# define l2tp _ avp _ msgtype numconst	EMPTY	EMPTY
39	106	2	-1	1	-1	# define l2tp _ avp _ result _ code numconst	EMPTY	EMPTY
39	107	2	-1	1	-1	# define l2tp _ avp _ proto _ ver numconst	EMPTY	EMPTY
39	108	2	-1	1	-1	# define l2tp _ avp _ framing _ cap numconst	EMPTY	EMPTY
39	109	2	-1	1	-1	# define l2tp _ avp _ bearer _ cap numconst	EMPTY	EMPTY
39	110	2	-1	1	-1	# define l2tp _ avp _ tie _ breaker numconst	EMPTY	EMPTY
39	111	2	-1	1	-1	# define l2tp _ avp _ firm _ ver numconst	EMPTY	EMPTY
39	112	2	-1	1	-1	# define l2tp _ avp _ host _ name numconst	EMPTY	EMPTY
39	113	2	-1	1	-1	# define l2tp _ avp _ vendor _ name numconst	EMPTY	EMPTY
39	114	2	-1	1	-1	# define l2tp _ avp _ assnd _ tun _ id numconst	EMPTY	EMPTY
39	115	2	-1	1	-1	# define l2tp _ avp _ recv _ win _ size numconst	EMPTY	EMPTY
39	116	2	-1	1	-1	# define l2tp _ avp _ challenge numconst	EMPTY	EMPTY
39	117	2	-1	1	-1	# define l2tp _ avp _ q931 _ cc numconst	EMPTY	EMPTY
39	118	2	-1	1	-1	# define l2tp _ avp _ challenge _ resp numconst	EMPTY	EMPTY
39	119	2	-1	1	-1	# define l2tp _ avp _ assnd _ sess _ id numconst	EMPTY	EMPTY
39	120	2	-1	1	-1	# define l2tp _ avp _ call _ ser _ num numconst	EMPTY	EMPTY
39	121	2	-1	1	-1	# define l2tp _ avp _ minimum _ bps numconst	EMPTY	EMPTY
39	122	2	-1	1	-1	# define l2tp _ avp _ maximum _ bps numconst	EMPTY	EMPTY
39	123	2	-1	1	-1	# define l2tp _ avp _ bearer _ type numconst	EMPTY	EMPTY
39	124	2	-1	1	-1	# define l2tp _ avp _ framing _ type numconst	EMPTY	EMPTY
39	125	2	-1	1	-1	# define l2tp _ avp _ packet _ proc _ delay numconst	EMPTY	EMPTY
39	126	2	-1	1	-1	# define l2tp _ avp _ called _ number numconst	EMPTY	EMPTY
39	127	2	-1	1	-1	# define l2tp _ avp _ calling _ number numconst	EMPTY	EMPTY
39	128	2	-1	1	-1	# define l2tp _ avp _ sub _ address numconst	EMPTY	EMPTY
39	129	2	-1	1	-1	# define l2tp _ avp _ tx _ conn _ speed numconst	EMPTY	EMPTY
39	130	2	-1	1	-1	# define l2tp _ avp _ phy _ channel _ id numconst	EMPTY	EMPTY
39	131	2	-1	1	-1	# define l2tp _ avp _ ini _ recv _ lcp numconst	EMPTY	EMPTY
39	132	2	-1	1	-1	# define l2tp _ avp _ last _ sent _ lcp numconst	EMPTY	EMPTY
39	133	2	-1	1	-1	# define l2tp _ avp _ last _ recv _ lcp numconst	EMPTY	EMPTY
39	134	3	-1	1	-1	# define l2tp _ avp _ proxy _ auth _ type numconst	EMPTY	EMPTY
39	135	1	1	1	-1	# define l2tp _ avp _ proxy _ auth _ name numconst	EMPTY	EMPTY
39	136	2	-1	1	-1	# define l2tp _ avp _ proxy _ auth _ chal numconst	EMPTY	EMPTY
39	137	2	-1	1	-1	# define l2tp _ avp _ proxy _ auth _ id numconst	EMPTY	EMPTY
39	138	2	-1	1	-1	# define l2tp _ avp _ proxy _ auth _ resp numconst	EMPTY	EMPTY
39	139	2	-1	1	-1	# define l2tp _ avp _ call _ errors numconst	EMPTY	EMPTY
39	140	2	-1	1	-1	# define l2tp _ avp _ accm numconst	EMPTY	EMPTY
39	141	2	-1	1	-1	# define l2tp _ avp _ random _ vector numconst	EMPTY	EMPTY
39	142	2	-1	1	-1	# define l2tp _ avp _ private _ grp _ id numconst	EMPTY	EMPTY
39	143	2	-1	1	-1	# define l2tp _ avp _ rx _ conn _ speed numconst	EMPTY	EMPTY
39	144	2	-1	1	-1	# define l2tp _ avp _ seq _ required numconst	EMPTY	EMPTY
39	145	3	-1	1	-1	# define l2tp _ avp _ ppp _ discon _ cc numconst	EMPTY	EMPTY
39	147	1	0	0	-1	static const struct tok l2tp _ avp2str [ ] = {	EMPTY	EMPTY
39	148	2	-1	0	-1	{ l2tp _ avp _ msgtype  strlit }	EMPTY	EMPTY
39	149	2	-1	0	-1	{ l2tp _ avp _ result _ code  strlit }	EMPTY	EMPTY
39	150	2	-1	0	-1	{ l2tp _ avp _ proto _ ver  strlit }	EMPTY	EMPTY
39	151	2	-1	0	-1	{ l2tp _ avp _ framing _ cap  strlit }	EMPTY	EMPTY
39	152	2	-1	0	-1	{ l2tp _ avp _ bearer _ cap  strlit }	EMPTY	EMPTY
39	153	2	-1	0	-1	{ l2tp _ avp _ tie _ breaker  strlit }	EMPTY	EMPTY
39	154	2	-1	0	-1	{ l2tp _ avp _ firm _ ver  strlit }	EMPTY	EMPTY
39	155	2	-1	0	-1	{ l2tp _ avp _ host _ name  strlit }	EMPTY	EMPTY
39	156	2	-1	0	-1	{ l2tp _ avp _ vendor _ name  strlit }	EMPTY	EMPTY
39	157	2	-1	0	-1	{ l2tp _ avp _ assnd _ tun _ id  strlit }	EMPTY	EMPTY
39	158	2	-1	0	-1	{ l2tp _ avp _ recv _ win _ size  strlit }	EMPTY	EMPTY
39	159	2	-1	0	-1	{ l2tp _ avp _ challenge  strlit }	EMPTY	EMPTY
39	160	2	-1	0	-1	{ l2tp _ avp _ q931 _ cc  strlit  }	EMPTY	EMPTY
39	161	2	-1	0	-1	{ l2tp _ avp _ challenge _ resp  strlit }	EMPTY	EMPTY
39	162	2	-1	0	-1	{ l2tp _ avp _ assnd _ sess _ id  strlit }	EMPTY	EMPTY
39	163	2	-1	0	-1	{ l2tp _ avp _ call _ ser _ num  strlit }	EMPTY	EMPTY
39	164	2	-1	0	-1	{ l2tp _ avp _ minimum _ bps  strlit }	EMPTY	EMPTY
39	165	2	-1	0	-1	{ l2tp _ avp _ maximum _ bps  strlit }	EMPTY	EMPTY
39	166	2	-1	0	-1	{ l2tp _ avp _ bearer _ type  strlit }	EMPTY	EMPTY
39	167	2	-1	0	-1	{ l2tp _ avp _ framing _ type  strlit }	EMPTY	EMPTY
39	168	2	-1	0	-1	{ l2tp _ avp _ packet _ proc _ delay  strlit }	EMPTY	EMPTY
39	169	2	-1	0	-1	{ l2tp _ avp _ called _ number  strlit }	EMPTY	EMPTY
39	170	2	-1	0	-1	{ l2tp _ avp _ calling _ number  strlit }	EMPTY	EMPTY
39	171	2	-1	0	-1	{ l2tp _ avp _ sub _ address  strlit }	EMPTY	EMPTY
39	172	2	-1	0	-1	{ l2tp _ avp _ tx _ conn _ speed  strlit }	EMPTY	EMPTY
39	173	2	-1	0	-1	{ l2tp _ avp _ phy _ channel _ id  strlit }	EMPTY	EMPTY
39	174	2	-1	0	-1	{ l2tp _ avp _ ini _ recv _ lcp  strlit }	EMPTY	EMPTY
39	175	2	-1	0	-1	{ l2tp _ avp _ last _ sent _ lcp  strlit }	EMPTY	EMPTY
39	176	3	-1	0	-1	{ l2tp _ avp _ last _ recv _ lcp  strlit }	EMPTY	EMPTY
39	177	1	0	0	-1	{ l2tp _ avp _ proxy _ auth _ type  strlit }	EMPTY	EMPTY
39	178	2	-1	0	-1	{ l2tp _ avp _ proxy _ auth _ name  strlit }	EMPTY	EMPTY
39	179	2	-1	0	-1	{ l2tp _ avp _ proxy _ auth _ chal  strlit }	EMPTY	EMPTY
39	180	2	-1	0	-1	{ l2tp _ avp _ proxy _ auth _ id  strlit }	EMPTY	EMPTY
39	181	2	-1	0	-1	{ l2tp _ avp _ proxy _ auth _ resp  strlit }	EMPTY	EMPTY
39	182	2	-1	0	-1	{ l2tp _ avp _ call _ errors  strlit }	EMPTY	EMPTY
39	183	2	-1	0	-1	{ l2tp _ avp _ accm  strlit }	EMPTY	EMPTY
39	184	2	-1	0	-1	{ l2tp _ avp _ random _ vector  strlit }	EMPTY	EMPTY
39	185	2	-1	0	-1	{ l2tp _ avp _ private _ grp _ id  strlit }	EMPTY	EMPTY
39	186	2	-1	0	-1	{ l2tp _ avp _ rx _ conn _ speed  strlit }	EMPTY	EMPTY
39	187	2	-1	0	-1	{ l2tp _ avp _ seq _ required  strlit }	EMPTY	EMPTY
39	188	2	-1	0	-1	{ l2tp _ avp _ ppp _ discon _ cc  strlit }	EMPTY	EMPTY
39	189	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
39	190	3	-1	0	-1	} ;	EMPTY	EMPTY
39	192	1	0	0	-1	static const struct tok l2tp _ authentype2str [ ] = {	EMPTY	EMPTY
39	193	2	-1	0	-1	{ l2tp _ authen _ type _ reserved  strlit }	EMPTY	EMPTY
39	194	2	-1	0	-1	{ l2tp _ authen _ type _ textual  strlit }	EMPTY	EMPTY
39	195	2	-1	0	-1	{ l2tp _ authen _ type _ chap  strlit }	EMPTY	EMPTY
39	196	2	-1	0	-1	{ l2tp _ authen _ type _ pap  strlit }	EMPTY	EMPTY
39	197	2	-1	0	-1	{ l2tp _ authen _ type _ no _ auth  strlit }	EMPTY	EMPTY
39	198	2	-1	0	-1	{ l2tp _ authen _ type _ mschapv1  strlit }	EMPTY	EMPTY
39	199	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
39	200	3	-1	0	-1	} ;	EMPTY	EMPTY
39	202	1	0	0	-1	# define l2tp _ ppp _ discon _ cc _ direction _ global numconst	EMPTY	EMPTY
39	203	2	-1	0	-1	# define l2tp _ ppp _ discon _ cc _ direction _ at _ peer numconst	EMPTY	EMPTY
39	204	3	-1	0	-1	# define l2tp _ ppp _ discon _ cc _ direction _ at _ local numconst	EMPTY	EMPTY
39	206	1	0	0	-1	static const struct tok l2tp _ cc _ direction2str [ ] = {	EMPTY	EMPTY
39	207	2	-1	0	-1	{ l2tp _ ppp _ discon _ cc _ direction _ global  strlit }	EMPTY	EMPTY
39	208	2	-1	0	-1	{ l2tp _ ppp _ discon _ cc _ direction _ at _ peer  strlit }	EMPTY	EMPTY
39	209	2	-1	0	-1	{ l2tp _ ppp _ discon _ cc _ direction _ at _ local  strlit }	EMPTY	EMPTY
39	210	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
39	211	3	-1	0	-1	} ;	EMPTY	EMPTY
39	213	1	0	0	-1	# if numconst	EMPTY	EMPTY
39	214	2	-1	0	-1	static char * l2tp _ result _ code _ stopccn [ ] = {	EMPTY	EMPTY
39	215	2	-1	0	-1	strlit	EMPTY	EMPTY
39	216	2	-1	0	-1	strlit	EMPTY	EMPTY
39	217	2	-1	0	-1	strlit	EMPTY	EMPTY
39	218	2	-1	0	-1	strlit	EMPTY	EMPTY
39	219	2	-1	0	-1	strlit	EMPTY	EMPTY
39	220	2	-1	0	-1	strlit	EMPTY	EMPTY
39	221	2	-1	0	-1	strlit	EMPTY	EMPTY
39	222	2	-1	0	-1	strlit	EMPTY	EMPTY
39	223	2	-1	0	-1	# define l2tp _ max _ result _ code _ stopcc _ index numconst	EMPTY	EMPTY
39	224	2	-1	0	-1	} ;	EMPTY	EMPTY
39	225	3	-1	0	-1	# endif	EMPTY	EMPTY
39	227	1	0	0	-1	# if numconst	EMPTY	EMPTY
39	228	2	-1	0	-1	static char * l2tp _ result _ code _ cdn [ ] = {	EMPTY	EMPTY
39	229	2	-1	0	-1	strlit	EMPTY	EMPTY
39	230	2	-1	0	-1	strlit	EMPTY	EMPTY
39	231	2	-1	0	-1	strlit	EMPTY	EMPTY
39	232	2	-1	0	-1	strlit	EMPTY	EMPTY
39	233	2	-1	0	-1	strlit strlit	EMPTY	EMPTY
39	234	2	-1	0	-1	strlit	EMPTY	EMPTY
39	235	2	-1	0	-1	strlit strlit	EMPTY	EMPTY
39	236	2	-1	0	-1	strlit	EMPTY	EMPTY
39	237	2	-1	0	-1	strlit	EMPTY	EMPTY
39	238	2	-1	0	-1	strlit	EMPTY	EMPTY
39	239	2	-1	0	-1	strlit	EMPTY	EMPTY
39	240	2	-1	0	-1	strlit	EMPTY	EMPTY
39	241	2	-1	0	-1	strlit	EMPTY	EMPTY
39	242	2	-1	0	-1	strlit	EMPTY	EMPTY
39	243	2	-1	0	-1	# define l2tp _ max _ result _ code _ cdn _ index numconst	EMPTY	EMPTY
39	244	2	-1	0	-1	} ;	EMPTY	EMPTY
39	245	3	-1	0	-1	# endif	EMPTY	EMPTY
39	247	1	0	0	-1	# if numconst	EMPTY	EMPTY
39	248	2	-1	0	-1	static char * l2tp _ error _ code _ general [ ] = {	EMPTY	EMPTY
39	249	2	-1	0	-1	strlit	EMPTY	EMPTY
39	250	2	-1	0	-1	strlit	EMPTY	EMPTY
39	251	2	-1	0	-1	strlit	EMPTY	EMPTY
39	252	2	-1	0	-1	strlit strlit	EMPTY	EMPTY
39	253	2	-1	0	-1	strlit	EMPTY	EMPTY
39	254	2	-1	0	-1	strlit	EMPTY	EMPTY
39	255	2	-1	0	-1	strlit	EMPTY	EMPTY
39	256	2	-1	0	-1	strlit	EMPTY	EMPTY
39	257	2	-1	0	-1	strlit	EMPTY	EMPTY
39	258	2	-1	0	-1	# define l2tp _ max _ error _ code _ general _ index numconst	EMPTY	EMPTY
39	259	2	-1	0	-1	} ;	EMPTY	EMPTY
39	260	3	-1	0	-1	# endif	EMPTY	EMPTY
39	265	1	0	0	-1	static void	EMPTY	EMPTY
39	266	2	-1	0	-1	print _ string ( netdissect _ options * ndo  const u _ char * dat  u _ int length )	print _ string	EMPTY
39	267	2	-1	0	-1	{	EMPTY	EMPTY
39	268	2	-1	0	-1	u _ int i ;	EMPTY	EMPTY
39	269	2	-1	0	-1	for ( i = 0 ; i < length ; i ++ ) {	EMPTY	EMPTY
39	270	2	-1	0	-1	nd _ print ( ( ndo ,  " %c "  , * dat ++ ) ) ;	EMPTY	EMPTY
39	271	2	-1	0	-1	}	EMPTY	EMPTY
39	272	3	-1	0	-1	}	EMPTY	EMPTY
39	274	1	0	0	-1	static void	EMPTY	EMPTY
39	275	2	-1	0	-1	print _ octets ( netdissect _ options * ndo  const u _ char * dat  u _ int length )	EMPTY	EMPTY
39	276	2	-1	0	-1	{	EMPTY	EMPTY
39	277	2	-1	0	-1	u _ int i ;	EMPTY	EMPTY
39	278	2	-1	0	-1	for ( i = 0 ; i < length ; i ++ ) {	EMPTY	EMPTY
39	279	2	-1	0	-1	nd _ print ( ( ndo ,  " %02x "  , * dat ++ ) ) ;	EMPTY	EMPTY
39	280	2	-1	0	-1	}	EMPTY	EMPTY
39	281	3	-1	0	-1	}	EMPTY	EMPTY
39	283	1	0	0	-1	static void	EMPTY	EMPTY
39	284	2	-1	0	-1	print _ 16bits _ val ( netdissect _ options * ndo  const uint16 _ t * dat )	EMPTY	EMPTY
39	285	2	-1	0	-1	{	EMPTY	EMPTY
39	286	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 16bits ( dat ) ) ) ;	extract _ 16bits	EMPTY
39	287	3	-1	0	-1	}	EMPTY	EMPTY
39	289	1	0	0	-1	static void	EMPTY	EMPTY
39	290	2	-1	0	-1	print _ 32bits _ val ( netdissect _ options * ndo  const uint32 _ t * dat )	EMPTY	EMPTY
39	291	2	-1	0	-1	{	EMPTY	EMPTY
39	292	2	-1	0	-1	nd _ print ( ( ndo  strlit  ( u _ long ) extract _ 32bits ( dat ) ) ) ;	EMPTY	EMPTY
39	293	3	-1	0	-1	}	EMPTY	EMPTY
39	298	1	0	0	-1	static void	EMPTY	EMPTY
39	299	2	-1	0	-1	l2tp _ msgtype _ print ( netdissect _ options * ndo  const u _ char * dat )	l2tp _ msgtype _ print	EMPTY
39	300	2	-1	0	-1	{	EMPTY	EMPTY
39	301	3	-1	0	-1	uint16 _ t * ptr = ( uint16 _ t * ) dat ;	EMPTY	EMPTY
39	303	1	0	0	0	nd _ print ( ( ndo  strlit  tok2str ( l2tp _ msgtype2str  strlit	tok2str	EMPTY
39	304	2	-1	0	-1	extract _ 16bits ( ptr ) ) ) ) ;	extract _ 16bits	EMPTY
39	305	3	-1	0	-1	}	EMPTY	EMPTY
39	307	1	0	0	-1	static void	EMPTY	EMPTY
39	308	2	-1	0	-1	l2tp _ result _ code _ print ( netdissect _ options * ndo  const u _ char * dat  u _ int length )	EMPTY	EMPTY
39	309	2	-1	0	-1	{	EMPTY	EMPTY
39	310	3	-1	0	-1	uint16 _ t * ptr = ( uint16 _ t * ) dat ;	EMPTY	EMPTY
39	312	1	1	0	-1	ptr ++	EMPTY	EMPTY
39	313	2	-1	1	-1	if ( length > numconst ) {	EMPTY	EMPTY
39	314	2	-1	0	-1	ptr ++	EMPTY	EMPTY
39	315	2	-1	0	-1	}	EMPTY	EMPTY
39	316	2	-1	1	-1	if ( length > numconst ) {	EMPTY	EMPTY
39	317	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	318	2	-1	0	-1	print _ string ( ndo , ( u _ char * ) ptr , length - 4 )	print _ string	EMPTY
39	319	2	-1	0	-1	}	EMPTY	EMPTY
39	320	3	-1	0	-1	}	EMPTY	EMPTY
39	322	1	0	0	-1	static void	EMPTY	EMPTY
39	323	2	-1	0	-1	l2tp _ proto _ ver _ print ( netdissect _ options * ndo  const uint16 _ t * dat )	EMPTY	EMPTY
39	324	2	-1	0	-1	{	EMPTY	EMPTY
39	325	2	-1	0	-1	nd _ print ( ( ndo  strlit  ( extract _ 16bits ( dat ) >> numconst )	extract _ 16bits	EMPTY
39	326	2	-1	0	-1	( extract _ 16bits ( dat ) & numconst ) ) ) ;	extract _ 16bits	EMPTY
39	327	3	-1	0	-1	}	EMPTY	EMPTY
39	329	1	0	0	-1	static void	EMPTY	EMPTY
39	330	2	-1	0	-1	l2tp _ framing _ cap _ print ( netdissect _ options * ndo  const u _ char * dat )	EMPTY	EMPTY
39	331	2	-1	0	-1	{	EMPTY	EMPTY
39	332	3	-1	0	-1	uint32 _ t * ptr = ( uint32 _ t * ) dat ;	EMPTY	EMPTY
39	334	1	0	0	0	if ( extract _ 32bits ( ptr ) & l2tp _ framing _ cap _ async _ mask ) {	EMPTY	EMPTY
39	335	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	336	2	-1	0	-1	}	EMPTY	EMPTY
39	337	2	-1	0	-1	if ( extract _ 32bits ( ptr ) & l2tp _ framing _ cap _ sync _ mask ) {	EMPTY	EMPTY
39	338	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	339	2	-1	0	-1	}	EMPTY	EMPTY
39	340	3	-1	0	-1	}	EMPTY	EMPTY
39	342	1	0	0	-1	static void	EMPTY	EMPTY
39	343	2	-1	0	-1	l2tp _ bearer _ cap _ print ( netdissect _ options * ndo  const u _ char * dat )	EMPTY	EMPTY
39	344	2	-1	0	-1	{	EMPTY	EMPTY
39	345	3	-1	0	-1	uint32 _ t * ptr = ( uint32 _ t * ) dat ;	EMPTY	EMPTY
39	347	1	0	0	0	if ( extract _ 32bits ( ptr ) & l2tp _ bearer _ cap _ analog _ mask ) {	EMPTY	EMPTY
39	348	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	349	2	-1	0	-1	}	EMPTY	EMPTY
39	350	2	-1	0	-1	if ( extract _ 32bits ( ptr ) & l2tp _ bearer _ cap _ digital _ mask ) {	EMPTY	EMPTY
39	351	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	352	2	-1	0	-1	}	EMPTY	EMPTY
39	353	3	-1	0	-1	}	EMPTY	EMPTY
39	355	1	0	0	-1	static void	EMPTY	EMPTY
39	356	2	-1	0	-1	l2tp _ q931 _ cc _ print ( netdissect _ options * ndo  const u _ char * dat  u _ int length )	EMPTY	EMPTY
39	357	2	-1	0	-1	{	EMPTY	EMPTY
39	358	2	-1	0	-1	print _ 16bits _ val ( ndo  ( uint16 _ t * ) dat ) ;	EMPTY	EMPTY
39	359	2	-1	0	-1	nd _ print ( ( ndo  strlit  dat [ numconst ] ) ) ;	EMPTY	EMPTY
39	360	2	-1	0	-1	if ( length > numconst ) {	EMPTY	EMPTY
39	361	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	362	2	-1	0	-1	print _ string ( ndo  dat + numconst  length - numconst ) ;	print _ string	EMPTY
39	363	2	-1	0	-1	}	EMPTY	EMPTY
39	364	3	-1	0	-1	}	EMPTY	EMPTY
39	366	1	0	0	-1	static void	EMPTY	EMPTY
39	367	2	-1	0	-1	l2tp _ bearer _ type _ print ( netdissect _ options * ndo  const u _ char * dat )	EMPTY	EMPTY
39	368	2	-1	0	-1	{	EMPTY	EMPTY
39	369	3	-1	0	-1	uint32 _ t * ptr = ( uint32 _ t * ) dat ;	EMPTY	EMPTY
39	371	1	0	0	0	if ( extract _ 32bits ( ptr ) & l2tp _ bearer _ type _ analog _ mask ) {	EMPTY	EMPTY
39	372	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	373	2	-1	0	-1	}	EMPTY	EMPTY
39	374	2	-1	0	-1	if ( extract _ 32bits ( ptr ) & l2tp _ bearer _ type _ digital _ mask ) {	EMPTY	EMPTY
39	375	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	376	2	-1	0	-1	}	EMPTY	EMPTY
39	377	3	-1	0	-1	}	EMPTY	EMPTY
39	379	1	0	0	-1	static void	EMPTY	EMPTY
39	380	2	-1	0	-1	l2tp _ framing _ type _ print ( netdissect _ options * ndo  const u _ char * dat )	EMPTY	EMPTY
39	381	2	-1	0	-1	{	EMPTY	EMPTY
39	382	3	-1	0	-1	uint32 _ t * ptr = ( uint32 _ t * ) dat ;	EMPTY	EMPTY
39	384	1	0	0	0	if ( extract _ 32bits ( ptr ) & l2tp _ framing _ type _ async _ mask ) {	EMPTY	EMPTY
39	385	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	386	2	-1	0	-1	}	EMPTY	EMPTY
39	387	2	-1	0	-1	if ( extract _ 32bits ( ptr ) & l2tp _ framing _ type _ sync _ mask ) {	EMPTY	EMPTY
39	388	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	389	2	-1	0	-1	}	EMPTY	EMPTY
39	390	3	-1	0	-1	}	EMPTY	EMPTY
39	392	1	0	0	-1	static void	EMPTY	EMPTY
39	393	2	-1	0	-1	l2tp _ packet _ proc _ delay _ print ( netdissect _ options * ndo )	EMPTY	EMPTY
39	394	2	-1	0	-1	{	EMPTY	EMPTY
39	395	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	396	3	-1	0	-1	}	EMPTY	EMPTY
39	398	1	0	0	-1	static void	EMPTY	EMPTY
39	399	2	-1	0	-1	l2tp _ proxy _ auth _ type _ print ( netdissect _ options * ndo  const u _ char * dat )	EMPTY	EMPTY
39	400	2	-1	0	-1	{	EMPTY	EMPTY
39	401	3	-1	0	-1	uint16 _ t * ptr = ( uint16 _ t * ) dat ;	EMPTY	EMPTY
39	403	1	0	0	0	nd _ print ( ( ndo  strlit  tok2str ( l2tp _ authentype2str	tok2str	EMPTY
39	404	2	-1	0	-1	strlit  extract _ 16bits ( ptr ) ) ) ) ;	extract _ 16bits	EMPTY
39	405	3	-1	0	-1	}	EMPTY	EMPTY
39	407	1	0	0	-1	static void	EMPTY	EMPTY
39	408	2	-1	0	-1	l2tp _ proxy _ auth _ id _ print ( netdissect _ options * ndo  const u _ char * dat )	EMPTY	EMPTY
39	409	2	-1	0	-1	{	EMPTY	EMPTY
39	410	3	-1	0	-1	uint16 _ t * ptr = ( uint16 _ t * ) dat ;	EMPTY	EMPTY
39	412	1	0	0	0	nd _ print ( ( ndo  strlit  extract _ 16bits ( ptr ) & l2tp _ proxy _ auth _ id _ mask ) ) ;	extract _ 16bits	EMPTY
39	413	3	-1	0	-1	}	EMPTY	EMPTY
39	415	1	0	0	-1	static void	EMPTY	EMPTY
39	416	2	-1	0	-1	l2tp _ call _ errors _ print ( netdissect _ options * ndo  const u _ char * dat )	EMPTY	EMPTY
39	417	2	-1	0	-1	{	EMPTY	EMPTY
39	418	2	-1	0	-1	uint16 _ t * ptr = ( uint16 _ t * ) dat ;	EMPTY	EMPTY
39	419	3	-1	0	-1	uint16 _ t val _ h  val _ l ;	EMPTY	EMPTY
39	421	1	1	1	-1	ptr ++ ;	EMPTY	EMPTY
39	423	1	0	0	-1	val _ h = extract _ 16bits ( ptr ) ptr ++	extract _ 16bits	EMPTY
39	424	2	-1	0	-1	val _ l = extract _ 16bits ( ptr ) ptr ++	extract _ 16bits	EMPTY
39	425	3	-1	0	-1	nd _ print ( ( ndo  strlit  ( val _ h << numconst ) + val _ l ) ) ;	EMPTY	EMPTY
39	427	1	0	0	-1	val _ h = extract _ 16bits ( ptr ) ptr ++	extract _ 16bits	EMPTY
39	428	2	-1	0	-1	val _ l = extract _ 16bits ( ptr ) ptr ++	extract _ 16bits	EMPTY
39	429	3	-1	0	-1	nd _ print ( ( ndo  strlit  ( val _ h << numconst ) + val _ l ) ) ;	EMPTY	EMPTY
39	431	1	0	0	-1	val _ h = extract _ 16bits ( ptr ) ptr ++	extract _ 16bits	EMPTY
39	432	2	-1	0	-1	val _ l = extract _ 16bits ( ptr ) ptr ++	extract _ 16bits	EMPTY
39	433	3	-1	0	-1	nd _ print ( ( ndo  strlit  ( val _ h << numconst ) + val _ l ) ) ;	EMPTY	EMPTY
39	435	1	0	0	-1	val _ h = extract _ 16bits ( ptr ) ptr ++	extract _ 16bits	EMPTY
39	436	2	-1	0	-1	val _ l = extract _ 16bits ( ptr ) ptr ++	extract _ 16bits	EMPTY
39	437	3	-1	0	-1	nd _ print ( ( ndo  strlit  ( val _ h << numconst ) + val _ l ) ) ;	EMPTY	EMPTY
39	439	1	0	0	-1	val _ h = extract _ 16bits ( ptr ) ptr ++	extract _ 16bits	EMPTY
39	440	2	-1	0	-1	val _ l = extract _ 16bits ( ptr ) ptr ++	extract _ 16bits	EMPTY
39	441	3	-1	0	-1	nd _ print ( ( ndo  strlit  ( val _ h << numconst ) + val _ l ) ) ;	EMPTY	EMPTY
39	443	1	0	0	-1	val _ h = extract _ 16bits ( ptr ) ptr ++	extract _ 16bits	EMPTY
39	444	2	-1	0	-1	val _ l = extract _ 16bits ( ptr ) ptr ++	extract _ 16bits	EMPTY
39	445	2	-1	0	-1	nd _ print ( ( ndo  strlit  ( val _ h << numconst ) + val _ l ) ) ;	EMPTY	EMPTY
39	446	3	-1	0	-1	}	EMPTY	EMPTY
39	448	1	0	0	-1	static void	EMPTY	EMPTY
39	449	2	-1	0	-1	l2tp _ accm _ print ( netdissect _ options * ndo  const u _ char * dat )	EMPTY	EMPTY
39	450	2	-1	0	-1	{	EMPTY	EMPTY
39	451	2	-1	0	-1	uint16 _ t * ptr = ( uint16 _ t * ) dat ;	EMPTY	EMPTY
39	452	3	-1	0	-1	uint16 _ t val _ h  val _ l ;	EMPTY	EMPTY
39	454	1	1	1	-1	ptr ++ ;	EMPTY	EMPTY
39	456	1	0	0	-1	val _ h = extract _ 16bits ( ptr ) ptr ++	extract _ 16bits	EMPTY
39	457	2	-1	0	-1	val _ l = extract _ 16bits ( ptr ) ptr ++	extract _ 16bits	EMPTY
39	458	3	-1	0	-1	nd _ print ( ( ndo  strlit  ( val _ h << numconst ) + val _ l ) ) ;	EMPTY	EMPTY
39	460	1	0	0	-1	val _ h = extract _ 16bits ( ptr ) ptr ++	extract _ 16bits	EMPTY
39	461	2	-1	0	-1	val _ l = extract _ 16bits ( ptr ) ptr ++	extract _ 16bits	EMPTY
39	462	2	-1	0	-1	nd _ print ( ( ndo  strlit  ( val _ h << numconst ) + val _ l ) ) ;	EMPTY	EMPTY
39	463	3	-1	0	-1	}	EMPTY	EMPTY
39	465	1	0	0	-1	static void	EMPTY	EMPTY
39	466	2	-1	0	-1	l2tp _ ppp _ discon _ cc _ print ( netdissect _ options * ndo  const u _ char * dat  u _ int length )	EMPTY	EMPTY
39	467	2	-1	0	-1	{	EMPTY	EMPTY
39	468	3	-1	0	-1	uint16 _ t * ptr = ( uint16 _ t * ) dat ;	EMPTY	EMPTY
39	470	1	0	0	-1	nd _ print ( ( ndo  strlit  extract _ 16bits ( ptr ) ) ) ; ptr ++ ;	extract _ 16bits	EMPTY
39	471	2	-1	0	-1	ptr ++	EMPTY	EMPTY
39	472	2	-1	0	-1	nd _ print ( ( ndo  strlit  tok2str ( l2tp _ cc _ direction2str	tok2str	EMPTY
39	473	3	-1	0	-1	strlit  * ( ( u _ char * ) ptr ++ ) ) ) ) ;	EMPTY	EMPTY
39	475	1	0	0	0	if ( length > 5 ) {	EMPTY	EMPTY
39	476	2	-1	0	-1	nd _ print ( ( ndo ,  "   "  ) ) ;	EMPTY	EMPTY
39	477	2	-1	0	-1	print _ string ( ndo , ( const u _ char * ) ptr , length - 5 ) ;	print _ string	EMPTY
39	478	2	-1	0	-1	}	EMPTY	EMPTY
39	479	3	-1	0	-1	}	EMPTY	EMPTY
39	481	1	0	0	-1	static void	EMPTY	EMPTY
39	482	2	-1	0	-1	l2tp _ avp _ print ( netdissect _ options * ndo  const u _ char * dat  int length )	EMPTY	EMPTY
39	483	2	-1	0	-1	{	EMPTY	EMPTY
39	484	2	-1	0	-1	u _ int len ;	len	EMPTY
39	485	2	-1	0	-1	const uint16 _ t * ptr = ( uint16 _ t * ) dat ;	EMPTY	EMPTY
39	486	2	-1	0	-1	uint16 _ t attr _ type ;	EMPTY	EMPTY
39	487	3	-1	0	-1	int hidden = false ;	EMPTY	EMPTY
39	489	1	0	0	0	if ( length <= numconst ) {	EMPTY	EMPTY
39	490	2	-1	0	-1	return ;	EMPTY	EMPTY
39	491	3	-1	0	-1	}	EMPTY	EMPTY
39	493	1	0	0	0	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	495	1	0	0	-1	nd _ tcheck ( * ptr ) ;	EMPTY	EMPTY
39	496	3	-1	0	-1	len = extract _ 16bits ( ptr ) & l2tp _ avp _ hdr _ len _ mask ;	len extract _ 16bits	EMPTY
39	499	1	0	0	-1	if ( len < 6 )	len	EMPTY
39	500	3	-1	0	-1	goto trunc	EMPTY	EMPTY
39	504	1	0	0	-1	if ( len > ( u _ int ) length )	len	EMPTY
39	505	3	-1	0	-1	goto trunc	EMPTY	EMPTY
39	509	1	0	0	-1	nd _ tcheck2 ( * ptr  len ) ;	len	EMPTY
39	512	1	1	1	1	if ( extract _ 16bits ( ptr ) & l2tp _ avp _ hdr _ flag _ mandatory ) {	extract _ 16bits	EMPTY
39	513	2	-1	0	-1	nd _ print ( ( ndo ,  " * "  ) ) ;	EMPTY	EMPTY
39	514	2	-1	0	-1	}	EMPTY	EMPTY
39	515	2	-1	0	-1	if ( extract _ 16bits ( ptr ) & l2tp _ avp _ hdr _ flag _ hidden ) {	extract _ 16bits	EMPTY
39	516	2	-1	0	-1	hidden = true ;	EMPTY	EMPTY
39	517	2	-1	0	-1	nd _ print ( ( ndo ,  " ? "  ) ) ;	EMPTY	EMPTY
39	518	2	-1	0	-1	}	EMPTY	EMPTY
39	519	3	-1	0	-1	ptr ++	EMPTY	EMPTY
39	521	1	1	0	1	if ( extract _ 16bits ( ptr ) ) {	extract _ 16bits	EMPTY
39	523	2	-1	1	-1	ptr ++	EMPTY	EMPTY
39	524	2	-1	0	-1	ptr ++	EMPTY	EMPTY
39	525	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	526	2	-1	0	-1	print _ octets ( ndo , ( u _ char * ) ptr , len - 6 )	len	EMPTY
39	527	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	528	2	-1	0	-1	} else {	EMPTY	EMPTY
39	530	2	-1	1	-1	ptr ++	EMPTY	EMPTY
39	531	2	-1	0	-1	attr _ type = extract _ 16bits ( ptr ) ptr ++	extract _ 16bits	EMPTY
39	532	2	-1	0	-1	nd _ print ( ( ndo  strlit  tok2str ( l2tp _ avp2str  strlit  attr _ type ) ) ) ;	tok2str	EMPTY
39	533	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	534	2	-1	0	-1	if ( hidden ) {	EMPTY	EMPTY
39	535	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	536	2	-1	0	-1	}	EMPTY	EMPTY
39	537	2	-1	0	-1	switch ( attr _ type ) {	EMPTY	EMPTY
39	538	2	-1	0	-1	case l2tp _ avp _ msgtype :	EMPTY	EMPTY
39	539	2	-1	0	-1	l2tp _ msgtype _ print ( ndo , ( u _ char * ) ptr )	l2tp _ msgtype _ print	EMPTY
39	540	2	-1	0	-1	break	EMPTY	EMPTY
39	541	2	-1	0	-1	case l2tp _ avp _ result _ code :	EMPTY	EMPTY
39	542	2	-1	0	-1	l2tp _ result _ code _ print ( ndo , ( u _ char * ) ptr , len - 6 )	len	EMPTY
39	543	2	-1	0	-1	break	EMPTY	EMPTY
39	544	2	-1	0	-1	case l2tp _ avp _ proto _ ver :	EMPTY	EMPTY
39	545	2	-1	0	-1	l2tp _ proto _ ver _ print ( ndo , ptr )	EMPTY	EMPTY
39	546	2	-1	0	-1	break	EMPTY	EMPTY
39	547	2	-1	0	-1	case l2tp _ avp _ framing _ cap :	EMPTY	EMPTY
39	548	2	-1	0	-1	l2tp _ framing _ cap _ print ( ndo , ( u _ char * ) ptr )	EMPTY	EMPTY
39	549	2	-1	0	-1	break	EMPTY	EMPTY
39	550	2	-1	0	-1	case l2tp _ avp _ bearer _ cap :	EMPTY	EMPTY
39	551	2	-1	0	-1	l2tp _ bearer _ cap _ print ( ndo , ( u _ char * ) ptr )	EMPTY	EMPTY
39	552	3	-1	0	-1	break	EMPTY	EMPTY
39	553	1	0	0	-1	case l2tp _ avp _ tie _ breaker :	EMPTY	EMPTY
39	554	2	-1	0	-1	print _ octets ( ndo , ( u _ char * ) ptr , 8 )	EMPTY	EMPTY
39	555	2	-1	0	-1	break	EMPTY	EMPTY
39	556	2	-1	0	-1	case l2tp _ avp _ firm _ ver :	EMPTY	EMPTY
39	557	2	-1	0	-1	case l2tp _ avp _ assnd _ tun _ id :	EMPTY	EMPTY
39	558	2	-1	0	-1	case l2tp _ avp _ recv _ win _ size :	EMPTY	EMPTY
39	559	2	-1	0	-1	case l2tp _ avp _ assnd _ sess _ id :	EMPTY	EMPTY
39	560	2	-1	0	-1	print _ 16bits _ val ( ndo , ptr )	EMPTY	EMPTY
39	561	2	-1	0	-1	break	EMPTY	EMPTY
39	562	2	-1	0	-1	case l2tp _ avp _ host _ name :	EMPTY	EMPTY
39	563	2	-1	0	-1	case l2tp _ avp _ vendor _ name :	EMPTY	EMPTY
39	564	2	-1	0	-1	case l2tp _ avp _ calling _ number :	EMPTY	EMPTY
39	565	2	-1	0	-1	case l2tp _ avp _ called _ number :	EMPTY	EMPTY
39	566	2	-1	0	-1	case l2tp _ avp _ sub _ address :	EMPTY	EMPTY
39	567	2	-1	0	-1	case l2tp _ avp _ proxy _ auth _ name :	EMPTY	EMPTY
39	568	2	-1	0	-1	case l2tp _ avp _ private _ grp _ id :	EMPTY	EMPTY
39	569	2	-1	0	-1	print _ string ( ndo , ( u _ char * ) ptr , len - 6 )	print _ string len	EMPTY
39	570	2	-1	0	-1	break	EMPTY	EMPTY
39	571	2	-1	0	-1	case l2tp _ avp _ challenge :	EMPTY	EMPTY
39	572	2	-1	0	-1	case l2tp _ avp _ ini _ recv _ lcp :	EMPTY	EMPTY
39	573	2	-1	0	-1	case l2tp _ avp _ last _ sent _ lcp :	EMPTY	EMPTY
39	574	2	-1	0	-1	case l2tp _ avp _ last _ recv _ lcp :	EMPTY	EMPTY
39	575	2	-1	0	-1	case l2tp _ avp _ proxy _ auth _ chal :	EMPTY	EMPTY
39	576	2	-1	0	-1	case l2tp _ avp _ proxy _ auth _ resp :	EMPTY	EMPTY
39	577	2	-1	0	-1	case l2tp _ avp _ random _ vector :	EMPTY	EMPTY
39	578	2	-1	0	-1	print _ octets ( ndo , ( u _ char * ) ptr , len - 6 )	len	EMPTY
39	579	2	-1	0	-1	break	EMPTY	EMPTY
39	580	2	-1	0	-1	case l2tp _ avp _ q931 _ cc :	EMPTY	EMPTY
39	581	2	-1	0	-1	l2tp _ q931 _ cc _ print ( ndo , ( u _ char * ) ptr , len - 6 )	len	EMPTY
39	582	3	-1	0	-1	break	EMPTY	EMPTY
39	583	1	0	0	-1	case l2tp _ avp _ challenge _ resp :	EMPTY	EMPTY
39	584	2	-1	0	-1	print _ octets ( ndo , ( u _ char * ) ptr , 16 )	EMPTY	EMPTY
39	585	2	-1	0	-1	break	EMPTY	EMPTY
39	586	2	-1	0	-1	case l2tp _ avp _ call _ ser _ num :	EMPTY	EMPTY
39	587	2	-1	0	-1	case l2tp _ avp _ minimum _ bps :	EMPTY	EMPTY
39	588	2	-1	0	-1	case l2tp _ avp _ maximum _ bps :	EMPTY	EMPTY
39	589	2	-1	0	-1	case l2tp _ avp _ tx _ conn _ speed :	EMPTY	EMPTY
39	590	2	-1	0	-1	case l2tp _ avp _ phy _ channel _ id :	EMPTY	EMPTY
39	591	2	-1	0	-1	case l2tp _ avp _ rx _ conn _ speed :	EMPTY	EMPTY
39	592	2	-1	0	-1	print _ 32bits _ val ( ndo , ( uint32 _ t * ) ptr )	EMPTY	EMPTY
39	593	2	-1	0	-1	break	EMPTY	EMPTY
39	594	2	-1	0	-1	case l2tp _ avp _ bearer _ type :	EMPTY	EMPTY
39	595	2	-1	0	-1	l2tp _ bearer _ type _ print ( ndo , ( u _ char * ) ptr )	EMPTY	EMPTY
39	596	2	-1	0	-1	break	EMPTY	EMPTY
39	597	2	-1	0	-1	case l2tp _ avp _ framing _ type :	EMPTY	EMPTY
39	598	2	-1	0	-1	l2tp _ framing _ type _ print ( ndo , ( u _ char * ) ptr )	EMPTY	EMPTY
39	599	2	-1	0	-1	break	EMPTY	EMPTY
39	600	2	-1	0	-1	case l2tp _ avp _ packet _ proc _ delay :	EMPTY	EMPTY
39	601	2	-1	0	-1	l2tp _ packet _ proc _ delay _ print ( ndo )	EMPTY	EMPTY
39	602	2	-1	0	-1	break	EMPTY	EMPTY
39	603	2	-1	0	-1	case l2tp _ avp _ proxy _ auth _ type :	EMPTY	EMPTY
39	604	2	-1	0	-1	l2tp _ proxy _ auth _ type _ print ( ndo , ( u _ char * ) ptr )	EMPTY	EMPTY
39	605	2	-1	0	-1	break	EMPTY	EMPTY
39	606	2	-1	0	-1	case l2tp _ avp _ proxy _ auth _ id :	EMPTY	EMPTY
39	607	2	-1	0	-1	l2tp _ proxy _ auth _ id _ print ( ndo , ( u _ char * ) ptr )	EMPTY	EMPTY
39	608	2	-1	0	-1	break	EMPTY	EMPTY
39	609	2	-1	0	-1	case l2tp _ avp _ call _ errors :	EMPTY	EMPTY
39	610	2	-1	0	-1	l2tp _ call _ errors _ print ( ndo , ( u _ char * ) ptr )	EMPTY	EMPTY
39	611	2	-1	0	-1	break	EMPTY	EMPTY
39	612	3	-1	0	-1	case l2tp _ avp _ accm :	EMPTY	EMPTY
39	613	1	1	0	-1	l2tp _ accm _ print ( ndo , ( u _ char * ) ptr )	EMPTY	EMPTY
39	614	2	-1	0	-1	break	EMPTY	EMPTY
39	615	2	-1	0	-1	case l2tp _ avp _ seq _ required :	EMPTY	EMPTY
39	616	2	-1	1	-1	break	EMPTY	EMPTY
39	617	2	-1	0	-1	case l2tp _ avp _ ppp _ discon _ cc :	EMPTY	EMPTY
39	618	2	-1	0	-1	l2tp _ ppp _ discon _ cc _ print ( ndo , ( u _ char * ) ptr , len - 6 )	len	EMPTY
39	619	2	-1	0	-1	break	EMPTY	EMPTY
39	620	2	-1	0	-1	default :	EMPTY	EMPTY
39	621	2	-1	0	-1	break	EMPTY	EMPTY
39	622	2	-1	0	-1	}	EMPTY	EMPTY
39	623	2	-1	0	-1	}	EMPTY	EMPTY
39	624	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	625	3	-1	0	-1	}	EMPTY	EMPTY
39	627	1	0	0	0	l2tp _ avp _ print ( ndo  dat + len  length - len ) ;	len len	EMPTY
39	628	3	-1	0	-1	return ;	EMPTY	EMPTY
39	630	1	0	0	-1	trunc :	EMPTY	EMPTY
39	631	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	632	3	-1	0	-1	}	EMPTY	EMPTY
39	635	1	1	0	-1	void	EMPTY	EMPTY
39	636	2	-1	0	-1	l2tp _ print ( netdissect _ options * ndo  const u _ char * dat  u _ int length )	EMPTY	EMPTY
39	637	2	-1	0	-1	{	EMPTY	EMPTY
39	638	2	-1	0	-1	const u _ char * ptr = dat ;	EMPTY	EMPTY
39	639	2	-1	1	-1	u _ int cnt = numconst ;	cnt	EMPTY
39	640	2	-1	0	-1	uint16 _ t pad ;	pad	EMPTY
39	641	2	-1	0	-1	int flag _ t , flag _ l , flag _ s , flag _ o ;	EMPTY	EMPTY
39	642	3	-1	0	-1	uint16 _ t l2tp _ len ;	EMPTY	EMPTY
39	644	1	0	0	-1	flag _ t = flag _ l = flag _ s = flag _ o = false ;	EMPTY	EMPTY
39	646	1	1	0	-1	nd _ tcheck2 ( * ptr  numconst ) ;	EMPTY	EMPTY
39	647	2	-1	0	-1	if ( ( extract _ 16bits ( ptr ) & l2tp _ version _ mask ) == l2tp _ version _ l2tp ) {	extract _ 16bits	EMPTY
39	648	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	649	2	-1	0	-1	if ( ( extract _ 16bits ( ptr ) & l2tp _ version _ mask ) == l2tp _ version _ l2f ) {	extract _ 16bits	EMPTY
39	650	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	651	2	-1	1	-1	return	EMPTY	EMPTY
39	652	2	-1	0	-1	} else {	EMPTY	EMPTY
39	653	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	654	2	-1	1	-1	return ;	EMPTY	EMPTY
39	655	3	-1	0	-1	}	EMPTY	EMPTY
39	657	1	0	0	0	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	658	2	-1	0	-1	if ( extract _ 16bits ( ptr ) & l2tp _ flag _ type ) {	extract _ 16bits	EMPTY
39	659	2	-1	0	-1	flag _ t = true ;	EMPTY	EMPTY
39	660	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	661	2	-1	0	-1	}	EMPTY	EMPTY
39	662	2	-1	0	-1	if ( extract _ 16bits ( ptr ) & l2tp _ flag _ length ) {	extract _ 16bits	EMPTY
39	663	2	-1	0	-1	flag _ l = true ;	EMPTY	EMPTY
39	664	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	665	2	-1	0	-1	}	EMPTY	EMPTY
39	666	2	-1	0	-1	if ( extract _ 16bits ( ptr ) & l2tp _ flag _ sequence ) {	extract _ 16bits	EMPTY
39	667	2	-1	0	-1	flag _ s = true ;	EMPTY	EMPTY
39	668	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	669	2	-1	0	-1	}	EMPTY	EMPTY
39	670	2	-1	0	-1	if ( extract _ 16bits ( ptr ) & l2tp _ flag _ offset ) {	extract _ 16bits	EMPTY
39	671	2	-1	0	-1	flag _ o = true ;	EMPTY	EMPTY
39	672	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	673	2	-1	0	-1	}	EMPTY	EMPTY
39	674	2	-1	0	-1	if ( extract _ 16bits ( ptr ) & l2tp _ flag _ priority )	extract _ 16bits	EMPTY
39	675	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	676	3	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	678	1	0	0	-1	ptr += numconst ;	EMPTY	EMPTY
39	679	3	-1	0	-1	cnt += numconst ;	cnt	EMPTY
39	681	1	0	0	0	if ( flag _ l ) {	EMPTY	EMPTY
39	682	2	-1	0	-1	nd _ tcheck2 ( * ptr  numconst ) ;	EMPTY	EMPTY
39	683	2	-1	0	-1	l2tp _ len = extract _ 16bits ( ptr )	extract _ 16bits	EMPTY
39	684	2	-1	0	-1	ptr += 2	EMPTY	EMPTY
39	685	2	-1	0	-1	cnt += 2	cnt	EMPTY
39	686	2	-1	0	-1	} else {	EMPTY	EMPTY
39	687	2	-1	0	-1	l2tp _ len = numconst ;	EMPTY	EMPTY
39	688	3	-1	0	-1	}	EMPTY	EMPTY
39	690	1	1	1	1	nd _ tcheck2 ( * ptr  numconst ) ;	EMPTY	EMPTY
39	691	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 16bits ( ptr ) ) ) ;	extract _ 16bits	EMPTY
39	692	2	-1	0	-1	ptr += 2	EMPTY	EMPTY
39	693	2	-1	0	-1	cnt += 2	cnt	EMPTY
39	694	2	-1	1	-1	nd _ tcheck2 ( * ptr  numconst ) ;	EMPTY	EMPTY
39	695	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 16bits ( ptr ) ) ) ;	extract _ 16bits	EMPTY
39	696	2	-1	0	-1	ptr += 2	EMPTY	EMPTY
39	697	3	-1	0	-1	cnt += 2	cnt	EMPTY
39	699	1	0	0	0	if ( flag _ s ) {	EMPTY	EMPTY
39	700	2	-1	0	-1	nd _ tcheck2 ( * ptr  numconst ) ;	EMPTY	EMPTY
39	701	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 16bits ( ptr ) ) ) ;	extract _ 16bits	EMPTY
39	702	2	-1	0	-1	ptr += 2	EMPTY	EMPTY
39	703	2	-1	0	-1	cnt += 2	cnt	EMPTY
39	704	2	-1	0	-1	nd _ tcheck2 ( * ptr  numconst ) ;	EMPTY	EMPTY
39	705	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 16bits ( ptr ) ) ) ;	extract _ 16bits	EMPTY
39	706	2	-1	0	-1	ptr += 2	EMPTY	EMPTY
39	707	2	-1	0	-1	cnt += 2	cnt	EMPTY
39	708	3	-1	0	-1	}	EMPTY	EMPTY
39	710	1	0	0	0	if ( flag _ o ) {	EMPTY	EMPTY
39	711	2	-1	0	-1	nd _ tcheck2 ( * ptr  numconst ) ;	EMPTY	EMPTY
39	712	2	-1	0	-1	pad = extract _ 16bits ( ptr )	pad extract _ 16bits	EMPTY
39	713	2	-1	0	-1	ptr += ( 2 + pad )	pad	EMPTY
39	714	2	-1	0	-1	cnt += ( 2 + pad )	cnt pad	EMPTY
39	715	3	-1	0	-1	}	EMPTY	EMPTY
39	717	1	0	0	0	if ( flag _ l ) {	EMPTY	EMPTY
39	718	2	-1	0	-1	if ( length < l2tp _ len ) {	EMPTY	EMPTY
39	719	2	-1	0	-1	nd _ print ( ( ndo  strlit  l2tp _ len ) ) ;	EMPTY	EMPTY
39	720	2	-1	0	-1	return ;	EMPTY	EMPTY
39	721	2	-1	0	-1	}	EMPTY	EMPTY
39	722	2	-1	0	-1	length = l2tp _ len ;	EMPTY	EMPTY
39	723	2	-1	0	-1	}	EMPTY	EMPTY
39	724	2	-1	0	-1	if ( length < cnt ) {	cnt	EMPTY
39	725	2	-1	0	-1	nd _ print ( ( ndo  strlit  length ) ) ;	EMPTY	EMPTY
39	726	2	-1	0	-1	return ;	EMPTY	EMPTY
39	727	2	-1	0	-1	}	EMPTY	EMPTY
39	728	2	-1	0	-1	if ( flag _ t ) {	EMPTY	EMPTY
39	729	2	-1	0	-1	if ( ! flag _ l ) {	EMPTY	EMPTY
39	730	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	731	2	-1	0	-1	return ;	EMPTY	EMPTY
39	732	2	-1	0	-1	}	EMPTY	EMPTY
39	733	2	-1	0	-1	if ( length - cnt == numconst ) {	cnt	EMPTY
39	734	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	735	2	-1	0	-1	}	EMPTY	EMPTY
39	736	2	-1	0	-1	l2tp _ avp _ print ( ndo  ptr  length - cnt ) ;	cnt	EMPTY
39	737	2	-1	0	-1	}	EMPTY	EMPTY
39	738	2	-1	0	-1	} else {	EMPTY	EMPTY
39	739	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	740	2	-1	0	-1	ppp _ print ( ndo  ptr  length - cnt ) ;	cnt	EMPTY
39	741	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
39	742	3	-1	0	-1	}	EMPTY	EMPTY
39	744	1	0	0	0	return ;	EMPTY	EMPTY
39	746	1	0	0	-1	trunc :	EMPTY	EMPTY
39	747	2	-1	0	-1	nd _ print ( ( ndo  strlit  tstr ) ) ;	EMPTY	EMPTY
39	748	3	-1	0	-1	}	EMPTY	EMPTY
80	15	1	0	0	-1	static const char rcsid [ ]  _ u _  =	EMPTY	EMPTY
80	16	2	-1	0	-1	strlit ;	EMPTY	EMPTY
80	17	3	-1	0	-1	# endif	EMPTY	EMPTY
80	19	1	0	0	-1	# ifdef have _ config _ h	EMPTY	EMPTY
80	20	2	-1	0	-1	# include strlit	EMPTY	EMPTY
80	21	3	-1	0	-1	# endif	EMPTY	EMPTY
80	23	1	0	0	-1	# include < tcpdump - stdinc . h >	EMPTY	EMPTY
80	25	1	0	0	-1	# include < stdio . h >	EMPTY	EMPTY
80	26	3	-1	0	-1	# include < stdlib . h >	EMPTY	EMPTY
80	28	1	0	0	-1	# include strlit	EMPTY	EMPTY
80	29	3	-1	0	-1	# include strlit	EMPTY	EMPTY
80	31	1	0	0	-1	static const char * rtspcmds [ ] = {	EMPTY	EMPTY
80	32	2	-1	0	-1	strlit	EMPTY	EMPTY
80	33	2	-1	0	-1	strlit	EMPTY	EMPTY
80	34	2	-1	0	-1	strlit	EMPTY	EMPTY
80	35	2	-1	0	-1	strlit	EMPTY	EMPTY
80	36	2	-1	0	-1	strlit	EMPTY	EMPTY
80	37	2	-1	0	-1	strlit	EMPTY	EMPTY
80	38	2	-1	0	-1	strlit	EMPTY	EMPTY
80	39	2	-1	0	-1	strlit	EMPTY	EMPTY
80	40	2	-1	0	-1	strlit	EMPTY	EMPTY
80	41	2	-1	0	-1	strlit	EMPTY	EMPTY
80	42	2	-1	0	-1	strlit	EMPTY	EMPTY
80	43	2	-1	0	-1	null	EMPTY	EMPTY
80	44	3	-1	0	-1	} ;	EMPTY	EMPTY
80	46	1	1	0	-1	void	EMPTY	EMPTY
80	47	2	-1	0	-1	rtsp _ print ( netdissect _ options * ndo  const u _ char * pptr  u _ int len )	len	EMPTY
80	48	2	-1	0	-1	{	EMPTY	EMPTY
80	49	2	-1	1	-1	txtproto _ print ( ndo , pptr , len ,  " rtsp "  , rtspcmds , resp _ code _ second _ token )	len	EMPTY
80	50	3	-1	0	-1	}	EMPTY	EMPTY
93	33	1	1	0	-1	void	EMPTY	EMPTY
93	34	2	-1	0	-1	bpf _ dump ( const struct bpf _ program * p  int option )	bpf _ program	EMPTY
93	35	2	-1	0	-1	{	EMPTY	EMPTY
93	36	2	-1	1	-1	struct bpf _ insn * insn ;	bpf _ insn	EMPTY
93	37	2	-1	0	-1	int i ;	EMPTY	EMPTY
93	38	3	-1	0	-1	int n = p -> bf _ len ;	EMPTY	EMPTY
93	40	1	0	0	-1	insn = p -> bf _ insns	EMPTY	EMPTY
93	41	2	-1	0	-1	if ( option > 2 ) {	EMPTY	EMPTY
93	42	2	-1	0	-1	printf (  " %d\n "  , n ) ;	EMPTY	printf
93	43	2	-1	0	-1	for ( i = 0 ; i < n ; ++ insn , ++ i ) {	EMPTY	EMPTY
93	44	2	-1	0	-1	printf (  " %u %u %u %u\n "  , insn -> code ,	EMPTY	printf
93	45	2	-1	0	-1	insn -> jt , insn -> jf , insn -> k ) ;	EMPTY	EMPTY
93	46	2	-1	0	-1	}	EMPTY	EMPTY
93	47	2	-1	0	-1	return ;	EMPTY	EMPTY
93	48	2	-1	0	-1	}	EMPTY	EMPTY
93	49	2	-1	0	-1	if ( option > 1 ) {	EMPTY	EMPTY
93	50	2	-1	0	-1	for ( i = 0 ; i < n ; ++ insn , ++ i )	EMPTY	EMPTY
93	51	2	-1	0	-1	printf (  " { 0x%x, %d, %d, 0x%08x },\n "  ,	EMPTY	printf
93	52	2	-1	0	-1	insn -> code , insn -> jt , insn -> jf , insn -> k ) ;	EMPTY	EMPTY
93	53	2	-1	0	-1	return ;	EMPTY	EMPTY
93	54	2	-1	0	-1	}	EMPTY	EMPTY
93	55	2	-1	0	-1	for ( i = 0 ; i < n ; ++ insn , ++ i ) {	EMPTY	EMPTY
93	56	2	-1	0	-1	# ifdef bdebug	EMPTY	EMPTY
93	57	2	-1	0	-1	extern int bids [ ] ;	EMPTY	EMPTY
93	58	2	-1	0	-1	printf ( bids [ i ] > 0 ?  " [%02d] "  :  "  --  "  , bids [ i ] - 1 ) ;	EMPTY	printf
93	59	2	-1	0	-1	# endif	EMPTY	EMPTY
93	60	2	-1	0	-1	puts ( bpf _ image ( insn , i ) ) ;	EMPTY	puts
93	61	2	-1	0	-1	}	EMPTY	EMPTY
93	62	3	-1	0	-1	}	EMPTY	EMPTY
126	37	1	0	0	-1	static const char tstr [ ] = strlit ;	EMPTY	EMPTY
126	49	1	1	0	-1	struct arp _ pkthdr {	arp _ pkthdr	EMPTY
126	50	2	-1	1	-1	u _ short ar _ hrd ;	ar _ hrd	EMPTY
126	51	2	-1	1	-1	# define arphrd _ ether numconst	EMPTY	EMPTY
126	52	2	-1	1	-1	# define arphrd _ ieee802 numconst	EMPTY	EMPTY
126	53	2	-1	1	-1	# define arphrd _ arcnet numconst	EMPTY	EMPTY
126	54	2	-1	1	-1	# define arphrd _ frelay numconst	EMPTY	EMPTY
126	55	2	-1	1	-1	# define arphrd _ atm2225 numconst	EMPTY	EMPTY
126	56	2	-1	1	-1	# define arphrd _ strip numconst	EMPTY	EMPTY
126	57	2	-1	1	-1	# define arphrd _ ieee1394 numconst	EMPTY	EMPTY
126	58	2	-1	1	-1	u _ short ar _ pro ;	ar _ pro	EMPTY
126	59	2	-1	1	-1	u _ char ar _ hln ;	ar _ hln	EMPTY
126	60	2	-1	1	-1	u _ char ar _ pln ;	ar _ pln	EMPTY
126	61	2	-1	1	-1	u _ short ar _ op ;	ar _ op	EMPTY
126	62	2	-1	1	-1	# define arpop _ request numconst	EMPTY	EMPTY
126	63	2	-1	1	-1	# define arpop _ reply numconst	EMPTY	EMPTY
126	64	2	-1	1	-1	# define arpop _ revrequest numconst	EMPTY	EMPTY
126	65	2	-1	1	-1	# define arpop _ revreply numconst	EMPTY	EMPTY
126	66	2	-1	1	-1	# define arpop _ invrequest numconst	EMPTY	EMPTY
126	67	2	-1	1	-1	# define arpop _ invreply numconst	EMPTY	EMPTY
126	68	3	-1	1	-1	# define arpop _ nak numconst	EMPTY	EMPTY
126	74	1	1	1	-1	# ifdef comment _ only	EMPTY	EMPTY
126	75	2	-1	1	-1	u _ char ar _ sha [ ] ;	EMPTY	EMPTY
126	76	2	-1	1	-1	u _ char ar _ spa [ ] ;	EMPTY	EMPTY
126	77	2	-1	1	-1	u _ char ar _ tha [ ] ;	EMPTY	EMPTY
126	78	2	-1	1	-1	u _ char ar _ tpa [ ] ;	EMPTY	EMPTY
126	79	2	-1	0	-1	# endif	EMPTY	EMPTY
126	80	2	-1	0	-1	# define ar _ sha ( ap ) ( ( ( const u _ char * ) ( ( ap ) + numconst ) ) + numconst )	EMPTY	EMPTY
126	81	2	-1	0	-1	# define ar _ spa ( ap ) ( ( ( const u _ char * ) ( ( ap ) + numconst ) ) + ( ap ) -> ar _ hln )	ar _ hln	EMPTY
126	82	2	-1	0	-1	# define ar _ tha ( ap ) ( ( ( const u _ char * ) ( ( ap ) + numconst ) ) + ( ap ) -> ar _ hln + ( ap ) -> ar _ pln )	ar _ hln ar _ pln	EMPTY
126	83	2	-1	0	-1	# define ar _ tpa ( ap ) ( ( ( const u _ char * ) ( ( ap ) + numconst ) ) + numconst * ( ap ) -> ar _ hln + ( ap ) -> ar _ pln )	ar _ hln ar _ pln	EMPTY
126	84	3	-1	0	-1	} ;	EMPTY	EMPTY
126	86	1	0	0	-1	# define arp _ hdrlen numconst	EMPTY	EMPTY
126	88	1	0	0	-1	# define hrd ( ap ) extract _ 16bits ( & ( ap ) -> ar _ hrd )	extract _ 16bits ar _ hrd	EMPTY
126	89	2	-1	0	-1	# define hrd _ len ( ap ) ( ( ap ) -> ar _ hln )	ar _ hln	EMPTY
126	90	2	-1	0	-1	# define proto _ len ( ap ) ( ( ap ) -> ar _ pln )	ar _ pln	EMPTY
126	91	2	-1	0	-1	# define op ( ap ) extract _ 16bits ( & ( ap ) -> ar _ op )	extract _ 16bits ar _ op	EMPTY
126	92	2	-1	0	-1	# define pro ( ap ) extract _ 16bits ( & ( ap ) -> ar _ pro )	extract _ 16bits ar _ pro	EMPTY
126	93	2	-1	0	-1	# define sha ( ap ) ( ar _ sha ( ap ) )	EMPTY	EMPTY
126	94	2	-1	0	-1	# define spa ( ap ) ( ar _ spa ( ap ) )	EMPTY	EMPTY
126	95	2	-1	0	-1	# define tha ( ap ) ( ar _ tha ( ap ) )	EMPTY	EMPTY
126	96	3	-1	0	-1	# define tpa ( ap ) ( ar _ tpa ( ap ) )	EMPTY	EMPTY
126	99	1	0	0	-1	static const struct tok arpop _ values [ ] = {	EMPTY	EMPTY
126	100	2	-1	0	-1	{ arpop _ request  strlit }	EMPTY	EMPTY
126	101	2	-1	0	-1	{ arpop _ reply  strlit }	EMPTY	EMPTY
126	102	2	-1	0	-1	{ arpop _ revrequest  strlit }	EMPTY	EMPTY
126	103	2	-1	0	-1	{ arpop _ revreply  strlit }	EMPTY	EMPTY
126	104	2	-1	0	-1	{ arpop _ invrequest  strlit }	EMPTY	EMPTY
126	105	2	-1	0	-1	{ arpop _ invreply  strlit }	EMPTY	EMPTY
126	106	2	-1	0	-1	{ arpop _ nak  strlit }	EMPTY	EMPTY
126	107	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
126	108	3	-1	0	-1	} ;	EMPTY	EMPTY
126	110	1	0	0	-1	static const struct tok arphrd _ values [ ] = {	EMPTY	EMPTY
126	111	2	-1	0	-1	{ arphrd _ ether  strlit }	EMPTY	EMPTY
126	112	2	-1	0	-1	{ arphrd _ ieee802  strlit }	EMPTY	EMPTY
126	113	2	-1	0	-1	{ arphrd _ arcnet  strlit }	EMPTY	EMPTY
126	114	2	-1	0	-1	{ arphrd _ frelay  strlit }	EMPTY	EMPTY
126	115	2	-1	0	-1	{ arphrd _ strip  strlit }	EMPTY	EMPTY
126	116	2	-1	0	-1	{ arphrd _ ieee1394  strlit }	EMPTY	EMPTY
126	117	2	-1	0	-1	{ arphrd _ atm2225  strlit }	EMPTY	EMPTY
126	118	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
126	119	3	-1	0	-1	} ;	EMPTY	EMPTY
126	130	1	1	0	-1	struct atmarp _ pkthdr {	atmarp _ pkthdr	EMPTY
126	131	2	-1	1	-1	u _ short aar _ hrd ;	aar _ hrd	EMPTY
126	132	2	-1	1	-1	u _ short aar _ pro ;	aar _ pro	EMPTY
126	133	2	-1	1	-1	u _ char aar _ shtl ;	aar _ shtl	EMPTY
126	134	2	-1	1	-1	u _ char aar _ sstl ;	aar _ sstl	EMPTY
126	135	2	-1	1	-1	# define atmarp _ is _ e164 numconst	EMPTY	EMPTY
126	136	2	-1	1	-1	# define atmarp _ len _ mask numconst	EMPTY	EMPTY
126	137	2	-1	1	-1	u _ short aar _ op ;	aar _ op	EMPTY
126	138	2	-1	1	-1	u _ char aar _ spln ;	aar _ spln	EMPTY
126	139	2	-1	1	-1	u _ char aar _ thtl ;	aar _ thtl	EMPTY
126	140	2	-1	1	-1	u _ char aar _ tstl ;	aar _ tstl	EMPTY
126	141	2	-1	1	-1	u _ char aar _ tpln ;	aar _ tpln	EMPTY
126	146	2	-1	1	-1	# ifdef comment _ only	EMPTY	EMPTY
126	147	2	-1	1	-1	u _ char aar _ sha [ ] ;	EMPTY	EMPTY
126	148	2	-1	1	-1	u _ char aar _ ssa [ ] ;	EMPTY	EMPTY
126	149	2	-1	1	-1	u _ char aar _ spa [ ] ;	EMPTY	EMPTY
126	150	2	-1	1	-1	u _ char aar _ tha [ ] ;	EMPTY	EMPTY
126	151	2	-1	1	-1	u _ char aar _ tsa [ ] ;	EMPTY	EMPTY
126	152	2	-1	1	-1	u _ char aar _ tpa [ ] ;	EMPTY	EMPTY
126	153	3	-1	0	-1	# endif	EMPTY	EMPTY
126	155	1	0	0	-1	# define atmhrd ( ap ) extract _ 16bits ( & ( ap ) -> aar _ hrd )	extract _ 16bits aar _ hrd	EMPTY
126	156	2	-1	0	-1	# define atmshrd _ len ( ap ) ( ( ap ) -> aar _ shtl & atmarp _ len _ mask )	aar _ shtl	EMPTY
126	157	2	-1	0	-1	# define atmssln ( ap ) ( ( ap ) -> aar _ sstl & atmarp _ len _ mask )	aar _ sstl	EMPTY
126	158	2	-1	0	-1	# define atmsproto _ len ( ap ) ( ( ap ) -> aar _ spln )	aar _ spln	EMPTY
126	159	2	-1	0	-1	# define atmop ( ap ) extract _ 16bits ( & ( ap ) -> aar _ op )	extract _ 16bits aar _ op	EMPTY
126	160	2	-1	0	-1	# define atmpro ( ap ) extract _ 16bits ( & ( ap ) -> aar _ pro )	extract _ 16bits aar _ pro	EMPTY
126	161	2	-1	0	-1	# define atmthrd _ len ( ap ) ( ( ap ) -> aar _ thtl & atmarp _ len _ mask )	aar _ thtl	EMPTY
126	162	2	-1	0	-1	# define atmtsln ( ap ) ( ( ap ) -> aar _ tstl & atmarp _ len _ mask )	aar _ tstl	EMPTY
126	163	2	-1	0	-1	# define atmtproto _ len ( ap ) ( ( ap ) -> aar _ tpln )	aar _ tpln	EMPTY
126	164	2	-1	0	-1	# define aar _ sha ( ap ) ( ( const u _ char * ) ( ( ap ) + numconst ) )	EMPTY	EMPTY
126	165	2	-1	0	-1	# define aar _ ssa ( ap ) ( aar _ sha ( ap ) + atmshrd _ len ( ap ) )	EMPTY	EMPTY
126	166	2	-1	0	-1	# define aar _ spa ( ap ) ( aar _ ssa ( ap ) + atmssln ( ap ) )	EMPTY	EMPTY
126	167	2	-1	0	-1	# define aar _ tha ( ap ) ( aar _ spa ( ap ) + atmsproto _ len ( ap ) )	EMPTY	EMPTY
126	168	2	-1	0	-1	# define aar _ tsa ( ap ) ( aar _ tha ( ap ) + atmthrd _ len ( ap ) )	EMPTY	EMPTY
126	169	2	-1	0	-1	# define aar _ tpa ( ap ) ( aar _ tsa ( ap ) + atmtsln ( ap ) )	EMPTY	EMPTY
126	170	3	-1	0	-1	} ;	EMPTY	EMPTY
126	172	1	0	0	-1	# define atmsha ( ap ) ( aar _ sha ( ap ) )	EMPTY	EMPTY
126	173	2	-1	0	-1	# define atmssa ( ap ) ( aar _ ssa ( ap ) )	EMPTY	EMPTY
126	174	2	-1	0	-1	# define atmspa ( ap ) ( aar _ spa ( ap ) )	EMPTY	EMPTY
126	175	2	-1	0	-1	# define atmtha ( ap ) ( aar _ tha ( ap ) )	EMPTY	EMPTY
126	176	2	-1	0	-1	# define atmtsa ( ap ) ( aar _ tsa ( ap ) )	EMPTY	EMPTY
126	177	3	-1	0	-1	# define atmtpa ( ap ) ( aar _ tpa ( ap ) )	EMPTY	EMPTY
126	179	1	0	0	-1	static u _ char ezero [ numconst ] ;	EMPTY	EMPTY
126	181	1	0	0	-1	static void	EMPTY	EMPTY
126	182	2	-1	0	-1	atmarp _ addr _ print ( netdissect _ options * ndo	EMPTY	EMPTY
126	183	2	-1	0	-1	const u _ char * ha  u _ int ha _ len  const u _ char * srca	EMPTY	EMPTY
126	184	2	-1	0	-1	u _ int srca _ len )	EMPTY	EMPTY
126	185	2	-1	0	-1	{	EMPTY	EMPTY
126	186	2	-1	0	-1	if ( ha _ len == 0 )	EMPTY	EMPTY
126	187	2	-1	0	-1	nd _ print ( ( ndo ,  " <no address> "  ) ) ;	EMPTY	EMPTY
126	188	2	-1	0	-1	else {	EMPTY	EMPTY
126	189	2	-1	0	-1	nd _ print ( ( ndo ,  " %s "  , linkaddr _ string ( ndo , ha , linkaddr _ atm , ha _ len ) ) ) ;	EMPTY	EMPTY
126	190	2	-1	0	-1	if ( srca _ len != 0 )	EMPTY	EMPTY
126	191	2	-1	0	-1	nd _ print ( ( ndo ,  " ,%s "  ,	EMPTY	EMPTY
126	192	2	-1	0	-1	linkaddr _ string ( ndo , srca , linkaddr _ atm , srca _ len ) ) ) ;	EMPTY	EMPTY
126	193	2	-1	0	-1	}	EMPTY	EMPTY
126	194	3	-1	0	-1	}	EMPTY	EMPTY
126	196	1	0	0	-1	static void	EMPTY	EMPTY
126	197	2	-1	0	-1	atmarp _ print ( netdissect _ options * ndo	EMPTY	EMPTY
126	198	2	-1	0	-1	const u _ char * bp  u _ int length  u _ int caplen )	caplen	EMPTY
126	199	2	-1	0	-1	{	EMPTY	EMPTY
126	200	2	-1	0	-1	const struct atmarp _ pkthdr * ap ;	atmarp _ pkthdr	EMPTY
126	201	3	-1	0	-1	u _ short pro , hrd , op ;	EMPTY	EMPTY
126	203	1	0	0	-1	ap = ( const struct atmarp _ pkthdr * ) bp	atmarp _ pkthdr	EMPTY
126	204	3	-1	0	-1	nd _ tcheck ( * ap ) ;	EMPTY	EMPTY
126	206	1	0	0	-1	hrd = atmhrd ( ap ) ;	EMPTY	EMPTY
126	207	2	-1	0	-1	pro = atmpro ( ap ) ;	EMPTY	EMPTY
126	208	3	-1	0	-1	op = atmop ( ap ) ;	EMPTY	EMPTY
126	210	1	0	0	0	if ( ! nd _ ttest2 ( * aar _ tpa ( ap ) , atmtproto _ len ( ap ) ) ) {	EMPTY	EMPTY
126	211	2	-1	0	-1	nd _ print ( ( ndo ,  " %s "  , tstr ) ) ;	EMPTY	EMPTY
126	212	2	-1	0	-1	nd _ defaultprint ( ( const u _ char * ) ap , length ) ;	EMPTY	EMPTY
126	213	2	-1	0	-1	return ;	EMPTY	EMPTY
126	214	3	-1	0	-1	}	EMPTY	EMPTY
126	216	1	0	0	0	if ( ! ndo -> ndo _ eflag ) {	ndo _ eflag	EMPTY
126	217	2	-1	0	-1	nd _ print ( ( ndo ,  " arp,  "  ) ) ;	EMPTY	EMPTY
126	218	3	-1	0	-1	}	EMPTY	EMPTY
126	220	1	0	0	0	if ( ( pro != ethertype _ ip && pro != ethertype _ trail ) ||	EMPTY	EMPTY
126	221	2	-1	0	-1	atmsproto _ len ( ap ) != numconst ||	EMPTY	EMPTY
126	222	2	-1	0	-1	atmtproto _ len ( ap ) != numconst ||	EMPTY	EMPTY
126	223	2	-1	0	-1	ndo -> ndo _ vflag ) {	ndo _ vflag	EMPTY
126	224	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
126	225	2	-1	0	-1	tok2str ( arphrd _ values  strlit  hrd )	tok2str	EMPTY
126	226	2	-1	0	-1	tok2str ( ethertype _ values  strlit  pro )	tok2str	EMPTY
126	227	2	-1	0	-1	atmsproto _ len ( ap )	EMPTY	EMPTY
126	228	3	-1	0	-1	atmtproto _ len ( ap ) ) ) ;	EMPTY	EMPTY
126	231	1	1	1	1	if ( ! ndo -> ndo _ vflag ) {	ndo _ vflag	EMPTY
126	232	2	-1	0	-1	goto out ;	EMPTY	EMPTY
126	233	2	-1	0	-1	}	EMPTY	EMPTY
126	234	3	-1	0	-1	}	EMPTY	EMPTY
126	237	1	1	1	1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
126	238	2	-1	0	-1	ndo -> ndo _ vflag ? strlit : strlit	ndo _ vflag	EMPTY
126	239	3	-1	0	-1	tok2str ( arpop _ values  strlit  op ) ) ) ;	tok2str	EMPTY
126	241	1	0	0	0	switch ( op ) {	EMPTY	EMPTY
126	243	1	0	0	-1	case arpop _ request :	EMPTY	EMPTY
126	244	2	-1	0	-1	nd _ print ( ( ndo ,  " who-has %s "  , ipaddr _ string ( ndo , atmtpa ( ap ) ) ) ) ;	EMPTY	EMPTY
126	245	2	-1	0	-1	if ( atmthrd _ len ( ap ) != 0 ) {	EMPTY	EMPTY
126	246	2	-1	0	-1	nd _ print ( ( ndo ,  "  ( "  ) ) ;	EMPTY	EMPTY
126	247	2	-1	0	-1	atmarp _ addr _ print ( ndo , atmtha ( ap ) , atmthrd _ len ( ap ) ,	EMPTY	EMPTY
126	248	2	-1	0	-1	atmtsa ( ap ) , atmtsln ( ap ) ) ;	EMPTY	EMPTY
126	249	2	-1	0	-1	nd _ print ( ( ndo ,  " ) "  ) ) ;	EMPTY	EMPTY
126	250	2	-1	0	-1	}	EMPTY	EMPTY
126	251	2	-1	0	-1	nd _ print ( ( ndo ,  " tell %s "  , ipaddr _ string ( ndo , atmspa ( ap ) ) ) ) ;	EMPTY	EMPTY
126	252	3	-1	0	-1	break ;	EMPTY	EMPTY
126	254	1	0	0	-1	case arpop _ reply :	EMPTY	EMPTY
126	255	2	-1	0	-1	nd _ print ( ( ndo ,  " %s is-at  "  , ipaddr _ string ( ndo , atmspa ( ap ) ) ) ) ;	EMPTY	EMPTY
126	256	2	-1	0	-1	atmarp _ addr _ print ( ndo , atmsha ( ap ) , atmshrd _ len ( ap ) , atmssa ( ap ) ,	EMPTY	EMPTY
126	257	2	-1	0	-1	atmssln ( ap ) ) ;	EMPTY	EMPTY
126	258	3	-1	0	-1	break ;	EMPTY	EMPTY
126	260	1	0	0	-1	case arpop _ invrequest :	EMPTY	EMPTY
126	261	2	-1	0	-1	nd _ print ( ( ndo ,  " who-is  "  ) ) ;	EMPTY	EMPTY
126	262	2	-1	0	-1	atmarp _ addr _ print ( ndo , atmtha ( ap ) , atmthrd _ len ( ap ) , atmtsa ( ap ) ,	EMPTY	EMPTY
126	263	2	-1	0	-1	atmtsln ( ap ) ) ;	EMPTY	EMPTY
126	264	2	-1	0	-1	nd _ print ( ( ndo ,  "  tell  "  ) ) ;	EMPTY	EMPTY
126	265	2	-1	0	-1	atmarp _ addr _ print ( ndo , atmsha ( ap ) , atmshrd _ len ( ap ) , atmssa ( ap ) ,	EMPTY	EMPTY
126	266	2	-1	0	-1	atmssln ( ap ) ) ;	EMPTY	EMPTY
126	267	3	-1	0	-1	break ;	EMPTY	EMPTY
126	269	1	0	0	-1	case arpop _ invreply :	EMPTY	EMPTY
126	270	2	-1	0	-1	atmarp _ addr _ print ( ndo , atmsha ( ap ) , atmshrd _ len ( ap ) , atmssa ( ap ) ,	EMPTY	EMPTY
126	271	2	-1	0	-1	atmssln ( ap ) ) ;	EMPTY	EMPTY
126	272	2	-1	0	-1	nd _ print ( ( ndo ,  " at %s "  , ipaddr _ string ( ndo , atmspa ( ap ) ) ) ) ;	EMPTY	EMPTY
126	273	3	-1	0	-1	break ;	EMPTY	EMPTY
126	275	1	0	0	-1	case arpop _ nak :	EMPTY	EMPTY
126	276	2	-1	0	-1	nd _ print ( ( ndo ,  " for %s "  , ipaddr _ string ( ndo , atmspa ( ap ) ) ) ) ;	EMPTY	EMPTY
126	277	3	-1	0	-1	break ;	EMPTY	EMPTY
126	279	1	0	0	-1	default :	EMPTY	EMPTY
126	280	2	-1	0	-1	nd _ defaultprint ( ( const u _ char * ) ap , caplen ) ;	caplen	EMPTY
126	281	2	-1	0	-1	return ;	EMPTY	EMPTY
126	282	3	-1	0	-1	}	EMPTY	EMPTY
126	284	1	0	0	-1	out :	EMPTY	EMPTY
126	285	2	-1	0	-1	nd _ print ( ( ndo  strlit  length ) ) ;	EMPTY	EMPTY
126	286	3	-1	0	-1	return	EMPTY	EMPTY
126	288	1	0	0	-1	trunc :	EMPTY	EMPTY
126	289	2	-1	0	-1	nd _ print ( ( ndo  strlit  tstr ) ) ;	EMPTY	EMPTY
126	290	3	-1	0	-1	}	EMPTY	EMPTY
126	292	1	0	0	-1	void	EMPTY	EMPTY
126	293	2	-1	0	-1	arp _ print ( netdissect _ options * ndo	EMPTY	EMPTY
126	294	2	-1	0	-1	const u _ char * bp  u _ int length  u _ int caplen )	caplen	EMPTY
126	295	2	-1	0	-1	{	EMPTY	EMPTY
126	296	2	-1	0	-1	const struct arp _ pkthdr * ap ;	arp _ pkthdr	EMPTY
126	297	3	-1	0	-1	u _ short pro  hrd  op  linkaddr ;	EMPTY	EMPTY
126	299	1	0	0	-1	ap = ( const struct arp _ pkthdr * ) bp ;	arp _ pkthdr	EMPTY
126	300	3	-1	0	-1	nd _ tcheck ( * ap ) ;	EMPTY	EMPTY
126	302	1	0	0	-1	hrd = hrd ( ap ) ;	EMPTY	EMPTY
126	303	2	-1	0	-1	pro = pro ( ap ) ;	EMPTY	EMPTY
126	304	3	-1	0	-1	op = op ( ap ) ;	EMPTY	EMPTY
126	312	1	1	1	1	switch ( hrd ) {	EMPTY	EMPTY
126	313	2	-1	0	-1	case arphrd _ atm2225 :	EMPTY	EMPTY
126	314	2	-1	0	-1	atmarp _ print ( ndo , bp , length , caplen ) ;	caplen	EMPTY
126	315	2	-1	0	-1	return ;	EMPTY	EMPTY
126	316	2	-1	0	-1	case arphrd _ frelay :	EMPTY	EMPTY
126	317	2	-1	0	-1	linkaddr = linkaddr _ frelay ;	EMPTY	EMPTY
126	318	2	-1	0	-1	break ;	EMPTY	EMPTY
126	319	2	-1	0	-1	default :	EMPTY	EMPTY
126	320	2	-1	0	-1	linkaddr = linkaddr _ ether ;	EMPTY	EMPTY
126	321	2	-1	0	-1	break ;	EMPTY	EMPTY
126	322	3	-1	0	-1	}	EMPTY	EMPTY
126	324	1	0	0	0	if ( ! nd _ ttest2 ( * ar _ tpa ( ap ) , proto _ len ( ap ) ) ) {	EMPTY	EMPTY
126	325	2	-1	0	-1	nd _ print ( ( ndo ,  " %s "  , tstr ) ) ;	EMPTY	EMPTY
126	326	2	-1	0	-1	nd _ defaultprint ( ( const u _ char * ) ap , length ) ;	EMPTY	EMPTY
126	327	2	-1	0	-1	return ;	EMPTY	EMPTY
126	328	3	-1	0	-1	}	EMPTY	EMPTY
126	330	1	0	0	0	if ( ! ndo -> ndo _ eflag ) {	ndo _ eflag	EMPTY
126	331	2	-1	0	-1	nd _ print ( ( ndo ,  " arp,  "  ) ) ;	EMPTY	EMPTY
126	332	3	-1	0	-1	}	EMPTY	EMPTY
126	335	1	1	1	1	if ( ( pro != ethertype _ ip && pro != ethertype _ trail ) ||	EMPTY	EMPTY
126	336	2	-1	0	-1	proto _ len ( ap ) != numconst ||	EMPTY	EMPTY
126	337	2	-1	0	-1	hrd _ len ( ap ) == numconst ||	EMPTY	EMPTY
126	338	2	-1	0	-1	ndo -> ndo _ vflag ) {	ndo _ vflag	EMPTY
126	339	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
126	340	2	-1	0	-1	tok2str ( arphrd _ values  strlit  hrd )	tok2str	EMPTY
126	341	2	-1	0	-1	hrd _ len ( ap )	EMPTY	EMPTY
126	342	2	-1	0	-1	tok2str ( ethertype _ values  strlit  pro )	tok2str	EMPTY
126	343	3	-1	0	-1	proto _ len ( ap ) ) ) ;	EMPTY	EMPTY
126	346	1	1	1	1	if ( ! ndo -> ndo _ vflag ) {	ndo _ vflag	EMPTY
126	347	2	-1	0	-1	goto out ;	EMPTY	EMPTY
126	348	2	-1	0	-1	}	EMPTY	EMPTY
126	349	3	-1	0	-1	}	EMPTY	EMPTY
126	352	1	1	1	1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
126	353	2	-1	0	-1	ndo -> ndo _ vflag ? strlit : strlit	ndo _ vflag	EMPTY
126	354	3	-1	0	-1	tok2str ( arpop _ values  strlit  op ) ) ) ;	tok2str	EMPTY
126	356	1	0	0	0	switch ( op ) {	EMPTY	EMPTY
126	358	1	0	0	-1	case arpop _ request :	EMPTY	EMPTY
126	359	2	-1	0	-1	nd _ print ( ( ndo ,  " who-has %s "  , ipaddr _ string ( ndo , tpa ( ap ) ) ) ) ;	EMPTY	EMPTY
126	360	2	-1	0	-1	if ( memcmp ( ( const char * ) ezero , ( const char * ) tha ( ap ) , hrd _ len ( ap ) ) != 0 )	EMPTY	memcmp
126	361	2	-1	0	-1	nd _ print ( ( ndo ,  "  (%s) "  ,	EMPTY	EMPTY
126	362	2	-1	0	-1	linkaddr _ string ( ndo , tha ( ap ) , linkaddr , hrd _ len ( ap ) ) ) ) ;	EMPTY	EMPTY
126	363	2	-1	0	-1	nd _ print ( ( ndo ,  "  tell %s "  , ipaddr _ string ( ndo , spa ( ap ) ) ) ) ;	EMPTY	EMPTY
126	364	3	-1	0	-1	break ;	EMPTY	EMPTY
126	366	1	0	0	-1	case arpop _ reply :	EMPTY	EMPTY
126	367	2	-1	0	-1	nd _ print ( ( ndo ,  " %s is-at %s "  ,	EMPTY	EMPTY
126	368	2	-1	0	-1	ipaddr _ string ( ndo , spa ( ap ) ) ,	EMPTY	EMPTY
126	369	2	-1	0	-1	linkaddr _ string ( ndo , sha ( ap ) , linkaddr , hrd _ len ( ap ) ) ) ) ;	EMPTY	EMPTY
126	370	3	-1	0	-1	break ;	EMPTY	EMPTY
126	372	1	0	0	-1	case arpop _ revrequest :	EMPTY	EMPTY
126	373	2	-1	0	-1	nd _ print ( ( ndo ,  " who-is %s tell %s "  ,	EMPTY	EMPTY
126	374	2	-1	0	-1	linkaddr _ string ( ndo , tha ( ap ) , linkaddr , hrd _ len ( ap ) ) ,	EMPTY	EMPTY
126	375	2	-1	0	-1	linkaddr _ string ( ndo , sha ( ap ) , linkaddr , hrd _ len ( ap ) ) ) ) ;	EMPTY	EMPTY
126	376	3	-1	0	-1	break ;	EMPTY	EMPTY
126	378	1	0	0	-1	case arpop _ revreply :	EMPTY	EMPTY
126	379	2	-1	0	-1	nd _ print ( ( ndo ,  " %s at %s "  ,	EMPTY	EMPTY
126	380	2	-1	0	-1	linkaddr _ string ( ndo , tha ( ap ) , linkaddr , hrd _ len ( ap ) ) ,	EMPTY	EMPTY
126	381	2	-1	0	-1	ipaddr _ string ( ndo , tpa ( ap ) ) ) ) ;	EMPTY	EMPTY
126	382	3	-1	0	-1	break ;	EMPTY	EMPTY
126	384	1	0	0	-1	case arpop _ invrequest :	EMPTY	EMPTY
126	385	2	-1	0	-1	nd _ print ( ( ndo ,  " who-is %s tell %s "  ,	EMPTY	EMPTY
126	386	2	-1	0	-1	linkaddr _ string ( ndo , tha ( ap ) , linkaddr , hrd _ len ( ap ) ) ,	EMPTY	EMPTY
126	387	2	-1	0	-1	linkaddr _ string ( ndo , sha ( ap ) , linkaddr , hrd _ len ( ap ) ) ) ) ;	EMPTY	EMPTY
126	388	3	-1	0	-1	break ;	EMPTY	EMPTY
126	390	1	0	0	-1	case arpop _ invreply :	EMPTY	EMPTY
126	391	2	-1	0	-1	nd _ print ( ( ndo ,  " %s at %s "  ,	EMPTY	EMPTY
126	392	2	-1	0	-1	linkaddr _ string ( ndo , sha ( ap ) , linkaddr , hrd _ len ( ap ) ) ,	EMPTY	EMPTY
126	393	2	-1	0	-1	ipaddr _ string ( ndo , spa ( ap ) ) ) ) ;	EMPTY	EMPTY
126	394	3	-1	0	-1	break ;	EMPTY	EMPTY
126	396	1	0	0	-1	default :	EMPTY	EMPTY
126	397	2	-1	0	-1	nd _ defaultprint ( ( const u _ char * ) ap , caplen ) ;	caplen	EMPTY
126	398	2	-1	0	-1	return ;	EMPTY	EMPTY
126	399	3	-1	0	-1	}	EMPTY	EMPTY
126	401	1	0	0	-1	out :	EMPTY	EMPTY
126	402	3	-1	0	-1	nd _ print ( ( ndo  strlit  length ) ) ;	EMPTY	EMPTY
126	404	1	0	0	0	return	EMPTY	EMPTY
126	405	2	-1	0	-1	trunc :	EMPTY	EMPTY
126	406	2	-1	0	-1	nd _ print ( ( ndo  strlit  tstr ) ) ;	EMPTY	EMPTY
126	407	3	-1	0	-1	}	EMPTY	EMPTY
131	68	1	1	0	-1	retsigtype	EMPTY	EMPTY
131	69	2	-1	0	-1	( * setsignal ( int sig  retsigtype ( * func ) ( int ) ) ) ( int )	setsignal	EMPTY
131	70	2	-1	0	-1	{	EMPTY	EMPTY
131	71	2	-1	0	-1	# ifdef have _ sigaction	EMPTY	EMPTY
131	72	3	-1	1	-1	struct sigaction old , new ;	EMPTY	sigaction
131	74	1	0	0	0	memset ( & new , 0 , sizeof ( new ) )	EMPTY	memset
131	75	2	-1	0	-1	new . sa _ handler = func	EMPTY	EMPTY
131	76	2	-1	0	-1	if ( sig == sigchld )	EMPTY	EMPTY
131	77	2	-1	0	-1	new . sa _ flags = sa _ restart ;	EMPTY	EMPTY
131	78	2	-1	0	-1	if ( sigaction ( sig , & new , & old ) < 0 )	EMPTY	sigaction
131	79	2	-1	0	-1	return ( sig _ err )	EMPTY	EMPTY
131	80	3	-1	0	-1	return ( old . sa _ handler )	EMPTY	EMPTY
131	82	1	0	0	-1	# else	EMPTY	EMPTY
131	83	2	-1	0	-1	# ifdef have _ sigset	EMPTY	EMPTY
131	84	2	-1	0	-1	return ( sigset ( sig  func ) ) ;	EMPTY	EMPTY
131	85	2	-1	0	-1	# else	EMPTY	EMPTY
131	86	2	-1	0	-1	return ( signal ( sig  func ) ) ;	EMPTY	EMPTY
131	87	2	-1	0	-1	# endif	EMPTY	EMPTY
131	88	2	-1	0	-1	# endif	EMPTY	EMPTY
131	89	3	-1	0	-1	}	EMPTY	EMPTY
139	54	1	0	0	-1	static inline void	EMPTY	EMPTY
139	55	2	-1	0	-1	null _ hdr _ print ( netdissect _ options * ndo  u _ int family  u _ int length )	EMPTY	EMPTY
139	56	2	-1	0	-1	{	EMPTY	EMPTY
139	57	2	-1	0	-1	if ( ! ndo -> ndo _ qflag ) {	ndo _ qflag	EMPTY
139	58	2	-1	0	-1	nd _ print ( ( ndo ,  " af %s (%u) "  ,	EMPTY	EMPTY
139	59	2	-1	0	-1	tok2str ( bsd _ af _ values ,  " unknown "  , family ) , family ) ) ;	tok2str	EMPTY
139	60	2	-1	0	-1	} else {	EMPTY	EMPTY
139	61	2	-1	0	-1	nd _ print ( ( ndo ,  " %s "  ,	EMPTY	EMPTY
139	62	2	-1	0	-1	tok2str ( bsd _ af _ values ,  " unknown af %u "  , family ) ) ) ;	tok2str	EMPTY
139	63	3	-1	0	-1	}	EMPTY	EMPTY
139	65	1	0	0	0	nd _ print ( ( ndo  strlit  length ) ) ;	EMPTY	EMPTY
139	66	3	-1	0	-1	}	EMPTY	EMPTY
139	74	1	0	0	-1	u _ int	EMPTY	EMPTY
139	75	2	-1	0	-1	null _ if _ print ( netdissect _ options * ndo  const struct pcap _ pkthdr * h  const u _ char * p )	null _ if _ print pcap _ pkthdr	EMPTY
139	76	2	-1	0	-1	{	EMPTY	EMPTY
139	77	2	-1	0	-1	u _ int length = h -> len ;	len	EMPTY
139	78	2	-1	0	-1	u _ int caplen = h -> caplen ;	caplen caplen	EMPTY
139	79	3	-1	0	-1	u _ int family ;	EMPTY	EMPTY
139	81	1	0	0	0	if ( caplen < null _ hdrlen ) {	caplen	EMPTY
139	82	2	-1	0	-1	nd _ print ( ( ndo ,  " [|null] "  ) ) ;	EMPTY	EMPTY
139	83	2	-1	0	-1	return ( null _ hdrlen ) ;	EMPTY	EMPTY
139	84	3	-1	0	-1	}	EMPTY	EMPTY
139	86	1	0	0	0	memcpy ( ( char * ) & family , ( char * ) p , sizeof ( family ) )	EMPTY	memcpy
139	96	1	0	0	-1	if ( ( family & numconst ) != numconst )	EMPTY	EMPTY
139	97	3	-1	0	-1	family = swaplong ( family ) ;	EMPTY	EMPTY
139	99	1	0	0	0	if ( ndo -> ndo _ eflag )	ndo _ eflag	EMPTY
139	100	3	-1	0	-1	null _ hdr _ print ( ndo , family , length )	EMPTY	EMPTY
139	102	1	0	0	-1	length -= null _ hdrlen ;	EMPTY	EMPTY
139	103	2	-1	0	-1	caplen -= null _ hdrlen ;	caplen	EMPTY
139	104	3	-1	0	-1	p += null _ hdrlen ;	EMPTY	EMPTY
139	106	1	0	0	0	switch ( family ) {	EMPTY	EMPTY
139	108	1	0	0	-1	case bsd _ afnum _ inet :	EMPTY	EMPTY
139	109	2	-1	0	-1	ip _ print ( ndo , p , length )	EMPTY	EMPTY
139	110	3	-1	0	-1	break	EMPTY	EMPTY
139	112	1	0	0	-1	case bsd _ afnum _ inet6 _ bsd :	EMPTY	EMPTY
139	113	2	-1	0	-1	case bsd _ afnum _ inet6 _ freebsd :	EMPTY	EMPTY
139	114	2	-1	0	-1	case bsd _ afnum _ inet6 _ darwin :	EMPTY	EMPTY
139	115	2	-1	0	-1	ip6 _ print ( ndo , p , length )	EMPTY	EMPTY
139	116	3	-1	0	-1	break	EMPTY	EMPTY
139	118	1	0	0	-1	case bsd _ afnum _ iso :	EMPTY	EMPTY
139	119	2	-1	0	-1	isoclns _ print ( ndo , p , length , caplen )	caplen	EMPTY
139	120	3	-1	0	-1	break	EMPTY	EMPTY
139	122	1	0	0	-1	case bsd _ afnum _ appletalk :	EMPTY	EMPTY
139	123	2	-1	0	-1	atalk _ print ( ndo , p , length )	EMPTY	EMPTY
139	124	3	-1	0	-1	break	EMPTY	EMPTY
139	126	1	0	0	-1	case bsd _ afnum _ ipx :	EMPTY	EMPTY
139	127	2	-1	0	-1	ipx _ print ( ndo , p , length )	EMPTY	EMPTY
139	128	3	-1	0	-1	break	EMPTY	EMPTY
139	130	1	1	0	-1	default :	EMPTY	EMPTY
139	132	2	-1	1	-1	if ( ! ndo -> ndo _ eflag )	ndo _ eflag	EMPTY
139	133	2	-1	0	-1	null _ hdr _ print ( ndo  family  length + null _ hdrlen ) ;	EMPTY	EMPTY
139	134	2	-1	0	-1	if ( ! ndo -> ndo _ suppress _ default _ print )	ndo _ suppress _ default _ print	EMPTY
139	135	2	-1	0	-1	nd _ defaultprint ( p  caplen ) ;	caplen	EMPTY
139	136	3	-1	0	-1	}	EMPTY	EMPTY
139	138	1	0	0	0	return ( null _ hdrlen ) ;	EMPTY	EMPTY
139	139	3	-1	0	-1	}	EMPTY	EMPTY
141	43	1	0	0	-1	int	EMPTY	EMPTY
141	44	2	-1	0	-1	nextproto6 _ cksum ( const struct ip6 _ hdr * ip6  const uint8 _ t * data	nextproto6 _ cksum	EMPTY
141	45	2	-1	0	-1	u _ int len  u _ int covlen  u _ int next _ proto )	len	EMPTY
141	46	2	-1	0	-1	{	EMPTY	EMPTY
141	47	2	-1	0	-1	struct {	EMPTY	EMPTY
141	48	2	-1	0	-1	struct in6 _ addr ph _ src ;	EMPTY	EMPTY
141	49	2	-1	0	-1	struct in6 _ addr ph _ dst ;	EMPTY	EMPTY
141	50	2	-1	0	-1	uint32 _ t ph _ len ;	EMPTY	EMPTY
141	51	2	-1	0	-1	uint8 _ t ph _ zero [ 3 ] ;	EMPTY	EMPTY
141	52	2	-1	0	-1	uint8 _ t ph _ nxt ;	EMPTY	EMPTY
141	53	2	-1	0	-1	} ph ;	EMPTY	EMPTY
141	54	3	-1	0	-1	struct cksum _ vec vec [ 2 ] ;	EMPTY	EMPTY
141	57	1	1	1	1	memset ( & ph , 0 , sizeof ( ph ) )	EMPTY	memset
141	58	2	-1	0	-1	unaligned _ memcpy ( & ph . ph _ src  & ip6 -> ip6 _ src  sizeof ( struct in6 _ addr ) ) ;	ip6 _ src	EMPTY
141	59	2	-1	0	-1	unaligned _ memcpy ( & ph . ph _ dst  & ip6 -> ip6 _ dst  sizeof ( struct in6 _ addr ) ) ;	ip6 _ dst	EMPTY
141	60	2	-1	0	-1	ph . ph _ len = htonl ( len ) ;	len	EMPTY
141	61	3	-1	0	-1	ph . ph _ nxt = next _ proto	EMPTY	EMPTY
141	63	1	0	0	-1	vec [ 0 ] . ptr = ( const uint8 _ t * ) ( void * ) & ph	EMPTY	EMPTY
141	64	2	-1	0	-1	vec [ 0 ] . len = sizeof ( ph )	len	EMPTY
141	65	2	-1	0	-1	vec [ 1 ] . ptr = data	EMPTY	EMPTY
141	66	3	-1	0	-1	vec [ 1 ] . len = covlen	len	EMPTY
141	68	1	0	0	0	return in _ cksum ( vec , 2 )	EMPTY	EMPTY
141	69	3	-1	0	-1	}	EMPTY	EMPTY
141	74	1	0	0	-1	void	EMPTY	EMPTY
141	75	2	-1	0	-1	ip6 _ print ( netdissect _ options * ndo  const u _ char * bp  u _ int length )	ip6 _ print	EMPTY
141	76	2	-1	0	-1	{	EMPTY	EMPTY
141	77	2	-1	0	-1	register const struct ip6 _ hdr * ip6 ;	EMPTY	EMPTY
141	78	2	-1	0	-1	register int advance ;	EMPTY	EMPTY
141	79	2	-1	0	-1	u _ int len ;	len	EMPTY
141	80	2	-1	0	-1	const u _ char * ipend ;	EMPTY	EMPTY
141	81	2	-1	0	-1	register const u _ char * cp ;	EMPTY	EMPTY
141	82	2	-1	0	-1	register u _ int payload _ len ;	EMPTY	EMPTY
141	83	2	-1	0	-1	int nh ;	EMPTY	EMPTY
141	84	2	-1	0	-1	int fragmented = 0 ;	EMPTY	EMPTY
141	85	3	-1	0	-1	u _ int flow ;	EMPTY	EMPTY
141	87	1	0	0	-1	ip6 = ( const struct ip6 _ hdr * ) bp	EMPTY	EMPTY
141	89	1	0	0	-1	nd _ tcheck ( * ip6 ) ;	EMPTY	EMPTY
141	90	2	-1	0	-1	if ( length < sizeof ( struct ip6 _ hdr ) ) {	EMPTY	EMPTY
141	91	2	-1	0	-1	nd _ print ( ( ndo ,  " truncated-ip6 %u "  , length ) ) ;	EMPTY	EMPTY
141	92	2	-1	0	-1	return ;	EMPTY	EMPTY
141	93	3	-1	0	-1	}	EMPTY	EMPTY
141	95	1	0	0	0	if ( ! ndo -> ndo _ eflag )	ndo _ eflag	EMPTY
141	96	3	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
141	98	1	0	0	0	if ( ip6 _ version ( ip6 ) != 6 ) {	EMPTY	EMPTY
141	99	2	-1	0	-1	nd _ print ( ( ndo ,  " version error: %u != 6 "  , ip6 _ version ( ip6 ) ) ) ;	EMPTY	EMPTY
141	100	2	-1	0	-1	return ;	EMPTY	EMPTY
141	101	3	-1	0	-1	}	EMPTY	EMPTY
141	103	1	0	0	-1	payload _ len = extract _ 16bits ( & ip6 -> ip6 _ plen )	extract _ 16bits	EMPTY
141	104	2	-1	0	-1	len = payload _ len + sizeof ( struct ip6 _ hdr )	len	EMPTY
141	105	2	-1	0	-1	if ( length < len )	len	EMPTY
141	106	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
141	107	3	-1	0	-1	len - length ) ) ;	len	EMPTY
141	109	1	1	0	1	if ( ndo -> ndo _ vflag ) {	ndo _ vflag	EMPTY
141	110	2	-1	0	-1	flow = extract _ 32bits ( & ip6 -> ip6 _ flow )	EMPTY	EMPTY
141	111	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
141	112	2	-1	0	-1	# if numconst	EMPTY	EMPTY
141	114	2	-1	1	-1	if ( flow & numconst )	EMPTY	EMPTY
141	115	2	-1	0	-1	nd _ print ( ( ndo  strlit  ( flow & numconst ) >> numconst ) ) ;	EMPTY	EMPTY
141	116	2	-1	0	-1	if ( flow & numconst )	EMPTY	EMPTY
141	117	2	-1	0	-1	nd _ print ( ( ndo  strlit  flow & numconst ) ) ;	EMPTY	EMPTY
141	118	2	-1	0	-1	# else	EMPTY	EMPTY
141	120	2	-1	1	-1	if ( flow & numconst )	EMPTY	EMPTY
141	121	2	-1	0	-1	nd _ print ( ( ndo  strlit  ( flow & numconst ) >> numconst ) ) ;	EMPTY	EMPTY
141	122	2	-1	0	-1	if ( flow & numconst )	EMPTY	EMPTY
141	123	2	-1	0	-1	nd _ print ( ( ndo  strlit  flow & numconst ) ) ;	EMPTY	EMPTY
141	124	3	-1	0	-1	# endif	EMPTY	EMPTY
141	126	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
141	127	2	-1	0	-1	ip6 -> ip6 _ hlim	EMPTY	EMPTY
141	128	2	-1	0	-1	tok2str ( ipproto _ values  strlit  ip6 -> ip6 _ nxt )	tok2str	EMPTY
141	129	2	-1	0	-1	ip6 -> ip6 _ nxt	EMPTY	EMPTY
141	130	2	-1	0	-1	payload _ len ) ) ;	EMPTY	EMPTY
141	131	3	-1	0	-1	}	EMPTY	EMPTY
141	136	1	1	1	-1	ipend = bp + len	len	EMPTY
141	137	2	-1	0	-1	if ( ipend < ndo -> ndo _ snapend )	EMPTY	EMPTY
141	138	3	-1	0	-1	ndo -> ndo _ snapend = ipend	EMPTY	EMPTY
141	140	1	0	0	-1	cp = ( const u _ char * ) ip6	EMPTY	EMPTY
141	141	2	-1	0	-1	advance = sizeof ( struct ip6 _ hdr )	EMPTY	EMPTY
141	142	2	-1	0	-1	nh = ip6 -> ip6 _ nxt ;	EMPTY	EMPTY
141	143	2	-1	0	-1	while ( cp < ndo -> ndo _ snapend && advance > numconst ) {	EMPTY	EMPTY
141	144	2	-1	0	-1	cp += advance	EMPTY	EMPTY
141	145	3	-1	0	-1	len -= advance	len	EMPTY
141	147	1	0	0	0	if ( cp == ( const u _ char * ) ( ip6 + 1 ) &&	EMPTY	EMPTY
141	148	2	-1	0	-1	nh != ipproto _ tcp && nh != ipproto _ udp &&	EMPTY	ipproto _ tcp ipproto _ udp
141	149	2	-1	0	-1	nh != ipproto _ dccp && nh != ipproto _ sctp ) {	EMPTY	ipproto _ dccp ipproto _ sctp
141	150	2	-1	0	-1	nd _ print ( ( ndo ,  " %s > %s:  "  , ip6addr _ string ( ndo , & ip6 -> ip6 _ src ) ,	ip6 _ src	EMPTY
141	151	2	-1	0	-1	ip6addr _ string ( ndo , & ip6 -> ip6 _ dst ) ) ) ;	ip6 _ dst	EMPTY
141	152	3	-1	0	-1	}	EMPTY	EMPTY
141	154	1	0	0	0	switch ( nh ) {	EMPTY	EMPTY
141	155	2	-1	0	-1	case ipproto _ hopopts :	EMPTY	EMPTY
141	156	2	-1	0	-1	advance = hbhopt _ print ( ndo , cp )	EMPTY	EMPTY
141	157	2	-1	0	-1	nh = * cp	EMPTY	EMPTY
141	158	2	-1	0	-1	break	EMPTY	EMPTY
141	159	2	-1	0	-1	case ipproto _ dstopts :	EMPTY	EMPTY
141	160	2	-1	0	-1	advance = dstopt _ print ( ndo , cp )	EMPTY	EMPTY
141	161	2	-1	0	-1	nh = * cp	EMPTY	EMPTY
141	162	2	-1	0	-1	break	EMPTY	EMPTY
141	163	2	-1	0	-1	case ipproto _ fragment :	EMPTY	EMPTY
141	164	2	-1	0	-1	advance = frag6 _ print ( ndo , cp , ( const u _ char * ) ip6 )	EMPTY	EMPTY
141	165	2	-1	0	-1	if ( ndo -> ndo _ snapend <= cp + advance )	EMPTY	EMPTY
141	166	2	-1	0	-1	return	EMPTY	EMPTY
141	167	2	-1	0	-1	nh = * cp	EMPTY	EMPTY
141	168	2	-1	0	-1	fragmented = 1	EMPTY	EMPTY
141	169	3	-1	0	-1	break	EMPTY	EMPTY
141	171	1	1	0	-1	case ipproto _ mobility _ old :	EMPTY	EMPTY
141	172	2	-1	0	-1	case ipproto _ mobility :	EMPTY	EMPTY
141	183	2	-1	1	-1	advance = mobility _ print ( ndo  cp  ( const u _ char * ) ip6 ) ;	EMPTY	EMPTY
141	184	2	-1	0	-1	nh = * cp	EMPTY	EMPTY
141	185	2	-1	0	-1	return	EMPTY	EMPTY
141	186	2	-1	0	-1	case ipproto _ routing :	EMPTY	EMPTY
141	187	2	-1	0	-1	advance = rt6 _ print ( ndo , cp , ( const u _ char * ) ip6 )	EMPTY	EMPTY
141	188	2	-1	0	-1	nh = * cp	EMPTY	EMPTY
141	189	2	-1	0	-1	break	EMPTY	EMPTY
141	190	2	-1	0	-1	case ipproto _ sctp :	EMPTY	ipproto _ sctp
141	191	2	-1	0	-1	sctp _ print ( ndo , cp , ( const u _ char * ) ip6 , len )	len	EMPTY
141	192	2	-1	0	-1	return	EMPTY	EMPTY
141	193	2	-1	0	-1	case ipproto _ dccp :	EMPTY	ipproto _ dccp
141	194	2	-1	0	-1	dccp _ print ( ndo , cp , ( const u _ char * ) ip6 , len )	len	EMPTY
141	195	2	-1	0	-1	return	EMPTY	EMPTY
141	196	2	-1	0	-1	case ipproto _ tcp :	EMPTY	ipproto _ tcp
141	197	2	-1	0	-1	tcp _ print ( ndo , cp , len , ( const u _ char * ) ip6 , fragmented )	len	EMPTY
141	198	2	-1	0	-1	return	EMPTY	EMPTY
141	199	2	-1	0	-1	case ipproto _ udp :	EMPTY	ipproto _ udp
141	200	2	-1	0	-1	udp _ print ( ndo , cp , len , ( const u _ char * ) ip6 , fragmented )	len	EMPTY
141	201	2	-1	0	-1	return	EMPTY	EMPTY
141	202	2	-1	0	-1	case ipproto _ icmpv6 :	EMPTY	EMPTY
141	203	2	-1	0	-1	icmp6 _ print ( ndo , cp , len , ( const u _ char * ) ip6 , fragmented )	len	EMPTY
141	204	2	-1	0	-1	return	EMPTY	EMPTY
141	205	2	-1	0	-1	case ipproto _ ah :	EMPTY	ipproto _ ah
141	206	2	-1	0	-1	advance = ah _ print ( ndo , cp )	EMPTY	EMPTY
141	207	2	-1	0	-1	nh = * cp	EMPTY	EMPTY
141	208	2	-1	0	-1	break	EMPTY	EMPTY
141	209	2	-1	0	-1	case ipproto _ esp :	EMPTY	ipproto _ esp
141	210	3	-1	0	-1	{	EMPTY	EMPTY
141	211	1	0	0	-1	int enh , padlen ;	EMPTY	EMPTY
141	212	2	-1	0	-1	advance = esp _ print ( ndo , cp , len , ( const u _ char * ) ip6 , & enh , & padlen ) ;	len	EMPTY
141	213	2	-1	0	-1	nh = enh & 0xff ;	EMPTY	EMPTY
141	214	2	-1	0	-1	len -= padlen ;	len	EMPTY
141	215	2	-1	0	-1	break ;	EMPTY	EMPTY
141	216	2	-1	0	-1	}	EMPTY	EMPTY
141	217	2	-1	0	-1	case ipproto _ ipcomp :	EMPTY	EMPTY
141	218	2	-1	0	-1	{	EMPTY	EMPTY
141	219	2	-1	0	-1	int enh ;	EMPTY	EMPTY
141	220	2	-1	0	-1	advance = ipcomp _ print ( ndo , cp , & enh ) ;	EMPTY	EMPTY
141	221	2	-1	0	-1	nh = enh & 0xff ;	EMPTY	EMPTY
141	222	2	-1	0	-1	break ;	EMPTY	EMPTY
141	223	3	-1	0	-1	}	EMPTY	EMPTY
141	225	1	0	0	-1	case ipproto _ pim :	EMPTY	ipproto _ pim
141	226	2	-1	0	-1	pim _ print ( ndo , cp , len , nextproto6 _ cksum ( ip6 , cp , len , len ,	len nextproto6 _ cksum len len	EMPTY
141	227	2	-1	0	-1	ipproto _ pim ) )	EMPTY	ipproto _ pim
141	228	3	-1	0	-1	return	EMPTY	EMPTY
141	230	1	0	0	-1	case ipproto _ ospf :	EMPTY	EMPTY
141	231	2	-1	0	-1	ospf6 _ print ( ndo , cp , len )	len	EMPTY
141	232	3	-1	0	-1	return	EMPTY	EMPTY
141	234	1	0	0	-1	case ipproto _ ipv6 :	EMPTY	ipproto _ ipv6
141	235	2	-1	0	-1	ip6 _ print ( ndo , cp , len )	ip6 _ print len	EMPTY
141	236	3	-1	0	-1	return	EMPTY	EMPTY
141	238	1	0	0	-1	case ipproto _ ipv4 :	EMPTY	EMPTY
141	239	2	-1	0	-1	ip _ print ( ndo , cp , len )	len	EMPTY
141	240	3	-1	0	-1	return	EMPTY	EMPTY
141	242	1	0	0	-1	case ipproto _ pgm :	EMPTY	EMPTY
141	243	2	-1	0	-1	pgm _ print ( ndo , cp , len , ( const u _ char * ) ip6 )	len	EMPTY
141	244	3	-1	0	-1	return	EMPTY	EMPTY
141	246	1	0	0	-1	case ipproto _ gre :	EMPTY	ipproto _ gre
141	247	2	-1	0	-1	gre _ print ( ndo , cp , len )	len	EMPTY
141	248	3	-1	0	-1	return	EMPTY	EMPTY
141	250	1	0	0	-1	case ipproto _ rsvp :	EMPTY	ipproto _ rsvp
141	251	2	-1	0	-1	rsvp _ print ( ndo , cp , len )	len	EMPTY
141	252	3	-1	0	-1	return	EMPTY	EMPTY
141	254	1	0	0	-1	case ipproto _ none :	EMPTY	EMPTY
141	255	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
141	256	3	-1	0	-1	return	EMPTY	EMPTY
141	258	1	0	0	-1	default :	EMPTY	EMPTY
141	259	2	-1	0	-1	nd _ print ( ( ndo  strlit  nh  len ) ) ;	len	EMPTY
141	260	2	-1	0	-1	return	EMPTY	EMPTY
141	261	2	-1	0	-1	}	EMPTY	EMPTY
141	262	3	-1	0	-1	}	EMPTY	EMPTY
141	264	1	0	0	0	return ;	EMPTY	EMPTY
141	265	2	-1	0	-1	trunc :	EMPTY	EMPTY
141	266	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
141	267	3	-1	0	-1	}	EMPTY	EMPTY
141	269	1	1	1	-1	# else	EMPTY	EMPTY
141	271	1	0	0	-1	void	EMPTY	EMPTY
141	272	2	-1	0	-1	ip6 _ print ( netdissect _ options * ndo  const u _ char * bp  _ u _   u _ int length )	ip6 _ print	EMPTY
141	273	2	-1	0	-1	{	EMPTY	EMPTY
141	274	2	-1	0	-1	nd _ print ( ( ndo  strlit  length ) ) ;	EMPTY	EMPTY
141	275	3	-1	0	-1	}	EMPTY	EMPTY
141	277	1	1	1	-1	# endif	EMPTY	EMPTY
151	44	1	0	0	-1	static void	EMPTY	EMPTY
151	45	2	-1	0	-1	ip6 _ sopt _ print ( netdissect _ options * ndo  const u _ char * bp  int len )	len	EMPTY
151	46	2	-1	0	-1	{	EMPTY	EMPTY
151	47	2	-1	0	-1	int i ;	EMPTY	EMPTY
151	48	3	-1	0	-1	int optlen ;	EMPTY	EMPTY
151	50	1	0	0	0	for ( i = 0 ; i < len ; i += optlen ) {	len	EMPTY
151	51	2	-1	0	-1	if ( bp [ i ] == ip6opt _ pad1 )	EMPTY	EMPTY
151	52	2	-1	0	-1	optlen = 1 ;	EMPTY	EMPTY
151	53	2	-1	0	-1	else {	EMPTY	EMPTY
151	54	2	-1	0	-1	if ( i + 1 < len )	len	EMPTY
151	55	2	-1	0	-1	optlen = bp [ i + 1 ] + 2 ;	EMPTY	EMPTY
151	56	2	-1	0	-1	else	EMPTY	EMPTY
151	57	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
151	58	2	-1	0	-1	}	EMPTY	EMPTY
151	59	2	-1	0	-1	if ( i + optlen > len )	len	EMPTY
151	60	3	-1	0	-1	goto trunc ;	EMPTY	EMPTY
151	62	1	0	0	0	switch ( bp [ i ] ) {	EMPTY	EMPTY
151	63	2	-1	0	-1	case ip6opt _ pad1 :	EMPTY	EMPTY
151	64	2	-1	0	-1	nd _ print ( ( ndo ,  " , pad1 "  ) ) ;	EMPTY	EMPTY
151	65	2	-1	0	-1	break ;	EMPTY	EMPTY
151	66	2	-1	0	-1	case ip6opt _ padn :	EMPTY	EMPTY
151	67	2	-1	0	-1	if ( len - i < ip6opt _ minlen ) {	len	EMPTY
151	68	2	-1	0	-1	nd _ print ( ( ndo ,  " , padn: trunc "  ) ) ;	EMPTY	EMPTY
151	69	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
151	70	2	-1	0	-1	}	EMPTY	EMPTY
151	71	2	-1	0	-1	nd _ print ( ( ndo ,  " , padn "  ) ) ;	EMPTY	EMPTY
151	72	2	-1	0	-1	break ;	EMPTY	EMPTY
151	73	2	-1	0	-1	default :	EMPTY	EMPTY
151	74	2	-1	0	-1	if ( len - i < ip6opt _ minlen ) {	len	EMPTY
151	75	2	-1	0	-1	nd _ print ( ( ndo ,  " , sopt _ type %d: trunc) "  , bp [ i ] ) ) ;	EMPTY	EMPTY
151	76	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
151	77	2	-1	0	-1	}	EMPTY	EMPTY
151	78	2	-1	0	-1	nd _ print ( ( ndo ,  " , sopt _ type 0x%02x: len=%d "  , bp [ i ] , bp [ i + 1 ] ) ) ;	EMPTY	EMPTY
151	79	2	-1	0	-1	break ;	EMPTY	EMPTY
151	80	2	-1	0	-1	}	EMPTY	EMPTY
151	81	2	-1	0	-1	}	EMPTY	EMPTY
151	82	3	-1	0	-1	return	EMPTY	EMPTY
151	84	1	0	0	-1	trunc :	EMPTY	EMPTY
151	85	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
151	86	3	-1	0	-1	}	EMPTY	EMPTY
151	88	1	0	0	-1	static void	EMPTY	EMPTY
151	89	2	-1	0	-1	ip6 _ opt _ print ( netdissect _ options * ndo  const u _ char * bp  int len )	len	EMPTY
151	90	2	-1	0	-1	{	EMPTY	EMPTY
151	91	2	-1	0	-1	int i ;	EMPTY	EMPTY
151	92	3	-1	0	-1	int optlen = 0 ;	EMPTY	EMPTY
151	94	1	0	0	0	if ( len == 0 )	len	EMPTY
151	95	2	-1	0	-1	return	EMPTY	EMPTY
151	96	2	-1	0	-1	for ( i = 0 ; i < len ; i += optlen ) {	len	EMPTY
151	97	2	-1	0	-1	if ( bp [ i ] == ip6opt _ pad1 )	EMPTY	EMPTY
151	98	2	-1	0	-1	optlen = 1 ;	EMPTY	EMPTY
151	99	2	-1	0	-1	else {	EMPTY	EMPTY
151	100	2	-1	0	-1	if ( i + 1 < len )	len	EMPTY
151	101	2	-1	0	-1	optlen = bp [ i + 1 ] + 2 ;	EMPTY	EMPTY
151	102	2	-1	0	-1	else	EMPTY	EMPTY
151	103	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
151	104	2	-1	0	-1	}	EMPTY	EMPTY
151	105	2	-1	0	-1	if ( i + optlen > len )	len	EMPTY
151	106	3	-1	0	-1	goto trunc ;	EMPTY	EMPTY
151	108	1	0	0	0	switch ( bp [ i ] ) {	EMPTY	EMPTY
151	109	2	-1	0	-1	case ip6opt _ pad1 :	EMPTY	EMPTY
151	110	2	-1	0	-1	nd _ print ( ( ndo ,  " (pad1) "  ) ) ;	EMPTY	EMPTY
151	111	2	-1	0	-1	break ;	EMPTY	EMPTY
151	112	2	-1	0	-1	case ip6opt _ padn :	EMPTY	EMPTY
151	113	2	-1	0	-1	if ( len - i < ip6opt _ minlen ) {	len	EMPTY
151	114	2	-1	0	-1	nd _ print ( ( ndo ,  " (padn: trunc) "  ) ) ;	EMPTY	EMPTY
151	115	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
151	116	2	-1	0	-1	}	EMPTY	EMPTY
151	117	2	-1	0	-1	nd _ print ( ( ndo ,  " (padn) "  ) ) ;	EMPTY	EMPTY
151	118	2	-1	0	-1	break ;	EMPTY	EMPTY
151	119	2	-1	0	-1	case ip6opt _ router _ alert :	EMPTY	EMPTY
151	120	2	-1	0	-1	if ( len - i < ip6opt _ rtalert _ len ) {	len	EMPTY
151	121	2	-1	0	-1	nd _ print ( ( ndo ,  " (rtalert: trunc) "  ) ) ;	EMPTY	EMPTY
151	122	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
151	123	2	-1	0	-1	}	EMPTY	EMPTY
151	124	2	-1	0	-1	if ( bp [ i + 1 ] != ip6opt _ rtalert _ len - 2 ) {	EMPTY	EMPTY
151	125	2	-1	0	-1	nd _ print ( ( ndo ,  " (rtalert: invalid len %d) "  , bp [ i + 1 ] ) ) ;	len	EMPTY
151	126	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
151	127	2	-1	0	-1	}	EMPTY	EMPTY
151	128	2	-1	0	-1	nd _ print ( ( ndo ,  " (rtalert: 0x%04x)  "  , extract _ 16bits ( & bp [ i + 2 ] ) ) ) ;	extract _ 16bits	EMPTY
151	129	2	-1	0	-1	break ;	EMPTY	EMPTY
151	130	2	-1	0	-1	case ip6opt _ jumbo :	EMPTY	EMPTY
151	131	2	-1	0	-1	if ( len - i < ip6opt _ jumbo _ len ) {	len	EMPTY
151	132	2	-1	0	-1	nd _ print ( ( ndo ,  " (jumbo: trunc) "  ) ) ;	EMPTY	EMPTY
151	133	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
151	134	2	-1	0	-1	}	EMPTY	EMPTY
151	135	2	-1	0	-1	if ( bp [ i + 1 ] != ip6opt _ jumbo _ len - 2 ) {	EMPTY	EMPTY
151	136	2	-1	0	-1	nd _ print ( ( ndo ,  " (jumbo: invalid len %d) "  , bp [ i + 1 ] ) ) ;	len	EMPTY
151	137	3	-1	0	-1	goto trunc ;	EMPTY	EMPTY
151	138	1	0	0	-1	}	EMPTY	EMPTY
151	139	2	-1	0	-1	nd _ print ( ( ndo ,  " (jumbo: %u)  "  , extract _ 32bits ( & bp [ i + 2 ] ) ) ) ;	EMPTY	EMPTY
151	140	2	-1	0	-1	break ;	EMPTY	EMPTY
151	141	2	-1	0	-1	case ip6opt _ home _ address :	EMPTY	EMPTY
151	142	2	-1	0	-1	if ( len - i < ip6opt _ homeaddr _ minlen ) {	len	EMPTY
151	143	2	-1	0	-1	nd _ print ( ( ndo ,  " (homeaddr: trunc) "  ) ) ;	EMPTY	EMPTY
151	144	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
151	145	2	-1	0	-1	}	EMPTY	EMPTY
151	146	2	-1	0	-1	if ( bp [ i + 1 ] < ip6opt _ homeaddr _ minlen - 2 ) {	EMPTY	EMPTY
151	147	2	-1	0	-1	nd _ print ( ( ndo ,  " (homeaddr: invalid len %d) "  , bp [ i + 1 ] ) ) ;	len	EMPTY
151	148	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
151	149	2	-1	0	-1	}	EMPTY	EMPTY
151	150	2	-1	0	-1	nd _ print ( ( ndo ,  " (homeaddr: %s "  , ip6addr _ string ( ndo , & bp [ i + 2 ] ) ) ) ;	EMPTY	EMPTY
151	151	2	-1	0	-1	if ( bp [ i + 1 ] > ip6opt _ homeaddr _ minlen - 2 ) {	EMPTY	EMPTY
151	152	2	-1	0	-1	ip6 _ sopt _ print ( ndo , & bp [ i + ip6opt _ homeaddr _ minlen ] ,	EMPTY	EMPTY
151	153	2	-1	0	-1	( optlen - ip6opt _ homeaddr _ minlen ) ) ;	EMPTY	EMPTY
151	154	2	-1	0	-1	}	EMPTY	EMPTY
151	155	2	-1	0	-1	nd _ print ( ( ndo ,  " ) "  ) ) ;	EMPTY	EMPTY
151	156	2	-1	0	-1	break ;	EMPTY	EMPTY
151	157	2	-1	0	-1	default :	EMPTY	EMPTY
151	158	2	-1	0	-1	if ( len - i < ip6opt _ minlen ) {	len	EMPTY
151	159	2	-1	0	-1	nd _ print ( ( ndo ,  " (type %d: trunc) "  , bp [ i ] ) ) ;	EMPTY	EMPTY
151	160	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
151	161	2	-1	0	-1	}	EMPTY	EMPTY
151	162	2	-1	0	-1	nd _ print ( ( ndo ,  " (opt _ type 0x%02x: len=%d) "  , bp [ i ] , bp [ i + 1 ] ) ) ;	EMPTY	EMPTY
151	163	2	-1	0	-1	break ;	EMPTY	EMPTY
151	164	2	-1	0	-1	}	EMPTY	EMPTY
151	165	2	-1	0	-1	}	EMPTY	EMPTY
151	166	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
151	167	3	-1	0	-1	return	EMPTY	EMPTY
151	169	1	0	0	-1	trunc :	EMPTY	EMPTY
151	170	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
151	171	3	-1	0	-1	}	EMPTY	EMPTY
151	173	1	0	0	-1	int	EMPTY	EMPTY
151	174	2	-1	0	-1	hbhopt _ print ( netdissect _ options * ndo  register const u _ char * bp )	EMPTY	EMPTY
151	175	2	-1	0	-1	{	EMPTY	EMPTY
151	176	2	-1	0	-1	const struct ip6 _ hbh * dp = ( struct ip6 _ hbh * ) bp ;	ip6 _ hbh ip6 _ hbh	EMPTY
151	177	3	-1	0	-1	int hbhlen = 0 ;	EMPTY	EMPTY
151	179	1	0	0	-1	nd _ tcheck ( dp -> ip6h _ len ) ;	ip6h _ len	EMPTY
151	180	2	-1	0	-1	hbhlen = ( int ) ( ( dp -> ip6h _ len + 1 ) << 3 )	ip6h _ len	EMPTY
151	181	2	-1	0	-1	nd _ tcheck2 ( * dp  hbhlen ) ;	EMPTY	EMPTY
151	182	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
151	183	2	-1	0	-1	if ( ndo -> ndo _ vflag )	ndo _ vflag	EMPTY
151	184	3	-1	0	-1	ip6 _ opt _ print ( ndo , ( const u _ char * ) dp + sizeof ( * dp ) , hbhlen - sizeof ( * dp ) )	EMPTY	EMPTY
151	186	1	0	0	0	return ( hbhlen )	EMPTY	EMPTY
151	188	1	0	0	-1	trunc :	EMPTY	EMPTY
151	189	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
151	190	2	-1	0	-1	return ( - 1 )	EMPTY	EMPTY
151	191	3	-1	0	-1	}	EMPTY	EMPTY
151	193	1	0	0	-1	int	EMPTY	EMPTY
151	194	2	-1	0	-1	dstopt _ print ( netdissect _ options * ndo  register const u _ char * bp )	EMPTY	EMPTY
151	195	2	-1	0	-1	{	EMPTY	EMPTY
151	196	2	-1	0	-1	const struct ip6 _ dest * dp = ( struct ip6 _ dest * ) bp ;	ip6 _ dest ip6 _ dest	EMPTY
151	197	3	-1	0	-1	int dstoptlen = 0 ;	EMPTY	EMPTY
151	199	1	0	0	-1	nd _ tcheck ( dp -> ip6d _ len ) ;	ip6d _ len	EMPTY
151	200	2	-1	0	-1	dstoptlen = ( int ) ( ( dp -> ip6d _ len + 1 ) << 3 )	ip6d _ len	EMPTY
151	201	2	-1	0	-1	nd _ tcheck2 ( * dp  dstoptlen ) ;	EMPTY	EMPTY
151	202	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
151	203	2	-1	0	-1	if ( ndo -> ndo _ vflag ) {	ndo _ vflag	EMPTY
151	204	2	-1	0	-1	ip6 _ opt _ print ( ndo , ( const u _ char * ) dp + sizeof ( * dp ) ,	EMPTY	EMPTY
151	205	2	-1	0	-1	dstoptlen - sizeof ( * dp ) ) ;	EMPTY	EMPTY
151	206	3	-1	0	-1	}	EMPTY	EMPTY
151	208	1	0	0	0	return ( dstoptlen )	EMPTY	EMPTY
151	210	1	1	0	-1	trunc :	EMPTY	EMPTY
151	211	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
151	212	2	-1	0	-1	return ( - 1 )	EMPTY	EMPTY
151	213	2	-1	0	-1	}	EMPTY	EMPTY
151	214	3	-1	1	-1	# endif	EMPTY	EMPTY
159	87	1	0	0	-1	static const struct tok type2str [ ] = {	EMPTY	EMPTY
159	88	2	-1	0	-1	{ vrrp _ type _ advertisement  strlit }	EMPTY	EMPTY
159	89	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
159	90	3	-1	0	-1	} ;	EMPTY	EMPTY
159	93	1	1	1	-1	# define vrrp _ auth _ none numconst	EMPTY	EMPTY
159	94	2	-1	0	-1	# define vrrp _ auth _ simple numconst	EMPTY	EMPTY
159	95	3	-1	0	-1	# define vrrp _ auth _ ah numconst	EMPTY	EMPTY
159	97	1	0	0	-1	static const struct tok auth2str [ ] = {	EMPTY	EMPTY
159	98	2	-1	0	-1	{ vrrp _ auth _ none  strlit }	EMPTY	EMPTY
159	99	2	-1	0	-1	{ vrrp _ auth _ simple  strlit }	EMPTY	EMPTY
159	100	2	-1	0	-1	{ vrrp _ auth _ ah  strlit }	EMPTY	EMPTY
159	101	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
159	102	3	-1	0	-1	} ;	EMPTY	EMPTY
159	104	1	0	0	-1	void	EMPTY	EMPTY
159	105	2	-1	0	-1	vrrp _ print ( netdissect _ options * ndo	EMPTY	EMPTY
159	106	2	-1	0	-1	register const u _ char * bp  register u _ int len	len	EMPTY
159	107	2	-1	0	-1	register const u _ char * bp2  int ttl )	EMPTY	EMPTY
159	108	2	-1	0	-1	{	EMPTY	EMPTY
159	109	2	-1	0	-1	int version , type , auth _ type = vrrp _ auth _ none ;	version type auth _ type	EMPTY
159	110	3	-1	0	-1	const char * type _ s ;	type _ s	EMPTY
159	112	1	0	0	-1	nd _ tcheck ( bp [ numconst ] ) ;	EMPTY	EMPTY
159	113	2	-1	0	-1	version = ( bp [ 0 ] & 0xf0 ) >> 4	version	EMPTY
159	114	2	-1	0	-1	type = bp [ 0 ] & 0x0f	type	EMPTY
159	115	2	-1	0	-1	type _ s = tok2str ( type2str ,  " unknown type (%u) "  , type )	type _ s tok2str type type	EMPTY
159	116	2	-1	0	-1	nd _ print ( ( ndo  strlit  version  type _ s ) ) ;	version type _ s	EMPTY
159	117	2	-1	0	-1	if ( ttl != numconst )	EMPTY	EMPTY
159	118	2	-1	0	-1	nd _ print ( ( ndo  strlit  ttl ) ) ;	EMPTY	EMPTY
159	119	2	-1	0	-1	if ( version < 2 || version > 3 || type != vrrp _ type _ advertisement )	version version type	EMPTY
159	120	2	-1	0	-1	return	EMPTY	EMPTY
159	121	2	-1	0	-1	nd _ tcheck ( bp [ numconst ] ) ;	EMPTY	EMPTY
159	122	2	-1	0	-1	nd _ print ( ( ndo  strlit  bp [ numconst ]  bp [ numconst ] ) ) ;	EMPTY	EMPTY
159	123	3	-1	0	-1	nd _ tcheck ( bp [ numconst ] ) ;	EMPTY	EMPTY
159	125	1	0	0	0	if ( version == numconst ) {	version	EMPTY
159	126	2	-1	0	-1	auth _ type = bp [ 4 ]	auth _ type	EMPTY
159	127	2	-1	0	-1	nd _ print ( ( ndo  strlit  tok2str ( auth2str  null  auth _ type ) ) ) ;	tok2str auth _ type	EMPTY
159	128	2	-1	0	-1	nd _ print ( ( ndo  strlit  bp [ numconst ]  len ) ) ;	len	EMPTY
159	129	2	-1	0	-1	} else {	EMPTY	EMPTY
159	130	2	-1	0	-1	uint16 _ t intvl = ( bp [ 4 ] & 0x0f ) << 8 | bp [ 5 ] ;	intvl	EMPTY
159	131	2	-1	0	-1	nd _ print ( ( ndo  strlit  intvl  len ) ) ;	intvl len	EMPTY
159	132	3	-1	0	-1	}	EMPTY	EMPTY
159	134	1	0	0	0	if ( ndo -> ndo _ vflag ) {	ndo _ vflag	EMPTY
159	135	2	-1	0	-1	int naddrs = bp [ numconst ] ;	EMPTY	EMPTY
159	136	2	-1	0	-1	int i ;	EMPTY	EMPTY
159	137	3	-1	0	-1	char c ;	EMPTY	EMPTY
159	139	1	0	0	0	if ( version == numconst && nd _ ttest2 ( bp [ numconst ]  len ) ) {	version len	EMPTY
159	140	3	-1	0	-1	struct cksum _ vec vec [ numconst ] ;	EMPTY	EMPTY
159	142	1	0	0	-1	vec [ numconst ] . ptr = bp ;	EMPTY	EMPTY
159	143	2	-1	0	-1	vec [ numconst ] . len = len ;	len len	EMPTY
159	144	2	-1	0	-1	if ( in _ cksum ( vec  numconst ) )	EMPTY	EMPTY
159	145	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
159	146	2	-1	0	-1	extract _ 16bits ( & bp [ numconst ] ) ) ) ;	extract _ 16bits	EMPTY
159	147	3	-1	0	-1	}	EMPTY	EMPTY
159	149	1	0	0	0	if ( version == numconst && nd _ ttest2 ( bp [ numconst ]  len ) ) {	version len	EMPTY
159	150	2	-1	0	-1	uint16 _ t cksum = nextproto4 _ cksum ( ndo  ( struct ip * ) bp2  bp	ip	EMPTY
159	151	2	-1	0	-1	len  len  ipproto _ vrrp ) ;	len len	EMPTY
159	152	2	-1	0	-1	if ( cksum )	EMPTY	EMPTY
159	153	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
159	154	2	-1	0	-1	extract _ 16bits ( & bp [ numconst ] ) ) ) ;	extract _ 16bits	EMPTY
159	155	3	-1	0	-1	}	EMPTY	EMPTY
159	157	1	0	0	0	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
159	158	2	-1	0	-1	if ( naddrs > numconst )	EMPTY	EMPTY
159	159	2	-1	0	-1	nd _ print ( ( ndo  strlit  naddrs ) ) ;	EMPTY	EMPTY
159	160	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
159	161	2	-1	0	-1	c = ' ' ;	EMPTY	EMPTY
159	162	2	-1	0	-1	bp += numconst ;	EMPTY	EMPTY
159	163	2	-1	0	-1	for ( i = numconst ; i < naddrs ; i ++ ) {	EMPTY	EMPTY
159	164	2	-1	0	-1	nd _ tcheck ( bp [ numconst ] ) ;	EMPTY	EMPTY
159	165	2	-1	0	-1	nd _ print ( ( ndo  strlit  c  ipaddr _ string ( ndo  bp ) ) ) ;	EMPTY	EMPTY
159	166	2	-1	0	-1	c = '' ;	EMPTY	EMPTY
159	167	2	-1	0	-1	bp += numconst ;	EMPTY	EMPTY
159	168	2	-1	0	-1	}	EMPTY	EMPTY
159	169	2	-1	0	-1	if ( version == numconst && auth _ type == vrrp _ auth _ simple ) {	version auth _ type	EMPTY
159	170	2	-1	0	-1	nd _ tcheck ( bp [ numconst ] ) ;	EMPTY	EMPTY
159	171	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
159	172	2	-1	0	-1	if ( fn _ printn ( ndo , bp , 8 , ndo -> ndo _ snapend ) ) {	EMPTY	EMPTY
159	173	2	-1	0	-1	nd _ print ( ( ndo ,  " \ "  "  ) ) ;	EMPTY	EMPTY
159	174	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
159	175	2	-1	0	-1	}	EMPTY	EMPTY
159	176	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
159	177	2	-1	0	-1	}	EMPTY	EMPTY
159	178	2	-1	0	-1	}	EMPTY	EMPTY
159	179	2	-1	0	-1	return ;	EMPTY	EMPTY
159	180	2	-1	0	-1	trunc :	EMPTY	EMPTY
159	181	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
159	182	3	-1	0	-1	}	EMPTY	EMPTY
170	37	1	0	0	-1	static const char * ns _ ops [ ] = {	EMPTY	EMPTY
170	38	2	-1	0	-1	strlit  strlit  strlit  strlit  strlit  strlit  strlit  strlit	EMPTY	EMPTY
170	39	2	-1	0	-1	strlit  strlit  strlit  strlit	EMPTY	EMPTY
170	40	2	-1	0	-1	strlit  strlit  strlit  strlit	EMPTY	EMPTY
170	41	3	-1	0	-1	} ;	EMPTY	EMPTY
170	43	1	0	0	-1	static const char * ns _ resp [ ] = {	EMPTY	EMPTY
170	44	2	-1	0	-1	strlit  strlit  strlit  strlit	EMPTY	EMPTY
170	45	2	-1	0	-1	strlit  strlit  strlit  strlit	EMPTY	EMPTY
170	46	2	-1	0	-1	strlit  strlit  strlit  strlit	EMPTY	EMPTY
170	47	2	-1	0	-1	strlit  strlit  strlit  strlit	EMPTY	EMPTY
170	48	3	-1	0	-1	} ;	EMPTY	EMPTY
170	51	1	0	0	-1	static const u _ char *	EMPTY	EMPTY
170	52	2	-1	0	-1	ns _ nskip ( netdissect _ options * ndo	ns _ nskip	EMPTY
170	53	2	-1	0	-1	register const u _ char * cp )	EMPTY	EMPTY
170	54	2	-1	0	-1	{	EMPTY	EMPTY
170	55	3	-1	0	-1	register u _ char i ;	EMPTY	EMPTY
170	57	1	0	0	0	if ( ! nd _ ttest2 ( * cp , 1 ) )	EMPTY	EMPTY
170	58	2	-1	0	-1	return ( null )	EMPTY	EMPTY
170	59	2	-1	0	-1	i = * cp ++	EMPTY	EMPTY
170	60	2	-1	0	-1	while ( i ) {	EMPTY	EMPTY
170	61	2	-1	0	-1	if ( ( i & indir _ mask ) == indir _ mask )	EMPTY	EMPTY
170	62	2	-1	0	-1	return ( cp + 1 )	EMPTY	EMPTY
170	63	2	-1	0	-1	if ( ( i & indir _ mask ) == edns0 _ mask ) {	EMPTY	EMPTY
170	64	3	-1	0	-1	int bitlen , bytelen ;	EMPTY	EMPTY
170	66	1	0	0	0	if ( ( i & ~ indir _ mask ) != edns0 _ elt _ bitlabel )	EMPTY	EMPTY
170	67	2	-1	0	-1	return ( null )	EMPTY	EMPTY
170	68	2	-1	0	-1	if ( ! nd _ ttest2 ( * cp , 1 ) )	EMPTY	EMPTY
170	69	2	-1	0	-1	return ( null )	EMPTY	EMPTY
170	70	2	-1	0	-1	if ( ( bitlen = * cp ++ ) == 0 )	EMPTY	EMPTY
170	71	2	-1	0	-1	bitlen = 256	EMPTY	EMPTY
170	72	2	-1	0	-1	bytelen = ( bitlen + 7 ) / 8	EMPTY	EMPTY
170	73	2	-1	0	-1	cp += bytelen	EMPTY	EMPTY
170	74	2	-1	0	-1	}	EMPTY	EMPTY
170	75	2	-1	0	-1	cp += i ;	EMPTY	EMPTY
170	76	2	-1	0	-1	if ( ! nd _ ttest2 ( * cp  numconst ) )	EMPTY	EMPTY
170	77	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	78	2	-1	0	-1	i = * cp ++ ;	EMPTY	EMPTY
170	79	2	-1	0	-1	}	EMPTY	EMPTY
170	80	2	-1	0	-1	return ( cp ) ;	EMPTY	EMPTY
170	81	3	-1	0	-1	}	EMPTY	EMPTY
170	84	1	0	0	-1	static const u _ char *	EMPTY	EMPTY
170	85	2	-1	0	-1	blabel _ print ( netdissect _ options * ndo	blabel _ print	EMPTY
170	86	2	-1	0	-1	const u _ char * cp )	EMPTY	EMPTY
170	87	2	-1	0	-1	{	EMPTY	EMPTY
170	88	2	-1	0	-1	int bitlen , slen , b ;	EMPTY	EMPTY
170	89	2	-1	0	-1	const u _ char * bitp , * lim ;	EMPTY	EMPTY
170	90	3	-1	0	-1	char tc ;	EMPTY	EMPTY
170	92	1	0	0	0	if ( ! nd _ ttest2 ( * cp , 1 ) )	EMPTY	EMPTY
170	93	2	-1	0	-1	return ( null )	EMPTY	EMPTY
170	94	2	-1	0	-1	if ( ( bitlen = * cp ) == 0 )	EMPTY	EMPTY
170	95	2	-1	0	-1	bitlen = 256	EMPTY	EMPTY
170	96	2	-1	0	-1	slen = ( bitlen + 3 ) / 4	EMPTY	EMPTY
170	97	3	-1	0	-1	lim = cp + 1 + slen	EMPTY	EMPTY
170	100	1	0	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
170	101	2	-1	0	-1	for ( bitp = cp + 1 , b = bitlen ; bitp < lim && b > 7 ; b -= 8 , bitp ++ ) {	EMPTY	EMPTY
170	102	2	-1	0	-1	nd _ tcheck ( * bitp ) ;	EMPTY	EMPTY
170	103	2	-1	0	-1	nd _ print ( ( ndo ,  " %02x "  , * bitp ) ) ;	EMPTY	EMPTY
170	104	2	-1	0	-1	}	EMPTY	EMPTY
170	105	2	-1	0	-1	if ( b > 4 ) {	EMPTY	EMPTY
170	106	2	-1	0	-1	nd _ tcheck ( * bitp ) ;	EMPTY	EMPTY
170	107	2	-1	0	-1	tc = * bitp ++ ;	EMPTY	EMPTY
170	108	2	-1	0	-1	nd _ print ( ( ndo ,  " %02x "  , tc & ( 0xff << ( 8 - b ) ) ) ) ;	EMPTY	EMPTY
170	109	2	-1	0	-1	} else if ( b > 0 ) {	EMPTY	EMPTY
170	110	2	-1	0	-1	nd _ tcheck ( * bitp ) ;	EMPTY	EMPTY
170	111	2	-1	0	-1	tc = * bitp ++ ;	EMPTY	EMPTY
170	112	2	-1	0	-1	nd _ print ( ( ndo ,  " %1x "  , ( ( tc >> 4 ) & 0x0f ) & ( 0x0f << ( 4 - b ) ) ) ) ;	EMPTY	EMPTY
170	113	2	-1	0	-1	}	EMPTY	EMPTY
170	114	2	-1	0	-1	nd _ print ( ( ndo  strlit  bitlen ) ) ;	EMPTY	EMPTY
170	115	2	-1	0	-1	return lim	EMPTY	EMPTY
170	116	2	-1	0	-1	trunc :	EMPTY	EMPTY
170	117	2	-1	0	-1	nd _ print ( ( ndo  strlit  bitlen ) ) ;	EMPTY	EMPTY
170	118	2	-1	0	-1	return null ;	EMPTY	EMPTY
170	119	3	-1	0	-1	}	EMPTY	EMPTY
170	121	1	0	0	-1	static int	EMPTY	EMPTY
170	122	2	-1	0	-1	labellen ( netdissect _ options * ndo	EMPTY	EMPTY
170	123	2	-1	0	-1	const u _ char * cp )	EMPTY	EMPTY
170	124	2	-1	0	-1	{	EMPTY	EMPTY
170	125	3	-1	0	-1	register u _ int i ;	EMPTY	EMPTY
170	127	1	0	0	0	if ( ! nd _ ttest2 ( * cp  numconst ) )	EMPTY	EMPTY
170	128	2	-1	0	-1	return ( - numconst ) ;	EMPTY	EMPTY
170	129	2	-1	0	-1	i = * cp ;	EMPTY	EMPTY
170	130	2	-1	0	-1	if ( ( i & indir _ mask ) == edns0 _ mask ) {	EMPTY	EMPTY
170	131	2	-1	0	-1	int bitlen  elt ;	EMPTY	EMPTY
170	132	2	-1	0	-1	if ( ( elt = ( i & ~ indir _ mask ) ) != edns0 _ elt _ bitlabel ) {	EMPTY	EMPTY
170	133	2	-1	0	-1	nd _ print ( ( ndo  strlit  elt ) ) ;	EMPTY	EMPTY
170	134	2	-1	0	-1	return ( - numconst ) ;	EMPTY	EMPTY
170	135	2	-1	0	-1	}	EMPTY	EMPTY
170	136	2	-1	0	-1	if ( ! nd _ ttest2 ( * ( cp + numconst )  numconst ) )	EMPTY	EMPTY
170	137	2	-1	0	-1	return ( - numconst ) ;	EMPTY	EMPTY
170	138	2	-1	0	-1	if ( ( bitlen = * ( cp + numconst ) ) == numconst )	EMPTY	EMPTY
170	139	2	-1	0	-1	bitlen = numconst ;	EMPTY	EMPTY
170	140	2	-1	0	-1	return ( ( ( bitlen + numconst ) / numconst ) + numconst ) ;	EMPTY	EMPTY
170	141	2	-1	0	-1	} else	EMPTY	EMPTY
170	142	2	-1	0	-1	return ( i ) ;	EMPTY	EMPTY
170	143	3	-1	0	-1	}	EMPTY	EMPTY
170	145	1	0	0	-1	const u _ char *	EMPTY	EMPTY
170	146	2	-1	0	-1	ns _ nprint ( netdissect _ options * ndo	EMPTY	EMPTY
170	147	2	-1	0	-1	register const u _ char * cp  register const u _ char * bp )	EMPTY	EMPTY
170	148	2	-1	0	-1	{	EMPTY	EMPTY
170	149	2	-1	0	-1	register u _ int i  l ;	EMPTY	EMPTY
170	150	2	-1	0	-1	register const u _ char * rp = null ;	EMPTY	EMPTY
170	151	2	-1	0	-1	register int compress = numconst ;	EMPTY	EMPTY
170	152	2	-1	0	-1	int chars _ processed ;	EMPTY	EMPTY
170	153	2	-1	0	-1	int elt ;	EMPTY	EMPTY
170	154	3	-1	0	-1	int data _ size = ndo -> ndo _ snapend - bp ;	EMPTY	EMPTY
170	156	1	0	0	0	if ( ( l = labellen ( ndo  cp ) ) == ( u _ int ) - numconst )	EMPTY	EMPTY
170	157	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	158	2	-1	0	-1	if ( ! nd _ ttest2 ( * cp  numconst ) )	EMPTY	EMPTY
170	159	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	160	2	-1	0	-1	chars _ processed = numconst ;	EMPTY	EMPTY
170	161	2	-1	0	-1	if ( ( ( i = * cp ++ ) & indir _ mask ) != indir _ mask ) {	EMPTY	EMPTY
170	162	2	-1	0	-1	compress = numconst ;	EMPTY	EMPTY
170	163	2	-1	0	-1	rp = cp + l ;	EMPTY	EMPTY
170	164	3	-1	0	-1	}	EMPTY	EMPTY
170	166	1	0	0	0	if ( i != numconst )	EMPTY	EMPTY
170	167	2	-1	0	-1	while ( i && cp < ndo -> ndo _ snapend ) {	EMPTY	EMPTY
170	168	2	-1	0	-1	if ( ( i & indir _ mask ) == indir _ mask ) {	EMPTY	EMPTY
170	169	2	-1	0	-1	if ( ! compress ) {	EMPTY	EMPTY
170	170	2	-1	0	-1	rp = cp + numconst ;	EMPTY	EMPTY
170	171	2	-1	0	-1	compress = numconst ;	EMPTY	EMPTY
170	172	2	-1	0	-1	}	EMPTY	EMPTY
170	173	2	-1	0	-1	if ( ! nd _ ttest2 ( * cp  numconst ) )	EMPTY	EMPTY
170	174	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	175	2	-1	0	-1	cp = bp + ( ( ( i << numconst ) | * cp ) & numconst ) ;	EMPTY	EMPTY
170	176	2	-1	0	-1	if ( ( l = labellen ( ndo  cp ) ) == ( u _ int ) - numconst )	EMPTY	EMPTY
170	177	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	178	2	-1	0	-1	if ( ! nd _ ttest2 ( * cp  numconst ) )	EMPTY	EMPTY
170	179	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	180	2	-1	0	-1	i = * cp ++ ;	EMPTY	EMPTY
170	181	3	-1	0	-1	chars _ processed ++ ;	EMPTY	EMPTY
170	189	1	1	1	1	if ( chars _ processed >= data _ size ) {	EMPTY	EMPTY
170	190	2	-1	0	-1	nd _ print ( ( ndo ,  " <loop> "  ) ) ;	EMPTY	EMPTY
170	191	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	192	2	-1	0	-1	}	EMPTY	EMPTY
170	193	2	-1	0	-1	continue	EMPTY	EMPTY
170	194	2	-1	0	-1	}	EMPTY	EMPTY
170	195	2	-1	0	-1	if ( ( i & indir _ mask ) == edns0 _ mask ) {	EMPTY	EMPTY
170	196	2	-1	0	-1	elt = ( i & ~ indir _ mask ) ;	EMPTY	EMPTY
170	197	2	-1	0	-1	switch ( elt ) {	EMPTY	EMPTY
170	198	2	-1	0	-1	case edns0 _ elt _ bitlabel :	EMPTY	EMPTY
170	199	2	-1	0	-1	if ( blabel _ print ( ndo  cp ) == null )	blabel _ print	EMPTY
170	200	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	201	2	-1	0	-1	break ;	EMPTY	EMPTY
170	202	2	-1	0	-1	default :	EMPTY	EMPTY
170	204	2	-1	1	-1	nd _ print ( ( ndo  strlit  elt ) ) ;	EMPTY	EMPTY
170	205	2	-1	0	-1	return ( null )	EMPTY	EMPTY
170	206	2	-1	0	-1	}	EMPTY	EMPTY
170	207	2	-1	0	-1	}	EMPTY	EMPTY
170	208	2	-1	0	-1	if ( fn _ printn ( ndo  cp  l  ndo -> ndo _ snapend ) )	EMPTY	EMPTY
170	209	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	210	3	-1	0	-1	}	EMPTY	EMPTY
170	212	1	0	0	-1	cp += l ;	EMPTY	EMPTY
170	213	2	-1	0	-1	chars _ processed += l ;	EMPTY	EMPTY
170	214	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
170	215	2	-1	0	-1	if ( ( l = labellen ( ndo  cp ) ) == ( u _ int ) - numconst )	EMPTY	EMPTY
170	216	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	217	2	-1	0	-1	if ( ! nd _ ttest2 ( * cp  numconst ) )	EMPTY	EMPTY
170	218	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	219	2	-1	0	-1	i = * cp ++ ;	EMPTY	EMPTY
170	220	2	-1	0	-1	chars _ processed ++ ;	EMPTY	EMPTY
170	221	2	-1	0	-1	if ( ! compress )	EMPTY	EMPTY
170	222	2	-1	0	-1	rp += l + numconst ;	EMPTY	EMPTY
170	223	2	-1	0	-1	}	EMPTY	EMPTY
170	224	2	-1	0	-1	else	EMPTY	EMPTY
170	225	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
170	226	2	-1	0	-1	return ( rp ) ;	EMPTY	EMPTY
170	227	3	-1	0	-1	}	EMPTY	EMPTY
170	230	1	0	0	-1	static const u _ char *	EMPTY	EMPTY
170	231	2	-1	0	-1	ns _ cprint ( netdissect _ options * ndo	ns _ cprint	EMPTY
170	232	2	-1	0	-1	register const u _ char * cp )	EMPTY	EMPTY
170	233	2	-1	0	-1	{	EMPTY	EMPTY
170	234	3	-1	0	-1	register u _ int i ;	EMPTY	EMPTY
170	236	1	0	0	0	if ( ! nd _ ttest2 ( * cp , 1 ) )	EMPTY	EMPTY
170	237	2	-1	0	-1	return ( null )	EMPTY	EMPTY
170	238	2	-1	0	-1	i = * cp ++	EMPTY	EMPTY
170	239	2	-1	0	-1	if ( fn _ printn ( ndo , cp , i , ndo -> ndo _ snapend ) )	EMPTY	EMPTY
170	240	2	-1	0	-1	return ( null )	EMPTY	EMPTY
170	241	2	-1	0	-1	return ( cp + i )	EMPTY	EMPTY
170	242	3	-1	0	-1	}	EMPTY	EMPTY
170	245	1	1	0	-1	const struct tok ns _ type2str [ ] = {	ns _ type2str	EMPTY
170	246	2	-1	1	-1	{ t _ a  strlit }	EMPTY	EMPTY
170	247	2	-1	1	-1	{ t _ ns  strlit }	EMPTY	EMPTY
170	248	2	-1	1	-1	{ t _ md  strlit }	EMPTY	EMPTY
170	249	2	-1	1	-1	{ t _ mf  strlit }	EMPTY	EMPTY
170	250	2	-1	1	-1	{ t _ cname  strlit }	EMPTY	EMPTY
170	251	2	-1	1	-1	{ t _ soa  strlit }	EMPTY	EMPTY
170	252	2	-1	1	-1	{ t _ mb  strlit }	EMPTY	EMPTY
170	253	2	-1	1	-1	{ t _ mg  strlit }	EMPTY	EMPTY
170	254	2	-1	1	-1	{ t _ mr  strlit }	EMPTY	EMPTY
170	255	2	-1	1	-1	{ t _ null  strlit }	EMPTY	EMPTY
170	256	2	-1	1	-1	{ t _ wks  strlit }	EMPTY	EMPTY
170	257	2	-1	1	-1	{ t _ ptr  strlit }	EMPTY	EMPTY
170	258	2	-1	1	-1	{ t _ hinfo  strlit }	EMPTY	EMPTY
170	259	2	-1	1	-1	{ t _ minfo  strlit }	EMPTY	EMPTY
170	260	2	-1	1	-1	{ t _ mx  strlit }	EMPTY	EMPTY
170	261	2	-1	1	-1	{ t _ txt  strlit }	EMPTY	EMPTY
170	262	2	-1	1	-1	{ t _ rp  strlit }	EMPTY	EMPTY
170	263	2	-1	1	-1	{ t _ afsdb  strlit }	EMPTY	EMPTY
170	264	2	-1	1	-1	{ t _ x25  strlit }	EMPTY	EMPTY
170	265	2	-1	1	-1	{ t _ isdn  strlit }	EMPTY	EMPTY
170	266	2	-1	1	-1	{ t _ rt  strlit }	EMPTY	EMPTY
170	267	2	-1	1	-1	{ t _ nsap  strlit }	EMPTY	EMPTY
170	268	2	-1	0	-1	{ t _ nsap _ ptr  strlit }	EMPTY	EMPTY
170	269	2	-1	1	-1	{ t _ sig  strlit }	EMPTY	EMPTY
170	270	2	-1	1	-1	{ t _ key  strlit }	EMPTY	EMPTY
170	271	2	-1	1	-1	{ t _ px  strlit }	EMPTY	EMPTY
170	272	2	-1	1	-1	{ t _ gpos  strlit }	EMPTY	EMPTY
170	273	2	-1	1	-1	{ t _ aaaa  strlit }	EMPTY	EMPTY
170	274	3	-1	1	-1	{ t _ loc  strlit }	EMPTY	EMPTY
170	275	1	1	1	-1	{ t _ nxt  strlit }	EMPTY	EMPTY
170	276	2	-1	1	-1	{ t _ eid  strlit }	EMPTY	EMPTY
170	277	2	-1	1	-1	{ t _ nimloc  strlit }	EMPTY	EMPTY
170	278	2	-1	1	-1	{ t _ srv  strlit }	EMPTY	EMPTY
170	279	2	-1	1	-1	{ t _ atma  strlit }	EMPTY	EMPTY
170	280	2	-1	1	-1	{ t _ naptr  strlit }	EMPTY	EMPTY
170	281	2	-1	1	-1	{ t _ kx  strlit }	EMPTY	EMPTY
170	282	2	-1	1	-1	{ t _ cert  strlit }	EMPTY	EMPTY
170	283	2	-1	1	-1	{ t _ a6  strlit }	EMPTY	EMPTY
170	284	2	-1	1	-1	{ t _ dname  strlit }	EMPTY	EMPTY
170	285	2	-1	0	-1	{ t _ sink  strlit }	EMPTY	EMPTY
170	286	2	-1	1	-1	{ t _ opt  strlit }	EMPTY	EMPTY
170	287	2	-1	1	-1	{ t _ apl  strlit }	EMPTY	EMPTY
170	288	2	-1	1	-1	{ t _ ds  strlit }	EMPTY	EMPTY
170	289	2	-1	1	-1	{ t _ sshfp  strlit }	EMPTY	EMPTY
170	290	2	-1	1	-1	{ t _ ipseckey  strlit }	EMPTY	EMPTY
170	291	2	-1	1	-1	{ t _ rrsig  strlit }	EMPTY	EMPTY
170	292	2	-1	1	-1	{ t _ nsec  strlit }	EMPTY	EMPTY
170	293	2	-1	1	-1	{ t _ dnskey  strlit }	EMPTY	EMPTY
170	294	2	-1	1	-1	{ t _ spf  strlit }	EMPTY	EMPTY
170	295	2	-1	0	-1	{ t _ uinfo  strlit }	EMPTY	EMPTY
170	296	2	-1	0	-1	{ t _ uid  strlit }	EMPTY	EMPTY
170	297	2	-1	0	-1	{ t _ gid  strlit }	EMPTY	EMPTY
170	298	2	-1	0	-1	{ t _ unspec  strlit }	EMPTY	EMPTY
170	299	2	-1	0	-1	{ t _ unspeca  strlit }	EMPTY	EMPTY
170	300	2	-1	1	-1	{ t _ tkey  strlit }	EMPTY	EMPTY
170	301	2	-1	1	-1	{ t _ tsig  strlit }	EMPTY	EMPTY
170	302	2	-1	1	-1	{ t _ ixfr  strlit }	EMPTY	EMPTY
170	303	2	-1	1	-1	{ t _ axfr  strlit }	EMPTY	EMPTY
170	304	3	-1	1	-1	{ t _ mailb  strlit }	EMPTY	EMPTY
170	305	1	1	1	-1	{ t _ maila  strlit }	EMPTY	EMPTY
170	306	2	-1	0	-1	{ t _ any  strlit }	EMPTY	EMPTY
170	307	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
170	308	3	-1	0	-1	} ;	EMPTY	EMPTY
170	310	1	1	0	-1	const struct tok ns _ class2str [ ] = {	EMPTY	EMPTY
170	311	2	-1	1	-1	{ c _ in  strlit }	EMPTY	EMPTY
170	312	2	-1	0	-1	{ c _ chaos  strlit }	EMPTY	EMPTY
170	313	2	-1	0	-1	{ c _ hs  strlit }	EMPTY	EMPTY
170	314	2	-1	0	-1	{ c _ any  strlit }	EMPTY	EMPTY
170	315	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
170	316	3	-1	0	-1	} ;	EMPTY	EMPTY
170	319	1	0	0	-1	static const u _ char *	EMPTY	EMPTY
170	320	2	-1	0	-1	ns _ qprint ( netdissect _ options * ndo	ns _ qprint	EMPTY
170	321	2	-1	0	-1	register const u _ char * cp  register const u _ char * bp  int is _ mdns )	EMPTY	EMPTY
170	322	2	-1	0	-1	{	EMPTY	EMPTY
170	323	2	-1	0	-1	register const u _ char * np = cp ;	EMPTY	EMPTY
170	324	3	-1	0	-1	register u _ int i , class ;	EMPTY	EMPTY
170	326	1	0	0	-1	cp = ns _ nskip ( ndo , cp )	ns _ nskip	EMPTY
170	328	1	0	0	0	if ( cp == null || ! nd _ ttest2 ( * cp , 4 ) )	EMPTY	EMPTY
170	329	3	-1	0	-1	return ( null )	EMPTY	EMPTY
170	332	1	1	1	-1	i = extract _ 16bits ( cp )	extract _ 16bits	EMPTY
170	333	2	-1	0	-1	cp += 2	EMPTY	EMPTY
170	334	2	-1	0	-1	nd _ print ( ( ndo  strlit  tok2str ( ns _ type2str  strlit  i ) ) ) ;	tok2str ns _ type2str	EMPTY
170	336	2	-1	1	-1	i = extract _ 16bits ( cp )	extract _ 16bits	EMPTY
170	337	2	-1	0	-1	cp += 2	EMPTY	EMPTY
170	338	2	-1	0	-1	if ( is _ mdns )	EMPTY	EMPTY
170	339	2	-1	0	-1	class = ( i & ~ c _ qu ) ;	EMPTY	EMPTY
170	340	2	-1	0	-1	else	EMPTY	EMPTY
170	341	2	-1	0	-1	class = i	EMPTY	EMPTY
170	342	2	-1	0	-1	if ( class != c _ in )	EMPTY	EMPTY
170	343	2	-1	0	-1	nd _ print ( ( ndo  strlit  tok2str ( ns _ class2str  strlit  class ) ) ) ;	tok2str	EMPTY
170	344	2	-1	0	-1	if ( is _ mdns ) {	EMPTY	EMPTY
170	345	2	-1	0	-1	nd _ print ( ( ndo , i & c _ qu ?  "  (qu) "  :  "  (qm) "  ) ) ;	EMPTY	EMPTY
170	346	3	-1	0	-1	}	EMPTY	EMPTY
170	348	1	0	0	0	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
170	349	2	-1	0	-1	cp = ns _ nprint ( ndo , np , bp )	EMPTY	EMPTY
170	350	2	-1	0	-1	return ( cp ? cp + 4 : null )	EMPTY	EMPTY
170	351	3	-1	0	-1	}	EMPTY	EMPTY
170	354	1	0	0	-1	static const u _ char *	EMPTY	EMPTY
170	355	2	-1	0	-1	ns _ rprint ( netdissect _ options * ndo	ns _ rprint	EMPTY
170	356	2	-1	0	-1	register const u _ char * cp  register const u _ char * bp  int is _ mdns )	EMPTY	EMPTY
170	357	2	-1	0	-1	{	EMPTY	EMPTY
170	358	2	-1	0	-1	register u _ int i , class , opt _ flags = 0 ;	EMPTY	EMPTY
170	359	2	-1	0	-1	register u _ short typ , len ;	len	EMPTY
170	360	3	-1	0	-1	register const u _ char * rp ;	EMPTY	EMPTY
170	362	1	0	0	0	if ( ndo -> ndo _ vflag ) {	ndo _ vflag	EMPTY
170	363	2	-1	0	-1	nd _ print ( ( ndo ,  "   "  ) ) ;	EMPTY	EMPTY
170	364	2	-1	0	-1	if ( ( cp = ns _ nprint ( ndo , cp , bp ) ) == null )	EMPTY	EMPTY
170	365	2	-1	0	-1	return null ;	EMPTY	EMPTY
170	366	2	-1	0	-1	} else	EMPTY	EMPTY
170	367	3	-1	0	-1	cp = ns _ nskip ( ndo , cp )	ns _ nskip	EMPTY
170	369	1	0	0	0	if ( cp == null || ! nd _ ttest2 ( * cp , 10 ) )	EMPTY	EMPTY
170	370	3	-1	0	-1	return ( ndo -> ndo _ snapend )	EMPTY	EMPTY
170	373	1	1	1	-1	typ = extract _ 16bits ( cp )	extract _ 16bits	EMPTY
170	374	2	-1	0	-1	cp += 2	EMPTY	EMPTY
170	376	2	-1	1	-1	i = extract _ 16bits ( cp )	extract _ 16bits	EMPTY
170	377	2	-1	0	-1	cp += 2	EMPTY	EMPTY
170	378	2	-1	0	-1	if ( is _ mdns )	EMPTY	EMPTY
170	379	2	-1	0	-1	class = ( i & ~ c _ cache _ flush ) ;	EMPTY	EMPTY
170	380	2	-1	0	-1	else	EMPTY	EMPTY
170	381	2	-1	0	-1	class = i	EMPTY	EMPTY
170	382	2	-1	0	-1	if ( class != c _ in && typ != t _ opt )	EMPTY	EMPTY
170	383	2	-1	0	-1	nd _ print ( ( ndo  strlit  tok2str ( ns _ class2str  strlit  class ) ) ) ;	tok2str	EMPTY
170	384	2	-1	0	-1	if ( is _ mdns ) {	EMPTY	EMPTY
170	385	2	-1	0	-1	if ( i & c _ cache _ flush )	EMPTY	EMPTY
170	386	2	-1	0	-1	nd _ print ( ( ndo ,  "  (cache flush) "  ) ) ;	EMPTY	EMPTY
170	387	3	-1	0	-1	}	EMPTY	EMPTY
170	389	1	1	0	1	if ( typ == t _ opt ) {	EMPTY	EMPTY
170	391	2	-1	1	-1	cp += 2	EMPTY	EMPTY
170	392	2	-1	0	-1	opt _ flags = extract _ 16bits ( cp )	extract _ 16bits	EMPTY
170	394	2	-1	1	-1	cp += 2	EMPTY	EMPTY
170	395	2	-1	0	-1	if ( ndo -> ndo _ vflag > numconst ) {	ndo _ vflag	EMPTY
170	397	2	-1	1	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
170	398	2	-1	0	-1	relts _ print ( ndo , extract _ 32bits ( cp ) )	EMPTY	EMPTY
170	399	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
170	400	2	-1	0	-1	cp += 4	EMPTY	EMPTY
170	401	2	-1	0	-1	} else {	EMPTY	EMPTY
170	403	2	-1	1	-1	cp += 4	EMPTY	EMPTY
170	404	3	-1	0	-1	}	EMPTY	EMPTY
170	406	1	0	0	-1	len = extract _ 16bits ( cp ) ;	len extract _ 16bits	EMPTY
170	407	3	-1	0	-1	cp += numconst ;	EMPTY	EMPTY
170	409	1	0	0	-1	rp = cp + len ;	len	EMPTY
170	411	1	0	0	0	nd _ print ( ( ndo  strlit  tok2str ( ns _ type2str  strlit  typ ) ) ) ;	tok2str ns _ type2str	EMPTY
170	412	2	-1	0	-1	if ( rp > ndo -> ndo _ snapend )	EMPTY	EMPTY
170	413	3	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	415	1	0	0	0	switch ( typ ) {	EMPTY	EMPTY
170	416	2	-1	0	-1	case t _ a :	EMPTY	EMPTY
170	417	2	-1	0	-1	if ( ! nd _ ttest2 ( * cp  sizeof ( struct in _ addr ) ) )	EMPTY	EMPTY
170	418	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	419	2	-1	0	-1	nd _ print ( ( ndo  strlit  intoa ( htonl ( extract _ 32bits ( cp ) ) ) ) ) ;	EMPTY	EMPTY
170	420	3	-1	0	-1	break ;	EMPTY	EMPTY
170	422	1	0	0	-1	case t _ ns :	EMPTY	EMPTY
170	423	2	-1	0	-1	case t _ cname :	EMPTY	EMPTY
170	424	2	-1	0	-1	case t _ ptr :	EMPTY	EMPTY
170	425	2	-1	0	-1	# ifdef t _ dname	EMPTY	EMPTY
170	426	2	-1	0	-1	case t _ dname :	EMPTY	EMPTY
170	427	2	-1	0	-1	# endif	EMPTY	EMPTY
170	428	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
170	429	2	-1	0	-1	if ( ns _ nprint ( ndo  cp  bp ) == null )	EMPTY	EMPTY
170	430	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	431	3	-1	0	-1	break ;	EMPTY	EMPTY
170	433	1	0	0	-1	case t _ soa :	EMPTY	EMPTY
170	434	2	-1	0	-1	if ( ! ndo -> ndo _ vflag )	ndo _ vflag	EMPTY
170	435	2	-1	0	-1	break ;	EMPTY	EMPTY
170	436	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
170	437	2	-1	0	-1	if ( ( cp = ns _ nprint ( ndo  cp  bp ) ) == null )	EMPTY	EMPTY
170	438	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	439	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
170	440	2	-1	0	-1	if ( ( cp = ns _ nprint ( ndo  cp  bp ) ) == null )	EMPTY	EMPTY
170	441	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	442	2	-1	0	-1	if ( ! nd _ ttest2 ( * cp  numconst * numconst ) )	EMPTY	EMPTY
170	443	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	444	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 32bits ( cp ) ) ) ;	EMPTY	EMPTY
170	445	2	-1	0	-1	cp += numconst ;	EMPTY	EMPTY
170	446	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 32bits ( cp ) ) ) ;	EMPTY	EMPTY
170	447	2	-1	0	-1	cp += numconst ;	EMPTY	EMPTY
170	448	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 32bits ( cp ) ) ) ;	EMPTY	EMPTY
170	449	2	-1	0	-1	cp += numconst ;	EMPTY	EMPTY
170	450	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 32bits ( cp ) ) ) ;	EMPTY	EMPTY
170	451	2	-1	0	-1	cp += numconst ;	EMPTY	EMPTY
170	452	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 32bits ( cp ) ) ) ;	EMPTY	EMPTY
170	453	2	-1	0	-1	cp += numconst ;	EMPTY	EMPTY
170	454	2	-1	0	-1	break ;	EMPTY	EMPTY
170	455	2	-1	0	-1	case t _ mx :	EMPTY	EMPTY
170	456	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
170	457	2	-1	0	-1	if ( ! nd _ ttest2 ( * cp  numconst ) )	EMPTY	EMPTY
170	458	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	459	2	-1	0	-1	if ( ns _ nprint ( ndo  cp + numconst  bp ) == null )	EMPTY	EMPTY
170	460	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	461	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 16bits ( cp ) ) ) ;	extract _ 16bits	EMPTY
170	462	3	-1	0	-1	break ;	EMPTY	EMPTY
170	464	1	0	0	-1	case t _ txt :	EMPTY	EMPTY
170	465	2	-1	0	-1	while ( cp < rp ) {	EMPTY	EMPTY
170	466	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
170	467	2	-1	0	-1	cp = ns _ cprint ( ndo  cp ) ;	ns _ cprint	EMPTY
170	468	2	-1	0	-1	if ( cp == null )	EMPTY	EMPTY
170	469	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	470	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
170	471	2	-1	0	-1	}	EMPTY	EMPTY
170	472	3	-1	0	-1	break ;	EMPTY	EMPTY
170	474	1	0	0	-1	case t _ srv :	EMPTY	EMPTY
170	475	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
170	476	2	-1	0	-1	if ( ! nd _ ttest2 ( * cp  numconst ) )	EMPTY	EMPTY
170	477	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	478	2	-1	0	-1	if ( ns _ nprint ( ndo  cp + numconst  bp ) == null )	EMPTY	EMPTY
170	479	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	480	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 16bits ( cp + numconst )	extract _ 16bits	EMPTY
170	481	2	-1	0	-1	extract _ 16bits ( cp )  extract _ 16bits ( cp + numconst ) ) ) ;	extract _ 16bits extract _ 16bits	EMPTY
170	482	3	-1	0	-1	break ;	EMPTY	EMPTY
170	484	1	0	0	-1	# ifdef inet6	EMPTY	EMPTY
170	485	2	-1	0	-1	case t _ aaaa :	EMPTY	EMPTY
170	486	2	-1	0	-1	{	EMPTY	EMPTY
170	487	2	-1	0	-1	struct in6 _ addr addr ;	addr	EMPTY
170	488	3	-1	0	-1	char ntop _ buf [ inet6 _ addrstrlen ] ;	EMPTY	EMPTY
170	490	1	0	0	0	if ( ! nd _ ttest2 ( * cp  sizeof ( struct in6 _ addr ) ) )	EMPTY	EMPTY
170	491	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	492	2	-1	0	-1	memcpy ( & addr  cp  sizeof ( struct in6 _ addr ) ) ;	addr	memcpy
170	493	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
170	494	3	-1	0	-1	inet _ ntop ( af _ inet6  & addr  ntop _ buf  sizeof ( ntop _ buf ) ) ) ) ;	addr	inet _ ntop
170	496	1	0	0	-1	break ;	EMPTY	EMPTY
170	497	3	-1	0	-1	}	EMPTY	EMPTY
170	499	1	0	0	-1	case t _ a6 :	EMPTY	EMPTY
170	500	2	-1	0	-1	{	EMPTY	EMPTY
170	501	2	-1	0	-1	struct in6 _ addr a ;	EMPTY	EMPTY
170	502	2	-1	0	-1	int pbit  pbyte ;	EMPTY	EMPTY
170	503	3	-1	0	-1	char ntop _ buf [ inet6 _ addrstrlen ] ;	EMPTY	EMPTY
170	505	1	1	0	1	if ( ! nd _ ttest2 ( * cp  numconst ) )	EMPTY	EMPTY
170	506	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	507	2	-1	0	-1	pbit = * cp ;	EMPTY	EMPTY
170	508	2	-1	0	-1	pbyte = ( pbit & ~ numconst ) / numconst ;	EMPTY	EMPTY
170	509	2	-1	0	-1	if ( pbit > numconst ) {	EMPTY	EMPTY
170	510	2	-1	0	-1	nd _ print ( ( ndo  strlit  pbit ) ) ;	EMPTY	EMPTY
170	511	2	-1	0	-1	break ;	EMPTY	EMPTY
170	512	2	-1	0	-1	if ( pbit < numconst ) {	EMPTY	EMPTY
170	513	2	-1	0	-1	if ( ! nd _ ttest2 ( * ( cp + numconst )  sizeof ( a ) - pbyte ) )	EMPTY	EMPTY
170	514	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	515	2	-1	0	-1	memset ( & a  numconst  sizeof ( a ) ) ;	EMPTY	memset
170	516	2	-1	0	-1	memcpy ( & a . s6 _ addr [ pbyte ]  cp + numconst  sizeof ( a ) - pbyte ) ;	EMPTY	memcpy
170	517	2	-1	0	-1	nd _ print ( ( ndo  strlit  pbit	EMPTY	EMPTY
170	518	2	-1	0	-1	inet _ ntop ( af _ inet6  & a  ntop _ buf  sizeof ( ntop _ buf ) ) ) ) ;	EMPTY	inet _ ntop
170	519	2	-1	0	-1	}	EMPTY	EMPTY
170	520	2	-1	0	-1	if ( pbit > numconst ) {	EMPTY	EMPTY
170	521	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
170	522	2	-1	0	-1	if ( ns _ nprint ( ndo  cp + numconst + sizeof ( a ) - pbyte  bp ) == null )	EMPTY	EMPTY
170	523	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	524	2	-1	0	-1	}	EMPTY	EMPTY
170	525	2	-1	0	-1	break ;	EMPTY	EMPTY
170	526	2	-1	0	-1	}	EMPTY	EMPTY
170	527	3	-1	1	-1	# endif	EMPTY	EMPTY
170	529	1	0	0	-1	case t _ opt :	EMPTY	EMPTY
170	530	2	-1	0	-1	nd _ print ( ( ndo  strlit  class ) ) ;	EMPTY	EMPTY
170	531	2	-1	0	-1	if ( opt _ flags & numconst )	EMPTY	EMPTY
170	532	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
170	533	3	-1	0	-1	break	EMPTY	EMPTY
170	535	1	1	1	-1	case t _ unspeca :	EMPTY	EMPTY
170	536	2	-1	0	-1	if ( ! nd _ ttest2 ( * cp  len ) )	len	EMPTY
170	537	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	538	2	-1	0	-1	if ( fn _ printn ( ndo , cp , len , ndo -> ndo _ snapend ) )	len	EMPTY
170	539	2	-1	0	-1	return ( null )	EMPTY	EMPTY
170	540	3	-1	0	-1	break	EMPTY	EMPTY
170	542	1	0	0	-1	case t _ tsig :	EMPTY	EMPTY
170	543	2	-1	0	-1	{	EMPTY	EMPTY
170	544	2	-1	0	-1	if ( cp + len > ndo -> ndo _ snapend )	len	EMPTY
170	545	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	546	2	-1	0	-1	if ( ! ndo -> ndo _ vflag )	ndo _ vflag	EMPTY
170	547	2	-1	0	-1	break ;	EMPTY	EMPTY
170	548	2	-1	0	-1	nd _ print ( ( ndo ,  "   "  ) ) ;	EMPTY	EMPTY
170	549	2	-1	0	-1	if ( ( cp = ns _ nprint ( ndo , cp , bp ) ) == null )	EMPTY	EMPTY
170	550	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	551	2	-1	0	-1	cp += 6 ;	EMPTY	EMPTY
170	552	2	-1	0	-1	if ( ! nd _ ttest2 ( * cp , 2 ) )	EMPTY	EMPTY
170	553	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	554	2	-1	0	-1	nd _ print ( ( ndo ,  "  fudge=%u "  , extract _ 16bits ( cp ) ) ) ;	extract _ 16bits	EMPTY
170	555	2	-1	0	-1	cp += 2 ;	EMPTY	EMPTY
170	556	2	-1	0	-1	if ( ! nd _ ttest2 ( * cp , 2 ) )	EMPTY	EMPTY
170	557	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	558	2	-1	0	-1	nd _ print ( ( ndo ,  "  maclen=%u "  , extract _ 16bits ( cp ) ) ) ;	extract _ 16bits	EMPTY
170	559	2	-1	0	-1	cp += 2 + extract _ 16bits ( cp ) ;	extract _ 16bits	EMPTY
170	560	2	-1	0	-1	if ( ! nd _ ttest2 ( * cp , 2 ) )	EMPTY	EMPTY
170	561	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	562	2	-1	0	-1	nd _ print ( ( ndo ,  "  origid=%u "  , extract _ 16bits ( cp ) ) ) ;	extract _ 16bits	EMPTY
170	563	2	-1	0	-1	cp += 2 ;	EMPTY	EMPTY
170	564	2	-1	0	-1	if ( ! nd _ ttest2 ( * cp , 2 ) )	EMPTY	EMPTY
170	565	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	566	2	-1	0	-1	nd _ print ( ( ndo ,  "  error=%u "  , extract _ 16bits ( cp ) ) ) ;	extract _ 16bits	EMPTY
170	567	2	-1	0	-1	cp += 2 ;	EMPTY	EMPTY
170	568	2	-1	0	-1	if ( ! nd _ ttest2 ( * cp , 2 ) )	EMPTY	EMPTY
170	569	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
170	570	2	-1	0	-1	nd _ print ( ( ndo ,  "  otherlen=%u "  , extract _ 16bits ( cp ) ) ) ;	extract _ 16bits	EMPTY
170	571	3	-1	0	-1	cp += 2 ;	EMPTY	EMPTY
170	572	1	1	0	-1	}	EMPTY	EMPTY
170	573	2	-1	0	-1	}	EMPTY	EMPTY
170	574	2	-1	1	-1	return ( rp ) ;	EMPTY	EMPTY
170	575	3	-1	0	-1	}	EMPTY	EMPTY
170	577	1	0	0	-1	void	EMPTY	EMPTY
170	578	2	-1	0	-1	ns _ print ( netdissect _ options * ndo	EMPTY	EMPTY
170	579	2	-1	0	-1	register const u _ char * bp  u _ int length  int is _ mdns )	EMPTY	EMPTY
170	580	2	-1	0	-1	{	EMPTY	EMPTY
170	581	2	-1	0	-1	register const header * np ;	header	EMPTY
170	582	2	-1	0	-1	register int qdcount  ancount  nscount  arcount ;	qdcount ancount nscount arcount	EMPTY
170	583	2	-1	0	-1	register const u _ char * cp ;	EMPTY	EMPTY
170	584	3	-1	0	-1	uint16 _ t b2 ;	EMPTY	EMPTY
170	586	1	1	0	-1	np = ( const header * ) bp ;	header	EMPTY
170	587	2	-1	0	-1	nd _ tcheck ( * np ) ;	EMPTY	EMPTY
170	589	2	-1	1	-1	qdcount = extract _ 16bits ( & np -> qdcount )	qdcount extract _ 16bits qdcount	EMPTY
170	590	2	-1	0	-1	ancount = extract _ 16bits ( & np -> ancount )	ancount extract _ 16bits ancount	EMPTY
170	591	2	-1	0	-1	nscount = extract _ 16bits ( & np -> nscount )	nscount extract _ 16bits nscount	EMPTY
170	592	3	-1	0	-1	arcount = extract _ 16bits ( & np -> arcount )	arcount extract _ 16bits arcount	EMPTY
170	594	1	1	0	1	if ( dns _ qr ( np ) ) {	EMPTY	EMPTY
170	596	2	-1	1	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
170	597	2	-1	0	-1	extract _ 16bits ( & np -> id )	extract _ 16bits id	EMPTY
170	598	2	-1	0	-1	ns _ ops [ dns _ opcode ( np ) ]	EMPTY	EMPTY
170	599	2	-1	0	-1	ns _ resp [ dns _ rcode ( np ) ]	EMPTY	EMPTY
170	600	2	-1	0	-1	dns _ aa ( np ) ? strlit : strlit	EMPTY	EMPTY
170	601	2	-1	0	-1	dns _ ra ( np ) ? strlit : strlit	EMPTY	EMPTY
170	602	2	-1	0	-1	dns _ tc ( np ) ? strlit : strlit	EMPTY	EMPTY
170	603	3	-1	0	-1	dns _ ad ( np ) ? strlit : strlit ) ) ;	EMPTY	EMPTY
170	605	1	1	0	1	if ( qdcount != numconst )	qdcount	EMPTY
170	606	2	-1	0	-1	nd _ print ( ( ndo  strlit  qdcount ) ) ;	qdcount	EMPTY
170	608	2	-1	1	-1	cp = ( const u _ char * ) ( np + 1 )	EMPTY	EMPTY
170	609	2	-1	0	-1	while ( qdcount -- ) {	qdcount	EMPTY
170	610	2	-1	0	-1	if ( qdcount < extract _ 16bits ( & np -> qdcount ) - numconst )	qdcount extract _ 16bits qdcount	EMPTY
170	611	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
170	612	2	-1	0	-1	if ( ndo -> ndo _ vflag > numconst ) {	ndo _ vflag	EMPTY
170	613	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
170	614	2	-1	0	-1	if ( ( cp = ns _ qprint ( ndo , cp , bp , is _ mdns ) ) == null )	ns _ qprint	EMPTY
170	615	2	-1	0	-1	goto trunc	EMPTY	EMPTY
170	616	2	-1	0	-1	}	EMPTY	EMPTY
170	617	2	-1	0	-1	if ( ( cp = ns _ nskip ( ndo , cp ) ) == null )	ns _ nskip	EMPTY
170	618	2	-1	0	-1	goto trunc	EMPTY	EMPTY
170	619	2	-1	1	-1	cp += 4	EMPTY	EMPTY
170	620	2	-1	0	-1	}	EMPTY	EMPTY
170	621	2	-1	0	-1	}	EMPTY	EMPTY
170	622	2	-1	0	-1	nd _ print ( ( ndo  strlit  ancount  nscount  arcount ) ) ;	ancount nscount arcount	EMPTY
170	623	2	-1	0	-1	if ( ancount -- ) {	ancount	EMPTY
170	624	2	-1	0	-1	if ( ( cp = ns _ rprint ( ndo  cp  bp  is _ mdns ) ) == null )	ns _ rprint	EMPTY
170	625	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
170	626	2	-1	0	-1	while ( cp < ndo -> ndo _ snapend && ancount -- ) {	ancount	EMPTY
170	627	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
170	628	2	-1	0	-1	if ( ( cp = ns _ rprint ( ndo  cp  bp  is _ mdns ) ) == null )	ns _ rprint	EMPTY
170	629	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
170	630	2	-1	0	-1	}	EMPTY	EMPTY
170	631	2	-1	0	-1	}	EMPTY	EMPTY
170	632	2	-1	0	-1	if ( ancount > numconst )	ancount	EMPTY
170	633	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
170	635	2	-1	1	-1	if ( ndo -> ndo _ vflag > 1 ) {	ndo _ vflag	EMPTY
170	636	3	-1	0	-1	if ( cp < ndo -> ndo _ snapend && nscount -- ) {	nscount	EMPTY
170	637	1	1	0	-1	nd _ print ( ( ndo ,  "  ns: "  ) ) ;	EMPTY	EMPTY
170	638	2	-1	0	-1	if ( ( cp = ns _ rprint ( ndo , cp , bp , is _ mdns ) ) == null )	ns _ rprint	EMPTY
170	639	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
170	640	2	-1	0	-1	while ( cp < ndo -> ndo _ snapend && nscount -- ) {	nscount	EMPTY
170	641	2	-1	0	-1	nd _ print ( ( ndo ,  " , "  ) ) ;	EMPTY	EMPTY
170	642	2	-1	0	-1	if ( ( cp = ns _ rprint ( ndo , cp , bp , is _ mdns ) ) == null )	ns _ rprint	EMPTY
170	643	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
170	644	2	-1	0	-1	}	EMPTY	EMPTY
170	645	2	-1	0	-1	}	EMPTY	EMPTY
170	646	2	-1	0	-1	if ( nscount > 0 )	nscount	EMPTY
170	647	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
170	648	2	-1	0	-1	if ( cp < ndo -> ndo _ snapend && arcount -- ) {	arcount	EMPTY
170	649	2	-1	0	-1	nd _ print ( ( ndo ,  "  ar: "  ) ) ;	EMPTY	EMPTY
170	650	2	-1	0	-1	if ( ( cp = ns _ rprint ( ndo , cp , bp , is _ mdns ) ) == null )	ns _ rprint	EMPTY
170	651	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
170	652	2	-1	0	-1	while ( cp < ndo -> ndo _ snapend && arcount -- ) {	arcount	EMPTY
170	653	2	-1	0	-1	nd _ print ( ( ndo ,  " , "  ) ) ;	EMPTY	EMPTY
170	654	2	-1	0	-1	if ( ( cp = ns _ rprint ( ndo , cp , bp , is _ mdns ) ) == null )	ns _ rprint	EMPTY
170	655	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
170	656	2	-1	0	-1	}	EMPTY	EMPTY
170	657	2	-1	0	-1	}	EMPTY	EMPTY
170	658	2	-1	0	-1	if ( arcount > 0 )	arcount	EMPTY
170	659	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
170	660	2	-1	0	-1	}	EMPTY	EMPTY
170	661	2	-1	0	-1	}	EMPTY	EMPTY
170	662	2	-1	0	-1	else {	EMPTY	EMPTY
170	664	2	-1	1	-1	nd _ print ( ( ndo  strlit  extract _ 16bits ( & np -> id )  ns _ ops [ dns _ opcode ( np ) ]	extract _ 16bits id	EMPTY
170	665	2	-1	0	-1	dns _ rd ( np ) ? strlit : strlit	EMPTY	EMPTY
170	666	3	-1	0	-1	dns _ cd ( np ) ? strlit : strlit ) ) ;	EMPTY	EMPTY
170	669	1	1	1	-1	b2 = extract _ 16bits ( ( ( u _ short * ) np ) + 1 )	extract _ 16bits	EMPTY
170	670	2	-1	0	-1	if ( b2 & numconst )	EMPTY	EMPTY
170	671	3	-1	0	-1	nd _ print ( ( ndo  strlit  b2 ) ) ;	EMPTY	EMPTY
170	673	1	0	0	0	if ( dns _ opcode ( np ) == iquery ) {	EMPTY	EMPTY
170	674	2	-1	0	-1	if ( qdcount )	qdcount	EMPTY
170	675	2	-1	0	-1	nd _ print ( ( ndo ,  "  [%dq] "  , qdcount ) ) ;	qdcount	EMPTY
170	676	2	-1	0	-1	if ( ancount != 1 )	ancount	EMPTY
170	677	2	-1	0	-1	nd _ print ( ( ndo ,  "  [%da] "  , ancount ) ) ;	ancount	EMPTY
170	678	2	-1	0	-1	}	EMPTY	EMPTY
170	679	2	-1	0	-1	else {	EMPTY	EMPTY
170	680	2	-1	0	-1	if ( ancount )	ancount	EMPTY
170	681	2	-1	0	-1	nd _ print ( ( ndo ,  "  [%da] "  , ancount ) ) ;	ancount	EMPTY
170	682	2	-1	0	-1	if ( qdcount != 1 )	qdcount	EMPTY
170	683	2	-1	0	-1	nd _ print ( ( ndo ,  "  [%dq] "  , qdcount ) ) ;	qdcount	EMPTY
170	684	2	-1	0	-1	}	EMPTY	EMPTY
170	685	2	-1	0	-1	if ( nscount )	nscount	EMPTY
170	686	2	-1	0	-1	nd _ print ( ( ndo  strlit  nscount ) ) ;	nscount	EMPTY
170	687	2	-1	0	-1	if ( arcount )	arcount	EMPTY
170	688	3	-1	0	-1	nd _ print ( ( ndo  strlit  arcount ) ) ;	arcount	EMPTY
170	690	1	0	0	-1	cp = ( const u _ char * ) ( np + 1 )	EMPTY	EMPTY
170	691	2	-1	0	-1	if ( qdcount -- ) {	qdcount	EMPTY
170	692	2	-1	0	-1	cp = ns _ qprint ( ndo , cp , ( const u _ char * ) np , is _ mdns ) ;	ns _ qprint	EMPTY
170	693	2	-1	0	-1	if ( ! cp )	EMPTY	EMPTY
170	694	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
170	695	2	-1	0	-1	while ( cp < ndo -> ndo _ snapend && qdcount -- ) {	qdcount	EMPTY
170	696	2	-1	0	-1	cp = ns _ qprint ( ndo , ( const u _ char * ) cp ,	ns _ qprint	EMPTY
170	697	2	-1	0	-1	( const u _ char * ) np ,	EMPTY	EMPTY
170	698	2	-1	0	-1	is _ mdns ) ;	EMPTY	EMPTY
170	699	2	-1	0	-1	if ( ! cp )	EMPTY	EMPTY
170	700	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
170	701	2	-1	0	-1	}	EMPTY	EMPTY
170	702	2	-1	0	-1	}	EMPTY	EMPTY
170	703	2	-1	0	-1	if ( qdcount > 0 )	qdcount	EMPTY
170	704	3	-1	0	-1	goto trunc	EMPTY	EMPTY
170	707	1	1	1	1	if ( ndo -> ndo _ vflag > 1 ) {	ndo _ vflag	EMPTY
170	708	2	-1	0	-1	if ( ancount -- ) {	ancount	EMPTY
170	709	2	-1	0	-1	if ( ( cp = ns _ rprint ( ndo , cp , bp , is _ mdns ) ) == null )	ns _ rprint	EMPTY
170	710	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
170	711	2	-1	0	-1	while ( cp < ndo -> ndo _ snapend && ancount -- ) {	ancount	EMPTY
170	712	2	-1	0	-1	nd _ print ( ( ndo ,  " , "  ) ) ;	EMPTY	EMPTY
170	713	2	-1	0	-1	if ( ( cp = ns _ rprint ( ndo , cp , bp , is _ mdns ) ) == null )	ns _ rprint	EMPTY
170	714	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
170	715	2	-1	0	-1	}	EMPTY	EMPTY
170	716	2	-1	0	-1	}	EMPTY	EMPTY
170	717	2	-1	0	-1	if ( ancount > 0 )	ancount	EMPTY
170	718	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
170	719	2	-1	0	-1	if ( cp < ndo -> ndo _ snapend && nscount -- ) {	nscount	EMPTY
170	720	2	-1	0	-1	nd _ print ( ( ndo ,  "  ns: "  ) ) ;	EMPTY	EMPTY
170	721	2	-1	0	-1	if ( ( cp = ns _ rprint ( ndo , cp , bp , is _ mdns ) ) == null )	ns _ rprint	EMPTY
170	722	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
170	723	2	-1	0	-1	while ( nscount -- && cp < ndo -> ndo _ snapend ) {	nscount	EMPTY
170	724	2	-1	0	-1	nd _ print ( ( ndo ,  " , "  ) ) ;	EMPTY	EMPTY
170	725	2	-1	0	-1	if ( ( cp = ns _ rprint ( ndo , cp , bp , is _ mdns ) ) == null )	ns _ rprint	EMPTY
170	726	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
170	727	2	-1	0	-1	}	EMPTY	EMPTY
170	728	2	-1	0	-1	}	EMPTY	EMPTY
170	729	2	-1	0	-1	if ( nscount > 0 )	nscount	EMPTY
170	730	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
170	731	2	-1	0	-1	if ( cp < ndo -> ndo _ snapend && arcount -- ) {	arcount	EMPTY
170	732	2	-1	0	-1	nd _ print ( ( ndo ,  "  ar: "  ) ) ;	EMPTY	EMPTY
170	733	2	-1	0	-1	if ( ( cp = ns _ rprint ( ndo , cp , bp , is _ mdns ) ) == null )	ns _ rprint	EMPTY
170	734	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
170	735	2	-1	0	-1	while ( cp < ndo -> ndo _ snapend && arcount -- ) {	arcount	EMPTY
170	736	3	-1	0	-1	nd _ print ( ( ndo ,  " , "  ) ) ;	EMPTY	EMPTY
170	737	1	0	0	-1	if ( ( cp = ns _ rprint ( ndo , cp , bp , is _ mdns ) ) == null )	ns _ rprint	EMPTY
170	738	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
170	739	2	-1	0	-1	}	EMPTY	EMPTY
170	740	2	-1	0	-1	}	EMPTY	EMPTY
170	741	2	-1	0	-1	if ( arcount > 0 )	arcount	EMPTY
170	742	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
170	743	2	-1	0	-1	}	EMPTY	EMPTY
170	744	2	-1	0	-1	}	EMPTY	EMPTY
170	745	2	-1	0	-1	nd _ print ( ( ndo  strlit  length ) ) ;	EMPTY	EMPTY
170	746	3	-1	0	-1	return ;	EMPTY	EMPTY
170	748	1	0	0	-1	trunc :	EMPTY	EMPTY
170	749	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
170	750	3	-1	0	-1	}	EMPTY	EMPTY
177	19	1	0	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	20	2	-1	0	-1	png _ get _ valid ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr	png _ get _ valid png _ ptr info _ ptr	EMPTY
177	21	2	-1	0	-1	png _ uint _ 32 flag )	flag	EMPTY
177	22	2	-1	0	-1	{	EMPTY	EMPTY
177	23	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null )	png _ ptr info _ ptr	EMPTY
177	24	3	-1	0	-1	return ( info _ ptr -> valid & flag )	info _ ptr valid flag	EMPTY
177	26	1	0	0	0	return ( 0 )	EMPTY	EMPTY
177	27	3	-1	0	-1	}	EMPTY	EMPTY
177	29	1	0	0	-1	png _ size _ t pngapi	png _ size _ t	EMPTY
177	30	2	-1	0	-1	png _ get _ rowbytes ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr )	png _ get _ rowbytes png _ ptr info _ ptr	EMPTY
177	31	2	-1	0	-1	{	EMPTY	EMPTY
177	32	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null )	png _ ptr info _ ptr	EMPTY
177	33	3	-1	0	-1	return ( info _ ptr -> rowbytes )	info _ ptr rowbytes	EMPTY
177	35	1	0	0	0	return ( 0 )	EMPTY	EMPTY
177	36	3	-1	0	-1	}	EMPTY	EMPTY
177	38	1	0	0	0	# ifdef png _ info _ image _ supported	EMPTY	EMPTY
177	39	2	-1	0	-1	png _ bytepp pngapi	png _ bytepp	EMPTY
177	40	2	-1	0	-1	png _ get _ rows ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr )	png _ get _ rows png _ ptr info _ ptr	EMPTY
177	41	2	-1	0	-1	{	EMPTY	EMPTY
177	42	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null )	png _ ptr info _ ptr	EMPTY
177	43	3	-1	0	-1	return ( info _ ptr -> row _ pointers )	info _ ptr row _ pointers	EMPTY
177	45	1	0	0	0	return ( 0 )	EMPTY	EMPTY
177	46	2	-1	0	-1	}	EMPTY	EMPTY
177	47	3	-1	0	-1	# endif	EMPTY	EMPTY
177	49	1	0	0	-1	# ifdef png _ easy _ access _ supported	EMPTY	EMPTY
177	51	1	0	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	52	2	-1	0	-1	png _ get _ image _ width ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr )	png _ get _ image _ width png _ ptr info _ ptr	EMPTY
177	53	2	-1	0	-1	{	EMPTY	EMPTY
177	54	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null )	png _ ptr info _ ptr	EMPTY
177	55	3	-1	0	-1	return info _ ptr -> width	info _ ptr width	EMPTY
177	57	1	0	0	0	return ( 0 )	EMPTY	EMPTY
177	58	3	-1	0	-1	}	EMPTY	EMPTY
177	60	1	0	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	61	2	-1	0	-1	png _ get _ image _ height ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr )	png _ get _ image _ height png _ ptr info _ ptr	EMPTY
177	62	2	-1	0	-1	{	EMPTY	EMPTY
177	63	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null )	png _ ptr info _ ptr	EMPTY
177	64	3	-1	0	-1	return info _ ptr -> height	info _ ptr height	EMPTY
177	66	1	0	0	0	return ( 0 )	EMPTY	EMPTY
177	67	3	-1	0	-1	}	EMPTY	EMPTY
177	69	1	0	0	-1	png _ byte pngapi	EMPTY	EMPTY
177	70	2	-1	0	-1	png _ get _ bit _ depth ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr )	png _ get _ bit _ depth png _ ptr info _ ptr	EMPTY
177	71	2	-1	0	-1	{	EMPTY	EMPTY
177	72	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null )	png _ ptr info _ ptr	EMPTY
177	73	3	-1	0	-1	return info _ ptr -> bit _ depth	info _ ptr bit _ depth	EMPTY
177	75	1	0	0	0	return ( 0 )	EMPTY	EMPTY
177	76	3	-1	0	-1	}	EMPTY	EMPTY
177	78	1	0	0	-1	png _ byte pngapi	EMPTY	EMPTY
177	79	2	-1	0	-1	png _ get _ color _ type ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr )	png _ get _ color _ type png _ ptr info _ ptr	EMPTY
177	80	2	-1	0	-1	{	EMPTY	EMPTY
177	81	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null )	png _ ptr info _ ptr	EMPTY
177	82	3	-1	0	-1	return info _ ptr -> color _ type	info _ ptr color _ type	EMPTY
177	84	1	0	0	0	return ( 0 )	EMPTY	EMPTY
177	85	3	-1	0	-1	}	EMPTY	EMPTY
177	87	1	0	0	-1	png _ byte pngapi	EMPTY	EMPTY
177	88	2	-1	0	-1	png _ get _ filter _ type ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr )	png _ get _ filter _ type png _ ptr info _ ptr	EMPTY
177	89	2	-1	0	-1	{	EMPTY	EMPTY
177	90	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null )	png _ ptr info _ ptr	EMPTY
177	91	3	-1	0	-1	return info _ ptr -> filter _ type	info _ ptr filter _ type	EMPTY
177	93	1	0	0	0	return ( 0 )	EMPTY	EMPTY
177	94	3	-1	0	-1	}	EMPTY	EMPTY
177	96	1	0	0	-1	png _ byte pngapi	EMPTY	EMPTY
177	97	2	-1	0	-1	png _ get _ interlace _ type ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr )	png _ get _ interlace _ type png _ ptr info _ ptr	EMPTY
177	98	2	-1	0	-1	{	EMPTY	EMPTY
177	99	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null )	png _ ptr info _ ptr	EMPTY
177	100	3	-1	0	-1	return info _ ptr -> interlace _ type	info _ ptr interlace _ type	EMPTY
177	102	1	0	0	0	return ( 0 )	EMPTY	EMPTY
177	103	3	-1	0	-1	}	EMPTY	EMPTY
177	105	1	0	0	-1	png _ byte pngapi	EMPTY	EMPTY
177	106	2	-1	0	-1	png _ get _ compression _ type ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr )	png _ get _ compression _ type png _ ptr info _ ptr	EMPTY
177	107	2	-1	0	-1	{	EMPTY	EMPTY
177	108	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null )	png _ ptr info _ ptr	EMPTY
177	109	3	-1	0	-1	return info _ ptr -> compression _ type	info _ ptr compression _ type	EMPTY
177	111	1	0	0	0	return ( 0 )	EMPTY	EMPTY
177	112	3	-1	0	-1	}	EMPTY	EMPTY
177	114	1	0	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	115	2	-1	0	-1	png _ get _ x _ pixels _ per _ meter ( png _ const _ structrp png _ ptr  png _ const _ inforp	png _ ptr	EMPTY
177	116	2	-1	0	-1	info _ ptr )	info _ ptr	EMPTY
177	117	2	-1	0	-1	{	EMPTY	EMPTY
177	118	2	-1	0	-1	# ifdef png _ phys _ supported	EMPTY	EMPTY
177	119	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	120	2	-1	0	-1	( info _ ptr -> valid & png _ info _ phys ) != 0 )	info _ ptr valid	EMPTY
177	121	2	-1	0	-1	{	EMPTY	EMPTY
177	122	2	-1	0	-1	png _ debug1 ( 1 ,  " in %s retrieval function "  ,	EMPTY	EMPTY
177	123	3	-1	0	-1	" png _ get _ x _ pixels _ per _ meter "  ) ;	EMPTY	EMPTY
177	125	1	0	0	0	if ( info _ ptr -> phys _ unit _ type == png _ resolution _ meter )	info _ ptr phys _ unit _ type	EMPTY
177	126	2	-1	0	-1	return ( info _ ptr -> x _ pixels _ per _ unit ) ;	info _ ptr x _ pixels _ per _ unit	EMPTY
177	127	2	-1	0	-1	}	EMPTY	EMPTY
177	128	2	-1	0	-1	# else	EMPTY	EMPTY
177	129	2	-1	0	-1	png _ unused ( png _ ptr )	png _ ptr	EMPTY
177	130	2	-1	0	-1	png _ unused ( info _ ptr )	info _ ptr	EMPTY
177	131	3	-1	0	-1	# endif	EMPTY	EMPTY
177	133	1	0	0	0	return ( 0 )	EMPTY	EMPTY
177	134	3	-1	0	-1	}	EMPTY	EMPTY
177	136	1	0	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	137	2	-1	0	-1	png _ get _ y _ pixels _ per _ meter ( png _ const _ structrp png _ ptr  png _ const _ inforp	png _ ptr	EMPTY
177	138	2	-1	0	-1	info _ ptr )	info _ ptr	EMPTY
177	139	2	-1	0	-1	{	EMPTY	EMPTY
177	140	2	-1	0	-1	# ifdef png _ phys _ supported	EMPTY	EMPTY
177	141	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	142	2	-1	0	-1	( info _ ptr -> valid & png _ info _ phys ) != 0 )	info _ ptr valid	EMPTY
177	143	2	-1	0	-1	{	EMPTY	EMPTY
177	144	2	-1	0	-1	png _ debug1 ( 1 ,  " in %s retrieval function "  ,	EMPTY	EMPTY
177	145	3	-1	0	-1	" png _ get _ y _ pixels _ per _ meter "  ) ;	EMPTY	EMPTY
177	147	1	0	0	0	if ( info _ ptr -> phys _ unit _ type == png _ resolution _ meter )	info _ ptr phys _ unit _ type	EMPTY
177	148	2	-1	0	-1	return ( info _ ptr -> y _ pixels _ per _ unit ) ;	info _ ptr y _ pixels _ per _ unit	EMPTY
177	149	2	-1	0	-1	}	EMPTY	EMPTY
177	150	2	-1	0	-1	# else	EMPTY	EMPTY
177	151	2	-1	0	-1	png _ unused ( png _ ptr )	png _ ptr	EMPTY
177	152	2	-1	0	-1	png _ unused ( info _ ptr )	info _ ptr	EMPTY
177	153	3	-1	0	-1	# endif	EMPTY	EMPTY
177	155	1	0	0	0	return ( 0 )	EMPTY	EMPTY
177	156	3	-1	0	-1	}	EMPTY	EMPTY
177	158	1	0	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	159	2	-1	0	-1	png _ get _ pixels _ per _ meter ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr )	png _ get _ pixels _ per _ meter png _ ptr info _ ptr	EMPTY
177	160	2	-1	0	-1	{	EMPTY	EMPTY
177	161	2	-1	0	-1	# ifdef png _ phys _ supported	EMPTY	EMPTY
177	162	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	163	2	-1	0	-1	( info _ ptr -> valid & png _ info _ phys ) != 0 )	info _ ptr valid	EMPTY
177	164	2	-1	0	-1	{	EMPTY	EMPTY
177	165	3	-1	0	-1	png _ debug1 ( 1 ,  " in %s retrieval function "  ,  " png _ get _ pixels _ per _ meter "  ) ;	EMPTY	EMPTY
177	167	1	0	0	0	if ( info _ ptr -> phys _ unit _ type == png _ resolution _ meter &&	info _ ptr phys _ unit _ type	EMPTY
177	168	2	-1	0	-1	info _ ptr -> x _ pixels _ per _ unit == info _ ptr -> y _ pixels _ per _ unit )	info _ ptr x _ pixels _ per _ unit info _ ptr y _ pixels _ per _ unit	EMPTY
177	169	2	-1	0	-1	return ( info _ ptr -> x _ pixels _ per _ unit ) ;	info _ ptr x _ pixels _ per _ unit	EMPTY
177	170	2	-1	0	-1	}	EMPTY	EMPTY
177	171	2	-1	0	-1	# else	EMPTY	EMPTY
177	172	2	-1	0	-1	png _ unused ( png _ ptr )	png _ ptr	EMPTY
177	173	2	-1	0	-1	png _ unused ( info _ ptr )	info _ ptr	EMPTY
177	174	3	-1	0	-1	# endif	EMPTY	EMPTY
177	176	1	0	0	0	return ( 0 )	EMPTY	EMPTY
177	177	3	-1	0	-1	}	EMPTY	EMPTY
177	179	1	0	0	0	# ifdef png _ floating _ point _ supported	EMPTY	EMPTY
177	180	2	-1	0	-1	float pngapi	EMPTY	EMPTY
177	181	2	-1	0	-1	png _ get _ pixel _ aspect _ ratio ( png _ const _ structrp png _ ptr  png _ const _ inforp	png _ get _ pixel _ aspect _ ratio png _ ptr	EMPTY
177	182	2	-1	0	-1	info _ ptr )	info _ ptr	EMPTY
177	183	2	-1	0	-1	{	EMPTY	EMPTY
177	184	2	-1	0	-1	# ifdef png _ read _ phys _ supported	EMPTY	EMPTY
177	185	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	186	2	-1	0	-1	( info _ ptr -> valid & png _ info _ phys ) != 0 )	info _ ptr valid	EMPTY
177	187	2	-1	0	-1	{	EMPTY	EMPTY
177	188	3	-1	0	-1	png _ debug1 ( 1 ,  " in %s retrieval function "  ,  " png _ get _ aspect _ ratio "  ) ;	EMPTY	EMPTY
177	190	1	0	0	0	if ( info _ ptr -> x _ pixels _ per _ unit != 0 )	info _ ptr x _ pixels _ per _ unit	EMPTY
177	191	2	-1	0	-1	return ( ( float ) ( ( float ) info _ ptr -> y _ pixels _ per _ unit	info _ ptr y _ pixels _ per _ unit	EMPTY
177	192	2	-1	0	-1	/ ( float ) info _ ptr -> x _ pixels _ per _ unit ) ) ;	info _ ptr x _ pixels _ per _ unit	EMPTY
177	193	2	-1	0	-1	}	EMPTY	EMPTY
177	194	2	-1	0	-1	# else	EMPTY	EMPTY
177	195	2	-1	0	-1	png _ unused ( png _ ptr )	png _ ptr	EMPTY
177	196	2	-1	0	-1	png _ unused ( info _ ptr )	info _ ptr	EMPTY
177	197	3	-1	0	-1	# endif	EMPTY	EMPTY
177	199	1	0	0	0	return ( ( float ) 0.0 )	EMPTY	EMPTY
177	200	2	-1	0	-1	}	EMPTY	EMPTY
177	201	3	-1	0	-1	# endif	EMPTY	EMPTY
177	203	1	0	0	0	# ifdef png _ fixed _ point _ supported	EMPTY	EMPTY
177	204	2	-1	0	-1	png _ fixed _ point pngapi	png _ fixed _ point	EMPTY
177	205	2	-1	0	-1	png _ get _ pixel _ aspect _ ratio _ fixed ( png _ const _ structrp png _ ptr	png _ ptr	EMPTY
177	206	2	-1	0	-1	png _ const _ inforp info _ ptr )	info _ ptr	EMPTY
177	207	2	-1	0	-1	{	EMPTY	EMPTY
177	208	2	-1	0	-1	# ifdef png _ read _ phys _ supported	EMPTY	EMPTY
177	209	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	210	2	-1	0	-1	( info _ ptr -> valid & png _ info _ phys ) != numconst &&	info _ ptr valid	EMPTY
177	211	2	-1	0	-1	info _ ptr -> x _ pixels _ per _ unit > numconst && info _ ptr -> y _ pixels _ per _ unit > numconst &&	info _ ptr x _ pixels _ per _ unit info _ ptr y _ pixels _ per _ unit	EMPTY
177	212	2	-1	0	-1	info _ ptr -> x _ pixels _ per _ unit <= png _ uint _ 31 _ max &&	info _ ptr x _ pixels _ per _ unit	EMPTY
177	213	2	-1	0	-1	info _ ptr -> y _ pixels _ per _ unit <= png _ uint _ 31 _ max )	info _ ptr y _ pixels _ per _ unit	EMPTY
177	214	2	-1	0	-1	{	EMPTY	EMPTY
177	215	3	-1	0	-1	png _ fixed _ point res ;	png _ fixed _ point res	EMPTY
177	217	1	0	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
177	222	1	1	1	1	if ( png _ muldiv ( & res , ( png _ int _ 32 ) info _ ptr -> y _ pixels _ per _ unit , png _ fp _ 1 ,	png _ muldiv res info _ ptr y _ pixels _ per _ unit	EMPTY
177	223	2	-1	0	-1	( png _ int _ 32 ) info _ ptr -> x _ pixels _ per _ unit ) != 0 )	info _ ptr x _ pixels _ per _ unit	EMPTY
177	224	2	-1	0	-1	return res	res	EMPTY
177	225	2	-1	0	-1	}	EMPTY	EMPTY
177	226	2	-1	0	-1	# else	EMPTY	EMPTY
177	227	2	-1	0	-1	png _ unused ( png _ ptr )	png _ ptr	EMPTY
177	228	2	-1	0	-1	png _ unused ( info _ ptr )	info _ ptr	EMPTY
177	229	3	-1	0	-1	# endif	EMPTY	EMPTY
177	231	1	0	0	0	return numconst ;	EMPTY	EMPTY
177	232	2	-1	0	-1	}	EMPTY	EMPTY
177	233	3	-1	0	-1	# endif	EMPTY	EMPTY
177	235	1	0	0	-1	png _ int _ 32 pngapi	EMPTY	EMPTY
177	236	2	-1	0	-1	png _ get _ x _ offset _ microns ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr )	png _ ptr info _ ptr	EMPTY
177	237	2	-1	0	-1	{	EMPTY	EMPTY
177	238	2	-1	0	-1	# ifdef png _ offs _ supported	EMPTY	EMPTY
177	239	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	240	2	-1	0	-1	( info _ ptr -> valid & png _ info _ offs ) != numconst )	info _ ptr valid	EMPTY
177	241	2	-1	0	-1	{	EMPTY	EMPTY
177	242	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
177	244	1	0	0	0	if ( info _ ptr -> offset _ unit _ type == png _ offset _ micrometer )	info _ ptr offset _ unit _ type	EMPTY
177	245	2	-1	0	-1	return ( info _ ptr -> x _ offset ) ;	info _ ptr x _ offset	EMPTY
177	246	2	-1	0	-1	}	EMPTY	EMPTY
177	247	2	-1	0	-1	# else	EMPTY	EMPTY
177	248	2	-1	0	-1	png _ unused ( png _ ptr )	png _ ptr	EMPTY
177	249	2	-1	0	-1	png _ unused ( info _ ptr )	info _ ptr	EMPTY
177	250	3	-1	0	-1	# endif	EMPTY	EMPTY
177	252	1	0	0	0	return ( numconst ) ;	EMPTY	EMPTY
177	253	3	-1	0	-1	}	EMPTY	EMPTY
177	255	1	0	0	-1	png _ int _ 32 pngapi	EMPTY	EMPTY
177	256	2	-1	0	-1	png _ get _ y _ offset _ microns ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr )	png _ ptr info _ ptr	EMPTY
177	257	2	-1	0	-1	{	EMPTY	EMPTY
177	258	2	-1	0	-1	# ifdef png _ offs _ supported	EMPTY	EMPTY
177	259	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	260	2	-1	0	-1	( info _ ptr -> valid & png _ info _ offs ) != numconst )	info _ ptr valid	EMPTY
177	261	2	-1	0	-1	{	EMPTY	EMPTY
177	262	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
177	264	1	0	0	0	if ( info _ ptr -> offset _ unit _ type == png _ offset _ micrometer )	info _ ptr offset _ unit _ type	EMPTY
177	265	2	-1	0	-1	return ( info _ ptr -> y _ offset ) ;	info _ ptr y _ offset	EMPTY
177	266	2	-1	0	-1	}	EMPTY	EMPTY
177	267	2	-1	0	-1	# else	EMPTY	EMPTY
177	268	2	-1	0	-1	png _ unused ( png _ ptr )	png _ ptr	EMPTY
177	269	2	-1	0	-1	png _ unused ( info _ ptr )	info _ ptr	EMPTY
177	270	3	-1	0	-1	# endif	EMPTY	EMPTY
177	272	1	0	0	0	return ( numconst ) ;	EMPTY	EMPTY
177	273	3	-1	0	-1	}	EMPTY	EMPTY
177	275	1	0	0	-1	png _ int _ 32 pngapi	EMPTY	EMPTY
177	276	2	-1	0	-1	png _ get _ x _ offset _ pixels ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr )	png _ get _ x _ offset _ pixels png _ ptr info _ ptr	EMPTY
177	277	2	-1	0	-1	{	EMPTY	EMPTY
177	278	2	-1	0	-1	# ifdef png _ offs _ supported	EMPTY	EMPTY
177	279	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	280	2	-1	0	-1	( info _ ptr -> valid & png _ info _ offs ) != numconst )	info _ ptr valid	EMPTY
177	281	2	-1	0	-1	{	EMPTY	EMPTY
177	282	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
177	284	1	0	0	0	if ( info _ ptr -> offset _ unit _ type == png _ offset _ pixel )	info _ ptr offset _ unit _ type	EMPTY
177	285	2	-1	0	-1	return ( info _ ptr -> x _ offset ) ;	info _ ptr x _ offset	EMPTY
177	286	2	-1	0	-1	}	EMPTY	EMPTY
177	287	2	-1	0	-1	# else	EMPTY	EMPTY
177	288	2	-1	0	-1	png _ unused ( png _ ptr )	png _ ptr	EMPTY
177	289	2	-1	0	-1	png _ unused ( info _ ptr )	info _ ptr	EMPTY
177	290	3	-1	0	-1	# endif	EMPTY	EMPTY
177	292	1	0	0	0	return ( numconst ) ;	EMPTY	EMPTY
177	293	3	-1	0	-1	}	EMPTY	EMPTY
177	295	1	0	0	-1	png _ int _ 32 pngapi	EMPTY	EMPTY
177	296	2	-1	0	-1	png _ get _ y _ offset _ pixels ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr )	png _ ptr info _ ptr	EMPTY
177	297	2	-1	0	-1	{	EMPTY	EMPTY
177	298	2	-1	0	-1	# ifdef png _ offs _ supported	EMPTY	EMPTY
177	299	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	300	2	-1	0	-1	( info _ ptr -> valid & png _ info _ offs ) != numconst )	info _ ptr valid	EMPTY
177	301	2	-1	0	-1	{	EMPTY	EMPTY
177	302	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
177	304	1	0	0	0	if ( info _ ptr -> offset _ unit _ type == png _ offset _ pixel )	info _ ptr offset _ unit _ type	EMPTY
177	305	2	-1	0	-1	return ( info _ ptr -> y _ offset ) ;	info _ ptr y _ offset	EMPTY
177	306	2	-1	0	-1	}	EMPTY	EMPTY
177	307	2	-1	0	-1	# else	EMPTY	EMPTY
177	308	2	-1	0	-1	png _ unused ( png _ ptr )	png _ ptr	EMPTY
177	309	2	-1	0	-1	png _ unused ( info _ ptr )	info _ ptr	EMPTY
177	310	3	-1	0	-1	# endif	EMPTY	EMPTY
177	312	1	0	0	0	return ( numconst ) ;	EMPTY	EMPTY
177	313	3	-1	0	-1	}	EMPTY	EMPTY
177	315	1	1	0	1	# ifdef png _ inch _ conversions _ supported	EMPTY	EMPTY
177	316	2	-1	0	-1	static png _ uint _ 32	EMPTY	EMPTY
177	317	2	-1	0	-1	ppi _ from _ ppm ( png _ uint _ 32 ppm )	EMPTY	EMPTY
177	318	2	-1	0	-1	{	EMPTY	EMPTY
177	319	2	-1	0	-1	# if numconst	EMPTY	EMPTY
177	323	2	-1	1	-1	png _ uint _ 32 t1001  t1101 ;	EMPTY	EMPTY
177	324	2	-1	1	-1	ppm >>= numconst ;	EMPTY	EMPTY
177	325	2	-1	1	-1	t1001 = ppm + ( ppm >> numconst ) ;	EMPTY	EMPTY
177	326	2	-1	1	-1	t1101 = t1001 + ( ppm >> numconst ) ;	EMPTY	EMPTY
177	327	2	-1	1	-1	ppm >>= numconst ;	EMPTY	EMPTY
177	328	2	-1	1	-1	t1101 += t1101 >> numconst ;	EMPTY	EMPTY
177	329	2	-1	1	-1	t1001 >>= numconst ;	EMPTY	EMPTY
177	330	2	-1	1	-1	t1001 += t1001 >> numconst ;	EMPTY	EMPTY
177	331	2	-1	1	-1	ppm += t1001 ;	EMPTY	EMPTY
177	332	2	-1	1	-1	ppm += t1101 ;	EMPTY	EMPTY
177	333	2	-1	1	-1	return ( ppm + numconst ) >> numconst ;	EMPTY	EMPTY
177	334	2	-1	0	-1	# else	EMPTY	EMPTY
177	338	2	-1	1	-1	png _ fixed _ point result ;	png _ fixed _ point result	EMPTY
177	339	2	-1	0	-1	if ( ppm <= png _ uint _ 31 _ max && png _ muldiv ( & result , ( png _ int _ 32 ) ppm , 127 ,	png _ muldiv result	EMPTY
177	340	2	-1	0	-1	5000 ) != 0 )	EMPTY	EMPTY
177	341	3	-1	0	-1	return result	result	EMPTY
177	344	1	1	1	1	return 0	EMPTY	EMPTY
177	345	2	-1	0	-1	# endif	EMPTY	EMPTY
177	346	3	-1	0	-1	}	EMPTY	EMPTY
177	348	1	0	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	349	2	-1	0	-1	png _ get _ pixels _ per _ inch ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr )	png _ ptr info _ ptr	EMPTY
177	350	2	-1	0	-1	{	EMPTY	EMPTY
177	351	2	-1	0	-1	return ppi _ from _ ppm ( png _ get _ pixels _ per _ meter ( png _ ptr  info _ ptr ) ) ;	png _ get _ pixels _ per _ meter png _ ptr info _ ptr	EMPTY
177	352	3	-1	0	-1	}	EMPTY	EMPTY
177	354	1	0	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	355	2	-1	0	-1	png _ get _ x _ pixels _ per _ inch ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr )	png _ ptr info _ ptr	EMPTY
177	356	2	-1	0	-1	{	EMPTY	EMPTY
177	357	2	-1	0	-1	return ppi _ from _ ppm ( png _ get _ x _ pixels _ per _ meter ( png _ ptr  info _ ptr ) ) ;	png _ ptr info _ ptr	EMPTY
177	358	3	-1	0	-1	}	EMPTY	EMPTY
177	360	1	0	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	361	2	-1	0	-1	png _ get _ y _ pixels _ per _ inch ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr )	png _ ptr info _ ptr	EMPTY
177	362	2	-1	0	-1	{	EMPTY	EMPTY
177	363	2	-1	0	-1	return ppi _ from _ ppm ( png _ get _ y _ pixels _ per _ meter ( png _ ptr  info _ ptr ) ) ;	png _ ptr info _ ptr	EMPTY
177	364	3	-1	0	-1	}	EMPTY	EMPTY
177	366	1	1	0	1	# ifdef png _ fixed _ point _ supported	EMPTY	EMPTY
177	367	2	-1	0	-1	static png _ fixed _ point	png _ fixed _ point	EMPTY
177	368	2	-1	0	-1	png _ fixed _ inches _ from _ microns ( png _ const _ structrp png _ ptr  png _ int _ 32 microns )	png _ ptr	EMPTY
177	369	2	-1	0	-1	{	EMPTY	EMPTY
177	375	2	-1	1	-1	return png _ muldiv _ warn ( png _ ptr , microns , 500 , 127 )	png _ muldiv _ warn png _ ptr	EMPTY
177	376	3	-1	0	-1	}	EMPTY	EMPTY
177	378	1	0	0	-1	png _ fixed _ point pngapi	png _ fixed _ point	EMPTY
177	379	2	-1	0	-1	png _ get _ x _ offset _ inches _ fixed ( png _ const _ structrp png _ ptr	png _ get _ x _ offset _ inches _ fixed png _ ptr	EMPTY
177	380	2	-1	0	-1	png _ const _ inforp info _ ptr )	info _ ptr	EMPTY
177	381	2	-1	0	-1	{	EMPTY	EMPTY
177	382	2	-1	0	-1	return png _ fixed _ inches _ from _ microns ( png _ ptr	png _ ptr	EMPTY
177	383	2	-1	0	-1	png _ get _ x _ offset _ microns ( png _ ptr  info _ ptr ) ) ;	png _ ptr info _ ptr	EMPTY
177	384	2	-1	0	-1	}	EMPTY	EMPTY
177	385	3	-1	0	-1	# endif	EMPTY	EMPTY
177	387	1	0	0	0	# ifdef png _ fixed _ point _ supported	EMPTY	EMPTY
177	388	2	-1	0	-1	png _ fixed _ point pngapi	png _ fixed _ point	EMPTY
177	389	2	-1	0	-1	png _ get _ y _ offset _ inches _ fixed ( png _ const _ structrp png _ ptr	png _ get _ y _ offset _ inches _ fixed png _ ptr	EMPTY
177	390	2	-1	0	-1	png _ const _ inforp info _ ptr )	info _ ptr	EMPTY
177	391	2	-1	0	-1	{	EMPTY	EMPTY
177	392	2	-1	0	-1	return png _ fixed _ inches _ from _ microns ( png _ ptr	png _ ptr	EMPTY
177	393	2	-1	0	-1	png _ get _ y _ offset _ microns ( png _ ptr  info _ ptr ) ) ;	png _ ptr info _ ptr	EMPTY
177	394	2	-1	0	-1	}	EMPTY	EMPTY
177	395	3	-1	0	-1	# endif	EMPTY	EMPTY
177	397	1	1	0	1	# ifdef png _ floating _ point _ supported	EMPTY	EMPTY
177	398	2	-1	0	-1	float pngapi	EMPTY	EMPTY
177	399	2	-1	0	-1	png _ get _ x _ offset _ inches ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr )	png _ ptr info _ ptr	EMPTY
177	400	2	-1	0	-1	{	EMPTY	EMPTY
177	404	2	-1	1	-1	return ( float ) ( png _ get _ x _ offset _ microns ( png _ ptr , info _ ptr ) * .00003937 )	png _ ptr info _ ptr	EMPTY
177	405	2	-1	0	-1	}	EMPTY	EMPTY
177	406	3	-1	0	-1	# endif	EMPTY	EMPTY
177	408	1	1	0	1	# ifdef png _ floating _ point _ supported	EMPTY	EMPTY
177	409	2	-1	0	-1	float pngapi	EMPTY	EMPTY
177	410	2	-1	0	-1	png _ get _ y _ offset _ inches ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr )	png _ ptr info _ ptr	EMPTY
177	411	2	-1	0	-1	{	EMPTY	EMPTY
177	415	2	-1	1	-1	return ( float ) ( png _ get _ y _ offset _ microns ( png _ ptr , info _ ptr ) * .00003937 )	png _ ptr info _ ptr	EMPTY
177	416	2	-1	0	-1	}	EMPTY	EMPTY
177	417	3	-1	0	-1	# endif	EMPTY	EMPTY
177	419	1	0	0	0	# ifdef png _ phys _ supported	EMPTY	EMPTY
177	420	2	-1	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	421	2	-1	0	-1	png _ get _ phys _ dpi ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
177	422	2	-1	0	-1	png _ uint _ 32 * res _ x  png _ uint _ 32 * res _ y  int * unit _ type )	EMPTY	EMPTY
177	423	2	-1	0	-1	{	EMPTY	EMPTY
177	424	3	-1	0	-1	png _ uint _ 32 retval = numconst ;	EMPTY	EMPTY
177	426	1	0	0	0	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	427	2	-1	0	-1	( info _ ptr -> valid & png _ info _ phys ) != numconst )	info _ ptr valid	EMPTY
177	428	2	-1	0	-1	{	EMPTY	EMPTY
177	429	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
177	431	1	0	0	0	if ( res _ x != null )	EMPTY	EMPTY
177	432	3	-1	0	-1	{	EMPTY	EMPTY
177	434	1	0	0	-1	retval |= png _ info _ phys ;	EMPTY	EMPTY
177	435	3	-1	0	-1	}	EMPTY	EMPTY
177	437	1	0	0	0	if ( res _ y != null )	EMPTY	EMPTY
177	438	3	-1	0	-1	{	EMPTY	EMPTY
177	440	1	0	0	-1	retval |= png _ info _ phys ;	EMPTY	EMPTY
177	441	3	-1	0	-1	}	EMPTY	EMPTY
177	443	1	0	0	0	if ( unit _ type != null )	EMPTY	EMPTY
177	444	3	-1	0	-1	{	EMPTY	EMPTY
177	446	1	0	0	-1	retval |= png _ info _ phys ;	EMPTY	EMPTY
177	448	1	0	0	0	if ( * unit _ type == numconst )	EMPTY	EMPTY
177	449	2	-1	0	-1	{	EMPTY	EMPTY
177	450	2	-1	0	-1	if ( res _ x != null ) * res _ x = ( png _ uint _ 32 ) ( * res _ x * numconst + numconst ) ;	EMPTY	EMPTY
177	451	2	-1	0	-1	if ( res _ y != null ) * res _ y = ( png _ uint _ 32 ) ( * res _ y * numconst + numconst ) ;	EMPTY	EMPTY
177	452	2	-1	0	-1	}	EMPTY	EMPTY
177	453	2	-1	0	-1	}	EMPTY	EMPTY
177	454	3	-1	0	-1	}	EMPTY	EMPTY
177	456	1	1	0	1	return ( retval ) ;	EMPTY	EMPTY
177	457	2	-1	0	-1	}	EMPTY	EMPTY
177	458	2	-1	1	-1	# endif	EMPTY	EMPTY
177	459	3	-1	1	-1	# endif	EMPTY	EMPTY
177	463	1	1	1	-1	# endif	EMPTY	EMPTY
177	466	1	0	0	-1	png _ byte pngapi	EMPTY	EMPTY
177	467	2	-1	0	-1	png _ get _ channels ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr )	png _ get _ channels png _ ptr info _ ptr	EMPTY
177	468	2	-1	0	-1	{	EMPTY	EMPTY
177	469	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null )	png _ ptr info _ ptr	EMPTY
177	470	3	-1	0	-1	return ( info _ ptr -> channels )	info _ ptr channels	EMPTY
177	472	1	0	0	0	return ( 0 )	EMPTY	EMPTY
177	473	3	-1	0	-1	}	EMPTY	EMPTY
177	475	1	0	0	0	# ifdef png _ read _ supported	EMPTY	EMPTY
177	476	2	-1	0	-1	png _ const _ bytep pngapi	EMPTY	EMPTY
177	477	2	-1	0	-1	png _ get _ signature ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr )	png _ get _ signature png _ ptr info _ ptr	EMPTY
177	478	2	-1	0	-1	{	EMPTY	EMPTY
177	479	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null )	png _ ptr info _ ptr	EMPTY
177	480	3	-1	0	-1	return ( info _ ptr -> signature )	info _ ptr signature	EMPTY
177	482	1	0	0	0	return ( null )	EMPTY	EMPTY
177	483	2	-1	0	-1	}	EMPTY	EMPTY
177	484	3	-1	0	-1	# endif	EMPTY	EMPTY
177	486	1	0	0	0	# ifdef png _ bkgd _ supported	EMPTY	EMPTY
177	487	2	-1	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	488	2	-1	0	-1	png _ get _ bkgd ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
177	489	2	-1	0	-1	png _ color _ 16p * background )	background	EMPTY
177	490	2	-1	0	-1	{	EMPTY	EMPTY
177	491	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	492	2	-1	0	-1	( info _ ptr -> valid & png _ info _ bkgd ) != 0 &&	info _ ptr valid	EMPTY
177	493	2	-1	0	-1	background != null )	background	EMPTY
177	494	2	-1	0	-1	{	EMPTY	EMPTY
177	495	3	-1	0	-1	png _ debug1 ( 1 ,  " in %s retrieval function "  ,  " bkgd "  ) ;	EMPTY	EMPTY
177	497	1	0	0	-1	* background = & ( info _ ptr -> background ) ;	background info _ ptr background	EMPTY
177	498	2	-1	0	-1	return ( png _ info _ bkgd ) ;	EMPTY	EMPTY
177	499	3	-1	0	-1	}	EMPTY	EMPTY
177	501	1	0	0	0	return ( 0 )	EMPTY	EMPTY
177	502	2	-1	0	-1	}	EMPTY	EMPTY
177	503	3	-1	0	-1	# endif	EMPTY	EMPTY
177	505	1	1	0	-1	# ifdef png _ chrm _ supported	EMPTY	EMPTY
177	510	2	-1	1	-1	# ifdef png _ floating _ point _ supported	EMPTY	EMPTY
177	511	2	-1	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	512	2	-1	0	-1	png _ get _ chrm ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
177	513	2	-1	0	-1	double * white _ x  double * white _ y  double * red _ x  double * red _ y	EMPTY	EMPTY
177	514	2	-1	0	-1	double * green _ x  double * green _ y  double * blue _ x  double * blue _ y )	EMPTY	EMPTY
177	515	2	-1	0	-1	{	EMPTY	EMPTY
177	522	2	-1	1	-1	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	523	2	-1	0	-1	( info _ ptr -> colorspace . flags & png _ colorspace _ have _ endpoints ) != 0 )	info _ ptr colorspace flags	EMPTY
177	524	2	-1	0	-1	{	EMPTY	EMPTY
177	525	3	-1	0	-1	png _ debug1 ( 1 ,  " in %s retrieval function "  ,  " chrm "  ) ;	EMPTY	EMPTY
177	527	1	0	0	0	if ( white _ x != null )	EMPTY	EMPTY
177	528	2	-1	0	-1	* white _ x = png _ float ( png _ ptr ,	png _ ptr	EMPTY
177	529	2	-1	0	-1	info _ ptr -> colorspace . end _ points _ xy . whitex ,  " chrm white x "  ) ;	info _ ptr colorspace end _ points _ xy	EMPTY
177	530	2	-1	0	-1	if ( white _ y != null )	EMPTY	EMPTY
177	531	2	-1	0	-1	* white _ y = png _ float ( png _ ptr ,	png _ ptr	EMPTY
177	532	2	-1	0	-1	info _ ptr -> colorspace . end _ points _ xy . whitey ,  " chrm white y "  ) ;	info _ ptr colorspace end _ points _ xy	EMPTY
177	533	2	-1	0	-1	if ( red _ x != null )	EMPTY	EMPTY
177	534	2	-1	0	-1	* red _ x = png _ float ( png _ ptr , info _ ptr -> colorspace . end _ points _ xy . redx ,	png _ ptr info _ ptr colorspace end _ points _ xy	EMPTY
177	535	2	-1	0	-1	" chrm red x "  ) ;	red	EMPTY
177	536	2	-1	0	-1	if ( red _ y != null )	EMPTY	EMPTY
177	537	2	-1	0	-1	* red _ y = png _ float ( png _ ptr , info _ ptr -> colorspace . end _ points _ xy . redy ,	png _ ptr info _ ptr colorspace end _ points _ xy	EMPTY
177	538	2	-1	0	-1	" chrm red y "  ) ;	red	EMPTY
177	539	2	-1	0	-1	if ( green _ x != null )	EMPTY	EMPTY
177	540	2	-1	0	-1	* green _ x = png _ float ( png _ ptr ,	png _ ptr	EMPTY
177	541	2	-1	0	-1	info _ ptr -> colorspace . end _ points _ xy . greenx ,  " chrm green x "  ) ;	info _ ptr colorspace end _ points _ xy green	EMPTY
177	542	2	-1	0	-1	if ( green _ y != null )	EMPTY	EMPTY
177	543	2	-1	0	-1	* green _ y = png _ float ( png _ ptr ,	png _ ptr	EMPTY
177	544	2	-1	0	-1	info _ ptr -> colorspace . end _ points _ xy . greeny ,  " chrm green y "  ) ;	info _ ptr colorspace end _ points _ xy green	EMPTY
177	545	2	-1	0	-1	if ( blue _ x != null )	EMPTY	EMPTY
177	546	2	-1	0	-1	* blue _ x = png _ float ( png _ ptr , info _ ptr -> colorspace . end _ points _ xy . bluex ,	png _ ptr info _ ptr colorspace end _ points _ xy	EMPTY
177	547	2	-1	0	-1	" chrm blue x "  ) ;	EMPTY	EMPTY
177	548	2	-1	0	-1	if ( blue _ y != null )	EMPTY	EMPTY
177	549	2	-1	0	-1	* blue _ y = png _ float ( png _ ptr , info _ ptr -> colorspace . end _ points _ xy . bluey ,	png _ ptr info _ ptr colorspace end _ points _ xy	EMPTY
177	550	2	-1	0	-1	" chrm blue y "  ) ;	EMPTY	EMPTY
177	551	2	-1	0	-1	return ( png _ info _ chrm ) ;	EMPTY	EMPTY
177	552	3	-1	0	-1	}	EMPTY	EMPTY
177	554	1	0	0	0	return ( 0 )	EMPTY	EMPTY
177	555	3	-1	0	-1	}	EMPTY	EMPTY
177	557	1	0	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	558	2	-1	0	-1	png _ get _ chrm _ xyz ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
177	559	2	-1	0	-1	double * red _ x  double * red _ y  double * red _ z  double * green _ x	EMPTY	EMPTY
177	560	2	-1	0	-1	double * green _ y  double * green _ z  double * blue _ x  double * blue _ y	EMPTY	EMPTY
177	561	2	-1	0	-1	double * blue _ z )	EMPTY	EMPTY
177	562	2	-1	0	-1	{	EMPTY	EMPTY
177	563	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	564	2	-1	0	-1	( info _ ptr -> colorspace . flags & png _ colorspace _ have _ endpoints ) != numconst )	info _ ptr colorspace flags	EMPTY
177	565	2	-1	0	-1	{	EMPTY	EMPTY
177	566	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
177	568	1	0	0	0	if ( red _ x != null )	EMPTY	EMPTY
177	570	1	0	0	-1	strlit ) ;	EMPTY	EMPTY
177	571	3	-1	0	-1	if ( red _ y != null )	EMPTY	EMPTY
177	573	1	0	0	-1	strlit ) ;	EMPTY	EMPTY
177	574	3	-1	0	-1	if ( red _ z != null )	EMPTY	EMPTY
177	576	1	0	0	-1	strlit ) ;	EMPTY	EMPTY
177	577	3	-1	0	-1	if ( green _ x != null )	EMPTY	EMPTY
177	579	1	0	0	-1	info _ ptr -> colorspace . end _ points _ xyz . green _ x  strlit ) ;	info _ ptr colorspace end _ points _ xyz	EMPTY
177	580	3	-1	0	-1	if ( green _ y != null )	EMPTY	EMPTY
177	582	1	0	0	-1	info _ ptr -> colorspace . end _ points _ xyz . green _ y  strlit ) ;	info _ ptr colorspace end _ points _ xyz	EMPTY
177	583	3	-1	0	-1	if ( green _ z != null )	EMPTY	EMPTY
177	585	1	0	0	-1	info _ ptr -> colorspace . end _ points _ xyz . green _ z  strlit ) ;	info _ ptr colorspace end _ points _ xyz	EMPTY
177	586	3	-1	0	-1	if ( blue _ x != null )	EMPTY	EMPTY
177	588	1	0	0	-1	info _ ptr -> colorspace . end _ points _ xyz . blue _ x  strlit ) ;	info _ ptr colorspace end _ points _ xyz	EMPTY
177	589	3	-1	0	-1	if ( blue _ y != null )	EMPTY	EMPTY
177	591	1	0	0	-1	info _ ptr -> colorspace . end _ points _ xyz . blue _ y  strlit ) ;	info _ ptr colorspace end _ points _ xyz	EMPTY
177	592	3	-1	0	-1	if ( blue _ z != null )	EMPTY	EMPTY
177	594	1	0	0	-1	info _ ptr -> colorspace . end _ points _ xyz . blue _ z  strlit ) ;	info _ ptr colorspace end _ points _ xyz	EMPTY
177	595	2	-1	0	-1	return ( png _ info _ chrm ) ;	EMPTY	EMPTY
177	596	3	-1	0	-1	}	EMPTY	EMPTY
177	598	1	0	0	0	return ( numconst ) ;	EMPTY	EMPTY
177	599	2	-1	0	-1	}	EMPTY	EMPTY
177	600	3	-1	0	-1	# endif	EMPTY	EMPTY
177	602	1	0	0	0	# ifdef png _ fixed _ point _ supported	EMPTY	EMPTY
177	603	2	-1	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	604	2	-1	0	-1	png _ get _ chrm _ xyz _ fixed ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
177	605	2	-1	0	-1	png _ fixed _ point * int _ red _ x  png _ fixed _ point * int _ red _ y	png _ fixed _ point png _ fixed _ point	EMPTY
177	606	2	-1	0	-1	png _ fixed _ point * int _ red _ z  png _ fixed _ point * int _ green _ x	png _ fixed _ point png _ fixed _ point	EMPTY
177	607	2	-1	0	-1	png _ fixed _ point * int _ green _ y  png _ fixed _ point * int _ green _ z	png _ fixed _ point png _ fixed _ point	EMPTY
177	608	2	-1	0	-1	png _ fixed _ point * int _ blue _ x  png _ fixed _ point * int _ blue _ y	png _ fixed _ point png _ fixed _ point	EMPTY
177	609	2	-1	0	-1	png _ fixed _ point * int _ blue _ z )	png _ fixed _ point	EMPTY
177	610	2	-1	0	-1	{	EMPTY	EMPTY
177	611	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	612	2	-1	0	-1	( info _ ptr -> colorspace . flags & png _ colorspace _ have _ endpoints ) != numconst )	info _ ptr colorspace flags	EMPTY
177	613	2	-1	0	-1	{	EMPTY	EMPTY
177	614	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
177	616	1	0	0	0	if ( int _ red _ x != null )	EMPTY	EMPTY
177	618	1	0	0	0	if ( int _ red _ y != null )	EMPTY	EMPTY
177	620	1	0	0	0	if ( int _ red _ z != null )	EMPTY	EMPTY
177	622	1	0	0	0	if ( int _ green _ x != null )	EMPTY	EMPTY
177	624	1	0	0	0	if ( int _ green _ y != null )	EMPTY	EMPTY
177	626	1	0	0	0	if ( int _ green _ z != null )	EMPTY	EMPTY
177	628	1	0	0	0	if ( int _ blue _ x != null )	EMPTY	EMPTY
177	630	1	0	0	0	if ( int _ blue _ y != null )	EMPTY	EMPTY
177	632	1	0	0	0	if ( int _ blue _ z != null )	EMPTY	EMPTY
177	634	1	0	0	0	return ( png _ info _ chrm ) ;	EMPTY	EMPTY
177	635	3	-1	0	-1	}	EMPTY	EMPTY
177	637	1	0	0	0	return ( numconst ) ;	EMPTY	EMPTY
177	638	3	-1	0	-1	}	EMPTY	EMPTY
177	640	1	0	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	641	2	-1	0	-1	png _ get _ chrm _ fixed ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
177	642	2	-1	0	-1	png _ fixed _ point * white _ x  png _ fixed _ point * white _ y  png _ fixed _ point * red _ x	png _ fixed _ point png _ fixed _ point png _ fixed _ point	EMPTY
177	643	2	-1	0	-1	png _ fixed _ point * red _ y  png _ fixed _ point * green _ x  png _ fixed _ point * green _ y	png _ fixed _ point png _ fixed _ point png _ fixed _ point	EMPTY
177	644	2	-1	0	-1	png _ fixed _ point * blue _ x  png _ fixed _ point * blue _ y )	png _ fixed _ point png _ fixed _ point	EMPTY
177	645	2	-1	0	-1	{	EMPTY	EMPTY
177	646	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
177	648	1	0	0	0	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	649	2	-1	0	-1	( info _ ptr -> colorspace . flags & png _ colorspace _ have _ endpoints ) != numconst )	info _ ptr colorspace flags	EMPTY
177	650	2	-1	0	-1	{	EMPTY	EMPTY
177	651	3	-1	0	-1	if ( white _ x != null )	EMPTY	EMPTY
177	653	1	0	0	0	if ( white _ y != null )	EMPTY	EMPTY
177	655	1	0	0	0	if ( red _ x != null )	EMPTY	EMPTY
177	657	1	0	0	0	if ( red _ y != null )	EMPTY	EMPTY
177	659	1	0	0	0	if ( green _ x != null )	EMPTY	EMPTY
177	661	1	0	0	0	if ( green _ y != null )	EMPTY	EMPTY
177	663	1	0	0	0	if ( blue _ x != null )	EMPTY	EMPTY
177	665	1	0	0	0	if ( blue _ y != null )	EMPTY	EMPTY
177	667	1	0	0	0	return ( png _ info _ chrm ) ;	EMPTY	EMPTY
177	668	3	-1	0	-1	}	EMPTY	EMPTY
177	670	1	0	0	0	return ( numconst ) ;	EMPTY	EMPTY
177	671	2	-1	0	-1	}	EMPTY	EMPTY
177	672	2	-1	0	-1	# endif	EMPTY	EMPTY
177	673	3	-1	0	-1	# endif	EMPTY	EMPTY
177	675	1	0	0	-1	# ifdef png _ gama _ supported	EMPTY	EMPTY
177	676	2	-1	0	-1	# ifdef png _ fixed _ point _ supported	EMPTY	EMPTY
177	677	2	-1	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	678	2	-1	0	-1	png _ get _ gama _ fixed ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
177	679	2	-1	0	-1	png _ fixed _ point * file _ gamma )	png _ fixed _ point	EMPTY
177	680	2	-1	0	-1	{	EMPTY	EMPTY
177	681	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
177	683	1	0	0	0	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	684	2	-1	0	-1	( info _ ptr -> colorspace . flags & png _ colorspace _ have _ gamma ) != numconst &&	info _ ptr colorspace flags	EMPTY
177	685	2	-1	0	-1	file _ gamma != null )	EMPTY	EMPTY
177	686	3	-1	0	-1	{	EMPTY	EMPTY
177	688	1	0	0	0	return ( png _ info _ gama ) ;	EMPTY	EMPTY
177	689	3	-1	0	-1	}	EMPTY	EMPTY
177	691	1	0	0	0	return ( numconst ) ;	EMPTY	EMPTY
177	692	2	-1	0	-1	}	EMPTY	EMPTY
177	693	3	-1	0	-1	# endif	EMPTY	EMPTY
177	695	1	0	0	0	# ifdef png _ floating _ point _ supported	EMPTY	EMPTY
177	696	2	-1	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	697	2	-1	0	-1	png _ get _ gama ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
177	698	2	-1	0	-1	double * file _ gamma )	EMPTY	EMPTY
177	699	2	-1	0	-1	{	EMPTY	EMPTY
177	700	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
177	702	1	0	0	0	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	703	2	-1	0	-1	( info _ ptr -> colorspace . flags & png _ colorspace _ have _ gamma ) != numconst &&	info _ ptr colorspace flags	EMPTY
177	704	2	-1	0	-1	file _ gamma != null )	EMPTY	EMPTY
177	705	3	-1	0	-1	{	EMPTY	EMPTY
177	707	1	0	0	-1	strlit ) ;	EMPTY	EMPTY
177	708	2	-1	0	-1	return ( png _ info _ gama ) ;	EMPTY	EMPTY
177	709	3	-1	0	-1	}	EMPTY	EMPTY
177	711	1	0	0	0	return ( numconst ) ;	EMPTY	EMPTY
177	712	2	-1	0	-1	}	EMPTY	EMPTY
177	713	2	-1	0	-1	# endif	EMPTY	EMPTY
177	714	3	-1	0	-1	# endif	EMPTY	EMPTY
177	716	1	0	0	0	# ifdef png _ srgb _ supported	EMPTY	EMPTY
177	717	2	-1	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	718	2	-1	0	-1	png _ get _ srgb ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
177	719	2	-1	0	-1	int * file _ srgb _ intent )	EMPTY	EMPTY
177	720	2	-1	0	-1	{	EMPTY	EMPTY
177	721	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
177	723	1	0	0	0	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	724	2	-1	0	-1	( info _ ptr -> valid & png _ info _ srgb ) != numconst && file _ srgb _ intent != null )	info _ ptr valid	EMPTY
177	725	3	-1	0	-1	{	EMPTY	EMPTY
177	727	1	0	0	0	return ( png _ info _ srgb ) ;	EMPTY	EMPTY
177	728	3	-1	0	-1	}	EMPTY	EMPTY
177	730	1	0	0	0	return ( numconst ) ;	EMPTY	EMPTY
177	731	2	-1	0	-1	}	EMPTY	EMPTY
177	732	3	-1	0	-1	# endif	EMPTY	EMPTY
177	734	1	0	0	0	# ifdef png _ iccp _ supported	EMPTY	EMPTY
177	735	2	-1	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	736	2	-1	0	-1	png _ get _ iccp ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
177	737	2	-1	0	-1	png _ charpp name  int * compression _ type	name compression _ type	EMPTY
177	738	2	-1	0	-1	png _ bytepp profile  png _ uint _ 32 * proflen )	png _ bytepp	EMPTY
177	739	2	-1	0	-1	{	EMPTY	EMPTY
177	740	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
177	742	1	0	0	0	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	743	2	-1	0	-1	( info _ ptr -> valid & png _ info _ iccp ) != numconst &&	info _ ptr valid	EMPTY
177	744	2	-1	0	-1	name != null && compression _ type != null && profile != null &&	name compression _ type	EMPTY
177	745	2	-1	0	-1	proflen != null )	EMPTY	EMPTY
177	746	3	-1	0	-1	{	EMPTY	EMPTY
177	754	1	1	1	1	return ( png _ info _ iccp )	EMPTY	EMPTY
177	755	3	-1	0	-1	}	EMPTY	EMPTY
177	757	1	0	0	0	return ( numconst ) ;	EMPTY	EMPTY
177	758	2	-1	0	-1	}	EMPTY	EMPTY
177	759	3	-1	0	-1	# endif	EMPTY	EMPTY
177	761	1	0	0	0	# ifdef png _ splt _ supported	EMPTY	EMPTY
177	762	2	-1	0	-1	int pngapi	EMPTY	EMPTY
177	763	2	-1	0	-1	png _ get _ splt ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
177	764	2	-1	0	-1	png _ splt _ tpp spalettes )	EMPTY	EMPTY
177	765	2	-1	0	-1	{	EMPTY	EMPTY
177	766	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null && spalettes != null )	png _ ptr info _ ptr	EMPTY
177	767	3	-1	0	-1	{	EMPTY	EMPTY
177	769	1	0	0	0	return info _ ptr -> splt _ palettes _ num ;	info _ ptr splt _ palettes _ num	EMPTY
177	770	3	-1	0	-1	}	EMPTY	EMPTY
177	772	1	0	0	0	return ( numconst ) ;	EMPTY	EMPTY
177	773	2	-1	0	-1	}	EMPTY	EMPTY
177	774	3	-1	0	-1	# endif	EMPTY	EMPTY
177	776	1	0	0	0	# ifdef png _ hist _ supported	EMPTY	EMPTY
177	777	2	-1	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	778	2	-1	0	-1	png _ get _ hist ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
177	779	2	-1	0	-1	png _ uint _ 16p * hist )	hist	EMPTY
177	780	2	-1	0	-1	{	EMPTY	EMPTY
177	781	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
177	783	1	0	0	0	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	784	2	-1	0	-1	( info _ ptr -> valid & png _ info _ hist ) != numconst && hist != null )	info _ ptr valid hist	EMPTY
177	785	3	-1	0	-1	{	EMPTY	EMPTY
177	787	1	0	0	0	return ( png _ info _ hist ) ;	EMPTY	EMPTY
177	788	3	-1	0	-1	}	EMPTY	EMPTY
177	790	1	0	0	0	return ( numconst ) ;	EMPTY	EMPTY
177	791	2	-1	0	-1	}	EMPTY	EMPTY
177	792	3	-1	0	-1	# endif	EMPTY	EMPTY
177	794	1	0	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	795	2	-1	0	-1	png _ get _ ihdr ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
177	796	2	-1	0	-1	png _ uint _ 32 * width  png _ uint _ 32 * height  int * bit _ depth	width height bit _ depth	EMPTY
177	797	2	-1	0	-1	int * color _ type  int * interlace _ type  int * compression _ type	color _ type interlace _ type compression _ type	EMPTY
177	798	2	-1	0	-1	int * filter _ type )	filter _ type	EMPTY
177	799	2	-1	0	-1	{	EMPTY	EMPTY
177	800	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
177	802	1	0	0	0	if ( png _ ptr == null || info _ ptr == null )	png _ ptr info _ ptr	EMPTY
177	803	3	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
177	805	1	0	0	0	if ( width != null )	width	EMPTY
177	808	1	0	0	0	if ( height != null )	height	EMPTY
177	811	1	0	0	0	if ( bit _ depth != null )	bit _ depth	EMPTY
177	814	1	0	0	0	if ( color _ type != null )	color _ type	EMPTY
177	817	1	0	0	0	if ( compression _ type != null )	compression _ type	EMPTY
177	820	1	0	0	0	if ( filter _ type != null )	filter _ type	EMPTY
177	823	1	0	0	0	if ( interlace _ type != null )	interlace _ type	EMPTY
177	831	1	1	1	1	png _ check _ ihdr ( png _ ptr , info _ ptr -> width , info _ ptr -> height ,	png _ check _ ihdr png _ ptr info _ ptr width info _ ptr height	EMPTY
177	832	2	-1	0	-1	info _ ptr -> bit _ depth , info _ ptr -> color _ type , info _ ptr -> interlace _ type ,	info _ ptr bit _ depth info _ ptr color _ type info _ ptr interlace _ type	EMPTY
177	833	3	-1	0	-1	info _ ptr -> compression _ type , info _ ptr -> filter _ type )	info _ ptr compression _ type info _ ptr filter _ type	EMPTY
177	835	1	0	0	0	return ( 1 )	EMPTY	EMPTY
177	836	3	-1	0	-1	}	EMPTY	EMPTY
177	838	1	0	0	0	# ifdef png _ offs _ supported	EMPTY	EMPTY
177	839	2	-1	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	840	2	-1	0	-1	png _ get _ offs ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
177	841	2	-1	0	-1	png _ int _ 32 * offset _ x  png _ int _ 32 * offset _ y  int * unit _ type )	EMPTY	EMPTY
177	842	2	-1	0	-1	{	EMPTY	EMPTY
177	843	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
177	845	1	0	0	0	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	846	2	-1	0	-1	( info _ ptr -> valid & png _ info _ offs ) != numconst &&	info _ ptr valid	EMPTY
177	847	2	-1	0	-1	offset _ x != null && offset _ y != null && unit _ type != null )	EMPTY	EMPTY
177	848	3	-1	0	-1	{	EMPTY	EMPTY
177	852	1	0	0	0	return ( png _ info _ offs ) ;	EMPTY	EMPTY
177	853	3	-1	0	-1	}	EMPTY	EMPTY
177	855	1	0	0	0	return ( numconst ) ;	EMPTY	EMPTY
177	856	2	-1	0	-1	}	EMPTY	EMPTY
177	857	3	-1	0	-1	# endif	EMPTY	EMPTY
177	859	1	0	0	0	# ifdef png _ pcal _ supported	EMPTY	EMPTY
177	860	2	-1	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	861	2	-1	0	-1	png _ get _ pcal ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
177	862	2	-1	0	-1	png _ charp * purpose  png _ int _ 32 * x0  png _ int _ 32 * x1  int * type  int * nparams	EMPTY	EMPTY
177	863	2	-1	0	-1	png _ charp * units  png _ charpp * params )	EMPTY	EMPTY
177	864	2	-1	0	-1	{	EMPTY	EMPTY
177	865	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
177	867	1	0	0	0	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	868	2	-1	0	-1	( info _ ptr -> valid & png _ info _ pcal ) != numconst &&	info _ ptr valid	EMPTY
177	869	2	-1	0	-1	purpose != null && x0 != null && x1 != null && type != null &&	EMPTY	EMPTY
177	870	2	-1	0	-1	nparams != null && units != null && params != null )	EMPTY	EMPTY
177	871	3	-1	0	-1	{	EMPTY	EMPTY
177	879	1	0	0	0	return ( png _ info _ pcal ) ;	EMPTY	EMPTY
177	880	3	-1	0	-1	}	EMPTY	EMPTY
177	882	1	0	0	0	return ( numconst ) ;	EMPTY	EMPTY
177	883	2	-1	0	-1	}	EMPTY	EMPTY
177	884	3	-1	0	-1	# endif	EMPTY	EMPTY
177	886	1	0	0	-1	# ifdef png _ scal _ supported	EMPTY	EMPTY
177	887	2	-1	0	-1	# ifdef png _ fixed _ point _ supported	EMPTY	EMPTY
177	888	2	-1	0	-1	# if defined ( png _ floating _ arithmetic _ supported ) || defined	EMPTY	EMPTY
177	889	2	-1	0	-1	defined ( png _ floating _ point _ supported	EMPTY	EMPTY
177	890	2	-1	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	891	2	-1	0	-1	png _ get _ scal _ fixed ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr	png _ get _ scal _ fixed png _ ptr info _ ptr	EMPTY
177	892	2	-1	0	-1	int * unit  png _ fixed _ point * width  png _ fixed _ point * height )	unit png _ fixed _ point width png _ fixed _ point height	EMPTY
177	893	2	-1	0	-1	{	EMPTY	EMPTY
177	894	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	895	2	-1	0	-1	( info _ ptr -> valid & png _ info _ scal ) != numconst )	info _ ptr valid	EMPTY
177	896	3	-1	0	-1	{	EMPTY	EMPTY
177	902	1	1	1	-1	* width = png _ fixed ( png _ ptr , atof ( info _ ptr -> scal _ s _ width ) ,  " scal width "  )	width png _ ptr info _ ptr scal _ s _ width	EMPTY
177	903	2	-1	0	-1	* height = png _ fixed ( png _ ptr , atof ( info _ ptr -> scal _ s _ height ) ,	height png _ ptr info _ ptr scal _ s _ height	EMPTY
177	904	2	-1	0	-1	" scal height "  )	EMPTY	EMPTY
177	905	2	-1	0	-1	return ( png _ info _ scal )	EMPTY	EMPTY
177	906	3	-1	0	-1	}	EMPTY	EMPTY
177	908	1	1	0	1	return ( numconst ) ;	EMPTY	EMPTY
177	909	2	-1	0	-1	}	EMPTY	EMPTY
177	910	2	-1	1	-1	# endif	EMPTY	EMPTY
177	911	2	-1	1	-1	# endif	EMPTY	EMPTY
177	912	2	-1	0	-1	# ifdef png _ floating _ point _ supported	EMPTY	EMPTY
177	913	2	-1	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	914	2	-1	0	-1	png _ get _ scal ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
177	915	2	-1	0	-1	int * unit  double * width  double * height )	unit width height	EMPTY
177	916	2	-1	0	-1	{	EMPTY	EMPTY
177	917	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	918	2	-1	0	-1	( info _ ptr -> valid & png _ info _ scal ) != 0 )	info _ ptr valid	EMPTY
177	919	2	-1	0	-1	{	EMPTY	EMPTY
177	920	2	-1	0	-1	* unit = info _ ptr -> scal _ unit ;	unit info _ ptr scal _ unit	EMPTY
177	921	2	-1	0	-1	* width = atof ( info _ ptr -> scal _ s _ width ) ;	width info _ ptr scal _ s _ width	EMPTY
177	922	2	-1	0	-1	* height = atof ( info _ ptr -> scal _ s _ height ) ;	height info _ ptr scal _ s _ height	EMPTY
177	923	2	-1	0	-1	return ( png _ info _ scal ) ;	EMPTY	EMPTY
177	924	3	-1	0	-1	}	EMPTY	EMPTY
177	926	1	0	0	0	return ( 0 )	EMPTY	EMPTY
177	927	2	-1	0	-1	}	EMPTY	EMPTY
177	928	2	-1	0	-1	# endif	EMPTY	EMPTY
177	929	2	-1	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	930	2	-1	0	-1	png _ get _ scal _ s ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr	png _ get _ scal _ s png _ ptr info _ ptr	EMPTY
177	931	2	-1	0	-1	int * unit  png _ charpp width  png _ charpp height )	unit width height	EMPTY
177	932	2	-1	0	-1	{	EMPTY	EMPTY
177	933	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	934	2	-1	0	-1	( info _ ptr -> valid & png _ info _ scal ) != 0 )	info _ ptr valid	EMPTY
177	935	2	-1	0	-1	{	EMPTY	EMPTY
177	936	2	-1	0	-1	* unit = info _ ptr -> scal _ unit ;	unit info _ ptr scal _ unit	EMPTY
177	937	2	-1	0	-1	* width = info _ ptr -> scal _ s _ width ;	width info _ ptr scal _ s _ width	EMPTY
177	938	2	-1	0	-1	* height = info _ ptr -> scal _ s _ height ;	height info _ ptr scal _ s _ height	EMPTY
177	939	2	-1	0	-1	return ( png _ info _ scal ) ;	EMPTY	EMPTY
177	940	3	-1	0	-1	}	EMPTY	EMPTY
177	942	1	1	0	1	return ( 0 )	EMPTY	EMPTY
177	943	2	-1	0	-1	}	EMPTY	EMPTY
177	944	3	-1	1	-1	# endif	EMPTY	EMPTY
177	946	1	0	0	0	# ifdef png _ phys _ supported	EMPTY	EMPTY
177	947	2	-1	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	948	2	-1	0	-1	png _ get _ phys ( png _ const _ structrp png _ ptr  png _ const _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
177	949	2	-1	0	-1	png _ uint _ 32 * res _ x  png _ uint _ 32 * res _ y  int * unit _ type )	EMPTY	EMPTY
177	950	2	-1	0	-1	{	EMPTY	EMPTY
177	951	3	-1	0	-1	png _ uint _ 32 retval = 0 ;	EMPTY	EMPTY
177	953	1	0	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
177	955	1	0	0	0	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	956	2	-1	0	-1	( info _ ptr -> valid & png _ info _ phys ) != 0 )	info _ ptr valid	EMPTY
177	957	2	-1	0	-1	{	EMPTY	EMPTY
177	958	2	-1	0	-1	if ( res _ x != null )	EMPTY	EMPTY
177	959	2	-1	0	-1	{	EMPTY	EMPTY
177	960	2	-1	0	-1	* res _ x = info _ ptr -> x _ pixels _ per _ unit ;	info _ ptr x _ pixels _ per _ unit	EMPTY
177	961	2	-1	0	-1	retval |= png _ info _ phys ;	EMPTY	EMPTY
177	962	3	-1	0	-1	}	EMPTY	EMPTY
177	964	1	0	0	0	if ( res _ y != null )	EMPTY	EMPTY
177	965	2	-1	0	-1	{	EMPTY	EMPTY
177	966	2	-1	0	-1	* res _ y = info _ ptr -> y _ pixels _ per _ unit ;	info _ ptr y _ pixels _ per _ unit	EMPTY
177	967	2	-1	0	-1	retval |= png _ info _ phys ;	EMPTY	EMPTY
177	968	3	-1	0	-1	}	EMPTY	EMPTY
177	970	1	0	0	0	if ( unit _ type != null )	EMPTY	EMPTY
177	971	2	-1	0	-1	{	EMPTY	EMPTY
177	972	2	-1	0	-1	* unit _ type = ( int ) info _ ptr -> phys _ unit _ type ;	info _ ptr phys _ unit _ type	EMPTY
177	973	2	-1	0	-1	retval |= png _ info _ phys ;	EMPTY	EMPTY
177	974	2	-1	0	-1	}	EMPTY	EMPTY
177	975	3	-1	0	-1	}	EMPTY	EMPTY
177	977	1	1	0	1	return ( retval )	EMPTY	EMPTY
177	978	2	-1	0	-1	}	EMPTY	EMPTY
177	979	3	-1	1	-1	# endif	EMPTY	EMPTY
177	981	1	0	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	982	2	-1	0	-1	png _ get _ plte ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
177	983	2	-1	0	-1	png _ colorp * palette  int * num _ palette )	palette num _ palette	EMPTY
177	984	2	-1	0	-1	{	EMPTY	EMPTY
177	985	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
177	987	1	0	0	0	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	988	2	-1	0	-1	( info _ ptr -> valid & png _ info _ plte ) != 0 && palette != null )	info _ ptr valid palette	EMPTY
177	989	2	-1	0	-1	{	EMPTY	EMPTY
177	990	2	-1	0	-1	* palette = info _ ptr -> palette ;	palette info _ ptr palette	EMPTY
177	991	2	-1	0	-1	* num _ palette = info _ ptr -> num _ palette ;	num _ palette info _ ptr num _ palette	EMPTY
177	992	2	-1	0	-1	png _ debug1 ( 3 ,  " num _ palette = %d "  , * num _ palette ) ;	num _ palette	EMPTY
177	993	2	-1	0	-1	return ( png _ info _ plte ) ;	EMPTY	EMPTY
177	994	3	-1	0	-1	}	EMPTY	EMPTY
177	996	1	0	0	0	return ( 0 )	EMPTY	EMPTY
177	997	3	-1	0	-1	}	EMPTY	EMPTY
177	999	1	0	0	0	# ifdef png _ sbit _ supported	EMPTY	EMPTY
177	1000	2	-1	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	1001	2	-1	0	-1	png _ get _ sbit ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
177	1002	2	-1	0	-1	png _ color _ 8p * sig _ bit )	sig _ bit	EMPTY
177	1003	2	-1	0	-1	{	EMPTY	EMPTY
177	1004	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
177	1006	1	0	0	0	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	1007	2	-1	0	-1	( info _ ptr -> valid & png _ info _ sbit ) != 0 && sig _ bit != null )	info _ ptr valid sig _ bit	EMPTY
177	1008	2	-1	0	-1	{	EMPTY	EMPTY
177	1009	2	-1	0	-1	* sig _ bit = & ( info _ ptr -> sig _ bit ) ;	sig _ bit info _ ptr sig _ bit	EMPTY
177	1010	2	-1	0	-1	return ( png _ info _ sbit ) ;	EMPTY	EMPTY
177	1011	3	-1	0	-1	}	EMPTY	EMPTY
177	1013	1	0	0	0	return ( 0 )	EMPTY	EMPTY
177	1014	2	-1	0	-1	}	EMPTY	EMPTY
177	1015	3	-1	0	-1	# endif	EMPTY	EMPTY
177	1017	1	0	0	0	# ifdef png _ text _ supported	EMPTY	EMPTY
177	1018	2	-1	0	-1	int pngapi	EMPTY	EMPTY
177	1019	2	-1	0	-1	png _ get _ text ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ get _ text png _ ptr info _ ptr	EMPTY
177	1020	2	-1	0	-1	png _ textp * text _ ptr  int * num _ text )	text _ ptr num _ text	EMPTY
177	1021	2	-1	0	-1	{	EMPTY	EMPTY
177	1022	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null && info _ ptr -> num _ text > 0 )	png _ ptr info _ ptr info _ ptr num _ text	EMPTY
177	1023	2	-1	0	-1	{	EMPTY	EMPTY
177	1024	2	-1	0	-1	png _ debug1 ( 1 ,  " in 0x%lx retrieval function "  ,	EMPTY	EMPTY
177	1025	3	-1	0	-1	( unsigned long ) png _ ptr -> chunk _ name ) ;	png _ ptr chunk _ name	EMPTY
177	1027	1	0	0	0	if ( text _ ptr != null )	text _ ptr	EMPTY
177	1028	3	-1	0	-1	* text _ ptr = info _ ptr -> text ;	text _ ptr info _ ptr text	EMPTY
177	1030	1	0	0	0	if ( num _ text != null )	num _ text	EMPTY
177	1031	3	-1	0	-1	* num _ text = info _ ptr -> num _ text ;	num _ text info _ ptr num _ text	EMPTY
177	1033	1	0	0	0	return info _ ptr -> num _ text ;	info _ ptr num _ text	EMPTY
177	1034	3	-1	0	-1	}	EMPTY	EMPTY
177	1036	1	0	0	0	if ( num _ text != null )	num _ text	EMPTY
177	1037	3	-1	0	-1	* num _ text = 0	num _ text	EMPTY
177	1039	1	0	0	0	return ( 0 )	EMPTY	EMPTY
177	1040	2	-1	0	-1	}	EMPTY	EMPTY
177	1041	3	-1	0	-1	# endif	EMPTY	EMPTY
177	1043	1	0	0	0	# ifdef png _ time _ supported	EMPTY	EMPTY
177	1044	2	-1	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	1045	2	-1	0	-1	png _ get _ time ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
177	1046	2	-1	0	-1	png _ timep * mod _ time )	mod _ time	EMPTY
177	1047	2	-1	0	-1	{	EMPTY	EMPTY
177	1048	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
177	1050	1	0	0	0	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	1051	2	-1	0	-1	( info _ ptr -> valid & png _ info _ time ) != 0 && mod _ time != null )	info _ ptr valid mod _ time	EMPTY
177	1052	2	-1	0	-1	{	EMPTY	EMPTY
177	1053	2	-1	0	-1	* mod _ time = & ( info _ ptr -> mod _ time ) ;	mod _ time info _ ptr mod _ time	EMPTY
177	1054	2	-1	0	-1	return ( png _ info _ time ) ;	EMPTY	EMPTY
177	1055	3	-1	0	-1	}	EMPTY	EMPTY
177	1057	1	0	0	0	return ( 0 )	EMPTY	EMPTY
177	1058	2	-1	0	-1	}	EMPTY	EMPTY
177	1059	3	-1	0	-1	# endif	EMPTY	EMPTY
177	1061	1	0	0	0	# ifdef png _ trns _ supported	EMPTY	EMPTY
177	1062	2	-1	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	1063	2	-1	0	-1	png _ get _ trns ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
177	1064	2	-1	0	-1	png _ bytep * trans _ alpha  int * num _ trans  png _ color _ 16p * trans _ color )	trans _ alpha num _ trans trans _ color	EMPTY
177	1065	2	-1	0	-1	{	EMPTY	EMPTY
177	1066	2	-1	0	-1	png _ uint _ 32 retval = 0 ;	EMPTY	EMPTY
177	1067	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null &&	png _ ptr info _ ptr	EMPTY
177	1068	2	-1	0	-1	( info _ ptr -> valid & png _ info _ trns ) != numconst )	info _ ptr valid	EMPTY
177	1069	2	-1	0	-1	{	EMPTY	EMPTY
177	1070	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
177	1072	1	0	0	0	if ( info _ ptr -> color _ type == png _ color _ type _ palette )	info _ ptr color _ type	EMPTY
177	1073	2	-1	0	-1	{	EMPTY	EMPTY
177	1074	2	-1	0	-1	if ( trans _ alpha != null )	trans _ alpha	EMPTY
177	1075	2	-1	0	-1	{	EMPTY	EMPTY
177	1076	2	-1	0	-1	* trans _ alpha = info _ ptr -> trans _ alpha ;	trans _ alpha info _ ptr trans _ alpha	EMPTY
177	1077	2	-1	0	-1	retval |= png _ info _ trns ;	EMPTY	EMPTY
177	1078	3	-1	0	-1	}	EMPTY	EMPTY
177	1080	1	0	0	0	if ( trans _ color != null )	trans _ color	EMPTY
177	1081	2	-1	0	-1	* trans _ color = & ( info _ ptr -> trans _ color )	trans _ color info _ ptr trans _ color	EMPTY
177	1082	3	-1	0	-1	}	EMPTY	EMPTY
177	1084	1	1	1	-1	else	EMPTY	EMPTY
177	1085	2	-1	0	-1	{	EMPTY	EMPTY
177	1086	2	-1	0	-1	if ( trans _ color != null )	trans _ color	EMPTY
177	1087	2	-1	0	-1	{	EMPTY	EMPTY
177	1088	2	-1	0	-1	* trans _ color = & ( info _ ptr -> trans _ color ) ;	trans _ color info _ ptr trans _ color	EMPTY
177	1089	2	-1	0	-1	retval |= png _ info _ trns ;	EMPTY	EMPTY
177	1090	3	-1	0	-1	}	EMPTY	EMPTY
177	1092	1	0	0	0	if ( trans _ alpha != null )	trans _ alpha	EMPTY
177	1094	1	0	0	-1	}	EMPTY	EMPTY
177	1096	1	0	0	0	if ( num _ trans != null )	num _ trans	EMPTY
177	1097	2	-1	0	-1	{	EMPTY	EMPTY
177	1098	2	-1	0	-1	* num _ trans = info _ ptr -> num _ trans ;	num _ trans info _ ptr num _ trans	EMPTY
177	1099	2	-1	0	-1	retval |= png _ info _ trns ;	EMPTY	EMPTY
177	1100	2	-1	0	-1	}	EMPTY	EMPTY
177	1101	3	-1	0	-1	}	EMPTY	EMPTY
177	1103	1	0	0	0	return ( retval ) ;	EMPTY	EMPTY
177	1104	2	-1	0	-1	}	EMPTY	EMPTY
177	1105	3	-1	0	-1	# endif	EMPTY	EMPTY
177	1107	1	0	0	0	# ifdef png _ store _ unknown _ chunks _ supported	EMPTY	EMPTY
177	1108	2	-1	0	-1	int pngapi	EMPTY	EMPTY
177	1109	2	-1	0	-1	png _ get _ unknown _ chunks ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
177	1110	2	-1	0	-1	png _ unknown _ chunkpp unknowns )	EMPTY	EMPTY
177	1111	2	-1	0	-1	{	EMPTY	EMPTY
177	1112	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null && unknowns != null )	png _ ptr info _ ptr	EMPTY
177	1113	3	-1	0	-1	{	EMPTY	EMPTY
177	1115	1	0	0	0	return info _ ptr -> unknown _ chunks _ num ;	info _ ptr unknown _ chunks _ num	EMPTY
177	1116	3	-1	0	-1	}	EMPTY	EMPTY
177	1118	1	0	0	0	return ( numconst ) ;	EMPTY	EMPTY
177	1119	2	-1	0	-1	}	EMPTY	EMPTY
177	1120	3	-1	0	-1	# endif	EMPTY	EMPTY
177	1122	1	0	0	0	# ifdef png _ read _ rgb _ to _ gray _ supported	EMPTY	EMPTY
177	1123	2	-1	0	-1	png _ byte pngapi	EMPTY	EMPTY
177	1124	2	-1	0	-1	png _ get _ rgb _ to _ gray _ status ( png _ const _ structrp png _ ptr )	png _ ptr	EMPTY
177	1125	2	-1	0	-1	{	EMPTY	EMPTY
177	1126	2	-1	0	-1	return ( png _ byte ) ( png _ ptr ? png _ ptr -> rgb _ to _ gray _ status : numconst ) ;	png _ ptr png _ ptr	EMPTY
177	1127	2	-1	0	-1	}	EMPTY	EMPTY
177	1128	3	-1	0	-1	# endif	EMPTY	EMPTY
177	1130	1	0	0	0	# ifdef png _ user _ chunks _ supported	EMPTY	EMPTY
177	1131	2	-1	0	-1	png _ voidp pngapi	png _ voidp	EMPTY
177	1132	2	-1	0	-1	png _ get _ user _ chunk _ ptr ( png _ const _ structrp png _ ptr )	png _ ptr	EMPTY
177	1133	2	-1	0	-1	{	EMPTY	EMPTY
177	1134	2	-1	0	-1	return ( png _ ptr ? png _ ptr -> user _ chunk _ ptr : null ) ;	png _ ptr png _ ptr user _ chunk _ ptr	EMPTY
177	1135	2	-1	0	-1	}	EMPTY	EMPTY
177	1136	3	-1	0	-1	# endif	EMPTY	EMPTY
177	1138	1	0	0	-1	png _ size _ t pngapi	png _ size _ t	EMPTY
177	1139	2	-1	0	-1	png _ get _ compression _ buffer _ size ( png _ const _ structrp png _ ptr )	png _ ptr	EMPTY
177	1140	2	-1	0	-1	{	EMPTY	EMPTY
177	1141	2	-1	0	-1	if ( png _ ptr == null )	png _ ptr	EMPTY
177	1142	3	-1	0	-1	return numconst ;	EMPTY	EMPTY
177	1144	1	0	0	-1	# ifdef png _ write _ supported	EMPTY	EMPTY
177	1145	2	-1	0	-1	if ( ( png _ ptr -> mode & png _ is _ read _ struct ) != numconst )	png _ ptr mode	EMPTY
177	1146	2	-1	0	-1	# endif	EMPTY	EMPTY
177	1147	2	-1	0	-1	{	EMPTY	EMPTY
177	1148	2	-1	0	-1	# ifdef png _ sequential _ read _ supported	EMPTY	EMPTY
177	1149	2	-1	0	-1	return png _ ptr -> idat _ read _ size ;	png _ ptr idat _ read _ size	EMPTY
177	1150	2	-1	0	-1	# else	EMPTY	EMPTY
177	1151	2	-1	0	-1	return png _ idat _ read _ size ;	EMPTY	EMPTY
177	1152	2	-1	0	-1	# endif	EMPTY	EMPTY
177	1153	3	-1	0	-1	}	EMPTY	EMPTY
177	1155	1	0	0	-1	# ifdef png _ write _ supported	EMPTY	EMPTY
177	1156	2	-1	0	-1	else	EMPTY	EMPTY
177	1157	2	-1	0	-1	return png _ ptr -> zbuffer _ size ;	png _ ptr zbuffer _ size	EMPTY
177	1158	2	-1	0	-1	# endif	EMPTY	EMPTY
177	1159	3	-1	0	-1	}	EMPTY	EMPTY
177	1161	1	0	0	-1	# ifdef png _ set _ user _ limits _ supported	EMPTY	EMPTY
177	1164	1	0	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	1165	2	-1	0	-1	png _ get _ user _ width _ max ( png _ const _ structrp png _ ptr )	png _ get _ user _ width _ max png _ ptr	EMPTY
177	1166	2	-1	0	-1	{	EMPTY	EMPTY
177	1167	2	-1	0	-1	return ( png _ ptr ? png _ ptr -> user _ width _ max : 0 )	png _ ptr png _ ptr	EMPTY
177	1168	3	-1	0	-1	}	EMPTY	EMPTY
177	1170	1	0	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	1171	2	-1	0	-1	png _ get _ user _ height _ max ( png _ const _ structrp png _ ptr )	png _ ptr	EMPTY
177	1172	2	-1	0	-1	{	EMPTY	EMPTY
177	1173	2	-1	0	-1	return ( png _ ptr ? png _ ptr -> user _ height _ max : 0 )	png _ ptr png _ ptr	EMPTY
177	1174	3	-1	0	-1	}	EMPTY	EMPTY
177	1177	1	0	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	1178	2	-1	0	-1	png _ get _ chunk _ cache _ max ( png _ const _ structrp png _ ptr )	png _ get _ chunk _ cache _ max png _ ptr	EMPTY
177	1179	2	-1	0	-1	{	EMPTY	EMPTY
177	1180	2	-1	0	-1	return ( png _ ptr ? png _ ptr -> user _ chunk _ cache _ max : 0 )	png _ ptr png _ ptr user _ chunk _ cache _ max	EMPTY
177	1181	3	-1	0	-1	}	EMPTY	EMPTY
177	1184	1	1	0	-1	png _ alloc _ size _ t pngapi	EMPTY	EMPTY
177	1185	2	-1	0	-1	png _ get _ chunk _ malloc _ max ( png _ const _ structrp png _ ptr )	png _ get _ chunk _ malloc _ max png _ ptr	EMPTY
177	1186	2	-1	0	-1	{	EMPTY	EMPTY
177	1187	2	-1	0	-1	return ( png _ ptr ? png _ ptr -> user _ chunk _ malloc _ max : 0 )	png _ ptr png _ ptr user _ chunk _ malloc _ max	EMPTY
177	1188	2	-1	0	-1	}	EMPTY	EMPTY
177	1189	3	-1	1	-1	# endif	EMPTY	EMPTY
177	1192	1	1	1	1	# ifdef png _ io _ state _ supported	EMPTY	EMPTY
177	1193	2	-1	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	1194	2	-1	0	-1	png _ get _ io _ state ( png _ const _ structrp png _ ptr )	png _ ptr	EMPTY
177	1195	2	-1	0	-1	{	EMPTY	EMPTY
177	1196	2	-1	0	-1	return png _ ptr -> io _ state	png _ ptr io _ state	EMPTY
177	1197	3	-1	0	-1	}	EMPTY	EMPTY
177	1199	1	1	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
177	1200	2	-1	0	-1	png _ get _ io _ chunk _ type ( png _ const _ structrp png _ ptr )	png _ ptr	EMPTY
177	1201	2	-1	0	-1	{	EMPTY	EMPTY
177	1202	2	-1	0	-1	return png _ ptr -> chunk _ name	png _ ptr chunk _ name	EMPTY
177	1203	2	-1	0	-1	}	EMPTY	EMPTY
177	1204	3	-1	1	-1	# endif	EMPTY	EMPTY
177	1206	1	0	0	-1	# ifdef png _ check _ for _ invalid _ index _ supported	EMPTY	EMPTY
177	1207	2	-1	0	-1	# ifdef png _ get _ palette _ max _ supported	EMPTY	EMPTY
177	1208	2	-1	0	-1	int pngapi	EMPTY	EMPTY
177	1209	2	-1	0	-1	png _ get _ palette _ max ( png _ const _ structp png _ ptr  png _ const _ infop info _ ptr )	png _ ptr info _ ptr	EMPTY
177	1210	2	-1	0	-1	{	EMPTY	EMPTY
177	1211	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null )	png _ ptr info _ ptr	EMPTY
177	1212	3	-1	0	-1	return png _ ptr -> num _ palette _ max	png _ ptr num _ palette _ max	EMPTY
177	1214	1	0	0	0	return ( - 1 )	EMPTY	EMPTY
177	1215	2	-1	0	-1	}	EMPTY	EMPTY
177	1216	2	-1	0	-1	# endif	EMPTY	EMPTY
177	1217	3	-1	0	-1	# endif	EMPTY	EMPTY
177	1219	1	1	1	-1	# endif	EMPTY	EMPTY
197	166	1	0	0	-1	const ssl3 _ enc _ method sslv3 _ enc _ data = {	EMPTY	EMPTY
197	167	2	-1	0	-1	ssl3 _ prf	EMPTY	EMPTY
197	168	2	-1	0	-1	tls1 _ setup _ key _ block	EMPTY	EMPTY
197	169	2	-1	0	-1	tls1 _ generate _ master _ secret	EMPTY	EMPTY
197	170	2	-1	0	-1	tls1 _ change _ cipher _ state	EMPTY	EMPTY
197	171	2	-1	0	-1	ssl3 _ final _ finish _ mac	EMPTY	EMPTY
197	172	2	-1	0	-1	ssl3 _ cert _ verify _ mac	EMPTY	EMPTY
197	173	2	-1	0	-1	ssl3 _ md _ client _ finished _ const  numconst	EMPTY	EMPTY
197	174	2	-1	0	-1	ssl3 _ md _ server _ finished _ const  numconst	EMPTY	EMPTY
197	175	2	-1	0	-1	ssl3 _ alert _ code	EMPTY	EMPTY
197	176	2	-1	0	-1	tls1 _ export _ keying _ material	EMPTY	EMPTY
197	177	2	-1	0	-1	numconst	EMPTY	EMPTY
197	178	3	-1	0	-1	} ;	EMPTY	EMPTY
197	180	1	0	0	-1	int ssl3 _ supports _ cipher ( const ssl _ cipher * cipher ) {	cipher	EMPTY
197	181	2	-1	0	-1	return 1	EMPTY	EMPTY
197	182	3	-1	0	-1	}	EMPTY	EMPTY
197	184	1	0	0	-1	int ssl3 _ set _ handshake _ header ( ssl * ssl  int htype  unsigned long len ) {	ssl len	EMPTY
197	185	2	-1	0	-1	uint8 _ t * p = ( uint8 _ t * ) ssl -> init _ buf -> data ;	p ssl init _ buf data	EMPTY
197	186	2	-1	0	-1	* ( p ++ ) = htype	p	EMPTY
197	187	2	-1	0	-1	l2n3 ( len  p ) ;	len p	EMPTY
197	188	2	-1	0	-1	ssl -> init _ num = ( int ) len + ssl3 _ hm _ header _ length ;	ssl init _ num len	EMPTY
197	189	3	-1	0	-1	ssl -> init _ off = 0	ssl init _ off	EMPTY
197	192	1	1	1	1	return ssl3 _ update _ handshake _ hash ( ssl , ( uint8 _ t * ) ssl -> init _ buf -> data ,	ssl3 _ update _ handshake _ hash ssl ssl init _ buf data	EMPTY
197	193	2	-1	0	-1	ssl -> init _ num )	ssl init _ num	EMPTY
197	194	3	-1	0	-1	}	EMPTY	EMPTY
197	196	1	0	0	-1	int ssl3 _ handshake _ write ( ssl * ssl ) {	ssl	EMPTY
197	197	2	-1	0	-1	return ssl3 _ do _ write ( ssl  ssl3 _ rt _ handshake ) ;	ssl	EMPTY
197	198	3	-1	0	-1	}	EMPTY	EMPTY
197	200	1	0	0	-1	int ssl3 _ new ( ssl * ssl ) {	ssl	EMPTY
197	201	3	-1	0	-1	ssl3 _ state * s3 ;	s3	EMPTY
197	203	1	0	0	-1	s3 = openssl _ malloc ( sizeof * s3 ) ;	s3 s3	EMPTY
197	204	2	-1	0	-1	if ( s3 == null ) {	s3	EMPTY
197	205	2	-1	0	-1	goto err ;	EMPTY	EMPTY
197	206	2	-1	0	-1	}	EMPTY	EMPTY
197	207	3	-1	0	-1	memset ( s3  numconst  sizeof * s3 ) ;	s3 s3	EMPTY
197	209	1	0	0	0	evp _ md _ ctx _ init ( & s3 -> handshake _ hash ) ;	evp _ md _ ctx _ init s3 handshake _ hash	EMPTY
197	210	3	-1	0	-1	evp _ md _ ctx _ init ( & s3 -> handshake _ md5 ) ;	evp _ md _ ctx _ init s3 handshake _ md5	EMPTY
197	212	1	0	0	-1	ssl -> s3 = s3 ;	ssl s3 s3	EMPTY
197	219	1	1	1	-1	ssl -> version = tls1 _ 2 _ version ;	ssl version	EMPTY
197	220	2	-1	0	-1	return 1	EMPTY	EMPTY
197	221	2	-1	0	-1	err :	EMPTY	EMPTY
197	222	2	-1	0	-1	return 0	EMPTY	EMPTY
197	223	3	-1	0	-1	}	EMPTY	EMPTY
197	225	1	0	0	-1	void ssl3 _ free ( ssl * ssl ) {	ssl	EMPTY
197	226	2	-1	0	-1	if ( ssl == null || ssl -> s3 == null ) {	ssl ssl s3	EMPTY
197	227	2	-1	0	-1	return ;	EMPTY	EMPTY
197	228	3	-1	0	-1	}	EMPTY	EMPTY
197	230	1	0	0	0	ssl3 _ cleanup _ key _ block ( ssl ) ;	ssl	EMPTY
197	231	2	-1	0	-1	ssl _ read _ buffer _ clear ( ssl ) ;	ssl _ read _ buffer _ clear ssl	EMPTY
197	232	2	-1	0	-1	ssl _ write _ buffer _ clear ( ssl ) ;	ssl _ write _ buffer _ clear ssl	EMPTY
197	233	2	-1	0	-1	ssl _ ecdh _ ctx _ cleanup ( & ssl -> s3 -> tmp . ecdh _ ctx ) ;	ssl _ ecdh _ ctx _ cleanup ssl s3 tmp ecdh _ ctx	EMPTY
197	234	3	-1	0	-1	openssl _ free ( ssl -> s3 -> tmp . peer _ key ) ;	ssl s3 tmp peer _ key	EMPTY
197	236	1	0	0	0	sk _ x509 _ name _ pop _ free ( ssl -> s3 -> tmp . ca _ names  x509 _ name _ free ) ;	ssl s3 tmp ca _ names	EMPTY
197	237	2	-1	0	-1	openssl _ free ( ssl -> s3 -> tmp . certificate _ types ) ;	ssl s3 tmp certificate _ types	EMPTY
197	238	2	-1	0	-1	openssl _ free ( ssl -> s3 -> tmp . peer _ ellipticcurvelist ) ;	ssl s3 tmp peer _ ellipticcurvelist	EMPTY
197	239	2	-1	0	-1	openssl _ free ( ssl -> s3 -> tmp . peer _ psk _ identity _ hint ) ;	ssl s3 tmp peer _ psk _ identity _ hint	EMPTY
197	240	2	-1	0	-1	ssl3 _ free _ handshake _ buffer ( ssl ) ;	ssl3 _ free _ handshake _ buffer ssl	EMPTY
197	241	2	-1	0	-1	ssl3 _ free _ handshake _ hash ( ssl ) ;	ssl3 _ free _ handshake _ hash ssl	EMPTY
197	242	3	-1	0	-1	openssl _ free ( ssl -> s3 -> alpn _ selected ) ;	ssl s3 alpn _ selected	EMPTY
197	244	1	0	0	0	openssl _ cleanse ( ssl -> s3  sizeof * ssl -> s3 ) ;	openssl _ cleanse ssl s3 ssl s3	EMPTY
197	245	2	-1	0	-1	openssl _ free ( ssl -> s3 ) ;	ssl s3	EMPTY
197	246	2	-1	0	-1	ssl -> s3 = null ;	ssl s3	EMPTY
197	247	3	-1	0	-1	}	EMPTY	EMPTY
197	249	1	0	0	-1	int ssl _ session _ reused ( const ssl * ssl ) {	ssl _ session _ reused ssl	EMPTY
197	250	2	-1	0	-1	return ssl -> hit ;	ssl hit	EMPTY
197	251	3	-1	0	-1	}	EMPTY	EMPTY
197	253	1	0	0	-1	int ssl _ total _ renegotiations ( const ssl * ssl ) {	ssl _ total _ renegotiations ssl	EMPTY
197	254	2	-1	0	-1	return ssl -> s3 -> total _ renegotiations ;	ssl s3	EMPTY
197	255	3	-1	0	-1	}	EMPTY	EMPTY
197	257	1	0	0	-1	int ssl _ num _ renegotiations ( const ssl * ssl ) {	ssl _ num _ renegotiations ssl	EMPTY
197	258	2	-1	0	-1	return ssl _ total _ renegotiations ( ssl ) ;	ssl _ total _ renegotiations ssl	EMPTY
197	259	3	-1	0	-1	}	EMPTY	EMPTY
197	261	1	0	0	-1	int ssl _ ctx _ need _ tmp _ rsa ( const ssl _ ctx * ctx ) {	ssl _ ctx _ need _ tmp _ rsa ctx	EMPTY
197	262	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	263	3	-1	0	-1	}	EMPTY	EMPTY
197	265	1	0	0	-1	int ssl _ need _ rsa ( const ssl * ssl ) {	ssl	EMPTY
197	266	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	267	3	-1	0	-1	}	EMPTY	EMPTY
197	269	1	0	0	-1	int ssl _ ctx _ set _ tmp _ rsa ( ssl _ ctx * ctx  const rsa * rsa ) {	ssl _ ctx _ set _ tmp _ rsa ctx rsa	EMPTY
197	270	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	271	3	-1	0	-1	}	EMPTY	EMPTY
197	273	1	0	0	-1	int ssl _ set _ tmp _ rsa ( ssl * ssl  const rsa * rsa ) {	ssl _ set _ tmp _ rsa ssl rsa	EMPTY
197	274	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	275	3	-1	0	-1	}	EMPTY	EMPTY
197	277	1	0	0	-1	int ssl _ ctx _ set _ tmp _ dh ( ssl _ ctx * ctx  const dh * dh ) {	ssl _ ctx _ set _ tmp _ dh ctx dh	EMPTY
197	278	2	-1	0	-1	dh _ free ( ctx -> cert -> dh _ tmp ) ;	dh _ free ctx cert	EMPTY
197	279	2	-1	0	-1	ctx -> cert -> dh _ tmp = dhparams _ dup ( dh ) ;	ctx cert dhparams _ dup dh	EMPTY
197	280	2	-1	0	-1	if ( ctx -> cert -> dh _ tmp == null ) {	ctx cert	EMPTY
197	281	2	-1	0	-1	openssl _ put _ error ( ssl  err _ r _ dh _ lib ) ;	EMPTY	EMPTY
197	282	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	283	2	-1	0	-1	}	EMPTY	EMPTY
197	284	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	285	3	-1	0	-1	}	EMPTY	EMPTY
197	287	1	0	0	-1	int ssl _ set _ tmp _ dh ( ssl * ssl  const dh * dh ) {	ssl _ set _ tmp _ dh ssl dh	EMPTY
197	288	2	-1	0	-1	dh _ free ( ssl -> cert -> dh _ tmp ) ;	dh _ free ssl cert	EMPTY
197	289	2	-1	0	-1	ssl -> cert -> dh _ tmp = dhparams _ dup ( dh ) ;	ssl cert dhparams _ dup dh	EMPTY
197	290	2	-1	0	-1	if ( ssl -> cert -> dh _ tmp == null ) {	ssl cert	EMPTY
197	291	2	-1	0	-1	openssl _ put _ error ( ssl  err _ r _ dh _ lib ) ;	EMPTY	EMPTY
197	292	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	293	2	-1	0	-1	}	EMPTY	EMPTY
197	294	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	295	3	-1	0	-1	}	EMPTY	EMPTY
197	297	1	0	0	-1	int ssl _ ctx _ set _ tmp _ ecdh ( ssl _ ctx * ctx  const ec _ key * ec _ key ) {	ssl _ ctx _ set _ tmp _ ecdh ctx ec _ key	EMPTY
197	298	2	-1	0	-1	if ( ec _ key == null || ec _ key _ get0 _ group ( ec _ key ) == null ) {	ec _ key ec _ key _ get0 _ group ec _ key	EMPTY
197	299	2	-1	0	-1	openssl _ put _ error ( ssl  err _ r _ passed _ null _ parameter ) ;	EMPTY	EMPTY
197	300	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	301	2	-1	0	-1	}	EMPTY	EMPTY
197	302	2	-1	0	-1	int nid = ec _ group _ get _ curve _ name ( ec _ key _ get0 _ group ( ec _ key ) ) ;	nid ec _ group _ get _ curve _ name ec _ key _ get0 _ group ec _ key	EMPTY
197	303	2	-1	0	-1	return ssl _ ctx _ set1 _ curves ( ctx  & nid  numconst ) ;	ssl _ ctx _ set1 _ curves ctx nid	EMPTY
197	304	3	-1	0	-1	}	EMPTY	EMPTY
197	306	1	0	0	-1	int ssl _ set _ tmp _ ecdh ( ssl * ssl  const ec _ key * ec _ key ) {	ssl _ set _ tmp _ ecdh ssl ec _ key	EMPTY
197	307	2	-1	0	-1	if ( ec _ key == null || ec _ key _ get0 _ group ( ec _ key ) == null ) {	ec _ key ec _ key _ get0 _ group ec _ key	EMPTY
197	308	2	-1	0	-1	openssl _ put _ error ( ssl  err _ r _ passed _ null _ parameter ) ;	EMPTY	EMPTY
197	309	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	310	2	-1	0	-1	}	EMPTY	EMPTY
197	311	2	-1	0	-1	int nid = ec _ group _ get _ curve _ name ( ec _ key _ get0 _ group ( ec _ key ) ) ;	nid ec _ group _ get _ curve _ name ec _ key _ get0 _ group ec _ key	EMPTY
197	312	2	-1	0	-1	return ssl _ set1 _ curves ( ssl  & nid  numconst ) ;	ssl _ set1 _ curves ssl nid	EMPTY
197	313	3	-1	0	-1	}	EMPTY	EMPTY
197	315	1	0	0	-1	int ssl _ ctx _ enable _ tls _ channel _ id ( ssl _ ctx * ctx ) {	ssl _ ctx _ enable _ tls _ channel _ id ctx	EMPTY
197	316	2	-1	0	-1	ctx -> tlsext _ channel _ id _ enabled = numconst ;	ctx tlsext _ channel _ id _ enabled	EMPTY
197	317	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	318	3	-1	0	-1	}	EMPTY	EMPTY
197	320	1	0	0	-1	int ssl _ enable _ tls _ channel _ id ( ssl * ssl ) {	ssl _ enable _ tls _ channel _ id ssl	EMPTY
197	321	2	-1	0	-1	ssl -> tlsext _ channel _ id _ enabled = numconst ;	ssl tlsext _ channel _ id _ enabled	EMPTY
197	322	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	323	3	-1	0	-1	}	EMPTY	EMPTY
197	325	1	0	0	-1	int ssl _ ctx _ set1 _ tls _ channel _ id ( ssl _ ctx * ctx  evp _ pkey * private _ key ) {	ssl _ ctx _ set1 _ tls _ channel _ id ctx private _ key	EMPTY
197	326	2	-1	0	-1	ctx -> tlsext _ channel _ id _ enabled = numconst ;	ctx tlsext _ channel _ id _ enabled	EMPTY
197	327	2	-1	0	-1	if ( evp _ pkey _ id ( private _ key ) != evp _ pkey _ ec ||	evp _ pkey _ id private _ key	EMPTY
197	328	2	-1	0	-1	evp _ pkey _ bits ( private _ key ) != numconst ) {	evp _ pkey _ bits private _ key	EMPTY
197	329	2	-1	0	-1	openssl _ put _ error ( ssl  ssl _ r _ channel _ id _ not _ p256 ) ;	EMPTY	EMPTY
197	330	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	331	2	-1	0	-1	}	EMPTY	EMPTY
197	332	2	-1	0	-1	evp _ pkey _ free ( ctx -> tlsext _ channel _ id _ private ) ;	evp _ pkey _ free ctx tlsext _ channel _ id _ private	EMPTY
197	333	2	-1	0	-1	ctx -> tlsext _ channel _ id _ private = evp _ pkey _ up _ ref ( private _ key ) ;	ctx tlsext _ channel _ id _ private evp _ pkey _ up _ ref private _ key	EMPTY
197	334	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	335	3	-1	0	-1	}	EMPTY	EMPTY
197	337	1	0	0	-1	int ssl _ set1 _ tls _ channel _ id ( ssl * ssl  evp _ pkey * private _ key ) {	ssl _ set1 _ tls _ channel _ id ssl private _ key	EMPTY
197	338	2	-1	0	-1	ec _ key * ec _ key = evp _ pkey _ get0 _ ec _ key ( private _ key ) ;	ec _ key private _ key	EMPTY
197	339	2	-1	0	-1	if ( ec _ key == null ||	ec _ key	EMPTY
197	340	2	-1	0	-1	ec _ group _ get _ curve _ name ( ec _ key _ get0 _ group ( ec _ key ) ) !=	ec _ group _ get _ curve _ name ec _ key _ get0 _ group ec _ key	EMPTY
197	341	2	-1	0	-1	nid _ x9 _ 62 _ prime256v1 ) {	EMPTY	EMPTY
197	342	2	-1	0	-1	openssl _ put _ error ( ssl  ssl _ r _ channel _ id _ not _ p256 ) ;	EMPTY	EMPTY
197	343	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	344	3	-1	0	-1	}	EMPTY	EMPTY
197	346	1	0	0	0	evp _ pkey _ free ( ssl -> tlsext _ channel _ id _ private ) ;	evp _ pkey _ free ssl tlsext _ channel _ id _ private	EMPTY
197	347	2	-1	0	-1	ssl -> tlsext _ channel _ id _ private = evp _ pkey _ up _ ref ( private _ key ) ;	ssl tlsext _ channel _ id _ private evp _ pkey _ up _ ref private _ key	EMPTY
197	348	3	-1	0	-1	ssl -> tlsext _ channel _ id _ enabled = numconst ;	ssl tlsext _ channel _ id _ enabled	EMPTY
197	350	1	0	0	0	return numconst ;	EMPTY	EMPTY
197	351	3	-1	0	-1	}	EMPTY	EMPTY
197	353	1	0	0	-1	size _ t ssl _ get _ tls _ channel _ id ( ssl * ssl  uint8 _ t * out  size _ t max _ out ) {	ssl _ get _ tls _ channel _ id ssl out max _ out	EMPTY
197	354	2	-1	0	-1	if ( ! ssl -> s3 -> tlsext _ channel _ id _ valid ) {	ssl s3 tlsext _ channel _ id _ valid	EMPTY
197	355	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	356	2	-1	0	-1	}	EMPTY	EMPTY
197	357	2	-1	0	-1	memcpy ( out  ssl -> s3 -> tlsext _ channel _ id  ( max _ out < numconst ) ? max _ out : numconst ) ;	out ssl s3 tlsext _ channel _ id max _ out max _ out	EMPTY
197	358	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	359	3	-1	0	-1	}	EMPTY	EMPTY
197	361	1	0	0	-1	int ssl _ set _ tlsext _ host _ name ( ssl * ssl  const char * name ) {	ssl _ set _ tlsext _ host _ name ssl name	EMPTY
197	362	2	-1	0	-1	openssl _ free ( ssl -> tlsext _ hostname ) ;	ssl	EMPTY
197	363	3	-1	0	-1	ssl -> tlsext _ hostname = null ;	ssl	EMPTY
197	365	1	0	0	0	if ( name == null ) {	name	EMPTY
197	366	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	367	2	-1	0	-1	}	EMPTY	EMPTY
197	368	2	-1	0	-1	if ( strlen ( name ) > tlsext _ maxlen _ host _ name ) {	name	EMPTY
197	369	2	-1	0	-1	openssl _ put _ error ( ssl  ssl _ r _ ssl3 _ ext _ invalid _ servername ) ;	EMPTY	EMPTY
197	370	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	371	2	-1	0	-1	}	EMPTY	EMPTY
197	372	2	-1	0	-1	ssl -> tlsext _ hostname = buf _ strdup ( name ) ;	ssl buf _ strdup name	EMPTY
197	373	2	-1	0	-1	if ( ssl -> tlsext _ hostname == null ) {	ssl	EMPTY
197	374	2	-1	0	-1	openssl _ put _ error ( ssl  err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
197	375	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	376	2	-1	0	-1	}	EMPTY	EMPTY
197	377	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	378	3	-1	0	-1	}	EMPTY	EMPTY
197	380	1	0	0	-1	size _ t ssl _ get0 _ certificate _ types ( ssl * ssl  const uint8 _ t * * out _ types ) {	ssl _ get0 _ certificate _ types ssl	EMPTY
197	381	3	-1	0	-1	if ( ssl -> server || ! ssl -> s3 -> tmp . cert _ req ) {	ssl server ssl s3 tmp cert _ req	EMPTY
197	383	1	0	0	0	return numconst ;	EMPTY	EMPTY
197	384	3	-1	0	-1	}	EMPTY	EMPTY
197	386	1	0	0	0	return ssl -> s3 -> tmp . num _ certificate _ types ;	ssl s3 tmp	EMPTY
197	387	3	-1	0	-1	}	EMPTY	EMPTY
197	389	1	0	0	-1	int ssl _ ctx _ set1 _ curves ( ssl _ ctx * ctx  const int * curves  size _ t curves _ len ) {	ssl _ ctx _ set1 _ curves ctx curves	EMPTY
197	390	2	-1	0	-1	return tls1 _ set _ curves ( & ctx -> tlsext _ ellipticcurvelist	tls1 _ set _ curves ctx tlsext _ ellipticcurvelist	EMPTY
197	391	2	-1	0	-1	& ctx -> tlsext _ ellipticcurvelist _ length  curves	ctx tlsext _ ellipticcurvelist _ length curves	EMPTY
197	392	2	-1	0	-1	curves _ len ) ;	EMPTY	EMPTY
197	393	3	-1	0	-1	}	EMPTY	EMPTY
197	395	1	0	0	-1	int ssl _ set1 _ curves ( ssl * ssl  const int * curves  size _ t curves _ len ) {	ssl _ set1 _ curves ssl curves	EMPTY
197	396	2	-1	0	-1	return tls1 _ set _ curves ( & ssl -> tlsext _ ellipticcurvelist	tls1 _ set _ curves ssl tlsext _ ellipticcurvelist	EMPTY
197	397	2	-1	0	-1	& ssl -> tlsext _ ellipticcurvelist _ length  curves	ssl tlsext _ ellipticcurvelist _ length curves	EMPTY
197	398	2	-1	0	-1	curves _ len ) ;	EMPTY	EMPTY
197	399	3	-1	0	-1	}	EMPTY	EMPTY
197	401	1	0	0	-1	int ssl _ ctx _ set _ tlsext _ servername _ callback (	ssl _ ctx _ set _ tlsext _ servername _ callback	EMPTY
197	402	2	-1	0	-1	ssl _ ctx * ctx  int ( * callback ) ( ssl * ssl  int * out _ alert  void * arg ) ) {	ctx callback ssl out _ alert arg	EMPTY
197	403	2	-1	0	-1	ctx -> tlsext _ servername _ callback = callback ;	ctx tlsext _ servername _ callback callback	EMPTY
197	404	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	405	3	-1	0	-1	}	EMPTY	EMPTY
197	407	1	0	0	-1	int ssl _ ctx _ set _ tlsext _ servername _ arg ( ssl _ ctx * ctx  void * arg ) {	ssl _ ctx _ set _ tlsext _ servername _ arg ctx arg	EMPTY
197	408	2	-1	0	-1	ctx -> tlsext _ servername _ arg = arg ;	ctx arg	EMPTY
197	409	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	410	3	-1	0	-1	}	EMPTY	EMPTY
197	412	1	0	0	-1	int ssl _ ctx _ get _ tlsext _ ticket _ keys ( ssl _ ctx * ctx  void * out  size _ t len ) {	ssl _ ctx _ get _ tlsext _ ticket _ keys ctx out len	EMPTY
197	413	2	-1	0	-1	if ( out == null ) {	out	EMPTY
197	414	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	415	2	-1	0	-1	}	EMPTY	EMPTY
197	416	2	-1	0	-1	if ( len != numconst ) {	len	EMPTY
197	417	2	-1	0	-1	openssl _ put _ error ( ssl  ssl _ r _ invalid _ ticket _ keys _ length ) ;	EMPTY	EMPTY
197	418	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	419	2	-1	0	-1	}	EMPTY	EMPTY
197	420	2	-1	0	-1	uint8 _ t * out _ bytes = out ;	out _ bytes out	EMPTY
197	421	2	-1	0	-1	memcpy ( out _ bytes  ctx -> tlsext _ tick _ key _ name  numconst ) ;	out _ bytes ctx tlsext _ tick _ key _ name	EMPTY
197	422	2	-1	0	-1	memcpy ( out _ bytes + numconst  ctx -> tlsext _ tick _ hmac _ key  numconst ) ;	out _ bytes ctx	EMPTY
197	423	2	-1	0	-1	memcpy ( out _ bytes + numconst  ctx -> tlsext _ tick _ aes _ key  numconst ) ;	out _ bytes ctx	EMPTY
197	424	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	425	3	-1	0	-1	}	EMPTY	EMPTY
197	427	1	0	0	-1	int ssl _ ctx _ set _ tlsext _ ticket _ keys ( ssl _ ctx * ctx  const void * in  size _ t len ) {	ssl _ ctx _ set _ tlsext _ ticket _ keys ctx in len	EMPTY
197	428	2	-1	0	-1	if ( in == null ) {	in	EMPTY
197	429	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	430	2	-1	0	-1	}	EMPTY	EMPTY
197	431	2	-1	0	-1	if ( len != numconst ) {	len	EMPTY
197	432	2	-1	0	-1	openssl _ put _ error ( ssl  ssl _ r _ invalid _ ticket _ keys _ length ) ;	EMPTY	EMPTY
197	433	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	434	2	-1	0	-1	}	EMPTY	EMPTY
197	435	2	-1	0	-1	const uint8 _ t * in _ bytes = in ;	in	EMPTY
197	436	2	-1	0	-1	memcpy ( ctx -> tlsext _ tick _ key _ name  in _ bytes  numconst ) ;	ctx tlsext _ tick _ key _ name	EMPTY
197	437	2	-1	0	-1	memcpy ( ctx -> tlsext _ tick _ hmac _ key  in _ bytes + numconst  numconst ) ;	ctx	EMPTY
197	438	2	-1	0	-1	memcpy ( ctx -> tlsext _ tick _ aes _ key  in _ bytes + numconst  numconst ) ;	ctx	EMPTY
197	439	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	440	3	-1	0	-1	}	EMPTY	EMPTY
197	442	1	0	0	-1	int ssl _ ctx _ set _ tlsext _ ticket _ key _ cb (	ssl _ ctx _ set _ tlsext _ ticket _ key _ cb	EMPTY
197	443	2	-1	0	-1	ssl _ ctx * ctx  int ( * callback ) ( ssl * ssl  uint8 _ t * key _ name  uint8 _ t * iv	ctx callback ssl iv	EMPTY
197	444	2	-1	0	-1	evp _ cipher _ ctx * ctx  hmac _ ctx * hmac _ ctx	ctx	EMPTY
197	445	2	-1	0	-1	int encrypt ) ) {	encrypt	EMPTY
197	446	2	-1	0	-1	ctx -> tlsext _ ticket _ key _ cb = callback ;	ctx tlsext _ ticket _ key _ cb callback	EMPTY
197	447	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
197	448	3	-1	0	-1	}	EMPTY	EMPTY
197	450	1	0	0	-1	struct ssl _ cipher _ preference _ list _ st * ssl _ get _ cipher _ preferences ( ssl * ssl ) {	ssl _ cipher _ preference _ list _ st ssl	EMPTY
197	451	2	-1	0	-1	if ( ssl -> cipher _ list != null ) {	ssl cipher _ list	EMPTY
197	452	2	-1	0	-1	return ssl -> cipher _ list ;	ssl cipher _ list	EMPTY
197	453	3	-1	0	-1	}	EMPTY	EMPTY
197	455	1	0	0	0	if ( ssl -> version >= tls1 _ 1 _ version && ssl -> ctx != null &&	ssl version ssl ctx	EMPTY
197	456	2	-1	0	-1	ssl -> ctx -> cipher _ list _ tls11 != null ) {	ssl ctx cipher _ list _ tls11	EMPTY
197	457	2	-1	0	-1	return ssl -> ctx -> cipher _ list _ tls11 ;	ssl ctx cipher _ list _ tls11	EMPTY
197	458	3	-1	0	-1	}	EMPTY	EMPTY
197	460	1	0	0	0	if ( ssl -> version >= tls1 _ version && ssl -> ctx != null &&	ssl version ssl ctx	EMPTY
197	461	2	-1	0	-1	ssl -> ctx -> cipher _ list _ tls10 != null ) {	ssl ctx cipher _ list _ tls10	EMPTY
197	462	2	-1	0	-1	return ssl -> ctx -> cipher _ list _ tls10 ;	ssl ctx cipher _ list _ tls10	EMPTY
197	463	3	-1	0	-1	}	EMPTY	EMPTY
197	465	1	0	0	0	if ( ssl -> ctx != null && ssl -> ctx -> cipher _ list != null ) {	ssl ctx ssl ctx cipher _ list	EMPTY
197	466	2	-1	0	-1	return ssl -> ctx -> cipher _ list ;	ssl ctx cipher _ list	EMPTY
197	467	3	-1	0	-1	}	EMPTY	EMPTY
197	469	1	0	0	0	return null ;	EMPTY	EMPTY
197	470	3	-1	0	-1	}	EMPTY	EMPTY
197	472	1	1	0	-1	const ssl _ cipher * ssl3 _ choose _ cipher (	EMPTY	EMPTY
197	473	2	-1	0	-1	ssl * ssl  stack _ of ( ssl _ cipher ) * clnt	ssl	EMPTY
197	474	2	-1	0	-1	struct ssl _ cipher _ preference _ list _ st * server _ pref ) {	ssl _ cipher _ preference _ list _ st	EMPTY
197	475	2	-1	0	-1	const ssl _ cipher * c  * ret = null ;	c ret	EMPTY
197	476	2	-1	0	-1	stack _ of ( ssl _ cipher ) * srvr = server _ pref -> ciphers  * prio  * allow ;	EMPTY	EMPTY
197	477	2	-1	0	-1	size _ t i ;	i	EMPTY
197	478	2	-1	0	-1	int ok ;	ok	EMPTY
197	479	2	-1	0	-1	size _ t cipher _ index ;	EMPTY	EMPTY
197	480	2	-1	0	-1	uint32 _ t alg _ k  alg _ a  mask _ k  mask _ a ;	mask _ k	EMPTY
197	485	2	-1	1	-1	const uint8 _ t * in _ group _ flags ;	in _ group _ flags	EMPTY
197	488	3	-1	1	-1	int group _ min = - 1 ;	group _ min	EMPTY
197	490	1	0	0	0	if ( ssl -> options & ssl _ op _ cipher _ server _ preference ) {	ssl options	EMPTY
197	491	2	-1	0	-1	prio = srvr ;	EMPTY	EMPTY
197	492	2	-1	0	-1	in _ group _ flags = server _ pref -> in _ group _ flags ;	in _ group _ flags in _ group _ flags	EMPTY
197	493	2	-1	0	-1	allow = clnt ;	EMPTY	EMPTY
197	494	2	-1	0	-1	} else {	EMPTY	EMPTY
197	495	2	-1	0	-1	prio = clnt ;	EMPTY	EMPTY
197	496	2	-1	0	-1	in _ group _ flags = null ;	in _ group _ flags	EMPTY
197	497	2	-1	0	-1	allow = srvr ;	EMPTY	EMPTY
197	498	3	-1	0	-1	}	EMPTY	EMPTY
197	500	1	0	0	0	ssl _ get _ compatible _ server _ ciphers ( ssl , & mask _ k , & mask _ a )	ssl _ get _ compatible _ server _ ciphers ssl mask _ k	EMPTY
197	502	1	0	0	0	for ( i = numconst ; i < sk _ ssl _ cipher _ num ( prio ) ; i ++ ) {	i i i	EMPTY
197	503	3	-1	0	-1	c = sk _ ssl _ cipher _ value ( prio  i ) ;	c i	EMPTY
197	505	1	0	0	-1	ok = 1	ok	EMPTY
197	508	1	1	1	1	if ( ssl _ cipher _ get _ min _ version ( c ) >	ssl _ cipher _ get _ min _ version c	EMPTY
197	509	2	-1	0	-1	ssl3 _ version _ from _ wire ( ssl , ssl -> version ) ) {	ssl3 _ version _ from _ wire ssl ssl version	EMPTY
197	510	2	-1	0	-1	ok = 0 ;	ok	EMPTY
197	511	3	-1	0	-1	}	EMPTY	EMPTY
197	513	1	0	0	-1	alg _ k = c -> algorithm _ mkey	c algorithm _ mkey	EMPTY
197	514	3	-1	0	-1	alg _ a = c -> algorithm _ auth	c	EMPTY
197	516	1	0	0	-1	ok = ok && ( alg _ k & mask _ k ) && ( alg _ a & mask _ a )	ok ok mask _ k	EMPTY
197	518	1	1	0	1	if ( ok && sk _ ssl _ cipher _ find ( allow  & cipher _ index  c ) ) {	ok c	EMPTY
197	519	2	-1	0	-1	if ( in _ group _ flags != null && in _ group _ flags [ i ] == numconst ) {	in _ group _ flags in _ group _ flags i	EMPTY
197	522	2	-1	1	-1	if ( group _ min == - 1 || ( size _ t ) group _ min > cipher _ index ) {	group _ min group _ min	EMPTY
197	523	2	-1	0	-1	group _ min = cipher _ index ;	group _ min	EMPTY
197	524	2	-1	0	-1	}	EMPTY	EMPTY
197	525	2	-1	0	-1	}	EMPTY	EMPTY
197	526	2	-1	0	-1	if ( group _ min != - numconst && ( size _ t ) group _ min < cipher _ index ) {	group _ min group _ min	EMPTY
197	527	2	-1	0	-1	cipher _ index = group _ min ;	group _ min	EMPTY
197	528	2	-1	0	-1	}	EMPTY	EMPTY
197	529	2	-1	0	-1	ret = sk _ ssl _ cipher _ value ( allow  cipher _ index ) ;	ret	EMPTY
197	530	2	-1	0	-1	break ;	EMPTY	EMPTY
197	531	2	-1	0	-1	}	EMPTY	EMPTY
197	532	3	-1	0	-1	}	EMPTY	EMPTY
197	534	1	1	0	1	if ( in _ group _ flags != null && in _ group _ flags [ i ] == numconst && group _ min != - numconst ) {	in _ group _ flags in _ group _ flags i group _ min	EMPTY
197	537	2	-1	1	-1	ret = sk _ ssl _ cipher _ value ( allow  group _ min ) ;	ret group _ min	EMPTY
197	538	2	-1	0	-1	break	EMPTY	EMPTY
197	539	2	-1	0	-1	}	EMPTY	EMPTY
197	540	3	-1	0	-1	}	EMPTY	EMPTY
197	542	1	0	0	0	return ret ;	ret	EMPTY
197	543	3	-1	0	-1	}	EMPTY	EMPTY
197	545	1	0	0	-1	int ssl3 _ get _ req _ cert _ type ( ssl * ssl  uint8 _ t * p ) {	ssl p	EMPTY
197	546	2	-1	0	-1	int ret = numconst ;	ret	EMPTY
197	547	2	-1	0	-1	const uint8 _ t * sig ;	sig	EMPTY
197	548	2	-1	0	-1	size _ t i  siglen ;	i	EMPTY
197	549	2	-1	0	-1	int have _ rsa _ sign = numconst ;	EMPTY	EMPTY
197	550	3	-1	0	-1	int have _ ecdsa _ sign = numconst ;	EMPTY	EMPTY
197	553	1	1	1	-1	siglen = tls12 _ get _ psigalgs ( ssl , & sig )	ssl sig	EMPTY
197	554	2	-1	0	-1	for ( i = 0 ; i < siglen ; i += 2 , sig += 2 ) {	i i i sig	EMPTY
197	555	2	-1	0	-1	switch ( sig [ 1 ] ) {	sig	EMPTY
197	556	2	-1	0	-1	case tlsext _ signature _ rsa :	EMPTY	EMPTY
197	557	2	-1	0	-1	have _ rsa _ sign = 1 ;	EMPTY	EMPTY
197	558	3	-1	0	-1	break ;	EMPTY	EMPTY
197	560	1	0	0	-1	case tlsext _ signature _ ecdsa :	EMPTY	EMPTY
197	561	2	-1	0	-1	have _ ecdsa _ sign = 1 ;	EMPTY	EMPTY
197	562	2	-1	0	-1	break ;	EMPTY	EMPTY
197	563	2	-1	0	-1	}	EMPTY	EMPTY
197	564	3	-1	0	-1	}	EMPTY	EMPTY
197	566	1	0	0	0	if ( have _ rsa _ sign ) {	EMPTY	EMPTY
197	567	2	-1	0	-1	p [ ret ++ ] = ssl3 _ ct _ rsa _ sign ;	p ret	EMPTY
197	568	3	-1	0	-1	}	EMPTY	EMPTY
197	572	1	1	1	1	if ( ssl -> version >= tls1 _ version && have _ ecdsa _ sign ) {	ssl version	EMPTY
197	573	2	-1	0	-1	p [ ret ++ ] = tls _ ct _ ecdsa _ sign ;	p ret	EMPTY
197	574	3	-1	0	-1	}	EMPTY	EMPTY
197	576	1	0	0	0	return ret	ret	EMPTY
197	577	3	-1	0	-1	}	EMPTY	EMPTY
197	581	1	0	0	-1	uint32 _ t ssl _ get _ algorithm _ prf ( ssl * ssl ) {	ssl _ get _ algorithm _ prf ssl	EMPTY
197	582	2	-1	0	-1	uint32 _ t algorithm _ prf = ssl -> s3 -> tmp . new _ cipher -> algorithm _ prf ;	algorithm _ prf ssl s3 tmp new _ cipher algorithm _ prf	EMPTY
197	583	2	-1	0	-1	if ( ssl -> enc _ method -> enc _ flags & ssl _ enc _ flag _ sha256 _ prf &&	ssl enc _ method enc _ flags	EMPTY
197	584	2	-1	0	-1	algorithm _ prf == ssl _ handshake _ mac _ default ) {	algorithm _ prf	EMPTY
197	585	2	-1	0	-1	return ssl _ handshake _ mac _ sha256 ;	EMPTY	EMPTY
197	586	2	-1	0	-1	}	EMPTY	EMPTY
197	587	2	-1	0	-1	return algorithm _ prf	algorithm _ prf	EMPTY
197	588	3	-1	0	-1	}	EMPTY	EMPTY
234	24	1	0	0	-1	openssl _ compile _ assert ( ( crypto _ refcount _ t ) - numconst == crypto _ refcount _ max	crypto _ refcount _ t	EMPTY
234	25	3	-1	0	-1	crypto _ refcount _ max _ is _ incorrect ) ;	EMPTY	EMPTY
234	27	1	0	0	-1	static struct crypto _ static _ mutex g _ refcount _ lock = crypto _ static _ mutex _ init ;	EMPTY	EMPTY
234	29	1	0	0	-1	void crypto _ refcount _ inc ( crypto _ refcount _ t * count ) {	crypto _ refcount _ inc crypto _ refcount _ t count	EMPTY
234	30	2	-1	0	-1	crypto _ static _ mutex _ lock _ write ( & g _ refcount _ lock )	crypto _ static _ mutex _ lock _ write	EMPTY
234	31	2	-1	0	-1	if ( * count < crypto _ refcount _ max ) {	count	EMPTY
234	32	2	-1	0	-1	( * count ) ++ ;	count	EMPTY
234	33	2	-1	0	-1	}	EMPTY	EMPTY
234	34	2	-1	0	-1	crypto _ static _ mutex _ unlock ( & g _ refcount _ lock )	crypto _ static _ mutex _ unlock	EMPTY
234	35	3	-1	0	-1	}	EMPTY	EMPTY
234	37	1	0	0	-1	int crypto _ refcount _ dec _ and _ test _ zero ( crypto _ refcount _ t * count ) {	crypto _ refcount _ dec _ and _ test _ zero crypto _ refcount _ t count	EMPTY
234	38	3	-1	0	-1	int ret ;	EMPTY	EMPTY
234	40	1	0	0	0	crypto _ static _ mutex _ lock _ write ( & g _ refcount _ lock )	crypto _ static _ mutex _ lock _ write	EMPTY
234	41	2	-1	0	-1	if ( * count == 0 ) {	count	EMPTY
234	42	2	-1	0	-1	abort ( ) ;	EMPTY	EMPTY
234	43	2	-1	0	-1	}	EMPTY	EMPTY
234	44	2	-1	0	-1	if ( * count < crypto _ refcount _ max ) {	count	EMPTY
234	45	2	-1	0	-1	( * count ) -- ;	count	EMPTY
234	46	2	-1	0	-1	}	EMPTY	EMPTY
234	47	2	-1	0	-1	ret = ( * count == 0 )	count	EMPTY
234	48	3	-1	0	-1	crypto _ static _ mutex _ unlock ( & g _ refcount _ lock )	crypto _ static _ mutex _ unlock	EMPTY
234	50	1	0	0	0	return ret	EMPTY	EMPTY
234	51	3	-1	0	-1	}	EMPTY	EMPTY
234	53	1	1	1	-1	# endif	EMPTY	EMPTY
268	25	1	0	0	0	struct {	EMPTY	EMPTY
268	26	2	-1	0	-1	uint32 _ t v [ numconst ] ;	EMPTY	EMPTY
268	27	3	-1	0	-1	} fe1305x2 ;	EMPTY	EMPTY
268	29	1	0	0	-1	# define addmulmod openssl _ poly1305 _ neon2 _ addmulmod	EMPTY	EMPTY
268	30	3	-1	0	-1	# define blocks openssl _ poly1305 _ neon2 _ blocks	EMPTY	EMPTY
268	32	1	0	0	-1	extern void addmulmod ( fe1305x2 * r  const fe1305x2 * x  const fe1305x2 * y	EMPTY	EMPTY
268	33	3	-1	0	-1	const fe1305x2 * c ) ;	EMPTY	EMPTY
268	35	1	0	0	-1	extern int blocks ( fe1305x2 * h  const fe1305x2 * precomp  const uint8 _ t * in	EMPTY	EMPTY
268	36	3	-1	0	-1	unsigned int inlen ) ;	EMPTY	EMPTY
268	38	1	0	0	-1	static void freeze ( fe1305x2 * r ) {	EMPTY	EMPTY
268	39	3	-1	0	-1	int i ;	EMPTY	EMPTY
268	41	1	0	0	0	uint32 _ t x0 = r -> v [ numconst ] ;	EMPTY	EMPTY
268	42	2	-1	0	-1	uint32 _ t x1 = r -> v [ numconst ] ;	EMPTY	EMPTY
268	43	2	-1	0	-1	uint32 _ t x2 = r -> v [ numconst ] ;	EMPTY	EMPTY
268	44	2	-1	0	-1	uint32 _ t x3 = r -> v [ numconst ] ;	EMPTY	EMPTY
268	45	2	-1	0	-1	uint32 _ t x4 = r -> v [ numconst ] ;	EMPTY	EMPTY
268	46	2	-1	0	-1	uint32 _ t y0 ;	EMPTY	EMPTY
268	47	2	-1	0	-1	uint32 _ t y1 ;	EMPTY	EMPTY
268	48	2	-1	0	-1	uint32 _ t y2 ;	EMPTY	EMPTY
268	49	2	-1	0	-1	uint32 _ t y3 ;	EMPTY	EMPTY
268	50	2	-1	0	-1	uint32 _ t y4 ;	EMPTY	EMPTY
268	51	3	-1	0	-1	uint32 _ t swap ;	EMPTY	EMPTY
268	53	1	0	0	0	for ( i = numconst ; i < numconst ; ++ i ) {	EMPTY	EMPTY
268	54	2	-1	0	-1	x1 += x0 >> numconst ;	EMPTY	EMPTY
268	55	2	-1	0	-1	x0 &= numconst ;	EMPTY	EMPTY
268	56	2	-1	0	-1	x2 += x1 >> numconst ;	EMPTY	EMPTY
268	57	2	-1	0	-1	x1 &= numconst ;	EMPTY	EMPTY
268	58	2	-1	0	-1	x3 += x2 >> numconst ;	EMPTY	EMPTY
268	59	2	-1	0	-1	x2 &= numconst ;	EMPTY	EMPTY
268	60	2	-1	0	-1	x4 += x3 >> numconst ;	EMPTY	EMPTY
268	61	2	-1	0	-1	x3 &= numconst ;	EMPTY	EMPTY
268	62	2	-1	0	-1	x0 += numconst * ( x4 >> numconst ) ;	EMPTY	EMPTY
268	63	2	-1	0	-1	x4 &= numconst ;	EMPTY	EMPTY
268	64	3	-1	0	-1	}	EMPTY	EMPTY
268	66	1	0	0	-1	y0 = x0 + numconst ;	EMPTY	EMPTY
268	67	2	-1	0	-1	y1 = x1 + ( y0 >> numconst ) ;	EMPTY	EMPTY
268	68	2	-1	0	-1	y0 &= numconst ;	EMPTY	EMPTY
268	69	2	-1	0	-1	y2 = x2 + ( y1 >> numconst ) ;	EMPTY	EMPTY
268	70	2	-1	0	-1	y1 &= numconst ;	EMPTY	EMPTY
268	71	2	-1	0	-1	y3 = x3 + ( y2 >> numconst ) ;	EMPTY	EMPTY
268	72	2	-1	0	-1	y2 &= numconst ;	EMPTY	EMPTY
268	73	2	-1	0	-1	y4 = x4 + ( y3 >> numconst ) ;	EMPTY	EMPTY
268	74	2	-1	0	-1	y3 &= numconst ;	EMPTY	EMPTY
268	75	2	-1	0	-1	swap = - ( y4 >> numconst ) ;	EMPTY	EMPTY
268	76	3	-1	0	-1	y4 &= numconst ;	EMPTY	EMPTY
268	78	1	0	0	-1	y0 ^= x0 ;	EMPTY	EMPTY
268	79	2	-1	0	-1	y1 ^= x1 ;	EMPTY	EMPTY
268	80	2	-1	0	-1	y2 ^= x2 ;	EMPTY	EMPTY
268	81	2	-1	0	-1	y3 ^= x3 ;	EMPTY	EMPTY
268	82	3	-1	0	-1	y4 ^= x4 ;	EMPTY	EMPTY
268	84	1	0	0	-1	y0 &= swap ;	EMPTY	EMPTY
268	85	2	-1	0	-1	y1 &= swap ;	EMPTY	EMPTY
268	86	2	-1	0	-1	y2 &= swap ;	EMPTY	EMPTY
268	87	2	-1	0	-1	y3 &= swap ;	EMPTY	EMPTY
268	88	3	-1	0	-1	y4 &= swap ;	EMPTY	EMPTY
268	90	1	0	0	-1	y0 ^= x0 ;	EMPTY	EMPTY
268	91	2	-1	0	-1	y1 ^= x1 ;	EMPTY	EMPTY
268	92	2	-1	0	-1	y2 ^= x2 ;	EMPTY	EMPTY
268	93	2	-1	0	-1	y3 ^= x3 ;	EMPTY	EMPTY
268	94	3	-1	0	-1	y4 ^= x4 ;	EMPTY	EMPTY
268	96	1	0	0	-1	r -> v [ numconst ] = y0 ;	EMPTY	EMPTY
268	97	2	-1	0	-1	r -> v [ numconst ] = y1 ;	EMPTY	EMPTY
268	98	2	-1	0	-1	r -> v [ numconst ] = y2 ;	EMPTY	EMPTY
268	99	2	-1	0	-1	r -> v [ numconst ] = y3 ;	EMPTY	EMPTY
268	100	2	-1	0	-1	r -> v [ numconst ] = y4 ;	EMPTY	EMPTY
268	101	3	-1	0	-1	}	EMPTY	EMPTY
268	103	1	0	0	-1	static void fe1305x2 _ tobytearray ( uint8 _ t * r  fe1305x2 * x ) {	EMPTY	EMPTY
268	104	2	-1	0	-1	uint32 _ t x0 = x -> v [ numconst ] ;	EMPTY	EMPTY
268	105	2	-1	0	-1	uint32 _ t x1 = x -> v [ numconst ] ;	EMPTY	EMPTY
268	106	2	-1	0	-1	uint32 _ t x2 = x -> v [ numconst ] ;	EMPTY	EMPTY
268	107	2	-1	0	-1	uint32 _ t x3 = x -> v [ numconst ] ;	EMPTY	EMPTY
268	108	3	-1	0	-1	uint32 _ t x4 = x -> v [ numconst ] ;	EMPTY	EMPTY
268	110	1	0	0	-1	x1 += x0 >> numconst ;	EMPTY	EMPTY
268	111	2	-1	0	-1	x0 &= numconst ;	EMPTY	EMPTY
268	112	2	-1	0	-1	x2 += x1 >> numconst ;	EMPTY	EMPTY
268	113	2	-1	0	-1	x1 &= numconst ;	EMPTY	EMPTY
268	114	2	-1	0	-1	x3 += x2 >> numconst ;	EMPTY	EMPTY
268	115	2	-1	0	-1	x2 &= numconst ;	EMPTY	EMPTY
268	116	2	-1	0	-1	x4 += x3 >> numconst ;	EMPTY	EMPTY
268	117	3	-1	0	-1	x3 &= numconst ;	EMPTY	EMPTY
268	123	1	0	0	-1	}	EMPTY	EMPTY
268	127	1	0	0	-1	static uint32 _ t load32 ( uint8 _ t * t ) {	EMPTY	EMPTY
268	128	2	-1	0	-1	uint32 _ t tmp ;	EMPTY	EMPTY
268	129	2	-1	0	-1	memcpy ( & tmp  t  sizeof ( tmp ) ) ;	EMPTY	EMPTY
268	130	2	-1	0	-1	return tmp ;	EMPTY	EMPTY
268	131	3	-1	0	-1	}	EMPTY	EMPTY
268	133	1	0	0	-1	static void fe1305x2 _ frombytearray ( fe1305x2 * r  const uint8 _ t * x	EMPTY	EMPTY
268	134	2	-1	0	-1	unsigned long long xlen ) {	EMPTY	EMPTY
268	135	2	-1	0	-1	unsigned i ;	EMPTY	EMPTY
268	136	3	-1	0	-1	uint8 _ t t [ numconst ] ;	EMPTY	EMPTY
268	138	1	0	0	0	for ( i = numconst ; ( i < numconst ) && ( i < xlen ) ; i ++ ) {	EMPTY	EMPTY
268	139	2	-1	0	-1	t [ i ] = x [ i ] ;	EMPTY	EMPTY
268	140	2	-1	0	-1	}	EMPTY	EMPTY
268	141	2	-1	0	-1	xlen -= i ;	EMPTY	EMPTY
268	142	2	-1	0	-1	x += i ;	EMPTY	EMPTY
268	143	2	-1	0	-1	t [ i ++ ] = numconst ;	EMPTY	EMPTY
268	144	2	-1	0	-1	for ( ; i < numconst ; i ++ ) {	EMPTY	EMPTY
268	145	2	-1	0	-1	t [ i ] = numconst ;	EMPTY	EMPTY
268	146	3	-1	0	-1	}	EMPTY	EMPTY
268	148	1	0	0	-1	r -> v [ numconst ] = numconst & load32 ( t ) ;	EMPTY	EMPTY
268	149	2	-1	0	-1	r -> v [ numconst ] = numconst & ( load32 ( t + numconst ) >> numconst ) ;	EMPTY	EMPTY
268	150	2	-1	0	-1	r -> v [ numconst ] = numconst & ( load32 ( t + numconst ) >> numconst ) ;	EMPTY	EMPTY
268	151	2	-1	0	-1	r -> v [ numconst ] = numconst & ( load32 ( t + numconst ) >> numconst ) ;	EMPTY	EMPTY
268	152	3	-1	0	-1	r -> v [ numconst ] = load32 ( t + numconst ) ;	EMPTY	EMPTY
268	154	1	0	0	0	if ( xlen ) {	EMPTY	EMPTY
268	155	2	-1	0	-1	for ( i = numconst ; ( i < numconst ) && ( i < xlen ) ; i ++ ) {	EMPTY	EMPTY
268	156	2	-1	0	-1	t [ i ] = x [ i ] ;	EMPTY	EMPTY
268	157	2	-1	0	-1	}	EMPTY	EMPTY
268	158	2	-1	0	-1	t [ i ++ ] = numconst ;	EMPTY	EMPTY
268	159	2	-1	0	-1	for ( ; i < numconst ; i ++ ) {	EMPTY	EMPTY
268	160	2	-1	0	-1	t [ i ] = numconst ;	EMPTY	EMPTY
268	161	3	-1	0	-1	}	EMPTY	EMPTY
268	163	1	0	0	-1	r -> v [ numconst ] = numconst & load32 ( t ) ;	EMPTY	EMPTY
268	164	2	-1	0	-1	r -> v [ numconst ] = numconst & ( load32 ( t + numconst ) >> numconst ) ;	EMPTY	EMPTY
268	165	2	-1	0	-1	r -> v [ numconst ] = numconst & ( load32 ( t + numconst ) >> numconst ) ;	EMPTY	EMPTY
268	166	2	-1	0	-1	r -> v [ numconst ] = numconst & ( load32 ( t + numconst ) >> numconst ) ;	EMPTY	EMPTY
268	167	2	-1	0	-1	r -> v [ numconst ] = load32 ( t + numconst ) ;	EMPTY	EMPTY
268	168	2	-1	0	-1	}	EMPTY	EMPTY
268	169	2	-1	0	-1	r -> v [ numconst ] = r -> v [ numconst ] = r -> v [ numconst ] = r -> v [ numconst ] = r -> v [ numconst ] = numconst ;	EMPTY	EMPTY
268	170	2	-1	0	-1	}	EMPTY	EMPTY
268	171	3	-1	0	-1	}	EMPTY	EMPTY
268	173	1	0	0	-1	static const fe1305x2 zero  _  _ attribute _  _  ( ( aligned ( numconst ) ) ) ;	EMPTY	EMPTY
268	175	1	0	0	-1	struct poly1305 _ state _ st {	EMPTY	EMPTY
268	176	2	-1	0	-1	uint8 _ t data [ sizeof ( fe1305x2 [ numconst ] ) + numconst ] ;	EMPTY	EMPTY
268	177	2	-1	0	-1	uint8 _ t buf [ numconst ] ;	EMPTY	EMPTY
268	178	2	-1	0	-1	unsigned int buf _ used ;	EMPTY	EMPTY
268	179	2	-1	0	-1	uint8 _ t key [ numconst ] ;	EMPTY	EMPTY
268	180	3	-1	0	-1	} ;	EMPTY	EMPTY
268	182	1	0	0	-1	void crypto _ poly1305 _ init _ neon ( poly1305 _ state * state  const uint8 _ t key [ numconst ] ) {	state	EMPTY
268	183	2	-1	0	-1	struct poly1305 _ state _ st * st = ( struct poly1305 _ state _ st * ) ( state ) ;	state	EMPTY
268	184	2	-1	0	-1	fe1305x2 * const r = ( fe1305x2 * ) ( st -> data + ( numconst & ( - ( int ) st -> data ) ) ) ;	EMPTY	EMPTY
268	185	2	-1	0	-1	fe1305x2 * const h = r + numconst ;	EMPTY	EMPTY
268	186	2	-1	0	-1	fe1305x2 * const c = h + numconst ;	EMPTY	EMPTY
268	187	2	-1	0	-1	fe1305x2 * const precomp = c + numconst ;	EMPTY	EMPTY
268	188	3	-1	0	-1	unsigned int j ;	EMPTY	EMPTY
268	190	1	0	0	-1	r -> v [ numconst ] = r -> v [ numconst ] = numconst & * ( uint32 _ t * ) key ;	EMPTY	EMPTY
268	191	2	-1	0	-1	r -> v [ numconst ] = r -> v [ numconst ] = numconst & ( ( * ( uint32 _ t * ) ( key + numconst ) ) >> numconst ) ;	EMPTY	EMPTY
268	192	2	-1	0	-1	r -> v [ numconst ] = r -> v [ numconst ] = numconst & ( ( * ( uint32 _ t * ) ( key + numconst ) ) >> numconst ) ;	EMPTY	EMPTY
268	193	2	-1	0	-1	r -> v [ numconst ] = r -> v [ numconst ] = numconst & ( ( * ( uint32 _ t * ) ( key + numconst ) ) >> numconst ) ;	EMPTY	EMPTY
268	194	3	-1	0	-1	r -> v [ numconst ] = r -> v [ numconst ] = numconst & ( ( * ( uint32 _ t * ) ( key + numconst ) ) >> numconst ) ;	EMPTY	EMPTY
268	196	1	1	0	1	for ( j = numconst ; j < numconst ; j ++ ) {	EMPTY	EMPTY
268	197	2	-1	1	-1	h -> v [ j ] = numconst ;	EMPTY	EMPTY
268	198	3	-1	0	-1	}	EMPTY	EMPTY
268	200	1	1	1	-1	addmulmod ( precomp  r  r  & zero ) ;	EMPTY	EMPTY
268	201	3	-1	0	-1	addmulmod ( precomp + numconst  precomp  precomp  & zero ) ;	EMPTY	EMPTY
268	203	1	0	0	0	memcpy ( st -> key  key + numconst  numconst ) ;	EMPTY	EMPTY
268	204	2	-1	0	-1	st -> buf _ used = numconst ;	EMPTY	EMPTY
268	205	3	-1	0	-1	}	EMPTY	EMPTY
268	207	1	0	0	-1	void crypto _ poly1305 _ update _ neon ( poly1305 _ state * state  const uint8 _ t * in	state	EMPTY
268	208	2	-1	0	-1	size _ t in _ len ) {	EMPTY	EMPTY
268	209	2	-1	0	-1	struct poly1305 _ state _ st * st = ( struct poly1305 _ state _ st * ) ( state ) ;	state	EMPTY
268	210	2	-1	0	-1	fe1305x2 * const r = ( fe1305x2 * ) ( st -> data + ( numconst & ( - ( int ) st -> data ) ) ) ;	EMPTY	EMPTY
268	211	2	-1	0	-1	fe1305x2 * const h = r + numconst ;	EMPTY	EMPTY
268	212	2	-1	0	-1	fe1305x2 * const c = h + numconst ;	EMPTY	EMPTY
268	213	2	-1	0	-1	fe1305x2 * const precomp = c + numconst ;	EMPTY	EMPTY
268	214	3	-1	0	-1	unsigned int i ;	EMPTY	EMPTY
268	216	1	0	0	0	if ( st -> buf _ used ) {	EMPTY	EMPTY
268	217	2	-1	0	-1	unsigned int todo = numconst - st -> buf _ used ;	EMPTY	EMPTY
268	218	2	-1	0	-1	if ( todo > in _ len ) {	EMPTY	EMPTY
268	219	2	-1	0	-1	todo = in _ len ;	EMPTY	EMPTY
268	220	2	-1	0	-1	}	EMPTY	EMPTY
268	221	2	-1	0	-1	for ( i = numconst ; i < todo ; i ++ ) {	EMPTY	EMPTY
268	222	2	-1	0	-1	st -> buf [ st -> buf _ used + i ] = in [ i ] ;	EMPTY	EMPTY
268	223	2	-1	0	-1	}	EMPTY	EMPTY
268	224	2	-1	0	-1	st -> buf _ used += todo ;	EMPTY	EMPTY
268	225	2	-1	0	-1	in _ len -= todo ;	EMPTY	EMPTY
268	226	3	-1	0	-1	in += todo ;	EMPTY	EMPTY
268	228	1	0	0	0	if ( st -> buf _ used == sizeof ( st -> buf ) && in _ len ) {	EMPTY	EMPTY
268	229	2	-1	0	-1	addmulmod ( h  h  precomp  & zero ) ;	EMPTY	EMPTY
268	230	2	-1	0	-1	fe1305x2 _ frombytearray ( c  st -> buf  sizeof ( st -> buf ) ) ;	EMPTY	EMPTY
268	231	2	-1	0	-1	for ( i = numconst ; i < numconst ; i ++ ) {	EMPTY	EMPTY
268	232	2	-1	0	-1	h -> v [ i ] += c -> v [ i ] ;	EMPTY	EMPTY
268	233	2	-1	0	-1	}	EMPTY	EMPTY
268	234	2	-1	0	-1	st -> buf _ used = numconst ;	EMPTY	EMPTY
268	235	2	-1	0	-1	}	EMPTY	EMPTY
268	236	3	-1	0	-1	}	EMPTY	EMPTY
268	238	1	0	0	0	while ( in _ len > numconst ) {	EMPTY	EMPTY
268	239	2	-1	0	-1	unsigned int tlen = numconst ;	EMPTY	EMPTY
268	240	2	-1	0	-1	if ( in _ len < tlen ) {	EMPTY	EMPTY
268	241	2	-1	0	-1	tlen = in _ len ;	EMPTY	EMPTY
268	242	2	-1	0	-1	}	EMPTY	EMPTY
268	243	2	-1	0	-1	tlen -= blocks ( h  precomp  in  tlen ) ;	EMPTY	EMPTY
268	244	2	-1	0	-1	in _ len -= tlen ;	EMPTY	EMPTY
268	245	2	-1	0	-1	in += tlen ;	EMPTY	EMPTY
268	246	3	-1	0	-1	}	EMPTY	EMPTY
268	248	1	0	0	0	if ( in _ len ) {	EMPTY	EMPTY
268	249	2	-1	0	-1	for ( i = numconst ; i < in _ len ; i ++ ) {	EMPTY	EMPTY
268	250	2	-1	0	-1	st -> buf [ i ] = in [ i ] ;	EMPTY	EMPTY
268	251	2	-1	0	-1	}	EMPTY	EMPTY
268	252	2	-1	0	-1	st -> buf _ used = in _ len ;	EMPTY	EMPTY
268	253	2	-1	0	-1	}	EMPTY	EMPTY
268	254	3	-1	0	-1	}	EMPTY	EMPTY
268	256	1	0	0	-1	void crypto _ poly1305 _ finish _ neon ( poly1305 _ state * state  uint8 _ t mac [ numconst ] ) {	state	EMPTY
268	257	2	-1	0	-1	struct poly1305 _ state _ st * st = ( struct poly1305 _ state _ st * ) ( state ) ;	state	EMPTY
268	258	2	-1	0	-1	fe1305x2 * const r = ( fe1305x2 * ) ( st -> data + ( numconst & ( - ( int ) st -> data ) ) ) ;	EMPTY	EMPTY
268	259	2	-1	0	-1	fe1305x2 * const h = r + numconst ;	EMPTY	EMPTY
268	260	2	-1	0	-1	fe1305x2 * const c = h + numconst ;	EMPTY	EMPTY
268	261	3	-1	0	-1	fe1305x2 * const precomp = c + numconst ;	EMPTY	EMPTY
268	263	1	0	0	0	addmulmod ( h  h  precomp  & zero ) ;	EMPTY	EMPTY
268	265	1	0	0	0	if ( st -> buf _ used > numconst ) {	EMPTY	EMPTY
268	266	2	-1	0	-1	fe1305x2 _ frombytearray ( c  st -> buf  st -> buf _ used ) ;	EMPTY	EMPTY
268	267	2	-1	0	-1	precomp -> v [ numconst ] = r -> v [ numconst ] ;	EMPTY	EMPTY
268	268	2	-1	0	-1	precomp -> v [ numconst ] = r -> v [ numconst ] ;	EMPTY	EMPTY
268	269	2	-1	0	-1	precomp -> v [ numconst ] = r -> v [ numconst ] ;	EMPTY	EMPTY
268	270	2	-1	0	-1	precomp -> v [ numconst ] = r -> v [ numconst ] ;	EMPTY	EMPTY
268	271	2	-1	0	-1	precomp -> v [ numconst ] = r -> v [ numconst ] ;	EMPTY	EMPTY
268	272	2	-1	0	-1	addmulmod ( h  h  precomp  c ) ;	EMPTY	EMPTY
268	273	2	-1	0	-1	if ( st -> buf _ used > numconst ) {	EMPTY	EMPTY
268	274	2	-1	0	-1	fe1305x2 _ frombytearray ( c  st -> buf  st -> buf _ used ) ;	EMPTY	EMPTY
268	275	2	-1	0	-1	r -> v [ numconst ] = numconst ;	EMPTY	EMPTY
268	276	2	-1	0	-1	r -> v [ numconst ] = numconst ;	EMPTY	EMPTY
268	277	2	-1	0	-1	r -> v [ numconst ] = numconst ;	EMPTY	EMPTY
268	278	2	-1	0	-1	r -> v [ numconst ] = numconst ;	EMPTY	EMPTY
268	279	2	-1	0	-1	r -> v [ numconst ] = numconst ;	EMPTY	EMPTY
268	280	2	-1	0	-1	addmulmod ( h  h  r  c ) ;	EMPTY	EMPTY
268	281	3	-1	0	-1	}	EMPTY	EMPTY
268	283	1	0	0	-1	h -> v [ numconst ] += h -> v [ numconst ] ;	EMPTY	EMPTY
268	284	2	-1	0	-1	h -> v [ numconst ] += h -> v [ numconst ] ;	EMPTY	EMPTY
268	285	2	-1	0	-1	h -> v [ numconst ] += h -> v [ numconst ] ;	EMPTY	EMPTY
268	286	2	-1	0	-1	h -> v [ numconst ] += h -> v [ numconst ] ;	EMPTY	EMPTY
268	287	2	-1	0	-1	h -> v [ numconst ] += h -> v [ numconst ] ;	EMPTY	EMPTY
268	288	3	-1	0	-1	freeze ( h ) ;	EMPTY	EMPTY
268	290	1	0	0	0	fe1305x2 _ frombytearray ( c  st -> key  numconst ) ;	EMPTY	EMPTY
268	291	3	-1	0	-1	c -> v [ numconst ] ^= ( numconst << numconst ) ;	EMPTY	EMPTY
268	293	1	0	0	-1	h -> v [ numconst ] += c -> v [ numconst ] ;	EMPTY	EMPTY
268	294	2	-1	0	-1	h -> v [ numconst ] += c -> v [ numconst ] ;	EMPTY	EMPTY
268	295	2	-1	0	-1	h -> v [ numconst ] += c -> v [ numconst ] ;	EMPTY	EMPTY
268	296	2	-1	0	-1	h -> v [ numconst ] += c -> v [ numconst ] ;	EMPTY	EMPTY
268	297	2	-1	0	-1	h -> v [ numconst ] += c -> v [ numconst ] ;	EMPTY	EMPTY
268	298	2	-1	0	-1	fe1305x2 _ tobytearray ( mac  h ) ;	EMPTY	EMPTY
268	299	3	-1	0	-1	}	EMPTY	EMPTY
268	301	1	1	1	-1	# endif	EMPTY	EMPTY
271	66	1	0	0	-1	static const size _ t kminnumbuckets = numconst ;	kminnumbuckets	EMPTY
271	70	1	0	0	0	static const size _ t kmaxaveragechainlength = numconst	kmaxaveragechainlength	EMPTY
271	71	3	-1	0	-1	static const size _ t kminaveragechainlength = numconst ;	EMPTY	EMPTY
271	73	1	0	0	-1	_ lhash * lh _ new ( lhash _ hash _ func hash  lhash _ cmp _ func comp ) {	lh _ new lhash _ hash _ func hash lhash _ cmp _ func comp	EMPTY
271	74	3	-1	0	-1	_ lhash * ret ;	ret	EMPTY
271	76	1	0	0	-1	ret = openssl _ malloc ( sizeof (  _ lhash ) )	ret	EMPTY
271	77	2	-1	0	-1	if ( ret == null ) {	ret	EMPTY
271	78	2	-1	0	-1	return null ;	EMPTY	EMPTY
271	79	2	-1	0	-1	}	EMPTY	EMPTY
271	80	3	-1	0	-1	memset ( ret  numconst  sizeof (  _ lhash ) ) ;	ret	EMPTY
271	82	1	0	0	-1	ret -> num _ buckets = kminnumbuckets	ret num _ buckets kminnumbuckets	EMPTY
271	83	2	-1	0	-1	ret -> buckets = openssl _ malloc ( sizeof ( lhash _ item * ) * ret -> num _ buckets )	ret buckets lhash _ item ret num _ buckets	EMPTY
271	84	2	-1	0	-1	if ( ret -> buckets == null ) {	ret buckets	EMPTY
271	85	2	-1	0	-1	openssl _ free ( ret ) ;	ret	EMPTY
271	86	2	-1	0	-1	return null ;	EMPTY	EMPTY
271	87	2	-1	0	-1	}	EMPTY	EMPTY
271	88	3	-1	0	-1	memset ( ret -> buckets  numconst  sizeof ( lhash _ item * ) * ret -> num _ buckets ) ;	ret buckets lhash _ item ret num _ buckets	EMPTY
271	90	1	0	0	-1	ret -> comp = comp	ret comp comp	EMPTY
271	91	2	-1	0	-1	if ( ret -> comp == null ) {	ret comp	EMPTY
271	92	2	-1	0	-1	ret -> comp = ( lhash _ cmp _ func ) strcmp ;	ret comp lhash _ cmp _ func	EMPTY
271	93	2	-1	0	-1	}	EMPTY	EMPTY
271	94	2	-1	0	-1	ret -> hash = hash	ret hash hash	EMPTY
271	95	2	-1	0	-1	if ( ret -> hash == null ) {	ret hash	EMPTY
271	96	2	-1	0	-1	ret -> hash = ( lhash _ hash _ func ) lh _ strhash ;	ret hash lhash _ hash _ func lh _ strhash	EMPTY
271	97	3	-1	0	-1	}	EMPTY	EMPTY
271	99	1	0	0	0	return ret	ret	EMPTY
271	100	3	-1	0	-1	}	EMPTY	EMPTY
271	102	1	0	0	-1	void lh _ free (  _ lhash * lh ) {	lh _ free lh	EMPTY
271	103	2	-1	0	-1	size _ t i ;	EMPTY	EMPTY
271	104	3	-1	0	-1	lhash _ item * n , * next ;	lhash _ item n	EMPTY
271	106	1	0	0	0	if ( lh == null ) {	lh	EMPTY
271	107	2	-1	0	-1	return ;	EMPTY	EMPTY
271	108	3	-1	0	-1	}	EMPTY	EMPTY
271	110	1	0	0	0	for ( i = 0 ; i < lh -> num _ buckets ; i ++ ) {	lh num _ buckets	EMPTY
271	111	2	-1	0	-1	for ( n = lh -> buckets [ i ] ; n != null ; n = next ) {	n lh buckets n n	EMPTY
271	112	2	-1	0	-1	next = n -> next ;	n	EMPTY
271	113	2	-1	0	-1	openssl _ free ( n ) ;	n	EMPTY
271	114	2	-1	0	-1	}	EMPTY	EMPTY
271	115	3	-1	0	-1	}	EMPTY	EMPTY
271	117	1	0	0	0	openssl _ free ( lh -> buckets ) ;	lh buckets	EMPTY
271	118	2	-1	0	-1	openssl _ free ( lh ) ;	lh	EMPTY
271	119	3	-1	0	-1	}	EMPTY	EMPTY
271	121	1	0	0	0	return lh -> num _ items	lh num _ items	EMPTY
271	130	1	0	0	-1	static lhash _ item * * get _ next _ ptr _ and _ hash ( const  _ lhash * lh  uint32 _ t * out _ hash	lhash _ item get _ next _ ptr _ and _ hash lh out _ hash	EMPTY
271	131	2	-1	0	-1	const void * data ) {	data	EMPTY
271	132	2	-1	0	-1	const uint32 _ t hash = lh -> hash ( data ) ;	hash lh hash data	EMPTY
271	133	3	-1	0	-1	lhash _ item * cur , * * ret ;	lhash _ item ret	EMPTY
271	135	1	0	0	0	if ( out _ hash != null ) {	out _ hash	EMPTY
271	136	2	-1	0	-1	* out _ hash = hash ;	out _ hash hash	EMPTY
271	137	3	-1	0	-1	}	EMPTY	EMPTY
271	139	1	0	0	-1	ret = & lh -> buckets [ hash % lh -> num _ buckets ]	ret lh buckets hash lh num _ buckets	EMPTY
271	140	2	-1	0	-1	for ( cur = * ret ; cur != null ; cur = * ret ) {	ret ret	EMPTY
271	141	2	-1	0	-1	if ( lh -> comp ( cur -> data , data ) == 0 ) {	lh comp data data	EMPTY
271	142	2	-1	0	-1	break ;	EMPTY	EMPTY
271	143	2	-1	0	-1	}	EMPTY	EMPTY
271	144	2	-1	0	-1	ret = & cur -> next ;	ret	EMPTY
271	145	3	-1	0	-1	}	EMPTY	EMPTY
271	147	1	0	0	0	return ret	ret	EMPTY
271	148	3	-1	0	-1	}	EMPTY	EMPTY
271	150	1	0	0	-1	void * lh _ retrieve ( const  _ lhash * lh  const void * data ) {	lh _ retrieve lh data	EMPTY
271	151	3	-1	0	-1	lhash _ item * * next _ ptr ;	lhash _ item	EMPTY
271	153	1	0	0	-1	next _ ptr = get _ next _ ptr _ and _ hash ( lh , null , data )	get _ next _ ptr _ and _ hash lh data	EMPTY
271	155	1	0	0	0	if ( * next _ ptr == null ) {	EMPTY	EMPTY
271	156	2	-1	0	-1	return null ;	EMPTY	EMPTY
271	157	3	-1	0	-1	}	EMPTY	EMPTY
271	159	1	0	0	0	return ( * next _ ptr ) -> data	data	EMPTY
271	160	3	-1	0	-1	}	EMPTY	EMPTY
271	165	1	0	0	-1	static void lh _ rebucket (  _ lhash * lh  const size _ t new _ num _ buckets ) {	lh _ rebucket lh new _ num _ buckets	EMPTY
271	166	2	-1	0	-1	lhash _ item * * new _ buckets , * cur , * next ;	lhash _ item	EMPTY
271	167	3	-1	0	-1	size _ t i , alloc _ size ;	EMPTY	EMPTY
271	169	1	0	0	-1	alloc _ size = sizeof ( lhash _ item * ) * new _ num _ buckets	lhash _ item new _ num _ buckets	EMPTY
271	170	2	-1	0	-1	if ( alloc _ size / sizeof ( lhash _ item * ) != new _ num _ buckets ) {	lhash _ item new _ num _ buckets	EMPTY
271	171	2	-1	0	-1	return ;	EMPTY	EMPTY
271	172	3	-1	0	-1	}	EMPTY	EMPTY
271	174	1	0	0	-1	new _ buckets = openssl _ malloc ( alloc _ size )	EMPTY	EMPTY
271	175	2	-1	0	-1	if ( new _ buckets == null ) {	EMPTY	EMPTY
271	176	2	-1	0	-1	return ;	EMPTY	EMPTY
271	177	2	-1	0	-1	}	EMPTY	EMPTY
271	178	3	-1	0	-1	memset ( new _ buckets  numconst  alloc _ size ) ;	EMPTY	EMPTY
271	180	1	0	0	0	for ( i = 0 ; i < lh -> num _ buckets ; i ++ ) {	lh num _ buckets	EMPTY
271	181	2	-1	0	-1	for ( cur = lh -> buckets [ i ] ; cur != null ; cur = next ) {	lh buckets	EMPTY
271	182	2	-1	0	-1	const size _ t new _ bucket = cur -> hash % new _ num _ buckets ;	hash new _ num _ buckets	EMPTY
271	183	2	-1	0	-1	next = cur -> next ;	EMPTY	EMPTY
271	184	2	-1	0	-1	cur -> next = new _ buckets [ new _ bucket ] ;	EMPTY	EMPTY
271	185	2	-1	0	-1	new _ buckets [ new _ bucket ] = cur ;	EMPTY	EMPTY
271	186	2	-1	0	-1	}	EMPTY	EMPTY
271	187	3	-1	0	-1	}	EMPTY	EMPTY
271	189	1	0	0	0	openssl _ free ( lh -> buckets ) ;	lh buckets	EMPTY
271	191	1	0	0	-1	lh -> num _ buckets = new _ num _ buckets	lh num _ buckets new _ num _ buckets	EMPTY
271	192	2	-1	0	-1	lh -> buckets = new _ buckets	lh buckets	EMPTY
271	193	3	-1	0	-1	}	EMPTY	EMPTY
271	196	1	0	0	-1	static void lh _ maybe _ resize (  _ lhash * lh ) {	lh _ maybe _ resize lh	EMPTY
271	197	3	-1	0	-1	size _ t avg _ chain _ length ;	EMPTY	EMPTY
271	199	1	1	0	1	if ( lh -> callback _ depth > numconst ) {	lh callback _ depth	EMPTY
271	201	2	-1	1	-1	return	EMPTY	EMPTY
271	202	3	-1	0	-1	}	EMPTY	EMPTY
271	204	1	0	0	-1	assert ( lh -> num _ buckets >= kminnumbuckets ) ;	lh num _ buckets kminnumbuckets	EMPTY
271	205	3	-1	0	-1	avg _ chain _ length = lh -> num _ items / lh -> num _ buckets ;	lh num _ items lh num _ buckets	EMPTY
271	207	1	0	0	0	if ( avg _ chain _ length > kmaxaveragechainlength ) {	kmaxaveragechainlength	EMPTY
271	208	3	-1	0	-1	const size _ t new _ num _ buckets = lh -> num _ buckets * numconst ;	new _ num _ buckets lh num _ buckets	EMPTY
271	210	1	0	0	0	if ( new _ num _ buckets > lh -> num _ buckets ) {	new _ num _ buckets lh num _ buckets	EMPTY
271	211	2	-1	0	-1	lh _ rebucket ( lh  new _ num _ buckets ) ;	lh _ rebucket lh new _ num _ buckets	EMPTY
271	212	2	-1	0	-1	}	EMPTY	EMPTY
271	213	2	-1	0	-1	if ( avg _ chain _ length < kminaveragechainlength &&	EMPTY	EMPTY
271	214	2	-1	0	-1	lh -> num _ buckets > kminnumbuckets ) {	lh num _ buckets kminnumbuckets	EMPTY
271	215	3	-1	0	-1	size _ t new _ num _ buckets = lh -> num _ buckets / numconst ;	new _ num _ buckets lh num _ buckets	EMPTY
271	217	1	0	0	0	if ( new _ num _ buckets < kminnumbuckets ) {	new _ num _ buckets kminnumbuckets	EMPTY
271	218	2	-1	0	-1	new _ num _ buckets = kminnumbuckets ;	new _ num _ buckets kminnumbuckets	EMPTY
271	219	3	-1	0	-1	}	EMPTY	EMPTY
271	221	1	0	0	0	lh _ rebucket ( lh  new _ num _ buckets ) ;	lh _ rebucket lh new _ num _ buckets	EMPTY
271	222	2	-1	0	-1	}	EMPTY	EMPTY
271	223	3	-1	0	-1	}	EMPTY	EMPTY
271	225	1	0	0	-1	int lh _ insert (  _ lhash * lh  void * * old _ data  void * data ) {	lh _ insert lh old _ data data	EMPTY
271	226	2	-1	0	-1	uint32 _ t hash ;	hash	EMPTY
271	227	3	-1	0	-1	lhash _ item * * next _ ptr  * item ;	lhash _ item	EMPTY
271	230	1	0	0	-1	next _ ptr = get _ next _ ptr _ and _ hash ( lh  & hash  data ) ;	get _ next _ ptr _ and _ hash lh hash data	EMPTY
271	233	1	1	0	1	if ( * next _ ptr != null ) {	EMPTY	EMPTY
271	236	2	-1	1	-1	* old _ data = ( * next _ ptr ) -> data	old _ data data	EMPTY
271	237	2	-1	0	-1	( * next _ ptr ) -> data = data	data data	EMPTY
271	238	2	-1	0	-1	return 1	EMPTY	EMPTY
271	239	3	-1	0	-1	}	EMPTY	EMPTY
271	242	1	1	1	-1	item = openssl _ malloc ( sizeof ( lhash _ item ) )	lhash _ item	EMPTY
271	243	2	-1	0	-1	if ( item == null ) {	EMPTY	EMPTY
271	244	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
271	245	3	-1	0	-1	}	EMPTY	EMPTY
271	247	1	0	0	-1	item -> data = data	data data	EMPTY
271	248	2	-1	0	-1	item -> hash = hash	hash hash	EMPTY
271	249	2	-1	0	-1	item -> next = null ;	EMPTY	EMPTY
271	250	2	-1	0	-1	* next _ ptr = item	EMPTY	EMPTY
271	251	2	-1	0	-1	lh -> num _ items ++	lh num _ items	EMPTY
271	252	3	-1	0	-1	lh _ maybe _ resize ( lh )	lh _ maybe _ resize lh	EMPTY
271	254	1	0	0	0	return 1	EMPTY	EMPTY
271	255	3	-1	0	-1	}	EMPTY	EMPTY
271	257	1	0	0	-1	void * lh _ delete (  _ lhash * lh  const void * data ) {	lh _ delete lh data	EMPTY
271	258	3	-1	0	-1	lhash _ item * * next _ ptr  * item  * ret ;	lhash _ item ret	EMPTY
271	260	1	0	0	-1	next _ ptr = get _ next _ ptr _ and _ hash ( lh  null  data ) ;	get _ next _ ptr _ and _ hash lh data	EMPTY
271	262	1	1	0	1	if ( * next _ ptr == null ) {	EMPTY	EMPTY
271	264	2	-1	1	-1	return null ;	EMPTY	EMPTY
271	265	3	-1	0	-1	}	EMPTY	EMPTY
271	267	1	0	0	-1	item = * next _ ptr ;	EMPTY	EMPTY
271	269	1	0	0	-1	ret = item -> data ;	ret data	EMPTY
271	270	3	-1	0	-1	openssl _ free ( item ) ;	EMPTY	EMPTY
271	272	1	0	0	-1	lh -> num _ items -- ;	lh num _ items	EMPTY
271	273	3	-1	0	-1	lh _ maybe _ resize ( lh ) ;	lh _ maybe _ resize lh	EMPTY
271	275	1	0	0	0	return ret ;	ret	EMPTY
271	276	3	-1	0	-1	}	EMPTY	EMPTY
271	278	1	0	0	-1	static void lh _ doall _ internal (  _ lhash * lh  void ( * no _ arg _ func ) ( void * )	lh	EMPTY
271	279	2	-1	0	-1	void ( * arg _ func ) ( void *  void * )  void * arg ) {	EMPTY	EMPTY
271	280	2	-1	0	-1	size _ t i ;	EMPTY	EMPTY
271	281	3	-1	0	-1	lhash _ item * cur  * next ;	lhash _ item	EMPTY
271	283	1	0	0	0	if ( lh == null ) {	lh	EMPTY
271	284	2	-1	0	-1	return ;	EMPTY	EMPTY
271	285	3	-1	0	-1	}	EMPTY	EMPTY
271	287	1	1	0	1	if ( lh -> callback _ depth < uint _ max ) {	lh callback _ depth	EMPTY
271	289	2	-1	1	-1	lh -> callback _ depth ++	lh callback _ depth	EMPTY
271	290	3	-1	0	-1	}	EMPTY	EMPTY
271	292	1	0	0	0	for ( i = numconst ; i < lh -> num _ buckets ; i ++ ) {	lh num _ buckets	EMPTY
271	293	2	-1	0	-1	for ( cur = lh -> buckets [ i ] ; cur != null ; cur = next ) {	lh buckets	EMPTY
271	294	2	-1	0	-1	next = cur -> next ;	EMPTY	EMPTY
271	295	2	-1	0	-1	if ( arg _ func ) {	EMPTY	EMPTY
271	296	2	-1	0	-1	arg _ func ( cur -> data  arg ) ;	data	EMPTY
271	297	2	-1	0	-1	}	EMPTY	EMPTY
271	298	2	-1	0	-1	no _ arg _ func ( cur -> data ) ;	data	EMPTY
271	299	2	-1	0	-1	}	EMPTY	EMPTY
271	300	2	-1	0	-1	}	EMPTY	EMPTY
271	301	3	-1	0	-1	}	EMPTY	EMPTY
271	303	1	0	0	0	if ( lh -> callback _ depth < uint _ max ) {	lh callback _ depth	EMPTY
271	304	2	-1	0	-1	lh -> callback _ depth -- ;	lh callback _ depth	EMPTY
271	305	3	-1	0	-1	}	EMPTY	EMPTY
271	310	1	1	1	1	lh _ maybe _ resize ( lh )	lh _ maybe _ resize lh	EMPTY
271	311	3	-1	0	-1	}	EMPTY	EMPTY
271	313	1	0	0	-1	void lh _ doall (  _ lhash * lh  void ( * func ) ( void * ) ) {	lh _ doall lh func	EMPTY
271	314	2	-1	0	-1	lh _ doall _ internal ( lh  func  null  null ) ;	lh func	EMPTY
271	315	3	-1	0	-1	}	EMPTY	EMPTY
271	317	1	0	0	-1	void lh _ doall _ arg (  _ lhash * lh  void ( * func ) ( void *  void * )  void * arg ) {	lh _ doall _ arg lh func	EMPTY
271	318	2	-1	0	-1	lh _ doall _ internal ( lh  null  func  arg ) ;	lh func	EMPTY
271	319	3	-1	0	-1	}	EMPTY	EMPTY
271	321	1	1	0	-1	uint32 _ t lh _ strhash ( const char * c ) {	lh _ strhash c	EMPTY
271	325	2	-1	1	-1	unsigned long ret = 0 ;	ret	EMPTY
271	326	2	-1	0	-1	long n ;	n	EMPTY
271	327	2	-1	0	-1	unsigned long v ;	EMPTY	EMPTY
271	328	3	-1	0	-1	int r ;	EMPTY	EMPTY
271	330	1	0	0	0	if ( ( c == null ) || ( * c == '\0' ) ) {	c c	EMPTY
271	331	2	-1	0	-1	return ( ret ) ;	ret	EMPTY
271	332	3	-1	0	-1	}	EMPTY	EMPTY
271	334	1	0	0	-1	n = 0x100	n	EMPTY
271	335	2	-1	0	-1	while ( * c ) {	c	EMPTY
271	336	2	-1	0	-1	v = n | ( * c ) ;	n c	EMPTY
271	337	2	-1	0	-1	n += 0x100 ;	n	EMPTY
271	338	2	-1	0	-1	r = ( int ) ( ( v >> 2 ) ^ v ) & 0x0f ;	EMPTY	EMPTY
271	339	2	-1	0	-1	ret = ( ret << r ) | ( ret >> ( 32 - r ) ) ;	ret ret ret	EMPTY
271	340	2	-1	0	-1	ret &= 0xffffffffl ;	ret	EMPTY
271	341	2	-1	0	-1	ret ^= v * v ;	ret	EMPTY
271	342	2	-1	0	-1	c ++ ;	c	EMPTY
271	343	3	-1	0	-1	}	EMPTY	EMPTY
271	345	1	0	0	0	return ( ( ret >> 16 ) ^ ret )	ret ret	EMPTY
271	346	3	-1	0	-1	}	EMPTY	EMPTY
298	74	1	0	0	-1	static crypto _ ex _ data _ class g _ ex _ data _ class = crypto _ ex _ data _ class _ init ;	crypto _ ex _ data _ class	EMPTY
298	76	1	0	0	-1	dh * dh _ new ( void ) {	dh _ new	EMPTY
298	77	2	-1	0	-1	dh * dh = ( dh * ) openssl _ malloc ( sizeof ( dh ) ) ;	dh	EMPTY
298	78	2	-1	0	-1	if ( dh == null ) {	dh	EMPTY
298	79	2	-1	0	-1	openssl _ put _ error ( dh , err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
298	80	2	-1	0	-1	return null ;	EMPTY	EMPTY
298	81	3	-1	0	-1	}	EMPTY	EMPTY
298	83	1	0	0	0	memset ( dh  numconst  sizeof ( dh ) ) ;	dh	EMPTY
298	85	1	0	0	0	crypto _ mutex _ init ( & dh -> method _ mont _ p _ lock )	crypto _ mutex _ init dh	EMPTY
298	87	1	0	0	-1	dh -> references = 1	dh references	EMPTY
298	88	3	-1	0	-1	crypto _ new _ ex _ data ( & dh -> ex _ data )	crypto _ new _ ex _ data dh	EMPTY
298	90	1	0	0	0	return dh	dh	EMPTY
298	91	3	-1	0	-1	}	EMPTY	EMPTY
298	93	1	0	0	-1	void dh _ free ( dh * dh ) {	dh _ free dh	EMPTY
298	94	2	-1	0	-1	if ( dh == null ) {	dh	EMPTY
298	95	2	-1	0	-1	return ;	EMPTY	EMPTY
298	96	3	-1	0	-1	}	EMPTY	EMPTY
298	98	1	0	0	0	if ( ! crypto _ refcount _ dec _ and _ test _ zero ( & dh -> references ) ) {	crypto _ refcount _ dec _ and _ test _ zero dh references	EMPTY
298	99	2	-1	0	-1	return ;	EMPTY	EMPTY
298	100	3	-1	0	-1	}	EMPTY	EMPTY
298	102	1	0	0	0	crypto _ free _ ex _ data ( & g _ ex _ data _ class , dh , & dh -> ex _ data )	crypto _ free _ ex _ data dh dh	EMPTY
298	104	1	0	0	0	bn _ mont _ ctx _ free ( dh -> method _ mont _ p )	bn _ mont _ ctx _ free dh	EMPTY
298	105	2	-1	0	-1	bn _ clear _ free ( dh -> p )	bn _ clear _ free dh p	EMPTY
298	106	2	-1	0	-1	bn _ clear _ free ( dh -> g )	bn _ clear _ free dh	EMPTY
298	107	2	-1	0	-1	bn _ clear _ free ( dh -> q )	bn _ clear _ free dh q	EMPTY
298	108	2	-1	0	-1	bn _ clear _ free ( dh -> j )	bn _ clear _ free dh	EMPTY
298	109	2	-1	0	-1	empty	EMPTY	EMPTY
298	110	2	-1	0	-1	bn _ clear _ free ( dh -> counter )	bn _ clear _ free dh	EMPTY
298	111	2	-1	0	-1	bn _ clear _ free ( dh -> pub _ key )	bn _ clear _ free dh pub _ key	EMPTY
298	112	2	-1	0	-1	bn _ clear _ free ( dh -> priv _ key )	bn _ clear _ free dh priv _ key	EMPTY
298	113	3	-1	0	-1	crypto _ mutex _ cleanup ( & dh -> method _ mont _ p _ lock )	crypto _ mutex _ cleanup dh	EMPTY
298	115	1	0	0	0	empty	EMPTY	EMPTY
298	116	3	-1	0	-1	}	EMPTY	EMPTY
298	118	1	0	0	-1	int dh _ generate _ parameters _ ex ( dh * dh  int prime _ bits  int generator  bn _ gencb * cb ) {	dh _ generate _ parameters _ ex dh prime _ bits	EMPTY
298	146	1	1	1	1	bignum * t1 , * t2 ;	EMPTY	EMPTY
298	147	2	-1	0	-1	int g , ok = 0 ;	EMPTY	EMPTY
298	148	3	-1	0	-1	bn _ ctx * ctx = null ;	ctx	EMPTY
298	150	1	0	0	-1	ctx = bn _ ctx _ new ( )	ctx bn _ ctx _ new	EMPTY
298	151	2	-1	0	-1	if ( ctx == null ) {	ctx	EMPTY
298	152	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	153	2	-1	0	-1	}	EMPTY	EMPTY
298	154	2	-1	0	-1	bn _ ctx _ start ( ctx )	bn _ ctx _ start ctx	EMPTY
298	155	2	-1	0	-1	t1 = bn _ ctx _ get ( ctx )	bn _ ctx _ get ctx	EMPTY
298	156	2	-1	0	-1	t2 = bn _ ctx _ get ( ctx )	bn _ ctx _ get ctx	EMPTY
298	157	2	-1	0	-1	if ( t1 == null || t2 == null ) {	EMPTY	EMPTY
298	158	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	159	3	-1	0	-1	}	EMPTY	EMPTY
298	162	1	1	1	1	if ( dh -> p == null ) {	dh p	EMPTY
298	163	2	-1	0	-1	dh -> p = bn _ new ( ) ;	dh p bn _ new	EMPTY
298	164	2	-1	0	-1	if ( dh -> p == null ) {	dh p	EMPTY
298	165	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	166	2	-1	0	-1	}	EMPTY	EMPTY
298	167	2	-1	0	-1	}	EMPTY	EMPTY
298	168	2	-1	0	-1	if ( dh -> g == null ) {	dh	EMPTY
298	169	2	-1	0	-1	dh -> g = bn _ new ( ) ;	dh bn _ new	EMPTY
298	170	2	-1	0	-1	if ( dh -> g == null ) {	dh	EMPTY
298	171	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	172	2	-1	0	-1	}	EMPTY	EMPTY
298	173	3	-1	0	-1	}	EMPTY	EMPTY
298	175	1	1	0	1	if ( generator <= 1 ) {	EMPTY	EMPTY
298	176	2	-1	0	-1	openssl _ put _ error ( dh , dh _ r _ bad _ generator ) ;	EMPTY	EMPTY
298	177	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	178	2	-1	0	-1	}	EMPTY	EMPTY
298	179	2	-1	0	-1	if ( generator == dh _ generator _ 2 ) {	EMPTY	EMPTY
298	180	2	-1	0	-1	if ( ! bn _ set _ word ( t1 , 24 ) ) {	bn _ set _ word	EMPTY
298	181	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	182	2	-1	0	-1	}	EMPTY	EMPTY
298	183	2	-1	0	-1	if ( ! bn _ set _ word ( t2 , 11 ) ) {	bn _ set _ word	EMPTY
298	184	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	185	2	-1	0	-1	}	EMPTY	EMPTY
298	186	2	-1	0	-1	g = 2	EMPTY	EMPTY
298	187	2	-1	0	-1	if ( generator == dh _ generator _ 5 ) {	EMPTY	EMPTY
298	188	2	-1	0	-1	if ( ! bn _ set _ word ( t1 , 10 ) ) {	bn _ set _ word	EMPTY
298	189	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	190	2	-1	0	-1	}	EMPTY	EMPTY
298	191	2	-1	0	-1	if ( ! bn _ set _ word ( t2 , 3 ) ) {	bn _ set _ word	EMPTY
298	192	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	193	2	-1	0	-1	}	EMPTY	EMPTY
298	196	2	-1	1	-1	g = 5	EMPTY	EMPTY
298	197	2	-1	0	-1	}	EMPTY	EMPTY
298	202	2	-1	1	-1	if ( ! bn _ set _ word ( t1 , 2 ) ) {	bn _ set _ word	EMPTY
298	203	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	204	2	-1	0	-1	}	EMPTY	EMPTY
298	205	2	-1	0	-1	if ( ! bn _ set _ word ( t2 , 1 ) ) {	bn _ set _ word	EMPTY
298	206	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	207	2	-1	0	-1	}	EMPTY	EMPTY
298	208	2	-1	0	-1	g = generator	EMPTY	EMPTY
298	209	3	-1	0	-1	}	EMPTY	EMPTY
298	211	1	0	0	0	if ( ! bn _ generate _ prime _ ex ( dh -> p  prime _ bits  numconst  t1  t2  cb ) ) {	bn _ generate _ prime _ ex dh p prime _ bits	EMPTY
298	212	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	213	2	-1	0	-1	}	EMPTY	EMPTY
298	214	2	-1	0	-1	if ( ! bn _ gencb _ call ( cb  numconst  numconst ) ) {	bn _ gencb _ call	EMPTY
298	215	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	216	2	-1	0	-1	}	EMPTY	EMPTY
298	217	2	-1	0	-1	if ( ! bn _ set _ word ( dh -> g  g ) ) {	bn _ set _ word dh	EMPTY
298	218	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	219	2	-1	0	-1	}	EMPTY	EMPTY
298	220	3	-1	0	-1	ok = numconst ;	EMPTY	EMPTY
298	222	1	0	0	-1	err :	EMPTY	EMPTY
298	223	2	-1	0	-1	if ( ! ok ) {	EMPTY	EMPTY
298	224	2	-1	0	-1	openssl _ put _ error ( dh  err _ r _ bn _ lib ) ;	EMPTY	EMPTY
298	225	3	-1	0	-1	}	EMPTY	EMPTY
298	227	1	0	0	0	if ( ctx != null ) {	ctx	EMPTY
298	228	2	-1	0	-1	bn _ ctx _ end ( ctx ) ;	bn _ ctx _ end ctx	EMPTY
298	229	2	-1	0	-1	bn _ ctx _ free ( ctx ) ;	bn _ ctx _ free ctx	EMPTY
298	230	2	-1	0	-1	}	EMPTY	EMPTY
298	231	2	-1	0	-1	return ok ;	EMPTY	EMPTY
298	232	3	-1	0	-1	}	EMPTY	EMPTY
298	234	1	0	0	-1	int dh _ generate _ key ( dh * dh ) {	dh _ generate _ key dh	EMPTY
298	235	2	-1	0	-1	int ok = numconst ;	EMPTY	EMPTY
298	236	2	-1	0	-1	int generate _ new _ key = numconst ;	EMPTY	EMPTY
298	237	2	-1	0	-1	unsigned l ;	EMPTY	EMPTY
298	238	2	-1	0	-1	bn _ ctx * ctx = null ;	ctx	EMPTY
298	239	2	-1	0	-1	bn _ mont _ ctx * mont = null ;	mont	EMPTY
298	240	2	-1	0	-1	bignum * pub _ key = null  * priv _ key = null ;	pub _ key priv _ key	EMPTY
298	241	3	-1	0	-1	bignum local _ priv ;	EMPTY	EMPTY
298	243	1	0	0	0	if ( bn _ num _ bits ( dh -> p ) > openssl _ dh _ max _ modulus _ bits ) {	bn _ num _ bits dh p	EMPTY
298	244	2	-1	0	-1	openssl _ put _ error ( dh  dh _ r _ modulus _ too _ large ) ;	EMPTY	EMPTY
298	245	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	246	3	-1	0	-1	}	EMPTY	EMPTY
298	248	1	0	0	-1	ctx = bn _ ctx _ new ( ) ;	ctx bn _ ctx _ new	EMPTY
298	249	2	-1	0	-1	if ( ctx == null ) {	ctx	EMPTY
298	250	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	251	3	-1	0	-1	}	EMPTY	EMPTY
298	253	1	0	0	0	if ( dh -> priv _ key == null ) {	dh priv _ key	EMPTY
298	254	2	-1	0	-1	priv _ key = bn _ new ( ) ;	priv _ key bn _ new	EMPTY
298	255	2	-1	0	-1	if ( priv _ key == null ) {	priv _ key	EMPTY
298	256	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	257	2	-1	0	-1	}	EMPTY	EMPTY
298	258	2	-1	0	-1	generate _ new _ key = numconst ;	EMPTY	EMPTY
298	259	2	-1	0	-1	}	EMPTY	EMPTY
298	260	2	-1	0	-1	priv _ key = dh -> priv _ key ;	priv _ key dh priv _ key	EMPTY
298	261	3	-1	0	-1	}	EMPTY	EMPTY
298	263	1	0	0	0	if ( dh -> pub _ key == null ) {	dh pub _ key	EMPTY
298	264	2	-1	0	-1	pub _ key = bn _ new ( ) ;	pub _ key bn _ new	EMPTY
298	265	2	-1	0	-1	if ( pub _ key == null ) {	pub _ key	EMPTY
298	266	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	267	2	-1	0	-1	}	EMPTY	EMPTY
298	268	2	-1	0	-1	}	EMPTY	EMPTY
298	269	2	-1	0	-1	pub _ key = dh -> pub _ key ;	pub _ key dh pub _ key	EMPTY
298	270	3	-1	0	-1	}	EMPTY	EMPTY
298	272	1	0	0	-1	mont = bn _ mont _ ctx _ set _ locked ( & dh -> method _ mont _ p  & dh -> method _ mont _ p _ lock	mont bn _ mont _ ctx _ set _ locked dh dh	EMPTY
298	273	2	-1	0	-1	dh -> p  ctx ) ;	dh p ctx	EMPTY
298	274	2	-1	0	-1	if ( ! mont ) {	mont	EMPTY
298	275	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	276	3	-1	0	-1	}	EMPTY	EMPTY
298	278	1	1	0	1	if ( generate _ new _ key ) {	EMPTY	EMPTY
298	279	2	-1	0	-1	if ( dh -> q ) {	dh q	EMPTY
298	280	2	-1	0	-1	do {	EMPTY	EMPTY
298	281	2	-1	0	-1	if ( ! bn _ rand _ range ( priv _ key  dh -> q ) ) {	bn _ rand _ range priv _ key dh q	EMPTY
298	282	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	283	2	-1	0	-1	}	EMPTY	EMPTY
298	284	2	-1	0	-1	}	EMPTY	EMPTY
298	285	2	-1	0	-1	} else {	EMPTY	EMPTY
298	287	2	-1	1	-1	dh _ check _ standard _ parameters ( dh )	dh _ check _ standard _ parameters dh	EMPTY
298	288	2	-1	0	-1	l = dh -> priv _ length ? dh -> priv _ length : bn _ num _ bits ( dh -> p ) - 1	dh priv _ length dh priv _ length bn _ num _ bits dh p	EMPTY
298	289	2	-1	0	-1	if ( ! bn _ rand ( priv _ key , l , 0 , 0 ) ) {	bn _ rand priv _ key	EMPTY
298	290	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	291	2	-1	0	-1	}	EMPTY	EMPTY
298	292	2	-1	0	-1	}	EMPTY	EMPTY
298	293	3	-1	0	-1	}	EMPTY	EMPTY
298	295	1	0	0	0	bn _ with _ flags ( & local _ priv  priv _ key  bn _ flg _ consttime ) ;	bn _ with _ flags priv _ key	EMPTY
298	296	2	-1	0	-1	if ( ! bn _ mod _ exp _ mont ( pub _ key  dh -> g  & local _ priv  dh -> p  ctx  mont ) ) {	pub _ key dh dh p ctx mont	EMPTY
298	297	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	298	3	-1	0	-1	}	EMPTY	EMPTY
298	300	1	0	0	-1	dh -> pub _ key = pub _ key ;	dh pub _ key pub _ key	EMPTY
298	301	2	-1	0	-1	dh -> priv _ key = priv _ key ;	dh priv _ key priv _ key	EMPTY
298	302	3	-1	0	-1	ok = numconst ;	EMPTY	EMPTY
298	304	1	0	0	-1	err :	EMPTY	EMPTY
298	305	2	-1	0	-1	if ( ok != numconst ) {	EMPTY	EMPTY
298	306	2	-1	0	-1	openssl _ put _ error ( dh  err _ r _ bn _ lib ) ;	EMPTY	EMPTY
298	307	3	-1	0	-1	}	EMPTY	EMPTY
298	309	1	0	0	0	if ( dh -> pub _ key == null ) {	dh pub _ key	EMPTY
298	310	2	-1	0	-1	bn _ free ( pub _ key ) ;	bn _ free pub _ key	EMPTY
298	311	2	-1	0	-1	}	EMPTY	EMPTY
298	312	2	-1	0	-1	if ( dh -> priv _ key == null ) {	dh priv _ key	EMPTY
298	313	2	-1	0	-1	bn _ free ( priv _ key ) ;	bn _ free priv _ key	EMPTY
298	314	2	-1	0	-1	}	EMPTY	EMPTY
298	315	2	-1	0	-1	bn _ ctx _ free ( ctx ) ;	bn _ ctx _ free ctx	EMPTY
298	316	2	-1	0	-1	return ok ;	EMPTY	EMPTY
298	317	3	-1	0	-1	}	EMPTY	EMPTY
298	319	1	0	0	-1	int dh _ compute _ key ( unsigned char * out  const bignum * peers _ key  dh * dh ) {	dh _ compute _ key out peers _ key dh	EMPTY
298	320	2	-1	0	-1	bn _ ctx * ctx = null ;	ctx	EMPTY
298	321	2	-1	0	-1	bn _ mont _ ctx * mont = null ;	mont	EMPTY
298	322	2	-1	0	-1	bignum * shared _ key ;	EMPTY	EMPTY
298	323	2	-1	0	-1	int ret = - numconst ;	ret	EMPTY
298	324	2	-1	0	-1	int check _ result ;	EMPTY	EMPTY
298	325	3	-1	0	-1	bignum local _ priv ;	EMPTY	EMPTY
298	327	1	0	0	0	if ( bn _ num _ bits ( dh -> p ) > openssl _ dh _ max _ modulus _ bits ) {	bn _ num _ bits dh p	EMPTY
298	328	2	-1	0	-1	openssl _ put _ error ( dh  dh _ r _ modulus _ too _ large ) ;	EMPTY	EMPTY
298	329	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	330	3	-1	0	-1	}	EMPTY	EMPTY
298	332	1	0	0	-1	ctx = bn _ ctx _ new ( ) ;	ctx bn _ ctx _ new	EMPTY
298	333	2	-1	0	-1	if ( ctx == null ) {	ctx	EMPTY
298	334	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	335	2	-1	0	-1	}	EMPTY	EMPTY
298	336	2	-1	0	-1	bn _ ctx _ start ( ctx ) ;	bn _ ctx _ start ctx	EMPTY
298	337	2	-1	0	-1	shared _ key = bn _ ctx _ get ( ctx ) ;	bn _ ctx _ get ctx	EMPTY
298	338	2	-1	0	-1	if ( shared _ key == null ) {	EMPTY	EMPTY
298	339	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	340	3	-1	0	-1	}	EMPTY	EMPTY
298	342	1	0	0	0	if ( dh -> priv _ key == null ) {	dh priv _ key	EMPTY
298	343	2	-1	0	-1	openssl _ put _ error ( dh  dh _ r _ no _ private _ value ) ;	EMPTY	EMPTY
298	344	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	345	3	-1	0	-1	}	EMPTY	EMPTY
298	347	1	0	0	-1	mont = bn _ mont _ ctx _ set _ locked ( & dh -> method _ mont _ p  & dh -> method _ mont _ p _ lock	mont bn _ mont _ ctx _ set _ locked dh dh	EMPTY
298	348	2	-1	0	-1	dh -> p  ctx ) ;	dh p ctx	EMPTY
298	349	2	-1	0	-1	if ( ! mont ) {	mont	EMPTY
298	350	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	351	3	-1	0	-1	}	EMPTY	EMPTY
298	353	1	0	0	0	if ( ! dh _ check _ pub _ key ( dh  peers _ key  & check _ result ) || check _ result ) {	dh _ check _ pub _ key dh peers _ key	EMPTY
298	354	2	-1	0	-1	openssl _ put _ error ( dh  dh _ r _ invalid _ pubkey ) ;	EMPTY	EMPTY
298	355	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	356	3	-1	0	-1	}	EMPTY	EMPTY
298	358	1	0	0	0	bn _ with _ flags ( & local _ priv  dh -> priv _ key  bn _ flg _ consttime ) ;	bn _ with _ flags dh priv _ key	EMPTY
298	359	2	-1	0	-1	if ( ! bn _ mod _ exp _ mont ( shared _ key  peers _ key  & local _ priv  dh -> p  ctx	peers _ key dh p ctx	EMPTY
298	360	2	-1	0	-1	mont ) ) {	mont	EMPTY
298	361	2	-1	0	-1	openssl _ put _ error ( dh  err _ r _ bn _ lib ) ;	EMPTY	EMPTY
298	362	2	-1	0	-1	goto err ;	EMPTY	EMPTY
298	363	3	-1	0	-1	}	EMPTY	EMPTY
298	365	1	0	0	-1	ret = bn _ bn2bin ( shared _ key  out ) ;	ret bn _ bn2bin out	EMPTY
298	367	1	0	0	-1	err :	EMPTY	EMPTY
298	368	2	-1	0	-1	if ( ctx != null ) {	ctx	EMPTY
298	369	2	-1	0	-1	bn _ ctx _ end ( ctx ) ;	bn _ ctx _ end ctx	EMPTY
298	370	2	-1	0	-1	bn _ ctx _ free ( ctx ) ;	bn _ ctx _ free ctx	EMPTY
298	371	3	-1	0	-1	}	EMPTY	EMPTY
298	373	1	0	0	0	return ret ;	ret	EMPTY
298	374	3	-1	0	-1	}	EMPTY	EMPTY
298	376	1	0	0	0	return bn _ num _ bytes ( dh -> p ) ;	bn _ num _ bytes dh p	EMPTY
298	378	1	0	0	0	return bn _ num _ bits ( dh -> p ) ;	bn _ num _ bits dh p	EMPTY
298	380	1	0	0	-1	int dh _ up _ ref ( dh * dh ) {	dh _ up _ ref dh	EMPTY
298	381	2	-1	0	-1	crypto _ refcount _ inc ( & dh -> references ) ;	crypto _ refcount _ inc dh references	EMPTY
298	382	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
298	383	3	-1	0	-1	}	EMPTY	EMPTY
298	385	1	0	0	-1	static int int _ dh _ bn _ cpy ( bignum * * dst  const bignum * src ) {	dst src	EMPTY
298	386	3	-1	0	-1	bignum * a = null ;	a	EMPTY
298	388	1	0	0	0	if ( src ) {	src	EMPTY
298	389	2	-1	0	-1	a = bn _ dup ( src ) ;	a bn _ dup src	EMPTY
298	390	2	-1	0	-1	if ( ! a ) {	a	EMPTY
298	391	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
298	392	2	-1	0	-1	}	EMPTY	EMPTY
298	393	3	-1	0	-1	}	EMPTY	EMPTY
298	395	1	0	0	0	bn _ free ( * dst ) ;	bn _ free dst	EMPTY
298	397	1	0	0	0	return numconst ;	EMPTY	EMPTY
298	398	3	-1	0	-1	}	EMPTY	EMPTY
298	400	1	0	0	-1	static int int _ dh _ param _ copy ( dh * to  const dh * from  int is _ x942 ) {	to from	EMPTY
298	401	2	-1	0	-1	if ( is _ x942 == - numconst ) {	EMPTY	EMPTY
298	402	2	-1	0	-1	is _ x942 = ! ! from -> q ;	from q	EMPTY
298	403	2	-1	0	-1	}	EMPTY	EMPTY
298	404	2	-1	0	-1	if ( ! int _ dh _ bn _ cpy ( & to -> p  from -> p ) ||	to p from p	EMPTY
298	405	2	-1	0	-1	! int _ dh _ bn _ cpy ( & to -> g  from -> g ) ) {	to from	EMPTY
298	406	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
298	407	3	-1	0	-1	}	EMPTY	EMPTY
298	409	1	0	0	0	if ( ! is _ x942 ) {	EMPTY	EMPTY
298	410	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
298	411	3	-1	0	-1	}	EMPTY	EMPTY
298	413	1	0	0	0	if ( ! int _ dh _ bn _ cpy ( & to -> q  from -> q ) ||	to q from q	EMPTY
298	414	2	-1	0	-1	! int _ dh _ bn _ cpy ( & to -> j  from -> j ) ) {	to from	EMPTY
298	415	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
298	416	3	-1	0	-1	}	EMPTY	EMPTY
298	418	1	0	0	0	openssl _ free ( to -> seed ) ;	to	EMPTY
298	419	2	-1	0	-1	to -> seed = null ;	to	EMPTY
298	420	3	-1	0	-1	to -> seedlen = numconst ;	to	EMPTY
298	422	1	0	0	0	if ( from -> seed ) {	from	EMPTY
298	423	2	-1	0	-1	to -> seed = buf _ memdup ( from -> seed  from -> seedlen ) ;	to buf _ memdup from from	EMPTY
298	424	2	-1	0	-1	if ( ! to -> seed ) {	to	EMPTY
298	425	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
298	426	2	-1	0	-1	}	EMPTY	EMPTY
298	427	2	-1	0	-1	to -> seedlen = from -> seedlen ;	to from	EMPTY
298	428	3	-1	0	-1	}	EMPTY	EMPTY
298	430	1	0	0	0	return numconst ;	EMPTY	EMPTY
298	431	3	-1	0	-1	}	EMPTY	EMPTY
298	433	1	0	0	-1	dh * dhparams _ dup ( const dh * dh ) {	dhparams _ dup dh	EMPTY
298	434	2	-1	0	-1	dh * ret = dh _ new ( ) ;	ret dh _ new	EMPTY
298	435	2	-1	0	-1	if ( ! ret ) {	ret	EMPTY
298	436	2	-1	0	-1	return null ;	EMPTY	EMPTY
298	437	3	-1	0	-1	}	EMPTY	EMPTY
298	439	1	0	0	0	if ( ! int _ dh _ param _ copy ( ret  dh  - numconst ) ) {	ret dh	EMPTY
298	440	2	-1	0	-1	dh _ free ( ret ) ;	dh _ free ret	EMPTY
298	441	2	-1	0	-1	return null ;	EMPTY	EMPTY
298	442	3	-1	0	-1	}	EMPTY	EMPTY
298	444	1	0	0	0	return ret ;	ret	EMPTY
298	445	3	-1	0	-1	}	EMPTY	EMPTY
298	447	1	0	0	-1	int dh _ get _ ex _ new _ index ( long argl  void * argp  crypto _ ex _ unused * unused	crypto _ ex _ unused unused	EMPTY
298	448	2	-1	0	-1	crypto _ ex _ dup * dup _ func  crypto _ ex _ free * free _ func ) {	crypto _ ex _ dup crypto _ ex _ free free _ func	EMPTY
298	449	2	-1	0	-1	int index ;	index	EMPTY
298	450	2	-1	0	-1	if ( ! crypto _ get _ ex _ new _ index ( & g _ ex _ data _ class  & index  argl  argp  dup _ func	crypto _ get _ ex _ new _ index index	EMPTY
298	451	2	-1	0	-1	free _ func ) ) {	free _ func	EMPTY
298	452	2	-1	0	-1	return - numconst ;	EMPTY	EMPTY
298	453	2	-1	0	-1	}	EMPTY	EMPTY
298	454	2	-1	0	-1	return index ;	index	EMPTY
298	455	3	-1	0	-1	}	EMPTY	EMPTY
298	457	1	0	0	-1	int dh _ set _ ex _ data ( dh * d  int idx  void * arg ) {	arg	EMPTY
298	458	2	-1	0	-1	return crypto _ set _ ex _ data ( & d -> ex _ data  idx  arg ) ;	crypto _ set _ ex _ data arg	EMPTY
298	459	3	-1	0	-1	}	EMPTY	EMPTY
298	461	1	0	0	-1	void * dh _ get _ ex _ data ( dh * d  int idx ) {	EMPTY	EMPTY
298	462	2	-1	0	-1	return crypto _ get _ ex _ data ( & d -> ex _ data  idx ) ;	crypto _ get _ ex _ data	EMPTY
298	463	3	-1	0	-1	}	EMPTY	EMPTY
308	72	1	0	0	-1	bignum * bn _ bin2bn ( const uint8 _ t * in  size _ t len  bignum * ret ) {	bn _ bin2bn in len ret	EMPTY
308	73	2	-1	0	-1	size _ t num _ words ;	EMPTY	EMPTY
308	74	2	-1	0	-1	unsigned m ;	m	EMPTY
308	75	2	-1	0	-1	empty	EMPTY	EMPTY
308	76	3	-1	0	-1	bignum * bn = null ;	bn	EMPTY
308	78	1	0	0	0	if ( ret == null ) {	ret	EMPTY
308	79	2	-1	0	-1	ret = bn = bn _ new ( ) ;	ret bn bn _ new	EMPTY
308	80	3	-1	0	-1	}	EMPTY	EMPTY
308	82	1	0	0	0	if ( ret == null ) {	ret	EMPTY
308	83	2	-1	0	-1	return null ;	EMPTY	EMPTY
308	84	3	-1	0	-1	}	EMPTY	EMPTY
308	86	1	0	0	0	if ( len == 0 ) {	len	EMPTY
308	87	2	-1	0	-1	ret -> top = 0 ;	ret top	EMPTY
308	88	2	-1	0	-1	return ret ;	ret	EMPTY
308	89	3	-1	0	-1	}	EMPTY	EMPTY
308	91	1	0	0	-1	num _ words = ( ( len - 1 ) / bn _ bytes ) + 1	len	EMPTY
308	92	2	-1	0	-1	m = ( len - numconst ) % bn _ bytes ;	m len	EMPTY
308	93	2	-1	0	-1	if ( bn _ wexpand ( ret , num _ words ) == null ) {	bn _ wexpand ret	EMPTY
308	94	2	-1	0	-1	if ( bn ) {	bn	EMPTY
308	95	2	-1	0	-1	bn _ free ( bn ) ;	bn _ free bn	EMPTY
308	96	2	-1	0	-1	}	EMPTY	EMPTY
308	97	2	-1	0	-1	return null ;	EMPTY	EMPTY
308	98	3	-1	0	-1	}	EMPTY	EMPTY
308	102	1	1	1	-1	assert ( num _ words <= int _ max ) ;	EMPTY	EMPTY
308	103	2	-1	0	-1	ret -> top = ( int ) num _ words	ret top	EMPTY
308	104	3	-1	0	-1	ret -> neg = 0	ret neg	EMPTY
308	106	1	0	0	0	while ( len -- ) {	len	EMPTY
308	107	2	-1	0	-1	word = ( word << 8 ) | * ( in ++ ) ;	in	EMPTY
308	108	2	-1	0	-1	if ( m -- == 0 ) {	m	EMPTY
308	109	2	-1	0	-1	ret -> d [ -- num _ words ] = word ;	ret	EMPTY
308	110	2	-1	0	-1	word = 0 ;	EMPTY	EMPTY
308	111	2	-1	0	-1	m = bn _ bytes - 1 ;	m	EMPTY
308	112	2	-1	0	-1	}	EMPTY	EMPTY
308	113	3	-1	0	-1	}	EMPTY	EMPTY
308	117	1	1	1	1	bn _ correct _ top ( ret )	bn _ correct _ top ret	EMPTY
308	118	2	-1	0	-1	return ret	ret	EMPTY
308	119	3	-1	0	-1	}	EMPTY	EMPTY
308	121	1	0	0	-1	size _ t bn _ bn2bin ( const bignum * in  uint8 _ t * out ) {	bn _ bn2bin in out	EMPTY
308	122	2	-1	0	-1	size _ t n  i ;	n i	EMPTY
308	123	3	-1	0	-1	bn _ ulong l ;	l	EMPTY
308	125	1	0	0	-1	n = i = bn _ num _ bytes ( in ) ;	n i bn _ num _ bytes in	EMPTY
308	126	2	-1	0	-1	while ( i -- ) {	i	EMPTY
308	127	3	-1	0	-1	l = in -> d [ i / bn _ bytes ] ;	l in i	EMPTY
308	129	1	0	0	-1	}	EMPTY	EMPTY
308	130	2	-1	0	-1	return n ;	n	EMPTY
308	131	3	-1	0	-1	}	EMPTY	EMPTY
308	135	1	0	0	-1	static bn _ ulong constant _ time _ select _ ulong ( int v  bn _ ulong x  bn _ ulong y ) {	constant _ time _ select _ ulong v x y	EMPTY
308	136	2	-1	0	-1	bn _ ulong mask = v ;	v	EMPTY
308	137	3	-1	0	-1	mask --	EMPTY	EMPTY
308	139	1	0	0	0	return ( ~ mask & x ) | ( mask & y )	x y	EMPTY
308	140	3	-1	0	-1	}	EMPTY	EMPTY
308	144	1	0	0	-1	static int constant _ time _ le _ size _ t ( size _ t x  size _ t y ) {	constant _ time _ le _ size _ t x y	EMPTY
308	145	2	-1	0	-1	return ( ( x - y - 1 ) >> ( sizeof ( size _ t ) * 8 - 1 ) ) & 1	x y	EMPTY
308	146	3	-1	0	-1	}	EMPTY	EMPTY
308	153	1	1	0	-1	static bn _ ulong read _ word _ padded ( const bignum * in  size _ t i ) {	read _ word _ padded in i	EMPTY
308	155	2	-1	1	-1	bn _ ulong l = in -> d [ constant _ time _ select _ ulong (	l in constant _ time _ select _ ulong	EMPTY
308	156	3	-1	0	-1	constant _ time _ le _ size _ t ( in -> dmax  i )  in -> dmax - numconst  i ) ] ;	constant _ time _ le _ size _ t in dmax i in dmax i	EMPTY
308	159	1	1	1	1	return constant _ time _ select _ ulong ( constant _ time _ le _ size _ t ( in -> top , i ) , 0 , l )	constant _ time _ select _ ulong constant _ time _ le _ size _ t in top i l	EMPTY
308	160	3	-1	0	-1	}	EMPTY	EMPTY
308	162	1	0	0	-1	int bn _ bn2bin _ padded ( uint8 _ t * out  size _ t len  const bignum * in ) {	bn _ bn2bin _ padded out len in	EMPTY
308	163	2	-1	0	-1	size _ t i ;	i	EMPTY
308	164	3	-1	0	-1	bn _ ulong l ;	l	EMPTY
308	167	1	1	1	1	if ( bn _ is _ zero ( in ) ) {	bn _ is _ zero in	EMPTY
308	168	2	-1	0	-1	memset ( out , 0 , len ) ;	out len	EMPTY
308	169	2	-1	0	-1	return 1 ;	EMPTY	EMPTY
308	170	3	-1	0	-1	}	EMPTY	EMPTY
308	174	1	1	1	1	if ( ( size _ t ) in -> top > ( len + ( bn _ bytes - 1 ) ) / bn _ bytes ) {	in top len	EMPTY
308	175	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
308	176	2	-1	0	-1	}	EMPTY	EMPTY
308	177	2	-1	0	-1	if ( ( len % bn _ bytes ) != 0 ) {	len	EMPTY
308	178	2	-1	0	-1	l = read _ word _ padded ( in , len / bn _ bytes ) ;	l read _ word _ padded in len	EMPTY
308	179	2	-1	0	-1	if ( l >> ( 8 * ( len % bn _ bytes ) ) != 0 ) {	l len	EMPTY
308	180	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
308	181	2	-1	0	-1	}	EMPTY	EMPTY
308	182	3	-1	0	-1	}	EMPTY	EMPTY
308	191	1	1	1	-1	i = len	i len	EMPTY
308	192	2	-1	0	-1	while ( i -- ) {	i	EMPTY
308	193	2	-1	0	-1	l = read _ word _ padded ( in , i / bn _ bytes ) ;	l read _ word _ padded in i	EMPTY
308	194	2	-1	0	-1	* ( out ++ ) = ( uint8 _ t ) ( l >> ( 8 * ( i % bn _ bytes ) ) ) & 0xff ;	out l i	EMPTY
308	195	2	-1	0	-1	}	EMPTY	EMPTY
308	196	2	-1	0	-1	return 1	EMPTY	EMPTY
308	197	3	-1	0	-1	}	EMPTY	EMPTY
308	199	1	0	0	-1	int bn _ bn2cbb _ padded ( cbb * out  size _ t len  const bignum * in ) {	bn _ bn2cbb _ padded out len in	EMPTY
308	200	2	-1	0	-1	uint8 _ t * ptr ;	ptr	EMPTY
308	201	2	-1	0	-1	return cbb _ add _ space ( out  & ptr  len ) && bn _ bn2bin _ padded ( ptr  len  in ) ;	cbb _ add _ space out ptr len bn _ bn2bin _ padded ptr len in	EMPTY
308	202	3	-1	0	-1	}	EMPTY	EMPTY
308	204	1	0	0	-1	static const char hextable [ ] = strlit ;	EMPTY	EMPTY
308	206	1	0	0	-1	char * bn _ bn2hex ( const bignum * bn ) {	bn _ bn2hex bn	EMPTY
308	207	2	-1	0	-1	int i  j  v  z = numconst ;	i v	EMPTY
308	208	2	-1	0	-1	char * buf ;	buf	EMPTY
308	209	3	-1	0	-1	char * p ;	p	EMPTY
308	211	1	0	0	-1	buf = ( char * ) openssl _ malloc ( bn -> top * bn _ bytes * numconst + numconst ) ;	buf bn top	EMPTY
308	212	2	-1	0	-1	if ( buf == null ) {	buf	EMPTY
308	213	2	-1	0	-1	openssl _ put _ error ( bn  err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
308	214	2	-1	0	-1	return null ;	EMPTY	EMPTY
308	215	3	-1	0	-1	}	EMPTY	EMPTY
308	217	1	0	0	-1	p = buf ;	p buf	EMPTY
308	218	3	-1	0	-1	if ( bn -> neg ) {	bn neg	EMPTY
308	220	1	0	0	-1	}	EMPTY	EMPTY
308	222	1	0	0	0	if ( bn _ is _ zero ( bn ) ) {	bn _ is _ zero bn	EMPTY
308	224	1	0	0	-1	}	EMPTY	EMPTY
308	226	1	1	0	1	for ( i = bn -> top - numconst ; i >= numconst ; i -- ) {	i bn top i i	EMPTY
308	227	2	-1	0	-1	for ( j = bn _ bits2 - numconst ; j >= numconst ; j -= numconst ) {	EMPTY	EMPTY
308	229	2	-1	1	-1	v = ( ( int ) ( bn -> d [ i ] >> ( long ) j ) ) & 0xff	v bn i	EMPTY
308	230	2	-1	0	-1	if ( z || v != 0 ) {	v	EMPTY
308	231	2	-1	0	-1	* ( p ++ ) = hextable [ v >> 4 ] ;	p v	EMPTY
308	232	2	-1	0	-1	* ( p ++ ) = hextable [ v & 0x0f ] ;	p v	EMPTY
308	233	2	-1	0	-1	z = 1 ;	EMPTY	EMPTY
308	234	2	-1	0	-1	}	EMPTY	EMPTY
308	235	2	-1	0	-1	}	EMPTY	EMPTY
308	236	3	-1	0	-1	}	EMPTY	EMPTY
308	239	1	0	0	0	return buf ;	buf	EMPTY
308	240	3	-1	0	-1	}	EMPTY	EMPTY
308	243	1	1	0	-1	static int decode _ hex ( bignum * bn  const char * in  int in _ len ) {	decode _ hex bn in in _ len	EMPTY
308	244	2	-1	0	-1	if ( in _ len > int _ max / 4 ) {	in _ len	EMPTY
308	245	2	-1	0	-1	openssl _ put _ error ( bn , bn _ r _ bignum _ too _ long ) ;	EMPTY	EMPTY
308	246	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
308	247	2	-1	0	-1	}	EMPTY	EMPTY
308	249	2	-1	1	-1	if ( bn _ expand ( bn , in _ len * 4 ) == null ) {	bn _ expand bn in _ len	EMPTY
308	250	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
308	251	3	-1	0	-1	}	EMPTY	EMPTY
308	253	1	1	0	1	int i = 0 ;	i	EMPTY
308	254	2	-1	0	-1	while ( in _ len > numconst ) {	in _ len	EMPTY
308	256	2	-1	1	-1	int todo = bn _ bytes * 2 ;	todo	EMPTY
308	257	2	-1	0	-1	if ( todo > in _ len ) {	todo in _ len	EMPTY
308	258	2	-1	0	-1	todo = in _ len ;	todo in _ len	EMPTY
308	259	3	-1	0	-1	}	EMPTY	EMPTY
308	261	1	0	0	0	bn _ ulong word = numconst ;	EMPTY	EMPTY
308	262	2	-1	0	-1	int j ;	EMPTY	EMPTY
308	263	2	-1	0	-1	for ( j = todo ; j > numconst ; j -- ) {	todo	EMPTY
308	264	3	-1	0	-1	char c = in [ in _ len - j ] ;	in in _ len	EMPTY
308	266	1	1	0	1	bn _ ulong hex ;	EMPTY	EMPTY
308	267	2	-1	0	-1	if ( c >= '0' && c <= '9' ) {	EMPTY	EMPTY
308	268	2	-1	0	-1	hex = c - '0'	EMPTY	EMPTY
308	269	2	-1	0	-1	if ( c >= 'a' && c <= 'f' ) {	EMPTY	EMPTY
308	270	2	-1	0	-1	hex = c - 'a' + 10	EMPTY	EMPTY
308	271	2	-1	0	-1	if ( c >= 'a' && c <= 'f' ) {	EMPTY	EMPTY
308	272	2	-1	0	-1	hex = c - 'a' + 10	EMPTY	EMPTY
308	273	2	-1	0	-1	} else {	EMPTY	EMPTY
308	274	2	-1	0	-1	hex = 0	EMPTY	EMPTY
308	276	2	-1	1	-1	assert ( numconst ) ;	EMPTY	EMPTY
308	277	2	-1	0	-1	}	EMPTY	EMPTY
308	278	2	-1	0	-1	word = ( word << numconst ) | hex ;	EMPTY	EMPTY
308	279	3	-1	0	-1	}	EMPTY	EMPTY
308	281	1	0	0	-1	bn -> d [ i ++ ] = word ;	bn i	EMPTY
308	282	2	-1	0	-1	in _ len -= todo ;	in _ len todo	EMPTY
308	283	2	-1	0	-1	}	EMPTY	EMPTY
308	284	2	-1	0	-1	assert ( i <= bn -> dmax ) ;	i bn dmax	EMPTY
308	285	2	-1	0	-1	bn -> top = i ;	bn top i	EMPTY
308	286	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
308	287	3	-1	0	-1	}	EMPTY	EMPTY
308	290	1	0	0	-1	static int decode _ dec ( bignum * bn  const char * in  int in _ len ) {	decode _ dec bn in in _ len	EMPTY
308	291	2	-1	0	-1	int i , j ;	i	EMPTY
308	292	3	-1	0	-1	bn _ ulong l = numconst ;	l	EMPTY
308	295	1	1	1	1	j = bn _ dec _ num - ( in _ len % bn _ dec _ num )	in _ len	EMPTY
308	296	2	-1	0	-1	if ( j == bn _ dec _ num ) {	EMPTY	EMPTY
308	297	2	-1	0	-1	j = 0 ;	EMPTY	EMPTY
308	298	2	-1	0	-1	}	EMPTY	EMPTY
308	299	2	-1	0	-1	l = 0	l	EMPTY
308	300	2	-1	0	-1	for ( i = 0 ; i < in _ len ; i ++ ) {	i i in _ len i	EMPTY
308	301	2	-1	0	-1	l *= 10 ;	l	EMPTY
308	302	2	-1	0	-1	l += in [ i ] - '0' ;	l in i	EMPTY
308	303	2	-1	0	-1	if ( ++ j == bn _ dec _ num ) {	EMPTY	EMPTY
308	304	2	-1	0	-1	if ( ! bn _ mul _ word ( bn , bn _ dec _ conv ) ||	bn _ mul _ word bn	EMPTY
308	305	2	-1	0	-1	! bn _ add _ word ( bn , l ) ) {	bn _ add _ word bn l	EMPTY
308	306	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
308	307	2	-1	0	-1	}	EMPTY	EMPTY
308	308	2	-1	0	-1	l = 0 ;	l	EMPTY
308	309	2	-1	0	-1	j = 0 ;	EMPTY	EMPTY
308	310	2	-1	0	-1	}	EMPTY	EMPTY
308	311	2	-1	0	-1	}	EMPTY	EMPTY
308	312	2	-1	0	-1	return 1	EMPTY	EMPTY
308	313	3	-1	0	-1	}	EMPTY	EMPTY
308	315	1	0	0	0	typedef int ( * decode _ func ) ( bignum * bn  const char * in  int in _ len )	bn in in _ len	EMPTY
308	316	3	-1	0	-1	typedef int ( * char _ test _ func ) ( int c ) ;	EMPTY	EMPTY
308	318	1	0	0	-1	static int bn _ x2bn ( bignum * * outp  const char * in  decode _ func decode  char _ test _ func want _ char ) {	outp in	EMPTY
308	319	2	-1	0	-1	bignum * ret = null ;	ret	EMPTY
308	320	2	-1	0	-1	int neg = numconst  i ;	neg i	EMPTY
308	321	3	-1	0	-1	int num ;	num	EMPTY
308	323	1	0	0	0	if ( in == null || * in == numconst ) {	in in	EMPTY
308	324	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
308	325	3	-1	0	-1	}	EMPTY	EMPTY
308	327	1	0	0	0	if ( * in == '-' ) {	in	EMPTY
308	328	2	-1	0	-1	neg = numconst ;	neg	EMPTY
308	329	2	-1	0	-1	in ++ ;	in	EMPTY
308	330	3	-1	0	-1	}	EMPTY	EMPTY
308	332	1	0	0	0	for ( i = numconst ; want _ char ( ( unsigned char ) in [ i ] ) && i + neg < int _ max ; i ++ ) { }	i in i i neg i	EMPTY
308	334	1	0	0	-1	num = i + neg ;	num i neg	EMPTY
308	335	2	-1	0	-1	if ( outp == null ) {	outp	EMPTY
308	336	2	-1	0	-1	return num ;	num	EMPTY
308	337	3	-1	0	-1	}	EMPTY	EMPTY
308	340	1	1	1	1	if ( * outp == null ) {	outp	EMPTY
308	341	2	-1	0	-1	ret = bn _ new ( ) ;	ret bn _ new	EMPTY
308	342	2	-1	0	-1	if ( ret == null ) {	ret	EMPTY
308	343	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
308	344	2	-1	0	-1	}	EMPTY	EMPTY
308	345	2	-1	0	-1	} else {	EMPTY	EMPTY
308	346	2	-1	0	-1	ret = * outp ;	ret outp	EMPTY
308	347	2	-1	0	-1	bn _ zero ( ret ) ;	bn _ zero ret	EMPTY
308	348	3	-1	0	-1	}	EMPTY	EMPTY
308	350	1	0	0	0	if ( ! decode ( ret , in , i ) ) {	ret in i	EMPTY
308	351	2	-1	0	-1	goto err ;	EMPTY	EMPTY
308	352	3	-1	0	-1	}	EMPTY	EMPTY
308	354	1	0	0	0	bn _ correct _ top ( ret )	bn _ correct _ top ret	EMPTY
308	355	2	-1	0	-1	if ( ! bn _ is _ zero ( ret ) ) {	bn _ is _ zero ret	EMPTY
308	356	2	-1	0	-1	ret -> neg = neg ;	ret neg neg	EMPTY
308	357	3	-1	0	-1	}	EMPTY	EMPTY
308	359	1	0	0	-1	* outp = ret	outp ret	EMPTY
308	360	3	-1	0	-1	return num	num	EMPTY
308	362	1	0	0	-1	err :	EMPTY	EMPTY
308	363	2	-1	0	-1	if ( * outp == null ) {	outp	EMPTY
308	364	2	-1	0	-1	bn _ free ( ret ) ;	bn _ free ret	EMPTY
308	365	3	-1	0	-1	}	EMPTY	EMPTY
308	367	1	0	0	0	return 0	EMPTY	EMPTY
308	368	3	-1	0	-1	}	EMPTY	EMPTY
308	370	1	0	0	-1	int bn _ hex2bn ( bignum * * outp  const char * in ) {	bn _ hex2bn outp in	EMPTY
308	371	2	-1	0	-1	return bn _ x2bn ( outp  in  decode _ hex  isxdigit ) ;	outp in decode _ hex	EMPTY
308	372	3	-1	0	-1	}	EMPTY	EMPTY
308	374	1	0	0	-1	char * bn _ bn2dec ( const bignum * a ) {	bn _ bn2dec a	EMPTY
308	375	2	-1	0	-1	int i = numconst  num  ok = numconst ;	i num	EMPTY
308	376	2	-1	0	-1	char * buf = null ;	buf	EMPTY
308	377	2	-1	0	-1	char * p ;	p	EMPTY
308	378	2	-1	0	-1	bignum * t = null ;	EMPTY	EMPTY
308	379	3	-1	0	-1	bn _ ulong * bn _ data = null  * lp ;	EMPTY	EMPTY
308	386	1	1	1	-1	i = bn _ num _ bits ( a ) * 3	i bn _ num _ bits a	EMPTY
308	387	2	-1	0	-1	num = i / 10 + i / 1000 + 1 + 1	num i i	EMPTY
308	388	2	-1	0	-1	bn _ data =	EMPTY	EMPTY
308	389	2	-1	0	-1	( bn _ ulong * ) openssl _ malloc ( ( num / bn _ dec _ num + 1 ) * sizeof ( bn _ ulong ) )	num	EMPTY
308	390	2	-1	0	-1	buf = ( char * ) openssl _ malloc ( num + 3 )	buf num	EMPTY
308	391	2	-1	0	-1	if ( ( buf == null ) || ( bn _ data == null ) ) {	buf	EMPTY
308	392	2	-1	0	-1	openssl _ put _ error ( bn , err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
308	393	2	-1	0	-1	goto err ;	EMPTY	EMPTY
308	394	2	-1	0	-1	}	EMPTY	EMPTY
308	395	2	-1	0	-1	t = bn _ dup ( a )	bn _ dup a	EMPTY
308	396	2	-1	0	-1	if ( t == null ) {	EMPTY	EMPTY
308	397	2	-1	0	-1	goto err ;	EMPTY	EMPTY
308	398	3	-1	0	-1	}	EMPTY	EMPTY
308	400	1	0	0	-1	# define buf _ remain ( num + numconst - ( size _ t ) ( p - buf ) )	num p buf	EMPTY
308	401	2	-1	0	-1	p = buf	p buf	EMPTY
308	402	2	-1	0	-1	lp = bn _ data	EMPTY	EMPTY
308	403	2	-1	0	-1	if ( bn _ is _ zero ( t ) ) {	bn _ is _ zero	EMPTY
308	404	2	-1	0	-1	* ( p ++ ) = '0'	p	EMPTY
308	405	2	-1	0	-1	* ( p ++ ) = '\0'	p	EMPTY
308	406	2	-1	0	-1	} else {	EMPTY	EMPTY
308	407	2	-1	0	-1	if ( bn _ is _ negative ( t ) ) {	bn _ is _ negative	EMPTY
308	408	2	-1	0	-1	* p ++ = '-' ;	p	EMPTY
308	409	3	-1	0	-1	}	EMPTY	EMPTY
308	411	1	1	0	1	while ( ! bn _ is _ zero ( t ) ) {	bn _ is _ zero	EMPTY
308	412	2	-1	0	-1	* lp = bn _ div _ word ( t , bn _ dec _ conv ) ;	bn _ div _ word	EMPTY
308	413	2	-1	0	-1	lp ++ ;	EMPTY	EMPTY
308	414	2	-1	0	-1	}	EMPTY	EMPTY
308	415	2	-1	0	-1	lp --	EMPTY	EMPTY
308	419	2	-1	1	-1	bio _ snprintf ( p , buf _ remain , bn _ dec _ fmt1 , * lp )	p	EMPTY
308	420	2	-1	0	-1	while ( * p ) {	p	EMPTY
308	421	2	-1	0	-1	p ++ ;	p	EMPTY
308	422	2	-1	0	-1	}	EMPTY	EMPTY
308	423	2	-1	0	-1	while ( lp != bn _ data ) {	EMPTY	EMPTY
308	424	2	-1	0	-1	lp -- ;	EMPTY	EMPTY
308	425	2	-1	0	-1	bio _ snprintf ( p , buf _ remain , bn _ dec _ fmt2 , * lp ) ;	p	EMPTY
308	426	2	-1	0	-1	while ( * p ) {	p	EMPTY
308	427	2	-1	0	-1	p ++ ;	p	EMPTY
308	428	2	-1	0	-1	}	EMPTY	EMPTY
308	429	2	-1	0	-1	}	EMPTY	EMPTY
308	430	2	-1	0	-1	}	EMPTY	EMPTY
308	431	3	-1	0	-1	ok = numconst ;	EMPTY	EMPTY
308	433	1	0	0	-1	err :	EMPTY	EMPTY
308	434	2	-1	0	-1	openssl _ free ( bn _ data ) ;	EMPTY	EMPTY
308	435	2	-1	0	-1	bn _ free ( t ) ;	bn _ free	EMPTY
308	436	2	-1	0	-1	if ( ! ok ) {	EMPTY	EMPTY
308	437	2	-1	0	-1	openssl _ free ( buf ) ;	buf	EMPTY
308	438	2	-1	0	-1	buf = null ;	buf	EMPTY
308	439	3	-1	0	-1	}	EMPTY	EMPTY
308	441	1	0	0	0	return buf ;	buf	EMPTY
308	442	3	-1	0	-1	}	EMPTY	EMPTY
308	444	1	0	0	-1	int bn _ dec2bn ( bignum * * outp  const char * in ) {	bn _ dec2bn outp in	EMPTY
308	445	2	-1	0	-1	return bn _ x2bn ( outp  in  decode _ dec  isdigit ) ;	outp in decode _ dec	EMPTY
308	446	3	-1	0	-1	}	EMPTY	EMPTY
308	448	1	0	0	-1	int bn _ asc2bn ( bignum * * outp  const char * in ) {	bn _ asc2bn outp in	EMPTY
308	449	2	-1	0	-1	const char * const orig _ in = in ;	in	EMPTY
308	450	2	-1	0	-1	if ( * in == '-' ) {	in	EMPTY
308	451	2	-1	0	-1	in ++ ;	in	EMPTY
308	452	3	-1	0	-1	}	EMPTY	EMPTY
308	454	1	0	0	0	if ( in [ numconst ] == '0' && ( in [ numconst ] == 'x' || in [ numconst ] == 'x' ) ) {	in in in	EMPTY
308	455	2	-1	0	-1	if ( ! bn _ hex2bn ( outp  in + numconst ) ) {	bn _ hex2bn outp in	EMPTY
308	456	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
308	457	2	-1	0	-1	}	EMPTY	EMPTY
308	458	2	-1	0	-1	}	EMPTY	EMPTY
308	459	2	-1	0	-1	if ( ! bn _ dec2bn ( outp  in ) ) {	bn _ dec2bn outp in	EMPTY
308	460	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
308	461	2	-1	0	-1	}	EMPTY	EMPTY
308	462	3	-1	0	-1	}	EMPTY	EMPTY
308	464	1	0	0	0	if ( * orig _ in == '-' && ! bn _ is _ zero ( * outp ) ) {	bn _ is _ zero outp	EMPTY
308	465	2	-1	0	-1	( * outp ) -> neg = numconst ;	outp neg	EMPTY
308	466	3	-1	0	-1	}	EMPTY	EMPTY
308	468	1	0	0	0	return numconst ;	EMPTY	EMPTY
308	469	3	-1	0	-1	}	EMPTY	EMPTY
308	471	1	0	0	-1	int bn _ print ( bio * bp  const bignum * a ) {	bn _ print bp a	EMPTY
308	472	2	-1	0	-1	int i  j  v  z = numconst ;	i v	EMPTY
308	473	3	-1	0	-1	int ret = numconst ;	ret	EMPTY
308	475	1	0	0	0	if ( a -> neg && bio _ write ( bp  strlit  numconst ) != numconst ) {	a neg bio _ write bp	EMPTY
308	476	2	-1	0	-1	goto end ;	EMPTY	EMPTY
308	477	3	-1	0	-1	}	EMPTY	EMPTY
308	479	1	0	0	0	if ( bn _ is _ zero ( a ) && bio _ write ( bp  strlit  numconst ) != numconst ) {	bn _ is _ zero a bio _ write bp	EMPTY
308	480	2	-1	0	-1	goto end ;	EMPTY	EMPTY
308	481	3	-1	0	-1	}	EMPTY	EMPTY
308	483	1	1	0	1	for ( i = a -> top - numconst ; i >= numconst ; i -- ) {	i a top i i	EMPTY
308	484	2	-1	0	-1	for ( j = bn _ bits2 - numconst ; j >= numconst ; j -= numconst ) {	EMPTY	EMPTY
308	486	2	-1	1	-1	v = ( ( int ) ( a -> d [ i ] >> ( long ) j ) ) & 0x0f	v a i	EMPTY
308	487	2	-1	0	-1	if ( z || v != 0 ) {	v	EMPTY
308	488	2	-1	0	-1	if ( bio _ write ( bp , & hextable [ v ] , 1 ) != 1 ) {	bio _ write bp v	EMPTY
308	489	2	-1	0	-1	goto end ;	EMPTY	EMPTY
308	490	2	-1	0	-1	}	EMPTY	EMPTY
308	491	2	-1	0	-1	z = 1 ;	EMPTY	EMPTY
308	492	2	-1	0	-1	}	EMPTY	EMPTY
308	493	2	-1	0	-1	}	EMPTY	EMPTY
308	494	2	-1	0	-1	}	EMPTY	EMPTY
308	495	3	-1	0	-1	ret = numconst ;	ret	EMPTY
308	497	1	0	0	-1	end :	EMPTY	EMPTY
308	498	2	-1	0	-1	return ret ;	ret	EMPTY
308	499	3	-1	0	-1	}	EMPTY	EMPTY
308	501	1	0	0	-1	int bn _ print _ fp ( file * fp  const bignum * a ) {	bn _ print _ fp fp a	EMPTY
308	502	2	-1	0	-1	bio * b ;	b	EMPTY
308	503	3	-1	0	-1	int ret ;	ret	EMPTY
308	505	1	0	0	-1	b = bio _ new ( bio _ s _ file ( ) ) ;	b bio _ new bio _ s _ file	EMPTY
308	506	2	-1	0	-1	if ( b == null ) {	b	EMPTY
308	507	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
308	508	2	-1	0	-1	}	EMPTY	EMPTY
308	509	2	-1	0	-1	bio _ set _ fp ( b  fp  bio _ noclose ) ;	bio _ set _ fp b fp	EMPTY
308	510	2	-1	0	-1	ret = bn _ print ( b  a ) ;	ret bn _ print b a	EMPTY
308	511	3	-1	0	-1	bio _ free ( b ) ;	bio _ free b	EMPTY
308	513	1	0	0	0	return ret ;	ret	EMPTY
308	514	3	-1	0	-1	}	EMPTY	EMPTY
308	516	1	0	0	-1	bn _ ulong bn _ get _ word ( const bignum * bn ) {	bn _ get _ word bn	EMPTY
308	517	2	-1	0	-1	switch ( bn -> top ) {	bn top	EMPTY
308	518	2	-1	0	-1	case numconst :	EMPTY	EMPTY
308	519	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
308	520	2	-1	0	-1	case numconst :	EMPTY	EMPTY
308	521	2	-1	0	-1	return bn -> d [ numconst ] ;	bn	EMPTY
308	522	2	-1	0	-1	default :	EMPTY	EMPTY
308	523	2	-1	0	-1	return bn _ mask2 ;	EMPTY	EMPTY
308	524	2	-1	0	-1	}	EMPTY	EMPTY
308	525	3	-1	0	-1	}	EMPTY	EMPTY
308	527	1	1	0	-1	size _ t bn _ bn2mpi ( const bignum * in  uint8 _ t * out ) {	bn _ bn2mpi in out	EMPTY
308	528	2	-1	0	-1	const size _ t bits = bn _ num _ bits ( in ) ;	bits bn _ num _ bits in	EMPTY
308	529	2	-1	0	-1	const size _ t bytes = ( bits + numconst ) / numconst ;	bits	EMPTY
308	532	2	-1	1	-1	int extend = 0 ;	extend	EMPTY
308	533	2	-1	0	-1	if ( bytes != 0 && ( bits & 0x07 ) == 0 ) {	bits	EMPTY
308	534	2	-1	0	-1	extend = 1 ;	extend	EMPTY
308	535	3	-1	0	-1	}	EMPTY	EMPTY
308	537	1	1	0	1	const size _ t len = bytes + extend ;	len extend	EMPTY
308	538	2	-1	0	-1	if ( len < bytes ||	len	EMPTY
308	539	2	-1	0	-1	numconst + len < len ||	len len	EMPTY
308	540	2	-1	0	-1	( len & numconst ) != len ) {	len len	EMPTY
308	543	2	-1	1	-1	if ( out ) {	out	EMPTY
308	544	2	-1	0	-1	memset ( out , 0 , 4 ) ;	out	EMPTY
308	545	2	-1	0	-1	}	EMPTY	EMPTY
308	546	2	-1	0	-1	return 4	EMPTY	EMPTY
308	547	3	-1	0	-1	}	EMPTY	EMPTY
308	549	1	0	0	0	if ( out == null ) {	out	EMPTY
308	550	2	-1	0	-1	return numconst + len ;	len	EMPTY
308	551	3	-1	0	-1	}	EMPTY	EMPTY
308	553	1	0	0	-1	out [ numconst ] = len >> numconst ;	out len	EMPTY
308	554	2	-1	0	-1	out [ numconst ] = len >> numconst ;	out len	EMPTY
308	555	2	-1	0	-1	out [ numconst ] = len >> numconst ;	out len	EMPTY
308	556	2	-1	0	-1	out [ numconst ] = len ;	out len	EMPTY
308	557	2	-1	0	-1	if ( extend ) {	extend	EMPTY
308	558	2	-1	0	-1	out [ numconst ] = numconst ;	out	EMPTY
308	559	2	-1	0	-1	}	EMPTY	EMPTY
308	560	2	-1	0	-1	bn _ bn2bin ( in  out + numconst + extend ) ;	bn _ bn2bin in out extend	EMPTY
308	561	2	-1	0	-1	if ( in -> neg && len > numconst ) {	in neg len	EMPTY
308	562	2	-1	0	-1	out [ numconst ] |= numconst ;	out	EMPTY
308	563	2	-1	0	-1	}	EMPTY	EMPTY
308	564	2	-1	0	-1	return len + numconst ;	len	EMPTY
308	565	3	-1	0	-1	}	EMPTY	EMPTY
308	567	1	0	0	-1	bignum * bn _ mpi2bn ( const uint8 _ t * in  size _ t len  bignum * out ) {	bn _ mpi2bn in len out	EMPTY
308	568	2	-1	0	-1	if ( len < numconst ) {	len	EMPTY
308	569	2	-1	0	-1	openssl _ put _ error ( bn  bn _ r _ bad _ encoding ) ;	EMPTY	EMPTY
308	570	2	-1	0	-1	return null ;	EMPTY	EMPTY
308	571	2	-1	0	-1	}	EMPTY	EMPTY
308	572	2	-1	0	-1	const size _ t in _ len = ( ( size _ t ) in [ numconst ] << numconst ) |	in _ len in	EMPTY
308	573	2	-1	0	-1	( ( size _ t ) in [ numconst ] << numconst ) |	in	EMPTY
308	574	2	-1	0	-1	( ( size _ t ) in [ numconst ] << numconst ) |	in	EMPTY
308	575	2	-1	0	-1	( ( size _ t ) in [ numconst ] ) ;	in	EMPTY
308	576	2	-1	0	-1	if ( in _ len != len - numconst ) {	in _ len len	EMPTY
308	577	2	-1	0	-1	openssl _ put _ error ( bn  bn _ r _ bad _ encoding ) ;	EMPTY	EMPTY
308	578	2	-1	0	-1	return null ;	EMPTY	EMPTY
308	579	3	-1	0	-1	}	EMPTY	EMPTY
308	581	1	0	0	0	if ( out == null ) {	out	EMPTY
308	582	2	-1	0	-1	out = bn _ new ( ) ;	out bn _ new	EMPTY
308	583	2	-1	0	-1	}	EMPTY	EMPTY
308	584	2	-1	0	-1	if ( out == null ) {	out	EMPTY
308	585	2	-1	0	-1	openssl _ put _ error ( bn  err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
308	586	2	-1	0	-1	return null ;	EMPTY	EMPTY
308	587	3	-1	0	-1	}	EMPTY	EMPTY
308	589	1	0	0	0	if ( in _ len == numconst ) {	in _ len	EMPTY
308	590	2	-1	0	-1	bn _ zero ( out ) ;	bn _ zero out	EMPTY
308	591	2	-1	0	-1	return out ;	out	EMPTY
308	592	3	-1	0	-1	}	EMPTY	EMPTY
308	594	1	0	0	-1	in += numconst ;	in	EMPTY
308	595	2	-1	0	-1	if ( bn _ bin2bn ( in  in _ len  out ) == null ) {	bn _ bin2bn in in _ len out	EMPTY
308	596	2	-1	0	-1	return null ;	EMPTY	EMPTY
308	597	2	-1	0	-1	}	EMPTY	EMPTY
308	598	2	-1	0	-1	out -> neg = ( ( * in ) & numconst ) != numconst ;	out neg in	EMPTY
308	599	2	-1	0	-1	if ( out -> neg ) {	out neg	EMPTY
308	600	2	-1	0	-1	bn _ clear _ bit ( out  bn _ num _ bits ( out ) - numconst ) ;	bn _ clear _ bit out bn _ num _ bits out	EMPTY
308	601	2	-1	0	-1	}	EMPTY	EMPTY
308	602	2	-1	0	-1	return out ;	out	EMPTY
308	603	3	-1	0	-1	}	EMPTY	EMPTY
327	71	1	1	0	-1	const char * x509 _ get _ default _ private _ dir ( void )	EMPTY	EMPTY
327	72	3	-1	1	-1	return ( x509 _ private _ dir )	EMPTY	EMPTY
327	74	1	0	0	-1	const char * x509 _ get _ default _ cert _ area ( void )	EMPTY	EMPTY
327	75	3	-1	0	-1	return ( x509 _ cert _ area )	EMPTY	EMPTY
327	77	1	0	0	-1	const char * x509 _ get _ default _ cert _ dir ( void )	EMPTY	EMPTY
327	78	3	-1	0	-1	return ( x509 _ cert _ dir )	EMPTY	EMPTY
327	80	1	0	0	-1	const char * x509 _ get _ default _ cert _ file ( void )	EMPTY	EMPTY
327	81	3	-1	0	-1	return ( x509 _ cert _ file )	EMPTY	EMPTY
327	83	1	0	0	-1	const char * x509 _ get _ default _ cert _ dir _ env ( void )	EMPTY	EMPTY
327	84	3	-1	0	-1	return ( x509 _ cert _ dir _ evp )	EMPTY	EMPTY
327	86	1	0	0	-1	const char * x509 _ get _ default _ cert _ file _ env ( void )	EMPTY	EMPTY
327	87	3	-1	0	-1	return ( x509 _ cert _ file _ evp )	EMPTY	EMPTY
331	63	1	1	0	-1	int x509 _ crl _ set _ version ( x509 _ crl * x  long version )	x version	EMPTY
331	64	2	-1	0	-1	{	EMPTY	EMPTY
331	65	2	-1	1	-1	if ( x == null ) return ( 0 )	x	EMPTY
331	66	2	-1	0	-1	if ( x -> crl -> version == null )	x crl version	EMPTY
331	67	2	-1	0	-1	{	EMPTY	EMPTY
331	68	2	-1	0	-1	if ( ( x -> crl -> version = m _ asn1 _ integer _ new ( ) ) == null )	x crl version	EMPTY
331	69	2	-1	0	-1	return ( 0 ) ;	EMPTY	EMPTY
331	70	2	-1	0	-1	}	EMPTY	EMPTY
331	71	2	-1	0	-1	return ( asn1 _ integer _ set ( x -> crl -> version , version ) )	x crl version version	EMPTY
331	72	3	-1	0	-1	}	EMPTY	EMPTY
331	74	1	0	0	-1	int x509 _ crl _ set _ issuer _ name ( x509 _ crl * x  x509 _ name * name )	x name	EMPTY
331	75	2	-1	0	-1	{	EMPTY	EMPTY
331	76	2	-1	0	-1	if ( ( x == null ) || ( x -> crl == null ) ) return ( 0 )	x x crl	EMPTY
331	77	2	-1	0	-1	return ( x509 _ name _ set ( & x -> crl -> issuer , name ) )	x crl issuer name	EMPTY
331	78	3	-1	0	-1	}	EMPTY	EMPTY
331	81	1	0	0	-1	int x509 _ crl _ set _ lastupdate ( x509 _ crl * x  const asn1 _ time * tm )	x	EMPTY
331	82	2	-1	0	-1	{	EMPTY	EMPTY
331	83	3	-1	0	-1	asn1 _ time * in ;	in	EMPTY
331	85	1	0	0	0	if ( x == null ) return ( 0 )	x	EMPTY
331	86	2	-1	0	-1	in = x -> crl -> lastupdate	in x crl	EMPTY
331	87	2	-1	0	-1	if ( in != tm )	in	EMPTY
331	88	2	-1	0	-1	{	EMPTY	EMPTY
331	89	2	-1	0	-1	in = m _ asn1 _ time _ dup ( tm ) ;	in	EMPTY
331	90	2	-1	0	-1	if ( in != null )	in	EMPTY
331	91	2	-1	0	-1	{	EMPTY	EMPTY
331	92	2	-1	0	-1	m _ asn1 _ time _ free ( x -> crl -> lastupdate ) ;	x crl	EMPTY
331	93	2	-1	0	-1	x -> crl -> lastupdate = in ;	x crl in	EMPTY
331	94	2	-1	0	-1	}	EMPTY	EMPTY
331	95	2	-1	0	-1	}	EMPTY	EMPTY
331	96	2	-1	0	-1	return ( in != null )	in	EMPTY
331	97	3	-1	0	-1	}	EMPTY	EMPTY
331	99	1	0	0	-1	int x509 _ crl _ set _ nextupdate ( x509 _ crl * x  const asn1 _ time * tm )	x	EMPTY
331	100	2	-1	0	-1	{	EMPTY	EMPTY
331	101	3	-1	0	-1	asn1 _ time * in ;	in	EMPTY
331	103	1	0	0	0	if ( x == null ) return ( 0 )	x	EMPTY
331	104	2	-1	0	-1	in = x -> crl -> nextupdate	in x crl	EMPTY
331	105	2	-1	0	-1	if ( in != tm )	in	EMPTY
331	106	2	-1	0	-1	{	EMPTY	EMPTY
331	107	2	-1	0	-1	in = m _ asn1 _ time _ dup ( tm ) ;	in	EMPTY
331	108	2	-1	0	-1	if ( in != null )	in	EMPTY
331	109	2	-1	0	-1	{	EMPTY	EMPTY
331	110	2	-1	0	-1	m _ asn1 _ time _ free ( x -> crl -> nextupdate ) ;	x crl	EMPTY
331	111	2	-1	0	-1	x -> crl -> nextupdate = in ;	x crl in	EMPTY
331	112	2	-1	0	-1	}	EMPTY	EMPTY
331	113	2	-1	0	-1	}	EMPTY	EMPTY
331	114	2	-1	0	-1	return ( in != null )	in	EMPTY
331	115	3	-1	0	-1	}	EMPTY	EMPTY
331	117	1	0	0	-1	int x509 _ crl _ sort ( x509 _ crl * c )	c	EMPTY
331	118	2	-1	0	-1	{	EMPTY	EMPTY
331	119	2	-1	0	-1	size _ t i ;	i	EMPTY
331	120	3	-1	0	-1	x509 _ revoked * r ;	r	EMPTY
331	123	1	1	0	-1	sk _ x509 _ revoked _ sort ( c -> crl -> revoked ) ;	c crl	EMPTY
331	124	2	-1	1	-1	for ( i = 0 ; i < sk _ x509 _ revoked _ num ( c -> crl -> revoked ) ; i ++ )	i i c crl i	EMPTY
331	125	2	-1	0	-1	{	EMPTY	EMPTY
331	126	2	-1	0	-1	r = sk _ x509 _ revoked _ value ( c -> crl -> revoked , i ) ;	r c crl i	EMPTY
331	127	2	-1	0	-1	r -> sequence = i ;	r sequence i	EMPTY
331	128	2	-1	0	-1	}	EMPTY	EMPTY
331	129	2	-1	0	-1	c -> crl -> enc . modified = 1	c crl enc modified	EMPTY
331	130	2	-1	0	-1	return 1	EMPTY	EMPTY
331	131	3	-1	0	-1	}	EMPTY	EMPTY
331	133	1	0	0	-1	void x509 _ crl _ up _ ref ( x509 _ crl * crl )	crl	EMPTY
331	134	2	-1	0	-1	{	EMPTY	EMPTY
331	135	2	-1	0	-1	crypto _ refcount _ inc ( & crl -> references ) ;	crypto _ refcount _ inc crl references	EMPTY
331	136	3	-1	0	-1	}	EMPTY	EMPTY
331	138	1	0	0	-1	int x509 _ revoked _ set _ revocationdate ( x509 _ revoked * x  asn1 _ time * tm )	x	EMPTY
331	139	2	-1	0	-1	{	EMPTY	EMPTY
331	140	3	-1	0	-1	asn1 _ time * in ;	in	EMPTY
331	142	1	0	0	0	return ( numconst ) ;	EMPTY	EMPTY
331	143	2	-1	0	-1	in = x -> revocationdate ;	in x	EMPTY
331	144	2	-1	0	-1	if ( in != tm )	in	EMPTY
331	145	2	-1	0	-1	{	EMPTY	EMPTY
331	146	2	-1	0	-1	in = m _ asn1 _ time _ dup ( tm ) ;	in	EMPTY
331	147	2	-1	0	-1	if ( in != null )	in	EMPTY
331	148	2	-1	0	-1	{	EMPTY	EMPTY
331	149	2	-1	0	-1	m _ asn1 _ time _ free ( x -> revocationdate ) ;	x	EMPTY
331	150	2	-1	0	-1	x -> revocationdate = in ;	x in	EMPTY
331	151	2	-1	0	-1	}	EMPTY	EMPTY
331	152	2	-1	0	-1	}	EMPTY	EMPTY
331	153	2	-1	0	-1	return ( in != null ) ;	in	EMPTY
331	154	3	-1	0	-1	}	EMPTY	EMPTY
331	156	1	0	0	-1	int x509 _ revoked _ set _ serialnumber ( x509 _ revoked * x  asn1 _ integer * serial )	x	EMPTY
331	157	2	-1	0	-1	{	EMPTY	EMPTY
331	158	3	-1	0	-1	asn1 _ integer * in ;	in	EMPTY
331	160	1	0	0	0	return ( numconst ) ;	EMPTY	EMPTY
331	161	2	-1	0	-1	in = x -> serialnumber ;	in x serialnumber	EMPTY
331	162	2	-1	0	-1	if ( in != serial )	in	EMPTY
331	163	2	-1	0	-1	{	EMPTY	EMPTY
331	164	2	-1	0	-1	in = m _ asn1 _ integer _ dup ( serial ) ;	in	EMPTY
331	165	2	-1	0	-1	if ( in != null )	in	EMPTY
331	166	2	-1	0	-1	{	EMPTY	EMPTY
331	167	2	-1	0	-1	m _ asn1 _ integer _ free ( x -> serialnumber ) ;	x serialnumber	EMPTY
331	168	2	-1	0	-1	x -> serialnumber = in ;	x serialnumber in	EMPTY
331	169	2	-1	0	-1	}	EMPTY	EMPTY
331	170	2	-1	0	-1	}	EMPTY	EMPTY
331	171	2	-1	0	-1	return ( in != null ) ;	in	EMPTY
331	172	3	-1	0	-1	}	EMPTY	EMPTY
333	64	1	1	0	-1	int x509 _ set _ version ( x509 * x  long version )	x version	EMPTY
333	65	2	-1	0	-1	{	EMPTY	EMPTY
333	66	2	-1	1	-1	if ( x == null ) return ( 0 )	x	EMPTY
333	67	2	-1	0	-1	if ( version == 0 )	version	EMPTY
333	68	2	-1	0	-1	{	EMPTY	EMPTY
333	69	2	-1	0	-1	m _ asn1 _ integer _ free ( x -> cert _ info -> version ) ;	x version	EMPTY
333	70	2	-1	0	-1	x -> cert _ info -> version = null ;	x version	EMPTY
333	71	2	-1	0	-1	return ( 1 ) ;	EMPTY	EMPTY
333	72	2	-1	0	-1	}	EMPTY	EMPTY
333	73	2	-1	0	-1	if ( x -> cert _ info -> version == null )	x version	EMPTY
333	74	2	-1	0	-1	{	EMPTY	EMPTY
333	75	2	-1	0	-1	if ( ( x -> cert _ info -> version = m _ asn1 _ integer _ new ( ) ) == null )	x version	EMPTY
333	76	2	-1	0	-1	return ( 0 ) ;	EMPTY	EMPTY
333	77	2	-1	0	-1	}	EMPTY	EMPTY
333	78	2	-1	0	-1	return ( asn1 _ integer _ set ( x -> cert _ info -> version , version ) )	x version version	EMPTY
333	79	3	-1	0	-1	}	EMPTY	EMPTY
333	81	1	0	0	-1	int x509 _ set _ serialnumber ( x509 * x  asn1 _ integer * serial )	x	EMPTY
333	82	2	-1	0	-1	{	EMPTY	EMPTY
333	83	3	-1	0	-1	asn1 _ integer * in ;	in	EMPTY
333	85	1	0	0	0	if ( x == null ) return ( 0 )	x	EMPTY
333	86	2	-1	0	-1	in = x -> cert _ info -> serialnumber	in x serialnumber	EMPTY
333	87	2	-1	0	-1	if ( in != serial )	in	EMPTY
333	88	2	-1	0	-1	{	EMPTY	EMPTY
333	89	2	-1	0	-1	in = m _ asn1 _ integer _ dup ( serial ) ;	in	EMPTY
333	90	2	-1	0	-1	if ( in != null )	in	EMPTY
333	91	2	-1	0	-1	{	EMPTY	EMPTY
333	92	2	-1	0	-1	m _ asn1 _ integer _ free ( x -> cert _ info -> serialnumber ) ;	x serialnumber	EMPTY
333	93	2	-1	0	-1	x -> cert _ info -> serialnumber = in ;	x serialnumber in	EMPTY
333	94	2	-1	0	-1	}	EMPTY	EMPTY
333	95	2	-1	0	-1	}	EMPTY	EMPTY
333	96	2	-1	0	-1	return ( in != null )	in	EMPTY
333	97	3	-1	0	-1	}	EMPTY	EMPTY
333	99	1	0	0	-1	int x509 _ set _ issuer _ name ( x509 * x  x509 _ name * name )	x name	EMPTY
333	100	2	-1	0	-1	{	EMPTY	EMPTY
333	101	2	-1	0	-1	if ( ( x == null ) || ( x -> cert _ info == null ) ) return ( 0 )	x x	EMPTY
333	102	2	-1	0	-1	return ( x509 _ name _ set ( & x -> cert _ info -> issuer , name ) )	x issuer name	EMPTY
333	103	3	-1	0	-1	}	EMPTY	EMPTY
333	105	1	0	0	-1	int x509 _ set _ subject _ name ( x509 * x  x509 _ name * name )	x name	EMPTY
333	106	2	-1	0	-1	{	EMPTY	EMPTY
333	107	2	-1	0	-1	if ( ( x == null ) || ( x -> cert _ info == null ) ) return ( 0 )	x x	EMPTY
333	108	2	-1	0	-1	return ( x509 _ name _ set ( & x -> cert _ info -> subject , name ) )	x name	EMPTY
333	109	3	-1	0	-1	}	EMPTY	EMPTY
333	111	1	0	0	-1	int x509 _ set _ notbefore ( x509 * x  const asn1 _ time * tm )	x	EMPTY
333	112	2	-1	0	-1	{	EMPTY	EMPTY
333	113	3	-1	0	-1	asn1 _ time * in ;	in	EMPTY
333	115	1	0	0	0	if ( ( x == null ) || ( x -> cert _ info -> validity == null ) ) return ( 0 )	x x	EMPTY
333	116	2	-1	0	-1	in = x -> cert _ info -> validity -> notbefore	in x	EMPTY
333	117	2	-1	0	-1	if ( in != tm )	in	EMPTY
333	118	2	-1	0	-1	{	EMPTY	EMPTY
333	119	2	-1	0	-1	in = m _ asn1 _ time _ dup ( tm ) ;	in	EMPTY
333	120	2	-1	0	-1	if ( in != null )	in	EMPTY
333	121	2	-1	0	-1	{	EMPTY	EMPTY
333	122	2	-1	0	-1	m _ asn1 _ time _ free ( x -> cert _ info -> validity -> notbefore ) ;	x	EMPTY
333	123	2	-1	0	-1	x -> cert _ info -> validity -> notbefore = in ;	x in	EMPTY
333	124	2	-1	0	-1	}	EMPTY	EMPTY
333	125	2	-1	0	-1	}	EMPTY	EMPTY
333	126	2	-1	0	-1	return ( in != null )	in	EMPTY
333	127	3	-1	0	-1	}	EMPTY	EMPTY
333	129	1	0	0	-1	int x509 _ set _ notafter ( x509 * x  const asn1 _ time * tm )	x	EMPTY
333	130	2	-1	0	-1	{	EMPTY	EMPTY
333	131	3	-1	0	-1	asn1 _ time * in ;	in	EMPTY
333	133	1	0	0	0	if ( ( x == null ) || ( x -> cert _ info -> validity == null ) ) return ( 0 )	x x	EMPTY
333	134	2	-1	0	-1	in = x -> cert _ info -> validity -> notafter	in x	EMPTY
333	135	2	-1	0	-1	if ( in != tm )	in	EMPTY
333	136	2	-1	0	-1	{	EMPTY	EMPTY
333	137	2	-1	0	-1	in = m _ asn1 _ time _ dup ( tm ) ;	in	EMPTY
333	138	2	-1	0	-1	if ( in != null )	in	EMPTY
333	139	2	-1	0	-1	{	EMPTY	EMPTY
333	140	2	-1	0	-1	m _ asn1 _ time _ free ( x -> cert _ info -> validity -> notafter ) ;	x	EMPTY
333	141	2	-1	0	-1	x -> cert _ info -> validity -> notafter = in ;	x in	EMPTY
333	142	2	-1	0	-1	}	EMPTY	EMPTY
333	143	2	-1	0	-1	}	EMPTY	EMPTY
333	144	2	-1	0	-1	return ( in != null )	in	EMPTY
333	145	3	-1	0	-1	}	EMPTY	EMPTY
333	147	1	0	0	-1	int x509 _ set _ pubkey ( x509 * x  evp _ pkey * pkey )	x pkey	EMPTY
333	148	2	-1	0	-1	{	EMPTY	EMPTY
333	149	2	-1	0	-1	if ( ( x == null ) || ( x -> cert _ info == null ) ) return ( 0 )	x x	EMPTY
333	150	2	-1	0	-1	return ( x509 _ pubkey _ set ( & ( x -> cert _ info -> key ) , pkey ) )	x key pkey	EMPTY
333	151	3	-1	0	-1	}	EMPTY	EMPTY
334	66	1	1	0	-1	int x509v3 _ get _ ext _ count ( const stack _ of ( x509 _ extension ) * x )	x	EMPTY
334	67	2	-1	0	-1	{	EMPTY	EMPTY
334	68	2	-1	1	-1	if ( x == null ) return ( 0 )	x	EMPTY
334	69	2	-1	0	-1	return ( sk _ x509 _ extension _ num ( x ) )	x	EMPTY
334	70	3	-1	0	-1	}	EMPTY	EMPTY
334	72	1	0	0	-1	int x509v3 _ get _ ext _ by _ nid ( const stack _ of ( x509 _ extension ) * x  int nid	x nid	EMPTY
334	73	2	-1	0	-1	int lastpos )	lastpos	EMPTY
334	74	2	-1	0	-1	{	EMPTY	EMPTY
334	75	3	-1	0	-1	const asn1 _ object * obj ;	obj	EMPTY
334	77	1	0	0	-1	obj = obj _ nid2obj ( nid )	obj obj _ nid2obj nid	EMPTY
334	78	2	-1	0	-1	if ( obj == null ) return ( - 2 )	obj	EMPTY
334	79	2	-1	0	-1	return ( x509v3 _ get _ ext _ by _ obj ( x , obj , lastpos ) )	x obj lastpos	EMPTY
334	80	3	-1	0	-1	}	EMPTY	EMPTY
334	82	1	0	0	-1	int x509v3 _ get _ ext _ by _ obj ( const stack _ of ( x509 _ extension ) * sk  const asn1 _ object * obj	sk obj	EMPTY
334	83	2	-1	0	-1	int lastpos )	lastpos	EMPTY
334	84	2	-1	0	-1	{	EMPTY	EMPTY
334	85	2	-1	0	-1	int n ;	n	EMPTY
334	86	3	-1	0	-1	x509 _ extension * ex ;	EMPTY	EMPTY
334	88	1	0	0	0	if ( sk == null ) return ( - 1 )	sk	EMPTY
334	89	2	-1	0	-1	lastpos ++	lastpos	EMPTY
334	90	2	-1	0	-1	if ( lastpos < 0 )	lastpos	EMPTY
334	91	2	-1	0	-1	lastpos = 0	lastpos	EMPTY
334	92	2	-1	0	-1	n = sk _ x509 _ extension _ num ( sk ) ;	n sk	EMPTY
334	93	2	-1	0	-1	for ( ; lastpos < n ; lastpos ++ )	lastpos n lastpos	EMPTY
334	94	2	-1	0	-1	{	EMPTY	EMPTY
334	95	2	-1	0	-1	ex = sk _ x509 _ extension _ value ( sk , lastpos ) ;	sk lastpos	EMPTY
334	96	2	-1	0	-1	if ( obj _ cmp ( ex -> object , obj ) == 0 )	obj _ cmp obj	EMPTY
334	97	2	-1	0	-1	return ( lastpos ) ;	lastpos	EMPTY
334	98	2	-1	0	-1	}	EMPTY	EMPTY
334	99	2	-1	0	-1	return ( - 1 )	EMPTY	EMPTY
334	100	3	-1	0	-1	}	EMPTY	EMPTY
334	102	1	0	0	-1	int x509v3 _ get _ ext _ by _ critical ( const stack _ of ( x509 _ extension ) * sk  int crit	sk	EMPTY
334	103	2	-1	0	-1	int lastpos )	lastpos	EMPTY
334	104	2	-1	0	-1	{	EMPTY	EMPTY
334	105	2	-1	0	-1	int n ;	n	EMPTY
334	106	3	-1	0	-1	x509 _ extension * ex ;	EMPTY	EMPTY
334	108	1	0	0	0	if ( sk == null ) return ( - 1 )	sk	EMPTY
334	109	2	-1	0	-1	lastpos ++	lastpos	EMPTY
334	110	2	-1	0	-1	if ( lastpos < 0 )	lastpos	EMPTY
334	111	2	-1	0	-1	lastpos = 0	lastpos	EMPTY
334	112	2	-1	0	-1	n = sk _ x509 _ extension _ num ( sk ) ;	n sk	EMPTY
334	113	2	-1	0	-1	for ( ; lastpos < n ; lastpos ++ )	lastpos n lastpos	EMPTY
334	114	2	-1	0	-1	{	EMPTY	EMPTY
334	115	2	-1	0	-1	ex = sk _ x509 _ extension _ value ( sk , lastpos ) ;	sk lastpos	EMPTY
334	116	2	-1	0	-1	if ( ( ( ex -> critical > 0 ) && crit ) ||	EMPTY	EMPTY
334	117	2	-1	0	-1	( ( ex -> critical <= 0 ) && ! crit ) )	EMPTY	EMPTY
334	118	2	-1	0	-1	return ( lastpos ) ;	lastpos	EMPTY
334	119	2	-1	0	-1	}	EMPTY	EMPTY
334	120	2	-1	0	-1	return ( - 1 )	EMPTY	EMPTY
334	121	3	-1	0	-1	}	EMPTY	EMPTY
334	123	1	0	0	-1	x509 _ extension * x509v3 _ get _ ext ( const stack _ of ( x509 _ extension ) * x  int loc )	x	EMPTY
334	124	2	-1	0	-1	{	EMPTY	EMPTY
334	125	2	-1	0	-1	if ( x == null || loc < numconst || sk _ x509 _ extension _ num ( x ) <= ( size _ t ) loc )	x x	EMPTY
334	126	2	-1	0	-1	return null ;	EMPTY	EMPTY
334	127	2	-1	0	-1	else	EMPTY	EMPTY
334	128	2	-1	0	-1	return sk _ x509 _ extension _ value ( x  loc ) ;	x	EMPTY
334	129	3	-1	0	-1	}	EMPTY	EMPTY
334	131	1	0	0	-1	x509 _ extension * x509v3 _ delete _ ext ( stack _ of ( x509 _ extension ) * x  int loc )	x	EMPTY
334	132	2	-1	0	-1	{	EMPTY	EMPTY
334	133	3	-1	0	-1	x509 _ extension * ret ;	ret	EMPTY
334	135	1	0	0	0	if ( x == null || loc < 0 || sk _ x509 _ extension _ num ( x ) <= ( size _ t ) loc )	x x	EMPTY
334	136	2	-1	0	-1	return ( null )	EMPTY	EMPTY
334	137	2	-1	0	-1	ret = sk _ x509 _ extension _ delete ( x  loc ) ;	ret x	EMPTY
334	138	2	-1	0	-1	return ( ret )	ret	EMPTY
334	139	3	-1	0	-1	}	EMPTY	EMPTY
334	141	1	0	0	-1	stack _ of ( x509 _ extension ) * x509v3 _ add _ ext ( stack _ of ( x509 _ extension ) * * x	x	EMPTY
334	142	2	-1	0	-1	x509 _ extension * ex  int loc )	EMPTY	EMPTY
334	143	2	-1	0	-1	{	EMPTY	EMPTY
334	144	2	-1	0	-1	x509 _ extension * new _ ex = null ;	EMPTY	EMPTY
334	145	2	-1	0	-1	int n ;	n	EMPTY
334	146	3	-1	0	-1	empty	EMPTY	EMPTY
334	148	1	0	0	0	if ( x == null )	x	EMPTY
334	149	2	-1	0	-1	{	EMPTY	EMPTY
334	150	2	-1	0	-1	openssl _ put _ error ( x509 , err _ r _ passed _ null _ parameter ) ;	EMPTY	EMPTY
334	151	2	-1	0	-1	goto err2 ;	EMPTY	EMPTY
334	152	3	-1	0	-1	}	EMPTY	EMPTY
334	154	1	0	0	0	if ( * x == null )	x	EMPTY
334	155	2	-1	0	-1	{	EMPTY	EMPTY
334	156	2	-1	0	-1	if ( ( sk = sk _ x509 _ extension _ new _ null ( ) ) == null )	sk	EMPTY
334	157	2	-1	0	-1	goto err ;	EMPTY	EMPTY
334	158	2	-1	0	-1	}	EMPTY	EMPTY
334	159	2	-1	0	-1	else	EMPTY	EMPTY
334	160	3	-1	0	-1	sk = * x	sk x	EMPTY
334	162	1	0	0	-1	n = sk _ x509 _ extension _ num ( sk ) ;	n sk	EMPTY
334	163	2	-1	0	-1	if ( loc > n ) loc = n ;	n n	EMPTY
334	164	3	-1	0	-1	else if ( loc < 0 ) loc = n	n	EMPTY
334	166	1	0	0	0	if ( ( new _ ex = x509 _ extension _ dup ( ex ) ) == null )	EMPTY	EMPTY
334	167	2	-1	0	-1	goto err2	EMPTY	EMPTY
334	168	2	-1	0	-1	if ( ! sk _ x509 _ extension _ insert ( sk , new _ ex , loc ) )	sk	EMPTY
334	169	2	-1	0	-1	goto err	EMPTY	EMPTY
334	170	2	-1	0	-1	if ( * x == null )	x	EMPTY
334	171	2	-1	0	-1	* x = sk	x sk	EMPTY
334	172	2	-1	0	-1	return ( sk )	sk	EMPTY
334	173	2	-1	0	-1	err :	EMPTY	EMPTY
334	174	2	-1	0	-1	openssl _ put _ error ( x509  err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
334	175	2	-1	0	-1	err2 :	EMPTY	EMPTY
334	176	2	-1	0	-1	if ( new _ ex != null ) x509 _ extension _ free ( new _ ex )	EMPTY	EMPTY
334	177	2	-1	0	-1	if ( sk != null ) sk _ x509 _ extension _ free ( sk ) ;	sk sk	EMPTY
334	178	2	-1	0	-1	return ( null )	EMPTY	EMPTY
334	179	3	-1	0	-1	}	EMPTY	EMPTY
334	181	1	0	0	-1	x509 _ extension * x509 _ extension _ create _ by _ nid ( x509 _ extension * * ex  int nid	nid	EMPTY
334	182	2	-1	0	-1	int crit  asn1 _ octet _ string * data )	data	EMPTY
334	183	2	-1	0	-1	{	EMPTY	EMPTY
334	184	2	-1	0	-1	const asn1 _ object * obj ;	obj	EMPTY
334	185	3	-1	0	-1	x509 _ extension * ret ;	ret	EMPTY
334	187	1	0	0	-1	obj = obj _ nid2obj ( nid )	obj obj _ nid2obj nid	EMPTY
334	188	2	-1	0	-1	if ( obj == null )	obj	EMPTY
334	189	2	-1	0	-1	{	EMPTY	EMPTY
334	190	2	-1	0	-1	openssl _ put _ error ( x509 , x509 _ r _ unknown _ nid ) ;	EMPTY	EMPTY
334	191	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
334	192	2	-1	0	-1	}	EMPTY	EMPTY
334	193	2	-1	0	-1	ret = x509 _ extension _ create _ by _ obj ( ex , obj , crit , data )	ret obj data	EMPTY
334	194	2	-1	0	-1	return ( ret )	ret	EMPTY
334	195	3	-1	0	-1	}	EMPTY	EMPTY
334	197	1	0	0	-1	x509 _ extension * x509 _ extension _ create _ by _ obj ( x509 _ extension * * ex	EMPTY	EMPTY
334	198	2	-1	0	-1	const asn1 _ object * obj  int crit  asn1 _ octet _ string * data )	obj data	EMPTY
334	199	2	-1	0	-1	{	EMPTY	EMPTY
334	200	3	-1	0	-1	x509 _ extension * ret ;	ret	EMPTY
334	202	1	0	0	0	if ( ( ex == null ) || ( * ex == null ) )	EMPTY	EMPTY
334	203	2	-1	0	-1	{	EMPTY	EMPTY
334	204	2	-1	0	-1	if ( ( ret = x509 _ extension _ new ( ) ) == null )	ret	EMPTY
334	205	2	-1	0	-1	{	EMPTY	EMPTY
334	206	2	-1	0	-1	openssl _ put _ error ( x509 , err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
334	207	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
334	208	2	-1	0	-1	}	EMPTY	EMPTY
334	209	2	-1	0	-1	}	EMPTY	EMPTY
334	210	2	-1	0	-1	else	EMPTY	EMPTY
334	211	3	-1	0	-1	ret = * ex	ret	EMPTY
334	213	1	0	0	0	if ( ! x509 _ extension _ set _ object ( ret , obj ) )	ret obj	EMPTY
334	214	2	-1	0	-1	goto err	EMPTY	EMPTY
334	215	2	-1	0	-1	if ( ! x509 _ extension _ set _ critical ( ret , crit ) )	ret	EMPTY
334	216	2	-1	0	-1	goto err	EMPTY	EMPTY
334	217	2	-1	0	-1	if ( ! x509 _ extension _ set _ data ( ret , data ) )	ret data	EMPTY
334	218	2	-1	0	-1	goto err	EMPTY	EMPTY
334	219	2	-1	0	-1	if	EMPTY	EMPTY
334	220	2	-1	0	-1	if ( ( ex != null ) && ( * ex == null ) ) * ex = ret	ret	EMPTY
334	221	2	-1	0	-1	return ( ret )	ret	EMPTY
334	222	2	-1	0	-1	err :	EMPTY	EMPTY
334	223	2	-1	0	-1	if ( ( ex == null ) || ( ret != * ex ) )	ret	EMPTY
334	224	2	-1	0	-1	x509 _ extension _ free ( ret )	ret	EMPTY
334	225	2	-1	0	-1	return ( null )	EMPTY	EMPTY
334	226	3	-1	0	-1	}	EMPTY	EMPTY
334	228	1	0	0	-1	int x509 _ extension _ set _ object ( x509 _ extension * ex  const asn1 _ object * obj )	obj	EMPTY
334	229	2	-1	0	-1	{	EMPTY	EMPTY
334	230	2	-1	0	-1	if ( ( ex == null ) || ( obj == null ) )	obj	EMPTY
334	231	2	-1	0	-1	return ( 0 )	EMPTY	EMPTY
334	232	2	-1	0	-1	asn1 _ object _ free ( ex -> object )	EMPTY	EMPTY
334	233	2	-1	0	-1	ex -> object = obj _ dup ( obj )	obj _ dup obj	EMPTY
334	234	2	-1	0	-1	return ex -> object != null ;	EMPTY	EMPTY
334	235	3	-1	0	-1	}	EMPTY	EMPTY
334	237	1	0	0	-1	int x509 _ extension _ set _ critical ( x509 _ extension * ex  int crit )	EMPTY	EMPTY
334	238	2	-1	0	-1	{	EMPTY	EMPTY
334	239	2	-1	0	-1	if ( ex == null ) return ( 0 )	EMPTY	EMPTY
334	240	2	-1	0	-1	ex -> critical = ( crit ) ? 0xff : - 1	EMPTY	EMPTY
334	241	2	-1	0	-1	return ( 1 )	EMPTY	EMPTY
334	242	3	-1	0	-1	}	EMPTY	EMPTY
334	244	1	0	0	-1	int x509 _ extension _ set _ data ( x509 _ extension * ex  asn1 _ octet _ string * data )	data	EMPTY
334	245	2	-1	0	-1	{	EMPTY	EMPTY
334	246	3	-1	0	-1	int i ;	i	EMPTY
334	248	1	0	0	0	if ( ex == null ) return ( 0 )	EMPTY	EMPTY
334	249	2	-1	0	-1	i = m _ asn1 _ octet _ string _ set ( ex -> value  data -> data  data -> length ) ;	i value data data data length	EMPTY
334	250	2	-1	0	-1	if ( ! i ) return ( 0 )	i	EMPTY
334	251	2	-1	0	-1	return ( 1 )	EMPTY	EMPTY
334	252	3	-1	0	-1	}	EMPTY	EMPTY
334	254	1	0	0	-1	asn1 _ object * x509 _ extension _ get _ object ( x509 _ extension * ex )	EMPTY	EMPTY
334	255	2	-1	0	-1	{	EMPTY	EMPTY
334	256	2	-1	0	-1	if ( ex == null ) return ( null )	EMPTY	EMPTY
334	257	2	-1	0	-1	return ( ex -> object )	EMPTY	EMPTY
334	258	3	-1	0	-1	}	EMPTY	EMPTY
334	260	1	0	0	-1	asn1 _ octet _ string * x509 _ extension _ get _ data ( x509 _ extension * ex )	EMPTY	EMPTY
334	261	2	-1	0	-1	{	EMPTY	EMPTY
334	262	2	-1	0	-1	if ( ex == null ) return ( null )	EMPTY	EMPTY
334	263	2	-1	0	-1	return ( ex -> value )	value	EMPTY
334	264	3	-1	0	-1	}	EMPTY	EMPTY
334	266	1	0	0	-1	int x509 _ extension _ get _ critical ( x509 _ extension * ex )	EMPTY	EMPTY
334	267	2	-1	0	-1	{	EMPTY	EMPTY
334	268	2	-1	0	-1	if ( ex == null ) return ( 0 )	EMPTY	EMPTY
334	269	2	-1	0	-1	if ( ex -> critical > 0 ) return 1	EMPTY	EMPTY
334	270	2	-1	0	-1	return 0	EMPTY	EMPTY
334	271	3	-1	0	-1	}	EMPTY	EMPTY
340	63	1	0	0	-1	int pkcs8 _ pkey _ set0 ( pkcs8 _ priv _ key _ info * priv  asn1 _ object * aobj  int version	version	EMPTY
340	64	2	-1	0	-1	int ptype  void * pval  uint8 _ t * penc  int penclen ) {	EMPTY	EMPTY
340	65	2	-1	0	-1	uint8 _ t * * ppenc = null ;	EMPTY	EMPTY
340	66	2	-1	0	-1	if ( version >= 0 ) {	version	EMPTY
340	67	2	-1	0	-1	if ( ! asn1 _ integer _ set ( priv -> version , version ) ) {	version version	EMPTY
340	68	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
340	69	2	-1	0	-1	}	EMPTY	EMPTY
340	70	3	-1	0	-1	}	EMPTY	EMPTY
340	72	1	0	0	0	if ( penc ) {	EMPTY	EMPTY
340	73	2	-1	0	-1	int pmtype ;	EMPTY	EMPTY
340	74	3	-1	0	-1	asn1 _ octet _ string * oct ;	EMPTY	EMPTY
340	76	1	0	0	-1	oct = asn1 _ octet _ string _ new ( ) ;	EMPTY	EMPTY
340	77	2	-1	0	-1	if ( ! oct ) {	EMPTY	EMPTY
340	78	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
340	79	2	-1	0	-1	}	EMPTY	EMPTY
340	80	2	-1	0	-1	oct -> data = penc ;	data	EMPTY
340	81	2	-1	0	-1	ppenc = & oct -> data ;	data	EMPTY
340	82	2	-1	0	-1	oct -> length = penclen ;	length	EMPTY
340	83	2	-1	0	-1	if ( priv -> broken == pkcs8 _ no _ octet ) {	broken	EMPTY
340	84	2	-1	0	-1	pmtype = v _ asn1 _ sequence ;	EMPTY	EMPTY
340	85	2	-1	0	-1	} else {	EMPTY	EMPTY
340	86	2	-1	0	-1	pmtype = v _ asn1 _ octet _ string ;	EMPTY	EMPTY
340	87	2	-1	0	-1	}	EMPTY	EMPTY
340	88	2	-1	0	-1	asn1 _ type _ set ( priv -> pkey , pmtype , oct ) ;	pkey	EMPTY
340	89	3	-1	0	-1	}	EMPTY	EMPTY
340	91	1	1	0	1	if ( ! x509 _ algor _ set0 ( priv -> pkeyalg  aobj  ptype  pval ) ) {	EMPTY	EMPTY
340	93	2	-1	1	-1	if ( ppenc ) {	EMPTY	EMPTY
340	94	2	-1	0	-1	* ppenc = null ;	EMPTY	EMPTY
340	95	2	-1	0	-1	}	EMPTY	EMPTY
340	96	2	-1	0	-1	return 0	EMPTY	EMPTY
340	97	3	-1	0	-1	}	EMPTY	EMPTY
340	99	1	0	0	0	return numconst ;	EMPTY	EMPTY
340	100	3	-1	0	-1	}	EMPTY	EMPTY
340	102	1	0	0	-1	int pkcs8 _ pkey _ get0 ( asn1 _ object * * ppkalg  const uint8 _ t * * pk  int * ppklen	EMPTY	EMPTY
340	103	2	-1	0	-1	x509 _ algor * * pa  pkcs8 _ priv _ key _ info * p8 ) {	EMPTY	EMPTY
340	104	3	-1	0	-1	if ( ppkalg ) {	EMPTY	EMPTY
340	106	1	0	0	-1	}	EMPTY	EMPTY
340	108	1	0	0	0	if ( p8 -> pkey -> type == v _ asn1 _ octet _ string ) {	pkey type	EMPTY
340	109	2	-1	0	-1	p8 -> broken = pkcs8 _ ok ;	broken	EMPTY
340	110	3	-1	0	-1	if ( pk ) {	EMPTY	EMPTY
340	113	1	0	0	-1	}	EMPTY	EMPTY
340	114	2	-1	0	-1	if ( p8 -> pkey -> type == v _ asn1 _ sequence ) {	pkey type	EMPTY
340	115	2	-1	0	-1	p8 -> broken = pkcs8 _ no _ octet ;	broken	EMPTY
340	116	3	-1	0	-1	if ( pk ) {	EMPTY	EMPTY
340	119	1	0	0	-1	}	EMPTY	EMPTY
340	120	2	-1	0	-1	}	EMPTY	EMPTY
340	121	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
340	122	3	-1	0	-1	}	EMPTY	EMPTY
340	124	1	0	0	0	if ( pa ) {	EMPTY	EMPTY
340	126	1	0	0	-1	}	EMPTY	EMPTY
340	127	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
340	128	3	-1	0	-1	}	EMPTY	EMPTY
340	130	1	0	0	-1	int x509 _ signature _ dump ( bio * bp  const asn1 _ string * sig  int indent ) {	bp sig indent	EMPTY
340	131	2	-1	0	-1	const uint8 _ t * s ;	s	EMPTY
340	132	3	-1	0	-1	int i  n ;	i n	EMPTY
340	134	1	0	0	-1	n = sig -> length ;	n sig length	EMPTY
340	135	2	-1	0	-1	s = sig -> data ;	s sig data	EMPTY
340	136	2	-1	0	-1	for ( i = numconst ; i < n ; i ++ ) {	i i n i	EMPTY
340	137	2	-1	0	-1	if ( ( i % numconst ) == numconst ) {	i	EMPTY
340	138	2	-1	0	-1	if ( bio _ write ( bp  strlit  numconst ) <= numconst ||	bio _ write bp	EMPTY
340	139	2	-1	0	-1	bio _ indent ( bp  indent  indent ) <= numconst ) {	bio _ indent bp indent indent	EMPTY
340	140	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
340	141	2	-1	0	-1	}	EMPTY	EMPTY
340	142	2	-1	0	-1	}	EMPTY	EMPTY
340	143	2	-1	0	-1	if ( bio _ printf ( bp  strlit  s [ i ]  ( ( i + numconst ) == n ) ? strlit : strlit ) <= numconst ) {	bp s i i n	EMPTY
340	144	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
340	145	2	-1	0	-1	}	EMPTY	EMPTY
340	146	2	-1	0	-1	}	EMPTY	EMPTY
340	147	2	-1	0	-1	if ( bio _ write ( bp  strlit  numconst ) != numconst ) {	bio _ write bp	EMPTY
340	148	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
340	149	3	-1	0	-1	}	EMPTY	EMPTY
340	151	1	0	0	0	return numconst ;	EMPTY	EMPTY
340	152	3	-1	0	-1	}	EMPTY	EMPTY
349	71	1	0	0	-1	int x509 _ issuer _ and _ serial _ cmp ( const x509 * a  const x509 * b )	a b	EMPTY
349	72	2	-1	0	-1	{	EMPTY	EMPTY
349	73	2	-1	0	-1	int i ;	i	EMPTY
349	74	3	-1	0	-1	x509 _ cinf * ai , * bi ;	EMPTY	EMPTY
349	76	1	0	0	-1	ai = a -> cert _ info	a	EMPTY
349	77	2	-1	0	-1	bi = b -> cert _ info	b	EMPTY
349	78	2	-1	0	-1	i = m _ asn1 _ integer _ cmp ( ai -> serialnumber  bi -> serialnumber ) ;	i serialnumber serialnumber	EMPTY
349	79	2	-1	0	-1	if ( i ) return ( i )	i i	EMPTY
349	80	2	-1	0	-1	return ( x509 _ name _ cmp ( ai -> issuer , bi -> issuer ) )	issuer issuer	EMPTY
349	81	3	-1	0	-1	}	EMPTY	EMPTY
349	83	1	0	0	-1	unsigned long x509 _ issuer _ and _ serial _ hash ( x509 * a )	a	EMPTY
349	84	2	-1	0	-1	{	EMPTY	EMPTY
349	85	2	-1	0	-1	unsigned long ret = 0 ;	ret	EMPTY
349	86	2	-1	0	-1	evp _ md _ ctx ctx ;	ctx	EMPTY
349	87	2	-1	0	-1	unsigned char md [ 16 ] ;	md	EMPTY
349	88	3	-1	0	-1	char * f ;	EMPTY	EMPTY
349	90	1	0	0	0	evp _ md _ ctx _ init ( & ctx )	evp _ md _ ctx _ init ctx	EMPTY
349	91	2	-1	0	-1	f = x509 _ name _ oneline ( a -> cert _ info -> issuer , null , 0 )	a issuer	EMPTY
349	92	2	-1	0	-1	if ( ! evp _ digestinit _ ex ( & ctx , evp _ md5 ( ) , null ) )	evp _ digestinit _ ex ctx	EMPTY
349	93	2	-1	0	-1	goto err	EMPTY	EMPTY
349	94	2	-1	0	-1	if ( ! evp _ digestupdate ( & ctx , ( unsigned char * ) f , strlen ( f ) ) )	evp _ digestupdate ctx	EMPTY
349	95	2	-1	0	-1	goto err	EMPTY	EMPTY
349	96	2	-1	0	-1	empty	EMPTY	EMPTY
349	97	2	-1	0	-1	if ( ! evp _ digestupdate ( & ctx , ( unsigned char * ) a -> cert _ info -> serialnumber -> data ,	evp _ digestupdate ctx a serialnumber data	EMPTY
349	98	2	-1	0	-1	( unsigned long ) a -> cert _ info -> serialnumber -> length ) )	a serialnumber length	EMPTY
349	99	2	-1	0	-1	goto err	EMPTY	EMPTY
349	100	2	-1	0	-1	if ( ! evp _ digestfinal _ ex ( & ctx , & ( md [ 0 ] ) , null ) )	evp _ digestfinal _ ex ctx md	EMPTY
349	101	2	-1	0	-1	goto err	EMPTY	EMPTY
349	102	2	-1	0	-1	ret = ( ( ( unsigned long ) md [ 0 ] ) | ( ( unsigned long ) md [ 1 ] << 8l ) |	ret md md	EMPTY
349	103	2	-1	0	-1	( ( unsigned long ) md [ 2 ] << 16l ) | ( ( unsigned long ) md [ 3 ] << 24l )	md md	EMPTY
349	104	2	-1	0	-1	) & 0xffffffffl	EMPTY	EMPTY
349	105	2	-1	0	-1	err :	EMPTY	EMPTY
349	106	2	-1	0	-1	evp _ md _ ctx _ cleanup ( & ctx )	evp _ md _ ctx _ cleanup ctx	EMPTY
349	107	2	-1	0	-1	return ( ret )	ret	EMPTY
349	108	3	-1	0	-1	}	EMPTY	EMPTY
349	110	1	0	0	-1	int x509 _ issuer _ name _ cmp ( const x509 * a  const x509 * b )	a b	EMPTY
349	111	2	-1	0	-1	{	EMPTY	EMPTY
349	112	2	-1	0	-1	return ( x509 _ name _ cmp ( a -> cert _ info -> issuer , b -> cert _ info -> issuer ) )	a issuer b issuer	EMPTY
349	113	3	-1	0	-1	}	EMPTY	EMPTY
349	115	1	0	0	-1	int x509 _ subject _ name _ cmp ( const x509 * a  const x509 * b )	a b	EMPTY
349	116	2	-1	0	-1	{	EMPTY	EMPTY
349	117	2	-1	0	-1	return ( x509 _ name _ cmp ( a -> cert _ info -> subject , b -> cert _ info -> subject ) )	a b	EMPTY
349	118	3	-1	0	-1	}	EMPTY	EMPTY
349	120	1	0	0	-1	int x509 _ crl _ cmp ( const x509 _ crl * a  const x509 _ crl * b )	a b	EMPTY
349	121	2	-1	0	-1	{	EMPTY	EMPTY
349	122	2	-1	0	-1	return ( x509 _ name _ cmp ( a -> crl -> issuer , b -> crl -> issuer ) )	a crl issuer b crl issuer	EMPTY
349	123	3	-1	0	-1	}	EMPTY	EMPTY
349	125	1	0	0	-1	int x509 _ crl _ match ( const x509 _ crl * a  const x509 _ crl * b )	a b	EMPTY
349	126	2	-1	0	-1	{	EMPTY	EMPTY
349	127	2	-1	0	-1	return memcmp ( a -> sha1 _ hash , b -> sha1 _ hash , 20 )	a b	EMPTY
349	128	3	-1	0	-1	}	EMPTY	EMPTY
349	130	1	0	0	-1	x509 _ name * x509 _ get _ issuer _ name ( x509 * a )	a	EMPTY
349	131	2	-1	0	-1	{	EMPTY	EMPTY
349	132	2	-1	0	-1	return ( a -> cert _ info -> issuer )	a issuer	EMPTY
349	133	3	-1	0	-1	}	EMPTY	EMPTY
349	135	1	0	0	-1	unsigned long x509 _ issuer _ name _ hash ( x509 * x )	x	EMPTY
349	136	2	-1	0	-1	{	EMPTY	EMPTY
349	137	2	-1	0	-1	return ( x509 _ name _ hash ( x -> cert _ info -> issuer ) )	x issuer	EMPTY
349	138	3	-1	0	-1	}	EMPTY	EMPTY
349	140	1	0	0	-1	unsigned long x509 _ issuer _ name _ hash _ old ( x509 * x )	x	EMPTY
349	141	2	-1	0	-1	{	EMPTY	EMPTY
349	142	2	-1	0	-1	return ( x509 _ name _ hash _ old ( x -> cert _ info -> issuer ) )	x issuer	EMPTY
349	143	3	-1	0	-1	}	EMPTY	EMPTY
349	145	1	0	0	-1	x509 _ name * x509 _ get _ subject _ name ( x509 * a )	a	EMPTY
349	146	2	-1	0	-1	{	EMPTY	EMPTY
349	147	2	-1	0	-1	return ( a -> cert _ info -> subject )	a	EMPTY
349	148	3	-1	0	-1	}	EMPTY	EMPTY
349	150	1	0	0	-1	asn1 _ integer * x509 _ get _ serialnumber ( x509 * a )	a	EMPTY
349	151	2	-1	0	-1	{	EMPTY	EMPTY
349	152	2	-1	0	-1	return ( a -> cert _ info -> serialnumber )	a serialnumber	EMPTY
349	153	3	-1	0	-1	}	EMPTY	EMPTY
349	155	1	0	0	-1	unsigned long x509 _ subject _ name _ hash ( x509 * x )	x	EMPTY
349	156	2	-1	0	-1	{	EMPTY	EMPTY
349	157	2	-1	0	-1	return ( x509 _ name _ hash ( x -> cert _ info -> subject ) )	x	EMPTY
349	158	3	-1	0	-1	}	EMPTY	EMPTY
349	160	1	0	0	-1	unsigned long x509 _ subject _ name _ hash _ old ( x509 * x )	x	EMPTY
349	161	2	-1	0	-1	{	EMPTY	EMPTY
349	162	2	-1	0	-1	return ( x509 _ name _ hash _ old ( x -> cert _ info -> subject ) )	x	EMPTY
349	163	3	-1	0	-1	}	EMPTY	EMPTY
349	174	1	0	0	-1	int x509 _ cmp ( const x509 * a  const x509 * b )	x509 _ cmp a b	EMPTY
349	175	2	-1	0	-1	{	EMPTY	EMPTY
349	176	3	-1	0	-1	int rv ;	EMPTY	EMPTY
349	178	1	0	0	-1	x509 _ check _ purpose ( ( x509 * ) a , - 1 , 0 )	a	EMPTY
349	179	3	-1	0	-1	x509 _ check _ purpose ( ( x509 * ) b , - 1 , 0 )	b	EMPTY
349	181	1	0	0	-1	rv = memcmp ( a -> sha1 _ hash , b -> sha1 _ hash , sha _ digest _ length )	a b	EMPTY
349	182	2	-1	0	-1	if ( rv )	EMPTY	EMPTY
349	183	3	-1	0	-1	return rv	EMPTY	EMPTY
349	185	1	0	0	-1	if ( ! a -> cert _ info -> enc . modified && ! b -> cert _ info -> enc . modified )	a enc modified b enc modified	EMPTY
349	186	2	-1	0	-1	{	EMPTY	EMPTY
349	187	2	-1	0	-1	rv = ( int ) ( a -> cert _ info -> enc . len - b -> cert _ info -> enc . len ) ;	a enc len b enc len	EMPTY
349	188	2	-1	0	-1	if ( rv )	EMPTY	EMPTY
349	189	2	-1	0	-1	return rv ;	EMPTY	EMPTY
349	190	2	-1	0	-1	return memcmp ( a -> cert _ info -> enc . enc , b -> cert _ info -> enc . enc ,	a enc enc b enc enc	EMPTY
349	191	2	-1	0	-1	a -> cert _ info -> enc . len ) ;	a enc len	EMPTY
349	192	2	-1	0	-1	}	EMPTY	EMPTY
349	193	2	-1	0	-1	return rv	EMPTY	EMPTY
349	194	3	-1	0	-1	}	EMPTY	EMPTY
349	197	1	0	0	-1	int x509 _ name _ cmp ( const x509 _ name * a  const x509 _ name * b )	a b	EMPTY
349	198	2	-1	0	-1	{	EMPTY	EMPTY
349	199	3	-1	0	-1	int ret ;	ret	EMPTY
349	203	1	1	1	1	if ( ! a -> canon _ enc || a -> modified )	a canon _ enc a modified	EMPTY
349	204	2	-1	0	-1	{	EMPTY	EMPTY
349	205	2	-1	0	-1	ret = i2d _ x509 _ name ( ( x509 _ name * ) a , null ) ;	ret a	EMPTY
349	206	2	-1	0	-1	if ( ret < 0 )	ret	EMPTY
349	207	2	-1	0	-1	return - 2 ;	EMPTY	EMPTY
349	208	3	-1	0	-1	}	EMPTY	EMPTY
349	210	1	0	0	0	if ( ! b -> canon _ enc || b -> modified )	b canon _ enc b modified	EMPTY
349	211	2	-1	0	-1	{	EMPTY	EMPTY
349	212	2	-1	0	-1	ret = i2d _ x509 _ name ( ( x509 _ name * ) b , null ) ;	ret b	EMPTY
349	213	2	-1	0	-1	if ( ret < 0 )	ret	EMPTY
349	214	2	-1	0	-1	return - 2 ;	EMPTY	EMPTY
349	215	3	-1	0	-1	}	EMPTY	EMPTY
349	217	1	0	0	-1	ret = a -> canon _ enclen - b -> canon _ enclen	ret a b	EMPTY
349	219	1	0	0	0	if ( ret )	ret	EMPTY
349	220	3	-1	0	-1	return ret	ret	EMPTY
349	222	1	0	0	0	return memcmp ( a -> canon _ enc , b -> canon _ enc , a -> canon _ enclen )	a canon _ enc b canon _ enc a	EMPTY
349	224	1	0	0	-1	}	EMPTY	EMPTY
349	226	1	0	0	-1	unsigned long x509 _ name _ hash ( x509 _ name * x )	x	EMPTY
349	227	2	-1	0	-1	{	EMPTY	EMPTY
349	228	2	-1	0	-1	unsigned long ret = numconst ;	ret	EMPTY
349	229	3	-1	0	-1	unsigned char md [ sha _ digest _ length ] ;	md	EMPTY
349	232	1	0	0	-1	i2d _ x509 _ name ( x , null )	x	EMPTY
349	233	2	-1	0	-1	if ( ! evp _ digest ( x -> canon _ enc , x -> canon _ enclen , md , null , evp _ sha1 ( ) ,	evp _ digest x canon _ enc x md	EMPTY
349	234	2	-1	0	-1	null ) )	EMPTY	EMPTY
349	235	3	-1	0	-1	return 0	EMPTY	EMPTY
349	237	1	0	0	-1	ret = ( ( ( unsigned long ) md [ 0 ] ) | ( ( unsigned long ) md [ 1 ] << 8l ) |	ret md md	EMPTY
349	238	2	-1	0	-1	( ( unsigned long ) md [ 2 ] << 16l ) | ( ( unsigned long ) md [ 3 ] << 24l )	md md	EMPTY
349	239	2	-1	0	-1	) & 0xffffffffl	EMPTY	EMPTY
349	240	2	-1	0	-1	return ( ret )	ret	EMPTY
349	241	3	-1	0	-1	}	EMPTY	EMPTY
349	247	1	1	1	-1	unsigned long x509 _ name _ hash _ old ( x509 _ name * x )	x	EMPTY
349	248	2	-1	0	-1	{	EMPTY	EMPTY
349	249	2	-1	0	-1	evp _ md _ ctx md _ ctx ;	EMPTY	EMPTY
349	250	2	-1	0	-1	unsigned long ret = 0 ;	ret	EMPTY
349	251	3	-1	0	-1	unsigned char md [ 16 ] ;	md	EMPTY
349	254	1	0	0	-1	i2d _ x509 _ name ( x , null )	x	EMPTY
349	255	3	-1	0	-1	evp _ md _ ctx _ init ( & md _ ctx )	evp _ md _ ctx _ init	EMPTY
349	257	1	0	0	-1	if ( evp _ digestinit _ ex ( & md _ ctx , evp _ md5 ( ) , null )	evp _ digestinit _ ex	EMPTY
349	258	2	-1	0	-1	&& evp _ digestupdate ( & md _ ctx , x -> bytes -> data , x -> bytes -> length )	evp _ digestupdate x data x length	EMPTY
349	259	2	-1	0	-1	&& evp _ digestfinal _ ex ( & md _ ctx , md , null ) )	evp _ digestfinal _ ex md	EMPTY
349	260	2	-1	0	-1	ret = ( ( ( unsigned long ) md [ 0 ] ) | ( ( unsigned long ) md [ 1 ] << 8l ) |	ret md md	EMPTY
349	261	2	-1	0	-1	( ( unsigned long ) md [ 2 ] << 16l ) | ( ( unsigned long ) md [ 3 ] << 24l )	md md	EMPTY
349	262	2	-1	0	-1	) & 0xffffffffl	EMPTY	EMPTY
349	263	3	-1	0	-1	evp _ md _ ctx _ cleanup ( & md _ ctx )	evp _ md _ ctx _ cleanup	EMPTY
349	265	1	0	0	0	return ( ret )	ret	EMPTY
349	266	3	-1	0	-1	}	EMPTY	EMPTY
349	269	1	0	0	-1	x509 * x509 _ find _ by _ issuer _ and _ serial ( stack _ of ( x509 ) * sk  x509 _ name * name	x509 _ find _ by _ issuer _ and _ serial sk name	EMPTY
349	270	2	-1	0	-1	asn1 _ integer * serial )	EMPTY	EMPTY
349	271	2	-1	0	-1	{	EMPTY	EMPTY
349	272	2	-1	0	-1	size _ t i ;	i	EMPTY
349	273	2	-1	0	-1	x509 _ cinf cinf ;	EMPTY	EMPTY
349	274	3	-1	0	-1	x509 x , * x509 = null ;	x	EMPTY
349	276	1	0	0	0	return null ;	EMPTY	EMPTY
349	278	1	0	0	-1	x . cert _ info = & cinf	x	EMPTY
349	279	2	-1	0	-1	cinf . serialnumber = serial	serialnumber	EMPTY
349	280	3	-1	0	-1	cinf . issuer = name	issuer name	EMPTY
349	282	1	0	0	0	for ( i = 0 ; i < sk _ x509 _ num ( sk ) ; i ++ )	i i sk i	EMPTY
349	283	2	-1	0	-1	{	EMPTY	EMPTY
349	284	2	-1	0	-1	x509 = sk _ x509 _ value ( sk , i ) ;	sk i	EMPTY
349	285	2	-1	0	-1	if ( x509 _ issuer _ and _ serial _ cmp ( x509 , & x ) == 0 )	x	EMPTY
349	286	2	-1	0	-1	return ( x509 ) ;	EMPTY	EMPTY
349	287	2	-1	0	-1	}	EMPTY	EMPTY
349	288	2	-1	0	-1	return ( null )	EMPTY	EMPTY
349	289	3	-1	0	-1	}	EMPTY	EMPTY
349	291	1	0	0	-1	x509 * x509 _ find _ by _ subject ( stack _ of ( x509 ) * sk  x509 _ name * name )	sk name	EMPTY
349	292	2	-1	0	-1	{	EMPTY	EMPTY
349	293	2	-1	0	-1	x509 * x509 ;	EMPTY	EMPTY
349	294	3	-1	0	-1	size _ t i ;	i	EMPTY
349	296	1	0	0	0	for ( i = 0 ; i < sk _ x509 _ num ( sk ) ; i ++ )	i i sk i	EMPTY
349	297	2	-1	0	-1	{	EMPTY	EMPTY
349	298	2	-1	0	-1	x509 = sk _ x509 _ value ( sk , i ) ;	sk i	EMPTY
349	299	2	-1	0	-1	if ( x509 _ name _ cmp ( x509 _ get _ subject _ name ( x509 ) , name ) == 0 )	name	EMPTY
349	300	2	-1	0	-1	return ( x509 ) ;	EMPTY	EMPTY
349	301	2	-1	0	-1	}	EMPTY	EMPTY
349	302	2	-1	0	-1	return ( null )	EMPTY	EMPTY
349	303	3	-1	0	-1	}	EMPTY	EMPTY
349	305	1	0	0	-1	evp _ pkey * x509 _ get _ pubkey ( x509 * x )	x	EMPTY
349	306	2	-1	0	-1	{	EMPTY	EMPTY
349	307	2	-1	0	-1	if ( ( x == null ) || ( x -> cert _ info == null ) )	x x	EMPTY
349	308	2	-1	0	-1	return ( null )	EMPTY	EMPTY
349	309	2	-1	0	-1	return ( x509 _ pubkey _ get ( x -> cert _ info -> key ) )	x key	EMPTY
349	310	3	-1	0	-1	}	EMPTY	EMPTY
349	312	1	0	0	-1	asn1 _ bit _ string * x509 _ get0 _ pubkey _ bitstr ( const x509 * x )	x	EMPTY
349	313	2	-1	0	-1	{	EMPTY	EMPTY
349	314	2	-1	0	-1	return null ;	EMPTY	EMPTY
349	315	2	-1	0	-1	return x -> cert _ info -> key -> public _ key	x key	EMPTY
349	316	3	-1	0	-1	}	EMPTY	EMPTY
349	319	1	0	0	-1	int x509 _ check _ private _ key ( x509 * x  evp _ pkey * k )	x	EMPTY
349	320	2	-1	0	-1	{	EMPTY	EMPTY
349	321	2	-1	0	-1	evp _ pkey * xk ;	EMPTY	EMPTY
349	322	3	-1	0	-1	int ret ;	ret	EMPTY
349	324	1	0	0	-1	xk = x509 _ get _ pubkey ( x )	x	EMPTY
349	326	1	0	0	0	if ( xk )	EMPTY	EMPTY
349	327	2	-1	0	-1	ret = evp _ pkey _ cmp ( xk , k ) ;	ret evp _ pkey _ cmp	EMPTY
349	328	2	-1	0	-1	else	EMPTY	EMPTY
349	329	3	-1	0	-1	ret = - 2	ret	EMPTY
349	331	1	0	0	0	switch ( ret )	ret	EMPTY
349	332	2	-1	0	-1	{	EMPTY	EMPTY
349	333	2	-1	0	-1	case 1 :	EMPTY	EMPTY
349	334	2	-1	0	-1	break ;	EMPTY	EMPTY
349	335	2	-1	0	-1	case 0 :	EMPTY	EMPTY
349	336	2	-1	0	-1	openssl _ put _ error ( x509 , x509 _ r _ key _ values _ mismatch ) ;	EMPTY	EMPTY
349	337	2	-1	0	-1	break ;	EMPTY	EMPTY
349	338	2	-1	0	-1	case - 1 :	EMPTY	EMPTY
349	339	2	-1	0	-1	openssl _ put _ error ( x509 , x509 _ r _ key _ type _ mismatch ) ;	EMPTY	EMPTY
349	340	2	-1	0	-1	break ;	EMPTY	EMPTY
349	341	2	-1	0	-1	case - 2 :	EMPTY	EMPTY
349	342	2	-1	0	-1	openssl _ put _ error ( x509 , x509 _ r _ unknown _ key _ type ) ;	EMPTY	EMPTY
349	343	2	-1	0	-1	}	EMPTY	EMPTY
349	344	2	-1	0	-1	if ( xk )	EMPTY	EMPTY
349	345	2	-1	0	-1	evp _ pkey _ free ( xk )	evp _ pkey _ free	EMPTY
349	346	2	-1	0	-1	if ( ret > 0 )	ret	EMPTY
349	347	2	-1	0	-1	return 1	EMPTY	EMPTY
349	348	2	-1	0	-1	return 0	EMPTY	EMPTY
349	349	3	-1	0	-1	}	EMPTY	EMPTY
349	358	1	1	1	-1	static int check _ suite _ b ( evp _ pkey * pkey  int sign _ nid  unsigned long * pflags )	pkey sign _ nid	EMPTY
349	359	2	-1	0	-1	{	EMPTY	EMPTY
349	360	2	-1	0	-1	const ec _ group * grp = null ;	EMPTY	EMPTY
349	361	2	-1	0	-1	int curve _ nid ;	EMPTY	EMPTY
349	362	2	-1	0	-1	if ( pkey && pkey -> type == evp _ pkey _ ec )	pkey pkey type	EMPTY
349	363	2	-1	0	-1	grp = ec _ key _ get0 _ group ( pkey -> pkey . ec )	ec _ key _ get0 _ group pkey pkey	EMPTY
349	364	2	-1	0	-1	if ( ! grp )	EMPTY	EMPTY
349	365	2	-1	0	-1	return x509 _ v _ err _ suite _ b _ invalid _ algorithm ;	EMPTY	EMPTY
349	366	3	-1	0	-1	curve _ nid = ec _ group _ get _ curve _ name ( grp )	ec _ group _ get _ curve _ name	EMPTY
349	368	1	1	0	-1	if ( curve _ nid == nid _ secp384r1 )	EMPTY	EMPTY
349	369	2	-1	0	-1	{	EMPTY	EMPTY
349	373	2	-1	1	-1	if ( sign _ nid != - numconst && sign _ nid != nid _ ecdsa _ with _ sha384 )	sign _ nid sign _ nid	EMPTY
349	374	2	-1	0	-1	return x509 _ v _ err _ suite _ b _ invalid _ signature _ algorithm ;	EMPTY	EMPTY
349	375	2	-1	0	-1	if ( ! ( * pflags & x509 _ v _ flag _ suiteb _ 192 _ los ) )	EMPTY	EMPTY
349	376	3	-1	0	-1	return x509 _ v _ err _ suite _ b _ los _ not _ allowed ;	EMPTY	EMPTY
349	379	1	1	1	-1	}	EMPTY	EMPTY
349	380	2	-1	0	-1	else if ( curve _ nid == nid _ x9 _ 62 _ prime256v1 )	EMPTY	EMPTY
349	381	2	-1	0	-1	{	EMPTY	EMPTY
349	382	2	-1	0	-1	if ( sign _ nid != - numconst && sign _ nid != nid _ ecdsa _ with _ sha256 )	sign _ nid sign _ nid	EMPTY
349	383	2	-1	0	-1	return x509 _ v _ err _ suite _ b _ invalid _ signature _ algorithm ;	EMPTY	EMPTY
349	384	2	-1	0	-1	if ( ! ( * pflags & x509 _ v _ flag _ suiteb _ 128 _ los _ only ) )	EMPTY	EMPTY
349	385	2	-1	0	-1	return x509 _ v _ err _ suite _ b _ los _ not _ allowed ;	EMPTY	EMPTY
349	386	2	-1	0	-1	}	EMPTY	EMPTY
349	387	2	-1	0	-1	else	EMPTY	EMPTY
349	388	3	-1	0	-1	return x509 _ v _ err _ suite _ b _ invalid _ curve ;	EMPTY	EMPTY
349	390	1	0	0	0	return x509 _ v _ ok ;	EMPTY	EMPTY
349	391	3	-1	0	-1	}	EMPTY	EMPTY
349	393	1	0	0	-1	int x509 _ chain _ check _ suiteb ( int * perror _ depth  x509 * x  stack _ of ( x509 ) * chain	x chain	EMPTY
349	394	2	-1	0	-1	unsigned long flags )	flags	EMPTY
349	395	2	-1	0	-1	{	EMPTY	EMPTY
349	396	2	-1	0	-1	int rv  sign _ nid ;	sign _ nid	EMPTY
349	397	2	-1	0	-1	size _ t i ;	i	EMPTY
349	398	2	-1	0	-1	evp _ pkey * pk = null ;	EMPTY	EMPTY
349	399	2	-1	0	-1	unsigned long tflags ;	EMPTY	EMPTY
349	400	2	-1	0	-1	if ( ! ( flags & x509 _ v _ flag _ suiteb _ 128 _ los ) )	flags	EMPTY
349	401	2	-1	0	-1	return x509 _ v _ ok ;	EMPTY	EMPTY
349	402	3	-1	0	-1	tflags = flags ;	flags	EMPTY
349	404	1	0	0	-1	if ( x == null )	x	EMPTY
349	405	2	-1	0	-1	{	EMPTY	EMPTY
349	406	2	-1	0	-1	x = sk _ x509 _ value ( chain , 0 ) ;	x chain	EMPTY
349	407	2	-1	0	-1	i = 1 ;	i	EMPTY
349	408	2	-1	0	-1	}	EMPTY	EMPTY
349	409	2	-1	0	-1	else	EMPTY	EMPTY
349	410	3	-1	0	-1	i = 0	i	EMPTY
349	412	1	1	0	1	if ( x509 _ get _ version ( x ) != numconst )	x	EMPTY
349	413	2	-1	0	-1	{	EMPTY	EMPTY
349	414	2	-1	0	-1	rv = x509 _ v _ err _ suite _ b _ invalid _ version ;	EMPTY	EMPTY
349	416	2	-1	1	-1	i = 0	i	EMPTY
349	417	2	-1	0	-1	goto end	EMPTY	EMPTY
349	418	3	-1	0	-1	}	EMPTY	EMPTY
349	420	1	1	0	-1	pk = x509 _ get _ pubkey ( x ) ;	x	EMPTY
349	422	2	-1	1	-1	rv = check _ suite _ b ( pk , - 1 , & tflags )	EMPTY	EMPTY
349	423	2	-1	0	-1	if ( rv != x509 _ v _ ok )	EMPTY	EMPTY
349	424	2	-1	0	-1	{	EMPTY	EMPTY
349	426	2	-1	1	-1	i = 0	i	EMPTY
349	427	2	-1	0	-1	goto end	EMPTY	EMPTY
349	428	2	-1	0	-1	}	EMPTY	EMPTY
349	429	2	-1	0	-1	for ( ; i < sk _ x509 _ num ( chain ) ; i ++ )	i chain i	EMPTY
349	430	2	-1	0	-1	{	EMPTY	EMPTY
349	431	2	-1	0	-1	sign _ nid = x509 _ get _ signature _ nid ( x ) ;	sign _ nid x	EMPTY
349	432	2	-1	0	-1	x = sk _ x509 _ value ( chain  i ) ;	x chain i	EMPTY
349	433	2	-1	0	-1	if ( x509 _ get _ version ( x ) != numconst )	x	EMPTY
349	434	2	-1	0	-1	{	EMPTY	EMPTY
349	435	2	-1	0	-1	rv = x509 _ v _ err _ suite _ b _ invalid _ version ;	EMPTY	EMPTY
349	436	2	-1	0	-1	goto end ;	EMPTY	EMPTY
349	437	2	-1	0	-1	}	EMPTY	EMPTY
349	438	2	-1	0	-1	evp _ pkey _ free ( pk ) ;	evp _ pkey _ free	EMPTY
349	439	2	-1	0	-1	pk = x509 _ get _ pubkey ( x ) ;	x	EMPTY
349	440	2	-1	0	-1	rv = check _ suite _ b ( pk  sign _ nid  & tflags ) ;	sign _ nid	EMPTY
349	441	2	-1	0	-1	if ( rv != x509 _ v _ ok )	EMPTY	EMPTY
349	442	2	-1	0	-1	goto end ;	EMPTY	EMPTY
349	443	3	-1	0	-1	}	EMPTY	EMPTY
349	446	1	1	1	-1	rv = check _ suite _ b ( pk , x509 _ get _ signature _ nid ( x ) , & tflags )	x	EMPTY
349	447	2	-1	0	-1	end :	EMPTY	EMPTY
349	448	2	-1	0	-1	if ( pk )	EMPTY	EMPTY
349	449	2	-1	0	-1	evp _ pkey _ free ( pk )	evp _ pkey _ free	EMPTY
349	450	2	-1	0	-1	if ( rv != x509 _ v _ ok )	EMPTY	EMPTY
349	451	2	-1	0	-1	{	EMPTY	EMPTY
349	453	2	-1	1	-1	if ( ( rv == x509 _ v _ err _ suite _ b _ invalid _ signature _ algorithm	EMPTY	EMPTY
349	454	2	-1	0	-1	|| rv == x509 _ v _ err _ suite _ b _ los _ not _ allowed ) && i )	i	EMPTY
349	455	2	-1	0	-1	i --	i	EMPTY
349	459	2	-1	1	-1	if ( rv == x509 _ v _ err _ suite _ b _ los _ not _ allowed && flags != tflags )	flags	EMPTY
349	460	2	-1	0	-1	rv = x509 _ v _ err _ suite _ b _ cannot _ sign _ p _ 384 _ with _ p _ 256 ;	EMPTY	EMPTY
349	461	2	-1	0	-1	if ( perror _ depth )	EMPTY	EMPTY
349	462	2	-1	0	-1	* perror _ depth = i	i	EMPTY
349	463	2	-1	0	-1	}	EMPTY	EMPTY
349	464	2	-1	0	-1	return rv ;	EMPTY	EMPTY
349	465	3	-1	0	-1	}	EMPTY	EMPTY
349	467	1	0	0	-1	int x509 _ crl _ check _ suiteb ( x509 _ crl * crl  evp _ pkey * pk  unsigned long flags )	crl flags	EMPTY
349	468	2	-1	0	-1	{	EMPTY	EMPTY
349	469	2	-1	0	-1	int sign _ nid ;	sign _ nid	EMPTY
349	470	2	-1	0	-1	if ( ! ( flags & x509 _ v _ flag _ suiteb _ 128 _ los ) )	flags	EMPTY
349	471	2	-1	0	-1	return x509 _ v _ ok ;	EMPTY	EMPTY
349	472	2	-1	0	-1	sign _ nid = obj _ obj2nid ( crl -> crl -> sig _ alg -> algorithm ) ;	sign _ nid obj _ obj2nid crl crl	EMPTY
349	473	2	-1	0	-1	return check _ suite _ b ( pk  sign _ nid  & flags ) ;	sign _ nid flags	EMPTY
349	474	3	-1	0	-1	}	EMPTY	EMPTY
349	480	1	0	0	-1	stack _ of ( x509 ) * x509 _ chain _ up _ ref ( stack _ of ( x509 ) * chain )	x509 _ chain _ up _ ref chain	EMPTY
349	481	2	-1	0	-1	{	EMPTY	EMPTY
349	482	2	-1	0	-1	stack _ of ( x509 ) * ret ;	ret	EMPTY
349	483	2	-1	0	-1	size _ t i ;	i	EMPTY
349	484	2	-1	0	-1	ret = sk _ x509 _ dup ( chain ) ;	ret chain	EMPTY
349	485	2	-1	0	-1	for ( i = 0 ; i < sk _ x509 _ num ( ret ) ; i ++ )	i i ret i	EMPTY
349	486	2	-1	0	-1	{	EMPTY	EMPTY
349	487	2	-1	0	-1	x509 _ up _ ref ( sk _ x509 _ value ( ret , i ) ) ;	x509 _ up _ ref ret i	EMPTY
349	488	2	-1	0	-1	}	EMPTY	EMPTY
349	489	2	-1	0	-1	return ret	ret	EMPTY
349	490	3	-1	0	-1	}	EMPTY	EMPTY
382	65	1	0	0	-1	static int traverse _ string ( const unsigned char * p  int len  int inform	p len	EMPTY
382	66	2	-1	0	-1	int ( * rfunc ) ( unsigned long value  void * in )  void * arg )	value in arg	EMPTY
382	67	2	-1	0	-1	static int in _ utf8 ( unsigned long value  void * arg )	value arg	EMPTY
382	68	2	-1	0	-1	static int out _ utf8 ( unsigned long value  void * arg )	value arg	EMPTY
382	69	2	-1	0	-1	static int type _ str ( unsigned long value  void * arg )	value arg	EMPTY
382	70	2	-1	0	-1	static int cpy _ asc ( unsigned long value  void * arg )	value arg	EMPTY
382	71	2	-1	0	-1	static int cpy _ bmp ( unsigned long value  void * arg )	value arg	EMPTY
382	72	2	-1	0	-1	static int cpy _ univ ( unsigned long value  void * arg )	value arg	EMPTY
382	73	2	-1	0	-1	static int cpy _ utf8 ( unsigned long value  void * arg )	value arg	EMPTY
382	74	3	-1	0	-1	static int is _ printable ( unsigned long value ) ;	is _ printable value	EMPTY
382	84	1	1	1	-1	int asn1 _ mbstring _ copy ( asn1 _ string * * out  const unsigned char * in  int len	out in len	EMPTY
382	85	2	-1	0	-1	int inform  unsigned long mask )	EMPTY	EMPTY
382	86	2	-1	0	-1	{	EMPTY	EMPTY
382	87	2	-1	0	-1	return asn1 _ mbstring _ ncopy ( out , in , len , inform , mask , 0 , 0 )	out in len	EMPTY
382	88	3	-1	0	-1	}	EMPTY	EMPTY
382	90	1	0	0	-1	int asn1 _ mbstring _ ncopy ( asn1 _ string * * out  const unsigned char * in  int len	out in len	EMPTY
382	91	2	-1	0	-1	int inform  unsigned long mask  long	EMPTY	EMPTY
382	92	2	-1	0	-1	long minsize  long maxsize )	EMPTY	EMPTY
382	93	2	-1	0	-1	{	EMPTY	EMPTY
382	94	2	-1	0	-1	int str _ type ;	EMPTY	EMPTY
382	95	2	-1	0	-1	int ret ;	ret	EMPTY
382	96	2	-1	0	-1	char free _ out ;	EMPTY	EMPTY
382	97	2	-1	0	-1	int outform , outlen = 0 ;	EMPTY	EMPTY
382	98	2	-1	0	-1	asn1 _ string * dest ;	dest	EMPTY
382	99	2	-1	0	-1	unsigned char * p ;	p	EMPTY
382	100	2	-1	0	-1	int nchar ;	EMPTY	EMPTY
382	101	2	-1	0	-1	char strbuf [ 32 ] ;	EMPTY	EMPTY
382	102	2	-1	0	-1	int ( * cpyfunc ) ( unsigned long , void * ) = null ;	EMPTY	EMPTY
382	103	2	-1	0	-1	if ( len == - 1 ) len = strlen ( ( const char * ) in )	len len in	EMPTY
382	104	3	-1	0	-1	if ( ! mask ) mask = dirstring _ type ;	EMPTY	EMPTY
382	107	1	0	0	-1	switch ( inform ) {	EMPTY	EMPTY
382	109	1	0	0	-1	case mbstring _ bmp :	EMPTY	EMPTY
382	110	2	-1	0	-1	if ( len & 1 ) {	len	EMPTY
382	111	2	-1	0	-1	openssl _ put _ error ( asn1 , asn1 _ r _ invalid _ bmpstring _ length ) ;	EMPTY	EMPTY
382	112	2	-1	0	-1	return - 1 ;	EMPTY	EMPTY
382	113	2	-1	0	-1	}	EMPTY	EMPTY
382	114	2	-1	0	-1	nchar = len >> 1	len	EMPTY
382	115	3	-1	0	-1	break	EMPTY	EMPTY
382	117	1	0	0	-1	case mbstring _ univ :	EMPTY	EMPTY
382	118	2	-1	0	-1	if ( len & 3 ) {	len	EMPTY
382	119	2	-1	0	-1	openssl _ put _ error ( asn1 , asn1 _ r _ invalid _ universalstring _ length ) ;	EMPTY	EMPTY
382	120	2	-1	0	-1	return - 1 ;	EMPTY	EMPTY
382	121	2	-1	0	-1	}	EMPTY	EMPTY
382	122	2	-1	0	-1	nchar = len >> 2	len	EMPTY
382	123	3	-1	0	-1	break	EMPTY	EMPTY
382	125	1	1	0	-1	case mbstring _ utf8 :	EMPTY	EMPTY
382	126	2	-1	0	-1	nchar = 0	EMPTY	EMPTY
382	128	2	-1	1	-1	ret = traverse _ string ( in , len , mbstring _ utf8 , in _ utf8 , & nchar )	ret in len	EMPTY
382	129	2	-1	0	-1	if ( ret < 0 ) {	ret	EMPTY
382	130	2	-1	0	-1	openssl _ put _ error ( asn1 , asn1 _ r _ invalid _ utf8string ) ;	EMPTY	EMPTY
382	131	2	-1	0	-1	return - 1 ;	EMPTY	EMPTY
382	132	2	-1	0	-1	}	EMPTY	EMPTY
382	133	3	-1	0	-1	break	EMPTY	EMPTY
382	135	1	0	0	-1	case mbstring _ asc :	EMPTY	EMPTY
382	136	2	-1	0	-1	nchar = len	len	EMPTY
382	137	3	-1	0	-1	break	EMPTY	EMPTY
382	139	1	0	0	-1	default :	EMPTY	EMPTY
382	140	2	-1	0	-1	openssl _ put _ error ( asn1  asn1 _ r _ unknown _ format ) ;	EMPTY	EMPTY
382	141	2	-1	0	-1	return - 1	EMPTY	EMPTY
382	142	3	-1	0	-1	}	EMPTY	EMPTY
382	144	1	0	0	0	if ( ( minsize > numconst ) && ( nchar < minsize ) ) {	EMPTY	EMPTY
382	145	2	-1	0	-1	openssl _ put _ error ( asn1  asn1 _ r _ string _ too _ short ) ;	EMPTY	EMPTY
382	146	2	-1	0	-1	bio _ snprintf ( strbuf  sizeof strbuf  strlit  minsize ) ;	EMPTY	EMPTY
382	147	2	-1	0	-1	err _ add _ error _ data ( numconst  strlit  strbuf ) ;	err _ add _ error _ data	EMPTY
382	148	2	-1	0	-1	return - numconst ;	EMPTY	EMPTY
382	149	3	-1	0	-1	}	EMPTY	EMPTY
382	151	1	0	0	0	if ( ( maxsize > numconst ) && ( nchar > maxsize ) ) {	EMPTY	EMPTY
382	152	2	-1	0	-1	openssl _ put _ error ( asn1  asn1 _ r _ string _ too _ long ) ;	EMPTY	EMPTY
382	153	2	-1	0	-1	bio _ snprintf ( strbuf  sizeof strbuf  strlit  maxsize ) ;	EMPTY	EMPTY
382	154	2	-1	0	-1	err _ add _ error _ data ( numconst  strlit  strbuf ) ;	err _ add _ error _ data	EMPTY
382	155	2	-1	0	-1	return - numconst ;	EMPTY	EMPTY
382	156	3	-1	0	-1	}	EMPTY	EMPTY
382	159	1	0	0	-1	if ( traverse _ string ( in , len , inform , type _ str , & mask ) < 0 ) {	in len	EMPTY
382	160	2	-1	0	-1	openssl _ put _ error ( asn1 , asn1 _ r _ illegal _ characters ) ;	EMPTY	EMPTY
382	161	2	-1	0	-1	return - 1 ;	EMPTY	EMPTY
382	162	3	-1	0	-1	}	EMPTY	EMPTY
382	166	1	1	1	1	outform = mbstring _ asc ;	EMPTY	EMPTY
382	167	2	-1	0	-1	if ( mask & b _ asn1 _ printablestring ) str _ type = v _ asn1 _ printablestring ;	EMPTY	EMPTY
382	168	2	-1	0	-1	else if ( mask & b _ asn1 _ ia5string ) str _ type = v _ asn1 _ ia5string ;	EMPTY	EMPTY
382	169	2	-1	0	-1	else if ( mask & b _ asn1 _ t61string ) str _ type = v _ asn1 _ t61string ;	EMPTY	EMPTY
382	170	2	-1	0	-1	else if ( mask & b _ asn1 _ bmpstring ) {	EMPTY	EMPTY
382	171	2	-1	0	-1	str _ type = v _ asn1 _ bmpstring ;	EMPTY	EMPTY
382	172	2	-1	0	-1	outform = mbstring _ bmp ;	EMPTY	EMPTY
382	173	2	-1	0	-1	} else if ( mask & b _ asn1 _ universalstring ) {	EMPTY	EMPTY
382	174	2	-1	0	-1	str _ type = v _ asn1 _ universalstring ;	EMPTY	EMPTY
382	175	2	-1	0	-1	outform = mbstring _ univ ;	EMPTY	EMPTY
382	176	2	-1	0	-1	} else {	EMPTY	EMPTY
382	177	2	-1	0	-1	str _ type = v _ asn1 _ utf8string ;	EMPTY	EMPTY
382	178	2	-1	0	-1	outform = mbstring _ utf8 ;	EMPTY	EMPTY
382	179	2	-1	0	-1	}	EMPTY	EMPTY
382	180	2	-1	0	-1	if ( ! out ) return str _ type	out	EMPTY
382	181	2	-1	0	-1	if ( * out ) {	out	EMPTY
382	182	2	-1	0	-1	free _ out = 0 ;	EMPTY	EMPTY
382	183	2	-1	0	-1	dest = * out ;	dest out	EMPTY
382	184	2	-1	0	-1	if ( dest -> data ) {	dest data	EMPTY
382	185	2	-1	0	-1	dest -> length = 0 ;	dest length	EMPTY
382	186	2	-1	0	-1	openssl _ free ( dest -> data ) ;	dest data	EMPTY
382	187	2	-1	0	-1	dest -> data = null ;	dest data	EMPTY
382	188	2	-1	0	-1	}	EMPTY	EMPTY
382	189	2	-1	0	-1	dest -> type = str _ type ;	dest type	EMPTY
382	190	2	-1	0	-1	} else {	EMPTY	EMPTY
382	191	2	-1	0	-1	free _ out = 1 ;	EMPTY	EMPTY
382	192	2	-1	0	-1	dest = asn1 _ string _ type _ new ( str _ type ) ;	dest	EMPTY
382	193	2	-1	0	-1	if ( ! dest ) {	dest	EMPTY
382	194	2	-1	0	-1	openssl _ put _ error ( asn1 , err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
382	195	3	-1	0	-1	return - 1 ;	EMPTY	EMPTY
382	196	1	0	0	-1	}	EMPTY	EMPTY
382	197	2	-1	0	-1	* out = dest ;	out dest	EMPTY
382	198	3	-1	0	-1	}	EMPTY	EMPTY
382	200	1	0	0	-1	if ( inform == outform ) {	EMPTY	EMPTY
382	201	2	-1	0	-1	if ( ! asn1 _ string _ set ( dest , in , len ) ) {	asn1 _ string _ set dest in len	EMPTY
382	202	2	-1	0	-1	openssl _ put _ error ( asn1 , err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
382	203	2	-1	0	-1	return - 1 ;	EMPTY	EMPTY
382	204	2	-1	0	-1	}	EMPTY	EMPTY
382	205	2	-1	0	-1	return str _ type ;	EMPTY	EMPTY
382	206	3	-1	0	-1	}	EMPTY	EMPTY
382	209	1	1	1	1	switch ( outform ) {	EMPTY	EMPTY
382	210	2	-1	0	-1	case mbstring _ asc :	EMPTY	EMPTY
382	211	2	-1	0	-1	outlen = nchar ;	EMPTY	EMPTY
382	212	2	-1	0	-1	cpyfunc = cpy _ asc ;	EMPTY	EMPTY
382	213	3	-1	0	-1	break ;	EMPTY	EMPTY
382	215	1	0	0	-1	case mbstring _ bmp :	EMPTY	EMPTY
382	216	2	-1	0	-1	outlen = nchar << 1 ;	EMPTY	EMPTY
382	217	2	-1	0	-1	cpyfunc = cpy _ bmp ;	EMPTY	EMPTY
382	218	3	-1	0	-1	break ;	EMPTY	EMPTY
382	220	1	0	0	-1	case mbstring _ univ :	EMPTY	EMPTY
382	221	2	-1	0	-1	outlen = nchar << 2 ;	EMPTY	EMPTY
382	222	2	-1	0	-1	cpyfunc = cpy _ univ ;	EMPTY	EMPTY
382	223	3	-1	0	-1	break ;	EMPTY	EMPTY
382	225	1	0	0	-1	case mbstring _ utf8 :	EMPTY	EMPTY
382	226	2	-1	0	-1	outlen = 0 ;	EMPTY	EMPTY
382	227	2	-1	0	-1	traverse _ string ( in , len , inform , out _ utf8 , & outlen ) ;	in len	EMPTY
382	228	2	-1	0	-1	cpyfunc = cpy _ utf8 ;	EMPTY	EMPTY
382	229	2	-1	0	-1	break ;	EMPTY	EMPTY
382	230	2	-1	0	-1	}	EMPTY	EMPTY
382	231	2	-1	0	-1	if ( ! ( p = openssl _ malloc ( outlen + 1 ) ) ) {	p	EMPTY
382	232	2	-1	0	-1	if ( free _ out ) asn1 _ string _ free ( dest ) ;	dest	EMPTY
382	233	2	-1	0	-1	openssl _ put _ error ( asn1 , err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
382	234	2	-1	0	-1	return - 1 ;	EMPTY	EMPTY
382	235	2	-1	0	-1	}	EMPTY	EMPTY
382	236	2	-1	0	-1	dest -> length = outlen	dest length	EMPTY
382	237	2	-1	0	-1	dest -> data = p	dest data p	EMPTY
382	238	2	-1	0	-1	p [ outlen ] = 0	p	EMPTY
382	239	2	-1	0	-1	traverse _ string ( in , len , inform , cpyfunc , & p )	in len p	EMPTY
382	240	2	-1	0	-1	return str _ type	EMPTY	EMPTY
382	241	3	-1	0	-1	}	EMPTY	EMPTY
382	247	1	1	1	-1	static int traverse _ string ( const unsigned char * p  int len  int inform	p len	EMPTY
382	248	2	-1	0	-1	int ( * rfunc ) ( unsigned long value  void * in )  void * arg )	value in arg	EMPTY
382	249	2	-1	0	-1	{	EMPTY	EMPTY
382	250	2	-1	0	-1	unsigned long value ;	value	EMPTY
382	251	2	-1	0	-1	int ret ;	ret	EMPTY
382	252	2	-1	0	-1	while ( len ) {	len	EMPTY
382	253	2	-1	0	-1	if ( inform == mbstring _ asc ) {	EMPTY	EMPTY
382	254	2	-1	0	-1	value = * p ++ ;	value p	EMPTY
382	255	2	-1	0	-1	len -- ;	len	EMPTY
382	256	2	-1	0	-1	} else if ( inform == mbstring _ bmp ) {	EMPTY	EMPTY
382	257	2	-1	0	-1	value = * p ++ << 8 ;	value p	EMPTY
382	258	2	-1	0	-1	value |= * p ++ ;	value p	EMPTY
382	259	2	-1	0	-1	len -= 2 ;	len	EMPTY
382	260	2	-1	0	-1	} else if ( inform == mbstring _ univ ) {	EMPTY	EMPTY
382	261	2	-1	0	-1	value = ( ( unsigned long ) * p ++ ) << 24 ;	value p	EMPTY
382	262	2	-1	0	-1	value |= ( ( unsigned long ) * p ++ ) << 16 ;	value p	EMPTY
382	263	2	-1	0	-1	value |= * p ++ << 8 ;	value p	EMPTY
382	264	2	-1	0	-1	value |= * p ++ ;	value p	EMPTY
382	265	2	-1	0	-1	len -= 4 ;	len	EMPTY
382	266	2	-1	0	-1	} else {	EMPTY	EMPTY
382	267	2	-1	0	-1	ret = utf8 _ getc ( p , len , & value ) ;	ret p len value	EMPTY
382	268	2	-1	0	-1	if ( ret < 0 ) return - 1 ;	ret	EMPTY
382	269	2	-1	0	-1	len -= ret ;	len ret	EMPTY
382	270	2	-1	0	-1	p += ret ;	p ret	EMPTY
382	271	2	-1	0	-1	}	EMPTY	EMPTY
382	272	2	-1	0	-1	if ( rfunc ) {	EMPTY	EMPTY
382	273	2	-1	0	-1	ret = rfunc ( value , arg ) ;	ret value arg	EMPTY
382	274	2	-1	0	-1	if ( ret <= 0 ) return ret ;	ret ret	EMPTY
382	275	2	-1	0	-1	}	EMPTY	EMPTY
382	276	3	-1	0	-1	}	EMPTY	EMPTY
382	277	1	0	0	-1	return 1	EMPTY	EMPTY
382	278	3	-1	0	-1	}	EMPTY	EMPTY
382	284	1	1	1	-1	static int in _ utf8 ( unsigned long value  void * arg )	value arg	EMPTY
382	285	2	-1	0	-1	{	EMPTY	EMPTY
382	286	2	-1	0	-1	int * nchar ;	EMPTY	EMPTY
382	287	2	-1	0	-1	nchar = arg	arg	EMPTY
382	288	2	-1	0	-1	( * nchar ) ++	EMPTY	EMPTY
382	289	2	-1	0	-1	return 1	EMPTY	EMPTY
382	290	3	-1	0	-1	}	EMPTY	EMPTY
382	294	1	1	1	-1	static int out _ utf8 ( unsigned long value  void * arg )	value arg	EMPTY
382	295	2	-1	0	-1	{	EMPTY	EMPTY
382	296	2	-1	0	-1	int * outlen ;	EMPTY	EMPTY
382	297	2	-1	0	-1	outlen = arg	arg	EMPTY
382	298	2	-1	0	-1	* outlen += utf8 _ putc ( null , - 1 , value )	value	EMPTY
382	299	2	-1	0	-1	return 1	EMPTY	EMPTY
382	300	3	-1	0	-1	}	EMPTY	EMPTY
382	306	1	1	1	-1	static int type _ str ( unsigned long value  void * arg )	value arg	EMPTY
382	307	2	-1	0	-1	{	EMPTY	EMPTY
382	308	2	-1	0	-1	unsigned long types ;	EMPTY	EMPTY
382	309	2	-1	0	-1	types = * ( ( unsigned long * ) arg )	arg	EMPTY
382	310	2	-1	0	-1	if ( ( types & b _ asn1 _ printablestring ) && ! is _ printable ( value ) )	is _ printable value	EMPTY
382	311	2	-1	0	-1	types &= ~ b _ asn1 _ printablestring ;	EMPTY	EMPTY
382	312	2	-1	0	-1	if ( ( types & b _ asn1 _ ia5string ) && ( value > numconst ) )	value	EMPTY
382	313	2	-1	0	-1	types &= ~ b _ asn1 _ ia5string ;	EMPTY	EMPTY
382	314	2	-1	0	-1	if ( ( types & b _ asn1 _ t61string ) && ( value > numconst ) )	value	EMPTY
382	315	2	-1	0	-1	types &= ~ b _ asn1 _ t61string ;	EMPTY	EMPTY
382	316	2	-1	0	-1	if ( ( types & b _ asn1 _ bmpstring ) && ( value > numconst ) )	value	EMPTY
382	317	2	-1	0	-1	types &= ~ b _ asn1 _ bmpstring ;	EMPTY	EMPTY
382	318	2	-1	0	-1	if ( ! types ) return - 1	EMPTY	EMPTY
382	319	2	-1	0	-1	* ( ( unsigned long * ) arg ) = types	arg	EMPTY
382	320	2	-1	0	-1	return 1	EMPTY	EMPTY
382	321	3	-1	0	-1	}	EMPTY	EMPTY
382	325	1	1	1	-1	static int cpy _ asc ( unsigned long value  void * arg )	value arg	EMPTY
382	326	2	-1	0	-1	{	EMPTY	EMPTY
382	327	2	-1	0	-1	unsigned char * * p , * q ;	p q	EMPTY
382	328	2	-1	0	-1	p = arg	p arg	EMPTY
382	329	2	-1	0	-1	q = * p	q p	EMPTY
382	330	2	-1	0	-1	* q = ( unsigned char ) value	q value	EMPTY
382	331	2	-1	0	-1	( * p ) ++	p	EMPTY
382	332	2	-1	0	-1	return 1	EMPTY	EMPTY
382	333	3	-1	0	-1	}	EMPTY	EMPTY
382	337	1	1	1	-1	static int cpy _ bmp ( unsigned long value  void * arg )	value arg	EMPTY
382	338	2	-1	0	-1	{	EMPTY	EMPTY
382	339	2	-1	0	-1	unsigned char * * p , * q ;	p q	EMPTY
382	340	2	-1	0	-1	p = arg	p arg	EMPTY
382	341	2	-1	0	-1	q = * p	q p	EMPTY
382	342	2	-1	0	-1	* q ++ = ( unsigned char ) ( ( value >> 8 ) & 0xff )	q value	EMPTY
382	343	2	-1	0	-1	* q = ( unsigned char ) ( value & 0xff )	q value	EMPTY
382	344	2	-1	0	-1	* p += 2	p	EMPTY
382	345	2	-1	0	-1	return 1	EMPTY	EMPTY
382	346	3	-1	0	-1	}	EMPTY	EMPTY
382	350	1	1	1	-1	static int cpy _ univ ( unsigned long value  void * arg )	value arg	EMPTY
382	351	2	-1	0	-1	{	EMPTY	EMPTY
382	352	2	-1	0	-1	unsigned char * * p , * q ;	p q	EMPTY
382	353	2	-1	0	-1	p = arg	p arg	EMPTY
382	354	2	-1	0	-1	q = * p	q p	EMPTY
382	355	2	-1	0	-1	* q ++ = ( unsigned char ) ( ( value >> 24 ) & 0xff )	q value	EMPTY
382	356	2	-1	0	-1	* q ++ = ( unsigned char ) ( ( value >> 16 ) & 0xff )	q value	EMPTY
382	357	2	-1	0	-1	* q ++ = ( unsigned char ) ( ( value >> 8 ) & 0xff )	q value	EMPTY
382	358	2	-1	0	-1	* q = ( unsigned char ) ( value & 0xff )	q value	EMPTY
382	359	2	-1	0	-1	* p += 4	p	EMPTY
382	360	2	-1	0	-1	return 1	EMPTY	EMPTY
382	361	3	-1	0	-1	}	EMPTY	EMPTY
382	365	1	1	1	-1	static int cpy _ utf8 ( unsigned long value  void * arg )	value arg	EMPTY
382	366	2	-1	0	-1	{	EMPTY	EMPTY
382	367	2	-1	0	-1	unsigned char * * p ;	p	EMPTY
382	368	2	-1	0	-1	int ret ;	ret	EMPTY
382	369	2	-1	0	-1	p = arg	p arg	EMPTY
382	371	2	-1	1	-1	ret = utf8 _ putc ( * p , 0xff , value )	ret p value	EMPTY
382	372	2	-1	0	-1	* p += ret	p ret	EMPTY
382	373	2	-1	0	-1	return 1	EMPTY	EMPTY
382	374	3	-1	0	-1	}	EMPTY	EMPTY
382	377	1	0	0	-1	static int is _ printable ( unsigned long value )	is _ printable value	EMPTY
382	378	2	-1	0	-1	{	EMPTY	EMPTY
382	379	2	-1	0	-1	int ch ;	EMPTY	EMPTY
382	380	2	-1	0	-1	if ( value > 0x7f ) return 0	value	EMPTY
382	381	3	-1	0	-1	ch = ( int ) value	value	EMPTY
382	385	1	0	0	-1	if ( ( ch >= 'a' ) && ( ch <= 'z' ) ) return 1	EMPTY	EMPTY
382	386	2	-1	0	-1	if ( ( ch >= 'a' ) && ( ch <= 'z' ) ) return 1	EMPTY	EMPTY
382	387	2	-1	0	-1	if ( ( ch >= '0' ) && ( ch <= '9' ) ) return 1	EMPTY	EMPTY
382	388	2	-1	0	-1	if ( ( ch == ' ' ) || strchr (  " '()+,-./:=? "  , ch ) ) return 1	EMPTY	EMPTY
382	389	2	-1	0	-1	return 0	EMPTY	EMPTY
382	390	3	-1	0	-1	}	EMPTY	EMPTY
409	63	1	1	0	-1	int asn1 _ bn _ print ( bio * bp  const char * number  const bignum * num	bp num	EMPTY
409	64	2	-1	0	-1	unsigned char * buf  int off )	buf	EMPTY
409	65	2	-1	0	-1	{	EMPTY	EMPTY
409	66	2	-1	1	-1	int n , i ;	n i	EMPTY
409	67	3	-1	0	-1	const char * neg ;	neg	EMPTY
409	69	1	0	0	0	if ( num == null ) return ( 1 )	num	EMPTY
409	70	2	-1	0	-1	neg = ( bn _ is _ negative ( num ) ) ?  " - "  :  "  "	neg bn _ is _ negative num	EMPTY
409	71	2	-1	0	-1	if ( ! bio _ indent ( bp , off , 128 ) )	bio _ indent bp	EMPTY
409	72	2	-1	0	-1	return 0	EMPTY	EMPTY
409	73	2	-1	0	-1	if ( bn _ is _ zero ( num ) )	bn _ is _ zero num	EMPTY
409	74	2	-1	0	-1	{	EMPTY	EMPTY
409	75	2	-1	0	-1	if ( bio _ printf ( bp ,  " %s 0\n "  , number ) <= 0 )	bp	EMPTY
409	76	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
409	77	2	-1	0	-1	return 1 ;	EMPTY	EMPTY
409	78	3	-1	0	-1	}	EMPTY	EMPTY
409	80	1	0	0	0	if ( bn _ num _ bytes ( num ) <= sizeof ( long ) )	bn _ num _ bytes num	EMPTY
409	81	2	-1	0	-1	{	EMPTY	EMPTY
409	82	2	-1	0	-1	if ( bio _ printf ( bp ,  " %s %s%lu (%s0x%lx)\n "  , number , neg ,	bp neg	EMPTY
409	83	2	-1	0	-1	( unsigned long ) num -> d [ 0 ] , neg , ( unsigned long ) num -> d [ 0 ] )	num neg num	EMPTY
409	84	2	-1	0	-1	<= 0 ) return ( 0 ) ;	EMPTY	EMPTY
409	85	2	-1	0	-1	}	EMPTY	EMPTY
409	86	2	-1	0	-1	else	EMPTY	EMPTY
409	87	2	-1	0	-1	{	EMPTY	EMPTY
409	88	2	-1	0	-1	buf [ 0 ] = 0 ;	buf	EMPTY
409	89	2	-1	0	-1	if ( bio _ printf ( bp ,  " %s%s "  , number ,	bp	EMPTY
409	90	2	-1	0	-1	( neg [ 0 ] == '-' ) ?  "  (negative) "  :  "  "  ) <= 0 )	neg	EMPTY
409	91	2	-1	0	-1	return ( 0 ) ;	EMPTY	EMPTY
409	92	2	-1	0	-1	n = bn _ bn2bin ( num , & buf [ 1 ] ) ;	n bn _ bn2bin num buf	EMPTY
409	93	2	-1	0	-1	if	EMPTY	EMPTY
409	94	2	-1	0	-1	if ( buf [ 1 ] & 0x80 )	buf	EMPTY
409	95	2	-1	0	-1	n ++ ;	n	EMPTY
409	96	3	-1	0	-1	else buf ++ ;	buf	EMPTY
409	98	1	0	0	0	for ( i = 0 ; i < n ; i ++ )	i i n i	EMPTY
409	99	2	-1	0	-1	{	EMPTY	EMPTY
409	100	2	-1	0	-1	if ( ( i % 15 ) == 0 )	i	EMPTY
409	101	2	-1	0	-1	{	EMPTY	EMPTY
409	102	2	-1	0	-1	if ( bio _ puts ( bp ,  " \n "  ) <= 0	bio _ puts bp	EMPTY
409	103	2	-1	0	-1	|| ! bio _ indent ( bp , off + 4 , 128 ) )	bio _ indent bp	EMPTY
409	104	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
409	105	2	-1	0	-1	}	EMPTY	EMPTY
409	106	2	-1	0	-1	if ( bio _ printf ( bp ,  " %02x%s "  , buf [ i ] , ( ( i + 1 ) == n ) ?  "  "  :  " : "  )	bp buf i i n	EMPTY
409	107	2	-1	0	-1	<= 0 ) return ( 0 ) ;	EMPTY	EMPTY
409	108	2	-1	0	-1	}	EMPTY	EMPTY
409	109	2	-1	0	-1	if ( bio _ write ( bp ,  " \n "  , 1 ) <= 0 ) return ( 0 ) ;	bio _ write bp	EMPTY
409	110	2	-1	0	-1	}	EMPTY	EMPTY
409	111	2	-1	0	-1	return ( 1 )	EMPTY	EMPTY
409	112	3	-1	0	-1	}	EMPTY	EMPTY
410	64	1	0	0	-1	int i2a _ asn1 _ enumerated ( bio * bp  asn1 _ enumerated * a )	bp a	EMPTY
410	65	2	-1	0	-1	{	EMPTY	EMPTY
410	66	2	-1	0	-1	int i , n = 0 ;	i n	EMPTY
410	67	2	-1	0	-1	static const char * h =  " 0123456789abcdef "  ;	EMPTY	EMPTY
410	68	3	-1	0	-1	char buf [ 2 ] ;	buf	EMPTY
410	70	1	0	0	0	if ( a == null ) return ( 0 )	a	EMPTY
410	72	1	0	0	0	if ( a -> length == 0 )	a length	EMPTY
410	73	2	-1	0	-1	{	EMPTY	EMPTY
410	74	2	-1	0	-1	if ( bio _ write ( bp ,  " 00 "  , 2 ) != 2 ) goto err ;	bio _ write bp	EMPTY
410	75	2	-1	0	-1	n = 2 ;	n	EMPTY
410	76	2	-1	0	-1	}	EMPTY	EMPTY
410	77	2	-1	0	-1	else	EMPTY	EMPTY
410	78	2	-1	0	-1	{	EMPTY	EMPTY
410	79	2	-1	0	-1	for ( i = 0 ; i < a -> length ; i ++ )	i i a length i	EMPTY
410	80	2	-1	0	-1	{	EMPTY	EMPTY
410	81	2	-1	0	-1	if ( ( i != 0 ) && ( i % 35 == 0 ) )	i i	EMPTY
410	82	2	-1	0	-1	{	EMPTY	EMPTY
410	83	2	-1	0	-1	if ( bio _ write ( bp ,  " \\\n "  , 2 ) != 2 ) goto err ;	bio _ write bp	EMPTY
410	84	2	-1	0	-1	n += 2 ;	n	EMPTY
410	85	2	-1	0	-1	}	EMPTY	EMPTY
410	86	2	-1	0	-1	buf [ 0 ] = h [ ( ( unsigned char ) a -> data [ i ] >> 4 ) & 0x0f ] ;	buf a data i	EMPTY
410	87	2	-1	0	-1	buf [ 1 ] = h [ ( ( unsigned char ) a -> data [ i ] ) & 0x0f ] ;	buf a data i	EMPTY
410	88	2	-1	0	-1	if ( bio _ write ( bp , buf , 2 ) != 2 ) goto err ;	bio _ write bp buf	EMPTY
410	89	2	-1	0	-1	n += 2 ;	n	EMPTY
410	90	2	-1	0	-1	}	EMPTY	EMPTY
410	91	2	-1	0	-1	}	EMPTY	EMPTY
410	92	2	-1	0	-1	return ( n )	n	EMPTY
410	93	2	-1	0	-1	err :	EMPTY	EMPTY
410	94	2	-1	0	-1	return ( - 1 )	EMPTY	EMPTY
410	95	3	-1	0	-1	}	EMPTY	EMPTY
410	97	1	0	0	-1	int a2i _ asn1 _ enumerated ( bio * bp  asn1 _ enumerated * bs  char * buf  int size )	bp buf size	EMPTY
410	98	2	-1	0	-1	{	EMPTY	EMPTY
410	99	2	-1	0	-1	int ret = 0 ;	ret	EMPTY
410	100	2	-1	0	-1	int i , j , k , m , n , again , bufsize ;	i m n	EMPTY
410	101	2	-1	0	-1	unsigned char * s = null , * sp ;	s	EMPTY
410	102	2	-1	0	-1	unsigned char * bufp ;	EMPTY	EMPTY
410	103	3	-1	0	-1	int num = 0 , slen = 0 , first = 1 ;	num slen	EMPTY
410	105	1	0	0	-1	bs -> type = v _ asn1 _ enumerated ;	type	EMPTY
410	107	1	0	0	-1	bufsize = bio _ gets ( bp , buf , size )	bio _ gets bp buf size	EMPTY
410	108	2	-1	0	-1	for ( ; ; )	EMPTY	EMPTY
410	109	2	-1	0	-1	{	EMPTY	EMPTY
410	110	2	-1	0	-1	if ( bufsize < 1 ) goto err _ sl	EMPTY	EMPTY
410	111	2	-1	0	-1	i = bufsize	i	EMPTY
410	112	2	-1	0	-1	if ( buf [ i - 1 ] == '\n' ) buf [ -- i ] = '\0'	buf i buf i	EMPTY
410	113	2	-1	0	-1	if ( i == 0 ) goto err _ sl	i	EMPTY
410	114	2	-1	0	-1	if ( buf [ i - 1 ] == '\r' ) buf [ -- i ] = '\0'	buf i buf i	EMPTY
410	115	2	-1	0	-1	if ( i == 0 ) goto err _ sl	i	EMPTY
410	116	3	-1	0	-1	again = ( buf [ i - 1 ] == '\\' )	buf i	EMPTY
410	118	1	1	0	1	for ( j = 0 ; j < i ; j ++ )	i	EMPTY
410	119	2	-1	0	-1	{	EMPTY	EMPTY
410	120	2	-1	0	-1	if ( ! ( ( ( buf [ j ] >= '0' ) && ( buf [ j ] <= '9' ) ) ||	buf buf	EMPTY
410	121	2	-1	0	-1	( ( buf [ j ] >= 'a' ) && ( buf [ j ] <= 'f' ) ) ||	buf buf	EMPTY
410	122	2	-1	0	-1	( ( buf [ j ] >= 'a' ) && ( buf [ j ] <= 'f' ) ) ) )	buf buf	EMPTY
410	123	2	-1	0	-1	{	EMPTY	EMPTY
410	124	2	-1	0	-1	i = j ;	i	EMPTY
410	125	2	-1	0	-1	break ;	EMPTY	EMPTY
410	126	2	-1	0	-1	}	EMPTY	EMPTY
410	127	2	-1	0	-1	}	EMPTY	EMPTY
410	128	2	-1	0	-1	buf [ i ] = '\0'	buf i	EMPTY
410	131	3	-1	1	-1	if ( i < 2 ) goto err _ sl	i	EMPTY
410	133	1	0	0	-1	bufp = ( unsigned char * ) buf	buf	EMPTY
410	134	2	-1	0	-1	if ( first )	EMPTY	EMPTY
410	135	2	-1	0	-1	{	EMPTY	EMPTY
410	136	2	-1	0	-1	first = 0 ;	EMPTY	EMPTY
410	137	2	-1	0	-1	if ( ( bufp [ 0 ] == '0' ) && ( buf [ 1 ] == '0' ) )	buf	EMPTY
410	138	2	-1	0	-1	{	EMPTY	EMPTY
410	139	2	-1	0	-1	bufp += 2 ;	EMPTY	EMPTY
410	140	2	-1	0	-1	i -= 2 ;	i	EMPTY
410	141	2	-1	0	-1	}	EMPTY	EMPTY
410	142	2	-1	0	-1	}	EMPTY	EMPTY
410	143	2	-1	0	-1	k = 0	EMPTY	EMPTY
410	144	2	-1	0	-1	i -= again	i	EMPTY
410	145	2	-1	0	-1	if ( i % 2 != 0 )	i	EMPTY
410	146	2	-1	0	-1	{	EMPTY	EMPTY
410	147	2	-1	0	-1	openssl _ put _ error ( asn1 , asn1 _ r _ odd _ number _ of _ chars ) ;	EMPTY	EMPTY
410	148	2	-1	0	-1	goto err ;	EMPTY	EMPTY
410	149	2	-1	0	-1	}	EMPTY	EMPTY
410	150	2	-1	0	-1	i /= 2	i	EMPTY
410	151	2	-1	0	-1	if ( num + i > slen )	num i slen	EMPTY
410	152	2	-1	0	-1	{	EMPTY	EMPTY
410	153	2	-1	0	-1	if ( s == null )	s	EMPTY
410	154	2	-1	0	-1	sp = ( unsigned char * ) openssl _ malloc (	EMPTY	EMPTY
410	155	2	-1	0	-1	( unsigned int ) num + i * 2 ) ;	num i	EMPTY
410	156	2	-1	0	-1	else	EMPTY	EMPTY
410	157	2	-1	0	-1	sp = ( unsigned char * ) openssl _ realloc ( s ,	s	EMPTY
410	158	2	-1	0	-1	( unsigned int ) num + i * 2 ) ;	num i	EMPTY
410	159	2	-1	0	-1	if ( sp == null )	EMPTY	EMPTY
410	160	2	-1	0	-1	{	EMPTY	EMPTY
410	161	2	-1	0	-1	openssl _ put _ error ( asn1 , err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
410	162	3	-1	0	-1	goto err ;	EMPTY	EMPTY
410	163	1	0	0	-1	}	EMPTY	EMPTY
410	164	2	-1	0	-1	s = sp ;	s	EMPTY
410	165	2	-1	0	-1	slen = num + i * 2 ;	slen num i	EMPTY
410	166	2	-1	0	-1	}	EMPTY	EMPTY
410	167	2	-1	0	-1	for ( j = 0 ; j < i ; j ++ , k += 2 )	i	EMPTY
410	168	2	-1	0	-1	{	EMPTY	EMPTY
410	169	2	-1	0	-1	for ( n = 0 ; n < 2 ; n ++ )	n n n	EMPTY
410	170	2	-1	0	-1	{	EMPTY	EMPTY
410	171	2	-1	0	-1	m = bufp [ k + n ] ;	m n	EMPTY
410	172	2	-1	0	-1	if ( ( m >= '0' ) && ( m <= '9' ) )	m m	EMPTY
410	173	2	-1	0	-1	m -= '0' ;	m	EMPTY
410	174	2	-1	0	-1	else if ( ( m >= 'a' ) && ( m <= 'f' ) )	m m	EMPTY
410	175	2	-1	0	-1	m = m - 'a' + 10 ;	m m	EMPTY
410	176	2	-1	0	-1	else if ( ( m >= 'a' ) && ( m <= 'f' ) )	m m	EMPTY
410	177	2	-1	0	-1	m = m - 'a' + 10 ;	m m	EMPTY
410	178	2	-1	0	-1	else	EMPTY	EMPTY
410	179	2	-1	0	-1	{	EMPTY	EMPTY
410	180	2	-1	0	-1	openssl _ put _ error ( asn1 , asn1 _ r _ non _ hex _ characters ) ;	EMPTY	EMPTY
410	181	2	-1	0	-1	goto err ;	EMPTY	EMPTY
410	182	2	-1	0	-1	}	EMPTY	EMPTY
410	183	2	-1	0	-1	s [ num + j ] <<= 4 ;	s num	EMPTY
410	184	2	-1	0	-1	s [ num + j ] |= m ;	s num m	EMPTY
410	185	2	-1	0	-1	}	EMPTY	EMPTY
410	186	2	-1	0	-1	}	EMPTY	EMPTY
410	187	2	-1	0	-1	num += i	num i	EMPTY
410	188	2	-1	0	-1	if ( again )	EMPTY	EMPTY
410	189	2	-1	0	-1	bufsize = bio _ gets ( bp , buf , size ) ;	bio _ gets bp buf size	EMPTY
410	190	2	-1	0	-1	else	EMPTY	EMPTY
410	191	2	-1	0	-1	break	EMPTY	EMPTY
410	192	3	-1	0	-1	}	EMPTY	EMPTY
410	193	1	0	0	-1	bs -> length = num ;	length num	EMPTY
410	194	2	-1	0	-1	bs -> data = s ;	data s	EMPTY
410	195	2	-1	0	-1	ret = numconst ;	ret	EMPTY
410	196	2	-1	0	-1	err :	EMPTY	EMPTY
410	197	2	-1	0	-1	if ( numconst )	EMPTY	EMPTY
410	198	2	-1	0	-1	{	EMPTY	EMPTY
410	199	2	-1	0	-1	err _ sl :	EMPTY	EMPTY
410	200	2	-1	0	-1	openssl _ put _ error ( asn1  asn1 _ r _ short _ line ) ;	EMPTY	EMPTY
410	201	2	-1	0	-1	}	EMPTY	EMPTY
410	202	2	-1	0	-1	if ( s != null )	s	EMPTY
410	203	2	-1	0	-1	openssl _ free ( s ) ;	s	EMPTY
410	204	2	-1	0	-1	return ( ret ) ;	ret	EMPTY
410	205	3	-1	0	-1	}	EMPTY	EMPTY
422	76	1	0	0	-1	static size _ t ec _ gfp _ simple _ point2oct ( const ec _ group * group	group	EMPTY
422	77	2	-1	0	-1	const ec _ point * point	point	EMPTY
422	78	2	-1	0	-1	point _ conversion _ form _ t form	point _ conversion _ form _ t	EMPTY
422	79	2	-1	0	-1	uint8 _ t * buf  size _ t len  bn _ ctx * ctx ) {	buf len ctx	EMPTY
422	80	2	-1	0	-1	size _ t ret ;	ret	EMPTY
422	81	2	-1	0	-1	bn _ ctx * new _ ctx = null ;	EMPTY	EMPTY
422	82	2	-1	0	-1	int used _ ctx = 0 ;	EMPTY	EMPTY
422	83	2	-1	0	-1	bignum * x , * y ;	EMPTY	EMPTY
422	84	3	-1	0	-1	size _ t field _ len , i ;	i	EMPTY
422	86	1	0	0	0	if ( ( form != point _ conversion _ compressed ) &&	point _ conversion _ compressed	EMPTY
422	87	2	-1	0	-1	( form != point _ conversion _ uncompressed ) ) {	point _ conversion _ uncompressed	EMPTY
422	88	2	-1	0	-1	openssl _ put _ error ( ec , ec _ r _ invalid _ form ) ;	EMPTY	EMPTY
422	89	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	90	3	-1	0	-1	}	EMPTY	EMPTY
422	92	1	0	0	0	if ( ec _ point _ is _ at _ infinity ( group , point ) ) {	ec _ point _ is _ at _ infinity group point	EMPTY
422	93	2	-1	0	-1	openssl _ put _ error ( ec , ec _ r _ point _ at _ infinity ) ;	EMPTY	EMPTY
422	94	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	95	3	-1	0	-1	}	EMPTY	EMPTY
422	98	1	1	1	-1	field _ len = bn _ num _ bytes ( & group -> field )	bn _ num _ bytes group field	EMPTY
422	99	2	-1	0	-1	ret =	ret	EMPTY
422	100	3	-1	0	-1	( form == point _ conversion _ compressed ) ? 1 + field _ len : 1 + 2 * field _ len	point _ conversion _ compressed	EMPTY
422	103	1	1	1	1	if ( buf != null ) {	buf	EMPTY
422	104	2	-1	0	-1	if ( len < ret ) {	len ret	EMPTY
422	105	2	-1	0	-1	openssl _ put _ error ( ec , ec _ r _ buffer _ too _ small ) ;	EMPTY	EMPTY
422	106	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	107	3	-1	0	-1	}	EMPTY	EMPTY
422	109	1	0	0	0	if ( ctx == null ) {	ctx	EMPTY
422	110	2	-1	0	-1	ctx = new _ ctx = bn _ ctx _ new ( ) ;	ctx bn _ ctx _ new	EMPTY
422	111	2	-1	0	-1	if ( ctx == null ) {	ctx	EMPTY
422	112	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	113	2	-1	0	-1	}	EMPTY	EMPTY
422	114	3	-1	0	-1	}	EMPTY	EMPTY
422	116	1	0	0	0	bn _ ctx _ start ( ctx ) ;	bn _ ctx _ start ctx	EMPTY
422	117	2	-1	0	-1	used _ ctx = 1 ;	EMPTY	EMPTY
422	118	2	-1	0	-1	x = bn _ ctx _ get ( ctx ) ;	bn _ ctx _ get ctx	EMPTY
422	119	2	-1	0	-1	y = bn _ ctx _ get ( ctx ) ;	bn _ ctx _ get ctx	EMPTY
422	120	2	-1	0	-1	if ( y == null ) {	EMPTY	EMPTY
422	121	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	122	3	-1	0	-1	}	EMPTY	EMPTY
422	124	1	0	0	0	if ( ! ec _ point _ get _ affine _ coordinates _ gfp ( group , point , x , y , ctx ) ) {	ec _ point _ get _ affine _ coordinates _ gfp group point ctx	EMPTY
422	125	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	126	3	-1	0	-1	}	EMPTY	EMPTY
422	128	1	0	0	0	if ( ( form == point _ conversion _ compressed ) &&	point _ conversion _ compressed	EMPTY
422	129	2	-1	0	-1	bn _ is _ odd ( y ) ) {	bn _ is _ odd	EMPTY
422	130	2	-1	0	-1	buf [ 0 ] = form + 1 ;	buf	EMPTY
422	131	2	-1	0	-1	} else {	EMPTY	EMPTY
422	132	2	-1	0	-1	buf [ 0 ] = form ;	buf	EMPTY
422	133	2	-1	0	-1	}	EMPTY	EMPTY
422	134	3	-1	0	-1	i = 1 ;	i	EMPTY
422	136	1	0	0	0	if ( ! bn _ bn2bin _ padded ( buf + i , field _ len , x ) ) {	bn _ bn2bin _ padded buf i	EMPTY
422	137	2	-1	0	-1	openssl _ put _ error ( ec , err _ r _ internal _ error ) ;	EMPTY	EMPTY
422	138	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	139	2	-1	0	-1	}	EMPTY	EMPTY
422	140	3	-1	0	-1	i += field _ len ;	i	EMPTY
422	142	1	0	0	0	if ( form == point _ conversion _ uncompressed ) {	point _ conversion _ uncompressed	EMPTY
422	143	2	-1	0	-1	if ( ! bn _ bn2bin _ padded ( buf + i , field _ len , y ) ) {	bn _ bn2bin _ padded buf i	EMPTY
422	144	2	-1	0	-1	openssl _ put _ error ( ec , err _ r _ internal _ error ) ;	EMPTY	EMPTY
422	145	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	146	2	-1	0	-1	}	EMPTY	EMPTY
422	147	2	-1	0	-1	i += field _ len ;	i	EMPTY
422	148	3	-1	0	-1	}	EMPTY	EMPTY
422	150	1	0	0	0	if ( i != ret ) {	i ret	EMPTY
422	151	2	-1	0	-1	openssl _ put _ error ( ec , err _ r _ internal _ error ) ;	EMPTY	EMPTY
422	152	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	153	2	-1	0	-1	}	EMPTY	EMPTY
422	154	3	-1	0	-1	}	EMPTY	EMPTY
422	156	1	0	0	0	if ( used _ ctx ) {	EMPTY	EMPTY
422	157	2	-1	0	-1	bn _ ctx _ end ( ctx ) ;	bn _ ctx _ end ctx	EMPTY
422	158	2	-1	0	-1	}	EMPTY	EMPTY
422	159	2	-1	0	-1	bn _ ctx _ free ( new _ ctx )	bn _ ctx _ free	EMPTY
422	160	3	-1	0	-1	return ret	ret	EMPTY
422	162	1	0	0	-1	err :	EMPTY	EMPTY
422	163	2	-1	0	-1	if ( used _ ctx ) {	EMPTY	EMPTY
422	164	2	-1	0	-1	bn _ ctx _ end ( ctx ) ;	bn _ ctx _ end ctx	EMPTY
422	165	2	-1	0	-1	}	EMPTY	EMPTY
422	166	2	-1	0	-1	bn _ ctx _ free ( new _ ctx )	bn _ ctx _ free	EMPTY
422	167	2	-1	0	-1	return 0	EMPTY	EMPTY
422	168	3	-1	0	-1	}	EMPTY	EMPTY
422	171	1	0	0	-1	static int ec _ gfp _ simple _ oct2point ( const ec _ group * group  ec _ point * point	group point	EMPTY
422	172	2	-1	0	-1	const uint8 _ t * buf  size _ t len	buf len	EMPTY
422	173	2	-1	0	-1	bn _ ctx * ctx ) {	ctx	EMPTY
422	174	2	-1	0	-1	point _ conversion _ form _ t form ;	point _ conversion _ form _ t	EMPTY
422	175	2	-1	0	-1	int y _ bit ;	EMPTY	EMPTY
422	176	2	-1	0	-1	bn _ ctx * new _ ctx = null ;	EMPTY	EMPTY
422	177	2	-1	0	-1	bignum * x  * y ;	EMPTY	EMPTY
422	178	2	-1	0	-1	size _ t field _ len  enc _ len ;	EMPTY	EMPTY
422	179	3	-1	0	-1	int ret = numconst ;	ret	EMPTY
422	181	1	0	0	0	if ( len == numconst ) {	len	EMPTY
422	182	2	-1	0	-1	openssl _ put _ error ( ec  ec _ r _ buffer _ too _ small ) ;	EMPTY	EMPTY
422	183	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
422	184	2	-1	0	-1	}	EMPTY	EMPTY
422	185	2	-1	0	-1	form = buf [ numconst ] ;	buf	EMPTY
422	186	2	-1	0	-1	y _ bit = form & numconst ;	EMPTY	EMPTY
422	187	2	-1	0	-1	form = form & ~ numconst ;	EMPTY	EMPTY
422	188	2	-1	0	-1	if ( ( form != point _ conversion _ compressed &&	point _ conversion _ compressed	EMPTY
422	189	2	-1	0	-1	form != point _ conversion _ uncompressed ) ||	point _ conversion _ uncompressed	EMPTY
422	190	2	-1	0	-1	( form == point _ conversion _ uncompressed && y _ bit ) ) {	point _ conversion _ uncompressed	EMPTY
422	191	2	-1	0	-1	openssl _ put _ error ( ec  ec _ r _ invalid _ encoding ) ;	EMPTY	EMPTY
422	192	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
422	193	3	-1	0	-1	}	EMPTY	EMPTY
422	195	1	0	0	-1	field _ len = bn _ num _ bytes ( & group -> field ) ;	bn _ num _ bytes group field	EMPTY
422	196	2	-1	0	-1	enc _ len =	EMPTY	EMPTY
422	197	3	-1	0	-1	( form == point _ conversion _ compressed ) ? numconst + field _ len : numconst + numconst * field _ len ;	point _ conversion _ compressed	EMPTY
422	199	1	0	0	0	if ( len != enc _ len ) {	len	EMPTY
422	200	2	-1	0	-1	openssl _ put _ error ( ec  ec _ r _ invalid _ encoding ) ;	EMPTY	EMPTY
422	201	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
422	202	3	-1	0	-1	}	EMPTY	EMPTY
422	204	1	0	0	0	if ( ctx == null ) {	ctx	EMPTY
422	205	2	-1	0	-1	ctx = new _ ctx = bn _ ctx _ new ( ) ;	ctx bn _ ctx _ new	EMPTY
422	206	2	-1	0	-1	if ( ctx == null ) {	ctx	EMPTY
422	207	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
422	208	2	-1	0	-1	}	EMPTY	EMPTY
422	209	3	-1	0	-1	}	EMPTY	EMPTY
422	211	1	0	0	0	bn _ ctx _ start ( ctx ) ;	bn _ ctx _ start ctx	EMPTY
422	212	2	-1	0	-1	x = bn _ ctx _ get ( ctx ) ;	bn _ ctx _ get ctx	EMPTY
422	213	2	-1	0	-1	y = bn _ ctx _ get ( ctx ) ;	bn _ ctx _ get ctx	EMPTY
422	214	2	-1	0	-1	if ( x == null || y == null ) {	EMPTY	EMPTY
422	215	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	216	3	-1	0	-1	}	EMPTY	EMPTY
422	218	1	0	0	0	if ( ! bn _ bin2bn ( buf + numconst  field _ len  x ) ) {	bn _ bin2bn buf	EMPTY
422	219	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	220	2	-1	0	-1	}	EMPTY	EMPTY
422	221	2	-1	0	-1	if ( bn _ ucmp ( x  & group -> field ) >= numconst ) {	bn _ ucmp group field	EMPTY
422	222	2	-1	0	-1	openssl _ put _ error ( ec  ec _ r _ invalid _ encoding ) ;	EMPTY	EMPTY
422	223	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	224	3	-1	0	-1	}	EMPTY	EMPTY
422	226	1	0	0	0	if ( form == point _ conversion _ compressed ) {	point _ conversion _ compressed	EMPTY
422	227	2	-1	0	-1	if ( ! ec _ point _ set _ compressed _ coordinates _ gfp ( group  point  x  y _ bit  ctx ) ) {	ec _ point _ set _ compressed _ coordinates _ gfp group point ctx	EMPTY
422	228	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	229	2	-1	0	-1	}	EMPTY	EMPTY
422	230	2	-1	0	-1	}	EMPTY	EMPTY
422	231	2	-1	0	-1	if ( ! bn _ bin2bn ( buf + numconst + field _ len  field _ len  y ) ) {	bn _ bin2bn buf	EMPTY
422	232	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	233	2	-1	0	-1	}	EMPTY	EMPTY
422	234	2	-1	0	-1	if ( bn _ ucmp ( y  & group -> field ) >= numconst ) {	bn _ ucmp group field	EMPTY
422	235	2	-1	0	-1	openssl _ put _ error ( ec  ec _ r _ invalid _ encoding ) ;	EMPTY	EMPTY
422	236	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	237	3	-1	0	-1	}	EMPTY	EMPTY
422	239	1	0	0	0	if ( ! ec _ point _ set _ affine _ coordinates _ gfp ( group  point  x  y  ctx ) ) {	ec _ point _ set _ affine _ coordinates _ gfp group point ctx	EMPTY
422	240	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	241	2	-1	0	-1	}	EMPTY	EMPTY
422	242	3	-1	0	-1	}	EMPTY	EMPTY
422	244	1	0	0	-1	ret = numconst ;	ret	EMPTY
422	246	1	0	0	-1	err :	EMPTY	EMPTY
422	247	2	-1	0	-1	bn _ ctx _ end ( ctx ) ;	bn _ ctx _ end ctx	EMPTY
422	248	2	-1	0	-1	bn _ ctx _ free ( new _ ctx ) ;	bn _ ctx _ free	EMPTY
422	249	2	-1	0	-1	return ret ;	ret	EMPTY
422	250	3	-1	0	-1	}	EMPTY	EMPTY
422	252	1	0	0	-1	int ec _ point _ oct2point ( const ec _ group * group  ec _ point * point	ec _ point _ oct2point group point	EMPTY
422	253	2	-1	0	-1	const uint8 _ t * buf  size _ t len  bn _ ctx * ctx ) {	buf len ctx	EMPTY
422	254	2	-1	0	-1	if ( group -> meth != point -> meth ) {	group meth point meth	EMPTY
422	255	2	-1	0	-1	openssl _ put _ error ( ec  ec _ r _ incompatible _ objects ) ;	EMPTY	EMPTY
422	256	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
422	257	2	-1	0	-1	}	EMPTY	EMPTY
422	258	2	-1	0	-1	return ec _ gfp _ simple _ oct2point ( group  point  buf  len  ctx ) ;	group point buf len ctx	EMPTY
422	259	3	-1	0	-1	}	EMPTY	EMPTY
422	261	1	0	0	-1	size _ t ec _ point _ point2oct ( const ec _ group * group  const ec _ point * point	ec _ point _ point2oct group point	EMPTY
422	262	2	-1	0	-1	point _ conversion _ form _ t form  uint8 _ t * buf	point _ conversion _ form _ t buf	EMPTY
422	263	2	-1	0	-1	size _ t len  bn _ ctx * ctx ) {	len ctx	EMPTY
422	264	2	-1	0	-1	if ( group -> meth != point -> meth ) {	group meth point meth	EMPTY
422	265	2	-1	0	-1	openssl _ put _ error ( ec  ec _ r _ incompatible _ objects ) ;	EMPTY	EMPTY
422	266	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
422	267	2	-1	0	-1	}	EMPTY	EMPTY
422	268	2	-1	0	-1	return ec _ gfp _ simple _ point2oct ( group  point  form  buf  len  ctx ) ;	group point buf len ctx	EMPTY
422	269	3	-1	0	-1	}	EMPTY	EMPTY
422	271	1	0	0	-1	int ec _ gfp _ simple _ set _ compressed _ coordinates ( const ec _ group * group	group	EMPTY
422	272	2	-1	0	-1	ec _ point * point  const bignum * x _	point	EMPTY
422	273	2	-1	0	-1	int y _ bit  bn _ ctx * ctx ) {	ctx	EMPTY
422	274	2	-1	0	-1	bn _ ctx * new _ ctx = null ;	EMPTY	EMPTY
422	275	2	-1	0	-1	bignum * tmp1  * tmp2  * x  * y ;	EMPTY	EMPTY
422	276	3	-1	0	-1	int ret = numconst ;	ret	EMPTY
422	278	1	0	0	0	err _ clear _ error ( ) ;	err _ clear _ error	EMPTY
422	280	1	0	0	0	if ( ctx == null ) {	ctx	EMPTY
422	281	2	-1	0	-1	ctx = new _ ctx = bn _ ctx _ new ( ) ;	ctx bn _ ctx _ new	EMPTY
422	282	2	-1	0	-1	if ( ctx == null ) {	ctx	EMPTY
422	283	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
422	284	2	-1	0	-1	}	EMPTY	EMPTY
422	285	3	-1	0	-1	}	EMPTY	EMPTY
422	287	1	0	0	-1	y _ bit = ( y _ bit != numconst ) ;	EMPTY	EMPTY
422	289	1	0	0	0	bn _ ctx _ start ( ctx ) ;	bn _ ctx _ start ctx	EMPTY
422	290	2	-1	0	-1	tmp1 = bn _ ctx _ get ( ctx ) ;	bn _ ctx _ get ctx	EMPTY
422	291	2	-1	0	-1	tmp2 = bn _ ctx _ get ( ctx ) ;	bn _ ctx _ get ctx	EMPTY
422	292	2	-1	0	-1	x = bn _ ctx _ get ( ctx ) ;	bn _ ctx _ get ctx	EMPTY
422	293	2	-1	0	-1	y = bn _ ctx _ get ( ctx ) ;	bn _ ctx _ get ctx	EMPTY
422	294	2	-1	0	-1	if ( y == null ) {	EMPTY	EMPTY
422	295	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	296	3	-1	0	-1	}	EMPTY	EMPTY
422	303	1	1	1	1	if ( ! bn _ nnmod ( x , x _  , & group -> field , ctx ) ) {	bn _ nnmod group field ctx	EMPTY
422	304	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	305	3	-1	0	-1	}	EMPTY	EMPTY
422	307	1	1	0	1	if ( group -> meth -> field _ decode == numconst ) {	group meth field _ decode	EMPTY
422	309	2	-1	1	-1	if ( ! group -> meth -> field _ sqr ( group , tmp2 , x _  , ctx ) ||	group meth group ctx	EMPTY
422	310	2	-1	0	-1	! group -> meth -> field _ mul ( group , tmp1 , tmp2 , x _  , ctx ) ) {	group meth field _ mul group ctx	EMPTY
422	311	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	312	2	-1	0	-1	}	EMPTY	EMPTY
422	313	2	-1	0	-1	}	EMPTY	EMPTY
422	314	2	-1	0	-1	if ( ! bn _ mod _ sqr ( tmp2  x _   & group -> field  ctx ) ||	bn _ mod _ sqr group field ctx	EMPTY
422	315	2	-1	0	-1	! bn _ mod _ mul ( tmp1  tmp2  x _   & group -> field  ctx ) ) {	bn _ mod _ mul group field ctx	EMPTY
422	316	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	317	2	-1	0	-1	}	EMPTY	EMPTY
422	318	3	-1	0	-1	}	EMPTY	EMPTY
422	321	1	1	1	1	if ( group -> a _ is _ minus3 ) {	group a _ is _ minus3	EMPTY
422	322	2	-1	0	-1	if ( ! bn _ mod _ lshift1 _ quick ( tmp2 , x , & group -> field ) ||	bn _ mod _ lshift1 _ quick group field	EMPTY
422	323	2	-1	0	-1	! bn _ mod _ add _ quick ( tmp2 , tmp2 , x , & group -> field ) ||	bn _ mod _ add _ quick group field	EMPTY
422	324	2	-1	0	-1	! bn _ mod _ sub _ quick ( tmp1 , tmp1 , tmp2 , & group -> field ) ) {	bn _ mod _ sub _ quick group field	EMPTY
422	325	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	326	2	-1	0	-1	}	EMPTY	EMPTY
422	327	2	-1	0	-1	}	EMPTY	EMPTY
422	328	2	-1	0	-1	if ( group -> meth -> field _ decode ) {	group meth field _ decode	EMPTY
422	329	2	-1	0	-1	if ( ! group -> meth -> field _ decode ( group , tmp2 , & group -> a , ctx ) ||	group meth field _ decode group group a ctx	EMPTY
422	330	2	-1	0	-1	! bn _ mod _ mul ( tmp2 , tmp2 , x , & group -> field , ctx ) ) {	bn _ mod _ mul group field ctx	EMPTY
422	331	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	332	2	-1	0	-1	}	EMPTY	EMPTY
422	333	2	-1	0	-1	}	EMPTY	EMPTY
422	335	2	-1	1	-1	if ( ! group -> meth -> field _ mul ( group , tmp2 , & group -> a , x , ctx ) ) {	group meth field _ mul group group a ctx	EMPTY
422	336	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	337	2	-1	0	-1	}	EMPTY	EMPTY
422	338	3	-1	0	-1	}	EMPTY	EMPTY
422	340	1	0	0	0	if ( ! bn _ mod _ add _ quick ( tmp1  tmp1  tmp2  & group -> field ) ) {	bn _ mod _ add _ quick group field	EMPTY
422	341	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	342	2	-1	0	-1	}	EMPTY	EMPTY
422	343	3	-1	0	-1	}	EMPTY	EMPTY
422	346	1	1	1	1	if ( group -> meth -> field _ decode ) {	group meth field _ decode	EMPTY
422	347	2	-1	0	-1	if ( ! group -> meth -> field _ decode ( group , tmp2 , & group -> b , ctx ) ||	group meth field _ decode group group b ctx	EMPTY
422	348	2	-1	0	-1	! bn _ mod _ add _ quick ( tmp1 , tmp1 , tmp2 , & group -> field ) ) {	bn _ mod _ add _ quick group field	EMPTY
422	349	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	350	2	-1	0	-1	}	EMPTY	EMPTY
422	351	2	-1	0	-1	} else {	EMPTY	EMPTY
422	352	2	-1	0	-1	if ( ! bn _ mod _ add _ quick ( tmp1 , tmp1 , & group -> b , & group -> field ) ) {	bn _ mod _ add _ quick group b group field	EMPTY
422	353	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	354	2	-1	0	-1	}	EMPTY	EMPTY
422	355	3	-1	0	-1	}	EMPTY	EMPTY
422	357	1	0	0	0	if ( ! bn _ mod _ sqrt ( y , tmp1 , & group -> field , ctx ) ) {	bn _ mod _ sqrt group field ctx	EMPTY
422	358	3	-1	0	-1	unsigned long err = err _ peek _ last _ error ( ) ;	err _ peek _ last _ error	EMPTY
422	360	1	0	0	0	if ( err _ get _ lib ( err ) == err _ lib _ bn &&	EMPTY	EMPTY
422	361	2	-1	0	-1	err _ get _ reason ( err ) == bn _ r _ not _ a _ square ) {	EMPTY	EMPTY
422	362	2	-1	0	-1	err _ clear _ error ( ) ;	err _ clear _ error	EMPTY
422	363	2	-1	0	-1	openssl _ put _ error ( ec , ec _ r _ invalid _ compressed _ point ) ;	EMPTY	EMPTY
422	364	2	-1	0	-1	} else {	EMPTY	EMPTY
422	365	2	-1	0	-1	openssl _ put _ error ( ec , err _ r _ bn _ lib ) ;	EMPTY	EMPTY
422	366	2	-1	0	-1	}	EMPTY	EMPTY
422	367	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	368	3	-1	0	-1	}	EMPTY	EMPTY
422	370	1	0	0	0	if ( y _ bit != bn _ is _ odd ( y ) ) {	bn _ is _ odd	EMPTY
422	371	2	-1	0	-1	if ( bn _ is _ zero ( y ) ) {	bn _ is _ zero	EMPTY
422	372	3	-1	0	-1	int kron ;	EMPTY	EMPTY
422	374	1	0	0	-1	kron = bn _ kronecker ( x , & group -> field , ctx )	bn _ kronecker group field ctx	EMPTY
422	375	2	-1	0	-1	if ( kron == - 2 ) {	EMPTY	EMPTY
422	376	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	377	3	-1	0	-1	}	EMPTY	EMPTY
422	379	1	1	0	1	if ( kron == numconst ) {	EMPTY	EMPTY
422	380	2	-1	0	-1	openssl _ put _ error ( ec  ec _ r _ invalid _ compression _ bit ) ;	EMPTY	EMPTY
422	381	2	-1	0	-1	}	EMPTY	EMPTY
422	383	2	-1	1	-1	openssl _ put _ error ( ec  ec _ r _ invalid _ compressed _ point ) ;	EMPTY	EMPTY
422	384	2	-1	0	-1	}	EMPTY	EMPTY
422	385	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	386	2	-1	0	-1	}	EMPTY	EMPTY
422	387	2	-1	0	-1	if ( ! bn _ usub ( y  & group -> field  y ) ) {	bn _ usub group field	EMPTY
422	388	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	389	2	-1	0	-1	}	EMPTY	EMPTY
422	390	2	-1	0	-1	}	EMPTY	EMPTY
422	391	2	-1	0	-1	if ( y _ bit != bn _ is _ odd ( y ) ) {	bn _ is _ odd	EMPTY
422	392	2	-1	0	-1	openssl _ put _ error ( ec  err _ r _ internal _ error ) ;	EMPTY	EMPTY
422	393	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	394	3	-1	0	-1	}	EMPTY	EMPTY
422	396	1	0	0	0	if ( ! ec _ point _ set _ affine _ coordinates _ gfp ( group  point  x  y  ctx ) ) {	ec _ point _ set _ affine _ coordinates _ gfp group point ctx	EMPTY
422	397	2	-1	0	-1	goto err ;	EMPTY	EMPTY
422	398	3	-1	0	-1	}	EMPTY	EMPTY
422	400	1	0	0	-1	ret = numconst ;	ret	EMPTY
422	402	1	0	0	-1	err :	EMPTY	EMPTY
422	403	2	-1	0	-1	bn _ ctx _ end ( ctx ) ;	bn _ ctx _ end ctx	EMPTY
422	404	2	-1	0	-1	bn _ ctx _ free ( new _ ctx ) ;	bn _ ctx _ free	EMPTY
422	405	2	-1	0	-1	return ret ;	ret	EMPTY
422	406	3	-1	0	-1	}	EMPTY	EMPTY
422	408	1	0	0	-1	int ec _ point _ set _ compressed _ coordinates _ gfp ( const ec _ group * group	ec _ point _ set _ compressed _ coordinates _ gfp group	EMPTY
422	409	2	-1	0	-1	ec _ point * point  const bignum * x	point	EMPTY
422	410	2	-1	0	-1	int y _ bit  bn _ ctx * ctx ) {	ctx	EMPTY
422	411	2	-1	0	-1	if ( group -> meth != point -> meth ) {	group meth point meth	EMPTY
422	412	2	-1	0	-1	openssl _ put _ error ( ec  ec _ r _ incompatible _ objects ) ;	EMPTY	EMPTY
422	413	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
422	414	2	-1	0	-1	}	EMPTY	EMPTY
422	415	2	-1	0	-1	return ec _ gfp _ simple _ set _ compressed _ coordinates ( group  point  x  y _ bit  ctx ) ;	group point ctx	EMPTY
422	416	3	-1	0	-1	}	EMPTY	EMPTY
428	25	1	0	0	-1	void cbs _ init ( cbs * cbs  const uint8 _ t * data  size _ t len ) {	cbs _ init cbs data len	EMPTY
428	26	2	-1	0	-1	cbs -> data = data	cbs data data	EMPTY
428	27	2	-1	0	-1	cbs -> len = len	cbs len len	EMPTY
428	28	3	-1	0	-1	}	EMPTY	EMPTY
428	30	1	0	0	-1	static int cbs _ get ( cbs * cbs  const uint8 _ t * * p  size _ t n ) {	cbs n	EMPTY
428	31	2	-1	0	-1	if ( cbs -> len < n ) {	cbs len n	EMPTY
428	32	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
428	33	3	-1	0	-1	}	EMPTY	EMPTY
428	35	1	0	0	-1	* p = cbs -> data	cbs data	EMPTY
428	36	2	-1	0	-1	cbs -> data += n	cbs data n	EMPTY
428	37	2	-1	0	-1	cbs -> len -= n	cbs len n	EMPTY
428	38	2	-1	0	-1	return 1	EMPTY	EMPTY
428	39	3	-1	0	-1	}	EMPTY	EMPTY
428	41	1	0	0	-1	int cbs _ skip ( cbs * cbs  size _ t len ) {	cbs _ skip cbs len	EMPTY
428	42	2	-1	0	-1	const uint8 _ t * dummy ;	EMPTY	EMPTY
428	43	2	-1	0	-1	return cbs _ get ( cbs , & dummy , len )	cbs len	EMPTY
428	44	3	-1	0	-1	}	EMPTY	EMPTY
428	46	1	0	0	-1	const uint8 _ t * cbs _ data ( const cbs * cbs ) {	cbs _ data cbs	EMPTY
428	47	2	-1	0	-1	return cbs -> data	cbs data	EMPTY
428	48	3	-1	0	-1	}	EMPTY	EMPTY
428	50	1	0	0	-1	size _ t cbs _ len ( const cbs * cbs ) {	cbs _ len cbs	EMPTY
428	51	2	-1	0	-1	return cbs -> len	cbs len	EMPTY
428	52	3	-1	0	-1	}	EMPTY	EMPTY
428	54	1	0	0	-1	int cbs _ stow ( const cbs * cbs  uint8 _ t * * out _ ptr  size _ t * out _ len ) {	cbs _ stow cbs out _ ptr out _ len	EMPTY
428	55	3	-1	0	-1	empty	EMPTY	EMPTY
428	57	1	0	0	-1	* out _ len = 0	out _ len	EMPTY
428	59	1	0	0	0	if ( cbs -> len == 0 ) {	cbs len	EMPTY
428	60	2	-1	0	-1	return 1 ;	EMPTY	EMPTY
428	61	2	-1	0	-1	}	EMPTY	EMPTY
428	62	2	-1	0	-1	* out _ ptr = buf _ memdup ( cbs -> data , cbs -> len )	out _ ptr buf _ memdup cbs data cbs len	EMPTY
428	63	2	-1	0	-1	if ( * out _ ptr == null ) {	out _ ptr	EMPTY
428	64	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
428	65	2	-1	0	-1	}	EMPTY	EMPTY
428	66	2	-1	0	-1	* out _ len = cbs -> len	out _ len cbs len	EMPTY
428	67	2	-1	0	-1	return 1	EMPTY	EMPTY
428	68	3	-1	0	-1	}	EMPTY	EMPTY
428	70	1	0	0	-1	int cbs _ strdup ( const cbs * cbs  char * * out _ ptr ) {	cbs _ strdup cbs out _ ptr	EMPTY
428	71	2	-1	0	-1	if ( * out _ ptr != null ) {	out _ ptr	EMPTY
428	72	2	-1	0	-1	openssl _ free ( * out _ ptr ) ;	out _ ptr	EMPTY
428	73	2	-1	0	-1	}	EMPTY	EMPTY
428	74	2	-1	0	-1	* out _ ptr = buf _ strndup ( ( const char * ) cbs -> data , cbs -> len )	out _ ptr buf _ strndup cbs data cbs len	EMPTY
428	75	2	-1	0	-1	return ( * out _ ptr != null )	out _ ptr	EMPTY
428	76	3	-1	0	-1	}	EMPTY	EMPTY
428	78	1	0	0	-1	int cbs _ contains _ zero _ byte ( const cbs * cbs ) {	cbs _ contains _ zero _ byte cbs	EMPTY
428	79	2	-1	0	-1	return memchr ( cbs -> data  numconst  cbs -> len ) != null ;	cbs data cbs len	EMPTY
428	80	3	-1	0	-1	}	EMPTY	EMPTY
428	82	1	0	0	-1	int cbs _ mem _ equal ( const cbs * cbs  const uint8 _ t * data  size _ t len ) {	cbs _ mem _ equal cbs data len	EMPTY
428	83	2	-1	0	-1	if ( len != cbs -> len ) {	len cbs len	EMPTY
428	84	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
428	85	2	-1	0	-1	}	EMPTY	EMPTY
428	86	2	-1	0	-1	return crypto _ memcmp ( cbs -> data , data , len ) == 0	crypto _ memcmp cbs data data len	EMPTY
428	87	3	-1	0	-1	}	EMPTY	EMPTY
428	89	1	0	0	-1	static int cbs _ get _ u ( cbs * cbs  uint32 _ t * out  size _ t len ) {	cbs out len	EMPTY
428	90	2	-1	0	-1	uint32 _ t result = 0 ;	EMPTY	EMPTY
428	91	2	-1	0	-1	size _ t i ;	EMPTY	EMPTY
428	92	3	-1	0	-1	const uint8 _ t * data ;	data	EMPTY
428	94	1	0	0	0	if ( ! cbs _ get ( cbs , & data , len ) ) {	cbs data len	EMPTY
428	95	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
428	96	2	-1	0	-1	}	EMPTY	EMPTY
428	97	2	-1	0	-1	for ( i = 0 ; i < len ; i ++ ) {	len	EMPTY
428	98	2	-1	0	-1	result <<= 8 ;	EMPTY	EMPTY
428	99	2	-1	0	-1	result |= data [ i ] ;	data	EMPTY
428	100	2	-1	0	-1	}	EMPTY	EMPTY
428	101	2	-1	0	-1	* out = result	out	EMPTY
428	102	2	-1	0	-1	return 1	EMPTY	EMPTY
428	103	3	-1	0	-1	}	EMPTY	EMPTY
428	105	1	0	0	-1	int cbs _ get _ u8 ( cbs * cbs  uint8 _ t * out ) {	cbs _ get _ u8 cbs out	EMPTY
428	106	2	-1	0	-1	const uint8 _ t * v ;	EMPTY	EMPTY
428	107	2	-1	0	-1	if ( ! cbs _ get ( cbs , & v , 1 ) ) {	cbs	EMPTY
428	108	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
428	109	2	-1	0	-1	}	EMPTY	EMPTY
428	110	2	-1	0	-1	* out = * v	out	EMPTY
428	111	2	-1	0	-1	return 1	EMPTY	EMPTY
428	112	3	-1	0	-1	}	EMPTY	EMPTY
428	114	1	0	0	-1	int cbs _ get _ u16 ( cbs * cbs  uint16 _ t * out ) {	cbs _ get _ u16 cbs out	EMPTY
428	115	2	-1	0	-1	uint32 _ t v ;	EMPTY	EMPTY
428	116	2	-1	0	-1	if ( ! cbs _ get _ u ( cbs , & v , 2 ) ) {	cbs	EMPTY
428	117	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
428	118	2	-1	0	-1	}	EMPTY	EMPTY
428	119	2	-1	0	-1	* out = v	out	EMPTY
428	120	2	-1	0	-1	return 1	EMPTY	EMPTY
428	121	3	-1	0	-1	}	EMPTY	EMPTY
428	123	1	0	0	-1	int cbs _ get _ u24 ( cbs * cbs  uint32 _ t * out ) {	cbs _ get _ u24 cbs out	EMPTY
428	124	2	-1	0	-1	return cbs _ get _ u ( cbs , out , 3 )	cbs out	EMPTY
428	125	3	-1	0	-1	}	EMPTY	EMPTY
428	127	1	0	0	-1	int cbs _ get _ u32 ( cbs * cbs  uint32 _ t * out ) {	cbs _ get _ u32 cbs out	EMPTY
428	128	2	-1	0	-1	return cbs _ get _ u ( cbs , out , 4 )	cbs out	EMPTY
428	129	3	-1	0	-1	}	EMPTY	EMPTY
428	131	1	0	0	-1	int cbs _ get _ bytes ( cbs * cbs  cbs * out  size _ t len ) {	cbs _ get _ bytes cbs out len	EMPTY
428	132	2	-1	0	-1	const uint8 _ t * v ;	EMPTY	EMPTY
428	133	2	-1	0	-1	if ( ! cbs _ get ( cbs , & v , len ) ) {	cbs len	EMPTY
428	134	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
428	135	2	-1	0	-1	}	EMPTY	EMPTY
428	136	2	-1	0	-1	cbs _ init ( out , v , len )	cbs _ init out len	EMPTY
428	137	2	-1	0	-1	return 1	EMPTY	EMPTY
428	138	3	-1	0	-1	}	EMPTY	EMPTY
428	140	1	0	0	-1	int cbs _ copy _ bytes ( cbs * cbs  uint8 _ t * out  size _ t len ) {	cbs _ copy _ bytes cbs out len	EMPTY
428	141	2	-1	0	-1	const uint8 _ t * v ;	EMPTY	EMPTY
428	142	2	-1	0	-1	if ( ! cbs _ get ( cbs , & v , len ) ) {	cbs len	EMPTY
428	143	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
428	144	2	-1	0	-1	}	EMPTY	EMPTY
428	145	2	-1	0	-1	memcpy ( out  v  len ) ;	out len	EMPTY
428	146	2	-1	0	-1	return 1	EMPTY	EMPTY
428	147	3	-1	0	-1	}	EMPTY	EMPTY
428	149	1	0	0	-1	static int cbs _ get _ length _ prefixed ( cbs * cbs  cbs * out  size _ t len _ len ) {	cbs out	EMPTY
428	150	2	-1	0	-1	uint32 _ t len ;	len	EMPTY
428	151	2	-1	0	-1	if ( ! cbs _ get _ u ( cbs , & len , len _ len ) ) {	cbs len	EMPTY
428	152	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
428	153	2	-1	0	-1	}	EMPTY	EMPTY
428	154	2	-1	0	-1	return cbs _ get _ bytes ( cbs , out , len )	cbs _ get _ bytes cbs out len	EMPTY
428	155	3	-1	0	-1	}	EMPTY	EMPTY
428	157	1	0	0	-1	int cbs _ get _ u8 _ length _ prefixed ( cbs * cbs  cbs * out ) {	cbs _ get _ u8 _ length _ prefixed cbs out	EMPTY
428	158	2	-1	0	-1	return cbs _ get _ length _ prefixed ( cbs , out , 1 )	cbs out	EMPTY
428	159	3	-1	0	-1	}	EMPTY	EMPTY
428	161	1	0	0	-1	int cbs _ get _ u16 _ length _ prefixed ( cbs * cbs  cbs * out ) {	cbs _ get _ u16 _ length _ prefixed cbs out	EMPTY
428	162	2	-1	0	-1	return cbs _ get _ length _ prefixed ( cbs , out , 2 )	cbs out	EMPTY
428	163	3	-1	0	-1	}	EMPTY	EMPTY
428	165	1	0	0	-1	int cbs _ get _ u24 _ length _ prefixed ( cbs * cbs  cbs * out ) {	cbs _ get _ u24 _ length _ prefixed cbs out	EMPTY
428	166	2	-1	0	-1	return cbs _ get _ length _ prefixed ( cbs , out , 3 )	cbs out	EMPTY
428	167	3	-1	0	-1	}	EMPTY	EMPTY
428	169	1	0	0	-1	static int cbs _ get _ any _ asn1 _ element ( cbs * cbs  cbs * out  unsigned * out _ tag	cbs out	EMPTY
428	170	2	-1	0	-1	size _ t * out _ header _ len  int ber _ ok ) {	EMPTY	EMPTY
428	171	2	-1	0	-1	uint8 _ t tag , length _ byte ;	tag	EMPTY
428	172	2	-1	0	-1	cbs header = * cbs ;	cbs	EMPTY
428	173	3	-1	0	-1	cbs throwaway ;	EMPTY	EMPTY
428	175	1	0	0	0	if ( out == null ) {	out	EMPTY
428	176	2	-1	0	-1	out = & throwaway ;	out	EMPTY
428	177	3	-1	0	-1	}	EMPTY	EMPTY
428	179	1	0	0	0	if ( ! cbs _ get _ u8 ( & header , & tag ) ||	cbs _ get _ u8 tag	EMPTY
428	180	2	-1	0	-1	! cbs _ get _ u8 ( & header , & length _ byte ) ) {	cbs _ get _ u8	EMPTY
428	181	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
428	182	3	-1	0	-1	}	EMPTY	EMPTY
428	184	1	1	0	1	if ( ( tag & numconst ) == numconst ) {	tag	EMPTY
428	186	2	-1	1	-1	return 0	EMPTY	EMPTY
428	187	3	-1	0	-1	}	EMPTY	EMPTY
428	189	1	0	0	0	if ( out _ tag != null ) {	EMPTY	EMPTY
428	191	1	0	0	-1	}	EMPTY	EMPTY
428	193	1	1	0	1	size _ t len ;	len	EMPTY
428	194	2	-1	0	-1	if ( ( length _ byte & numconst ) == numconst ) {	EMPTY	EMPTY
428	196	2	-1	1	-1	len = ( ( size _ t ) length _ byte ) + 2	len	EMPTY
428	197	2	-1	0	-1	if ( out _ header _ len != null ) {	EMPTY	EMPTY
428	198	2	-1	0	-1	* out _ header _ len = 2 ;	EMPTY	EMPTY
428	199	2	-1	0	-1	}	EMPTY	EMPTY
428	200	2	-1	0	-1	}	EMPTY	EMPTY
428	202	2	-1	1	-1	const size _ t num _ bytes = length _ byte & 0x7f ;	num _ bytes	EMPTY
428	203	3	-1	0	-1	uint32 _ t len32 ;	EMPTY	EMPTY
428	205	1	1	0	1	if ( ber _ ok && ( tag & cbs _ asn1 _ constructed ) != numconst && num _ bytes == numconst ) {	tag num _ bytes	EMPTY
428	207	2	-1	1	-1	if ( out _ header _ len != null ) {	EMPTY	EMPTY
428	208	2	-1	0	-1	* out _ header _ len = 2 ;	EMPTY	EMPTY
428	209	2	-1	0	-1	}	EMPTY	EMPTY
428	210	2	-1	0	-1	return cbs _ get _ bytes ( cbs , out , 2 )	cbs _ get _ bytes cbs out	EMPTY
428	211	3	-1	0	-1	}	EMPTY	EMPTY
428	213	1	1	0	1	if ( num _ bytes == numconst || num _ bytes > numconst ) {	num _ bytes num _ bytes	EMPTY
428	214	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
428	215	2	-1	0	-1	}	EMPTY	EMPTY
428	216	2	-1	0	-1	if ( ! cbs _ get _ u ( & header  & len32  num _ bytes ) ) {	num _ bytes	EMPTY
428	217	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
428	218	2	-1	0	-1	}	EMPTY	EMPTY
428	219	2	-1	0	-1	if ( len32 < numconst ) {	EMPTY	EMPTY
428	221	2	-1	1	-1	return 0	EMPTY	EMPTY
428	222	2	-1	0	-1	}	EMPTY	EMPTY
428	223	2	-1	0	-1	if ( ( len32 >> ( ( num _ bytes - numconst ) * numconst ) ) == numconst ) {	num _ bytes	EMPTY
428	225	2	-1	1	-1	return 0	EMPTY	EMPTY
428	226	2	-1	0	-1	}	EMPTY	EMPTY
428	227	2	-1	0	-1	len = len32 ;	len	EMPTY
428	228	2	-1	0	-1	if ( len + numconst + num _ bytes < len ) {	len num _ bytes len	EMPTY
428	230	2	-1	1	-1	return 0	EMPTY	EMPTY
428	231	2	-1	0	-1	}	EMPTY	EMPTY
428	232	2	-1	0	-1	len += numconst + num _ bytes ;	len num _ bytes	EMPTY
428	233	3	-1	0	-1	if ( out _ header _ len != null ) {	EMPTY	EMPTY
428	235	1	0	0	-1	}	EMPTY	EMPTY
428	236	3	-1	0	-1	}	EMPTY	EMPTY
428	238	1	0	0	0	return cbs _ get _ bytes ( cbs  out  len ) ;	cbs _ get _ bytes cbs out len	EMPTY
428	239	3	-1	0	-1	}	EMPTY	EMPTY
428	241	1	1	0	-1	int cbs _ get _ any _ asn1 _ element ( cbs * cbs  cbs * out  unsigned * out _ tag	cbs _ get _ any _ asn1 _ element cbs out	EMPTY
428	242	2	-1	0	-1	size _ t * out _ header _ len ) {	EMPTY	EMPTY
428	243	2	-1	0	-1	return cbs _ get _ any _ asn1 _ element ( cbs  out  out _ tag  out _ header _ len	cbs out	EMPTY
428	244	2	-1	1	-1	numconst ) ;	EMPTY	EMPTY
428	245	3	-1	0	-1	}	EMPTY	EMPTY
428	247	1	1	0	-1	int cbs _ get _ any _ ber _ asn1 _ element ( cbs * cbs  cbs * out  unsigned * out _ tag	cbs _ get _ any _ ber _ asn1 _ element cbs out	EMPTY
428	248	2	-1	0	-1	size _ t * out _ header _ len ) {	EMPTY	EMPTY
428	249	2	-1	0	-1	return cbs _ get _ any _ asn1 _ element ( cbs  out  out _ tag  out _ header _ len	cbs out	EMPTY
428	250	2	-1	1	-1	numconst ) ;	EMPTY	EMPTY
428	251	3	-1	0	-1	}	EMPTY	EMPTY
428	253	1	0	0	-1	static int cbs _ get _ asn1 ( cbs * cbs  cbs * out  unsigned tag _ value	cbs out tag _ value	EMPTY
428	254	2	-1	0	-1	int skip _ header ) {	EMPTY	EMPTY
428	255	2	-1	0	-1	size _ t header _ len ;	EMPTY	EMPTY
428	256	2	-1	0	-1	unsigned tag ;	tag	EMPTY
428	257	3	-1	0	-1	cbs throwaway ;	EMPTY	EMPTY
428	259	1	0	0	0	if ( out == null ) {	out	EMPTY
428	260	2	-1	0	-1	out = & throwaway ;	out	EMPTY
428	261	3	-1	0	-1	}	EMPTY	EMPTY
428	263	1	0	0	0	if ( ! cbs _ get _ any _ asn1 _ element ( cbs  out  & tag  & header _ len ) ||	cbs _ get _ any _ asn1 _ element cbs out tag	EMPTY
428	264	2	-1	0	-1	tag != tag _ value ) {	tag tag _ value	EMPTY
428	265	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
428	266	3	-1	0	-1	}	EMPTY	EMPTY
428	268	1	0	0	0	if ( skip _ header && ! cbs _ skip ( out  header _ len ) ) {	cbs _ skip out	EMPTY
428	269	2	-1	0	-1	assert ( numconst ) ;	EMPTY	EMPTY
428	270	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
428	271	3	-1	0	-1	}	EMPTY	EMPTY
428	273	1	0	0	0	return numconst ;	EMPTY	EMPTY
428	274	3	-1	0	-1	}	EMPTY	EMPTY
428	276	1	0	0	-1	int cbs _ get _ asn1 ( cbs * cbs  cbs * out  unsigned tag _ value ) {	cbs _ get _ asn1 cbs out tag _ value	EMPTY
428	277	2	-1	0	-1	;	EMPTY	EMPTY
428	278	3	-1	0	-1	}	EMPTY	EMPTY
428	280	1	0	0	-1	int cbs _ get _ asn1 _ element ( cbs * cbs  cbs * out  unsigned tag _ value ) {	cbs _ get _ asn1 _ element cbs out tag _ value	EMPTY
428	281	2	-1	0	-1	;	EMPTY	EMPTY
428	282	3	-1	0	-1	}	EMPTY	EMPTY
428	284	1	0	0	-1	int cbs _ peek _ asn1 _ tag ( const cbs * cbs  unsigned tag _ value ) {	cbs _ peek _ asn1 _ tag cbs tag _ value	EMPTY
428	285	2	-1	0	-1	if ( cbs _ len ( cbs ) < numconst ) {	cbs _ len cbs	EMPTY
428	286	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
428	287	2	-1	0	-1	}	EMPTY	EMPTY
428	288	2	-1	0	-1	return cbs _ data ( cbs ) [ numconst ] == tag _ value ;	cbs _ data cbs tag _ value	EMPTY
428	289	3	-1	0	-1	}	EMPTY	EMPTY
428	291	1	0	0	-1	int cbs _ get _ asn1 _ uint64 ( cbs * cbs  uint64 _ t * out ) {	cbs _ get _ asn1 _ uint64 cbs out	EMPTY
428	292	2	-1	0	-1	cbs bytes ;	EMPTY	EMPTY
428	293	2	-1	0	-1	const uint8 _ t * data ;	data	EMPTY
428	294	3	-1	0	-1	size _ t i  len ;	len	EMPTY
428	296	1	0	0	0	if ( ! cbs _ get _ asn1 ( cbs  & bytes  cbs _ asn1 _ integer ) ) {	cbs _ get _ asn1 cbs	EMPTY
428	297	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
428	298	3	-1	0	-1	}	EMPTY	EMPTY
428	301	1	0	0	-1	data = cbs _ data ( & bytes ) ;	data cbs _ data	EMPTY
428	302	3	-1	0	-1	len = cbs _ len ( & bytes ) ;	len cbs _ len	EMPTY
428	304	1	1	0	1	if ( len == numconst ) {	len	EMPTY
428	306	2	-1	1	-1	return 0	EMPTY	EMPTY
428	307	3	-1	0	-1	}	EMPTY	EMPTY
428	309	1	1	0	1	if ( ( data [ numconst ] & numconst ) != numconst ) {	data	EMPTY
428	311	2	-1	1	-1	return 0	EMPTY	EMPTY
428	312	3	-1	0	-1	}	EMPTY	EMPTY
428	314	1	1	0	1	if ( data [ numconst ] == numconst && len > numconst && ( data [ numconst ] & numconst ) == numconst ) {	data len data	EMPTY
428	316	2	-1	1	-1	return 0	EMPTY	EMPTY
428	317	3	-1	0	-1	}	EMPTY	EMPTY
428	319	1	1	0	1	for ( i = numconst ; i < len ; i ++ ) {	len	EMPTY
428	320	2	-1	0	-1	if ( ( * out >> numconst ) != numconst ) {	out	EMPTY
428	322	2	-1	1	-1	return 0	EMPTY	EMPTY
428	323	3	-1	0	-1	}	EMPTY	EMPTY
428	326	1	0	0	-1	}	EMPTY	EMPTY
428	328	1	0	0	0	return numconst ;	EMPTY	EMPTY
428	329	3	-1	0	-1	}	EMPTY	EMPTY
428	331	1	0	0	-1	int cbs _ get _ optional _ asn1 ( cbs * cbs  cbs * out  int * out _ present  unsigned tag ) {	cbs _ get _ optional _ asn1 cbs out out _ present tag	EMPTY
428	332	3	-1	0	-1	int present = numconst ;	EMPTY	EMPTY
428	334	1	0	0	0	if ( cbs _ peek _ asn1 _ tag ( cbs  tag ) ) {	cbs _ peek _ asn1 _ tag cbs tag	EMPTY
428	335	2	-1	0	-1	if ( ! cbs _ get _ asn1 ( cbs  out  tag ) ) {	cbs _ get _ asn1 cbs out tag	EMPTY
428	336	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
428	337	2	-1	0	-1	}	EMPTY	EMPTY
428	338	2	-1	0	-1	present = numconst ;	EMPTY	EMPTY
428	339	3	-1	0	-1	}	EMPTY	EMPTY
428	341	1	0	0	0	if ( out _ present != null ) {	out _ present	EMPTY
428	343	1	0	0	-1	}	EMPTY	EMPTY
428	345	1	0	0	0	return numconst ;	EMPTY	EMPTY
428	346	3	-1	0	-1	}	EMPTY	EMPTY
428	348	1	0	0	-1	int cbs _ get _ optional _ asn1 _ octet _ string ( cbs * cbs  cbs * out  int * out _ present	cbs _ get _ optional _ asn1 _ octet _ string cbs out out _ present	EMPTY
428	349	2	-1	0	-1	unsigned tag ) {	tag	EMPTY
428	350	2	-1	0	-1	cbs child ;	child	EMPTY
428	351	2	-1	0	-1	int present ;	EMPTY	EMPTY
428	352	2	-1	0	-1	if ( ! cbs _ get _ optional _ asn1 ( cbs  & child  & present  tag ) ) {	cbs _ get _ optional _ asn1 cbs child tag	EMPTY
428	353	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
428	354	2	-1	0	-1	}	EMPTY	EMPTY
428	355	2	-1	0	-1	if ( present ) {	EMPTY	EMPTY
428	356	2	-1	0	-1	if ( ! cbs _ get _ asn1 ( & child  out  cbs _ asn1 _ octetstring ) ||	cbs _ get _ asn1 child out	EMPTY
428	357	2	-1	0	-1	cbs _ len ( & child ) != numconst ) {	cbs _ len child	EMPTY
428	358	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
428	359	2	-1	0	-1	}	EMPTY	EMPTY
428	360	2	-1	0	-1	}	EMPTY	EMPTY
428	361	2	-1	0	-1	cbs _ init ( out  null  numconst ) ;	cbs _ init out	EMPTY
428	362	2	-1	0	-1	}	EMPTY	EMPTY
428	363	3	-1	0	-1	if ( out _ present ) {	out _ present	EMPTY
428	365	1	0	0	-1	}	EMPTY	EMPTY
428	366	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
428	367	3	-1	0	-1	}	EMPTY	EMPTY
428	369	1	0	0	-1	int cbs _ get _ optional _ asn1 _ uint64 ( cbs * cbs  uint64 _ t * out  unsigned tag	cbs _ get _ optional _ asn1 _ uint64 cbs out tag	EMPTY
428	370	2	-1	0	-1	uint64 _ t default _ value ) {	EMPTY	EMPTY
428	371	2	-1	0	-1	cbs child ;	child	EMPTY
428	372	2	-1	0	-1	int present ;	EMPTY	EMPTY
428	373	2	-1	0	-1	if ( ! cbs _ get _ optional _ asn1 ( cbs  & child  & present  tag ) ) {	cbs _ get _ optional _ asn1 cbs child tag	EMPTY
428	374	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
428	375	2	-1	0	-1	}	EMPTY	EMPTY
428	376	2	-1	0	-1	if ( present ) {	EMPTY	EMPTY
428	377	2	-1	0	-1	if ( ! cbs _ get _ asn1 _ uint64 ( & child  out ) ||	cbs _ get _ asn1 _ uint64 child out	EMPTY
428	378	2	-1	0	-1	cbs _ len ( & child ) != numconst ) {	cbs _ len child	EMPTY
428	379	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
428	380	2	-1	0	-1	}	EMPTY	EMPTY
428	381	3	-1	0	-1	}	EMPTY	EMPTY
428	383	1	0	0	-1	}	EMPTY	EMPTY
428	384	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
428	385	3	-1	0	-1	}	EMPTY	EMPTY
428	387	1	0	0	-1	int cbs _ get _ optional _ asn1 _ bool ( cbs * cbs  int * out  unsigned tag	cbs _ get _ optional _ asn1 _ bool cbs out tag	EMPTY
428	388	2	-1	0	-1	int default _ value ) {	EMPTY	EMPTY
428	389	2	-1	0	-1	cbs child  child2 ;	child	EMPTY
428	390	2	-1	0	-1	int present ;	EMPTY	EMPTY
428	391	2	-1	0	-1	if ( ! cbs _ get _ optional _ asn1 ( cbs  & child  & present  tag ) ) {	cbs _ get _ optional _ asn1 cbs child tag	EMPTY
428	392	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
428	393	2	-1	0	-1	}	EMPTY	EMPTY
428	394	2	-1	0	-1	if ( present ) {	EMPTY	EMPTY
428	395	3	-1	0	-1	uint8 _ t boolean ;	EMPTY	EMPTY
428	397	1	0	0	0	if ( ! cbs _ get _ asn1 ( & child  & child2  cbs _ asn1 _ boolean ) ||	cbs _ get _ asn1 child	EMPTY
428	398	2	-1	0	-1	cbs _ len ( & child2 ) != numconst ||	cbs _ len	EMPTY
428	399	2	-1	0	-1	cbs _ len ( & child ) != numconst ) {	cbs _ len child	EMPTY
428	400	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
428	401	3	-1	0	-1	}	EMPTY	EMPTY
428	403	1	0	0	-1	boolean = cbs _ data ( & child2 ) [ numconst ] ;	cbs _ data	EMPTY
428	404	3	-1	0	-1	if ( boolean == numconst ) {	EMPTY	EMPTY
428	406	1	0	0	0	if ( boolean == numconst ) {	EMPTY	EMPTY
428	408	1	0	0	-1	} else {	EMPTY	EMPTY
428	409	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
428	410	2	-1	0	-1	}	EMPTY	EMPTY
428	411	3	-1	0	-1	}	EMPTY	EMPTY
428	413	1	0	0	-1	}	EMPTY	EMPTY
428	414	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
428	415	3	-1	0	-1	}	EMPTY	EMPTY
434	90	1	0	0	-1	static const size _ t ksizetwithoutlower4bits = ( size _ t ) - numconst ;	ksizetwithoutlower4bits	EMPTY
434	92	1	0	0	-1	static void gcm _ init _ 4bit ( u128 htable [ numconst ]  uint64 _ t h [ numconst ] ) {	u128 htable h	EMPTY
434	93	3	-1	0	-1	u128 v ;	u128	EMPTY
434	95	1	0	0	-1	htable [ 0 ] . hi = 0	htable hi	EMPTY
434	96	2	-1	0	-1	htable [ 0 ] . lo = 0	htable lo	EMPTY
434	97	2	-1	0	-1	v . hi = h [ 0 ]	hi h	EMPTY
434	98	3	-1	0	-1	v . lo = h [ 1 ]	lo h	EMPTY
434	100	1	0	0	-1	htable [ 8 ] = v	htable	EMPTY
434	101	2	-1	0	-1	reduce1bit ( v ) ;	EMPTY	EMPTY
434	102	2	-1	0	-1	htable [ 4 ] = v	htable	EMPTY
434	103	2	-1	0	-1	reduce1bit ( v ) ;	EMPTY	EMPTY
434	104	2	-1	0	-1	htable [ 2 ] = v	htable	EMPTY
434	105	2	-1	0	-1	reduce1bit ( v ) ;	EMPTY	EMPTY
434	106	2	-1	0	-1	htable [ 1 ] = v	htable	EMPTY
434	107	2	-1	0	-1	htable [ 3 ] . hi = v . hi ^ htable [ 2 ] . hi , htable [ 3 ] . lo = v . lo ^ htable [ 2 ] . lo	htable hi hi htable hi htable lo lo htable lo	EMPTY
434	108	2	-1	0	-1	v = htable [ 4 ]	htable	EMPTY
434	109	2	-1	0	-1	htable [ 5 ] . hi = v . hi ^ htable [ 1 ] . hi , htable [ 5 ] . lo = v . lo ^ htable [ 1 ] . lo	htable hi hi htable hi htable lo lo htable lo	EMPTY
434	110	2	-1	0	-1	htable [ 6 ] . hi = v . hi ^ htable [ 2 ] . hi , htable [ 6 ] . lo = v . lo ^ htable [ 2 ] . lo	htable hi hi htable hi htable lo lo htable lo	EMPTY
434	111	2	-1	0	-1	htable [ 7 ] . hi = v . hi ^ htable [ 3 ] . hi , htable [ 7 ] . lo = v . lo ^ htable [ 3 ] . lo	htable hi hi htable hi htable lo lo htable lo	EMPTY
434	112	2	-1	0	-1	v = htable [ 8 ]	htable	EMPTY
434	113	2	-1	0	-1	htable [ 9 ] . hi = v . hi ^ htable [ 1 ] . hi , htable [ 9 ] . lo = v . lo ^ htable [ 1 ] . lo	htable hi hi htable hi htable lo lo htable lo	EMPTY
434	114	2	-1	0	-1	htable [ 10 ] . hi = v . hi ^ htable [ 2 ] . hi , htable [ 10 ] . lo = v . lo ^ htable [ 2 ] . lo	htable hi hi htable hi htable lo lo htable lo	EMPTY
434	115	2	-1	0	-1	htable [ 11 ] . hi = v . hi ^ htable [ 3 ] . hi , htable [ 11 ] . lo = v . lo ^ htable [ 3 ] . lo	htable hi hi htable hi htable lo lo htable lo	EMPTY
434	116	2	-1	0	-1	htable [ 12 ] . hi = v . hi ^ htable [ 4 ] . hi , htable [ 12 ] . lo = v . lo ^ htable [ 4 ] . lo	htable hi hi htable hi htable lo lo htable lo	EMPTY
434	117	2	-1	0	-1	htable [ 13 ] . hi = v . hi ^ htable [ 5 ] . hi , htable [ 13 ] . lo = v . lo ^ htable [ 5 ] . lo	htable hi hi htable hi htable lo lo htable lo	EMPTY
434	118	2	-1	0	-1	htable [ 14 ] . hi = v . hi ^ htable [ 6 ] . hi , htable [ 14 ] . lo = v . lo ^ htable [ 6 ] . lo	htable hi hi htable hi htable lo lo htable lo	EMPTY
434	119	3	-1	0	-1	htable [ 15 ] . hi = v . hi ^ htable [ 7 ] . hi , htable [ 15 ] . lo = v . lo ^ htable [ 7 ] . lo	htable hi hi htable hi htable lo lo htable lo	EMPTY
434	121	1	1	0	-1	# if defined ( ghash _ asm ) && defined ( openssl _ arm )	EMPTY	EMPTY
434	123	2	-1	1	-1	{	EMPTY	EMPTY
434	124	2	-1	0	-1	int j ;	EMPTY	EMPTY
434	125	2	-1	0	-1	const union {	EMPTY	EMPTY
434	126	2	-1	0	-1	long one ;	EMPTY	EMPTY
434	127	2	-1	0	-1	char little ;	EMPTY	EMPTY
434	128	3	-1	0	-1	} is _ endian = { numconst } ;	EMPTY	EMPTY
434	130	1	0	0	-1	if ( is _ endian . little ) {	EMPTY	EMPTY
434	131	2	-1	0	-1	for ( j = numconst ; j < numconst ; ++ j ) {	EMPTY	EMPTY
434	132	2	-1	0	-1	v = htable [ j ] ;	htable	EMPTY
434	133	2	-1	0	-1	htable [ j ] . hi = v . lo ;	htable hi lo	EMPTY
434	134	2	-1	0	-1	htable [ j ] . lo = v . hi ;	htable lo hi	EMPTY
434	135	2	-1	0	-1	}	EMPTY	EMPTY
434	136	2	-1	0	-1	} else {	EMPTY	EMPTY
434	137	2	-1	0	-1	for ( j = numconst ; j < numconst ; ++ j ) {	EMPTY	EMPTY
434	138	2	-1	0	-1	v = htable [ j ] ;	htable	EMPTY
434	139	2	-1	0	-1	htable [ j ] . hi = v . lo << numconst | v . lo >> numconst ;	htable hi lo lo	EMPTY
434	140	2	-1	0	-1	htable [ j ] . lo = v . hi << numconst | v . hi >> numconst ;	htable lo hi hi	EMPTY
434	141	2	-1	0	-1	}	EMPTY	EMPTY
434	142	2	-1	0	-1	}	EMPTY	EMPTY
434	143	2	-1	0	-1	}	EMPTY	EMPTY
434	144	2	-1	0	-1	# endif	EMPTY	EMPTY
434	145	3	-1	0	-1	}	EMPTY	EMPTY
434	147	1	0	0	0	# if ! defined ( ghash _ asm ) || defined ( openssl _ aarch64	EMPTY	EMPTY
434	148	2	-1	0	-1	static const size _ t rem _ 4bit [ numconst ] = {	EMPTY	EMPTY
434	149	2	-1	0	-1	pack ( numconst )  pack ( numconst )  pack ( numconst )  pack ( numconst )	EMPTY	EMPTY
434	150	2	-1	0	-1	pack ( numconst )  pack ( numconst )  pack ( numconst )  pack ( numconst )	EMPTY	EMPTY
434	151	2	-1	0	-1	pack ( numconst )  pack ( numconst )  pack ( numconst )  pack ( numconst )	EMPTY	EMPTY
434	152	3	-1	0	-1	pack ( numconst )  pack ( numconst )  pack ( numconst )  pack ( numconst ) } ;	EMPTY	EMPTY
434	154	1	0	0	-1	static void gcm _ gmult _ 4bit ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ] ) {	xi u128 htable	EMPTY
434	155	2	-1	0	-1	u128 z ;	u128	EMPTY
434	156	2	-1	0	-1	int cnt = 15 ;	EMPTY	EMPTY
434	157	2	-1	0	-1	size _ t rem , nlo , nhi ;	EMPTY	EMPTY
434	158	2	-1	0	-1	const union {	EMPTY	EMPTY
434	159	2	-1	0	-1	long one ;	EMPTY	EMPTY
434	160	2	-1	0	-1	char little ;	EMPTY	EMPTY
434	161	3	-1	0	-1	} is _ endian = { 1 } ;	EMPTY	EMPTY
434	163	1	0	0	-1	nlo = ( ( const uint8 _ t * ) xi ) [ 15 ]	xi	EMPTY
434	164	2	-1	0	-1	nhi = nlo >> 4	EMPTY	EMPTY
434	165	3	-1	0	-1	nlo &= 0xf	EMPTY	EMPTY
434	167	1	0	0	-1	z . hi = htable [ nlo ] . hi	hi htable hi	EMPTY
434	168	3	-1	0	-1	z . lo = htable [ nlo ] . lo	lo htable lo	EMPTY
434	170	1	0	0	0	while ( 1 ) {	EMPTY	EMPTY
434	171	2	-1	0	-1	rem = ( size _ t ) z . lo & 0xf ;	lo	EMPTY
434	172	2	-1	0	-1	z . lo = ( z . hi << 60 ) | ( z . lo >> 4 ) ;	lo hi lo	EMPTY
434	173	2	-1	0	-1	z . hi = ( z . hi >> 4 ) ;	hi hi	EMPTY
434	174	2	-1	0	-1	if ( sizeof ( size _ t ) == 8 ) {	EMPTY	EMPTY
434	175	2	-1	0	-1	z . hi ^= rem _ 4bit [ rem ] ;	hi	EMPTY
434	176	2	-1	0	-1	} else {	EMPTY	EMPTY
434	177	2	-1	0	-1	z . hi ^= ( uint64 _ t ) rem _ 4bit [ rem ] << 32 ;	hi	EMPTY
434	178	3	-1	0	-1	}	EMPTY	EMPTY
434	180	1	0	0	-1	z . hi ^= htable [ nhi ] . hi ;	hi htable hi	EMPTY
434	181	3	-1	0	-1	z . lo ^= htable [ nhi ] . lo ;	lo htable lo	EMPTY
434	183	1	0	0	0	if ( -- cnt < 0 ) {	EMPTY	EMPTY
434	184	2	-1	0	-1	break ;	EMPTY	EMPTY
434	185	3	-1	0	-1	}	EMPTY	EMPTY
434	187	1	0	0	-1	nlo = ( ( const uint8 _ t * ) xi ) [ cnt ] ;	xi	EMPTY
434	188	2	-1	0	-1	nhi = nlo >> 4 ;	EMPTY	EMPTY
434	189	3	-1	0	-1	nlo &= 0xf ;	EMPTY	EMPTY
434	191	1	0	0	-1	rem = ( size _ t ) z . lo & 0xf ;	lo	EMPTY
434	192	2	-1	0	-1	z . lo = ( z . hi << 60 ) | ( z . lo >> 4 ) ;	lo hi lo	EMPTY
434	193	2	-1	0	-1	z . hi = ( z . hi >> 4 ) ;	hi hi	EMPTY
434	194	2	-1	0	-1	if ( sizeof ( size _ t ) == 8 ) {	EMPTY	EMPTY
434	195	2	-1	0	-1	z . hi ^= rem _ 4bit [ rem ] ;	hi	EMPTY
434	196	2	-1	0	-1	} else {	EMPTY	EMPTY
434	197	2	-1	0	-1	z . hi ^= ( uint64 _ t ) rem _ 4bit [ rem ] << 32 ;	hi	EMPTY
434	198	3	-1	0	-1	}	EMPTY	EMPTY
434	200	1	0	0	-1	z . hi ^= htable [ nlo ] . hi ;	hi htable hi	EMPTY
434	201	2	-1	0	-1	z . lo ^= htable [ nlo ] . lo ;	lo htable lo	EMPTY
434	202	3	-1	0	-1	}	EMPTY	EMPTY
434	204	1	0	0	0	if ( is _ endian . little ) {	EMPTY	EMPTY
434	205	2	-1	0	-1	# ifdef bswap8	EMPTY	EMPTY
434	206	2	-1	0	-1	xi [ 0 ] = bswap8 ( z . hi ) ;	xi hi	EMPTY
434	207	2	-1	0	-1	xi [ 1 ] = bswap8 ( z . lo ) ;	xi lo	EMPTY
434	208	2	-1	0	-1	# else	EMPTY	EMPTY
434	209	2	-1	0	-1	uint8 _ t * p = ( uint8 _ t * ) xi ;	xi	EMPTY
434	210	2	-1	0	-1	uint32 _ t v ;	EMPTY	EMPTY
434	211	2	-1	0	-1	v = ( uint32 _ t ) ( z . hi >> 32 ) ;	hi	EMPTY
434	212	2	-1	0	-1	putu32 ( p , v ) ;	EMPTY	EMPTY
434	213	2	-1	0	-1	v = ( uint32 _ t ) ( z . hi ) ;	hi	EMPTY
434	214	2	-1	0	-1	putu32 ( p + 4 , v ) ;	EMPTY	EMPTY
434	215	2	-1	0	-1	v = ( uint32 _ t ) ( z . lo >> 32 ) ;	lo	EMPTY
434	216	2	-1	0	-1	putu32 ( p + 8 , v ) ;	EMPTY	EMPTY
434	217	2	-1	0	-1	v = ( uint32 _ t ) ( z . lo ) ;	lo	EMPTY
434	218	2	-1	0	-1	putu32 ( p + 12 , v ) ;	EMPTY	EMPTY
434	219	2	-1	0	-1	# endif	EMPTY	EMPTY
434	220	2	-1	0	-1	} else {	EMPTY	EMPTY
434	221	2	-1	0	-1	xi [ 0 ] = z . hi ;	xi hi	EMPTY
434	222	2	-1	0	-1	xi [ 1 ] = z . lo ;	xi lo	EMPTY
434	223	2	-1	0	-1	}	EMPTY	EMPTY
434	224	3	-1	0	-1	}	EMPTY	EMPTY
434	231	1	0	0	-1	static void gcm _ ghash _ 4bit ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ]  const uint8 _ t * inp	gcm _ ghash _ 4bit xi u128 htable inp	EMPTY
434	232	2	-1	0	-1	size _ t len ) {	len	EMPTY
434	233	2	-1	0	-1	u128 z ;	u128	EMPTY
434	234	2	-1	0	-1	int cnt ;	EMPTY	EMPTY
434	235	2	-1	0	-1	size _ t rem , nlo , nhi ;	EMPTY	EMPTY
434	236	2	-1	0	-1	const union {	EMPTY	EMPTY
434	237	2	-1	0	-1	long one ;	EMPTY	EMPTY
434	238	2	-1	0	-1	char little ;	EMPTY	EMPTY
434	239	3	-1	0	-1	} is _ endian = { 1 } ;	EMPTY	EMPTY
434	241	1	0	0	-1	do {	EMPTY	EMPTY
434	242	2	-1	0	-1	cnt = 15 ;	EMPTY	EMPTY
434	243	2	-1	0	-1	nlo = ( ( const uint8 _ t * ) xi ) [ 15 ] ;	xi	EMPTY
434	244	2	-1	0	-1	nlo ^= inp [ 15 ] ;	inp	EMPTY
434	245	2	-1	0	-1	nhi = nlo >> 4 ;	EMPTY	EMPTY
434	246	3	-1	0	-1	nlo &= 0xf ;	EMPTY	EMPTY
434	248	1	0	0	-1	z . hi = htable [ nlo ] . hi ;	hi htable hi	EMPTY
434	249	3	-1	0	-1	z . lo = htable [ nlo ] . lo ;	lo htable lo	EMPTY
434	251	1	0	0	0	while ( 1 ) {	EMPTY	EMPTY
434	252	2	-1	0	-1	rem = ( size _ t ) z . lo & 0xf ;	lo	EMPTY
434	253	2	-1	0	-1	z . lo = ( z . hi << 60 ) | ( z . lo >> 4 ) ;	lo hi lo	EMPTY
434	254	2	-1	0	-1	z . hi = ( z . hi >> 4 ) ;	hi hi	EMPTY
434	255	2	-1	0	-1	if ( sizeof ( size _ t ) == 8 ) {	EMPTY	EMPTY
434	256	2	-1	0	-1	z . hi ^= rem _ 4bit [ rem ] ;	hi	EMPTY
434	257	2	-1	0	-1	} else {	EMPTY	EMPTY
434	258	2	-1	0	-1	z . hi ^= ( uint64 _ t ) rem _ 4bit [ rem ] << 32 ;	hi	EMPTY
434	259	3	-1	0	-1	}	EMPTY	EMPTY
434	261	1	0	0	-1	z . hi ^= htable [ nhi ] . hi ;	hi htable hi	EMPTY
434	262	3	-1	0	-1	z . lo ^= htable [ nhi ] . lo ;	lo htable lo	EMPTY
434	264	1	0	0	0	if ( -- cnt < 0 ) {	EMPTY	EMPTY
434	265	2	-1	0	-1	break ;	EMPTY	EMPTY
434	266	3	-1	0	-1	}	EMPTY	EMPTY
434	268	1	0	0	-1	nlo = ( ( const uint8 _ t * ) xi ) [ cnt ] ;	xi	EMPTY
434	269	2	-1	0	-1	nlo ^= inp [ cnt ] ;	inp	EMPTY
434	270	2	-1	0	-1	nhi = nlo >> 4 ;	EMPTY	EMPTY
434	271	3	-1	0	-1	nlo &= 0xf ;	EMPTY	EMPTY
434	273	1	0	0	-1	rem = ( size _ t ) z . lo & 0xf ;	lo	EMPTY
434	274	2	-1	0	-1	z . lo = ( z . hi << 60 ) | ( z . lo >> 4 ) ;	lo hi lo	EMPTY
434	275	2	-1	0	-1	z . hi = ( z . hi >> 4 ) ;	hi hi	EMPTY
434	276	2	-1	0	-1	if ( sizeof ( size _ t ) == 8 ) {	EMPTY	EMPTY
434	277	2	-1	0	-1	z . hi ^= rem _ 4bit [ rem ] ;	hi	EMPTY
434	278	2	-1	0	-1	} else {	EMPTY	EMPTY
434	279	2	-1	0	-1	z . hi ^= ( uint64 _ t ) rem _ 4bit [ rem ] << 32 ;	hi	EMPTY
434	280	3	-1	0	-1	}	EMPTY	EMPTY
434	282	1	0	0	-1	z . hi ^= htable [ nlo ] . hi ;	hi htable hi	EMPTY
434	283	2	-1	0	-1	z . lo ^= htable [ nlo ] . lo ;	lo htable lo	EMPTY
434	284	3	-1	0	-1	}	EMPTY	EMPTY
434	286	1	1	0	1	if ( is _ endian . little ) {	EMPTY	EMPTY
434	287	2	-1	0	-1	# ifdef bswap8	EMPTY	EMPTY
434	288	2	-1	0	-1	xi [ 0 ] = bswap8 ( z . hi ) ;	xi hi	EMPTY
434	289	2	-1	0	-1	xi [ 1 ] = bswap8 ( z . lo ) ;	xi lo	EMPTY
434	290	2	-1	0	-1	# else	EMPTY	EMPTY
434	291	2	-1	0	-1	uint8 _ t * p = ( uint8 _ t * ) xi ;	xi	EMPTY
434	292	2	-1	0	-1	uint32 _ t v ;	EMPTY	EMPTY
434	293	2	-1	0	-1	v = ( uint32 _ t ) ( z . hi >> 32 ) ;	hi	EMPTY
434	294	2	-1	0	-1	putu32 ( p , v ) ;	EMPTY	EMPTY
434	295	2	-1	0	-1	v = ( uint32 _ t ) ( z . hi ) ;	hi	EMPTY
434	296	2	-1	0	-1	putu32 ( p + 4 , v ) ;	EMPTY	EMPTY
434	297	2	-1	0	-1	v = ( uint32 _ t ) ( z . lo >> 32 ) ;	lo	EMPTY
434	298	2	-1	0	-1	putu32 ( p + 8 , v ) ;	EMPTY	EMPTY
434	299	2	-1	0	-1	v = ( uint32 _ t ) ( z . lo ) ;	lo	EMPTY
434	300	2	-1	0	-1	putu32 ( p + 12 , v ) ;	EMPTY	EMPTY
434	301	2	-1	0	-1	# endif	EMPTY	EMPTY
434	302	2	-1	0	-1	} else {	EMPTY	EMPTY
434	303	2	-1	0	-1	xi [ 0 ] = z . hi ;	xi hi	EMPTY
434	304	2	-1	0	-1	xi [ 1 ] = z . lo ;	xi lo	EMPTY
434	305	2	-1	0	-1	}	EMPTY	EMPTY
434	306	2	-1	0	-1	} while ( inp += 16 , len -= 16 )	inp len	EMPTY
434	307	2	-1	0	-1	}	EMPTY	EMPTY
434	308	2	-1	1	-1	# else	EMPTY	EMPTY
434	309	2	-1	0	-1	void gcm _ gmult _ 4bit ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ] ) ;	xi u128 htable	EMPTY
434	310	2	-1	0	-1	void gcm _ ghash _ 4bit ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ]  const uint8 _ t * inp	gcm _ ghash _ 4bit xi u128 htable inp	EMPTY
434	311	2	-1	0	-1	size _ t len ) ;	len	EMPTY
434	312	3	-1	0	-1	# endif	EMPTY	EMPTY
434	314	1	1	0	-1	# define gcm _ mul ( ctx  xi ) gcm _ gmult _ 4bit ( ctx -> xi . u  ctx -> htable )	ctx xi ctx xi ctx htable	EMPTY
434	315	2	-1	0	-1	# if defined ( ghash _ asm )	EMPTY	EMPTY
434	316	2	-1	0	-1	# define ghash ( ctx  in  len ) gcm _ ghash _ 4bit ( ( ctx ) -> xi . u  ( ctx ) -> htable  in  len )	ctx in len gcm _ ghash _ 4bit ctx xi ctx htable in len	EMPTY
434	320	2	-1	1	-1	# define ghash _ chunk ( numconst * numconst )	EMPTY	EMPTY
434	321	3	-1	0	-1	# endif	EMPTY	EMPTY
434	324	1	0	0	-1	# if defined ( ghash _ asm )	EMPTY	EMPTY
434	325	2	-1	0	-1	# if defined ( openssl _ x86 ) || defined ( openssl _ x86 _ 64 )	EMPTY	EMPTY
434	326	2	-1	0	-1	# define ghash _ asm _ x86 _ or _ 64	EMPTY	EMPTY
434	327	2	-1	0	-1	# define gcm _ funcref _ 4bit	EMPTY	EMPTY
434	328	2	-1	0	-1	void gcm _ init _ clmul ( u128 htable [ numconst ]  const uint64 _ t xi [ numconst ] ) ;	u128 htable xi	EMPTY
434	329	2	-1	0	-1	void gcm _ gmult _ clmul ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ] ) ;	xi u128 htable	EMPTY
434	330	2	-1	0	-1	void gcm _ ghash _ clmul ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ]  const uint8 _ t * inp	xi u128 htable inp	EMPTY
434	331	3	-1	0	-1	size _ t len ) ;	len	EMPTY
434	333	1	0	0	-1	# if defined ( openssl _ x86 )	EMPTY	EMPTY
434	334	2	-1	0	-1	# define gcm _ init _ avx gcm _ init _ clmul	EMPTY	EMPTY
434	335	2	-1	0	-1	# define gcm _ gmult _ avx gcm _ gmult _ clmul	EMPTY	EMPTY
434	336	2	-1	0	-1	# define gcm _ ghash _ avx gcm _ ghash _ clmul	EMPTY	EMPTY
434	337	2	-1	0	-1	# else	EMPTY	EMPTY
434	338	2	-1	0	-1	void gcm _ init _ avx ( u128 htable [ numconst ]  const uint64 _ t xi [ numconst ] ) ;	u128 htable xi	EMPTY
434	339	2	-1	0	-1	void gcm _ gmult _ avx ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ] ) ;	xi u128 htable	EMPTY
434	340	2	-1	0	-1	void gcm _ ghash _ avx ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ]  const uint8 _ t * inp  size _ t len ) ;	xi u128 htable inp len	EMPTY
434	341	3	-1	0	-1	# endif	EMPTY	EMPTY
434	343	1	0	0	-1	# if defined ( openssl _ x86 )	EMPTY	EMPTY
434	344	2	-1	0	-1	# define ghash _ asm _ x86	EMPTY	EMPTY
434	345	2	-1	0	-1	void gcm _ gmult _ 4bit _ mmx ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ] ) ;	xi u128 htable	EMPTY
434	346	2	-1	0	-1	void gcm _ ghash _ 4bit _ mmx ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ]  const uint8 _ t * inp	xi u128 htable inp	EMPTY
434	347	3	-1	0	-1	size _ t len ) ;	len	EMPTY
434	349	1	0	0	-1	void gcm _ gmult _ 4bit _ x86 ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ] ) ;	xi u128 htable	EMPTY
434	350	2	-1	0	-1	void gcm _ ghash _ 4bit _ x86 ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ]  const uint8 _ t * inp	xi u128 htable inp	EMPTY
434	351	2	-1	0	-1	size _ t len ) ;	len	EMPTY
434	352	2	-1	0	-1	# endif	EMPTY	EMPTY
434	353	2	-1	0	-1	# elif defined ( openssl _ arm ) || defined ( openssl _ aarch64 )	EMPTY	EMPTY
434	354	2	-1	0	-1	# include < openssl / arm _ arch . h >	EMPTY	EMPTY
434	355	2	-1	0	-1	# if  _  _ arm _ arch _  _  >= numconst	EMPTY	EMPTY
434	356	2	-1	0	-1	# define ghash _ asm _ arm	EMPTY	EMPTY
434	357	3	-1	0	-1	# define gcm _ funcref _ 4bit	EMPTY	EMPTY
434	359	1	0	0	-1	static int pmull _ capable ( void ) {	EMPTY	EMPTY
434	360	2	-1	0	-1	return crypto _ is _ armv8 _ pmull _ capable ( ) ;	EMPTY	EMPTY
434	361	3	-1	0	-1	}	EMPTY	EMPTY
434	363	1	0	0	-1	void gcm _ init _ v8 ( u128 htable [ numconst ]  const uint64 _ t xi [ numconst ] ) ;	u128 htable xi	EMPTY
434	364	2	-1	0	-1	void gcm _ gmult _ v8 ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ] ) ;	xi u128 htable	EMPTY
434	365	2	-1	0	-1	void gcm _ ghash _ v8 ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ]  const uint8 _ t * inp	xi u128 htable inp	EMPTY
434	366	3	-1	0	-1	size _ t len ) ;	len	EMPTY
434	368	1	1	0	-1	# if defined ( openssl _ arm )	EMPTY	EMPTY
434	370	2	-1	1	-1	static int neon _ capable ( void ) {	EMPTY	EMPTY
434	371	2	-1	0	-1	return crypto _ is _ neon _ capable ( ) ;	EMPTY	EMPTY
434	372	3	-1	0	-1	}	EMPTY	EMPTY
434	374	1	1	0	-1	void gcm _ init _ neon ( u128 htable [ numconst ]  const uint64 _ t xi [ numconst ] ) ;	u128 htable xi	EMPTY
434	375	2	-1	0	-1	void gcm _ gmult _ neon ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ] ) ;	xi u128 htable	EMPTY
434	376	2	-1	0	-1	void gcm _ ghash _ neon ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ]  const uint8 _ t * inp	xi u128 htable inp	EMPTY
434	377	2	-1	0	-1	size _ t len ) ;	len	EMPTY
434	378	2	-1	0	-1	# else	EMPTY	EMPTY
434	380	2	-1	1	-1	static int neon _ capable ( void ) {	EMPTY	EMPTY
434	381	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
434	382	2	-1	0	-1	}	EMPTY	EMPTY
434	383	2	-1	0	-1	void gcm _ init _ neon ( u128 htable [ numconst ]  const uint64 _ t xi [ numconst ] ) {	u128 htable xi	EMPTY
434	384	2	-1	0	-1	abort ( ) ;	EMPTY	EMPTY
434	385	2	-1	0	-1	}	EMPTY	EMPTY
434	386	2	-1	0	-1	void gcm _ gmult _ neon ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ] ) {	xi u128 htable	EMPTY
434	387	2	-1	0	-1	abort ( ) ;	EMPTY	EMPTY
434	388	2	-1	0	-1	}	EMPTY	EMPTY
434	389	2	-1	0	-1	void gcm _ ghash _ neon ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ]  const uint8 _ t * inp	xi u128 htable inp	EMPTY
434	390	2	-1	0	-1	size _ t len ) {	len	EMPTY
434	391	2	-1	0	-1	abort ( ) ;	EMPTY	EMPTY
434	392	2	-1	0	-1	}	EMPTY	EMPTY
434	393	3	-1	0	-1	# endif	EMPTY	EMPTY
434	395	1	0	0	-1	# endif	EMPTY	EMPTY
434	396	2	-1	0	-1	# endif	EMPTY	EMPTY
434	397	3	-1	0	-1	# endif	EMPTY	EMPTY
434	399	1	0	0	-1	# ifdef gcm _ funcref _ 4bit	EMPTY	EMPTY
434	400	2	-1	0	-1	# undef gcm _ mul	EMPTY	EMPTY
434	401	2	-1	0	-1	# define gcm _ mul ( ctx  xi ) ( * gcm _ gmult _ p ) ( ctx -> xi . u  ctx -> htable )	ctx xi ctx xi ctx htable	EMPTY
434	402	2	-1	0	-1	# ifdef ghash	EMPTY	EMPTY
434	403	2	-1	0	-1	# undef ghash	EMPTY	EMPTY
434	404	2	-1	0	-1	# define ghash ( ctx  in  len ) ( * gcm _ ghash _ p ) ( ctx -> xi . u  ctx -> htable  in  len )	ctx in len ctx xi ctx htable in len	EMPTY
434	405	2	-1	0	-1	# endif	EMPTY	EMPTY
434	406	3	-1	0	-1	# endif	EMPTY	EMPTY
434	408	1	0	0	-1	gcm128 _ context * crypto _ gcm128 _ new ( const void * key  block128 _ f block ) {	crypto _ gcm128 _ new key block128 _ f	EMPTY
434	409	3	-1	0	-1	gcm128 _ context * ret ;	EMPTY	EMPTY
434	411	1	0	0	-1	ret = ( gcm128 _ context * ) openssl _ malloc ( sizeof ( gcm128 _ context ) )	EMPTY	EMPTY
434	412	2	-1	0	-1	if ( ret != null ) {	EMPTY	EMPTY
434	413	2	-1	0	-1	crypto _ gcm128 _ init ( ret , key , block ) ;	crypto _ gcm128 _ init key	EMPTY
434	414	3	-1	0	-1	}	EMPTY	EMPTY
434	416	1	0	0	0	return ret	EMPTY	EMPTY
434	417	3	-1	0	-1	}	EMPTY	EMPTY
434	419	1	0	0	-1	void crypto _ gcm128 _ init ( gcm128 _ context * ctx  const void * key	crypto _ gcm128 _ init ctx key	EMPTY
434	420	2	-1	0	-1	block128 _ f block ) {	block128 _ f	EMPTY
434	421	2	-1	0	-1	const union {	EMPTY	EMPTY
434	422	2	-1	0	-1	long one ;	EMPTY	EMPTY
434	423	2	-1	0	-1	char little ;	EMPTY	EMPTY
434	424	3	-1	0	-1	} is _ endian = { 1 } ;	EMPTY	EMPTY
434	426	1	0	0	0	memset ( ctx  numconst  sizeof ( * ctx ) ) ;	ctx ctx	EMPTY
434	427	3	-1	0	-1	ctx -> block = block	ctx	EMPTY
434	429	1	0	0	0	( * block ) ( ctx -> h . c , ctx -> h . c , key )	ctx h ctx h key	EMPTY
434	431	1	1	0	1	if ( is _ endian . little ) {	EMPTY	EMPTY
434	433	2	-1	1	-1	# ifdef bswap8	EMPTY	EMPTY
434	434	2	-1	0	-1	ctx -> h . u [ numconst ] = bswap8 ( ctx -> h . u [ numconst ] ) ;	ctx h ctx h	EMPTY
434	435	2	-1	0	-1	ctx -> h . u [ numconst ] = bswap8 ( ctx -> h . u [ numconst ] ) ;	ctx h ctx h	EMPTY
434	436	2	-1	0	-1	# else	EMPTY	EMPTY
434	437	2	-1	0	-1	uint8 _ t * p = ctx -> h . c ;	ctx h	EMPTY
434	438	2	-1	0	-1	uint64 _ t hi , lo ;	hi lo	EMPTY
434	439	2	-1	0	-1	hi = ( uint64 _ t ) getu32 ( p ) << numconst | getu32 ( p + numconst ) ;	hi	EMPTY
434	440	2	-1	0	-1	lo = ( uint64 _ t ) getu32 ( p + numconst ) << numconst | getu32 ( p + numconst ) ;	lo	EMPTY
434	441	2	-1	0	-1	ctx -> h . u [ 0 ] = hi	ctx h hi	EMPTY
434	442	2	-1	0	-1	ctx -> h . u [ 1 ] = lo	ctx h lo	EMPTY
434	443	2	-1	0	-1	# endif	EMPTY	EMPTY
434	444	3	-1	0	-1	}	EMPTY	EMPTY
434	446	1	1	0	-1	# if defined ( ghash _ asm _ x86 _ or _ 64 )	EMPTY	EMPTY
434	447	2	-1	0	-1	if ( crypto _ gcm _ clmul _ enabled ( ) ) {	crypto _ gcm _ clmul _ enabled	EMPTY
434	448	2	-1	1	-1	if ( ( ( openssl _ ia32cap _ p [ numconst ] >> numconst ) & numconst ) == numconst ) {	openssl _ ia32cap _ p	EMPTY
434	449	2	-1	0	-1	gcm _ init _ avx ( ctx -> htable  ctx -> h . u ) ;	ctx htable ctx h	EMPTY
434	450	2	-1	0	-1	ctx -> gmult = gcm _ gmult _ avx ;	ctx	EMPTY
434	451	2	-1	0	-1	ctx -> ghash = gcm _ ghash _ avx ;	ctx	EMPTY
434	452	2	-1	0	-1	} else {	EMPTY	EMPTY
434	453	2	-1	0	-1	gcm _ init _ clmul ( ctx -> htable  ctx -> h . u ) ;	ctx htable ctx h	EMPTY
434	454	2	-1	0	-1	ctx -> gmult = gcm _ gmult _ clmul ;	ctx	EMPTY
434	455	2	-1	0	-1	ctx -> ghash = gcm _ ghash _ clmul ;	ctx	EMPTY
434	456	2	-1	0	-1	}	EMPTY	EMPTY
434	457	2	-1	0	-1	return ;	EMPTY	EMPTY
434	458	2	-1	0	-1	}	EMPTY	EMPTY
434	459	2	-1	0	-1	gcm _ init _ 4bit ( ctx -> htable  ctx -> h . u ) ;	ctx htable ctx h	EMPTY
434	460	2	-1	1	-1	# if defined ( ghash _ asm _ x86 )	EMPTY	EMPTY
434	461	2	-1	1	-1	if ( openssl _ ia32cap _ p [ numconst ] & ( numconst << numconst ) ) {	openssl _ ia32cap _ p	EMPTY
434	462	2	-1	0	-1	ctx -> gmult = gcm _ gmult _ 4bit _ mmx ;	ctx	EMPTY
434	463	2	-1	0	-1	ctx -> ghash = gcm _ ghash _ 4bit _ mmx ;	ctx	EMPTY
434	464	2	-1	0	-1	} else {	EMPTY	EMPTY
434	465	2	-1	0	-1	ctx -> gmult = gcm _ gmult _ 4bit _ x86 ;	ctx	EMPTY
434	466	2	-1	0	-1	ctx -> ghash = gcm _ ghash _ 4bit _ x86 ;	ctx	EMPTY
434	467	2	-1	0	-1	}	EMPTY	EMPTY
434	468	2	-1	0	-1	# else	EMPTY	EMPTY
434	469	2	-1	0	-1	ctx -> gmult = gcm _ gmult _ 4bit ;	ctx	EMPTY
434	470	2	-1	0	-1	ctx -> ghash = gcm _ ghash _ 4bit ;	ctx gcm _ ghash _ 4bit	EMPTY
434	471	2	-1	0	-1	# endif	EMPTY	EMPTY
434	472	2	-1	0	-1	# elif defined ( ghash _ asm _ arm )	EMPTY	EMPTY
434	473	2	-1	0	-1	if ( pmull _ capable ( ) ) {	EMPTY	EMPTY
434	474	2	-1	0	-1	gcm _ init _ v8 ( ctx -> htable  ctx -> h . u ) ;	ctx htable ctx h	EMPTY
434	475	3	-1	0	-1	ctx -> gmult = gcm _ gmult _ v8 ;	ctx	EMPTY
434	476	1	0	0	-1	ctx -> ghash = gcm _ ghash _ v8 ;	ctx	EMPTY
434	477	2	-1	0	-1	} else if ( neon _ capable ( ) ) {	EMPTY	EMPTY
434	478	2	-1	0	-1	gcm _ init _ neon ( ctx -> htable  ctx -> h . u ) ;	ctx htable ctx h	EMPTY
434	479	2	-1	0	-1	ctx -> gmult = gcm _ gmult _ neon ;	ctx	EMPTY
434	480	2	-1	0	-1	ctx -> ghash = gcm _ ghash _ neon ;	ctx	EMPTY
434	481	2	-1	0	-1	} else {	EMPTY	EMPTY
434	482	2	-1	0	-1	gcm _ init _ 4bit ( ctx -> htable  ctx -> h . u ) ;	ctx htable ctx h	EMPTY
434	483	2	-1	0	-1	ctx -> gmult = gcm _ gmult _ 4bit ;	ctx	EMPTY
434	484	2	-1	0	-1	ctx -> ghash = gcm _ ghash _ 4bit ;	ctx gcm _ ghash _ 4bit	EMPTY
434	485	2	-1	0	-1	}	EMPTY	EMPTY
434	486	2	-1	0	-1	# else	EMPTY	EMPTY
434	487	2	-1	0	-1	gcm _ init _ 4bit ( ctx -> htable  ctx -> h . u ) ;	ctx htable ctx h	EMPTY
434	488	2	-1	0	-1	ctx -> gmult = gcm _ gmult _ 4bit ;	ctx	EMPTY
434	489	2	-1	0	-1	ctx -> ghash = gcm _ ghash _ 4bit ;	ctx gcm _ ghash _ 4bit	EMPTY
434	490	2	-1	0	-1	# endif	EMPTY	EMPTY
434	491	3	-1	0	-1	}	EMPTY	EMPTY
434	493	1	0	0	-1	void crypto _ gcm128 _ setiv ( gcm128 _ context * ctx  const void * key	crypto _ gcm128 _ setiv ctx key	EMPTY
434	494	2	-1	0	-1	const uint8 _ t * iv  size _ t len ) {	len	EMPTY
434	495	2	-1	0	-1	union {	EMPTY	EMPTY
434	496	2	-1	0	-1	long one ;	EMPTY	EMPTY
434	497	2	-1	0	-1	char little ;	EMPTY	EMPTY
434	498	2	-1	0	-1	} is _ endian = { numconst } ;	EMPTY	EMPTY
434	499	2	-1	0	-1	unsigned int ctr ;	EMPTY	EMPTY
434	500	2	-1	0	-1	# ifdef gcm _ funcref _ 4bit	EMPTY	EMPTY
434	501	2	-1	0	-1	void ( * gcm _ gmult _ p ) ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ] ) = ctx -> gmult ;	xi u128 htable ctx	EMPTY
434	502	3	-1	0	-1	# endif	EMPTY	EMPTY
434	504	1	1	0	-1	ctx -> yi . u [ numconst ] = numconst ;	ctx yi	EMPTY
434	505	2	-1	0	-1	ctx -> yi . u [ numconst ] = numconst ;	ctx yi	EMPTY
434	506	2	-1	0	-1	ctx -> xi . u [ numconst ] = numconst ;	ctx xi	EMPTY
434	507	2	-1	0	-1	ctx -> xi . u [ numconst ] = numconst ;	ctx xi	EMPTY
434	508	2	-1	1	-1	ctx -> len . u [ numconst ] = numconst ;	ctx len	EMPTY
434	509	2	-1	1	-1	ctx -> len . u [ 1 ] = 0	ctx len	EMPTY
434	510	2	-1	0	-1	ctx -> ares = 0	ctx	EMPTY
434	511	3	-1	0	-1	ctx -> mres = 0	ctx	EMPTY
434	513	1	0	0	0	if ( len == 12 ) {	len	EMPTY
434	514	2	-1	0	-1	memcpy ( ctx -> yi . c , iv , 12 ) ;	ctx yi	EMPTY
434	515	2	-1	0	-1	ctx -> yi . c [ 15 ] = 1 ;	ctx yi	EMPTY
434	516	2	-1	0	-1	ctr = 1 ;	EMPTY	EMPTY
434	517	2	-1	0	-1	} else {	EMPTY	EMPTY
434	518	2	-1	0	-1	size _ t i ;	EMPTY	EMPTY
434	519	3	-1	0	-1	uint64 _ t len0 = len ;	len	EMPTY
434	521	1	0	0	0	while ( len >= 16 ) {	len	EMPTY
434	522	2	-1	0	-1	for ( i = 0 ; i < 16 ; ++ i ) {	EMPTY	EMPTY
434	523	2	-1	0	-1	ctx -> yi . c [ i ] ^= iv [ i ] ;	ctx yi	EMPTY
434	524	2	-1	0	-1	}	EMPTY	EMPTY
434	525	2	-1	0	-1	gcm _ mul ( ctx , yi ) ;	ctx yi	EMPTY
434	526	2	-1	0	-1	iv += 16 ;	EMPTY	EMPTY
434	527	2	-1	0	-1	len -= 16 ;	len	EMPTY
434	528	2	-1	0	-1	}	EMPTY	EMPTY
434	529	2	-1	0	-1	if ( len ) {	len	EMPTY
434	530	2	-1	0	-1	for ( i = 0 ; i < len ; ++ i ) {	len	EMPTY
434	531	2	-1	0	-1	ctx -> yi . c [ i ] ^= iv [ i ] ;	ctx yi	EMPTY
434	532	2	-1	0	-1	}	EMPTY	EMPTY
434	533	2	-1	0	-1	gcm _ mul ( ctx , yi ) ;	ctx yi	EMPTY
434	534	2	-1	0	-1	}	EMPTY	EMPTY
434	535	2	-1	0	-1	len0 <<= 3 ;	EMPTY	EMPTY
434	536	2	-1	0	-1	if ( is _ endian . little ) {	EMPTY	EMPTY
434	537	2	-1	0	-1	# ifdef bswap8	EMPTY	EMPTY
434	538	2	-1	0	-1	ctx -> yi . u [ 1 ] ^= bswap8 ( len0 ) ;	ctx yi	EMPTY
434	539	2	-1	0	-1	# else	EMPTY	EMPTY
434	540	2	-1	0	-1	ctx -> yi . c [ 8 ] ^= ( uint8 _ t ) ( len0 >> 56 ) ;	ctx yi	EMPTY
434	541	2	-1	0	-1	ctx -> yi . c [ 9 ] ^= ( uint8 _ t ) ( len0 >> 48 ) ;	ctx yi	EMPTY
434	542	2	-1	0	-1	ctx -> yi . c [ 10 ] ^= ( uint8 _ t ) ( len0 >> 40 ) ;	ctx yi	EMPTY
434	543	2	-1	0	-1	ctx -> yi . c [ 11 ] ^= ( uint8 _ t ) ( len0 >> 32 ) ;	ctx yi	EMPTY
434	544	2	-1	0	-1	ctx -> yi . c [ 12 ] ^= ( uint8 _ t ) ( len0 >> 24 ) ;	ctx yi	EMPTY
434	545	2	-1	0	-1	ctx -> yi . c [ 13 ] ^= ( uint8 _ t ) ( len0 >> 16 ) ;	ctx yi	EMPTY
434	546	2	-1	0	-1	ctx -> yi . c [ 14 ] ^= ( uint8 _ t ) ( len0 >> 8 ) ;	ctx yi	EMPTY
434	547	2	-1	0	-1	ctx -> yi . c [ 15 ] ^= ( uint8 _ t ) ( len0 ) ;	ctx yi	EMPTY
434	548	2	-1	0	-1	# endif	EMPTY	EMPTY
434	549	2	-1	0	-1	} else {	EMPTY	EMPTY
434	550	3	-1	0	-1	ctx -> yi . u [ 1 ] ^= len0 ;	ctx yi	EMPTY
434	551	1	0	0	-1	}	EMPTY	EMPTY
434	553	1	0	0	0	gcm _ mul ( ctx , yi ) ;	ctx yi	EMPTY
434	555	1	0	0	0	if ( is _ endian . little ) {	EMPTY	EMPTY
434	556	2	-1	0	-1	ctr = getu32 ( ctx -> yi . c + 12 ) ;	ctx yi	EMPTY
434	557	2	-1	0	-1	} else {	EMPTY	EMPTY
434	558	2	-1	0	-1	ctr = ctx -> yi . d [ 3 ] ;	ctx yi	EMPTY
434	559	2	-1	0	-1	}	EMPTY	EMPTY
434	560	3	-1	0	-1	}	EMPTY	EMPTY
434	562	1	0	0	0	( * ctx -> block ) ( ctx -> yi . c , ctx -> ek0 . c , key )	ctx ctx yi ctx ek0 key	EMPTY
434	563	2	-1	0	-1	++ ctr	EMPTY	EMPTY
434	564	2	-1	0	-1	if ( is _ endian . little ) {	EMPTY	EMPTY
434	565	2	-1	0	-1	putu32 ( ctx -> yi . c + 12 , ctr ) ;	ctx yi	EMPTY
434	566	2	-1	0	-1	} else {	EMPTY	EMPTY
434	567	2	-1	0	-1	ctx -> yi . d [ 3 ] = ctr ;	ctx yi	EMPTY
434	568	2	-1	0	-1	}	EMPTY	EMPTY
434	569	3	-1	0	-1	}	EMPTY	EMPTY
434	571	1	0	0	-1	int crypto _ gcm128 _ aad ( gcm128 _ context * ctx  const uint8 _ t * aad  size _ t len ) {	crypto _ gcm128 _ aad ctx aad len	EMPTY
434	572	2	-1	0	-1	size _ t i ;	EMPTY	EMPTY
434	573	2	-1	0	-1	unsigned int n ;	n	EMPTY
434	574	2	-1	0	-1	uint64 _ t alen = ctx -> len . u [ numconst ] ;	ctx len	EMPTY
434	575	2	-1	0	-1	# ifdef gcm _ funcref _ 4bit	EMPTY	EMPTY
434	576	2	-1	0	-1	void ( * gcm _ gmult _ p ) ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ] ) = ctx -> gmult ;	xi u128 htable ctx	EMPTY
434	577	2	-1	0	-1	# ifdef ghash	EMPTY	EMPTY
434	578	2	-1	0	-1	void ( * gcm _ ghash _ p ) ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ]  const uint8 _ t * inp	xi u128 htable inp	EMPTY
434	579	2	-1	0	-1	size _ t len ) = ctx -> ghash ;	len ctx	EMPTY
434	580	2	-1	0	-1	# endif	EMPTY	EMPTY
434	581	3	-1	0	-1	# endif	EMPTY	EMPTY
434	583	1	0	0	0	if ( ctx -> len . u [ numconst ] ) {	ctx len	EMPTY
434	584	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
434	585	3	-1	0	-1	}	EMPTY	EMPTY
434	587	1	0	0	-1	alen += len ;	len	EMPTY
434	588	2	-1	0	-1	if ( alen > ( uint64 _ c ( numconst ) << numconst ) || ( sizeof ( len ) == numconst && alen < len ) ) {	len len	EMPTY
434	589	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
434	590	2	-1	0	-1	}	EMPTY	EMPTY
434	591	3	-1	0	-1	ctx -> len . u [ numconst ] = alen ;	ctx len	EMPTY
434	593	1	0	0	-1	n = ctx -> ares ;	n ctx	EMPTY
434	594	2	-1	0	-1	if ( n ) {	n	EMPTY
434	595	2	-1	0	-1	while ( n && len ) {	n len	EMPTY
434	596	2	-1	0	-1	ctx -> xi . c [ n ] ^= * ( aad ++ ) ;	ctx xi n aad	EMPTY
434	597	2	-1	0	-1	-- len ;	len	EMPTY
434	598	2	-1	0	-1	n = ( n + numconst ) % numconst ;	n n	EMPTY
434	599	2	-1	0	-1	}	EMPTY	EMPTY
434	600	2	-1	0	-1	if ( n == numconst ) {	n	EMPTY
434	601	2	-1	0	-1	gcm _ mul ( ctx  xi ) ;	ctx xi	EMPTY
434	602	2	-1	0	-1	}	EMPTY	EMPTY
434	603	2	-1	0	-1	ctx -> ares = n ;	ctx n	EMPTY
434	604	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
434	605	2	-1	0	-1	}	EMPTY	EMPTY
434	606	3	-1	0	-1	}	EMPTY	EMPTY
434	608	1	0	0	-1	# ifdef ghash	EMPTY	EMPTY
434	609	2	-1	0	-1	if ( ( i = ( len & ( size _ t ) - numconst ) ) ) {	len	EMPTY
434	610	2	-1	0	-1	ghash ( ctx  aad  i ) ;	ctx aad	EMPTY
434	611	2	-1	0	-1	aad += i ;	aad	EMPTY
434	612	2	-1	0	-1	len -= i ;	len	EMPTY
434	613	2	-1	0	-1	}	EMPTY	EMPTY
434	614	2	-1	0	-1	# else	EMPTY	EMPTY
434	615	2	-1	0	-1	while ( len >= numconst ) {	len	EMPTY
434	616	2	-1	0	-1	for ( i = numconst ; i < numconst ; ++ i ) {	EMPTY	EMPTY
434	617	2	-1	0	-1	ctx -> xi . c [ i ] ^= aad [ i ] ;	ctx xi aad	EMPTY
434	618	2	-1	0	-1	}	EMPTY	EMPTY
434	619	2	-1	0	-1	gcm _ mul ( ctx  xi ) ;	ctx xi	EMPTY
434	620	2	-1	0	-1	aad += numconst ;	aad	EMPTY
434	621	2	-1	0	-1	len -= numconst ;	len	EMPTY
434	622	2	-1	0	-1	}	EMPTY	EMPTY
434	623	2	-1	0	-1	# endif	EMPTY	EMPTY
434	624	2	-1	0	-1	if ( len ) {	len	EMPTY
434	625	2	-1	0	-1	n = ( unsigned int ) len ;	n len	EMPTY
434	626	2	-1	0	-1	for ( i = numconst ; i < len ; ++ i ) {	len	EMPTY
434	627	2	-1	0	-1	ctx -> xi . c [ i ] ^= aad [ i ] ;	ctx xi aad	EMPTY
434	628	2	-1	0	-1	}	EMPTY	EMPTY
434	629	3	-1	0	-1	}	EMPTY	EMPTY
434	631	1	0	0	-1	ctx -> ares = n ;	ctx n	EMPTY
434	632	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
434	633	3	-1	0	-1	}	EMPTY	EMPTY
434	635	1	0	0	-1	int crypto _ gcm128 _ encrypt ( gcm128 _ context * ctx  const void * key	crypto _ gcm128 _ encrypt ctx key	EMPTY
434	636	2	-1	0	-1	const unsigned char * in  unsigned char * out	in out	EMPTY
434	637	2	-1	0	-1	size _ t len ) {	len	EMPTY
434	638	2	-1	0	-1	union {	EMPTY	EMPTY
434	639	2	-1	0	-1	long one ;	EMPTY	EMPTY
434	640	2	-1	0	-1	char little ;	EMPTY	EMPTY
434	641	2	-1	0	-1	} is _ endian = { numconst } ;	EMPTY	EMPTY
434	642	2	-1	0	-1	unsigned int n  ctr ;	n	EMPTY
434	643	2	-1	0	-1	size _ t i ;	EMPTY	EMPTY
434	644	2	-1	0	-1	uint64 _ t mlen = ctx -> len . u [ numconst ] ;	ctx len	EMPTY
434	645	2	-1	0	-1	block128 _ f block = ctx -> block ;	block128 _ f ctx	EMPTY
434	646	2	-1	0	-1	# ifdef gcm _ funcref _ 4bit	EMPTY	EMPTY
434	647	2	-1	0	-1	void ( * gcm _ gmult _ p ) ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ] ) = ctx -> gmult ;	xi u128 htable ctx	EMPTY
434	648	2	-1	0	-1	# ifdef ghash	EMPTY	EMPTY
434	649	2	-1	0	-1	void ( * gcm _ ghash _ p ) ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ]  const uint8 _ t * inp	xi u128 htable inp	EMPTY
434	650	2	-1	0	-1	size _ t len ) = ctx -> ghash ;	len ctx	EMPTY
434	651	2	-1	0	-1	# endif	EMPTY	EMPTY
434	652	3	-1	0	-1	# endif	EMPTY	EMPTY
434	654	1	0	0	-1	mlen += len ;	len	EMPTY
434	655	2	-1	0	-1	if ( mlen > ( ( uint64 _ c ( numconst ) << numconst ) - numconst ) ||	EMPTY	EMPTY
434	656	2	-1	0	-1	( sizeof ( len ) == numconst && mlen < len ) ) {	len len	EMPTY
434	657	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
434	658	2	-1	0	-1	}	EMPTY	EMPTY
434	659	3	-1	0	-1	ctx -> len . u [ numconst ] = mlen ;	ctx len	EMPTY
434	661	1	1	0	1	if ( ctx -> ares ) {	ctx	EMPTY
434	663	2	-1	1	-1	gcm _ mul ( ctx  xi ) ;	ctx xi	EMPTY
434	664	2	-1	0	-1	ctx -> ares = 0	ctx	EMPTY
434	665	3	-1	0	-1	}	EMPTY	EMPTY
434	667	1	0	0	0	if ( is _ endian . little ) {	EMPTY	EMPTY
434	668	2	-1	0	-1	ctr = getu32 ( ctx -> yi . c + numconst ) ;	ctx yi	EMPTY
434	669	2	-1	0	-1	} else {	EMPTY	EMPTY
434	670	2	-1	0	-1	ctr = ctx -> yi . d [ numconst ] ;	ctx yi	EMPTY
434	671	3	-1	0	-1	}	EMPTY	EMPTY
434	673	1	0	0	-1	n = ctx -> mres ;	n ctx	EMPTY
434	674	2	-1	0	-1	if ( n ) {	n	EMPTY
434	675	2	-1	0	-1	while ( n && len ) {	n len	EMPTY
434	676	2	-1	0	-1	ctx -> xi . c [ n ] ^= * ( out ++ ) = * ( in ++ ) ^ ctx -> eki . c [ n ] ;	ctx xi n out in ctx eki n	EMPTY
434	677	2	-1	0	-1	-- len ;	len	EMPTY
434	678	2	-1	0	-1	n = ( n + numconst ) % numconst ;	n n	EMPTY
434	679	2	-1	0	-1	}	EMPTY	EMPTY
434	680	2	-1	0	-1	if ( n == numconst ) {	n	EMPTY
434	681	2	-1	0	-1	gcm _ mul ( ctx  xi ) ;	ctx xi	EMPTY
434	682	2	-1	0	-1	}	EMPTY	EMPTY
434	683	2	-1	0	-1	ctx -> mres = n ;	ctx n	EMPTY
434	684	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
434	685	2	-1	0	-1	}	EMPTY	EMPTY
434	686	2	-1	0	-1	}	EMPTY	EMPTY
434	687	2	-1	0	-1	if ( strict _ alignment && ( ( size _ t ) in | ( size _ t ) out ) % sizeof ( size _ t ) != numconst ) {	in out	EMPTY
434	688	2	-1	0	-1	for ( i = numconst ; i < len ; ++ i ) {	len	EMPTY
434	689	2	-1	0	-1	if ( n == numconst ) {	n	EMPTY
434	690	2	-1	0	-1	( * block ) ( ctx -> yi . c  ctx -> eki . c  key ) ;	ctx yi ctx eki key	EMPTY
434	691	2	-1	0	-1	++ ctr ;	EMPTY	EMPTY
434	692	2	-1	0	-1	if ( is _ endian . little ) {	EMPTY	EMPTY
434	693	2	-1	0	-1	putu32 ( ctx -> yi . c + numconst  ctr ) ;	ctx yi	EMPTY
434	694	2	-1	0	-1	} else {	EMPTY	EMPTY
434	695	2	-1	0	-1	ctx -> yi . d [ numconst ] = ctr ;	ctx yi	EMPTY
434	696	2	-1	0	-1	}	EMPTY	EMPTY
434	697	2	-1	0	-1	}	EMPTY	EMPTY
434	698	2	-1	0	-1	ctx -> xi . c [ n ] ^= out [ i ] = in [ i ] ^ ctx -> eki . c [ n ] ;	ctx xi n out in ctx eki n	EMPTY
434	699	2	-1	0	-1	n = ( n + numconst ) % numconst ;	n n	EMPTY
434	700	2	-1	0	-1	if ( n == numconst ) {	n	EMPTY
434	701	2	-1	0	-1	gcm _ mul ( ctx  xi ) ;	ctx xi	EMPTY
434	702	3	-1	0	-1	}	EMPTY	EMPTY
434	703	1	0	0	-1	}	EMPTY	EMPTY
434	705	1	0	0	-1	ctx -> mres = n ;	ctx n	EMPTY
434	706	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
434	707	2	-1	0	-1	}	EMPTY	EMPTY
434	708	2	-1	0	-1	# if defined ( ghash ) && defined ( ghash _ chunk )	EMPTY	EMPTY
434	709	2	-1	0	-1	while ( len >= ghash _ chunk ) {	len	EMPTY
434	710	3	-1	0	-1	size _ t j = ghash _ chunk ;	EMPTY	EMPTY
434	712	1	0	0	-1	while ( j ) {	EMPTY	EMPTY
434	713	2	-1	0	-1	size _ t * out _ t = ( size _ t * ) out ;	out	EMPTY
434	714	3	-1	0	-1	const size _ t * in _ t = ( const size _ t * ) in ;	in	EMPTY
434	716	1	0	0	-1	( * block ) ( ctx -> yi . c  ctx -> eki . c  key ) ;	ctx yi ctx eki key	EMPTY
434	717	2	-1	0	-1	++ ctr ;	EMPTY	EMPTY
434	718	2	-1	0	-1	if ( is _ endian . little ) {	EMPTY	EMPTY
434	719	2	-1	0	-1	putu32 ( ctx -> yi . c + numconst  ctr ) ;	ctx yi	EMPTY
434	720	2	-1	0	-1	} else {	EMPTY	EMPTY
434	721	2	-1	0	-1	ctx -> yi . d [ numconst ] = ctr ;	ctx yi	EMPTY
434	722	2	-1	0	-1	}	EMPTY	EMPTY
434	723	2	-1	0	-1	for ( i = numconst ; i < numconst / sizeof ( size _ t ) ; ++ i ) {	EMPTY	EMPTY
434	724	2	-1	0	-1	out _ t [ i ] = in _ t [ i ] ^ ctx -> eki . t [ i ] ;	ctx eki	EMPTY
434	725	2	-1	0	-1	}	EMPTY	EMPTY
434	726	2	-1	0	-1	out += numconst ;	out	EMPTY
434	727	2	-1	0	-1	in += numconst ;	in	EMPTY
434	728	2	-1	0	-1	j -= numconst ;	EMPTY	EMPTY
434	729	2	-1	0	-1	}	EMPTY	EMPTY
434	730	2	-1	0	-1	ghash ( ctx  out - ghash _ chunk  ghash _ chunk ) ;	ctx out	EMPTY
434	731	2	-1	0	-1	len -= ghash _ chunk ;	len	EMPTY
434	732	2	-1	0	-1	}	EMPTY	EMPTY
434	733	2	-1	0	-1	if ( ( i = ( len & ( size _ t ) - numconst ) ) ) {	len	EMPTY
434	734	3	-1	0	-1	size _ t j = i ;	EMPTY	EMPTY
434	736	1	0	0	-1	while ( len >= numconst ) {	len	EMPTY
434	737	2	-1	0	-1	size _ t * out _ t = ( size _ t * ) out ;	out	EMPTY
434	738	3	-1	0	-1	const size _ t * in _ t = ( const size _ t * ) in ;	in	EMPTY
434	740	1	0	0	-1	( * block ) ( ctx -> yi . c  ctx -> eki . c  key ) ;	ctx yi ctx eki key	EMPTY
434	741	2	-1	0	-1	++ ctr ;	EMPTY	EMPTY
434	742	2	-1	0	-1	if ( is _ endian . little ) {	EMPTY	EMPTY
434	743	2	-1	0	-1	putu32 ( ctx -> yi . c + numconst  ctr ) ;	ctx yi	EMPTY
434	744	2	-1	0	-1	} else {	EMPTY	EMPTY
434	745	2	-1	0	-1	ctx -> yi . d [ numconst ] = ctr ;	ctx yi	EMPTY
434	746	2	-1	0	-1	}	EMPTY	EMPTY
434	747	2	-1	0	-1	for ( i = numconst ; i < numconst / sizeof ( size _ t ) ; ++ i ) {	EMPTY	EMPTY
434	748	2	-1	0	-1	out _ t [ i ] = in _ t [ i ] ^ ctx -> eki . t [ i ] ;	ctx eki	EMPTY
434	749	2	-1	0	-1	}	EMPTY	EMPTY
434	750	2	-1	0	-1	out += numconst ;	out	EMPTY
434	751	2	-1	0	-1	in += numconst ;	in	EMPTY
434	752	2	-1	0	-1	len -= numconst ;	len	EMPTY
434	753	2	-1	0	-1	}	EMPTY	EMPTY
434	754	2	-1	0	-1	ghash ( ctx  out - j  j ) ;	ctx out	EMPTY
434	755	2	-1	0	-1	}	EMPTY	EMPTY
434	756	2	-1	0	-1	# else	EMPTY	EMPTY
434	757	2	-1	0	-1	while ( len >= numconst ) {	len	EMPTY
434	758	2	-1	0	-1	size _ t * out _ t = ( size _ t * ) out ;	out	EMPTY
434	759	3	-1	0	-1	const size _ t * in _ t = ( const size _ t * ) in ;	in	EMPTY
434	761	1	0	0	0	( * block ) ( ctx -> yi . c  ctx -> eki . c  key ) ;	ctx yi ctx eki key	EMPTY
434	762	2	-1	0	-1	++ ctr ;	EMPTY	EMPTY
434	763	2	-1	0	-1	if ( is _ endian . little ) {	EMPTY	EMPTY
434	764	2	-1	0	-1	putu32 ( ctx -> yi . c + numconst  ctr ) ;	ctx yi	EMPTY
434	765	2	-1	0	-1	} else {	EMPTY	EMPTY
434	766	2	-1	0	-1	ctx -> yi . d [ numconst ] = ctr ;	ctx yi	EMPTY
434	767	2	-1	0	-1	}	EMPTY	EMPTY
434	768	2	-1	0	-1	for ( i = numconst ; i < numconst / sizeof ( size _ t ) ; ++ i ) {	EMPTY	EMPTY
434	769	2	-1	0	-1	ctx -> xi . t [ i ] ^= out _ t [ i ] = in _ t [ i ] ^ ctx -> eki . t [ i ] ;	ctx xi ctx eki	EMPTY
434	770	2	-1	0	-1	}	EMPTY	EMPTY
434	771	2	-1	0	-1	gcm _ mul ( ctx  xi ) ;	ctx xi	EMPTY
434	772	2	-1	0	-1	out += numconst ;	out	EMPTY
434	773	2	-1	0	-1	in += numconst ;	in	EMPTY
434	774	2	-1	0	-1	len -= numconst ;	len	EMPTY
434	775	2	-1	0	-1	}	EMPTY	EMPTY
434	776	2	-1	0	-1	# endif	EMPTY	EMPTY
434	777	2	-1	0	-1	if ( len ) {	len	EMPTY
434	778	2	-1	0	-1	( * block ) ( ctx -> yi . c  ctx -> eki . c  key ) ;	ctx yi ctx eki key	EMPTY
434	779	2	-1	0	-1	++ ctr ;	EMPTY	EMPTY
434	780	2	-1	0	-1	if ( is _ endian . little ) {	EMPTY	EMPTY
434	781	2	-1	0	-1	putu32 ( ctx -> yi . c + numconst  ctr ) ;	ctx yi	EMPTY
434	782	2	-1	0	-1	} else {	EMPTY	EMPTY
434	783	2	-1	0	-1	ctx -> yi . d [ numconst ] = ctr ;	ctx yi	EMPTY
434	784	2	-1	0	-1	}	EMPTY	EMPTY
434	785	2	-1	0	-1	while ( len -- ) {	len	EMPTY
434	786	2	-1	0	-1	ctx -> xi . c [ n ] ^= out [ n ] = in [ n ] ^ ctx -> eki . c [ n ] ;	ctx xi n out n in n ctx eki n	EMPTY
434	787	2	-1	0	-1	++ n ;	n	EMPTY
434	788	2	-1	0	-1	}	EMPTY	EMPTY
434	789	3	-1	0	-1	}	EMPTY	EMPTY
434	791	1	0	0	-1	ctx -> mres = n ;	ctx n	EMPTY
434	792	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
434	793	3	-1	0	-1	}	EMPTY	EMPTY
434	795	1	0	0	-1	int crypto _ gcm128 _ decrypt ( gcm128 _ context * ctx  const void * key	crypto _ gcm128 _ decrypt ctx key	EMPTY
434	796	2	-1	0	-1	const unsigned char * in  unsigned char * out	in out	EMPTY
434	797	2	-1	0	-1	size _ t len ) {	len	EMPTY
434	798	2	-1	0	-1	union {	EMPTY	EMPTY
434	799	2	-1	0	-1	long one ;	EMPTY	EMPTY
434	800	2	-1	0	-1	char little ;	EMPTY	EMPTY
434	801	2	-1	0	-1	} is _ endian = { numconst } ;	EMPTY	EMPTY
434	802	2	-1	0	-1	unsigned int n  ctr ;	n	EMPTY
434	803	2	-1	0	-1	size _ t i ;	EMPTY	EMPTY
434	804	2	-1	0	-1	uint64 _ t mlen = ctx -> len . u [ numconst ] ;	ctx len	EMPTY
434	805	2	-1	0	-1	block128 _ f block = ctx -> block ;	block128 _ f ctx	EMPTY
434	806	2	-1	0	-1	# ifdef gcm _ funcref _ 4bit	EMPTY	EMPTY
434	807	2	-1	0	-1	void ( * gcm _ gmult _ p ) ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ] ) = ctx -> gmult ;	xi u128 htable ctx	EMPTY
434	808	2	-1	0	-1	# ifdef ghash	EMPTY	EMPTY
434	809	2	-1	0	-1	void ( * gcm _ ghash _ p ) ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ]  const uint8 _ t * inp	xi u128 htable inp	EMPTY
434	810	2	-1	0	-1	size _ t len ) = ctx -> ghash ;	len ctx	EMPTY
434	811	2	-1	0	-1	# endif	EMPTY	EMPTY
434	812	3	-1	0	-1	# endif	EMPTY	EMPTY
434	814	1	0	0	-1	mlen += len ;	len	EMPTY
434	815	2	-1	0	-1	if ( mlen > ( ( uint64 _ c ( numconst ) << numconst ) - numconst ) ||	EMPTY	EMPTY
434	816	2	-1	0	-1	( sizeof ( len ) == numconst && mlen < len ) ) {	len len	EMPTY
434	817	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
434	818	2	-1	0	-1	}	EMPTY	EMPTY
434	819	3	-1	0	-1	ctx -> len . u [ numconst ] = mlen ;	ctx len	EMPTY
434	821	1	1	0	1	if ( ctx -> ares ) {	ctx	EMPTY
434	823	2	-1	1	-1	gcm _ mul ( ctx  xi ) ;	ctx xi	EMPTY
434	824	2	-1	0	-1	ctx -> ares = 0	ctx	EMPTY
434	825	3	-1	0	-1	}	EMPTY	EMPTY
434	827	1	0	0	0	if ( is _ endian . little ) {	EMPTY	EMPTY
434	828	2	-1	0	-1	ctr = getu32 ( ctx -> yi . c + numconst ) ;	ctx yi	EMPTY
434	829	2	-1	0	-1	} else {	EMPTY	EMPTY
434	830	2	-1	0	-1	ctr = ctx -> yi . d [ numconst ] ;	ctx yi	EMPTY
434	831	3	-1	0	-1	}	EMPTY	EMPTY
434	833	1	0	0	-1	n = ctx -> mres ;	n ctx	EMPTY
434	834	2	-1	0	-1	if ( n ) {	n	EMPTY
434	835	2	-1	0	-1	while ( n && len ) {	n len	EMPTY
434	836	3	-1	0	-1	uint8 _ t c = * ( in ++ ) ;	in	EMPTY
434	838	1	0	0	-1	ctx -> xi . c [ n ] ^= c ;	ctx xi n	EMPTY
434	839	2	-1	0	-1	-- len ;	len	EMPTY
434	840	2	-1	0	-1	n = ( n + numconst ) % numconst ;	n n	EMPTY
434	841	2	-1	0	-1	}	EMPTY	EMPTY
434	842	2	-1	0	-1	if ( n == numconst ) {	n	EMPTY
434	843	2	-1	0	-1	gcm _ mul ( ctx  xi ) ;	ctx xi	EMPTY
434	844	2	-1	0	-1	}	EMPTY	EMPTY
434	845	2	-1	0	-1	ctx -> mres = n ;	ctx n	EMPTY
434	846	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
434	847	2	-1	0	-1	}	EMPTY	EMPTY
434	848	2	-1	0	-1	}	EMPTY	EMPTY
434	849	2	-1	0	-1	if ( strict _ alignment && ( ( size _ t ) in | ( size _ t ) out ) % sizeof ( size _ t ) != numconst ) {	in out	EMPTY
434	850	2	-1	0	-1	for ( i = numconst ; i < len ; ++ i ) {	len	EMPTY
434	851	2	-1	0	-1	uint8 _ t c ;	EMPTY	EMPTY
434	852	2	-1	0	-1	if ( n == numconst ) {	n	EMPTY
434	853	2	-1	0	-1	( * block ) ( ctx -> yi . c  ctx -> eki . c  key ) ;	ctx yi ctx eki key	EMPTY
434	854	2	-1	0	-1	++ ctr ;	EMPTY	EMPTY
434	855	2	-1	0	-1	if ( is _ endian . little ) {	EMPTY	EMPTY
434	856	2	-1	0	-1	putu32 ( ctx -> yi . c + numconst  ctr ) ;	ctx yi	EMPTY
434	857	2	-1	0	-1	} else {	EMPTY	EMPTY
434	858	2	-1	0	-1	ctx -> yi . d [ numconst ] = ctr ;	ctx yi	EMPTY
434	859	2	-1	0	-1	}	EMPTY	EMPTY
434	860	2	-1	0	-1	}	EMPTY	EMPTY
434	861	2	-1	0	-1	c = in [ i ] ;	in	EMPTY
434	862	2	-1	0	-1	out [ i ] = c ^ ctx -> eki . c [ n ] ;	out ctx eki n	EMPTY
434	863	2	-1	0	-1	ctx -> xi . c [ n ] ^= c ;	ctx xi n	EMPTY
434	864	2	-1	0	-1	n = ( n + numconst ) % numconst ;	n n	EMPTY
434	865	2	-1	0	-1	if ( n == numconst ) {	n	EMPTY
434	866	2	-1	0	-1	gcm _ mul ( ctx  xi ) ;	ctx xi	EMPTY
434	867	3	-1	0	-1	}	EMPTY	EMPTY
434	868	1	0	0	-1	}	EMPTY	EMPTY
434	870	1	0	0	-1	ctx -> mres = n ;	ctx n	EMPTY
434	871	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
434	872	2	-1	0	-1	}	EMPTY	EMPTY
434	873	2	-1	0	-1	# if defined ( ghash ) && defined ( ghash _ chunk )	EMPTY	EMPTY
434	874	2	-1	0	-1	while ( len >= ghash _ chunk ) {	len	EMPTY
434	875	3	-1	0	-1	size _ t j = ghash _ chunk ;	EMPTY	EMPTY
434	877	1	0	0	-1	ghash ( ctx  in  ghash _ chunk ) ;	ctx in	EMPTY
434	878	2	-1	0	-1	while ( j ) {	EMPTY	EMPTY
434	879	2	-1	0	-1	size _ t * out _ t = ( size _ t * ) out ;	out	EMPTY
434	880	3	-1	0	-1	const size _ t * in _ t = ( const size _ t * ) in ;	in	EMPTY
434	882	1	0	0	-1	( * block ) ( ctx -> yi . c  ctx -> eki . c  key ) ;	ctx yi ctx eki key	EMPTY
434	883	2	-1	0	-1	++ ctr ;	EMPTY	EMPTY
434	884	2	-1	0	-1	if ( is _ endian . little ) {	EMPTY	EMPTY
434	885	2	-1	0	-1	putu32 ( ctx -> yi . c + numconst  ctr ) ;	ctx yi	EMPTY
434	886	2	-1	0	-1	} else {	EMPTY	EMPTY
434	887	2	-1	0	-1	ctx -> yi . d [ numconst ] = ctr ;	ctx yi	EMPTY
434	888	2	-1	0	-1	}	EMPTY	EMPTY
434	889	2	-1	0	-1	for ( i = numconst ; i < numconst / sizeof ( size _ t ) ; ++ i ) {	EMPTY	EMPTY
434	890	2	-1	0	-1	out _ t [ i ] = in _ t [ i ] ^ ctx -> eki . t [ i ] ;	ctx eki	EMPTY
434	891	2	-1	0	-1	}	EMPTY	EMPTY
434	892	2	-1	0	-1	out += numconst ;	out	EMPTY
434	893	2	-1	0	-1	in += numconst ;	in	EMPTY
434	894	2	-1	0	-1	j -= numconst ;	EMPTY	EMPTY
434	895	2	-1	0	-1	}	EMPTY	EMPTY
434	896	2	-1	0	-1	len -= ghash _ chunk ;	len	EMPTY
434	897	2	-1	0	-1	}	EMPTY	EMPTY
434	898	2	-1	0	-1	if ( ( i = ( len & ( size _ t ) - numconst ) ) ) {	len	EMPTY
434	899	2	-1	0	-1	ghash ( ctx  in  i ) ;	ctx in	EMPTY
434	900	2	-1	0	-1	while ( len >= numconst ) {	len	EMPTY
434	901	2	-1	0	-1	size _ t * out _ t = ( size _ t * ) out ;	out	EMPTY
434	902	3	-1	0	-1	const size _ t * in _ t = ( const size _ t * ) in ;	in	EMPTY
434	904	1	0	0	-1	( * block ) ( ctx -> yi . c  ctx -> eki . c  key ) ;	ctx yi ctx eki key	EMPTY
434	905	2	-1	0	-1	++ ctr ;	EMPTY	EMPTY
434	906	2	-1	0	-1	if ( is _ endian . little ) {	EMPTY	EMPTY
434	907	2	-1	0	-1	putu32 ( ctx -> yi . c + numconst  ctr ) ;	ctx yi	EMPTY
434	908	2	-1	0	-1	} else {	EMPTY	EMPTY
434	909	2	-1	0	-1	ctx -> yi . d [ numconst ] = ctr ;	ctx yi	EMPTY
434	910	2	-1	0	-1	}	EMPTY	EMPTY
434	911	2	-1	0	-1	for ( i = numconst ; i < numconst / sizeof ( size _ t ) ; ++ i ) {	EMPTY	EMPTY
434	912	2	-1	0	-1	out _ t [ i ] = in _ t [ i ] ^ ctx -> eki . t [ i ] ;	ctx eki	EMPTY
434	913	2	-1	0	-1	}	EMPTY	EMPTY
434	914	2	-1	0	-1	out += numconst ;	out	EMPTY
434	915	2	-1	0	-1	in += numconst ;	in	EMPTY
434	916	2	-1	0	-1	len -= numconst ;	len	EMPTY
434	917	2	-1	0	-1	}	EMPTY	EMPTY
434	918	2	-1	0	-1	}	EMPTY	EMPTY
434	919	2	-1	0	-1	# else	EMPTY	EMPTY
434	920	2	-1	0	-1	while ( len >= numconst ) {	len	EMPTY
434	921	2	-1	0	-1	size _ t * out _ t = ( size _ t * ) out ;	out	EMPTY
434	922	3	-1	0	-1	const size _ t * in _ t = ( const size _ t * ) in ;	in	EMPTY
434	924	1	0	0	0	( * block ) ( ctx -> yi . c  ctx -> eki . c  key ) ;	ctx yi ctx eki key	EMPTY
434	925	2	-1	0	-1	++ ctr ;	EMPTY	EMPTY
434	926	2	-1	0	-1	if ( is _ endian . little ) {	EMPTY	EMPTY
434	927	2	-1	0	-1	putu32 ( ctx -> yi . c + numconst  ctr ) ;	ctx yi	EMPTY
434	928	2	-1	0	-1	} else {	EMPTY	EMPTY
434	929	2	-1	0	-1	ctx -> yi . d [ numconst ] = ctr ;	ctx yi	EMPTY
434	930	2	-1	0	-1	}	EMPTY	EMPTY
434	931	2	-1	0	-1	for ( i = numconst ; i < numconst / sizeof ( size _ t ) ; ++ i ) {	EMPTY	EMPTY
434	932	2	-1	0	-1	size _ t c = in _ t [ i ] ;	EMPTY	EMPTY
434	933	2	-1	0	-1	out _ t [ i ] = c ^ ctx -> eki . t [ i ] ;	ctx eki	EMPTY
434	934	2	-1	0	-1	ctx -> xi . t [ i ] ^= c ;	ctx xi	EMPTY
434	935	2	-1	0	-1	}	EMPTY	EMPTY
434	936	2	-1	0	-1	gcm _ mul ( ctx  xi ) ;	ctx xi	EMPTY
434	937	2	-1	0	-1	out += numconst ;	out	EMPTY
434	938	2	-1	0	-1	in += numconst ;	in	EMPTY
434	939	2	-1	0	-1	len -= numconst ;	len	EMPTY
434	940	2	-1	0	-1	}	EMPTY	EMPTY
434	941	2	-1	0	-1	# endif	EMPTY	EMPTY
434	942	2	-1	0	-1	if ( len ) {	len	EMPTY
434	943	2	-1	0	-1	( * block ) ( ctx -> yi . c  ctx -> eki . c  key ) ;	ctx yi ctx eki key	EMPTY
434	944	2	-1	0	-1	++ ctr ;	EMPTY	EMPTY
434	945	2	-1	0	-1	if ( is _ endian . little ) {	EMPTY	EMPTY
434	946	2	-1	0	-1	putu32 ( ctx -> yi . c + numconst  ctr ) ;	ctx yi	EMPTY
434	947	2	-1	0	-1	} else {	EMPTY	EMPTY
434	948	2	-1	0	-1	ctx -> yi . d [ numconst ] = ctr ;	ctx yi	EMPTY
434	949	2	-1	0	-1	}	EMPTY	EMPTY
434	950	2	-1	0	-1	while ( len -- ) {	len	EMPTY
434	951	2	-1	0	-1	uint8 _ t c = in [ n ] ;	in n	EMPTY
434	952	2	-1	0	-1	ctx -> xi . c [ n ] ^= c ;	ctx xi n	EMPTY
434	953	3	-1	0	-1	out [ n ] = c ^ ctx -> eki . c [ n ] ;	out n ctx eki n	EMPTY
434	954	1	0	0	-1	++ n ;	n	EMPTY
434	955	2	-1	0	-1	}	EMPTY	EMPTY
434	956	3	-1	0	-1	}	EMPTY	EMPTY
434	958	1	0	0	-1	ctx -> mres = n ;	ctx n	EMPTY
434	959	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
434	960	3	-1	0	-1	}	EMPTY	EMPTY
434	962	1	0	0	-1	int crypto _ gcm128 _ encrypt _ ctr32 ( gcm128 _ context * ctx  const void * key	crypto _ gcm128 _ encrypt _ ctr32 ctx key	EMPTY
434	963	2	-1	0	-1	const uint8 _ t * in  uint8 _ t * out  size _ t len	in out len	EMPTY
434	964	2	-1	0	-1	ctr128 _ f stream ) {	ctr128 _ f	EMPTY
434	965	2	-1	0	-1	union {	EMPTY	EMPTY
434	966	2	-1	0	-1	long one ;	EMPTY	EMPTY
434	967	2	-1	0	-1	char little ;	EMPTY	EMPTY
434	968	2	-1	0	-1	} is _ endian = { numconst } ;	EMPTY	EMPTY
434	969	2	-1	0	-1	unsigned int n  ctr ;	n	EMPTY
434	970	2	-1	0	-1	uint64 _ t mlen = ctx -> len . u [ numconst ] ;	ctx len	EMPTY
434	971	2	-1	0	-1	# ifdef gcm _ funcref _ 4bit	EMPTY	EMPTY
434	972	2	-1	0	-1	void ( * gcm _ gmult _ p ) ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ] ) = ctx -> gmult ;	xi u128 htable ctx	EMPTY
434	973	2	-1	0	-1	# ifdef ghash	EMPTY	EMPTY
434	974	2	-1	0	-1	void ( * gcm _ ghash _ p ) ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ]  const uint8 _ t * inp	xi u128 htable inp	EMPTY
434	975	2	-1	0	-1	size _ t len ) = ctx -> ghash ;	len ctx	EMPTY
434	976	2	-1	0	-1	# endif	EMPTY	EMPTY
434	977	3	-1	0	-1	# endif	EMPTY	EMPTY
434	979	1	0	0	-1	mlen += len ;	len	EMPTY
434	980	2	-1	0	-1	if ( mlen > ( ( uint64 _ c ( numconst ) << numconst ) - numconst ) ||	EMPTY	EMPTY
434	981	2	-1	0	-1	( sizeof ( len ) == numconst && mlen < len ) ) {	len len	EMPTY
434	982	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
434	983	2	-1	0	-1	}	EMPTY	EMPTY
434	984	3	-1	0	-1	ctx -> len . u [ numconst ] = mlen ;	ctx len	EMPTY
434	986	1	1	0	1	if ( ctx -> ares ) {	ctx	EMPTY
434	988	2	-1	1	-1	gcm _ mul ( ctx  xi ) ;	ctx xi	EMPTY
434	989	2	-1	0	-1	ctx -> ares = 0	ctx	EMPTY
434	990	3	-1	0	-1	}	EMPTY	EMPTY
434	992	1	0	0	0	if ( is _ endian . little ) {	EMPTY	EMPTY
434	993	2	-1	0	-1	ctr = getu32 ( ctx -> yi . c + numconst ) ;	ctx yi	EMPTY
434	994	2	-1	0	-1	} else {	EMPTY	EMPTY
434	995	2	-1	0	-1	ctr = ctx -> yi . d [ numconst ] ;	ctx yi	EMPTY
434	996	3	-1	0	-1	}	EMPTY	EMPTY
434	998	1	0	0	-1	n = ctx -> mres ;	n ctx	EMPTY
434	999	2	-1	0	-1	if ( n ) {	n	EMPTY
434	1000	2	-1	0	-1	while ( n && len ) {	n len	EMPTY
434	1001	2	-1	0	-1	ctx -> xi . c [ n ] ^= * ( out ++ ) = * ( in ++ ) ^ ctx -> eki . c [ n ] ;	ctx xi n out in ctx eki n	EMPTY
434	1002	2	-1	0	-1	-- len ;	len	EMPTY
434	1003	2	-1	0	-1	n = ( n + numconst ) % numconst ;	n n	EMPTY
434	1004	2	-1	0	-1	}	EMPTY	EMPTY
434	1005	2	-1	0	-1	if ( n == numconst ) {	n	EMPTY
434	1006	2	-1	0	-1	gcm _ mul ( ctx  xi ) ;	ctx xi	EMPTY
434	1007	2	-1	0	-1	}	EMPTY	EMPTY
434	1008	2	-1	0	-1	ctx -> mres = n ;	ctx n	EMPTY
434	1009	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
434	1010	2	-1	0	-1	}	EMPTY	EMPTY
434	1011	2	-1	0	-1	}	EMPTY	EMPTY
434	1012	2	-1	0	-1	# if defined ( ghash )	EMPTY	EMPTY
434	1013	2	-1	0	-1	while ( len >= ghash _ chunk ) {	len	EMPTY
434	1014	2	-1	0	-1	( * stream ) ( in  out  ghash _ chunk / numconst  key  ctx -> yi . c ) ;	in out key ctx yi	EMPTY
434	1015	2	-1	0	-1	ctr += ghash _ chunk / numconst ;	EMPTY	EMPTY
434	1016	2	-1	0	-1	if ( is _ endian . little ) {	EMPTY	EMPTY
434	1017	2	-1	0	-1	putu32 ( ctx -> yi . c + numconst  ctr ) ;	ctx yi	EMPTY
434	1018	2	-1	0	-1	} else {	EMPTY	EMPTY
434	1019	2	-1	0	-1	ctx -> yi . d [ numconst ] = ctr ;	ctx yi	EMPTY
434	1020	2	-1	0	-1	}	EMPTY	EMPTY
434	1021	2	-1	0	-1	ghash ( ctx  out  ghash _ chunk ) ;	ctx out	EMPTY
434	1022	2	-1	0	-1	out += ghash _ chunk ;	out	EMPTY
434	1023	2	-1	0	-1	in += ghash _ chunk ;	in	EMPTY
434	1024	2	-1	0	-1	len -= ghash _ chunk ;	len	EMPTY
434	1025	2	-1	0	-1	}	EMPTY	EMPTY
434	1026	2	-1	0	-1	# endif	EMPTY	EMPTY
434	1027	3	-1	0	-1	size _ t i = len & ksizetwithoutlower4bits ;	len ksizetwithoutlower4bits	EMPTY
434	1028	1	0	0	-1	if ( i != numconst ) {	EMPTY	EMPTY
434	1029	3	-1	0	-1	size _ t j = i / numconst ;	EMPTY	EMPTY
434	1031	1	0	0	0	( * stream ) ( in  out  j  key  ctx -> yi . c ) ;	in out key ctx yi	EMPTY
434	1032	2	-1	0	-1	ctr += ( unsigned int ) j ;	EMPTY	EMPTY
434	1033	2	-1	0	-1	if ( is _ endian . little ) {	EMPTY	EMPTY
434	1034	2	-1	0	-1	putu32 ( ctx -> yi . c + numconst  ctr ) ;	ctx yi	EMPTY
434	1035	2	-1	0	-1	} else {	EMPTY	EMPTY
434	1036	2	-1	0	-1	ctx -> yi . d [ numconst ] = ctr ;	ctx yi	EMPTY
434	1037	2	-1	0	-1	}	EMPTY	EMPTY
434	1038	2	-1	0	-1	in += i ;	in	EMPTY
434	1039	2	-1	0	-1	len -= i ;	len	EMPTY
434	1040	2	-1	0	-1	# if defined ( ghash )	EMPTY	EMPTY
434	1041	2	-1	0	-1	ghash ( ctx  out  i ) ;	ctx out	EMPTY
434	1042	2	-1	0	-1	out += i ;	out	EMPTY
434	1043	2	-1	0	-1	# else	EMPTY	EMPTY
434	1044	2	-1	0	-1	while ( j -- ) {	EMPTY	EMPTY
434	1045	2	-1	0	-1	for ( i = numconst ; i < numconst ; ++ i ) {	EMPTY	EMPTY
434	1046	2	-1	0	-1	ctx -> xi . c [ i ] ^= out [ i ] ;	ctx xi out	EMPTY
434	1047	2	-1	0	-1	}	EMPTY	EMPTY
434	1048	2	-1	0	-1	gcm _ mul ( ctx  xi ) ;	ctx xi	EMPTY
434	1049	2	-1	0	-1	out += numconst ;	out	EMPTY
434	1050	2	-1	0	-1	}	EMPTY	EMPTY
434	1051	2	-1	0	-1	# endif	EMPTY	EMPTY
434	1052	2	-1	0	-1	}	EMPTY	EMPTY
434	1053	2	-1	0	-1	if ( len ) {	len	EMPTY
434	1054	2	-1	0	-1	( * ctx -> block ) ( ctx -> yi . c  ctx -> eki . c  key ) ;	ctx ctx yi ctx eki key	EMPTY
434	1055	2	-1	0	-1	++ ctr ;	EMPTY	EMPTY
434	1056	2	-1	0	-1	if ( is _ endian . little ) {	EMPTY	EMPTY
434	1057	2	-1	0	-1	putu32 ( ctx -> yi . c + numconst  ctr ) ;	ctx yi	EMPTY
434	1058	2	-1	0	-1	} else {	EMPTY	EMPTY
434	1059	2	-1	0	-1	ctx -> yi . d [ numconst ] = ctr ;	ctx yi	EMPTY
434	1060	3	-1	0	-1	}	EMPTY	EMPTY
434	1061	1	0	0	-1	while ( len -- ) {	len	EMPTY
434	1062	2	-1	0	-1	ctx -> xi . c [ n ] ^= out [ n ] = in [ n ] ^ ctx -> eki . c [ n ] ;	ctx xi n out n in n ctx eki n	EMPTY
434	1063	2	-1	0	-1	++ n ;	n	EMPTY
434	1064	2	-1	0	-1	}	EMPTY	EMPTY
434	1065	3	-1	0	-1	}	EMPTY	EMPTY
434	1067	1	0	0	-1	ctx -> mres = n ;	ctx n	EMPTY
434	1068	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
434	1069	3	-1	0	-1	}	EMPTY	EMPTY
434	1071	1	0	0	-1	int crypto _ gcm128 _ decrypt _ ctr32 ( gcm128 _ context * ctx  const void * key	crypto _ gcm128 _ decrypt _ ctr32 ctx key	EMPTY
434	1072	2	-1	0	-1	const uint8 _ t * in  uint8 _ t * out  size _ t len	in out len	EMPTY
434	1073	2	-1	0	-1	ctr128 _ f stream ) {	ctr128 _ f	EMPTY
434	1074	2	-1	0	-1	union {	EMPTY	EMPTY
434	1075	2	-1	0	-1	long one ;	EMPTY	EMPTY
434	1076	2	-1	0	-1	char little ;	EMPTY	EMPTY
434	1077	2	-1	0	-1	} is _ endian = { numconst } ;	EMPTY	EMPTY
434	1078	2	-1	0	-1	unsigned int n  ctr ;	n	EMPTY
434	1079	2	-1	0	-1	uint64 _ t mlen = ctx -> len . u [ numconst ] ;	ctx len	EMPTY
434	1080	2	-1	0	-1	# ifdef gcm _ funcref _ 4bit	EMPTY	EMPTY
434	1081	2	-1	0	-1	void ( * gcm _ gmult _ p ) ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ] ) = ctx -> gmult ;	xi u128 htable ctx	EMPTY
434	1082	2	-1	0	-1	# ifdef ghash	EMPTY	EMPTY
434	1083	2	-1	0	-1	void ( * gcm _ ghash _ p ) ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ]  const uint8 _ t * inp	xi u128 htable inp	EMPTY
434	1084	2	-1	0	-1	size _ t len ) = ctx -> ghash ;	len ctx	EMPTY
434	1085	2	-1	0	-1	# endif	EMPTY	EMPTY
434	1086	3	-1	0	-1	# endif	EMPTY	EMPTY
434	1088	1	0	0	-1	mlen += len ;	len	EMPTY
434	1089	2	-1	0	-1	if ( mlen > ( ( uint64 _ c ( numconst ) << numconst ) - numconst ) ||	EMPTY	EMPTY
434	1090	2	-1	0	-1	( sizeof ( len ) == numconst && mlen < len ) ) {	len len	EMPTY
434	1091	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
434	1092	2	-1	0	-1	}	EMPTY	EMPTY
434	1093	3	-1	0	-1	ctx -> len . u [ numconst ] = mlen ;	ctx len	EMPTY
434	1095	1	1	0	1	if ( ctx -> ares ) {	ctx	EMPTY
434	1097	2	-1	1	-1	gcm _ mul ( ctx  xi ) ;	ctx xi	EMPTY
434	1098	2	-1	0	-1	ctx -> ares = 0	ctx	EMPTY
434	1099	3	-1	0	-1	}	EMPTY	EMPTY
434	1101	1	0	0	0	if ( is _ endian . little ) {	EMPTY	EMPTY
434	1102	2	-1	0	-1	ctr = getu32 ( ctx -> yi . c + numconst ) ;	ctx yi	EMPTY
434	1103	2	-1	0	-1	} else {	EMPTY	EMPTY
434	1104	2	-1	0	-1	ctr = ctx -> yi . d [ numconst ] ;	ctx yi	EMPTY
434	1105	3	-1	0	-1	}	EMPTY	EMPTY
434	1107	1	0	0	-1	n = ctx -> mres ;	n ctx	EMPTY
434	1108	2	-1	0	-1	if ( n ) {	n	EMPTY
434	1109	2	-1	0	-1	while ( n && len ) {	n len	EMPTY
434	1110	3	-1	0	-1	uint8 _ t c = * ( in ++ ) ;	in	EMPTY
434	1112	1	0	0	-1	ctx -> xi . c [ n ] ^= c ;	ctx xi n	EMPTY
434	1113	2	-1	0	-1	-- len ;	len	EMPTY
434	1114	2	-1	0	-1	n = ( n + numconst ) % numconst ;	n n	EMPTY
434	1115	2	-1	0	-1	}	EMPTY	EMPTY
434	1116	2	-1	0	-1	if ( n == numconst ) {	n	EMPTY
434	1117	2	-1	0	-1	gcm _ mul ( ctx  xi ) ;	ctx xi	EMPTY
434	1118	2	-1	0	-1	}	EMPTY	EMPTY
434	1119	2	-1	0	-1	ctx -> mres = n ;	ctx n	EMPTY
434	1120	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
434	1121	2	-1	0	-1	}	EMPTY	EMPTY
434	1122	2	-1	0	-1	}	EMPTY	EMPTY
434	1123	2	-1	0	-1	# if defined ( ghash )	EMPTY	EMPTY
434	1124	2	-1	0	-1	while ( len >= ghash _ chunk ) {	len	EMPTY
434	1125	2	-1	0	-1	ghash ( ctx  in  ghash _ chunk ) ;	ctx in	EMPTY
434	1126	2	-1	0	-1	( * stream ) ( in  out  ghash _ chunk / numconst  key  ctx -> yi . c ) ;	in out key ctx yi	EMPTY
434	1127	2	-1	0	-1	ctr += ghash _ chunk / numconst ;	EMPTY	EMPTY
434	1128	2	-1	0	-1	if ( is _ endian . little ) {	EMPTY	EMPTY
434	1129	2	-1	0	-1	putu32 ( ctx -> yi . c + numconst  ctr ) ;	ctx yi	EMPTY
434	1130	2	-1	0	-1	} else {	EMPTY	EMPTY
434	1131	2	-1	0	-1	ctx -> yi . d [ numconst ] = ctr ;	ctx yi	EMPTY
434	1132	2	-1	0	-1	}	EMPTY	EMPTY
434	1133	2	-1	0	-1	out += ghash _ chunk ;	out	EMPTY
434	1134	2	-1	0	-1	in += ghash _ chunk ;	in	EMPTY
434	1135	2	-1	0	-1	len -= ghash _ chunk ;	len	EMPTY
434	1136	2	-1	0	-1	}	EMPTY	EMPTY
434	1137	2	-1	0	-1	# endif	EMPTY	EMPTY
434	1138	2	-1	0	-1	size _ t i = len & ksizetwithoutlower4bits ;	len ksizetwithoutlower4bits	EMPTY
434	1139	2	-1	0	-1	if ( i != numconst ) {	EMPTY	EMPTY
434	1140	3	-1	0	-1	size _ t j = i / numconst ;	EMPTY	EMPTY
434	1142	1	0	0	-1	# if defined ( ghash )	EMPTY	EMPTY
434	1143	2	-1	0	-1	ghash ( ctx  in  i ) ;	ctx in	EMPTY
434	1144	2	-1	0	-1	# else	EMPTY	EMPTY
434	1145	2	-1	0	-1	while ( j -- ) {	EMPTY	EMPTY
434	1146	2	-1	0	-1	size _ t k ;	EMPTY	EMPTY
434	1147	2	-1	0	-1	for ( k = numconst ; k < numconst ; ++ k ) {	EMPTY	EMPTY
434	1148	2	-1	0	-1	ctx -> xi . c [ k ] ^= in [ k ] ;	ctx xi in	EMPTY
434	1149	2	-1	0	-1	}	EMPTY	EMPTY
434	1150	2	-1	0	-1	gcm _ mul ( ctx  xi ) ;	ctx xi	EMPTY
434	1151	2	-1	0	-1	in += numconst ;	in	EMPTY
434	1152	2	-1	0	-1	}	EMPTY	EMPTY
434	1153	2	-1	0	-1	j = i / numconst ;	EMPTY	EMPTY
434	1154	2	-1	0	-1	in -= i ;	in	EMPTY
434	1155	2	-1	0	-1	# endif	EMPTY	EMPTY
434	1156	2	-1	0	-1	( * stream ) ( in  out  j  key  ctx -> yi . c ) ;	in out key ctx yi	EMPTY
434	1157	2	-1	0	-1	ctr += ( unsigned int ) j ;	EMPTY	EMPTY
434	1158	2	-1	0	-1	if ( is _ endian . little ) {	EMPTY	EMPTY
434	1159	2	-1	0	-1	putu32 ( ctx -> yi . c + numconst  ctr ) ;	ctx yi	EMPTY
434	1160	2	-1	0	-1	} else {	EMPTY	EMPTY
434	1161	2	-1	0	-1	ctx -> yi . d [ numconst ] = ctr ;	ctx yi	EMPTY
434	1162	2	-1	0	-1	}	EMPTY	EMPTY
434	1163	2	-1	0	-1	out += i ;	out	EMPTY
434	1164	2	-1	0	-1	in += i ;	in	EMPTY
434	1165	2	-1	0	-1	len -= i ;	len	EMPTY
434	1166	2	-1	0	-1	}	EMPTY	EMPTY
434	1167	2	-1	0	-1	if ( len ) {	len	EMPTY
434	1168	2	-1	0	-1	( * ctx -> block ) ( ctx -> yi . c  ctx -> eki . c  key ) ;	ctx ctx yi ctx eki key	EMPTY
434	1169	2	-1	0	-1	++ ctr ;	EMPTY	EMPTY
434	1170	2	-1	0	-1	if ( is _ endian . little ) {	EMPTY	EMPTY
434	1171	3	-1	0	-1	putu32 ( ctx -> yi . c + numconst  ctr ) ;	ctx yi	EMPTY
434	1172	1	0	0	-1	} else {	EMPTY	EMPTY
434	1173	2	-1	0	-1	ctx -> yi . d [ numconst ] = ctr ;	ctx yi	EMPTY
434	1174	2	-1	0	-1	}	EMPTY	EMPTY
434	1175	2	-1	0	-1	while ( len -- ) {	len	EMPTY
434	1176	2	-1	0	-1	uint8 _ t c = in [ n ] ;	in n	EMPTY
434	1177	2	-1	0	-1	ctx -> xi . c [ n ] ^= c ;	ctx xi n	EMPTY
434	1178	2	-1	0	-1	out [ n ] = c ^ ctx -> eki . c [ n ] ;	out n ctx eki n	EMPTY
434	1179	2	-1	0	-1	++ n ;	n	EMPTY
434	1180	2	-1	0	-1	}	EMPTY	EMPTY
434	1181	3	-1	0	-1	}	EMPTY	EMPTY
434	1183	1	0	0	-1	ctx -> mres = n ;	ctx n	EMPTY
434	1184	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
434	1185	3	-1	0	-1	}	EMPTY	EMPTY
434	1187	1	0	0	-1	int crypto _ gcm128 _ finish ( gcm128 _ context * ctx  const uint8 _ t * tag  size _ t len ) {	crypto _ gcm128 _ finish ctx tag len	EMPTY
434	1188	2	-1	0	-1	union {	EMPTY	EMPTY
434	1189	2	-1	0	-1	long one ;	EMPTY	EMPTY
434	1190	2	-1	0	-1	char little ;	EMPTY	EMPTY
434	1191	2	-1	0	-1	} is _ endian = { numconst } ;	EMPTY	EMPTY
434	1192	2	-1	0	-1	uint64 _ t alen = ctx -> len . u [ numconst ] << numconst ;	ctx len	EMPTY
434	1193	2	-1	0	-1	uint64 _ t clen = ctx -> len . u [ numconst ] << numconst ;	ctx len	EMPTY
434	1194	2	-1	0	-1	# ifdef gcm _ funcref _ 4bit	EMPTY	EMPTY
434	1195	2	-1	0	-1	void ( * gcm _ gmult _ p ) ( uint64 _ t xi [ numconst ]  const u128 htable [ numconst ] ) = ctx -> gmult ;	xi u128 htable ctx	EMPTY
434	1196	3	-1	0	-1	# endif	EMPTY	EMPTY
434	1198	1	0	0	0	if ( ctx -> mres || ctx -> ares ) {	ctx ctx	EMPTY
434	1199	2	-1	0	-1	gcm _ mul ( ctx  xi ) ;	ctx xi	EMPTY
434	1200	3	-1	0	-1	}	EMPTY	EMPTY
434	1202	1	0	0	0	if ( is _ endian . little ) {	EMPTY	EMPTY
434	1203	2	-1	0	-1	# ifdef bswap8	EMPTY	EMPTY
434	1204	2	-1	0	-1	alen = bswap8 ( alen ) ;	EMPTY	EMPTY
434	1205	2	-1	0	-1	clen = bswap8 ( clen ) ;	EMPTY	EMPTY
434	1206	2	-1	0	-1	# else	EMPTY	EMPTY
434	1207	3	-1	0	-1	uint8 _ t * p = ctx -> len . c ;	ctx len	EMPTY
434	1209	1	0	0	-1	ctx -> len . u [ numconst ] = alen ;	ctx len	EMPTY
434	1210	3	-1	0	-1	ctx -> len . u [ numconst ] = clen ;	ctx len	EMPTY
434	1212	1	0	0	-1	alen = ( uint64 _ t ) getu32 ( p ) << numconst | getu32 ( p + numconst ) ;	EMPTY	EMPTY
434	1213	2	-1	0	-1	clen = ( uint64 _ t ) getu32 ( p + numconst ) << numconst | getu32 ( p + numconst ) ;	EMPTY	EMPTY
434	1214	2	-1	0	-1	# endif	EMPTY	EMPTY
434	1215	3	-1	0	-1	}	EMPTY	EMPTY
434	1217	1	0	0	-1	ctx -> xi . u [ numconst ] ^= alen ;	ctx xi	EMPTY
434	1218	2	-1	0	-1	ctx -> xi . u [ numconst ] ^= clen ;	ctx xi	EMPTY
434	1219	3	-1	0	-1	gcm _ mul ( ctx  xi ) ;	ctx xi	EMPTY
434	1221	1	0	0	-1	ctx -> xi . u [ numconst ] ^= ctx -> ek0 . u [ numconst ] ;	ctx xi ctx ek0	EMPTY
434	1222	3	-1	0	-1	ctx -> xi . u [ numconst ] ^= ctx -> ek0 . u [ numconst ] ;	ctx xi ctx ek0	EMPTY
434	1224	1	0	0	0	if ( tag && len <= sizeof ( ctx -> xi ) ) {	tag len ctx xi	EMPTY
434	1225	2	-1	0	-1	return crypto _ memcmp ( ctx -> xi . c  tag  len ) == numconst ;	crypto _ memcmp ctx xi tag len	EMPTY
434	1226	2	-1	0	-1	}	EMPTY	EMPTY
434	1227	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
434	1228	2	-1	0	-1	}	EMPTY	EMPTY
434	1229	3	-1	0	-1	}	EMPTY	EMPTY
434	1231	1	0	0	-1	void crypto _ gcm128 _ tag ( gcm128 _ context * ctx  unsigned char * tag  size _ t len ) {	crypto _ gcm128 _ tag ctx tag len	EMPTY
434	1232	2	-1	0	-1	crypto _ gcm128 _ finish ( ctx  null  numconst ) ;	crypto _ gcm128 _ finish ctx	EMPTY
434	1233	2	-1	0	-1	memcpy ( tag  ctx -> xi . c  len <= sizeof ( ctx -> xi . c ) ? len : sizeof ( ctx -> xi . c ) ) ;	tag ctx xi len ctx xi len ctx xi	EMPTY
434	1234	3	-1	0	-1	}	EMPTY	EMPTY
434	1236	1	0	0	-1	void crypto _ gcm128 _ release ( gcm128 _ context * ctx ) {	crypto _ gcm128 _ release ctx	EMPTY
434	1237	2	-1	0	-1	if ( ctx ) {	ctx	EMPTY
434	1238	2	-1	0	-1	openssl _ cleanse ( ctx  sizeof ( * ctx ) ) ;	openssl _ cleanse ctx ctx	EMPTY
434	1239	2	-1	0	-1	openssl _ free ( ctx ) ;	ctx	EMPTY
434	1240	2	-1	0	-1	}	EMPTY	EMPTY
434	1241	3	-1	0	-1	}	EMPTY	EMPTY
434	1243	1	1	0	1	# if defined ( openssl _ x86 ) || defined ( openssl _ x86 _ 64	EMPTY	EMPTY
434	1244	2	-1	0	-1	int crypto _ gcm _ clmul _ enabled ( void ) {	crypto _ gcm _ clmul _ enabled	EMPTY
434	1245	2	-1	0	-1	# ifdef ghash _ asm	EMPTY	EMPTY
434	1246	2	-1	1	-1	return openssl _ ia32cap _ p [ numconst ] & ( numconst << numconst ) &&	openssl _ ia32cap _ p	EMPTY
434	1247	2	-1	1	-1	openssl _ ia32cap _ p [ numconst ] & ( numconst << numconst ) ;	openssl _ ia32cap _ p	EMPTY
434	1248	2	-1	0	-1	# else	EMPTY	EMPTY
434	1249	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
434	1250	2	-1	0	-1	# endif	EMPTY	EMPTY
434	1251	2	-1	0	-1	}	EMPTY	EMPTY
434	1252	3	-1	0	-1	# endif	EMPTY	EMPTY
438	74	1	0	0	-1	static struct crypto _ static _ mutex global _ added _ lock = crypto _ static _ mutex _ init ;	EMPTY	EMPTY
438	76	1	0	0	0	static lhash _ of ( asn1 _ object ) * global _ added _ by _ data = null	global _ added _ by _ data	EMPTY
438	77	2	-1	0	-1	static lhash _ of ( asn1 _ object ) * global _ added _ by _ nid = null	EMPTY	EMPTY
438	78	2	-1	0	-1	static lhash _ of ( asn1 _ object ) * global _ added _ by _ short _ name = null	EMPTY	EMPTY
438	79	3	-1	0	-1	static lhash _ of ( asn1 _ object ) * global _ added _ by _ long _ name = null ;	EMPTY	EMPTY
438	81	1	0	0	-1	static struct crypto _ static _ mutex global _ next _ nid _ lock =	EMPTY	EMPTY
438	82	2	-1	0	-1	crypto _ static _ mutex _ init	EMPTY	EMPTY
438	83	3	-1	0	-1	static unsigned global _ next _ nid = num _ nid ;	EMPTY	EMPTY
438	85	1	0	0	-1	static int obj _ next _ nid ( void ) {	EMPTY	EMPTY
438	86	3	-1	0	-1	int ret ;	ret	EMPTY
438	88	1	0	0	0	crypto _ static _ mutex _ lock _ write ( & global _ next _ nid _ lock )	crypto _ static _ mutex _ lock _ write	EMPTY
438	89	2	-1	0	-1	ret = global _ next _ nid ++	ret	EMPTY
438	90	3	-1	0	-1	crypto _ static _ mutex _ unlock ( & global _ next _ nid _ lock )	crypto _ static _ mutex _ unlock	EMPTY
438	92	1	0	0	0	return ret	ret	EMPTY
438	93	3	-1	0	-1	}	EMPTY	EMPTY
438	95	1	0	0	-1	asn1 _ object * obj _ dup ( const asn1 _ object * o ) {	obj _ dup	EMPTY
438	96	2	-1	0	-1	asn1 _ object * r ;	r	EMPTY
438	97	2	-1	0	-1	unsigned char * data = null ;	data	EMPTY
438	98	3	-1	0	-1	char * sn = null , * ln = null ;	EMPTY	EMPTY
438	100	1	0	0	0	if ( o == null ) {	EMPTY	EMPTY
438	101	2	-1	0	-1	return null ;	EMPTY	EMPTY
438	102	3	-1	0	-1	}	EMPTY	EMPTY
438	104	1	1	0	1	if ( ! ( o -> flags & asn1 _ object _ flag _ dynamic ) ) {	flags	EMPTY
438	106	2	-1	1	-1	return ( asn1 _ object * ) o	EMPTY	EMPTY
438	107	3	-1	0	-1	}	EMPTY	EMPTY
438	109	1	0	0	-1	r = asn1 _ object _ new ( ) ;	r	EMPTY
438	110	2	-1	0	-1	if ( r == null ) {	r	EMPTY
438	111	2	-1	0	-1	openssl _ put _ error ( obj  err _ r _ asn1 _ lib ) ;	EMPTY	EMPTY
438	112	2	-1	0	-1	return null ;	EMPTY	EMPTY
438	113	2	-1	0	-1	}	EMPTY	EMPTY
438	114	3	-1	0	-1	r -> ln = r -> sn = null ;	r r	EMPTY
438	116	1	0	0	-1	data = openssl _ malloc ( o -> length ) ;	data length	EMPTY
438	117	2	-1	0	-1	if ( data == null ) {	data	EMPTY
438	118	2	-1	0	-1	goto err ;	EMPTY	EMPTY
438	119	2	-1	0	-1	}	EMPTY	EMPTY
438	120	2	-1	0	-1	if ( o -> data != null ) {	data	EMPTY
438	121	2	-1	0	-1	memcpy ( data  o -> data  o -> length ) ;	data data length	EMPTY
438	122	3	-1	0	-1	}	EMPTY	EMPTY
438	125	1	1	1	-1	r -> data = data	r data data	EMPTY
438	126	2	-1	0	-1	r -> length = o -> length	r length length	EMPTY
438	127	3	-1	0	-1	r -> nid = o -> nid	r nid nid	EMPTY
438	129	1	0	0	0	if ( o -> ln != null ) {	EMPTY	EMPTY
438	130	2	-1	0	-1	ln = openssl _ strdup ( o -> ln ) ;	openssl _ strdup	EMPTY
438	131	2	-1	0	-1	if ( ln == null ) {	EMPTY	EMPTY
438	132	2	-1	0	-1	goto err ;	EMPTY	EMPTY
438	133	2	-1	0	-1	}	EMPTY	EMPTY
438	134	3	-1	0	-1	}	EMPTY	EMPTY
438	136	1	0	0	0	if ( o -> sn != null ) {	EMPTY	EMPTY
438	137	2	-1	0	-1	sn = openssl _ strdup ( o -> sn ) ;	openssl _ strdup	EMPTY
438	138	2	-1	0	-1	if ( sn == null ) {	EMPTY	EMPTY
438	139	2	-1	0	-1	goto err ;	EMPTY	EMPTY
438	140	2	-1	0	-1	}	EMPTY	EMPTY
438	141	3	-1	0	-1	}	EMPTY	EMPTY
438	143	1	0	0	-1	r -> sn = sn	r	EMPTY
438	144	3	-1	0	-1	r -> ln = ln	r	EMPTY
438	146	1	0	0	-1	r -> flags =	r flags	EMPTY
438	147	2	-1	0	-1	o -> flags | ( asn1 _ object _ flag _ dynamic | asn1 _ object _ flag _ dynamic _ strings |	flags	EMPTY
438	148	2	-1	0	-1	asn1 _ object _ flag _ dynamic _ data )	EMPTY	EMPTY
438	149	3	-1	0	-1	return r	r	EMPTY
438	151	1	0	0	-1	err :	EMPTY	EMPTY
438	152	2	-1	0	-1	openssl _ put _ error ( obj  err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
438	153	2	-1	0	-1	openssl _ free ( ln ) ;	EMPTY	EMPTY
438	154	2	-1	0	-1	openssl _ free ( sn ) ;	EMPTY	EMPTY
438	155	2	-1	0	-1	openssl _ free ( data ) ;	data	EMPTY
438	156	2	-1	0	-1	openssl _ free ( r ) ;	r	EMPTY
438	157	2	-1	0	-1	return null ;	EMPTY	EMPTY
438	158	3	-1	0	-1	}	EMPTY	EMPTY
438	160	1	0	0	-1	int obj _ cmp ( const asn1 _ object * a  const asn1 _ object * b ) {	obj _ cmp a b	EMPTY
438	161	3	-1	0	-1	int ret ;	ret	EMPTY
438	163	1	0	0	-1	ret = a -> length - b -> length ;	ret a length b length	EMPTY
438	164	2	-1	0	-1	if ( ret ) {	ret	EMPTY
438	165	2	-1	0	-1	return ret ;	ret	EMPTY
438	166	2	-1	0	-1	}	EMPTY	EMPTY
438	167	2	-1	0	-1	return memcmp ( a -> data  b -> data  a -> length ) ;	a data b data a length	EMPTY
438	168	3	-1	0	-1	}	EMPTY	EMPTY
438	173	1	0	0	-1	static int obj _ cmp ( const void * key  const void * element ) {	obj _ cmp key element	EMPTY
438	174	2	-1	0	-1	unsigned nid = * ( ( const unsigned * ) element ) ;	nid element	EMPTY
438	175	2	-1	0	-1	const asn1 _ object * a = key ;	a key	EMPTY
438	176	3	-1	0	-1	const asn1 _ object * b = & kobjects [ nid ] ;	b nid	EMPTY
438	178	1	0	0	0	if ( a -> length < b -> length ) {	a length b length	EMPTY
438	179	2	-1	0	-1	return - 1 ;	EMPTY	EMPTY
438	180	2	-1	0	-1	} else if ( a -> length > b -> length ) {	a length b length	EMPTY
438	181	2	-1	0	-1	return 1 ;	EMPTY	EMPTY
438	182	2	-1	0	-1	}	EMPTY	EMPTY
438	183	2	-1	0	-1	return memcmp ( a -> data , b -> data , a -> length )	a data b data a length	EMPTY
438	184	3	-1	0	-1	}	EMPTY	EMPTY
438	186	1	0	0	-1	int obj _ obj2nid ( const asn1 _ object * obj ) {	obj _ obj2nid obj	EMPTY
438	187	3	-1	0	-1	const unsigned int * nid _ ptr ;	EMPTY	EMPTY
438	189	1	0	0	0	if ( obj == null ) {	obj	EMPTY
438	190	2	-1	0	-1	return nid _ undef ;	EMPTY	EMPTY
438	191	3	-1	0	-1	}	EMPTY	EMPTY
438	193	1	0	0	0	if ( obj -> nid != 0 ) {	obj nid	EMPTY
438	194	2	-1	0	-1	return obj -> nid ;	obj nid	EMPTY
438	195	3	-1	0	-1	}	EMPTY	EMPTY
438	197	1	0	0	0	crypto _ static _ mutex _ lock _ read ( & global _ added _ lock )	crypto _ static _ mutex _ lock _ read	EMPTY
438	198	2	-1	0	-1	if ( global _ added _ by _ data != null ) {	global _ added _ by _ data	EMPTY
438	199	3	-1	0	-1	asn1 _ object * match ;	EMPTY	EMPTY
438	201	1	0	0	-1	match = lh _ asn1 _ object _ retrieve ( global _ added _ by _ data , obj ) ;	global _ added _ by _ data obj	EMPTY
438	202	2	-1	0	-1	if ( match != null ) {	EMPTY	EMPTY
438	203	2	-1	0	-1	crypto _ static _ mutex _ unlock ( & global _ added _ lock ) ;	crypto _ static _ mutex _ unlock	EMPTY
438	204	2	-1	0	-1	return match -> nid ;	nid	EMPTY
438	205	2	-1	0	-1	}	EMPTY	EMPTY
438	206	2	-1	0	-1	}	EMPTY	EMPTY
438	207	3	-1	0	-1	crypto _ static _ mutex _ unlock ( & global _ added _ lock )	crypto _ static _ mutex _ unlock	EMPTY
438	209	1	0	0	-1	nid _ ptr = bsearch ( obj , knidsinoidorder , num _ obj , sizeof ( unsigned ) , obj _ cmp )	obj obj _ cmp	EMPTY
438	210	2	-1	0	-1	if ( nid _ ptr == null ) {	EMPTY	EMPTY
438	211	2	-1	0	-1	return nid _ undef ;	EMPTY	EMPTY
438	212	3	-1	0	-1	}	EMPTY	EMPTY
438	214	1	0	0	0	return kobjects [ * nid _ ptr ] . nid	nid	EMPTY
438	215	3	-1	0	-1	}	EMPTY	EMPTY
438	217	1	0	0	-1	int obj _ cbs2nid ( const cbs * cbs ) {	obj _ cbs2nid cbs	EMPTY
438	218	2	-1	0	-1	asn1 _ object obj ;	obj	EMPTY
438	219	2	-1	0	-1	memset ( & obj  numconst  sizeof ( obj ) ) ;	obj obj	EMPTY
438	220	2	-1	0	-1	obj . data = cbs _ data ( cbs )	obj data cbs _ data cbs	EMPTY
438	221	3	-1	0	-1	obj . length = cbs _ len ( cbs )	obj length cbs _ len cbs	EMPTY
438	223	1	0	0	0	return obj _ obj2nid ( & obj )	obj _ obj2nid obj	EMPTY
438	224	3	-1	0	-1	}	EMPTY	EMPTY
438	229	1	0	0	-1	static int short _ name _ cmp ( const void * key  const void * element ) {	short _ name _ cmp key element	EMPTY
438	230	2	-1	0	-1	const char * name = ( const char * ) key ;	key	EMPTY
438	231	3	-1	0	-1	unsigned nid = * ( ( unsigned * ) element ) ;	nid element	EMPTY
438	233	1	0	0	0	return strcmp ( name , kobjects [ nid ] . sn )	nid	EMPTY
438	234	3	-1	0	-1	}	EMPTY	EMPTY
438	236	1	0	0	-1	int obj _ sn2nid ( const char * short _ name ) {	obj _ sn2nid short _ name	EMPTY
438	237	3	-1	0	-1	const unsigned int * nid _ ptr ;	EMPTY	EMPTY
438	239	1	0	0	0	crypto _ static _ mutex _ lock _ read ( & global _ added _ lock )	crypto _ static _ mutex _ lock _ read	EMPTY
438	240	2	-1	0	-1	if ( global _ added _ by _ short _ name != null ) {	EMPTY	EMPTY
438	241	3	-1	0	-1	asn1 _ object * match , template ;	EMPTY	EMPTY
438	243	1	0	0	-1	template . sn = short _ name ;	short _ name	EMPTY
438	244	2	-1	0	-1	match = lh _ asn1 _ object _ retrieve ( global _ added _ by _ short _ name , & template ) ;	EMPTY	EMPTY
438	245	2	-1	0	-1	if ( match != null ) {	EMPTY	EMPTY
438	246	2	-1	0	-1	crypto _ static _ mutex _ unlock ( & global _ added _ lock ) ;	crypto _ static _ mutex _ unlock	EMPTY
438	247	2	-1	0	-1	return match -> nid ;	nid	EMPTY
438	248	2	-1	0	-1	}	EMPTY	EMPTY
438	249	2	-1	0	-1	}	EMPTY	EMPTY
438	250	3	-1	0	-1	crypto _ static _ mutex _ unlock ( & global _ added _ lock )	crypto _ static _ mutex _ unlock	EMPTY
438	252	1	0	0	-1	nid _ ptr = bsearch ( short _ name , knidsinshortnameorder , num _ sn , sizeof ( unsigned ) , short _ name _ cmp )	short _ name short _ name _ cmp	EMPTY
438	253	2	-1	0	-1	if ( nid _ ptr == null ) {	EMPTY	EMPTY
438	254	2	-1	0	-1	return nid _ undef ;	EMPTY	EMPTY
438	255	3	-1	0	-1	}	EMPTY	EMPTY
438	257	1	0	0	0	return kobjects [ * nid _ ptr ] . nid	nid	EMPTY
438	258	3	-1	0	-1	}	EMPTY	EMPTY
438	263	1	0	0	-1	static int long _ name _ cmp ( const void * key  const void * element ) {	long _ name _ cmp key element	EMPTY
438	264	2	-1	0	-1	const char * name = ( const char * ) key ;	key	EMPTY
438	265	3	-1	0	-1	unsigned nid = * ( ( unsigned * ) element ) ;	nid element	EMPTY
438	267	1	0	0	0	return strcmp ( name , kobjects [ nid ] . ln )	nid	EMPTY
438	268	3	-1	0	-1	}	EMPTY	EMPTY
438	270	1	0	0	-1	int obj _ ln2nid ( const char * long _ name ) {	obj _ ln2nid long _ name	EMPTY
438	271	3	-1	0	-1	const unsigned int * nid _ ptr ;	EMPTY	EMPTY
438	273	1	0	0	0	crypto _ static _ mutex _ lock _ read ( & global _ added _ lock )	crypto _ static _ mutex _ lock _ read	EMPTY
438	274	2	-1	0	-1	if ( global _ added _ by _ long _ name != null ) {	EMPTY	EMPTY
438	275	3	-1	0	-1	asn1 _ object * match , template ;	EMPTY	EMPTY
438	277	1	0	0	-1	template . ln = long _ name ;	long _ name	EMPTY
438	278	2	-1	0	-1	match = lh _ asn1 _ object _ retrieve ( global _ added _ by _ long _ name , & template ) ;	EMPTY	EMPTY
438	279	2	-1	0	-1	if ( match != null ) {	EMPTY	EMPTY
438	280	2	-1	0	-1	crypto _ static _ mutex _ unlock ( & global _ added _ lock ) ;	crypto _ static _ mutex _ unlock	EMPTY
438	281	2	-1	0	-1	return match -> nid ;	nid	EMPTY
438	282	2	-1	0	-1	}	EMPTY	EMPTY
438	283	2	-1	0	-1	}	EMPTY	EMPTY
438	284	3	-1	0	-1	crypto _ static _ mutex _ unlock ( & global _ added _ lock )	crypto _ static _ mutex _ unlock	EMPTY
438	286	1	0	0	-1	nid _ ptr = bsearch ( long _ name , knidsinlongnameorder , num _ ln , sizeof ( unsigned ) , long _ name _ cmp )	long _ name long _ name _ cmp	EMPTY
438	287	2	-1	0	-1	if ( nid _ ptr == null ) {	EMPTY	EMPTY
438	288	2	-1	0	-1	return nid _ undef ;	EMPTY	EMPTY
438	289	3	-1	0	-1	}	EMPTY	EMPTY
438	291	1	0	0	0	return kobjects [ * nid _ ptr ] . nid	nid	EMPTY
438	292	3	-1	0	-1	}	EMPTY	EMPTY
438	294	1	0	0	-1	int obj _ txt2nid ( const char * s ) {	obj _ txt2nid s	EMPTY
438	295	2	-1	0	-1	asn1 _ object * obj ;	obj	EMPTY
438	296	3	-1	0	-1	int nid ;	nid	EMPTY
438	298	1	1	1	-1	obj = obj _ txt2obj ( s  numconst ) ;	obj obj _ txt2obj s	EMPTY
438	299	2	-1	0	-1	nid = obj _ obj2nid ( obj )	nid obj _ obj2nid obj	EMPTY
438	300	2	-1	0	-1	asn1 _ object _ free ( obj )	obj	EMPTY
438	301	2	-1	0	-1	return nid	nid	EMPTY
438	302	3	-1	0	-1	}	EMPTY	EMPTY
438	304	1	0	0	-1	openssl _ export int obj _ nid2cbb ( cbb * out  int nid ) {	obj _ nid2cbb out nid	EMPTY
438	305	2	-1	0	-1	const asn1 _ object * obj = obj _ nid2obj ( nid ) ;	obj obj _ nid2obj nid	EMPTY
438	306	3	-1	0	-1	cbb oid ;	oid	EMPTY
438	308	1	0	0	0	if ( obj == null ||	obj	EMPTY
438	309	2	-1	0	-1	! cbb _ add _ asn1 ( out  & oid  cbs _ asn1 _ object ) ||	cbb _ add _ asn1 out oid	EMPTY
438	310	2	-1	0	-1	! cbb _ add _ bytes ( & oid  obj -> data  obj -> length ) ||	cbb _ add _ bytes oid obj data obj length	EMPTY
438	311	2	-1	0	-1	! cbb _ flush ( out ) ) {	cbb _ flush out	EMPTY
438	312	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
438	313	3	-1	0	-1	}	EMPTY	EMPTY
438	315	1	0	0	0	return numconst ;	EMPTY	EMPTY
438	316	3	-1	0	-1	}	EMPTY	EMPTY
438	318	1	0	0	-1	const asn1 _ object * obj _ nid2obj ( int nid ) {	obj _ nid2obj nid	EMPTY
438	319	2	-1	0	-1	if ( nid >= numconst && nid < num _ nid ) {	nid nid	EMPTY
438	320	2	-1	0	-1	if ( nid != nid _ undef && kobjects [ nid ] . nid == nid _ undef ) {	nid nid nid	EMPTY
438	321	2	-1	0	-1	goto err ;	EMPTY	EMPTY
438	322	2	-1	0	-1	}	EMPTY	EMPTY
438	323	2	-1	0	-1	return & kobjects [ nid ] ;	nid	EMPTY
438	324	3	-1	0	-1	}	EMPTY	EMPTY
438	326	1	0	0	0	crypto _ static _ mutex _ lock _ read ( & global _ added _ lock ) ;	crypto _ static _ mutex _ lock _ read	EMPTY
438	327	2	-1	0	-1	if ( global _ added _ by _ nid != null ) {	EMPTY	EMPTY
438	328	3	-1	0	-1	asn1 _ object * match  template ;	EMPTY	EMPTY
438	330	1	0	0	-1	template . nid = nid ;	nid nid	EMPTY
438	331	2	-1	0	-1	match = lh _ asn1 _ object _ retrieve ( global _ added _ by _ nid  & template ) ;	EMPTY	EMPTY
438	332	2	-1	0	-1	if ( match != null ) {	EMPTY	EMPTY
438	333	2	-1	0	-1	crypto _ static _ mutex _ unlock ( & global _ added _ lock ) ;	crypto _ static _ mutex _ unlock	EMPTY
438	334	2	-1	0	-1	return match ;	EMPTY	EMPTY
438	335	2	-1	0	-1	}	EMPTY	EMPTY
438	336	2	-1	0	-1	}	EMPTY	EMPTY
438	337	3	-1	0	-1	crypto _ static _ mutex _ unlock ( & global _ added _ lock ) ;	crypto _ static _ mutex _ unlock	EMPTY
438	339	1	0	0	-1	err :	EMPTY	EMPTY
438	340	2	-1	0	-1	openssl _ put _ error ( obj  obj _ r _ unknown _ nid ) ;	EMPTY	EMPTY
438	341	2	-1	0	-1	return null ;	EMPTY	EMPTY
438	342	3	-1	0	-1	}	EMPTY	EMPTY
438	344	1	0	0	-1	const char * obj _ nid2sn ( int nid ) {	obj _ nid2sn nid	EMPTY
438	345	2	-1	0	-1	const asn1 _ object * obj = obj _ nid2obj ( nid ) ;	obj obj _ nid2obj nid	EMPTY
438	346	2	-1	0	-1	if ( obj == null ) {	obj	EMPTY
438	347	2	-1	0	-1	return null ;	EMPTY	EMPTY
438	348	3	-1	0	-1	}	EMPTY	EMPTY
438	350	1	0	0	0	return obj -> sn ;	obj	EMPTY
438	351	3	-1	0	-1	}	EMPTY	EMPTY
438	353	1	0	0	-1	const char * obj _ nid2ln ( int nid ) {	obj _ nid2ln nid	EMPTY
438	354	2	-1	0	-1	const asn1 _ object * obj = obj _ nid2obj ( nid ) ;	obj obj _ nid2obj nid	EMPTY
438	355	2	-1	0	-1	if ( obj == null ) {	obj	EMPTY
438	356	2	-1	0	-1	return null ;	EMPTY	EMPTY
438	357	3	-1	0	-1	}	EMPTY	EMPTY
438	359	1	0	0	0	return obj -> ln ;	obj	EMPTY
438	360	3	-1	0	-1	}	EMPTY	EMPTY
438	362	1	0	0	-1	asn1 _ object * obj _ txt2obj ( const char * s  int dont _ search _ names ) {	obj _ txt2obj s dont _ search _ names	EMPTY
438	363	2	-1	0	-1	int nid = nid _ undef ;	nid	EMPTY
438	364	2	-1	0	-1	asn1 _ object * op = null ;	EMPTY	EMPTY
438	365	2	-1	0	-1	unsigned char * buf ;	buf	EMPTY
438	366	2	-1	0	-1	unsigned char * p ;	p	EMPTY
438	367	2	-1	0	-1	const unsigned char * bufp ;	EMPTY	EMPTY
438	368	3	-1	0	-1	int contents _ len  total _ len ;	EMPTY	EMPTY
438	370	1	0	0	0	if ( ! dont _ search _ names ) {	dont _ search _ names	EMPTY
438	371	2	-1	0	-1	nid = obj _ sn2nid ( s ) ;	nid obj _ sn2nid s	EMPTY
438	372	2	-1	0	-1	if ( nid == nid _ undef ) {	nid	EMPTY
438	373	2	-1	0	-1	nid = obj _ ln2nid ( s ) ;	nid obj _ ln2nid s	EMPTY
438	374	3	-1	0	-1	}	EMPTY	EMPTY
438	376	1	0	0	0	if ( nid != nid _ undef ) {	nid	EMPTY
438	377	2	-1	0	-1	return ( asn1 _ object * ) obj _ nid2obj ( nid ) ;	obj _ nid2obj nid	EMPTY
438	378	2	-1	0	-1	}	EMPTY	EMPTY
438	379	3	-1	0	-1	}	EMPTY	EMPTY
438	382	1	1	1	-1	contents _ len = a2d _ asn1 _ object ( null , 0 , s , - 1 )	s	EMPTY
438	383	2	-1	0	-1	if ( contents _ len <= 0 ) {	EMPTY	EMPTY
438	384	2	-1	0	-1	return null ;	EMPTY	EMPTY
438	385	2	-1	0	-1	}	EMPTY	EMPTY
438	387	3	-1	1	-1	total _ len = asn1 _ object _ size ( 0 , contents _ len , v _ asn1 _ object )	EMPTY	EMPTY
438	389	1	0	0	-1	buf = openssl _ malloc ( total _ len )	buf	EMPTY
438	390	2	-1	0	-1	if ( buf == null ) {	buf	EMPTY
438	391	2	-1	0	-1	openssl _ put _ error ( obj , err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
438	392	2	-1	0	-1	return null ;	EMPTY	EMPTY
438	393	3	-1	0	-1	}	EMPTY	EMPTY
438	395	1	1	0	-1	p = buf	p buf	EMPTY
438	397	2	-1	1	-1	asn1 _ put _ object ( & p , 0 , contents _ len , v _ asn1 _ object , v _ asn1 _ universal )	p	EMPTY
438	399	3	-1	1	-1	a2d _ asn1 _ object ( p , contents _ len , s , - 1 )	p s	EMPTY
438	401	1	0	0	-1	bufp = buf	buf	EMPTY
438	402	2	-1	0	-1	op = d2i _ asn1 _ object ( null , & bufp , total _ len )	EMPTY	EMPTY
438	403	3	-1	0	-1	openssl _ free ( buf ) ;	buf	EMPTY
438	405	1	0	0	0	return op	EMPTY	EMPTY
438	406	3	-1	0	-1	}	EMPTY	EMPTY
438	408	1	0	0	-1	int obj _ obj2txt ( char * out  int out _ len  const asn1 _ object * obj  int dont _ return _ name ) {	obj _ obj2txt out out _ len obj	EMPTY
438	409	2	-1	0	-1	int i  n = numconst  len  nid  first  use _ bn ;	i n len nid	EMPTY
438	410	2	-1	0	-1	bignum * bl ;	EMPTY	EMPTY
438	411	2	-1	0	-1	unsigned long l ;	EMPTY	EMPTY
438	412	2	-1	0	-1	const unsigned char * p ;	p	EMPTY
438	413	3	-1	0	-1	char tbuf [ decimal _ size ( i ) + decimal _ size ( l ) + numconst ] ;	i	EMPTY
438	415	1	0	0	0	if ( out && out _ len > numconst ) {	out out _ len	EMPTY
438	416	2	-1	0	-1	out [ numconst ] = numconst ;	out	EMPTY
438	417	3	-1	0	-1	}	EMPTY	EMPTY
438	419	1	0	0	0	if ( obj == null || obj -> data == null ) {	obj obj data	EMPTY
438	420	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
438	421	3	-1	0	-1	}	EMPTY	EMPTY
438	423	1	0	0	0	if ( ! dont _ return _ name && ( nid = obj _ obj2nid ( obj ) ) != nid _ undef ) {	nid obj _ obj2nid obj	EMPTY
438	424	2	-1	0	-1	const char * s ;	s	EMPTY
438	425	2	-1	0	-1	s = obj _ nid2ln ( nid ) ;	s obj _ nid2ln nid	EMPTY
438	426	2	-1	0	-1	if ( s == null ) {	s	EMPTY
438	427	2	-1	0	-1	s = obj _ nid2sn ( nid ) ;	s obj _ nid2sn nid	EMPTY
438	428	2	-1	0	-1	}	EMPTY	EMPTY
438	429	2	-1	0	-1	if ( s ) {	s	EMPTY
438	430	2	-1	0	-1	if ( out ) {	out	EMPTY
438	431	2	-1	0	-1	buf _ strlcpy ( out  s  out _ len ) ;	buf _ strlcpy out s out _ len	EMPTY
438	432	2	-1	0	-1	}	EMPTY	EMPTY
438	433	2	-1	0	-1	return strlen ( s ) ;	s	EMPTY
438	434	2	-1	0	-1	}	EMPTY	EMPTY
438	435	3	-1	0	-1	}	EMPTY	EMPTY
438	437	1	0	0	-1	len = obj -> length ;	len obj length	EMPTY
438	438	3	-1	0	-1	p = obj -> data ;	p obj data	EMPTY
438	440	1	0	0	-1	first = numconst ;	EMPTY	EMPTY
438	441	3	-1	0	-1	bl = null ;	EMPTY	EMPTY
438	443	1	0	0	0	while ( len > numconst ) {	len	EMPTY
438	444	2	-1	0	-1	l = numconst ;	EMPTY	EMPTY
438	445	2	-1	0	-1	use _ bn = numconst ;	EMPTY	EMPTY
438	446	2	-1	0	-1	for ( ; ; ) {	EMPTY	EMPTY
438	447	2	-1	0	-1	unsigned char c = * p ++ ;	c p	EMPTY
438	448	2	-1	0	-1	len -- ;	len	EMPTY
438	449	2	-1	0	-1	if ( len == numconst && ( c & numconst ) ) {	len c	EMPTY
438	450	2	-1	0	-1	goto err ;	EMPTY	EMPTY
438	451	2	-1	0	-1	}	EMPTY	EMPTY
438	452	2	-1	0	-1	if ( use _ bn ) {	EMPTY	EMPTY
438	453	2	-1	0	-1	if ( ! bn _ add _ word ( bl  c & numconst ) ) {	bn _ add _ word c	EMPTY
438	454	2	-1	0	-1	goto err ;	EMPTY	EMPTY
438	455	2	-1	0	-1	}	EMPTY	EMPTY
438	456	2	-1	0	-1	}	EMPTY	EMPTY
438	457	2	-1	0	-1	l |= c & numconst ;	c	EMPTY
438	458	2	-1	0	-1	}	EMPTY	EMPTY
438	459	2	-1	0	-1	if ( ! ( c & numconst ) ) {	c	EMPTY
438	460	2	-1	0	-1	break ;	EMPTY	EMPTY
438	461	2	-1	0	-1	}	EMPTY	EMPTY
438	462	2	-1	0	-1	if ( ! use _ bn && ( l > ( ulong _ max >> numconst ) ) ) {	EMPTY	EMPTY
438	463	2	-1	0	-1	if ( ! bl && ! ( bl = bn _ new ( ) ) ) {	bn _ new	EMPTY
438	464	2	-1	0	-1	goto err ;	EMPTY	EMPTY
438	465	2	-1	0	-1	}	EMPTY	EMPTY
438	466	2	-1	0	-1	if ( ! bn _ set _ word ( bl  l ) ) {	bn _ set _ word	EMPTY
438	467	2	-1	0	-1	goto err ;	EMPTY	EMPTY
438	468	2	-1	0	-1	}	EMPTY	EMPTY
438	469	2	-1	0	-1	use _ bn = numconst ;	EMPTY	EMPTY
438	470	2	-1	0	-1	}	EMPTY	EMPTY
438	471	2	-1	0	-1	if ( use _ bn ) {	EMPTY	EMPTY
438	472	3	-1	0	-1	if ( ! bn _ lshift ( bl  bl  numconst ) ) {	bn _ lshift	EMPTY
438	473	1	0	0	-1	goto err ;	EMPTY	EMPTY
438	474	2	-1	0	-1	}	EMPTY	EMPTY
438	475	2	-1	0	-1	}	EMPTY	EMPTY
438	476	2	-1	0	-1	l <<= numconst ;	EMPTY	EMPTY
438	477	2	-1	0	-1	}	EMPTY	EMPTY
438	478	3	-1	0	-1	}	EMPTY	EMPTY
438	480	1	0	0	0	if ( first ) {	EMPTY	EMPTY
438	481	2	-1	0	-1	first = numconst ;	EMPTY	EMPTY
438	482	2	-1	0	-1	if ( l >= numconst ) {	EMPTY	EMPTY
438	483	2	-1	0	-1	i = numconst ;	i	EMPTY
438	484	2	-1	0	-1	if ( use _ bn ) {	EMPTY	EMPTY
438	485	2	-1	0	-1	if ( ! bn _ sub _ word ( bl  numconst ) ) {	bn _ sub _ word	EMPTY
438	486	2	-1	0	-1	goto err ;	EMPTY	EMPTY
438	487	2	-1	0	-1	}	EMPTY	EMPTY
438	488	2	-1	0	-1	}	EMPTY	EMPTY
438	489	2	-1	0	-1	l -= numconst ;	EMPTY	EMPTY
438	490	2	-1	0	-1	}	EMPTY	EMPTY
438	491	2	-1	0	-1	}	EMPTY	EMPTY
438	492	2	-1	0	-1	i = ( int ) ( l / numconst ) ;	i	EMPTY
438	493	2	-1	0	-1	l -= ( long ) ( i * numconst ) ;	i	EMPTY
438	494	2	-1	0	-1	}	EMPTY	EMPTY
438	495	3	-1	0	-1	if ( out && out _ len > numconst ) {	out out _ len	EMPTY
438	498	1	0	0	-1	out _ len -- ;	out _ len	EMPTY
438	499	2	-1	0	-1	}	EMPTY	EMPTY
438	500	2	-1	0	-1	n ++ ;	n	EMPTY
438	501	3	-1	0	-1	}	EMPTY	EMPTY
438	503	1	0	0	0	if ( use _ bn ) {	EMPTY	EMPTY
438	504	2	-1	0	-1	char * bndec ;	EMPTY	EMPTY
438	505	2	-1	0	-1	bndec = bn _ bn2dec ( bl ) ;	bn _ bn2dec	EMPTY
438	506	2	-1	0	-1	if ( ! bndec ) {	EMPTY	EMPTY
438	507	2	-1	0	-1	goto err ;	EMPTY	EMPTY
438	508	2	-1	0	-1	}	EMPTY	EMPTY
438	509	2	-1	0	-1	i = strlen ( bndec ) ;	i	EMPTY
438	510	2	-1	0	-1	if ( out ) {	out	EMPTY
438	511	3	-1	0	-1	if ( out _ len > numconst ) {	out _ len	EMPTY
438	514	1	0	0	-1	out _ len -- ;	out _ len	EMPTY
438	515	2	-1	0	-1	}	EMPTY	EMPTY
438	516	2	-1	0	-1	buf _ strlcpy ( out  bndec  out _ len ) ;	buf _ strlcpy out out _ len	EMPTY
438	517	2	-1	0	-1	if ( i > out _ len ) {	i out _ len	EMPTY
438	518	2	-1	0	-1	out += out _ len ;	out out _ len	EMPTY
438	519	2	-1	0	-1	out _ len = numconst ;	out _ len	EMPTY
438	520	2	-1	0	-1	} else {	EMPTY	EMPTY
438	521	2	-1	0	-1	out += i ;	out i	EMPTY
438	522	2	-1	0	-1	out _ len -= i ;	out _ len i	EMPTY
438	523	2	-1	0	-1	}	EMPTY	EMPTY
438	524	2	-1	0	-1	}	EMPTY	EMPTY
438	525	2	-1	0	-1	n ++ ;	n	EMPTY
438	526	2	-1	0	-1	n += i ;	n i	EMPTY
438	527	2	-1	0	-1	openssl _ free ( bndec ) ;	EMPTY	EMPTY
438	528	2	-1	0	-1	}	EMPTY	EMPTY
438	529	2	-1	0	-1	bio _ snprintf ( tbuf  sizeof ( tbuf )  strlit  l ) ;	EMPTY	EMPTY
438	530	2	-1	0	-1	i = strlen ( tbuf ) ;	i	EMPTY
438	531	2	-1	0	-1	if ( out && out _ len > numconst ) {	out out _ len	EMPTY
438	532	2	-1	0	-1	buf _ strlcpy ( out  tbuf  out _ len ) ;	buf _ strlcpy out out _ len	EMPTY
438	533	2	-1	0	-1	if ( i > out _ len ) {	i out _ len	EMPTY
438	534	2	-1	0	-1	out += out _ len ;	out out _ len	EMPTY
438	535	2	-1	0	-1	out _ len = numconst ;	out _ len	EMPTY
438	536	2	-1	0	-1	} else {	EMPTY	EMPTY
438	537	2	-1	0	-1	out += i ;	out i	EMPTY
438	538	2	-1	0	-1	out _ len -= i ;	out _ len i	EMPTY
438	539	2	-1	0	-1	}	EMPTY	EMPTY
438	540	2	-1	0	-1	}	EMPTY	EMPTY
438	541	2	-1	0	-1	n += i ;	n i	EMPTY
438	542	2	-1	0	-1	}	EMPTY	EMPTY
438	543	3	-1	0	-1	}	EMPTY	EMPTY
438	545	1	0	0	0	bn _ free ( bl ) ;	bn _ free	EMPTY
438	546	3	-1	0	-1	return n ;	n	EMPTY
438	548	1	0	0	-1	err :	EMPTY	EMPTY
438	549	2	-1	0	-1	bn _ free ( bl ) ;	bn _ free	EMPTY
438	550	2	-1	0	-1	return - numconst ;	EMPTY	EMPTY
438	551	3	-1	0	-1	}	EMPTY	EMPTY
438	553	1	0	0	-1	static uint32 _ t hash _ nid ( const asn1 _ object * obj ) {	obj	EMPTY
438	554	2	-1	0	-1	return obj -> nid ;	obj nid	EMPTY
438	555	3	-1	0	-1	}	EMPTY	EMPTY
438	557	1	0	0	-1	static int cmp _ nid ( const asn1 _ object * a  const asn1 _ object * b ) {	a b	EMPTY
438	558	2	-1	0	-1	return a -> nid - b -> nid ;	a nid b nid	EMPTY
438	559	3	-1	0	-1	}	EMPTY	EMPTY
438	561	1	0	0	-1	static uint32 _ t hash _ data ( const asn1 _ object * obj ) {	obj	EMPTY
438	562	2	-1	0	-1	return openssl _ hash32 ( obj -> data  obj -> length ) ;	openssl _ hash32 obj data obj length	EMPTY
438	563	3	-1	0	-1	}	EMPTY	EMPTY
438	565	1	0	0	-1	static int cmp _ data ( const asn1 _ object * a  const asn1 _ object * b ) {	a b	EMPTY
438	566	2	-1	0	-1	int i = a -> length - b -> length ;	i a length b length	EMPTY
438	567	2	-1	0	-1	if ( i ) {	i	EMPTY
438	568	2	-1	0	-1	return i ;	i	EMPTY
438	569	2	-1	0	-1	}	EMPTY	EMPTY
438	570	2	-1	0	-1	return memcmp ( a -> data  b -> data  a -> length ) ;	a data b data a length	EMPTY
438	571	3	-1	0	-1	}	EMPTY	EMPTY
438	573	1	0	0	-1	static uint32 _ t hash _ short _ name ( const asn1 _ object * obj ) {	obj	EMPTY
438	574	2	-1	0	-1	return lh _ strhash ( obj -> sn ) ;	lh _ strhash obj	EMPTY
438	575	3	-1	0	-1	}	EMPTY	EMPTY
438	577	1	0	0	-1	static int cmp _ short _ name ( const asn1 _ object * a  const asn1 _ object * b ) {	a b	EMPTY
438	578	2	-1	0	-1	return strcmp ( a -> sn  b -> sn ) ;	a b	EMPTY
438	579	3	-1	0	-1	}	EMPTY	EMPTY
438	581	1	0	0	-1	static uint32 _ t hash _ long _ name ( const asn1 _ object * obj ) {	obj	EMPTY
438	582	2	-1	0	-1	return lh _ strhash ( obj -> ln ) ;	lh _ strhash obj	EMPTY
438	583	3	-1	0	-1	}	EMPTY	EMPTY
438	585	1	0	0	-1	static int cmp _ long _ name ( const asn1 _ object * a  const asn1 _ object * b ) {	a b	EMPTY
438	586	2	-1	0	-1	return strcmp ( a -> ln  b -> ln ) ;	a b	EMPTY
438	587	3	-1	0	-1	}	EMPTY	EMPTY
438	591	1	0	0	-1	static int obj _ add _ object ( asn1 _ object * obj ) {	obj _ add _ object obj	EMPTY
438	592	2	-1	0	-1	int ok ;	EMPTY	EMPTY
438	593	3	-1	0	-1	asn1 _ object * old _ object ;	EMPTY	EMPTY
438	595	1	0	0	-1	obj -> flags &= ~ ( asn1 _ object _ flag _ dynamic | asn1 _ object _ flag _ dynamic _ strings |	obj flags	EMPTY
438	596	3	-1	0	-1	asn1 _ object _ flag _ dynamic _ data )	EMPTY	EMPTY
438	598	1	0	0	0	crypto _ static _ mutex _ lock _ write ( & global _ added _ lock )	crypto _ static _ mutex _ lock _ write	EMPTY
438	599	2	-1	0	-1	if ( global _ added _ by _ nid == null ) {	EMPTY	EMPTY
438	600	2	-1	0	-1	global _ added _ by _ nid = lh _ asn1 _ object _ new ( hash _ nid , cmp _ nid ) ;	EMPTY	EMPTY
438	601	2	-1	0	-1	global _ added _ by _ data = lh _ asn1 _ object _ new ( hash _ data , cmp _ data ) ;	global _ added _ by _ data	EMPTY
438	602	2	-1	0	-1	global _ added _ by _ short _ name = lh _ asn1 _ object _ new ( hash _ short _ name , cmp _ short _ name ) ;	EMPTY	EMPTY
438	603	2	-1	0	-1	global _ added _ by _ long _ name = lh _ asn1 _ object _ new ( hash _ long _ name , cmp _ long _ name ) ;	EMPTY	EMPTY
438	604	3	-1	0	-1	}	EMPTY	EMPTY
438	611	1	1	1	-1	ok = lh _ asn1 _ object _ insert ( global _ added _ by _ nid  & old _ object  obj ) ;	obj	EMPTY
438	612	2	-1	0	-1	if ( obj -> length != 0 && obj -> data != null ) {	obj length obj data	EMPTY
438	613	2	-1	0	-1	ok &= lh _ asn1 _ object _ insert ( global _ added _ by _ data , & old _ object , obj ) ;	global _ added _ by _ data obj	EMPTY
438	614	2	-1	0	-1	}	EMPTY	EMPTY
438	615	2	-1	0	-1	if ( obj -> sn != null ) {	obj	EMPTY
438	616	2	-1	0	-1	ok &= lh _ asn1 _ object _ insert ( global _ added _ by _ short _ name , & old _ object , obj ) ;	obj	EMPTY
438	617	2	-1	0	-1	}	EMPTY	EMPTY
438	618	2	-1	0	-1	if ( obj -> ln != null ) {	obj	EMPTY
438	619	2	-1	0	-1	ok &= lh _ asn1 _ object _ insert ( global _ added _ by _ long _ name , & old _ object , obj ) ;	obj	EMPTY
438	620	2	-1	0	-1	}	EMPTY	EMPTY
438	621	3	-1	0	-1	crypto _ static _ mutex _ unlock ( & global _ added _ lock )	crypto _ static _ mutex _ unlock	EMPTY
438	623	1	0	0	0	return ok	EMPTY	EMPTY
438	624	3	-1	0	-1	}	EMPTY	EMPTY
438	626	1	0	0	-1	int obj _ create ( const char * oid  const char * short _ name  const char * long _ name ) {	obj _ create oid short _ name long _ name	EMPTY
438	627	2	-1	0	-1	int ret = nid _ undef ;	ret	EMPTY
438	628	2	-1	0	-1	asn1 _ object * op = null ;	EMPTY	EMPTY
438	629	2	-1	0	-1	unsigned char * buf = null ;	buf	EMPTY
438	630	3	-1	0	-1	int len ;	len	EMPTY
438	632	1	0	0	-1	len = a2d _ asn1 _ object ( null  numconst  oid  - numconst ) ;	len oid	EMPTY
438	633	2	-1	0	-1	if ( len <= numconst ) {	len	EMPTY
438	634	2	-1	0	-1	goto err ;	EMPTY	EMPTY
438	635	3	-1	0	-1	}	EMPTY	EMPTY
438	637	1	0	0	-1	buf = openssl _ malloc ( len ) ;	buf len	EMPTY
438	638	2	-1	0	-1	if ( buf == null ) {	buf	EMPTY
438	639	2	-1	0	-1	openssl _ put _ error ( obj  err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
438	640	2	-1	0	-1	goto err ;	EMPTY	EMPTY
438	641	3	-1	0	-1	}	EMPTY	EMPTY
438	643	1	0	0	-1	len = a2d _ asn1 _ object ( buf  len  oid  - numconst ) ;	len buf len oid	EMPTY
438	644	2	-1	0	-1	if ( len == numconst ) {	len	EMPTY
438	645	2	-1	0	-1	goto err ;	EMPTY	EMPTY
438	646	3	-1	0	-1	}	EMPTY	EMPTY
438	648	1	0	0	-1	op = ( asn1 _ object * ) asn1 _ object _ create ( obj _ next _ nid ( )  buf  len  short _ name	buf len short _ name	EMPTY
438	649	2	-1	0	-1	long _ name ) ;	long _ name	EMPTY
438	650	2	-1	0	-1	if ( op == null ) {	EMPTY	EMPTY
438	651	2	-1	0	-1	goto err ;	EMPTY	EMPTY
438	652	3	-1	0	-1	}	EMPTY	EMPTY
438	654	1	0	0	0	if ( obj _ add _ object ( op ) ) {	obj _ add _ object	EMPTY
438	655	2	-1	0	-1	ret = op -> nid ;	ret nid	EMPTY
438	656	2	-1	0	-1	}	EMPTY	EMPTY
438	657	3	-1	0	-1	op = null ;	EMPTY	EMPTY
438	659	1	0	0	-1	err :	EMPTY	EMPTY
438	660	2	-1	0	-1	asn1 _ object _ free ( op ) ;	EMPTY	EMPTY
438	661	3	-1	0	-1	openssl _ free ( buf ) ;	buf	EMPTY
438	663	1	0	0	0	return ret ;	ret	EMPTY
438	664	3	-1	0	-1	}	EMPTY	EMPTY
469	65	1	0	0	-1	asn1 _ sequence ( authority _ keyid ) = {	EMPTY	EMPTY
469	66	2	-1	0	-1	asn1 _ imp _ opt ( authority _ keyid  keyid  asn1 _ octet _ string  numconst )	keyid	EMPTY
469	67	2	-1	0	-1	asn1 _ imp _ sequence _ of _ opt ( authority _ keyid  issuer  general _ name  numconst )	issuer	EMPTY
469	68	2	-1	0	-1	asn1 _ imp _ opt ( authority _ keyid  serial  asn1 _ integer  numconst )	EMPTY	EMPTY
469	69	3	-1	0	-1	} asn1 _ sequence _ end ( authority _ keyid )	EMPTY	EMPTY
469	71	1	0	0	-1	implement _ asn1 _ functions ( authority _ keyid )	EMPTY	EMPTY
472	70	1	0	0	0	static char * i2s _ asn1 _ ia5string ( x509v3 _ ext _ method * method  asn1 _ ia5string * ia5 )	method ia5	EMPTY
472	71	2	-1	0	-1	static asn1 _ ia5string * s2i _ asn1 _ ia5string ( x509v3 _ ext _ method * method  x509v3 _ ctx * ctx  char * str )	method ctx str	EMPTY
472	72	2	-1	0	-1	const x509v3 _ ext _ method v3 _ ns _ ia5 _ list [ ] = { ext _ ia5string	EMPTY	EMPTY
472	73	2	-1	0	-1	ext _ ia5string ( nid _ netscape _ base _ url )	EMPTY	EMPTY
472	74	2	-1	0	-1	ext _ ia5string ( nid _ netscape _ revocation _ url )	EMPTY	EMPTY
472	75	2	-1	0	-1	ext _ ia5string ( nid _ netscape _ ca _ revocation _ url )	EMPTY	EMPTY
472	76	2	-1	0	-1	ext _ ia5string ( nid _ netscape _ renewal _ url )	EMPTY	EMPTY
472	77	2	-1	0	-1	ext _ ia5string ( nid _ netscape _ ca _ policy _ url )	EMPTY	EMPTY
472	78	2	-1	0	-1	ext _ ia5string ( nid _ netscape _ ssl _ server _ name )	EMPTY	EMPTY
472	79	2	-1	0	-1	ext _ ia5string ( nid _ netscape _ comment )	EMPTY	EMPTY
472	80	2	-1	0	-1	ext _ end	EMPTY	EMPTY
472	81	3	-1	0	-1	} ;	EMPTY	EMPTY
472	84	1	1	0	-1	static char * i2s _ asn1 _ ia5string ( x509v3 _ ext _ method * method	method	EMPTY
472	85	2	-1	0	-1	asn1 _ ia5string * ia5 )	ia5	EMPTY
472	86	2	-1	0	-1	{	EMPTY	EMPTY
472	87	2	-1	1	-1	char * tmp ;	EMPTY	EMPTY
472	88	2	-1	0	-1	return null ;	EMPTY	EMPTY
472	89	2	-1	0	-1	if ( ! ( tmp = openssl _ malloc ( ia5 -> length + 1 ) ) ) {	ia5 length	EMPTY
472	90	2	-1	0	-1	openssl _ put _ error ( x509v3 , err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
472	91	2	-1	0	-1	return null ;	EMPTY	EMPTY
472	92	2	-1	0	-1	}	EMPTY	EMPTY
472	93	2	-1	0	-1	memcpy ( tmp  ia5 -> data  ia5 -> length ) ;	ia5 data ia5 length	EMPTY
472	94	2	-1	0	-1	tmp [ ia5 -> length ] = 0	ia5 length	EMPTY
472	95	2	-1	0	-1	return tmp	EMPTY	EMPTY
472	96	3	-1	0	-1	}	EMPTY	EMPTY
472	98	1	0	0	-1	static asn1 _ ia5string * s2i _ asn1 _ ia5string ( x509v3 _ ext _ method * method	method	EMPTY
472	99	2	-1	0	-1	x509v3 _ ctx * ctx  char * str )	ctx str	EMPTY
472	100	2	-1	0	-1	{	EMPTY	EMPTY
472	101	2	-1	0	-1	asn1 _ ia5string * ia5 ;	ia5	EMPTY
472	102	2	-1	0	-1	if ( ! str ) {	str	EMPTY
472	103	2	-1	0	-1	openssl _ put _ error ( x509v3 , x509v3 _ r _ invalid _ null _ argument ) ;	EMPTY	EMPTY
472	104	2	-1	0	-1	return null ;	EMPTY	EMPTY
472	105	2	-1	0	-1	}	EMPTY	EMPTY
472	106	2	-1	0	-1	if ( ! ( ia5 = m _ asn1 _ ia5string _ new ( ) ) ) goto err	ia5	EMPTY
472	107	2	-1	0	-1	if ( ! asn1 _ string _ set ( ( asn1 _ string * ) ia5 , ( unsigned char * ) str ,	asn1 _ string _ set ia5 str	EMPTY
472	108	2	-1	0	-1	strlen ( str ) ) ) {	str	EMPTY
472	109	2	-1	0	-1	m _ asn1 _ ia5string _ free ( ia5 ) ;	ia5	EMPTY
472	110	2	-1	0	-1	goto err ;	EMPTY	EMPTY
472	111	2	-1	0	-1	}	EMPTY	EMPTY
472	112	2	-1	0	-1	return ia5	ia5	EMPTY
472	113	2	-1	0	-1	err :	EMPTY	EMPTY
472	114	2	-1	0	-1	openssl _ put _ error ( x509v3  err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
472	115	2	-1	0	-1	return null ;	EMPTY	EMPTY
472	116	3	-1	0	-1	}	EMPTY	EMPTY
473	69	1	0	0	-1	static int unknown _ ext _ print ( bio * out  x509 _ extension * ext  unsigned long flag  int indent  int supported ) ;	out flag indent	EMPTY
473	73	1	1	1	-1	void x509v3 _ ext _ val _ prn ( bio * out  stack _ of ( conf _ value ) * val  int indent  int ml )	out indent	EMPTY
473	74	2	-1	0	-1	{	EMPTY	EMPTY
473	75	2	-1	0	-1	size _ t i ;	i	EMPTY
473	76	2	-1	0	-1	conf _ value * nval ;	EMPTY	EMPTY
473	77	2	-1	0	-1	if ( ! val ) return	EMPTY	EMPTY
473	78	2	-1	0	-1	if ( ! ml || ! sk _ conf _ value _ num ( val ) ) {	EMPTY	EMPTY
473	79	2	-1	0	-1	bio _ printf ( out ,  " %*s "  , indent ,  "  "  ) ;	out indent	EMPTY
473	80	2	-1	0	-1	if ( ! sk _ conf _ value _ num ( val ) ) bio _ puts ( out ,  " <empty>\n "  ) ;	bio _ puts out	EMPTY
473	81	2	-1	0	-1	}	EMPTY	EMPTY
473	82	2	-1	0	-1	for ( i = 0 ; i < sk _ conf _ value _ num ( val ) ; i ++ ) {	i i i	EMPTY
473	83	2	-1	0	-1	if ( ml ) bio _ printf ( out ,  " %*s "  , indent ,  "  "  ) ;	out indent	EMPTY
473	84	2	-1	0	-1	else if ( i > 0 ) bio _ printf ( out ,  " ,  "  ) ;	i out	EMPTY
473	85	2	-1	0	-1	nval = sk _ conf _ value _ value ( val , i ) ;	i	EMPTY
473	86	2	-1	0	-1	if ( ! nval -> name ) bio _ puts ( out , nval -> value ) ;	name bio _ puts out value	EMPTY
473	87	2	-1	0	-1	else if ( ! nval -> value ) bio _ puts ( out , nval -> name ) ;	value bio _ puts out name	EMPTY
473	88	2	-1	0	-1	else bio _ printf ( out ,  " %s:%s "  , nval -> name , nval -> value ) ;	out name value	EMPTY
473	89	2	-1	0	-1	if ( ml ) bio _ puts ( out ,  " \n "  ) ;	bio _ puts out	EMPTY
473	90	2	-1	0	-1	}	EMPTY	EMPTY
473	91	3	-1	0	-1	}	EMPTY	EMPTY
473	95	1	1	1	-1	int x509v3 _ ext _ print ( bio * out  x509 _ extension * ext  unsigned long flag  int indent )	out flag indent	EMPTY
473	96	2	-1	0	-1	{	EMPTY	EMPTY
473	97	2	-1	0	-1	void * ext _ str = null ;	EMPTY	EMPTY
473	98	2	-1	0	-1	char * value = null ;	value	EMPTY
473	99	2	-1	0	-1	const unsigned char * p ;	p	EMPTY
473	100	2	-1	0	-1	const x509v3 _ ext _ method * method ;	method	EMPTY
473	101	2	-1	0	-1	stack _ of ( conf _ value ) * nval = null ;	EMPTY	EMPTY
473	102	3	-1	0	-1	int ok = 1 ;	ok	EMPTY
473	104	1	0	0	0	if ( ! ( method = x509v3 _ ext _ get ( ext ) ) )	method	EMPTY
473	105	2	-1	0	-1	return unknown _ ext _ print ( out , ext , flag , indent , 0 )	out flag indent	EMPTY
473	106	2	-1	0	-1	p = ext -> value -> data	p value data	EMPTY
473	107	2	-1	0	-1	if ( method -> it ) ext _ str = asn1 _ item _ d2i ( null , & p , ext -> value -> length , asn1 _ item _ ptr ( method -> it ) ) ;	method it p value length method it	EMPTY
473	108	3	-1	0	-1	else ext _ str = method -> d2i ( null , & p , ext -> value -> length )	method d2i p value length	EMPTY
473	110	1	0	0	0	if ( ! ext _ str ) return unknown _ ext _ print ( out , ext , flag , indent , 1 )	out flag indent	EMPTY
473	112	1	0	0	0	if ( method -> i2s ) {	method i2s	EMPTY
473	113	2	-1	0	-1	if ( ! ( value = method -> i2s ( method , ext _ str ) ) ) {	value method i2s method	EMPTY
473	114	2	-1	0	-1	ok = 0 ;	ok	EMPTY
473	115	2	-1	0	-1	goto err ;	EMPTY	EMPTY
473	116	2	-1	0	-1	}	EMPTY	EMPTY
473	117	2	-1	0	-1	bio _ printf ( out ,  " %*s%s "  , indent ,  "  "  , value ) ;	out indent value	EMPTY
473	118	2	-1	0	-1	} else if ( method -> i2v ) {	method i2v	EMPTY
473	119	2	-1	0	-1	if ( ! ( nval = method -> i2v ( method , ext _ str , null ) ) ) {	method i2v method	EMPTY
473	120	2	-1	0	-1	ok = 0 ;	ok	EMPTY
473	121	2	-1	0	-1	goto err ;	EMPTY	EMPTY
473	122	2	-1	0	-1	}	EMPTY	EMPTY
473	123	2	-1	0	-1	x509v3 _ ext _ val _ prn ( out , nval , indent ,	out indent	EMPTY
473	124	2	-1	0	-1	method -> ext _ flags & x509v3 _ ext _ multiline ) ;	method	EMPTY
473	125	2	-1	0	-1	} else if ( method -> i2r ) {	method i2r	EMPTY
473	126	2	-1	0	-1	if ( ! method -> i2r ( method , ext _ str , out , indent ) ) ok = 0 ;	method i2r method out indent ok	EMPTY
473	127	3	-1	0	-1	} else ok = 0	ok	EMPTY
473	129	1	0	0	-1	err :	EMPTY	EMPTY
473	130	2	-1	0	-1	sk _ conf _ value _ pop _ free ( nval  x509v3 _ conf _ free ) ;	EMPTY	EMPTY
473	131	2	-1	0	-1	if ( value ) openssl _ free ( value )	value value	EMPTY
473	132	2	-1	0	-1	if ( method -> it ) asn1 _ item _ free ( ext _ str , asn1 _ item _ ptr ( method -> it ) ) ;	method it method it	EMPTY
473	133	2	-1	0	-1	else method -> ext _ free ( ext _ str )	method	EMPTY
473	134	2	-1	0	-1	return ok	ok	EMPTY
473	135	3	-1	0	-1	}	EMPTY	EMPTY
473	137	1	0	0	-1	int x509v3 _ extensions _ print ( bio * bp  const char * title  stack _ of ( x509 _ extension ) * exts  unsigned long flag  int indent )	bp flag indent	EMPTY
473	138	2	-1	0	-1	{	EMPTY	EMPTY
473	139	2	-1	0	-1	size _ t i ;	i	EMPTY
473	140	3	-1	0	-1	int j ;	EMPTY	EMPTY
473	142	1	0	0	0	if ( sk _ x509 _ extension _ num ( exts ) <= 0 ) return 1	EMPTY	EMPTY
473	144	1	0	0	0	if ( title )	EMPTY	EMPTY
473	145	2	-1	0	-1	{	EMPTY	EMPTY
473	146	2	-1	0	-1	bio _ printf ( bp ,  " %*s%s:\n "  , indent ,  "  "  , title ) ;	bp indent	EMPTY
473	147	2	-1	0	-1	indent += 4 ;	indent	EMPTY
473	148	3	-1	0	-1	}	EMPTY	EMPTY
473	150	1	0	0	0	for ( i = 0 ; i < sk _ x509 _ extension _ num ( exts ) ; i ++ )	i i i	EMPTY
473	151	2	-1	0	-1	{	EMPTY	EMPTY
473	152	2	-1	0	-1	asn1 _ object * obj ;	obj	EMPTY
473	153	2	-1	0	-1	x509 _ extension * ex ;	EMPTY	EMPTY
473	154	2	-1	0	-1	ex = sk _ x509 _ extension _ value ( exts , i ) ;	i	EMPTY
473	155	2	-1	0	-1	if ( indent && bio _ printf ( bp ,  " %*s "  , indent ,  "  "  ) <= 0 ) return 0 ;	indent bp indent	EMPTY
473	156	2	-1	0	-1	obj = x509 _ extension _ get _ object ( ex ) ;	obj	EMPTY
473	157	2	-1	0	-1	i2a _ asn1 _ object ( bp , obj ) ;	bp obj	EMPTY
473	158	2	-1	0	-1	j = x509 _ extension _ get _ critical ( ex ) ;	EMPTY	EMPTY
473	159	2	-1	0	-1	if ( bio _ printf ( bp ,  " : %s\n "  , j ?  " critical "  :  "  "  ) <= 0 )	bp	EMPTY
473	160	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
473	161	2	-1	0	-1	if ( ! x509v3 _ ext _ print ( bp , ex , flag , indent + 4 ) )	bp flag indent	EMPTY
473	162	2	-1	0	-1	{	EMPTY	EMPTY
473	163	2	-1	0	-1	bio _ printf ( bp ,  " %*s "  , indent + 4 ,  "  "  ) ;	bp indent	EMPTY
473	164	2	-1	0	-1	m _ asn1 _ octet _ string _ print ( bp , ex -> value ) ;	bp value	EMPTY
473	165	2	-1	0	-1	}	EMPTY	EMPTY
473	166	2	-1	0	-1	if ( bio _ write ( bp ,  " \n "  , 1 ) <= 0 ) return 0 ;	bio _ write bp	EMPTY
473	167	2	-1	0	-1	}	EMPTY	EMPTY
473	168	2	-1	0	-1	return 1	EMPTY	EMPTY
473	169	3	-1	0	-1	}	EMPTY	EMPTY
473	171	1	0	0	-1	static int unknown _ ext _ print ( bio * out  x509 _ extension * ext  unsigned long flag  int indent  int supported )	out flag indent	EMPTY
473	172	2	-1	0	-1	{	EMPTY	EMPTY
473	173	3	-1	0	-1	switch ( flag & x509v3 _ ext _ unknown _ mask ) {	flag	EMPTY
473	175	1	0	0	-1	case x509v3 _ ext _ default :	EMPTY	EMPTY
473	176	3	-1	0	-1	return 0 ;	EMPTY	EMPTY
473	178	1	0	0	-1	case x509v3 _ ext _ error _ unknown :	EMPTY	EMPTY
473	179	2	-1	0	-1	if ( supported )	EMPTY	EMPTY
473	180	2	-1	0	-1	bio _ printf ( out ,  " %*s<parse error> "  , indent ,  "  "  ) ;	out indent	EMPTY
473	181	2	-1	0	-1	else	EMPTY	EMPTY
473	182	2	-1	0	-1	bio _ printf ( out ,  " %*s<not supported> "  , indent ,  "  "  ) ;	out indent	EMPTY
473	183	3	-1	0	-1	return 1 ;	EMPTY	EMPTY
473	185	1	0	0	-1	case x509v3 _ ext _ parse _ unknown :	EMPTY	EMPTY
473	186	2	-1	0	-1	return asn1 _ parse _ dump ( out ,	out	EMPTY
473	187	2	-1	0	-1	ext -> value -> data , ext -> value -> length , indent , - 1 ) ;	value data value length indent	EMPTY
473	188	2	-1	0	-1	case x509v3 _ ext _ dump _ unknown :	EMPTY	EMPTY
473	189	3	-1	0	-1	return bio _ hexdump ( out , ext -> value -> data , ext -> value -> length , indent ) ;	bio _ hexdump out value data value length indent	EMPTY
473	191	1	0	0	-1	default :	EMPTY	EMPTY
473	192	2	-1	0	-1	return 1 ;	EMPTY	EMPTY
473	193	2	-1	0	-1	}	EMPTY	EMPTY
473	194	2	-1	0	-1	}	EMPTY	EMPTY
473	195	3	-1	0	-1	#	EMPTY	EMPTY
473	197	1	0	0	0	# ifndef openssl _ no _ fp _ api	EMPTY	EMPTY
473	198	2	-1	0	-1	int x509v3 _ ext _ print _ fp ( file * fp  x509 _ extension * ext  int flag  int indent )	fp flag indent	EMPTY
473	199	2	-1	0	-1	{	EMPTY	EMPTY
473	200	2	-1	0	-1	bio * bio _ tmp ;	EMPTY	EMPTY
473	201	2	-1	0	-1	int ret ;	ret	EMPTY
473	202	2	-1	0	-1	if ( ! ( bio _ tmp = bio _ new _ fp ( fp , bio _ noclose ) ) ) return 0	bio _ new _ fp fp	EMPTY
473	203	2	-1	0	-1	ret = x509v3 _ ext _ print ( bio _ tmp , ext , flag , indent )	ret flag indent	EMPTY
473	204	2	-1	0	-1	bio _ free ( bio _ tmp )	bio _ free	EMPTY
473	205	2	-1	0	-1	return ret	ret	EMPTY
473	206	2	-1	0	-1	}	EMPTY	EMPTY
473	207	3	-1	0	-1	# endif	EMPTY	EMPTY
479	66	1	0	0	-1	static int policy _ data _ cmp ( const x509 _ policy _ data * * a	a	EMPTY
479	67	2	-1	0	-1	const x509 _ policy _ data * * b )	b	EMPTY
479	68	3	-1	0	-1	static int policy _ cache _ set _ int ( long * out  asn1 _ integer * value ) ;	out value	EMPTY
479	74	1	1	1	-1	static int policy _ cache _ create ( x509 * x	x	EMPTY
479	75	2	-1	0	-1	certificatepolicies * policies  int crit )	policies	EMPTY
479	76	2	-1	0	-1	{	EMPTY	EMPTY
479	77	2	-1	0	-1	size _ t i ;	i	EMPTY
479	78	2	-1	0	-1	int ret = 0 ;	ret	EMPTY
479	79	2	-1	0	-1	x509 _ policy _ cache * cache = x -> policy _ cache ;	cache x	EMPTY
479	80	2	-1	0	-1	x509 _ policy _ data * data = null ;	data	EMPTY
479	81	2	-1	0	-1	policyinfo * policy ;	EMPTY	EMPTY
479	82	2	-1	0	-1	if ( sk _ policyinfo _ num ( policies ) == 0 )	policies	EMPTY
479	83	2	-1	0	-1	goto bad _ policy	EMPTY	EMPTY
479	84	2	-1	0	-1	cache -> data = sk _ x509 _ policy _ data _ new ( policy _ data _ cmp ) ;	cache data	EMPTY
479	85	2	-1	0	-1	if ( ! cache -> data )	cache data	EMPTY
479	86	2	-1	0	-1	goto bad _ policy	EMPTY	EMPTY
479	87	2	-1	0	-1	for ( i = numconst ; i < sk _ policyinfo _ num ( policies ) ; i ++ )	i i policies i	EMPTY
479	88	2	-1	0	-1	{	EMPTY	EMPTY
479	89	2	-1	0	-1	policy = sk _ policyinfo _ value ( policies  i ) ;	policies i	EMPTY
479	90	2	-1	0	-1	data = policy _ data _ new ( policy , null , crit )	data	EMPTY
479	91	2	-1	0	-1	if ( ! data )	data	EMPTY
479	92	2	-1	0	-1	goto bad _ policy	EMPTY	EMPTY
479	96	2	-1	1	-1	if ( obj _ obj2nid ( data -> valid _ policy ) == nid _ any _ policy )	obj _ obj2nid data valid _ policy	EMPTY
479	97	2	-1	0	-1	{	EMPTY	EMPTY
479	98	2	-1	0	-1	if ( cache -> anypolicy )	cache anypolicy	EMPTY
479	99	2	-1	0	-1	{	EMPTY	EMPTY
479	100	2	-1	0	-1	ret = - 1 ;	ret	EMPTY
479	101	2	-1	0	-1	goto bad _ policy ;	EMPTY	EMPTY
479	102	2	-1	0	-1	}	EMPTY	EMPTY
479	103	2	-1	0	-1	cache -> anypolicy = data ;	cache anypolicy data	EMPTY
479	104	2	-1	0	-1	}	EMPTY	EMPTY
479	105	2	-1	0	-1	else if ( sk _ x509 _ policy _ data _ find ( cache -> data , null , data ) )	cache data data	EMPTY
479	106	3	-1	0	-1	{	EMPTY	EMPTY
479	107	1	0	0	-1	ret = - 1 ;	ret	EMPTY
479	108	2	-1	0	-1	goto bad _ policy ;	EMPTY	EMPTY
479	109	2	-1	0	-1	}	EMPTY	EMPTY
479	110	2	-1	0	-1	else if ( ! sk _ x509 _ policy _ data _ push ( cache -> data , data ) )	cache data data	EMPTY
479	111	2	-1	0	-1	goto bad _ policy	EMPTY	EMPTY
479	112	2	-1	0	-1	data = null ;	data	EMPTY
479	113	2	-1	0	-1	}	EMPTY	EMPTY
479	114	2	-1	0	-1	ret = numconst ;	ret	EMPTY
479	115	2	-1	0	-1	bad _ policy :	EMPTY	EMPTY
479	116	2	-1	0	-1	if ( ret == - numconst )	ret	EMPTY
479	117	2	-1	0	-1	x -> ex _ flags |= exflag _ invalid _ policy ;	x	EMPTY
479	118	2	-1	0	-1	if ( data )	data	EMPTY
479	119	2	-1	0	-1	policy _ data _ free ( data ) ;	data	EMPTY
479	120	2	-1	0	-1	sk _ policyinfo _ pop _ free ( policies  policyinfo _ free ) ;	policies	EMPTY
479	121	2	-1	0	-1	if ( ret <= numconst )	ret	EMPTY
479	122	2	-1	0	-1	{	EMPTY	EMPTY
479	123	2	-1	0	-1	sk _ x509 _ policy _ data _ pop _ free ( cache -> data  policy _ data _ free ) ;	cache data	EMPTY
479	124	2	-1	0	-1	cache -> data = null ;	cache data	EMPTY
479	125	2	-1	0	-1	}	EMPTY	EMPTY
479	126	2	-1	0	-1	return ret ;	ret	EMPTY
479	127	3	-1	0	-1	}	EMPTY	EMPTY
479	130	1	0	0	-1	static int policy _ cache _ new ( x509 * x )	x	EMPTY
479	131	2	-1	0	-1	{	EMPTY	EMPTY
479	132	2	-1	0	-1	x509 _ policy _ cache * cache ;	cache	EMPTY
479	133	2	-1	0	-1	asn1 _ integer * ext _ any = null ;	EMPTY	EMPTY
479	134	2	-1	0	-1	policy _ constraints * ext _ pcons = null ;	EMPTY	EMPTY
479	135	2	-1	0	-1	certificatepolicies * ext _ cpols = null ;	EMPTY	EMPTY
479	136	2	-1	0	-1	policy _ mappings * ext _ pmaps = null ;	EMPTY	EMPTY
479	137	2	-1	0	-1	int i ;	i	EMPTY
479	138	2	-1	0	-1	cache = openssl _ malloc ( sizeof ( x509 _ policy _ cache ) ) ;	cache	EMPTY
479	139	2	-1	0	-1	if ( ! cache )	cache	EMPTY
479	140	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
479	141	2	-1	0	-1	cache -> anypolicy = null ;	cache anypolicy	EMPTY
479	142	2	-1	0	-1	cache -> data = null ;	cache data	EMPTY
479	143	2	-1	0	-1	cache -> any _ skip = - numconst ;	cache any _ skip	EMPTY
479	144	2	-1	0	-1	cache -> explicit _ skip = - numconst ;	cache explicit _ skip	EMPTY
479	145	3	-1	0	-1	cache -> map _ skip = - numconst ;	cache map _ skip	EMPTY
479	147	1	0	0	-1	x -> policy _ cache = cache ;	x cache	EMPTY
479	152	1	1	1	-1	ext _ pcons = x509 _ get _ ext _ d2i ( x , nid _ policy _ constraints , & i , null )	x i	EMPTY
479	154	1	0	0	0	if ( ! ext _ pcons )	EMPTY	EMPTY
479	155	2	-1	0	-1	{	EMPTY	EMPTY
479	156	2	-1	0	-1	if ( i != - 1 )	i	EMPTY
479	157	2	-1	0	-1	goto bad _ cache ;	EMPTY	EMPTY
479	158	2	-1	0	-1	}	EMPTY	EMPTY
479	159	2	-1	0	-1	else	EMPTY	EMPTY
479	160	2	-1	0	-1	{	EMPTY	EMPTY
479	161	2	-1	0	-1	if ( ! ext _ pcons -> requireexplicitpolicy	EMPTY	EMPTY
479	162	2	-1	0	-1	&& ! ext _ pcons -> inhibitpolicymapping )	EMPTY	EMPTY
479	163	2	-1	0	-1	goto bad _ cache ;	EMPTY	EMPTY
479	164	2	-1	0	-1	if ( ! policy _ cache _ set _ int ( & cache -> explicit _ skip ,	cache explicit _ skip	EMPTY
479	165	2	-1	0	-1	ext _ pcons -> requireexplicitpolicy ) )	EMPTY	EMPTY
479	166	2	-1	0	-1	goto bad _ cache ;	EMPTY	EMPTY
479	167	2	-1	0	-1	if ( ! policy _ cache _ set _ int ( & cache -> map _ skip ,	cache map _ skip	EMPTY
479	168	2	-1	0	-1	ext _ pcons -> inhibitpolicymapping ) )	EMPTY	EMPTY
479	169	2	-1	0	-1	goto bad _ cache ;	EMPTY	EMPTY
479	170	3	-1	0	-1	}	EMPTY	EMPTY
479	174	1	1	1	-1	ext _ cpols = x509 _ get _ ext _ d2i ( x , nid _ certificate _ policies , & i , null )	x i	EMPTY
479	179	1	1	0	-1	if ( ! ext _ cpols )	EMPTY	EMPTY
479	180	2	-1	0	-1	{	EMPTY	EMPTY
479	182	2	-1	1	-1	if ( i != - 1 )	i	EMPTY
479	183	2	-1	0	-1	goto bad _ cache	EMPTY	EMPTY
479	184	2	-1	0	-1	return 1	EMPTY	EMPTY
479	185	3	-1	0	-1	}	EMPTY	EMPTY
479	187	1	0	0	-1	i = policy _ cache _ create ( x  ext _ cpols  i ) ;	i x i	EMPTY
479	191	1	1	1	1	if ( i <= 0 )	i	EMPTY
479	192	3	-1	0	-1	return i	i	EMPTY
479	194	1	0	0	-1	ext _ pmaps = x509 _ get _ ext _ d2i ( x , nid _ policy _ mappings , & i , null )	x i	EMPTY
479	196	1	1	0	1	if ( ! ext _ pmaps )	EMPTY	EMPTY
479	197	2	-1	0	-1	{	EMPTY	EMPTY
479	199	2	-1	1	-1	if ( i != - 1 )	i	EMPTY
479	200	2	-1	0	-1	goto bad _ cache	EMPTY	EMPTY
479	201	2	-1	0	-1	}	EMPTY	EMPTY
479	202	2	-1	0	-1	else	EMPTY	EMPTY
479	203	2	-1	0	-1	{	EMPTY	EMPTY
479	204	2	-1	0	-1	i = policy _ cache _ set _ mapping ( x  ext _ pmaps ) ;	i x	EMPTY
479	205	2	-1	0	-1	if ( i <= numconst )	i	EMPTY
479	206	2	-1	0	-1	goto bad _ cache ;	EMPTY	EMPTY
479	207	3	-1	0	-1	}	EMPTY	EMPTY
479	209	1	0	0	-1	ext _ any = x509 _ get _ ext _ d2i ( x  nid _ inhibit _ any _ policy  & i  null ) ;	x i	EMPTY
479	211	1	0	0	0	if ( ! ext _ any )	EMPTY	EMPTY
479	212	2	-1	0	-1	{	EMPTY	EMPTY
479	213	2	-1	0	-1	if ( i != - numconst )	i	EMPTY
479	214	2	-1	0	-1	goto bad _ cache ;	EMPTY	EMPTY
479	215	2	-1	0	-1	}	EMPTY	EMPTY
479	216	2	-1	0	-1	if ( ! policy _ cache _ set _ int ( & cache -> any _ skip  ext _ any ) )	cache any _ skip	EMPTY
479	217	3	-1	0	-1	goto bad _ cache ;	EMPTY	EMPTY
479	219	1	0	0	0	if ( numconst )	EMPTY	EMPTY
479	220	2	-1	0	-1	{	EMPTY	EMPTY
479	221	2	-1	0	-1	bad _ cache :	EMPTY	EMPTY
479	222	2	-1	0	-1	x -> ex _ flags |= exflag _ invalid _ policy ;	x	EMPTY
479	223	3	-1	0	-1	}	EMPTY	EMPTY
479	225	1	0	0	0	if ( ext _ pcons )	EMPTY	EMPTY
479	226	3	-1	0	-1	policy _ constraints _ free ( ext _ pcons ) ;	EMPTY	EMPTY
479	228	1	0	0	0	if ( ext _ any )	EMPTY	EMPTY
479	229	3	-1	0	-1	asn1 _ integer _ free ( ext _ any ) ;	EMPTY	EMPTY
479	231	1	0	0	0	return numconst ;	EMPTY	EMPTY
479	233	1	0	0	-1	}	EMPTY	EMPTY
479	234	3	-1	0	-1	}	EMPTY	EMPTY
479	236	1	0	0	-1	void policy _ cache _ free ( x509 _ policy _ cache * cache )	cache	EMPTY
479	237	2	-1	0	-1	{	EMPTY	EMPTY
479	238	2	-1	0	-1	if ( ! cache )	cache	EMPTY
479	239	2	-1	0	-1	return ;	EMPTY	EMPTY
479	240	2	-1	0	-1	if ( cache -> anypolicy )	cache anypolicy	EMPTY
479	241	2	-1	0	-1	policy _ data _ free ( cache -> anypolicy ) ;	cache anypolicy	EMPTY
479	242	2	-1	0	-1	if ( cache -> data )	cache data	EMPTY
479	243	2	-1	0	-1	sk _ x509 _ policy _ data _ pop _ free ( cache -> data  policy _ data _ free ) ;	cache data	EMPTY
479	244	2	-1	0	-1	openssl _ free ( cache ) ;	cache	EMPTY
479	245	3	-1	0	-1	}	EMPTY	EMPTY
479	250	1	0	0	-1	static struct crypto _ static _ mutex g _ x509 _ policy _ cache _ lock =	g _ x509 _ policy _ cache _ lock	EMPTY
479	251	3	-1	0	-1	crypto _ static _ mutex _ init ;	EMPTY	EMPTY
479	253	1	0	0	-1	const x509 _ policy _ cache * policy _ cache _ set ( x509 * x )	x	EMPTY
479	254	2	-1	0	-1	{	EMPTY	EMPTY
479	255	3	-1	0	-1	x509 _ policy _ cache * cache ;	cache	EMPTY
479	257	1	0	0	0	crypto _ static _ mutex _ lock _ read ( & g _ x509 _ policy _ cache _ lock )	crypto _ static _ mutex _ lock _ read g _ x509 _ policy _ cache _ lock	EMPTY
479	258	2	-1	0	-1	cache = x -> policy _ cache	cache x	EMPTY
479	259	3	-1	0	-1	crypto _ static _ mutex _ unlock ( & g _ x509 _ policy _ cache _ lock )	crypto _ static _ mutex _ unlock g _ x509 _ policy _ cache _ lock	EMPTY
479	261	1	0	0	0	if ( cache != null )	cache	EMPTY
479	262	3	-1	0	-1	return cache	cache	EMPTY
479	264	1	0	0	0	crypto _ static _ mutex _ lock _ write ( & g _ x509 _ policy _ cache _ lock )	crypto _ static _ mutex _ lock _ write g _ x509 _ policy _ cache _ lock	EMPTY
479	265	2	-1	0	-1	if ( x -> policy _ cache == null )	x	EMPTY
479	266	2	-1	0	-1	policy _ cache _ new ( x )	x	EMPTY
479	267	2	-1	0	-1	cache = x -> policy _ cache	cache x	EMPTY
479	268	3	-1	0	-1	crypto _ static _ mutex _ unlock ( & g _ x509 _ policy _ cache _ lock )	crypto _ static _ mutex _ unlock g _ x509 _ policy _ cache _ lock	EMPTY
479	270	1	0	0	0	return cache	cache	EMPTY
479	271	3	-1	0	-1	}	EMPTY	EMPTY
479	273	1	0	0	-1	x509 _ policy _ data * policy _ cache _ find _ data ( const x509 _ policy _ cache * cache	cache	EMPTY
479	274	2	-1	0	-1	const asn1 _ object * id )	id	EMPTY
479	275	2	-1	0	-1	{	EMPTY	EMPTY
479	276	2	-1	0	-1	size _ t idx ;	EMPTY	EMPTY
479	277	3	-1	0	-1	x509 _ policy _ data tmp ;	EMPTY	EMPTY
479	279	1	0	0	-1	tmp . valid _ policy = ( asn1 _ object * ) id	valid _ policy id	EMPTY
479	280	2	-1	0	-1	if ( ! sk _ x509 _ policy _ data _ find ( cache -> data  & idx  & tmp ) )	cache data	EMPTY
479	281	2	-1	0	-1	return null ;	EMPTY	EMPTY
479	282	2	-1	0	-1	return sk _ x509 _ policy _ data _ value ( cache -> data  idx ) ;	cache data	EMPTY
479	283	3	-1	0	-1	}	EMPTY	EMPTY
479	285	1	0	0	-1	static int policy _ data _ cmp ( const x509 _ policy _ data * * a	a	EMPTY
479	286	2	-1	0	-1	const x509 _ policy _ data * * b )	b	EMPTY
479	287	2	-1	0	-1	{	EMPTY	EMPTY
479	288	2	-1	0	-1	return obj _ cmp ( ( * a ) -> valid _ policy , ( * b ) -> valid _ policy )	obj _ cmp a valid _ policy b valid _ policy	EMPTY
479	289	3	-1	0	-1	}	EMPTY	EMPTY
479	291	1	0	0	-1	static int policy _ cache _ set _ int ( long * out  asn1 _ integer * value )	out value	EMPTY
479	292	2	-1	0	-1	{	EMPTY	EMPTY
479	293	2	-1	0	-1	if ( value == null )	value	EMPTY
479	294	2	-1	0	-1	return 1	EMPTY	EMPTY
479	295	2	-1	0	-1	if ( value -> type == v _ asn1 _ neg _ integer )	value type	EMPTY
479	296	2	-1	0	-1	return 0	EMPTY	EMPTY
479	297	2	-1	0	-1	* out = asn1 _ integer _ get ( value )	out value	EMPTY
479	298	2	-1	0	-1	return 1	EMPTY	EMPTY
479	299	3	-1	0	-1	}	EMPTY	EMPTY
494	89	1	1	0	-1	word32 icv _ sad _ 8x4 ( uword8 * pu1 _ src	icv _ sad _ 8x4 uword8 pu1 _ src	EMPTY
494	90	2	-1	0	-1	uword8 * pu1 _ ref	uword8	EMPTY
494	91	2	-1	0	-1	word32 src _ strd	EMPTY	EMPTY
494	92	2	-1	0	-1	word32 ref _ strd	EMPTY	EMPTY
494	93	2	-1	0	-1	word32 wd	EMPTY	EMPTY
494	94	2	-1	0	-1	word32 ht )	EMPTY	EMPTY
494	95	2	-1	0	-1	{	EMPTY	EMPTY
494	96	2	-1	1	-1	word32 sad ;	EMPTY	EMPTY
494	97	2	-1	0	-1	word32 i ;	EMPTY	EMPTY
494	98	2	-1	0	-1	word32 j ;	EMPTY	EMPTY
494	99	2	-1	0	-1	unused ( wd ) ;	EMPTY	EMPTY
494	100	3	-1	0	-1	unused ( ht ) ;	EMPTY	EMPTY
494	102	1	0	0	-1	assert ( wd == numconst ) ;	EMPTY	EMPTY
494	103	3	-1	0	-1	assert ( ht == numconst ) ;	EMPTY	EMPTY
494	105	1	0	0	-1	sad = 0	EMPTY	EMPTY
494	107	1	0	0	0	for ( j = 0 ; j < 4 ; j ++ )	EMPTY	EMPTY
494	108	2	-1	0	-1	{	EMPTY	EMPTY
494	109	2	-1	0	-1	for ( i = 0 ; i < 8 ; i ++ )	EMPTY	EMPTY
494	110	2	-1	0	-1	{	EMPTY	EMPTY
494	111	2	-1	0	-1	word32 src ;	EMPTY	EMPTY
494	112	3	-1	0	-1	word32 ref ;	EMPTY	EMPTY
494	114	1	0	0	-1	src = * pu1 _ src ++ ;	pu1 _ src	EMPTY
494	115	3	-1	0	-1	ref = * pu1 _ ref ++ ;	EMPTY	EMPTY
494	117	1	0	0	-1	sad += abs _ dif ( src , ref ) ;	EMPTY	EMPTY
494	118	2	-1	0	-1	}	EMPTY	EMPTY
494	119	2	-1	0	-1	pu1 _ src += ( src _ strd - 8 ) ;	pu1 _ src	EMPTY
494	120	2	-1	0	-1	pu1 _ ref += ( ref _ strd - 8 ) ;	EMPTY	EMPTY
494	121	3	-1	0	-1	}	EMPTY	EMPTY
494	123	1	0	0	0	return sad	EMPTY	EMPTY
494	124	3	-1	0	-1	}	EMPTY	EMPTY
501	100	1	0	0	-1	static word32 cac _ 4x8 ( uword8 * pu1 _ top	cac _ 4x8 uword8 pu1 _ top	EMPTY
501	101	2	-1	0	-1	uword8 * pu1 _ bot	uword8	EMPTY
501	102	2	-1	0	-1	word32 top _ strd	EMPTY	EMPTY
501	103	2	-1	0	-1	word32 bot _ strd )	EMPTY	EMPTY
501	104	2	-1	0	-1	{	EMPTY	EMPTY
501	105	2	-1	0	-1	word32 ca ;	ca	EMPTY
501	106	2	-1	0	-1	word32 adj ;	EMPTY	EMPTY
501	107	2	-1	0	-1	word32 alt ;	EMPTY	EMPTY
501	108	2	-1	0	-1	uword8 * pu1 _ tmp _ top ;	uword8	EMPTY
501	109	2	-1	0	-1	uword8 * pu1 _ tmp _ bot ;	uword8	EMPTY
501	110	2	-1	0	-1	word32 i ;	EMPTY	EMPTY
501	111	2	-1	0	-1	word32 j ;	EMPTY	EMPTY
501	112	2	-1	0	-1	uword8 * pu1 _ top _ 0 ;	uword8	EMPTY
501	113	2	-1	0	-1	uword8 * pu1 _ top _ 1 ;	uword8	EMPTY
501	114	2	-1	0	-1	uword8 * pu1 _ top _ 2 ;	uword8	EMPTY
501	115	2	-1	0	-1	uword8 * pu1 _ top _ 3 ;	uword8	EMPTY
501	116	2	-1	0	-1	uword8 * pu1 _ bot _ 0 ;	uword8	EMPTY
501	117	2	-1	0	-1	uword8 * pu1 _ bot _ 1 ;	uword8	EMPTY
501	118	2	-1	0	-1	uword8 * pu1 _ bot _ 2 ;	uword8	EMPTY
501	119	2	-1	0	-1	uword8 * pu1 _ bot _ 3 ;	uword8	EMPTY
501	120	2	-1	0	-1	word32 rsum _ csum _ thresh ;	EMPTY	EMPTY
501	121	2	-1	0	-1	word32 sad _ bias _ mult _ shift ;	EMPTY	EMPTY
501	122	3	-1	0	-1	word32 sad _ bias _ additive ;	EMPTY	EMPTY
501	124	1	0	0	0	word32 diff _ sum ;	EMPTY	EMPTY
501	125	2	-1	0	-1	word32 top _ row _ end _ incr ;	EMPTY	EMPTY
501	126	3	-1	0	-1	word32 bot _ row _ end _ incr ;	EMPTY	EMPTY
501	128	1	0	0	-1	ca = 0	ca	EMPTY
501	130	1	0	0	-1	adj = 0	EMPTY	EMPTY
501	131	3	-1	0	-1	alt = 0	EMPTY	EMPTY
501	133	1	0	0	-1	rsum _ csum _ thresh = rsum _ csum _ thresh ;	EMPTY	EMPTY
501	134	2	-1	0	-1	sad _ bias _ additive = sad _ bias _ additive ;	EMPTY	EMPTY
501	135	3	-1	0	-1	sad _ bias _ mult _ shift = sad _ bias _ mult _ shift ;	EMPTY	EMPTY
501	149	1	1	1	-1	pu1 _ tmp _ top = pu1 _ top	pu1 _ top	EMPTY
501	150	3	-1	0	-1	pu1 _ tmp _ bot = pu1 _ bot	EMPTY	EMPTY
501	152	1	0	0	-1	top _ row _ end _ incr = top _ strd - sub _ blk _ wd ;	EMPTY	EMPTY
501	153	3	-1	0	-1	bot _ row _ end _ incr = bot _ strd - sub _ blk _ wd ;	EMPTY	EMPTY
501	159	1	1	1	1	for ( j = numconst ; j < blk _ ht ; j += numconst )	EMPTY	EMPTY
501	160	2	-1	0	-1	{	EMPTY	EMPTY
501	161	2	-1	0	-1	word32 sum _ 1 , sum _ 2 , sum _ 3 , sum _ 4 ;	EMPTY	EMPTY
501	162	3	-1	0	-1	word32 sum _ diff ;	EMPTY	EMPTY
501	168	1	1	1	-1	sum _ 1 = 0	EMPTY	EMPTY
501	169	3	-1	0	-1	sum _ 2 = 0	EMPTY	EMPTY
501	171	1	0	0	0	for ( i = 0 ; i < sub _ blk _ wd ; i ++ )	EMPTY	EMPTY
501	172	2	-1	0	-1	{	EMPTY	EMPTY
501	173	2	-1	0	-1	sum _ 1 += * pu1 _ tmp _ top ++ ;	EMPTY	EMPTY
501	174	2	-1	0	-1	sum _ 2 += * pu1 _ tmp _ bot ++ ;	EMPTY	EMPTY
501	175	3	-1	0	-1	}	EMPTY	EMPTY
501	177	1	0	0	-1	sum _ diff = abs _ dif ( sum _ 1  sum _ 2 ) ;	EMPTY	EMPTY
501	182	1	1	1	1	if ( sum _ diff >= rsum _ csum _ thresh )	EMPTY	EMPTY
501	183	3	-1	0	-1	adj += sum _ diff	EMPTY	EMPTY
501	185	1	0	0	-1	pu1 _ tmp _ top += top _ row _ end _ incr	EMPTY	EMPTY
501	186	3	-1	0	-1	pu1 _ tmp _ bot += bot _ row _ end _ incr	EMPTY	EMPTY
501	189	1	0	0	-1	sum _ 3 = 0	EMPTY	EMPTY
501	190	3	-1	0	-1	sum _ 4 = 0	EMPTY	EMPTY
501	192	1	0	0	0	for ( i = 0 ; i < sub _ blk _ wd ; i ++ )	EMPTY	EMPTY
501	193	2	-1	0	-1	{	EMPTY	EMPTY
501	194	2	-1	0	-1	sum _ 3 += * pu1 _ tmp _ top ++ ;	EMPTY	EMPTY
501	195	2	-1	0	-1	sum _ 4 += * pu1 _ tmp _ bot ++ ;	EMPTY	EMPTY
501	196	3	-1	0	-1	}	EMPTY	EMPTY
501	198	1	0	0	-1	sum _ diff = abs _ dif ( sum _ 3  sum _ 4 ) ;	EMPTY	EMPTY
501	203	1	1	1	1	if ( sum _ diff >= rsum _ csum _ thresh )	EMPTY	EMPTY
501	204	3	-1	0	-1	adj += sum _ diff	EMPTY	EMPTY
501	206	1	0	0	-1	pu1 _ tmp _ top += top _ row _ end _ incr	EMPTY	EMPTY
501	207	3	-1	0	-1	pu1 _ tmp _ bot += bot _ row _ end _ incr	EMPTY	EMPTY
501	212	1	1	1	-1	alt += abs _ dif ( sum _ 1  sum _ 3 ) ;	EMPTY	EMPTY
501	213	3	-1	0	-1	alt += abs _ dif ( sum _ 2  sum _ 4 ) ;	EMPTY	EMPTY
501	215	1	0	0	-1	}	EMPTY	EMPTY
501	224	1	1	1	-1	pu1 _ top _ 0 = pu1 _ top	pu1 _ top	EMPTY
501	225	2	-1	0	-1	pu1 _ top _ 1 = pu1 _ top _ 0 + top _ strd	EMPTY	EMPTY
501	226	2	-1	0	-1	pu1 _ top _ 2 = pu1 _ top _ 1 + top _ strd	EMPTY	EMPTY
501	227	3	-1	0	-1	pu1 _ top _ 3 = pu1 _ top _ 2 + top _ strd	EMPTY	EMPTY
501	229	1	0	0	-1	pu1 _ bot _ 0 = pu1 _ bot	EMPTY	EMPTY
501	230	2	-1	0	-1	pu1 _ bot _ 1 = pu1 _ bot _ 0 + bot _ strd	EMPTY	EMPTY
501	231	2	-1	0	-1	pu1 _ bot _ 2 = pu1 _ bot _ 1 + bot _ strd	EMPTY	EMPTY
501	232	3	-1	0	-1	pu1 _ bot _ 3 = pu1 _ bot _ 2 + bot _ strd	EMPTY	EMPTY
501	237	1	1	1	-1	diff _ sum = 0	EMPTY	EMPTY
501	244	1	1	1	1	for ( i = 0 ; i < sub _ blk _ wd ; i ++ )	EMPTY	EMPTY
501	245	2	-1	0	-1	{	EMPTY	EMPTY
501	246	2	-1	0	-1	word32 val _ 1 ;	EMPTY	EMPTY
501	247	2	-1	0	-1	word32 val _ 2 ;	EMPTY	EMPTY
501	248	2	-1	0	-1	word32 tmp _ 1 , tmp _ 2 ;	EMPTY	EMPTY
501	249	3	-1	0	-1	word32 tmp _ diff ;	EMPTY	EMPTY
501	251	1	0	0	-1	tmp _ 1 = avg ( pu1 _ top _ 0 [ i ] , pu1 _ top _ 1 [ i ] ) ;	EMPTY	EMPTY
501	252	2	-1	0	-1	tmp _ 2 = avg ( pu1 _ top _ 2 [ i ] , pu1 _ top _ 3 [ i ] ) ;	EMPTY	EMPTY
501	253	3	-1	0	-1	val _ 1 = avg ( tmp _ 1 , tmp _ 2 ) ;	EMPTY	EMPTY
501	255	1	0	0	-1	tmp _ 1 = avg ( pu1 _ bot _ 0 [ i ] , pu1 _ bot _ 1 [ i ] ) ;	EMPTY	EMPTY
501	256	2	-1	0	-1	tmp _ 2 = avg ( pu1 _ bot _ 2 [ i ] , pu1 _ bot _ 3 [ i ] ) ;	EMPTY	EMPTY
501	257	3	-1	0	-1	val _ 2 = avg ( tmp _ 1 , tmp _ 2 ) ;	EMPTY	EMPTY
501	259	1	0	0	-1	tmp _ diff = abs _ dif ( val _ 1 , val _ 2 ) ;	EMPTY	EMPTY
501	261	1	0	0	0	if ( tmp _ diff >= ( rsum _ csum _ thresh >> 2 ) )	EMPTY	EMPTY
501	262	2	-1	0	-1	diff _ sum += tmp _ diff ;	EMPTY	EMPTY
501	263	3	-1	0	-1	}	EMPTY	EMPTY
501	266	1	0	0	-1	adj += diff _ sum << 2	EMPTY	EMPTY
501	271	1	1	1	-1	diff _ sum = 0	EMPTY	EMPTY
501	273	1	0	0	0	for ( i = 0 ; i < sub _ blk _ wd ; i ++ )	EMPTY	EMPTY
501	274	2	-1	0	-1	{	EMPTY	EMPTY
501	275	2	-1	0	-1	word32 val _ 1 ;	EMPTY	EMPTY
501	276	2	-1	0	-1	word32 val _ 2 ;	EMPTY	EMPTY
501	277	2	-1	0	-1	word32 tmp _ 1 , tmp _ 2 ;	EMPTY	EMPTY
501	278	3	-1	0	-1	word32 tmp _ diff ;	EMPTY	EMPTY
501	280	1	0	0	-1	tmp _ 1 = avg ( pu1 _ top _ 0 [ i ] , pu1 _ bot _ 0 [ i ] ) ;	EMPTY	EMPTY
501	281	2	-1	0	-1	tmp _ 2 = avg ( pu1 _ top _ 2 [ i ] , pu1 _ bot _ 2 [ i ] ) ;	EMPTY	EMPTY
501	282	3	-1	0	-1	val _ 1 = avg ( tmp _ 1 , tmp _ 2 ) ;	EMPTY	EMPTY
501	284	1	0	0	-1	tmp _ 1 = avg ( pu1 _ top _ 1 [ i ] , pu1 _ bot _ 1 [ i ] ) ;	EMPTY	EMPTY
501	285	2	-1	0	-1	tmp _ 2 = avg ( pu1 _ top _ 3 [ i ] , pu1 _ bot _ 3 [ i ] ) ;	EMPTY	EMPTY
501	286	3	-1	0	-1	val _ 2 = avg ( tmp _ 1 , tmp _ 2 ) ;	EMPTY	EMPTY
501	288	1	0	0	-1	tmp _ diff = abs _ dif ( val _ 1 , val _ 2 ) ;	EMPTY	EMPTY
501	290	1	0	0	-1	diff _ sum += tmp _ diff ;	EMPTY	EMPTY
501	291	3	-1	0	-1	}	EMPTY	EMPTY
501	298	1	1	1	-1	alt += diff _ sum << 2	EMPTY	EMPTY
501	300	1	0	0	-1	pu1 _ top += sub _ blk _ wd ;	pu1 _ top	EMPTY
501	301	3	-1	0	-1	pu1 _ bot += sub _ blk _ wd ;	EMPTY	EMPTY
501	303	1	0	0	-1	alt += ( alt >> sad _ bias _ mult _ shift ) + ( sad _ bias _ additive >> 1 )	EMPTY	EMPTY
501	304	3	-1	0	-1	ca = ( alt < adj )	ca	EMPTY
501	306	1	0	0	0	return ca	ca	EMPTY
501	307	3	-1	0	-1	}	EMPTY	EMPTY
501	337	1	1	0	-1	word32 ideint _ cac _ 8x8 ( uword8 * pu1 _ top	ideint _ cac _ 8x8 uword8 pu1 _ top	EMPTY
501	338	2	-1	0	-1	uword8 * pu1 _ bot	uword8	EMPTY
501	339	2	-1	0	-1	word32 top _ strd	EMPTY	EMPTY
501	340	2	-1	0	-1	word32 bot _ strd )	EMPTY	EMPTY
501	341	2	-1	0	-1	{	EMPTY	EMPTY
501	342	2	-1	1	-1	word32 ca ;	ca	EMPTY
501	343	3	-1	0	-1	word32 k ;	k	EMPTY
501	345	1	0	0	-1	ca = 0	ca	EMPTY
501	349	1	1	1	1	for ( k = numconst ; k < numconst ; k ++ )	k k k	EMPTY
501	350	2	-1	0	-1	{	EMPTY	EMPTY
501	351	3	-1	0	-1	ca |= cac _ 4x8 ( pu1 _ top , pu1 _ bot , top _ strd , bot _ strd )	ca cac _ 4x8 pu1 _ top	EMPTY
501	353	1	0	0	-1	pu1 _ top += sub _ blk _ wd ;	pu1 _ top	EMPTY
501	354	3	-1	0	-1	pu1 _ bot += sub _ blk _ wd ;	EMPTY	EMPTY
501	359	1	1	1	1	if ( ca )	ca	EMPTY
501	360	2	-1	0	-1	return ca	ca	EMPTY
501	361	3	-1	0	-1	}	EMPTY	EMPTY
501	363	1	0	0	0	return ca ;	ca	EMPTY
501	364	3	-1	0	-1	}	EMPTY	EMPTY
502	57	1	0	0	-1	void impeg2 _ memset0 _ 16bit _ 8x8 _ linear _ block ( word16 * pi2 _ buf )	EMPTY	EMPTY
502	58	2	-1	0	-1	{	EMPTY	EMPTY
502	59	2	-1	0	-1	memset ( pi2 _ buf , 0 , 64 * sizeof ( word16 ) )	EMPTY	memset
502	60	3	-1	0	-1	}	EMPTY	EMPTY
502	75	1	1	1	-1	void impeg2 _ memset _ 8bit _ 8x8 _ block ( uword8 * pu1 _ dst  word32 u4 _ dc _ val  word32 u4 _ dst _ wd )	EMPTY	EMPTY
502	76	2	-1	0	-1	{	EMPTY	EMPTY
502	77	3	-1	0	-1	word32 j ;	EMPTY	EMPTY
502	79	1	0	0	0	for ( j = blk _ size ; j > 0 ; j -- )	EMPTY	EMPTY
502	80	2	-1	0	-1	{	EMPTY	EMPTY
502	81	2	-1	0	-1	memset ( pu1 _ dst , u4 _ dc _ val , blk _ size ) ;	EMPTY	memset
502	82	2	-1	0	-1	pu1 _ dst += u4 _ dst _ wd ;	EMPTY	EMPTY
502	83	2	-1	0	-1	}	EMPTY	EMPTY
502	84	3	-1	0	-1	}	EMPTY	EMPTY
505	86	1	0	0	-1	word32 ideint _ ctxt _ size ( void )	ideint _ ctxt _ size	EMPTY
505	87	2	-1	0	-1	{	EMPTY	EMPTY
505	88	2	-1	0	-1	return sizeof ( ctxt _ t )	ctxt _ t	EMPTY
505	89	3	-1	0	-1	}	EMPTY	EMPTY
505	132	1	0	0	-1	ideint _ error _ t ideint _ process ( void * pv _ ctxt	ideint _ error _ t ideint _ process pv _ ctxt	EMPTY
505	133	2	-1	0	-1	icv _ pic _ t * ps _ prv _ fld	icv _ pic _ t	EMPTY
505	134	2	-1	0	-1	icv _ pic _ t * ps _ cur _ fld	icv _ pic _ t	EMPTY
505	135	2	-1	0	-1	icv _ pic _ t * ps _ nxt _ fld	icv _ pic _ t	EMPTY
505	136	2	-1	0	-1	icv _ pic _ t * ps _ out _ frm	icv _ pic _ t	EMPTY
505	137	2	-1	0	-1	ideint _ params _ t * ps _ params	ideint _ params _ t	EMPTY
505	138	2	-1	0	-1	word32 start _ row	EMPTY	EMPTY
505	139	2	-1	0	-1	word32 num _ rows )	EMPTY	EMPTY
505	140	2	-1	0	-1	{	EMPTY	EMPTY
505	141	2	-1	0	-1	ctxt _ t * ps _ ctxt ;	ctxt _ t	EMPTY
505	142	2	-1	0	-1	word32 num _ blks _ x , num _ blks _ y ;	EMPTY	EMPTY
505	143	2	-1	0	-1	word32 num _ comp ;	EMPTY	EMPTY
505	144	2	-1	0	-1	word32 i , row , col ;	EMPTY	EMPTY
505	145	3	-1	0	-1	word32 rows _ remaining ;	EMPTY	EMPTY
505	147	1	0	0	0	if ( null == pv _ ctxt )	pv _ ctxt	EMPTY
505	148	3	-1	0	-1	return ideint _ invalid _ ctxt	ideint _ invalid _ ctxt	EMPTY
505	150	1	0	0	-1	ps _ ctxt = ( ctxt _ t * ) pv _ ctxt	ctxt _ t pv _ ctxt	EMPTY
505	153	1	1	1	1	if ( ps _ params )	EMPTY	EMPTY
505	154	2	-1	0	-1	{	EMPTY	EMPTY
505	155	2	-1	0	-1	ps _ ctxt -> s _ params = * ps _ params	s _ params	EMPTY
505	156	2	-1	0	-1	}	EMPTY	EMPTY
505	157	2	-1	0	-1	else	EMPTY	EMPTY
505	158	2	-1	0	-1	{	EMPTY	EMPTY
505	160	2	-1	1	-1	ps _ ctxt -> s _ params . i4 _ cur _ fld _ top = 1	s _ params i4 _ cur _ fld _ top	EMPTY
505	161	2	-1	0	-1	ps _ ctxt -> s _ params . e _ mode = ideint _ mode _ spatial	s _ params e _ mode ideint _ mode _ spatial	EMPTY
505	162	2	-1	0	-1	ps _ ctxt -> s _ params . e _ arch = ideint _ default _ arch ( )	s _ params e _ arch	EMPTY
505	163	2	-1	0	-1	ps _ ctxt -> s _ params . e _ soc = icv _ soc _ generic	s _ params e _ soc	EMPTY
505	164	2	-1	0	-1	ps _ ctxt -> s _ params . i4 _ disable _ weave = 0	s _ params i4 _ disable _ weave	EMPTY
505	165	2	-1	0	-1	ps _ ctxt -> s _ params . pf _ aligned _ alloc = null ;	s _ params pf _ aligned _ alloc	EMPTY
505	166	2	-1	0	-1	ps _ ctxt -> s _ params . pf _ aligned _ free = null ;	s _ params pf _ aligned _ free	EMPTY
505	167	3	-1	0	-1	}	EMPTY	EMPTY
505	170	1	1	1	1	if ( start _ row & 0x7 )	EMPTY	EMPTY
505	171	2	-1	0	-1	{	EMPTY	EMPTY
505	172	2	-1	0	-1	return ideint _ start _ row _ unaligned ;	ideint _ start _ row _ unaligned	EMPTY
505	173	3	-1	0	-1	}	EMPTY	EMPTY
505	176	1	1	1	-1	ps _ ctxt -> ai4 _ vrnc _ avg _ fb [ numconst ] = var _ avg _ luma ;	ai4 _ vrnc _ avg _ fb	EMPTY
505	177	2	-1	0	-1	ps _ ctxt -> ai4 _ vrnc _ avg _ fb [ numconst ] = var _ avg _ chroma ;	ai4 _ vrnc _ avg _ fb	EMPTY
505	178	3	-1	0	-1	ps _ ctxt -> ai4 _ vrnc _ avg _ fb [ numconst ] = var _ avg _ chroma ;	ai4 _ vrnc _ avg _ fb	EMPTY
505	180	1	0	0	0	ideint _ init _ function _ ptr ( ps _ ctxt )	EMPTY	EMPTY
505	182	1	0	0	-1	rows _ remaining = ps _ out _ frm -> ai4 _ ht [ 0 ] - start _ row	ai4 _ ht	EMPTY
505	183	2	-1	0	-1	num _ rows = min ( num _ rows	EMPTY	EMPTY
505	184	3	-1	0	-1	rows _ remaining ) ;	EMPTY	EMPTY
505	186	1	0	0	-1	;	EMPTY	EMPTY
505	189	1	1	1	1	if ( ideint _ mode _ weave == ps _ ctxt -> s _ params . e _ mode )	ideint _ mode _ weave s _ params e _ mode	EMPTY
505	190	2	-1	0	-1	{	EMPTY	EMPTY
505	191	2	-1	0	-1	if ( 0 == ps _ ctxt -> s _ params . i4 _ disable _ weave )	s _ params i4 _ disable _ weave	EMPTY
505	192	2	-1	0	-1	{	EMPTY	EMPTY
505	193	2	-1	0	-1	if ( ps _ ctxt -> s _ params . i4 _ cur _ fld _ top )	s _ params i4 _ cur _ fld _ top	EMPTY
505	194	2	-1	0	-1	ideint _ weave _ pic ( ps _ cur _ fld , ps _ nxt _ fld , ps _ out _ frm ,	EMPTY	EMPTY
505	195	2	-1	0	-1	start _ row ,	EMPTY	EMPTY
505	196	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
505	197	2	-1	0	-1	else	EMPTY	EMPTY
505	198	2	-1	0	-1	ideint _ weave _ pic ( ps _ nxt _ fld , ps _ cur _ fld , ps _ out _ frm ,	EMPTY	EMPTY
505	199	2	-1	0	-1	start _ row ,	EMPTY	EMPTY
505	200	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
505	201	2	-1	0	-1	}	EMPTY	EMPTY
505	202	2	-1	0	-1	return ideint _ error _ none ;	ideint _ error _ none	EMPTY
505	203	3	-1	0	-1	}	EMPTY	EMPTY
505	205	1	0	0	-1	num _ comp = 3	EMPTY	EMPTY
505	207	1	0	0	0	for ( i = numconst ; i < num _ comp ; i ++ )	EMPTY	EMPTY
505	208	2	-1	0	-1	{	EMPTY	EMPTY
505	209	2	-1	0	-1	uword8 * pu1 _ prv , * pu1 _ out ;	uword8	EMPTY
505	210	2	-1	0	-1	uword8 * pu1 _ top , * pu1 _ bot , * pu1 _ dst ;	uword8	EMPTY
505	211	3	-1	0	-1	word32 cur _ strd , out _ strd , dst _ strd ;	EMPTY	EMPTY
505	213	1	0	0	0	word32 st _ thresh ;	EMPTY	EMPTY
505	214	2	-1	0	-1	word32 vrnc _ avg _ st ;	EMPTY	EMPTY
505	215	2	-1	0	-1	word32 disable _ cac _ sad ;	EMPTY	EMPTY
505	216	2	-1	0	-1	word32 comp _ row _ start , comp _ row _ end ;	EMPTY	EMPTY
505	217	2	-1	0	-1	num _ blks _ x = align8 ( ps _ out _ frm -> ai4 _ wd [ i ] ) >> 3	ai4 _ wd	EMPTY
505	218	2	-1	0	-1	num _ blks _ y = align8 ( ps _ out _ frm -> ai4 _ ht [ i ] ) >> 3	ai4 _ ht	EMPTY
505	219	2	-1	0	-1	comp _ row _ start = start _ row	EMPTY	EMPTY
505	220	3	-1	0	-1	comp _ row _ end = comp _ row _ start + num _ rows	EMPTY	EMPTY
505	222	1	0	0	0	if ( i )	EMPTY	EMPTY
505	223	2	-1	0	-1	{	EMPTY	EMPTY
505	224	2	-1	0	-1	comp _ row _ start >>= 1 ;	EMPTY	EMPTY
505	225	2	-1	0	-1	comp _ row _ end >>= 1 ;	EMPTY	EMPTY
505	226	3	-1	0	-1	}	EMPTY	EMPTY
505	228	1	0	0	-1	comp _ row _ end = min ( comp _ row _ end  ps _ out _ frm -> ai4 _ ht [ i ] ) ;	ai4 _ ht	EMPTY
505	230	1	0	0	-1	comp _ row _ start = align8 ( comp _ row _ start ) >> 3	EMPTY	EMPTY
505	231	2	-1	0	-1	comp _ row _ end = align8 ( comp _ row _ end ) >> 3	EMPTY	EMPTY
505	232	2	-1	0	-1	st _ thresh = st _ thresh ;	EMPTY	EMPTY
505	233	3	-1	0	-1	vrnc _ avg _ st = var _ avg _ luma ;	EMPTY	EMPTY
505	235	1	0	0	0	if ( i )	EMPTY	EMPTY
505	236	2	-1	0	-1	{	EMPTY	EMPTY
505	237	2	-1	0	-1	st _ thresh = st _ thresh >> 1 ;	EMPTY	EMPTY
505	238	2	-1	0	-1	vrnc _ avg _ st = var _ avg _ chroma ;	EMPTY	EMPTY
505	239	3	-1	0	-1	}	EMPTY	EMPTY
505	241	1	0	0	-1	out _ strd = ps _ out _ frm -> ai4 _ strd [ i ]	ai4 _ strd	EMPTY
505	242	2	-1	0	-1	if ( ps _ ctxt -> s _ params . i4 _ cur _ fld _ top )	s _ params i4 _ cur _ fld _ top	EMPTY
505	243	2	-1	0	-1	{	EMPTY	EMPTY
505	244	2	-1	0	-1	cur _ strd = ps _ cur _ fld -> ai4 _ strd [ i ] ;	ai4 _ strd	EMPTY
505	245	2	-1	0	-1	}	EMPTY	EMPTY
505	246	2	-1	0	-1	else	EMPTY	EMPTY
505	247	2	-1	0	-1	{	EMPTY	EMPTY
505	248	2	-1	0	-1	cur _ strd = ps _ nxt _ fld -> ai4 _ strd [ i ] ;	ai4 _ strd	EMPTY
505	249	3	-1	0	-1	}	EMPTY	EMPTY
505	252	1	1	0	-1	disable _ cac _ sad = 0	EMPTY	EMPTY
505	254	2	-1	1	-1	if ( ps _ prv _ fld -> apu1 _ buf [ i ] == null )	apu1 _ buf	EMPTY
505	255	2	-1	0	-1	{	EMPTY	EMPTY
505	256	2	-1	0	-1	disable _ cac _ sad = 1 ;	EMPTY	EMPTY
505	257	3	-1	0	-1	}	EMPTY	EMPTY
505	259	1	0	0	0	for ( row = comp _ row _ start ; row < comp _ row _ end ; row ++ )	EMPTY	EMPTY
505	260	2	-1	0	-1	{	EMPTY	EMPTY
505	261	2	-1	0	-1	pu1 _ out = ps _ out _ frm -> apu1 _ buf [ i ]	apu1 _ buf	EMPTY
505	262	3	-1	0	-1	pu1 _ out += ( ps _ out _ frm -> ai4 _ strd [ i ] * row << 3 )	ai4 _ strd	EMPTY
505	264	1	0	0	-1	pu1 _ prv = ps _ prv _ fld -> apu1 _ buf [ i ]	apu1 _ buf	EMPTY
505	265	3	-1	0	-1	pu1 _ prv += ( ps _ prv _ fld -> ai4 _ strd [ i ] * row << 2 )	ai4 _ strd	EMPTY
505	267	1	0	0	0	if ( ps _ ctxt -> s _ params . i4 _ cur _ fld _ top )	s _ params i4 _ cur _ fld _ top	EMPTY
505	268	2	-1	0	-1	{	EMPTY	EMPTY
505	269	2	-1	0	-1	pu1 _ top = ps _ cur _ fld -> apu1 _ buf [ i ] ;	apu1 _ buf	EMPTY
505	270	2	-1	0	-1	pu1 _ bot = ps _ nxt _ fld -> apu1 _ buf [ i ] ;	apu1 _ buf	EMPTY
505	271	2	-1	0	-1	}	EMPTY	EMPTY
505	272	2	-1	0	-1	else	EMPTY	EMPTY
505	273	2	-1	0	-1	{	EMPTY	EMPTY
505	274	2	-1	0	-1	pu1 _ top = ps _ nxt _ fld -> apu1 _ buf [ i ] ;	apu1 _ buf	EMPTY
505	275	2	-1	0	-1	pu1 _ bot = ps _ cur _ fld -> apu1 _ buf [ i ] ;	apu1 _ buf	EMPTY
505	276	2	-1	0	-1	}	EMPTY	EMPTY
505	277	2	-1	0	-1	pu1 _ top += ( cur _ strd * row << 2 )	EMPTY	EMPTY
505	278	3	-1	0	-1	pu1 _ bot += ( cur _ strd * row << 2 )	EMPTY	EMPTY
505	280	1	0	0	0	for ( col = numconst ; col < num _ blks _ x ; col ++ )	EMPTY	EMPTY
505	281	2	-1	0	-1	{	EMPTY	EMPTY
505	282	2	-1	0	-1	word32 cac , sad , vrnc ;	EMPTY	EMPTY
505	283	2	-1	0	-1	word32 th _ num , th _ den ;	EMPTY	EMPTY
505	284	2	-1	0	-1	uword8 au1 _ dst [ blk _ wd * blk _ ht ] ;	uword8	EMPTY
505	285	2	-1	0	-1	word32 blk _ wd , blk _ ht ;	EMPTY	EMPTY
505	286	2	-1	0	-1	word32 input _ boundary ;	EMPTY	EMPTY
505	287	2	-1	0	-1	cac = 0	EMPTY	EMPTY
505	288	2	-1	0	-1	sad = 0	EMPTY	EMPTY
505	289	2	-1	0	-1	th _ den = 0	EMPTY	EMPTY
505	290	2	-1	0	-1	th _ num = st _ thresh	EMPTY	EMPTY
505	291	3	-1	0	-1	vrnc = 0	EMPTY	EMPTY
505	293	1	1	0	-1	disable _ cac _ sad = 0	EMPTY	EMPTY
505	295	2	-1	1	-1	if ( ps _ prv _ fld -> apu1 _ buf [ i ] == null )	apu1 _ buf	EMPTY
505	296	2	-1	0	-1	{	EMPTY	EMPTY
505	297	2	-1	0	-1	disable _ cac _ sad = 1 ;	EMPTY	EMPTY
505	298	2	-1	0	-1	}	EMPTY	EMPTY
505	301	3	-1	1	-1	input _ boundary = 0	EMPTY	EMPTY
505	303	1	0	0	-1	blk _ wd = blk _ wd ;	EMPTY	EMPTY
505	304	3	-1	0	-1	blk _ ht = blk _ ht ;	EMPTY	EMPTY
505	306	1	0	0	0	if ( ( ( ( num _ blks _ x - 1 ) == col ) && ( ps _ out _ frm -> ai4 _ wd [ i ] & 0x7 ) ) ||	ai4 _ wd	EMPTY
505	307	2	-1	0	-1	( ( ( num _ blks _ y - 1 ) == row ) && ( ps _ out _ frm -> ai4 _ ht [ i ] & 0x7 ) ) )	ai4 _ ht	EMPTY
505	308	2	-1	0	-1	{	EMPTY	EMPTY
505	309	2	-1	0	-1	disable _ cac _ sad = 1 ;	EMPTY	EMPTY
505	310	3	-1	0	-1	input _ boundary = 1 ;	EMPTY	EMPTY
505	312	1	0	0	0	if ( ( ( num _ blks _ x - 1 ) == col ) && ( ps _ out _ frm -> ai4 _ wd [ i ] & 0x7 ) )	ai4 _ wd	EMPTY
505	313	3	-1	0	-1	blk _ wd = ( ps _ out _ frm -> ai4 _ wd [ i ] & 0x7 ) ;	ai4 _ wd	EMPTY
505	315	1	0	0	0	if ( ( ( num _ blks _ y - 1 ) == row ) && ( ps _ out _ frm -> ai4 _ ht [ i ] & 0x7 ) )	ai4 _ ht	EMPTY
505	316	3	-1	0	-1	blk _ ht = ( ps _ out _ frm -> ai4 _ ht [ i ] & 0x7 ) ;	ai4 _ ht	EMPTY
505	318	1	0	0	-1	}	EMPTY	EMPTY
505	320	1	1	0	1	if ( numconst == disable _ cac _ sad )	EMPTY	EMPTY
505	321	2	-1	0	-1	{	EMPTY	EMPTY
505	323	2	-1	1	-1	profile _ disable _ sad	EMPTY	EMPTY
505	324	2	-1	0	-1	sad = ps _ ctxt -> pf _ sad _ 8x4 ( pu1 _ prv , pu1 _ bot , cur _ strd ,	pf _ sad _ 8x4	EMPTY
505	325	2	-1	0	-1	cur _ strd ,	EMPTY	EMPTY
505	326	2	-1	0	-1	blk _ wd ,	EMPTY	EMPTY
505	327	2	-1	0	-1	blk _ ht >> 1 )	EMPTY	EMPTY
505	329	2	-1	1	-1	profile _ disable _ variance	EMPTY	EMPTY
505	330	2	-1	0	-1	vrnc = ps _ ctxt -> pf _ variance _ 8x4 ( pu1 _ top , cur _ strd , blk _ wd ,	EMPTY	EMPTY
505	331	3	-1	0	-1	blk _ ht >> 1 )	EMPTY	EMPTY
505	333	1	0	0	-1	th _ num = st _ thresh	EMPTY	EMPTY
505	335	1	0	0	-1	th _ num *= vrnc _ avg _ st +	EMPTY	EMPTY
505	336	3	-1	0	-1	( ( mod _ idx _ st _ num * vrnc ) >> mod _ idx _ st _ shift )	EMPTY	EMPTY
505	338	1	0	0	-1	th _ den = vrnc +	EMPTY	EMPTY
505	339	3	-1	0	-1	( ( mod _ idx _ st _ num * vrnc _ avg _ st ) >> mod _ idx _ st _ shift )	EMPTY	EMPTY
505	341	1	1	0	1	if ( ( sad * th _ den ) <= th _ num )	EMPTY	EMPTY
505	342	2	-1	0	-1	{	EMPTY	EMPTY
505	344	2	-1	1	-1	profile _ disable _ cac	EMPTY	EMPTY
505	345	2	-1	0	-1	cac = ps _ ctxt -> pf _ cac _ 8x8 ( pu1 _ top , pu1 _ bot , cur _ strd , cur _ strd )	EMPTY	EMPTY
505	346	2	-1	0	-1	}	EMPTY	EMPTY
505	347	3	-1	0	-1	}	EMPTY	EMPTY
505	349	1	0	0	-1	pu1 _ dst = pu1 _ out ;	EMPTY	EMPTY
505	350	3	-1	0	-1	dst _ strd = out _ strd ;	EMPTY	EMPTY
505	356	1	1	1	1	if ( input _ boundary )	EMPTY	EMPTY
505	357	2	-1	0	-1	{	EMPTY	EMPTY
505	358	2	-1	0	-1	pu1 _ dst = au1 _ dst ;	EMPTY	EMPTY
505	359	2	-1	0	-1	dst _ strd = blk _ wd ;	EMPTY	EMPTY
505	360	2	-1	0	-1	ideint _ weave _ blk ( pu1 _ top , pu1 _ bot , pu1 _ dst , dst _ strd ,	EMPTY	EMPTY
505	361	2	-1	0	-1	cur _ strd , blk _ wd , blk _ ht ) ;	EMPTY	EMPTY
505	362	3	-1	0	-1	}	EMPTY	EMPTY
505	365	1	1	1	1	if ( 0 == ps _ ctxt -> s _ params . i4 _ disable _ weave )	s _ params i4 _ disable _ weave	EMPTY
505	366	2	-1	0	-1	{	EMPTY	EMPTY
505	367	2	-1	0	-1	ideint _ weave _ blk ( pu1 _ top , pu1 _ bot , pu1 _ dst , dst _ strd ,	EMPTY	EMPTY
505	368	2	-1	0	-1	cur _ strd , blk _ wd , blk _ ht ) ;	EMPTY	EMPTY
505	369	3	-1	0	-1	}	EMPTY	EMPTY
505	371	1	1	0	1	if ( disable _ cac _ sad || cac || ( sad * th _ den > th _ num ) )	EMPTY	EMPTY
505	372	2	-1	0	-1	{	EMPTY	EMPTY
505	374	2	-1	1	-1	if ( ( 0 == row ) || ( 0 == col ) ||	EMPTY	EMPTY
505	375	2	-1	0	-1	( ( num _ blks _ x - 1 ) == col ) || ( ( num _ blks _ y - 1 ) == row ) )	EMPTY	EMPTY
505	376	2	-1	0	-1	{	EMPTY	EMPTY
505	377	2	-1	0	-1	uword8 * pu1 _ dst _ top ;	uword8	EMPTY
505	378	3	-1	0	-1	uword8 au1 _ pad [ ( blk _ ht + 4 ) * ( blk _ wd + 4 ) ] ;	uword8	EMPTY
505	380	1	0	0	0	ideint _ pad _ blk ( pu1 _ top , pu1 _ bot , au1 _ pad , cur _ strd , row ,	EMPTY	EMPTY
505	381	3	-1	0	-1	col , num _ blks _ y , num _ blks _ x , blk _ wd , blk _ ht ) ;	EMPTY	EMPTY
505	383	1	0	0	-1	pu1 _ dst _ top = au1 _ pad + 2 * ( blk _ wd + 4 ) + 2 ;	EMPTY	EMPTY
505	385	1	0	0	-1	profile _ disable _ spatial	EMPTY	EMPTY
505	386	2	-1	0	-1	ps _ ctxt -> pf _ spatial _ filter ( pu1 _ dst _ top , pu1 _ dst + dst _ strd ,	EMPTY	EMPTY
505	387	2	-1	0	-1	( blk _ wd + 4 ) * 2 ,	EMPTY	EMPTY
505	388	2	-1	0	-1	dst _ strd * 2 ) ;	EMPTY	EMPTY
505	389	2	-1	0	-1	}	EMPTY	EMPTY
505	390	2	-1	0	-1	else	EMPTY	EMPTY
505	391	2	-1	0	-1	{	EMPTY	EMPTY
505	392	2	-1	0	-1	profile _ disable _ spatial	EMPTY	EMPTY
505	393	2	-1	0	-1	ps _ ctxt -> pf _ spatial _ filter ( pu1 _ top , pu1 _ dst + dst _ strd ,	EMPTY	EMPTY
505	394	3	-1	0	-1	cur _ strd , dst _ strd * 2 ) ;	EMPTY	EMPTY
505	396	1	0	0	-1	}	EMPTY	EMPTY
505	397	3	-1	0	-1	}	EMPTY	EMPTY
505	402	1	1	1	1	if ( input _ boundary )	EMPTY	EMPTY
505	403	2	-1	0	-1	{	EMPTY	EMPTY
505	404	3	-1	0	-1	word32 j ;	EMPTY	EMPTY
505	406	1	0	0	0	for ( j = 0 ; j < blk _ ht ; j ++ )	EMPTY	EMPTY
505	407	2	-1	0	-1	{	EMPTY	EMPTY
505	408	2	-1	0	-1	memcpy ( pu1 _ out + j * out _ strd , au1 _ dst + j * blk _ wd , blk _ wd ) ;	EMPTY	memcpy
505	409	2	-1	0	-1	}	EMPTY	EMPTY
505	410	2	-1	0	-1	}	EMPTY	EMPTY
505	411	2	-1	0	-1	pu1 _ prv += 8	EMPTY	EMPTY
505	412	2	-1	0	-1	pu1 _ top += 8	EMPTY	EMPTY
505	413	2	-1	0	-1	pu1 _ bot += 8	EMPTY	EMPTY
505	414	2	-1	0	-1	pu1 _ out += 8	EMPTY	EMPTY
505	415	2	-1	0	-1	}	EMPTY	EMPTY
505	416	2	-1	0	-1	}	EMPTY	EMPTY
505	417	2	-1	0	-1	}	EMPTY	EMPTY
505	418	2	-1	0	-1	return ideint _ error _ none ;	ideint _ error _ none	EMPTY
505	419	3	-1	0	-1	}	EMPTY	EMPTY
515	58	1	0	0	-1	void impeg2d _ next _ start _ code ( dec _ state _ t * ps _ dec )	impeg2d _ next _ start _ code ps _ dec	EMPTY
515	59	2	-1	0	-1	{	EMPTY	EMPTY
515	60	2	-1	0	-1	stream _ t * ps _ stream ;	stream _ t	EMPTY
515	61	2	-1	0	-1	ps _ stream = & ps _ dec -> s _ bit _ stream	ps _ dec	EMPTY
515	62	3	-1	0	-1	impeg2d _ bit _ stream _ flush _ to _ byte _ boundary ( ps _ stream )	EMPTY	EMPTY
515	64	1	0	0	0	while ( ( impeg2d _ bit _ stream _ nxt ( ps _ stream , start _ code _ prefix _ len ) != start _ code _ prefix )	EMPTY	EMPTY
515	65	2	-1	0	-1	&& ( ps _ dec -> s _ bit _ stream . u4 _ offset < ps _ dec -> s _ bit _ stream . u4 _ max _ offset ) )	ps _ dec u4 _ offset ps _ dec u4 _ max _ offset	EMPTY
515	66	2	-1	0	-1	{	EMPTY	EMPTY
515	67	2	-1	0	-1	impeg2d _ bit _ stream _ get ( ps _ stream , 8 ) ;	EMPTY	EMPTY
515	68	2	-1	0	-1	}	EMPTY	EMPTY
515	69	2	-1	0	-1	return	EMPTY	EMPTY
515	70	3	-1	0	-1	}	EMPTY	EMPTY
515	81	1	0	0	-1	void impeg2d _ next _ code ( dec _ state _ t * ps _ dec  uword32 u4 _ start _ code _ val )	impeg2d _ next _ code ps _ dec u4 _ start _ code _ val	EMPTY
515	82	2	-1	0	-1	{	EMPTY	EMPTY
515	83	2	-1	0	-1	stream _ t * ps _ stream ;	stream _ t	EMPTY
515	84	2	-1	0	-1	ps _ stream = & ps _ dec -> s _ bit _ stream	ps _ dec	EMPTY
515	85	3	-1	0	-1	impeg2d _ bit _ stream _ flush _ to _ byte _ boundary ( ps _ stream )	EMPTY	EMPTY
515	87	1	0	0	0	while ( ( impeg2d _ bit _ stream _ nxt ( ps _ stream  start _ code _ len ) != u4 _ start _ code _ val ) &&	u4 _ start _ code _ val	EMPTY
515	88	2	-1	0	-1	( ps _ dec -> s _ bit _ stream . u4 _ offset < ps _ dec -> s _ bit _ stream . u4 _ max _ offset ) )	ps _ dec u4 _ offset ps _ dec u4 _ max _ offset	EMPTY
515	89	3	-1	0	-1	{	EMPTY	EMPTY
515	91	1	1	0	1	if ( impeg2d _ bit _ stream _ get ( ps _ stream  numconst ) != numconst )	EMPTY	EMPTY
515	92	2	-1	0	-1	{	EMPTY	EMPTY
515	94	3	-1	1	-1	}	EMPTY	EMPTY
515	96	1	0	0	-1	}	EMPTY	EMPTY
515	97	2	-1	0	-1	return ;	EMPTY	EMPTY
515	98	3	-1	0	-1	}	EMPTY	EMPTY
515	109	1	0	0	-1	void impeg2d _ peek _ next _ start _ code ( dec _ state _ t * ps _ dec )	impeg2d _ peek _ next _ start _ code ps _ dec	EMPTY
515	110	2	-1	0	-1	{	EMPTY	EMPTY
515	111	2	-1	0	-1	stream _ t * ps _ stream ;	stream _ t	EMPTY
515	112	2	-1	0	-1	ps _ stream = & ps _ dec -> s _ bit _ stream	ps _ dec	EMPTY
515	113	3	-1	0	-1	impeg2d _ bit _ stream _ flush _ to _ byte _ boundary ( ps _ stream )	EMPTY	EMPTY
515	115	1	0	0	0	while ( ( impeg2d _ bit _ stream _ nxt ( ps _ stream , start _ code _ prefix _ len ) != start _ code _ prefix )	EMPTY	EMPTY
515	116	2	-1	0	-1	&& ( ps _ dec -> s _ bit _ stream . u4 _ offset < ps _ dec -> s _ bit _ stream . u4 _ max _ offset ) )	ps _ dec u4 _ offset ps _ dec u4 _ max _ offset	EMPTY
515	117	2	-1	0	-1	{	EMPTY	EMPTY
515	118	2	-1	0	-1	impeg2d _ bit _ stream _ get ( ps _ stream , 8 ) ;	EMPTY	EMPTY
515	119	2	-1	0	-1	}	EMPTY	EMPTY
515	120	2	-1	0	-1	return	EMPTY	EMPTY
515	121	3	-1	0	-1	}	EMPTY	EMPTY
515	133	1	0	0	-1	impeg2d _ error _ codes _ t impeg2d _ dec _ seq _ hdr ( dec _ state _ t * ps _ dec )	impeg2d _ dec _ seq _ hdr ps _ dec	EMPTY
515	134	2	-1	0	-1	{	EMPTY	EMPTY
515	135	2	-1	0	-1	stream _ t * ps _ stream ;	stream _ t	EMPTY
515	136	2	-1	0	-1	ps _ stream = & ps _ dec -> s _ bit _ stream	ps _ dec	EMPTY
515	137	2	-1	0	-1	uword16 u2 _ height ;	EMPTY	EMPTY
515	138	3	-1	0	-1	uword16 u2 _ width ;	EMPTY	EMPTY
515	140	1	0	0	0	if ( impeg2d _ bit _ stream _ nxt ( ps _ stream , start _ code _ len ) != sequence _ header _ code )	EMPTY	EMPTY
515	141	2	-1	0	-1	{	EMPTY	EMPTY
515	142	2	-1	0	-1	impeg2d _ bit _ stream _ flush ( ps _ stream , start _ code _ len ) ;	EMPTY	EMPTY
515	143	3	-1	0	-1	return impeg2d _ frm _ hdr _ start _ code _ not _ found ;	impeg2d _ frm _ hdr _ start _ code _ not _ found	EMPTY
515	145	1	0	0	-1	}	EMPTY	EMPTY
515	146	3	-1	0	-1	impeg2d _ bit _ stream _ flush ( ps _ stream , start _ code _ len )	EMPTY	EMPTY
515	148	1	0	0	-1	u2 _ width = impeg2d _ bit _ stream _ get ( ps _ stream , 12 )	EMPTY	EMPTY
515	149	3	-1	0	-1	u2 _ height = impeg2d _ bit _ stream _ get ( ps _ stream , 12 )	EMPTY	EMPTY
515	151	1	1	0	1	if ( ( u2 _ width != ps _ dec -> u2 _ horizontal _ size )	ps _ dec	EMPTY
515	152	2	-1	0	-1	|| ( u2 _ height != ps _ dec -> u2 _ vertical _ size ) )	ps _ dec	EMPTY
515	153	2	-1	0	-1	{	EMPTY	EMPTY
515	154	2	-1	0	-1	if ( numconst == ps _ dec -> u2 _ header _ done )	ps _ dec	EMPTY
515	155	2	-1	0	-1	{	EMPTY	EMPTY
515	157	2	-1	1	-1	ps _ dec -> u2 _ horizontal _ size = u2 _ width	ps _ dec	EMPTY
515	158	2	-1	0	-1	ps _ dec -> u2 _ vertical _ size = u2 _ height	ps _ dec	EMPTY
515	159	2	-1	0	-1	if ( 0 == ps _ dec -> u4 _ frm _ buf _ stride )	ps _ dec u4 _ frm _ buf _ stride	EMPTY
515	160	2	-1	0	-1	{	EMPTY	EMPTY
515	161	2	-1	0	-1	ps _ dec -> u4 _ frm _ buf _ stride = ( uword32 ) ( u2 _ width ) ;	ps _ dec u4 _ frm _ buf _ stride	EMPTY
515	162	2	-1	0	-1	}	EMPTY	EMPTY
515	163	2	-1	0	-1	}	EMPTY	EMPTY
515	164	2	-1	0	-1	else	EMPTY	EMPTY
515	165	2	-1	0	-1	{	EMPTY	EMPTY
515	166	2	-1	0	-1	if ( ( u2 _ width > ps _ dec -> u2 _ create _ max _ width )	ps _ dec	EMPTY
515	167	2	-1	0	-1	|| ( u2 _ height > ps _ dec -> u2 _ create _ max _ height ) )	ps _ dec	EMPTY
515	168	2	-1	0	-1	{	EMPTY	EMPTY
515	169	3	-1	0	-1	impeg2d _ error _ codes _ t e _ error = impeg2d _ unsupported _ dimensions ;	impeg2d _ unsupported _ dimensions	EMPTY
515	171	1	0	0	-1	ps _ dec -> u2 _ reinit _ max _ height = u2 _ height ;	ps _ dec	EMPTY
515	172	3	-1	0	-1	ps _ dec -> u2 _ reinit _ max _ width = u2 _ width ;	ps _ dec	EMPTY
515	174	1	1	0	1	return e _ error ;	EMPTY	EMPTY
515	175	2	-1	0	-1	}	EMPTY	EMPTY
515	176	2	-1	0	-1	else	EMPTY	EMPTY
515	177	2	-1	0	-1	{	EMPTY	EMPTY
515	179	2	-1	1	-1	return ( impeg2d _ error _ codes _ t ) ivd _ res _ changed	EMPTY	EMPTY
515	180	2	-1	0	-1	}	EMPTY	EMPTY
515	181	2	-1	0	-1	}	EMPTY	EMPTY
515	182	3	-1	0	-1	}	EMPTY	EMPTY
515	184	1	0	0	0	if ( ( ps _ dec -> u2 _ horizontal _ size > ps _ dec -> u2 _ create _ max _ width )	ps _ dec ps _ dec	EMPTY
515	185	2	-1	0	-1	|| ( ps _ dec -> u2 _ vertical _ size > ps _ dec -> u2 _ create _ max _ height ) )	ps _ dec ps _ dec	EMPTY
515	186	2	-1	0	-1	{	EMPTY	EMPTY
515	187	2	-1	0	-1	impeg2d _ error _ codes _ t e _ error = impeg2d _ unsupported _ dimensions ;	impeg2d _ unsupported _ dimensions	EMPTY
515	188	2	-1	0	-1	return set _ ivd _ fatal _ error ( e _ error ) ;	EMPTY	EMPTY
515	189	3	-1	0	-1	}	EMPTY	EMPTY
515	196	1	1	1	-1	ps _ dec -> u2 _ aspect _ ratio _ info = impeg2d _ bit _ stream _ get ( ps _ stream , 4 )	ps _ dec	EMPTY
515	201	1	1	1	-1	ps _ dec -> u2 _ frame _ rate _ code = impeg2d _ bit _ stream _ get ( ps _ stream , 4 )	ps _ dec u2 _ frame _ rate _ code	EMPTY
515	206	1	1	1	1	impeg2d _ bit _ stream _ flush ( ps _ stream , 18 )	EMPTY	EMPTY
515	207	3	-1	0	-1	;	EMPTY	EMPTY
515	212	1	1	1	1	impeg2d _ bit _ stream _ flush ( ps _ stream , 11 )	EMPTY	EMPTY
515	217	1	1	1	1	if ( impeg2d _ bit _ stream _ get _ bit ( ps _ stream ) == 1 )	EMPTY	EMPTY
515	218	2	-1	0	-1	{	EMPTY	EMPTY
515	219	2	-1	0	-1	uword16 i ;	EMPTY	EMPTY
515	220	2	-1	0	-1	for ( i = 0 ; i < num _ pels _ in _ block ; i ++ )	EMPTY	EMPTY
515	221	2	-1	0	-1	{	EMPTY	EMPTY
515	222	2	-1	0	-1	ps _ dec -> au1 _ intra _ quant _ matrix [ gau1 _ impeg2 _ inv _ scan _ zig _ zag [ i ] ] = ( uword8 ) impeg2d _ bit _ stream _ get ( ps _ stream , 8 ) ;	ps _ dec	EMPTY
515	223	3	-1	0	-1	}	EMPTY	EMPTY
515	225	1	0	0	-1	}	EMPTY	EMPTY
515	226	2	-1	0	-1	else	EMPTY	EMPTY
515	227	2	-1	0	-1	{	EMPTY	EMPTY
515	228	2	-1	0	-1	memcpy ( ps _ dec -> au1 _ intra _ quant _ matrix , gau1 _ impeg2 _ intra _ quant _ matrix _ default ,	ps _ dec	memcpy
515	229	2	-1	0	-1	num _ pels _ in _ block ) ;	EMPTY	EMPTY
515	230	3	-1	0	-1	}	EMPTY	EMPTY
515	235	1	1	1	1	if ( impeg2d _ bit _ stream _ get _ bit ( ps _ stream ) == 1 )	EMPTY	EMPTY
515	236	2	-1	0	-1	{	EMPTY	EMPTY
515	237	2	-1	0	-1	uword16 i ;	EMPTY	EMPTY
515	238	2	-1	0	-1	for ( i = 0 ; i < num _ pels _ in _ block ; i ++ )	EMPTY	EMPTY
515	239	2	-1	0	-1	{	EMPTY	EMPTY
515	240	2	-1	0	-1	ps _ dec -> au1 _ inter _ quant _ matrix [ gau1 _ impeg2 _ inv _ scan _ zig _ zag [ i ] ] = ( uword8 ) impeg2d _ bit _ stream _ get ( ps _ stream , 8 ) ;	ps _ dec	EMPTY
515	241	2	-1	0	-1	}	EMPTY	EMPTY
515	242	2	-1	0	-1	}	EMPTY	EMPTY
515	243	2	-1	0	-1	else	EMPTY	EMPTY
515	244	2	-1	0	-1	{	EMPTY	EMPTY
515	245	2	-1	0	-1	memcpy ( ps _ dec -> au1 _ inter _ quant _ matrix , gau1 _ impeg2 _ inter _ quant _ matrix _ default ,	ps _ dec	memcpy
515	246	2	-1	0	-1	num _ pels _ in _ block ) ;	EMPTY	EMPTY
515	247	2	-1	0	-1	}	EMPTY	EMPTY
515	248	3	-1	0	-1	impeg2d _ next _ start _ code ( ps _ dec )	impeg2d _ next _ start _ code ps _ dec	EMPTY
515	250	1	0	0	0	return ( impeg2d _ error _ codes _ t ) ivd _ error _ none	EMPTY	EMPTY
515	251	3	-1	0	-1	}	EMPTY	EMPTY
515	264	1	0	0	-1	impeg2d _ error _ codes _ t impeg2d _ dec _ seq _ ext ( dec _ state _ t * ps _ dec )	impeg2d _ dec _ seq _ ext ps _ dec	EMPTY
515	265	2	-1	0	-1	{	EMPTY	EMPTY
515	266	3	-1	0	-1	stream _ t * ps _ stream ;	stream _ t	EMPTY
515	268	1	0	0	-1	ps _ stream = & ps _ dec -> s _ bit _ stream	ps _ dec	EMPTY
515	270	1	0	0	0	if ( impeg2d _ bit _ stream _ nxt ( ps _ stream , start _ code _ len ) != extension _ start _ code )	EMPTY	EMPTY
515	271	2	-1	0	-1	{	EMPTY	EMPTY
515	272	2	-1	0	-1	impeg2d _ bit _ stream _ flush ( ps _ stream , start _ code _ len ) ;	EMPTY	EMPTY
515	273	3	-1	0	-1	return impeg2d _ frm _ hdr _ start _ code _ not _ found ;	impeg2d _ frm _ hdr _ start _ code _ not _ found	EMPTY
515	275	1	1	0	-1	}	EMPTY	EMPTY
515	277	3	-1	1	-1	impeg2d _ bit _ stream _ flush ( ps _ stream , start _ code _ len )	EMPTY	EMPTY
515	280	1	1	1	1	impeg2d _ bit _ stream _ flush ( ps _ stream , 4 )	EMPTY	EMPTY
515	285	1	1	1	-1	{	EMPTY	EMPTY
515	286	3	-1	0	-1	uword32 u4 _ esc _ bit , u4 _ profile , u4 _ level ;	EMPTY	EMPTY
515	294	1	1	1	-1	u4 _ esc _ bit = impeg2d _ bit _ stream _ get _ bit ( ps _ stream )	EMPTY	EMPTY
515	295	2	-1	0	-1	u4 _ profile = impeg2d _ bit _ stream _ get ( ps _ stream , 3 )	EMPTY	EMPTY
515	296	2	-1	0	-1	u4 _ level = impeg2d _ bit _ stream _ get ( ps _ stream , 4 )	EMPTY	EMPTY
515	297	2	-1	0	-1	unused ( u4 _ profile ) ;	EMPTY	EMPTY
515	298	2	-1	0	-1	unused ( u4 _ level ) ;	EMPTY	EMPTY
515	304	2	-1	1	-1	if ( 1 == u4 _ esc _ bit )	EMPTY	EMPTY
515	305	2	-1	0	-1	{	EMPTY	EMPTY
515	306	2	-1	0	-1	return impeg2d _ prof _ level _ not _ supported ;	EMPTY	EMPTY
515	307	2	-1	0	-1	}	EMPTY	EMPTY
515	308	3	-1	0	-1	}	EMPTY	EMPTY
515	310	1	0	0	-1	ps _ dec -> u2 _ progressive _ sequence = impeg2d _ bit _ stream _ get _ bit ( ps _ stream ) ;	ps _ dec	EMPTY
515	313	1	1	1	1	if ( impeg2d _ bit _ stream _ get ( ps _ stream , 2 ) != 0x1 )	EMPTY	EMPTY
515	314	3	-1	0	-1	return impeg2d _ chroma _ fmt _ not _ sup	EMPTY	EMPTY
515	317	1	1	1	-1	ps _ dec -> u2 _ horizontal _ size += ( impeg2d _ bit _ stream _ get ( ps _ stream , 2 ) << 12 )	ps _ dec	EMPTY
515	320	1	1	1	-1	ps _ dec -> u2 _ vertical _ size += ( impeg2d _ bit _ stream _ get ( ps _ stream , 2 ) << 12 )	ps _ dec	EMPTY
515	329	1	1	1	1	impeg2d _ bit _ stream _ flush ( ps _ stream , 12 )	EMPTY	EMPTY
515	330	2	-1	0	-1	;	EMPTY	EMPTY
515	331	2	-1	0	-1	impeg2d _ bit _ stream _ flush ( ps _ stream , 9 )	EMPTY	EMPTY
515	336	2	-1	1	-1	ps _ dec -> u2 _ frame _ rate _ extension _ n = impeg2d _ bit _ stream _ get ( ps _ stream , 2 )	ps _ dec	EMPTY
515	337	3	-1	0	-1	ps _ dec -> u2 _ frame _ rate _ extension _ d = impeg2d _ bit _ stream _ get ( ps _ stream , 5 )	ps _ dec	EMPTY
515	339	1	0	0	0	return ( impeg2d _ error _ codes _ t ) ivd _ error _ none	EMPTY	EMPTY
515	340	3	-1	0	-1	}	EMPTY	EMPTY
515	354	1	0	0	-1	void impeg2d _ dec _ seq _ disp _ ext ( dec _ state _ t * ps _ dec )	impeg2d _ dec _ seq _ disp _ ext ps _ dec	EMPTY
515	355	2	-1	0	-1	{	EMPTY	EMPTY
515	356	2	-1	0	-1	stream _ t * ps _ stream ;	stream _ t	EMPTY
515	357	3	-1	0	-1	ps _ stream = & ps _ dec -> s _ bit _ stream	ps _ dec	EMPTY
515	378	1	1	1	1	impeg2d _ bit _ stream _ get ( ps _ stream , 4 )	EMPTY	EMPTY
515	379	2	-1	0	-1	ps _ dec -> u1 _ video _ format = impeg2d _ bit _ stream _ get ( ps _ stream , 3 )	ps _ dec u1 _ video _ format	EMPTY
515	380	2	-1	0	-1	ps _ dec -> u1 _ colour _ description = impeg2d _ bit _ stream _ get ( ps _ stream , 1 )	ps _ dec	EMPTY
515	381	2	-1	0	-1	ps _ dec -> u1 _ colour _ primaries = 2	ps _ dec u1 _ colour _ primaries	EMPTY
515	382	2	-1	0	-1	ps _ dec -> u1 _ transfer _ characteristics = 2	ps _ dec u1 _ transfer _ characteristics	EMPTY
515	383	2	-1	0	-1	ps _ dec -> u1 _ matrix _ coefficients = 2	ps _ dec u1 _ matrix _ coefficients	EMPTY
515	384	2	-1	0	-1	if ( ps _ dec -> u1 _ colour _ description )	ps _ dec	EMPTY
515	385	2	-1	0	-1	{	EMPTY	EMPTY
515	386	2	-1	0	-1	ps _ dec -> u1 _ colour _ primaries = impeg2d _ bit _ stream _ get ( ps _ stream , 8 ) ;	ps _ dec u1 _ colour _ primaries	EMPTY
515	387	2	-1	0	-1	ps _ dec -> u1 _ transfer _ characteristics = impeg2d _ bit _ stream _ get ( ps _ stream , 8 ) ;	ps _ dec u1 _ transfer _ characteristics	EMPTY
515	388	2	-1	0	-1	ps _ dec -> u1 _ matrix _ coefficients = impeg2d _ bit _ stream _ get ( ps _ stream , 8 ) ;	ps _ dec u1 _ matrix _ coefficients	EMPTY
515	389	3	-1	0	-1	}	EMPTY	EMPTY
515	392	1	1	1	-1	ps _ dec -> u2 _ display _ horizontal _ size = impeg2d _ bit _ stream _ get ( ps _ stream , 14 ) ;	ps _ dec u2 _ display _ horizontal _ size	EMPTY
515	393	2	-1	0	-1	;	EMPTY	EMPTY
515	394	3	-1	0	-1	ps _ dec -> u2 _ display _ vertical _ size = impeg2d _ bit _ stream _ get ( ps _ stream , 14 )	ps _ dec u2 _ display _ vertical _ size	EMPTY
515	396	1	0	0	-1	ps _ dec -> u1 _ seq _ disp _ extn _ present = 1	ps _ dec u1 _ seq _ disp _ extn _ present	EMPTY
515	397	2	-1	0	-1	impeg2d _ next _ start _ code ( ps _ dec )	impeg2d _ next _ start _ code ps _ dec	EMPTY
515	398	3	-1	0	-1	}	EMPTY	EMPTY
515	412	1	0	0	-1	impeg2d _ error _ codes _ t impeg2d _ dec _ seq _ scale _ ext ( dec _ state _ t * ps _ dec )	impeg2d _ dec _ seq _ scale _ ext ps _ dec	EMPTY
515	413	2	-1	0	-1	{	EMPTY	EMPTY
515	414	2	-1	0	-1	unused ( ps _ dec ) ;	ps _ dec	EMPTY
515	415	2	-1	0	-1	return impeg2d _ scalabilitiy _ not _ supported	EMPTY	EMPTY
515	416	3	-1	0	-1	}	EMPTY	EMPTY
515	428	1	0	0	-1	void impeg2d _ dec _ quant _ matrix _ ext ( dec _ state _ t * ps _ dec )	impeg2d _ dec _ quant _ matrix _ ext ps _ dec	EMPTY
515	429	2	-1	0	-1	{	EMPTY	EMPTY
515	430	3	-1	0	-1	stream _ t * ps _ stream ;	stream _ t	EMPTY
515	432	1	1	0	-1	ps _ stream = & ps _ dec -> s _ bit _ stream	ps _ dec	EMPTY
515	434	3	-1	1	-1	impeg2d _ bit _ stream _ flush ( ps _ stream , 4 )	EMPTY	EMPTY
515	439	1	1	1	1	if ( impeg2d _ bit _ stream _ get ( ps _ stream , 1 ) == 1 )	EMPTY	EMPTY
515	440	2	-1	0	-1	{	EMPTY	EMPTY
515	441	2	-1	0	-1	uword16 i ;	EMPTY	EMPTY
515	442	2	-1	0	-1	for ( i = 0 ; i < num _ pels _ in _ block ; i ++ )	EMPTY	EMPTY
515	443	2	-1	0	-1	{	EMPTY	EMPTY
515	444	2	-1	0	-1	ps _ dec -> au1 _ intra _ quant _ matrix [ gau1 _ impeg2 _ inv _ scan _ zig _ zag [ i ] ] = ( uword8 ) impeg2d _ bit _ stream _ get ( ps _ stream , 8 ) ;	ps _ dec	EMPTY
515	445	3	-1	0	-1	}	EMPTY	EMPTY
515	447	1	0	0	-1	}	EMPTY	EMPTY
515	453	1	1	1	1	if ( impeg2d _ bit _ stream _ get ( ps _ stream , 1 ) == 1 )	EMPTY	EMPTY
515	454	2	-1	0	-1	{	EMPTY	EMPTY
515	455	2	-1	0	-1	uword16 i ;	EMPTY	EMPTY
515	456	2	-1	0	-1	for ( i = 0 ; i < num _ pels _ in _ block ; i ++ )	EMPTY	EMPTY
515	457	2	-1	0	-1	{	EMPTY	EMPTY
515	458	2	-1	0	-1	ps _ dec -> au1 _ inter _ quant _ matrix [ gau1 _ impeg2 _ inv _ scan _ zig _ zag [ i ] ] = ( uword8 ) impeg2d _ bit _ stream _ get ( ps _ stream , 8 ) ;	ps _ dec	EMPTY
515	459	2	-1	0	-1	}	EMPTY	EMPTY
515	460	3	-1	0	-1	}	EMPTY	EMPTY
515	464	1	1	1	1	impeg2d _ next _ start _ code ( ps _ dec )	impeg2d _ next _ start _ code ps _ dec	EMPTY
515	465	3	-1	0	-1	}	EMPTY	EMPTY
515	479	1	0	0	-1	void impeg2d _ dec _ pic _ disp _ ext ( dec _ state _ t * ps _ dec )	impeg2d _ dec _ pic _ disp _ ext ps _ dec	EMPTY
515	480	2	-1	0	-1	{	EMPTY	EMPTY
515	481	2	-1	0	-1	word16 i2 _ number _ of _ frame _ centre _ offsets ;	EMPTY	EMPTY
515	482	3	-1	0	-1	stream _ t * ps _ stream ;	stream _ t	EMPTY
515	484	1	0	0	-1	ps _ stream = & ps _ dec -> s _ bit _ stream	ps _ dec	EMPTY
515	485	3	-1	0	-1	impeg2d _ bit _ stream _ flush ( ps _ stream , 4 )	EMPTY	EMPTY
515	487	1	1	0	1	if ( ps _ dec -> u2 _ progressive _ sequence )	ps _ dec	EMPTY
515	488	2	-1	0	-1	{	EMPTY	EMPTY
515	489	2	-1	0	-1	i2 _ number _ of _ frame _ centre _ offsets = ( ps _ dec -> u2 _ repeat _ first _ field ) ?	ps _ dec	EMPTY
515	490	2	-1	0	-1	2 + ps _ dec -> u2 _ top _ field _ first : 1 ;	ps _ dec	EMPTY
515	491	2	-1	0	-1	}	EMPTY	EMPTY
515	492	2	-1	0	-1	else	EMPTY	EMPTY
515	493	2	-1	0	-1	{	EMPTY	EMPTY
515	494	2	-1	0	-1	i2 _ number _ of _ frame _ centre _ offsets =	EMPTY	EMPTY
515	495	2	-1	0	-1	( ps _ dec -> u2 _ picture _ structure != frame _ picture ) ?	ps _ dec	EMPTY
515	496	2	-1	0	-1	1 : 2 + ps _ dec -> u2 _ repeat _ first _ field ;	ps _ dec	EMPTY
515	497	2	-1	0	-1	}	EMPTY	EMPTY
515	498	2	-1	0	-1	while ( i2 _ number _ of _ frame _ centre _ offsets -- )	EMPTY	EMPTY
515	499	2	-1	0	-1	{	EMPTY	EMPTY
515	501	2	-1	1	-1	impeg2d _ bit _ stream _ get ( ps _ stream , 16 )	EMPTY	EMPTY
515	502	2	-1	0	-1	;	EMPTY	EMPTY
515	504	2	-1	1	-1	impeg2d _ bit _ stream _ get ( ps _ stream , 16 )	EMPTY	EMPTY
515	505	2	-1	0	-1	;	EMPTY	EMPTY
515	506	2	-1	0	-1	}	EMPTY	EMPTY
515	507	2	-1	0	-1	impeg2d _ next _ start _ code ( ps _ dec ) ;	impeg2d _ next _ start _ code ps _ dec	EMPTY
515	508	3	-1	0	-1	}	EMPTY	EMPTY
515	521	1	0	0	-1	void impeg2d _ dec _ itu _ t _ ext ( dec _ state _ t * ps _ dec )	impeg2d _ dec _ itu _ t _ ext ps _ dec	EMPTY
515	522	2	-1	0	-1	{	EMPTY	EMPTY
515	523	2	-1	0	-1	impeg2d _ bit _ stream _ flush ( & ps _ dec -> s _ bit _ stream , ext _ id _ len )	ps _ dec	EMPTY
515	524	2	-1	0	-1	impeg2d _ next _ start _ code ( ps _ dec )	impeg2d _ next _ start _ code ps _ dec	EMPTY
515	525	3	-1	0	-1	}	EMPTY	EMPTY
515	539	1	1	1	-1	void impeg2d _ dec _ copyright _ ext ( dec _ state _ t * ps _ dec )	ps _ dec	EMPTY
515	540	2	-1	0	-1	{	EMPTY	EMPTY
515	541	3	-1	0	-1	uword32 u4 _ bits _ to _ flush ;	EMPTY	EMPTY
515	543	1	0	0	-1	u4 _ bits _ to _ flush = copyright _ extension _ len ;	EMPTY	EMPTY
515	545	1	0	0	0	while ( u4 _ bits _ to _ flush >= 32 )	EMPTY	EMPTY
515	546	2	-1	0	-1	{	EMPTY	EMPTY
515	547	2	-1	0	-1	impeg2d _ bit _ stream _ flush ( & ps _ dec -> s _ bit _ stream , 32 ) ;	ps _ dec	EMPTY
515	548	2	-1	0	-1	u4 _ bits _ to _ flush = u4 _ bits _ to _ flush - 32 ;	EMPTY	EMPTY
515	549	3	-1	0	-1	}	EMPTY	EMPTY
515	551	1	0	0	0	if ( u4 _ bits _ to _ flush > 0 )	EMPTY	EMPTY
515	552	2	-1	0	-1	{	EMPTY	EMPTY
515	553	2	-1	0	-1	impeg2d _ bit _ stream _ flush ( & ps _ dec -> s _ bit _ stream , u4 _ bits _ to _ flush ) ;	ps _ dec	EMPTY
515	554	3	-1	0	-1	}	EMPTY	EMPTY
515	557	1	0	0	0	impeg2d _ next _ start _ code ( ps _ dec )	impeg2d _ next _ start _ code ps _ dec	EMPTY
515	558	3	-1	0	-1	}	EMPTY	EMPTY
515	571	1	1	1	-1	void impeg2d _ dec _ cam _ param _ ext ( dec _ state _ t * ps _ dec )	ps _ dec	EMPTY
515	572	3	-1	0	-1	{	EMPTY	EMPTY
515	574	1	0	0	0	uword32 u4 _ bits _ to _ flush ;	EMPTY	EMPTY
515	576	1	0	0	-1	u4 _ bits _ to _ flush = camera _ parameter _ extension _ len ;	EMPTY	EMPTY
515	578	1	0	0	0	while ( u4 _ bits _ to _ flush >= 32 )	EMPTY	EMPTY
515	579	2	-1	0	-1	{	EMPTY	EMPTY
515	580	2	-1	0	-1	impeg2d _ bit _ stream _ flush ( & ps _ dec -> s _ bit _ stream , 32 ) ;	ps _ dec	EMPTY
515	581	2	-1	0	-1	u4 _ bits _ to _ flush = u4 _ bits _ to _ flush - 32 ;	EMPTY	EMPTY
515	582	3	-1	0	-1	}	EMPTY	EMPTY
515	584	1	0	0	0	if ( u4 _ bits _ to _ flush > 0 )	EMPTY	EMPTY
515	585	2	-1	0	-1	{	EMPTY	EMPTY
515	586	2	-1	0	-1	impeg2d _ bit _ stream _ flush ( & ps _ dec -> s _ bit _ stream , u4 _ bits _ to _ flush ) ;	ps _ dec	EMPTY
515	587	3	-1	0	-1	}	EMPTY	EMPTY
515	589	1	0	0	0	impeg2d _ next _ start _ code ( ps _ dec )	impeg2d _ next _ start _ code ps _ dec	EMPTY
515	590	3	-1	0	-1	}	EMPTY	EMPTY
515	604	1	1	1	-1	void impeg2d _ dec _ grp _ of _ pic _ hdr ( dec _ state _ t * ps _ dec )	ps _ dec	EMPTY
515	605	3	-1	0	-1	{	EMPTY	EMPTY
515	607	1	0	0	0	uword32 u4 _ bits _ to _ flush ;	EMPTY	EMPTY
515	609	1	0	0	-1	u4 _ bits _ to _ flush = group _ of _ picture _ len ;	EMPTY	EMPTY
515	611	1	0	0	0	while ( u4 _ bits _ to _ flush >= 32 )	EMPTY	EMPTY
515	612	2	-1	0	-1	{	EMPTY	EMPTY
515	613	2	-1	0	-1	impeg2d _ bit _ stream _ flush ( & ps _ dec -> s _ bit _ stream , 32 ) ;	ps _ dec	EMPTY
515	614	2	-1	0	-1	u4 _ bits _ to _ flush = u4 _ bits _ to _ flush - 32 ;	EMPTY	EMPTY
515	615	3	-1	0	-1	}	EMPTY	EMPTY
515	617	1	0	0	0	if ( u4 _ bits _ to _ flush > 0 )	EMPTY	EMPTY
515	618	2	-1	0	-1	{	EMPTY	EMPTY
515	619	2	-1	0	-1	impeg2d _ bit _ stream _ flush ( & ps _ dec -> s _ bit _ stream , u4 _ bits _ to _ flush ) ;	ps _ dec	EMPTY
515	620	3	-1	0	-1	}	EMPTY	EMPTY
515	622	1	0	0	-1	}	EMPTY	EMPTY
515	635	1	0	0	-1	impeg2d _ error _ codes _ t impeg2d _ dec _ pic _ hdr ( dec _ state _ t * ps _ dec )	impeg2d _ dec _ pic _ hdr ps _ dec	EMPTY
515	636	2	-1	0	-1	{	EMPTY	EMPTY
515	637	2	-1	0	-1	stream _ t * ps _ stream ;	stream _ t	EMPTY
515	638	3	-1	0	-1	ps _ stream = & ps _ dec -> s _ bit _ stream	ps _ dec	EMPTY
515	640	1	1	0	1	impeg2d _ bit _ stream _ flush ( ps _ stream , start _ code _ len )	EMPTY	EMPTY
515	642	3	-1	1	-1	impeg2d _ bit _ stream _ get ( ps _ stream , 10 )	EMPTY	EMPTY
515	645	1	1	1	-1	ps _ dec -> e _ pic _ type = ( e _ pic _ type _ t ) impeg2d _ bit _ stream _ get ( ps _ stream , 3 )	ps _ dec e _ pic _ type e _ pic _ type _ t	EMPTY
515	646	2	-1	0	-1	if ( ( ps _ dec -> e _ pic _ type < i _ pic ) || ( ps _ dec -> e _ pic _ type > d _ pic ) )	ps _ dec e _ pic _ type ps _ dec e _ pic _ type	EMPTY
515	647	2	-1	0	-1	{	EMPTY	EMPTY
515	648	2	-1	0	-1	impeg2d _ next _ code ( ps _ dec , picture _ start _ code ) ;	impeg2d _ next _ code ps _ dec	EMPTY
515	649	2	-1	0	-1	return impeg2d _ invalid _ pic _ type ;	EMPTY	EMPTY
515	650	3	-1	0	-1	}	EMPTY	EMPTY
515	653	1	1	1	1	impeg2d _ bit _ stream _ get ( ps _ stream , 16 )	EMPTY	EMPTY
515	655	1	0	0	0	if ( ps _ dec -> e _ pic _ type == p _ pic || ps _ dec -> e _ pic _ type == b _ pic )	ps _ dec e _ pic _ type ps _ dec e _ pic _ type	EMPTY
515	656	2	-1	0	-1	{	EMPTY	EMPTY
515	657	2	-1	0	-1	ps _ dec -> u2 _ full _ pel _ forw _ vector = impeg2d _ bit _ stream _ get _ bit ( ps _ stream ) ;	ps _ dec	EMPTY
515	658	2	-1	0	-1	ps _ dec -> u2 _ forw _ f _ code = impeg2d _ bit _ stream _ get ( ps _ stream , 3 ) ;	ps _ dec	EMPTY
515	659	2	-1	0	-1	}	EMPTY	EMPTY
515	660	2	-1	0	-1	if ( ps _ dec -> e _ pic _ type == b _ pic )	ps _ dec e _ pic _ type	EMPTY
515	661	2	-1	0	-1	{	EMPTY	EMPTY
515	662	2	-1	0	-1	ps _ dec -> u2 _ full _ pel _ back _ vector = impeg2d _ bit _ stream _ get _ bit ( ps _ stream ) ;	ps _ dec	EMPTY
515	663	2	-1	0	-1	ps _ dec -> u2 _ back _ f _ code = impeg2d _ bit _ stream _ get ( ps _ stream , 3 ) ;	ps _ dec	EMPTY
515	664	3	-1	0	-1	}	EMPTY	EMPTY
515	666	1	0	0	0	if ( ps _ dec -> u2 _ is _ mpeg2 == 0 )	ps _ dec u2 _ is _ mpeg2	EMPTY
515	667	2	-1	0	-1	{	EMPTY	EMPTY
515	668	2	-1	0	-1	ps _ dec -> au2 _ f _ code [ 0 ] [ 0 ] = ps _ dec -> au2 _ f _ code [ 0 ] [ 1 ] = ps _ dec -> u2 _ forw _ f _ code ;	ps _ dec au2 _ f _ code ps _ dec au2 _ f _ code ps _ dec	EMPTY
515	669	2	-1	0	-1	ps _ dec -> au2 _ f _ code [ 1 ] [ 0 ] = ps _ dec -> au2 _ f _ code [ 1 ] [ 1 ] = ps _ dec -> u2 _ back _ f _ code ;	ps _ dec au2 _ f _ code ps _ dec au2 _ f _ code ps _ dec	EMPTY
515	670	3	-1	0	-1	}	EMPTY	EMPTY
515	682	1	1	1	-1	while ( impeg2d _ bit _ stream _ nxt ( ps _ stream , 1 ) == 1 &&	EMPTY	EMPTY
515	683	2	-1	0	-1	ps _ stream -> u4 _ offset < ps _ stream -> u4 _ max _ offset )	u4 _ offset u4 _ max _ offset	EMPTY
515	684	2	-1	0	-1	{	EMPTY	EMPTY
515	685	2	-1	0	-1	impeg2d _ bit _ stream _ get ( ps _ stream , 9 ) ;	EMPTY	EMPTY
515	686	2	-1	0	-1	}	EMPTY	EMPTY
515	687	2	-1	0	-1	impeg2d _ bit _ stream _ get _ bit ( ps _ stream )	EMPTY	EMPTY
515	688	3	-1	0	-1	impeg2d _ next _ start _ code ( ps _ dec )	impeg2d _ next _ start _ code ps _ dec	EMPTY
515	690	1	0	0	0	return ( impeg2d _ error _ codes _ t ) ivd _ error _ none	EMPTY	EMPTY
515	691	3	-1	0	-1	}	EMPTY	EMPTY
515	705	1	0	0	-1	void impeg2d _ dec _ pic _ coding _ ext ( dec _ state _ t * ps _ dec )	impeg2d _ dec _ pic _ coding _ ext ps _ dec	EMPTY
515	706	2	-1	0	-1	{	EMPTY	EMPTY
515	707	3	-1	0	-1	stream _ t * ps _ stream ;	stream _ t	EMPTY
515	709	1	1	0	-1	ps _ stream = & ps _ dec -> s _ bit _ stream	ps _ dec	EMPTY
515	710	2	-1	0	-1	impeg2d _ bit _ stream _ flush ( ps _ stream , start _ code _ len )	EMPTY	EMPTY
515	712	3	-1	1	-1	impeg2d _ bit _ stream _ get ( ps _ stream , 4 )	EMPTY	EMPTY
515	714	1	1	0	-1	ps _ dec -> au2 _ f _ code [ 0 ] [ 0 ] = impeg2d _ bit _ stream _ get ( ps _ stream , 4 )	ps _ dec au2 _ f _ code	EMPTY
515	715	2	-1	0	-1	ps _ dec -> au2 _ f _ code [ 0 ] [ 1 ] = impeg2d _ bit _ stream _ get ( ps _ stream , 4 )	ps _ dec au2 _ f _ code	EMPTY
515	716	2	-1	0	-1	ps _ dec -> au2 _ f _ code [ 1 ] [ 0 ] = impeg2d _ bit _ stream _ get ( ps _ stream , 4 )	ps _ dec au2 _ f _ code	EMPTY
515	717	2	-1	0	-1	ps _ dec -> au2 _ f _ code [ 1 ] [ 1 ] = impeg2d _ bit _ stream _ get ( ps _ stream , 4 )	ps _ dec au2 _ f _ code	EMPTY
515	718	2	-1	0	-1	ps _ dec -> u2 _ intra _ dc _ precision = impeg2d _ bit _ stream _ get ( ps _ stream , 2 )	ps _ dec	EMPTY
515	719	2	-1	0	-1	ps _ dec -> u2 _ picture _ structure = impeg2d _ bit _ stream _ get ( ps _ stream , 2 )	ps _ dec	EMPTY
515	720	2	-1	0	-1	ps _ dec -> u2 _ top _ field _ first = impeg2d _ bit _ stream _ get _ bit ( ps _ stream )	ps _ dec	EMPTY
515	721	2	-1	0	-1	ps _ dec -> u2 _ frame _ pred _ frame _ dct = impeg2d _ bit _ stream _ get _ bit ( ps _ stream )	ps _ dec	EMPTY
515	722	2	-1	0	-1	ps _ dec -> u2 _ concealment _ motion _ vectors = impeg2d _ bit _ stream _ get _ bit ( ps _ stream )	ps _ dec	EMPTY
515	723	2	-1	0	-1	ps _ dec -> u2 _ q _ scale _ type = impeg2d _ bit _ stream _ get _ bit ( ps _ stream )	ps _ dec	EMPTY
515	724	2	-1	0	-1	ps _ dec -> u2 _ intra _ vlc _ format = impeg2d _ bit _ stream _ get _ bit ( ps _ stream )	ps _ dec	EMPTY
515	725	2	-1	0	-1	ps _ dec -> u2 _ alternate _ scan = impeg2d _ bit _ stream _ get _ bit ( ps _ stream )	ps _ dec	EMPTY
515	726	2	-1	0	-1	ps _ dec -> u2 _ repeat _ first _ field = impeg2d _ bit _ stream _ get _ bit ( ps _ stream )	ps _ dec	EMPTY
515	728	3	-1	1	-1	impeg2d _ bit _ stream _ get _ bit ( ps _ stream )	EMPTY	EMPTY
515	730	1	1	0	-1	ps _ dec -> u2 _ progressive _ frame = impeg2d _ bit _ stream _ get _ bit ( ps _ stream )	ps _ dec	EMPTY
515	731	2	-1	0	-1	if ( impeg2d _ bit _ stream _ get _ bit ( ps _ stream ) )	EMPTY	EMPTY
515	732	2	-1	0	-1	{	EMPTY	EMPTY
515	734	2	-1	1	-1	impeg2d _ bit _ stream _ flush ( ps _ stream , 20 )	EMPTY	EMPTY
515	735	2	-1	0	-1	}	EMPTY	EMPTY
515	736	3	-1	0	-1	impeg2d _ next _ start _ code ( ps _ dec ) ;	impeg2d _ next _ start _ code ps _ dec	EMPTY
515	739	1	0	0	0	if ( vertical _ scan == ps _ dec -> u2 _ alternate _ scan )	ps _ dec	EMPTY
515	740	2	-1	0	-1	{	EMPTY	EMPTY
515	741	2	-1	0	-1	ps _ dec -> pu1 _ inv _ scan _ matrix = ( uword8 * ) gau1 _ impeg2 _ inv _ scan _ vertical ;	ps _ dec	EMPTY
515	742	2	-1	0	-1	}	EMPTY	EMPTY
515	743	2	-1	0	-1	else	EMPTY	EMPTY
515	744	2	-1	0	-1	{	EMPTY	EMPTY
515	745	2	-1	0	-1	ps _ dec -> pu1 _ inv _ scan _ matrix = ( uword8 * ) gau1 _ impeg2 _ inv _ scan _ zig _ zag ;	ps _ dec	EMPTY
515	746	2	-1	0	-1	}	EMPTY	EMPTY
515	747	3	-1	0	-1	}	EMPTY	EMPTY
515	761	1	0	0	-1	impeg2d _ error _ codes _ t impeg2d _ dec _ slice ( dec _ state _ t * ps _ dec )	impeg2d _ dec _ slice ps _ dec	EMPTY
515	762	2	-1	0	-1	{	EMPTY	EMPTY
515	763	2	-1	0	-1	stream _ t * ps _ stream ;	stream _ t	EMPTY
515	764	2	-1	0	-1	uword32 u4 _ slice _ vertical _ position ;	EMPTY	EMPTY
515	765	2	-1	0	-1	uword32 u4 _ slice _ vertical _ position _ extension ;	EMPTY	EMPTY
515	766	3	-1	0	-1	impeg2d _ error _ codes _ t e _ error ;	EMPTY	EMPTY
515	768	1	0	0	-1	ps _ stream = & ps _ dec -> s _ bit _ stream	ps _ dec	EMPTY
515	777	1	1	1	1	impeg2d _ bit _ stream _ flush ( ps _ stream , start _ code _ prefix _ len )	EMPTY	EMPTY
515	778	2	-1	0	-1	u4 _ slice _ vertical _ position = impeg2d _ bit _ stream _ get ( ps _ stream , 8 )	EMPTY	EMPTY
515	779	2	-1	0	-1	if ( u4 _ slice _ vertical _ position > 2800 )	EMPTY	EMPTY
515	780	2	-1	0	-1	{	EMPTY	EMPTY
515	781	2	-1	0	-1	u4 _ slice _ vertical _ position _ extension = impeg2d _ bit _ stream _ get ( ps _ stream , 3 ) ;	EMPTY	EMPTY
515	782	2	-1	0	-1	u4 _ slice _ vertical _ position += ( u4 _ slice _ vertical _ position _ extension << 7 ) ;	EMPTY	EMPTY
515	783	3	-1	0	-1	}	EMPTY	EMPTY
515	785	1	0	0	0	if ( ( u4 _ slice _ vertical _ position > ps _ dec -> u2 _ num _ vert _ mb ) ||	ps _ dec	EMPTY
515	786	2	-1	0	-1	( u4 _ slice _ vertical _ position == 0 ) )	EMPTY	EMPTY
515	787	2	-1	0	-1	{	EMPTY	EMPTY
515	788	2	-1	0	-1	return impeg2d _ invalid _ vert _ size ;	impeg2d _ invalid _ vert _ size	EMPTY
515	789	3	-1	0	-1	}	EMPTY	EMPTY
515	792	1	1	1	-1	u4 _ slice _ vertical _ position --	EMPTY	EMPTY
515	793	2	-1	0	-1	if ( ps _ dec -> u2 _ mb _ y != u4 _ slice _ vertical _ position )	ps _ dec	EMPTY
515	794	2	-1	0	-1	{	EMPTY	EMPTY
515	795	2	-1	0	-1	ps _ dec -> u2 _ mb _ y = u4 _ slice _ vertical _ position ;	ps _ dec	EMPTY
515	796	2	-1	0	-1	ps _ dec -> u2 _ mb _ x = 0 ;	ps _ dec	EMPTY
515	797	2	-1	0	-1	}	EMPTY	EMPTY
515	798	3	-1	0	-1	ps _ dec -> u2 _ first _ mb = 1	ps _ dec	EMPTY
515	803	1	1	1	-1	{	EMPTY	EMPTY
515	804	2	-1	0	-1	uword16 u2 _ quant _ scale _ code ;	EMPTY	EMPTY
515	805	2	-1	0	-1	u2 _ quant _ scale _ code = impeg2d _ bit _ stream _ get ( ps _ stream , 5 ) ;	EMPTY	EMPTY
515	806	2	-1	0	-1	ps _ dec -> u1 _ quant _ scale = ( ps _ dec -> u2 _ q _ scale _ type ) ?	ps _ dec ps _ dec	EMPTY
515	807	2	-1	0	-1	gau1 _ impeg2 _ non _ linear _ quant _ scale [ u2 _ quant _ scale _ code ] : ( u2 _ quant _ scale _ code << 1 ) ;	EMPTY	EMPTY
515	808	3	-1	0	-1	}	EMPTY	EMPTY
515	810	1	1	0	1	if ( impeg2d _ bit _ stream _ nxt ( ps _ stream  numconst ) == numconst )	EMPTY	EMPTY
515	811	2	-1	0	-1	{	EMPTY	EMPTY
515	812	2	-1	0	-1	impeg2d _ bit _ stream _ flush ( ps _ stream , 9 )	EMPTY	EMPTY
515	814	2	-1	1	-1	while ( impeg2d _ bit _ stream _ nxt ( ps _ stream , 1 ) == 1 &&	EMPTY	EMPTY
515	815	2	-1	0	-1	ps _ stream -> u4 _ offset < ps _ stream -> u4 _ max _ offset )	u4 _ offset u4 _ max _ offset	EMPTY
515	816	2	-1	0	-1	{	EMPTY	EMPTY
515	817	2	-1	0	-1	impeg2d _ bit _ stream _ flush ( ps _ stream , 9 ) ;	EMPTY	EMPTY
515	818	2	-1	0	-1	}	EMPTY	EMPTY
515	819	2	-1	0	-1	}	EMPTY	EMPTY
515	820	3	-1	0	-1	impeg2d _ bit _ stream _ get _ bit ( ps _ stream ) ;	EMPTY	EMPTY
515	824	1	1	1	-1	ps _ dec -> u2 _ def _ dc _ pred [ y _ luma ] = 128 << ps _ dec -> u2 _ intra _ dc _ precision	ps _ dec ps _ dec	EMPTY
515	825	2	-1	0	-1	ps _ dec -> u2 _ def _ dc _ pred [ u _ chroma ] = 128 << ps _ dec -> u2 _ intra _ dc _ precision	ps _ dec ps _ dec	EMPTY
515	826	3	-1	0	-1	ps _ dec -> u2 _ def _ dc _ pred [ v _ chroma ] = 128 << ps _ dec -> u2 _ intra _ dc _ precision	ps _ dec ps _ dec	EMPTY
515	835	1	1	1	-1	e _ error = ps _ dec -> pf _ decode _ slice ( ps _ dec )	ps _ dec ps _ dec	EMPTY
515	836	2	-1	0	-1	if ( ( impeg2d _ error _ codes _ t ) ivd _ error _ none != e _ error )	EMPTY	EMPTY
515	837	2	-1	0	-1	{	EMPTY	EMPTY
515	838	2	-1	0	-1	return e _ error ;	EMPTY	EMPTY
515	839	3	-1	0	-1	}	EMPTY	EMPTY
515	845	1	1	1	1	if ( ps _ dec -> u2 _ mb _ y < ps _ dec -> u2 _ num _ vert _ mb )	ps _ dec ps _ dec	EMPTY
515	846	3	-1	0	-1	impeg2d _ next _ start _ code ( ps _ dec )	impeg2d _ next _ start _ code ps _ dec	EMPTY
515	848	1	0	0	0	return ( impeg2d _ error _ codes _ t ) ivd _ error _ none	EMPTY	EMPTY
515	849	3	-1	0	-1	}	EMPTY	EMPTY
515	851	1	0	0	-1	void impeg2d _ dec _ pic _ data _ thread ( dec _ state _ t * ps _ dec )	ps _ dec	EMPTY
515	852	2	-1	0	-1	{	EMPTY	EMPTY
515	853	3	-1	0	-1	word32 i4 _ continue _ decode ;	EMPTY	EMPTY
515	855	1	0	0	0	word32 i4 _ cur _ row  temp ;	EMPTY	EMPTY
515	856	2	-1	0	-1	uword32 u4 _ bits _ read ;	EMPTY	EMPTY
515	857	2	-1	0	-1	word32 i4 _ dequeue _ job ;	EMPTY	EMPTY
515	858	3	-1	0	-1	impeg2d _ error _ codes _ t e _ error ;	EMPTY	EMPTY
515	860	1	0	0	-1	i4 _ cur _ row = ps _ dec -> u2 _ mb _ y + numconst ;	ps _ dec	EMPTY
515	862	1	0	0	-1	i4 _ continue _ decode = numconst ;	EMPTY	EMPTY
515	864	1	0	0	-1	i4 _ dequeue _ job = numconst ;	EMPTY	EMPTY
515	865	2	-1	0	-1	do	EMPTY	EMPTY
515	866	2	-1	0	-1	{	EMPTY	EMPTY
515	867	2	-1	0	-1	if ( i4 _ cur _ row > ps _ dec -> u2 _ num _ vert _ mb )	ps _ dec	EMPTY
515	868	2	-1	0	-1	{	EMPTY	EMPTY
515	869	2	-1	0	-1	i4 _ continue _ decode = numconst ;	EMPTY	EMPTY
515	870	2	-1	0	-1	break ;	EMPTY	EMPTY
515	871	3	-1	0	-1	}	EMPTY	EMPTY
515	873	1	0	0	-1	{	EMPTY	EMPTY
515	874	2	-1	0	-1	if ( ( ps _ dec -> i4 _ num _ cores > numconst ) && ( i4 _ dequeue _ job ) )	ps _ dec	EMPTY
515	875	2	-1	0	-1	{	EMPTY	EMPTY
515	876	2	-1	0	-1	job _ t s _ job ;	job _ t	EMPTY
515	877	2	-1	0	-1	iv _ api _ call _ status _ t e _ ret ;	EMPTY	EMPTY
515	878	3	-1	0	-1	uword8 * pu1 _ buf ;	EMPTY	EMPTY
515	880	1	0	0	-1	e _ ret = impeg2 _ jobq _ dequeue ( ps _ dec -> pv _ jobq  & s _ job  sizeof ( s _ job )  numconst  numconst ) ;	ps _ dec pv _ jobq	EMPTY
515	881	2	-1	0	-1	if ( e _ ret != iv _ success )	EMPTY	EMPTY
515	882	3	-1	0	-1	break ;	EMPTY	EMPTY
515	884	1	0	0	0	if ( cmd _ process == s _ job . i4 _ cmd )	i4 _ cmd	EMPTY
515	885	2	-1	0	-1	{	EMPTY	EMPTY
515	886	2	-1	0	-1	pu1 _ buf = ps _ dec -> pu1 _ inp _ bits _ buf + s _ job . i4 _ bistream _ ofst ;	ps _ dec pu1 _ inp _ bits _ buf i4 _ bistream _ ofst	EMPTY
515	887	2	-1	0	-1	impeg2d _ bit _ stream _ init ( & ( ps _ dec -> s _ bit _ stream )  pu1 _ buf	ps _ dec	EMPTY
515	888	2	-1	0	-1	( ps _ dec -> u4 _ num _ inp _ bytes - s _ job . i4 _ bistream _ ofst ) + numconst ) ;	ps _ dec u4 _ num _ inp _ bytes i4 _ bistream _ ofst	EMPTY
515	889	2	-1	0	-1	i4 _ cur _ row = s _ job . i2 _ start _ mb _ y ;	i2 _ start _ mb _ y	EMPTY
515	890	2	-1	0	-1	ps _ dec -> i4 _ start _ mb _ y = s _ job . i2 _ start _ mb _ y ;	ps _ dec i2 _ start _ mb _ y	EMPTY
515	891	2	-1	0	-1	ps _ dec -> i4 _ end _ mb _ y = s _ job . i2 _ end _ mb _ y ;	ps _ dec	EMPTY
515	892	2	-1	0	-1	ps _ dec -> u2 _ mb _ x = numconst ;	ps _ dec	EMPTY
515	893	2	-1	0	-1	ps _ dec -> u2 _ mb _ y = ps _ dec -> i4 _ start _ mb _ y ;	ps _ dec ps _ dec	EMPTY
515	894	3	-1	0	-1	ps _ dec -> u2 _ num _ mbs _ left = ( ps _ dec -> i4 _ end _ mb _ y - ps _ dec -> i4 _ start _ mb _ y ) * ps _ dec -> u2 _ num _ horiz _ mb ;	ps _ dec ps _ dec ps _ dec ps _ dec	EMPTY
515	896	1	0	0	-1	}	EMPTY	EMPTY
515	897	2	-1	0	-1	else	EMPTY	EMPTY
515	898	2	-1	0	-1	{	EMPTY	EMPTY
515	899	2	-1	0	-1	word32 start _ row ;	EMPTY	EMPTY
515	900	2	-1	0	-1	word32 num _ rows ;	EMPTY	EMPTY
515	901	2	-1	0	-1	start _ row = s _ job . i2 _ start _ mb _ y << numconst ;	i2 _ start _ mb _ y	EMPTY
515	902	2	-1	0	-1	num _ rows = min ( ( s _ job . i2 _ end _ mb _ y << numconst )  ps _ dec -> u2 _ vertical _ size ) ;	ps _ dec	EMPTY
515	903	3	-1	0	-1	num _ rows -= start _ row ;	EMPTY	EMPTY
515	905	1	0	0	0	if ( ps _ dec -> u4 _ deinterlace && ( numconst == ps _ dec -> u2 _ progressive _ frame ) )	ps _ dec u4 _ deinterlace ps _ dec	EMPTY
515	906	2	-1	0	-1	{	EMPTY	EMPTY
515	907	2	-1	0	-1	impeg2d _ deinterlace ( ps _ dec	ps _ dec	EMPTY
515	908	2	-1	0	-1	ps _ dec -> ps _ disp _ pic	ps _ dec	EMPTY
515	909	2	-1	0	-1	ps _ dec -> ps _ disp _ frm _ buf	ps _ dec	EMPTY
515	910	2	-1	0	-1	start _ row	EMPTY	EMPTY
515	911	3	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
515	913	1	0	0	-1	}	EMPTY	EMPTY
515	914	2	-1	0	-1	else	EMPTY	EMPTY
515	915	2	-1	0	-1	{	EMPTY	EMPTY
515	916	2	-1	0	-1	impeg2d _ format _ convert ( ps _ dec  ps _ dec -> ps _ disp _ pic	ps _ dec ps _ dec	EMPTY
515	917	2	-1	0	-1	ps _ dec -> ps _ disp _ frm _ buf	ps _ dec	EMPTY
515	918	2	-1	0	-1	start _ row  num _ rows ) ;	EMPTY	EMPTY
515	919	2	-1	0	-1	}	EMPTY	EMPTY
515	920	3	-1	0	-1	break ;	EMPTY	EMPTY
515	922	1	0	0	-1	}	EMPTY	EMPTY
515	924	1	0	0	-1	}	EMPTY	EMPTY
515	925	3	-1	0	-1	e _ error = impeg2d _ dec _ slice ( ps _ dec ) ;	impeg2d _ dec _ slice ps _ dec	EMPTY
515	927	1	0	0	0	if ( ( impeg2d _ error _ codes _ t ) ivd _ error _ none != e _ error )	EMPTY	EMPTY
515	928	2	-1	0	-1	{	EMPTY	EMPTY
515	929	2	-1	0	-1	impeg2d _ next _ start _ code ( ps _ dec ) ;	impeg2d _ next _ start _ code ps _ dec	EMPTY
515	930	2	-1	0	-1	}	EMPTY	EMPTY
515	931	3	-1	0	-1	}	EMPTY	EMPTY
515	934	1	1	1	1	while ( numconst )	EMPTY	EMPTY
515	935	2	-1	0	-1	{	EMPTY	EMPTY
515	937	2	-1	1	-1	u4 _ bits _ read = impeg2d _ bit _ stream _ nxt ( & ps _ dec -> s _ bit _ stream , start _ code _ len )	ps _ dec	EMPTY
515	938	2	-1	0	-1	temp = u4 _ bits _ read & 0xff	EMPTY	EMPTY
515	939	3	-1	0	-1	i4 _ continue _ decode = ( ( ( u4 _ bits _ read >> 8 ) == 0x01 ) && ( temp ) && ( temp <= 0xaf ) )	EMPTY	EMPTY
515	941	1	0	0	0	if ( 1 == ps _ dec -> i4 _ num _ cores && 0 == ps _ dec -> u2 _ num _ mbs _ left )	ps _ dec ps _ dec	EMPTY
515	942	2	-1	0	-1	{	EMPTY	EMPTY
515	943	2	-1	0	-1	i4 _ continue _ decode = 0 ;	EMPTY	EMPTY
515	944	2	-1	0	-1	android _ errorwritelog ( 0x534e4554 ,  " 26070014 "  ) ;	EMPTY	EMPTY
515	945	3	-1	0	-1	}	EMPTY	EMPTY
515	947	1	1	0	1	if ( i4 _ continue _ decode )	EMPTY	EMPTY
515	948	2	-1	0	-1	{	EMPTY	EMPTY
515	950	2	-1	1	-1	if ( ( temp - 1 ) == i4 _ cur _ row )	EMPTY	EMPTY
515	951	2	-1	0	-1	{	EMPTY	EMPTY
515	952	2	-1	0	-1	i4 _ dequeue _ job = 0 ;	EMPTY	EMPTY
515	953	2	-1	0	-1	break ;	EMPTY	EMPTY
515	954	3	-1	0	-1	}	EMPTY	EMPTY
515	956	1	0	0	0	if ( temp < ps _ dec -> i4 _ end _ mb _ y )	ps _ dec	EMPTY
515	957	2	-1	0	-1	{	EMPTY	EMPTY
515	958	2	-1	0	-1	i4 _ cur _ row = ps _ dec -> u2 _ mb _ y ;	ps _ dec	EMPTY
515	959	2	-1	0	-1	}	EMPTY	EMPTY
515	960	2	-1	0	-1	else	EMPTY	EMPTY
515	961	2	-1	0	-1	{	EMPTY	EMPTY
515	962	2	-1	0	-1	i4 _ dequeue _ job = 1 ;	EMPTY	EMPTY
515	963	2	-1	0	-1	}	EMPTY	EMPTY
515	964	3	-1	0	-1	break	EMPTY	EMPTY
515	966	1	0	0	-1	}	EMPTY	EMPTY
515	967	2	-1	0	-1	else	EMPTY	EMPTY
515	968	2	-1	0	-1	break ;	EMPTY	EMPTY
515	969	3	-1	0	-1	}	EMPTY	EMPTY
515	971	1	0	0	-1	}	EMPTY	EMPTY
515	972	2	-1	0	-1	if ( ps _ dec -> i4 _ num _ cores > numconst )	ps _ dec	EMPTY
515	973	2	-1	0	-1	{	EMPTY	EMPTY
515	974	2	-1	0	-1	while ( numconst )	EMPTY	EMPTY
515	975	2	-1	0	-1	{	EMPTY	EMPTY
515	976	2	-1	0	-1	job _ t s _ job ;	job _ t	EMPTY
515	977	3	-1	0	-1	iv _ api _ call _ status _ t e _ ret ;	EMPTY	EMPTY
515	979	1	0	0	-1	e _ ret = impeg2 _ jobq _ dequeue ( ps _ dec -> pv _ jobq  & s _ job  sizeof ( s _ job )  numconst  numconst ) ;	ps _ dec pv _ jobq	EMPTY
515	980	2	-1	0	-1	if ( e _ ret != iv _ success )	EMPTY	EMPTY
515	981	2	-1	0	-1	break ;	EMPTY	EMPTY
515	982	2	-1	0	-1	if ( cmd _ fmtconv == s _ job . i4 _ cmd )	i4 _ cmd	EMPTY
515	983	2	-1	0	-1	{	EMPTY	EMPTY
515	984	2	-1	0	-1	word32 start _ row ;	EMPTY	EMPTY
515	985	2	-1	0	-1	word32 num _ rows ;	EMPTY	EMPTY
515	986	2	-1	0	-1	start _ row = s _ job . i2 _ start _ mb _ y << numconst ;	i2 _ start _ mb _ y	EMPTY
515	987	2	-1	0	-1	num _ rows = min ( ( s _ job . i2 _ end _ mb _ y << numconst )  ps _ dec -> u2 _ vertical _ size ) ;	ps _ dec	EMPTY
515	988	2	-1	0	-1	num _ rows -= start _ row ;	EMPTY	EMPTY
515	989	2	-1	0	-1	if ( ps _ dec -> u4 _ deinterlace && ( numconst == ps _ dec -> u2 _ progressive _ frame ) )	ps _ dec u4 _ deinterlace ps _ dec	EMPTY
515	990	2	-1	0	-1	{	EMPTY	EMPTY
515	991	2	-1	0	-1	impeg2d _ deinterlace ( ps _ dec	ps _ dec	EMPTY
515	992	2	-1	0	-1	ps _ dec -> ps _ disp _ pic	ps _ dec	EMPTY
515	993	2	-1	0	-1	ps _ dec -> ps _ disp _ frm _ buf	ps _ dec	EMPTY
515	994	2	-1	0	-1	start _ row	EMPTY	EMPTY
515	995	3	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
515	997	1	0	0	-1	}	EMPTY	EMPTY
515	998	2	-1	0	-1	else	EMPTY	EMPTY
515	999	2	-1	0	-1	{	EMPTY	EMPTY
515	1000	2	-1	0	-1	impeg2d _ format _ convert ( ps _ dec	ps _ dec	EMPTY
515	1001	2	-1	0	-1	ps _ dec -> ps _ disp _ pic	ps _ dec	EMPTY
515	1002	2	-1	0	-1	ps _ dec -> ps _ disp _ frm _ buf	ps _ dec	EMPTY
515	1003	2	-1	0	-1	start _ row	EMPTY	EMPTY
515	1004	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
515	1005	2	-1	0	-1	}	EMPTY	EMPTY
515	1006	2	-1	0	-1	}	EMPTY	EMPTY
515	1007	2	-1	0	-1	}	EMPTY	EMPTY
515	1008	2	-1	0	-1	}	EMPTY	EMPTY
515	1009	2	-1	0	-1	else	EMPTY	EMPTY
515	1010	2	-1	0	-1	{	EMPTY	EMPTY
515	1011	2	-1	0	-1	if ( ( null != ps _ dec -> ps _ disp _ pic ) && ( ( numconst == ps _ dec -> u4 _ share _ disp _ buf ) || ( iv _ yuv _ 420p != ps _ dec -> i4 _ chromaformat ) ) )	ps _ dec ps _ dec u4 _ share _ disp _ buf ps _ dec i4 _ chromaformat	EMPTY
515	1012	2	-1	0	-1	{	EMPTY	EMPTY
515	1013	2	-1	0	-1	if ( ps _ dec -> u4 _ deinterlace && ( numconst == ps _ dec -> u2 _ progressive _ frame ) )	ps _ dec u4 _ deinterlace ps _ dec	EMPTY
515	1014	2	-1	0	-1	{	EMPTY	EMPTY
515	1015	2	-1	0	-1	impeg2d _ deinterlace ( ps _ dec	ps _ dec	EMPTY
515	1016	2	-1	0	-1	ps _ dec -> ps _ disp _ pic	ps _ dec	EMPTY
515	1017	2	-1	0	-1	ps _ dec -> ps _ disp _ frm _ buf	ps _ dec	EMPTY
515	1018	2	-1	0	-1	numconst	EMPTY	EMPTY
515	1019	3	-1	0	-1	ps _ dec -> u2 _ vertical _ size ) ;	ps _ dec	EMPTY
515	1021	1	0	0	-1	}	EMPTY	EMPTY
515	1022	2	-1	0	-1	else	EMPTY	EMPTY
515	1023	2	-1	0	-1	{	EMPTY	EMPTY
515	1024	2	-1	0	-1	impeg2d _ format _ convert ( ps _ dec  ps _ dec -> ps _ disp _ pic	ps _ dec ps _ dec	EMPTY
515	1025	2	-1	0	-1	ps _ dec -> ps _ disp _ frm _ buf	ps _ dec	EMPTY
515	1026	2	-1	0	-1	numconst  ps _ dec -> u2 _ vertical _ size ) ;	ps _ dec	EMPTY
515	1027	2	-1	0	-1	}	EMPTY	EMPTY
515	1028	2	-1	0	-1	}	EMPTY	EMPTY
515	1029	2	-1	0	-1	}	EMPTY	EMPTY
515	1030	3	-1	0	-1	}	EMPTY	EMPTY
515	1032	1	0	0	-1	static word32 impeg2d _ init _ thread _ dec _ ctxt ( dec _ state _ t * ps _ dec	ps _ dec	EMPTY
515	1033	2	-1	0	-1	dec _ state _ t * ps _ dec _ thd	EMPTY	EMPTY
515	1034	2	-1	0	-1	word32 i4 _ min _ mb _ y )	EMPTY	EMPTY
515	1035	2	-1	0	-1	{	EMPTY	EMPTY
515	1036	2	-1	0	-1	unused ( i4 _ min _ mb _ y ) ;	EMPTY	EMPTY
515	1037	2	-1	0	-1	ps _ dec _ thd -> i4 _ start _ mb _ y = numconst ;	EMPTY	EMPTY
515	1038	2	-1	0	-1	ps _ dec _ thd -> i4 _ end _ mb _ y = ps _ dec -> u2 _ num _ vert _ mb ;	ps _ dec	EMPTY
515	1039	2	-1	0	-1	ps _ dec _ thd -> u2 _ mb _ x = numconst ;	EMPTY	EMPTY
515	1040	2	-1	0	-1	ps _ dec _ thd -> u2 _ mb _ y = numconst ;	EMPTY	EMPTY
515	1041	2	-1	0	-1	ps _ dec _ thd -> u2 _ is _ mpeg2 = ps _ dec -> u2 _ is _ mpeg2 ;	u2 _ is _ mpeg2 ps _ dec u2 _ is _ mpeg2	EMPTY
515	1042	2	-1	0	-1	ps _ dec _ thd -> u2 _ frame _ width = ps _ dec -> u2 _ frame _ width ;	u2 _ frame _ width ps _ dec u2 _ frame _ width	EMPTY
515	1043	2	-1	0	-1	ps _ dec _ thd -> u2 _ frame _ height = ps _ dec -> u2 _ frame _ height ;	u2 _ frame _ height ps _ dec u2 _ frame _ height	EMPTY
515	1044	2	-1	0	-1	ps _ dec _ thd -> u2 _ picture _ width = ps _ dec -> u2 _ picture _ width ;	u2 _ picture _ width ps _ dec u2 _ picture _ width	EMPTY
515	1045	2	-1	0	-1	ps _ dec _ thd -> u2 _ horizontal _ size = ps _ dec -> u2 _ horizontal _ size ;	ps _ dec	EMPTY
515	1046	2	-1	0	-1	ps _ dec _ thd -> u2 _ vertical _ size = ps _ dec -> u2 _ vertical _ size ;	ps _ dec	EMPTY
515	1047	2	-1	0	-1	ps _ dec _ thd -> u2 _ create _ max _ width = ps _ dec -> u2 _ create _ max _ width ;	ps _ dec	EMPTY
515	1048	2	-1	0	-1	ps _ dec _ thd -> u2 _ create _ max _ height = ps _ dec -> u2 _ create _ max _ height ;	ps _ dec	EMPTY
515	1049	2	-1	0	-1	ps _ dec _ thd -> u2 _ header _ done = ps _ dec -> u2 _ header _ done ;	ps _ dec	EMPTY
515	1050	3	-1	0	-1	ps _ dec _ thd -> u2 _ decode _ header = ps _ dec -> u2 _ decode _ header ;	ps _ dec	EMPTY
515	1052	1	0	0	-1	ps _ dec _ thd -> u2 _ num _ horiz _ mb = ps _ dec -> u2 _ num _ horiz _ mb ;	ps _ dec	EMPTY
515	1053	2	-1	0	-1	ps _ dec _ thd -> u2 _ num _ vert _ mb = ps _ dec -> u2 _ num _ vert _ mb ;	ps _ dec	EMPTY
515	1054	3	-1	0	-1	ps _ dec _ thd -> u2 _ num _ flds _ decoded = ps _ dec -> u2 _ num _ flds _ decoded ;	ps _ dec	EMPTY
515	1056	1	0	0	-1	ps _ dec _ thd -> u4 _ frm _ buf _ stride = ps _ dec -> u4 _ frm _ buf _ stride ;	u4 _ frm _ buf _ stride ps _ dec u4 _ frm _ buf _ stride	EMPTY
515	1058	1	0	0	-1	ps _ dec _ thd -> u2 _ field _ dct = ps _ dec -> u2 _ field _ dct ;	ps _ dec	EMPTY
515	1059	3	-1	0	-1	ps _ dec _ thd -> u2 _ read _ dct _ type = ps _ dec -> u2 _ read _ dct _ type ;	ps _ dec	EMPTY
515	1061	1	0	0	-1	ps _ dec _ thd -> u2 _ read _ motion _ type = ps _ dec -> u2 _ read _ motion _ type ;	ps _ dec	EMPTY
515	1062	3	-1	0	-1	ps _ dec _ thd -> u2 _ motion _ type = ps _ dec -> u2 _ motion _ type ;	ps _ dec	EMPTY
515	1064	1	0	0	-1	ps _ dec _ thd -> pu2 _ mb _ type = ps _ dec -> pu2 _ mb _ type ;	ps _ dec	EMPTY
515	1065	2	-1	0	-1	ps _ dec _ thd -> u2 _ fld _ pic = ps _ dec -> u2 _ fld _ pic ;	ps _ dec	EMPTY
515	1066	3	-1	0	-1	ps _ dec _ thd -> u2 _ frm _ pic = ps _ dec -> u2 _ frm _ pic ;	ps _ dec	EMPTY
515	1068	1	0	0	-1	ps _ dec _ thd -> u2 _ fld _ parity = ps _ dec -> u2 _ fld _ parity ;	ps _ dec	EMPTY
515	1070	1	0	0	-1	ps _ dec _ thd -> au2 _ fcode _ data [ numconst ] = ps _ dec -> au2 _ fcode _ data [ numconst ] ;	ps _ dec	EMPTY
515	1071	3	-1	0	-1	ps _ dec _ thd -> au2 _ fcode _ data [ numconst ] = ps _ dec -> au2 _ fcode _ data [ numconst ] ;	ps _ dec	EMPTY
515	1073	1	0	0	-1	ps _ dec _ thd -> u1 _ quant _ scale = ps _ dec -> u1 _ quant _ scale ;	ps _ dec	EMPTY
515	1075	1	0	0	-1	ps _ dec _ thd -> u2 _ num _ mbs _ left = ps _ dec -> u2 _ num _ mbs _ left ;	ps _ dec	EMPTY
515	1076	2	-1	0	-1	ps _ dec _ thd -> u2 _ first _ mb = ps _ dec -> u2 _ first _ mb ;	ps _ dec	EMPTY
515	1077	3	-1	0	-1	ps _ dec _ thd -> u2 _ num _ skipped _ mbs = ps _ dec -> u2 _ num _ skipped _ mbs ;	ps _ dec	EMPTY
515	1079	1	0	0	0	memcpy ( & ps _ dec _ thd -> s _ cur _ frm _ buf  & ps _ dec -> s _ cur _ frm _ buf  sizeof ( yuv _ buf _ t ) ) ;	ps _ dec	memcpy
515	1080	2	-1	0	-1	memcpy ( & ps _ dec _ thd -> as _ recent _ fld [ numconst ] [ numconst ]  & ps _ dec -> as _ recent _ fld [ numconst ] [ numconst ]  sizeof ( yuv _ buf _ t ) ) ;	as _ recent _ fld ps _ dec as _ recent _ fld	memcpy
515	1081	2	-1	0	-1	memcpy ( & ps _ dec _ thd -> as _ recent _ fld [ numconst ] [ numconst ]  & ps _ dec -> as _ recent _ fld [ numconst ] [ numconst ]  sizeof ( yuv _ buf _ t ) ) ;	as _ recent _ fld ps _ dec as _ recent _ fld	memcpy
515	1082	2	-1	0	-1	memcpy ( & ps _ dec _ thd -> as _ recent _ fld [ numconst ] [ numconst ]  & ps _ dec -> as _ recent _ fld [ numconst ] [ numconst ]  sizeof ( yuv _ buf _ t ) ) ;	as _ recent _ fld ps _ dec as _ recent _ fld	memcpy
515	1083	2	-1	0	-1	memcpy ( & ps _ dec _ thd -> as _ recent _ fld [ numconst ] [ numconst ]  & ps _ dec -> as _ recent _ fld [ numconst ] [ numconst ]  sizeof ( yuv _ buf _ t ) ) ;	as _ recent _ fld ps _ dec as _ recent _ fld	memcpy
515	1084	3	-1	0	-1	memcpy ( & ps _ dec _ thd -> as _ ref _ buf  & ps _ dec -> as _ ref _ buf  sizeof ( yuv _ buf _ t ) * numconst * numconst ) ;	ps _ dec	memcpy
515	1087	1	0	0	-1	ps _ dec _ thd -> pf _ decode _ slice = ps _ dec -> pf _ decode _ slice ;	ps _ dec	EMPTY
515	1089	1	0	0	-1	ps _ dec _ thd -> pf _ vld _ inv _ quant = ps _ dec -> pf _ vld _ inv _ quant ;	ps _ dec	EMPTY
515	1091	1	0	0	0	memcpy ( ps _ dec _ thd -> pf _ idct _ recon  ps _ dec -> pf _ idct _ recon  sizeof ( ps _ dec -> pf _ idct _ recon ) ) ;	ps _ dec ps _ dec	memcpy
515	1093	1	0	0	0	memcpy ( ps _ dec _ thd -> pf _ mc  ps _ dec -> pf _ mc  sizeof ( ps _ dec -> pf _ mc ) ) ;	ps _ dec ps _ dec	memcpy
515	1094	2	-1	0	-1	ps _ dec _ thd -> pf _ interpolate = ps _ dec -> pf _ interpolate ;	ps _ dec	EMPTY
515	1095	2	-1	0	-1	ps _ dec _ thd -> pf _ copy _ mb = ps _ dec -> pf _ copy _ mb ;	ps _ dec	EMPTY
515	1096	2	-1	0	-1	ps _ dec _ thd -> pf _ fullx _ halfy _ 8x8 = ps _ dec -> pf _ fullx _ halfy _ 8x8 ;	ps _ dec	EMPTY
515	1097	2	-1	0	-1	ps _ dec _ thd -> pf _ halfx _ fully _ 8x8 = ps _ dec -> pf _ halfx _ fully _ 8x8 ;	ps _ dec	EMPTY
515	1098	2	-1	0	-1	ps _ dec _ thd -> pf _ halfx _ halfy _ 8x8 = ps _ dec -> pf _ halfx _ halfy _ 8x8 ;	ps _ dec	EMPTY
515	1099	3	-1	0	-1	ps _ dec _ thd -> pf _ fullx _ fully _ 8x8 = ps _ dec -> pf _ fullx _ fully _ 8x8 ;	ps _ dec	EMPTY
515	1101	1	0	0	-1	ps _ dec _ thd -> pf _ memset _ 8bit _ 8x8 _ block = ps _ dec -> pf _ memset _ 8bit _ 8x8 _ block ;	ps _ dec	EMPTY
515	1102	2	-1	0	-1	ps _ dec _ thd -> pf _ memset _ 16bit _ 8x8 _ linear _ block = ps _ dec -> pf _ memset _ 16bit _ 8x8 _ linear _ block ;	ps _ dec	EMPTY
515	1103	2	-1	0	-1	ps _ dec _ thd -> pf _ copy _ yuv420p _ buf = ps _ dec -> pf _ copy _ yuv420p _ buf ;	ps _ dec	EMPTY
515	1104	2	-1	0	-1	ps _ dec _ thd -> pf _ fmt _ conv _ yuv420p _ to _ yuv422ile = ps _ dec -> pf _ fmt _ conv _ yuv420p _ to _ yuv422ile ;	ps _ dec	EMPTY
515	1105	2	-1	0	-1	ps _ dec _ thd -> pf _ fmt _ conv _ yuv420p _ to _ yuv420sp _ uv = ps _ dec -> pf _ fmt _ conv _ yuv420p _ to _ yuv420sp _ uv ;	ps _ dec	EMPTY
515	1106	3	-1	0	-1	ps _ dec _ thd -> pf _ fmt _ conv _ yuv420p _ to _ yuv420sp _ vu = ps _ dec -> pf _ fmt _ conv _ yuv420p _ to _ yuv420sp _ vu ;	ps _ dec	EMPTY
515	1109	1	0	0	0	memcpy ( ps _ dec _ thd -> au1 _ intra _ quant _ matrix  ps _ dec -> au1 _ intra _ quant _ matrix  num _ pels _ in _ block * sizeof ( uword8 ) ) ;	ps _ dec	memcpy
515	1110	2	-1	0	-1	memcpy ( ps _ dec _ thd -> au1 _ inter _ quant _ matrix  ps _ dec -> au1 _ inter _ quant _ matrix  num _ pels _ in _ block * sizeof ( uword8 ) ) ;	ps _ dec	memcpy
515	1111	3	-1	0	-1	ps _ dec _ thd -> pu1 _ inv _ scan _ matrix = ps _ dec -> pu1 _ inv _ scan _ matrix ;	ps _ dec	EMPTY
515	1114	1	0	0	-1	ps _ dec _ thd -> u2 _ progressive _ sequence = ps _ dec -> u2 _ progressive _ sequence ;	ps _ dec	EMPTY
515	1115	2	-1	0	-1	ps _ dec _ thd -> e _ pic _ type = ps _ dec -> e _ pic _ type ;	e _ pic _ type ps _ dec e _ pic _ type	EMPTY
515	1116	2	-1	0	-1	ps _ dec _ thd -> u2 _ full _ pel _ forw _ vector = ps _ dec -> u2 _ full _ pel _ forw _ vector ;	ps _ dec	EMPTY
515	1117	2	-1	0	-1	ps _ dec _ thd -> u2 _ forw _ f _ code = ps _ dec -> u2 _ forw _ f _ code ;	ps _ dec	EMPTY
515	1118	2	-1	0	-1	ps _ dec _ thd -> u2 _ full _ pel _ back _ vector = ps _ dec -> u2 _ full _ pel _ back _ vector ;	ps _ dec	EMPTY
515	1119	3	-1	0	-1	ps _ dec _ thd -> u2 _ back _ f _ code = ps _ dec -> u2 _ back _ f _ code ;	ps _ dec	EMPTY
515	1121	1	0	0	0	memcpy ( ps _ dec _ thd -> ai2 _ mv  ps _ dec -> ai2 _ mv  ( numconst * numconst * numconst ) * sizeof ( word16 ) ) ;	ai2 _ mv ps _ dec ai2 _ mv	memcpy
515	1122	2	-1	0	-1	memcpy ( ps _ dec _ thd -> au2 _ f _ code  ps _ dec -> au2 _ f _ code  ( numconst * numconst ) * sizeof ( uword16 ) ) ;	au2 _ f _ code ps _ dec au2 _ f _ code	memcpy
515	1123	2	-1	0	-1	ps _ dec _ thd -> u2 _ intra _ dc _ precision = ps _ dec -> u2 _ intra _ dc _ precision ;	ps _ dec	EMPTY
515	1124	2	-1	0	-1	ps _ dec _ thd -> u2 _ picture _ structure = ps _ dec -> u2 _ picture _ structure ;	ps _ dec	EMPTY
515	1125	2	-1	0	-1	ps _ dec _ thd -> u2 _ top _ field _ first = ps _ dec -> u2 _ top _ field _ first ;	ps _ dec	EMPTY
515	1126	2	-1	0	-1	ps _ dec _ thd -> u2 _ frame _ pred _ frame _ dct = ps _ dec -> u2 _ frame _ pred _ frame _ dct ;	ps _ dec	EMPTY
515	1127	2	-1	0	-1	ps _ dec _ thd -> u2 _ concealment _ motion _ vectors = ps _ dec -> u2 _ concealment _ motion _ vectors ;	ps _ dec	EMPTY
515	1128	2	-1	0	-1	ps _ dec _ thd -> u2 _ q _ scale _ type = ps _ dec -> u2 _ q _ scale _ type ;	ps _ dec	EMPTY
515	1129	2	-1	0	-1	ps _ dec _ thd -> u2 _ intra _ vlc _ format = ps _ dec -> u2 _ intra _ vlc _ format ;	ps _ dec	EMPTY
515	1130	2	-1	0	-1	ps _ dec _ thd -> u2 _ alternate _ scan = ps _ dec -> u2 _ alternate _ scan ;	ps _ dec	EMPTY
515	1131	2	-1	0	-1	ps _ dec _ thd -> u2 _ repeat _ first _ field = ps _ dec -> u2 _ repeat _ first _ field ;	ps _ dec	EMPTY
515	1132	2	-1	0	-1	ps _ dec _ thd -> u2 _ progressive _ frame = ps _ dec -> u2 _ progressive _ frame ;	ps _ dec	EMPTY
515	1133	2	-1	0	-1	ps _ dec _ thd -> pu1 _ inp _ bits _ buf = ps _ dec -> pu1 _ inp _ bits _ buf ;	pu1 _ inp _ bits _ buf ps _ dec pu1 _ inp _ bits _ buf	EMPTY
515	1134	2	-1	0	-1	ps _ dec _ thd -> u4 _ num _ inp _ bytes = ps _ dec -> u4 _ num _ inp _ bytes ;	u4 _ num _ inp _ bytes ps _ dec u4 _ num _ inp _ bytes	EMPTY
515	1135	2	-1	0	-1	ps _ dec _ thd -> pv _ jobq = ps _ dec -> pv _ jobq ;	pv _ jobq ps _ dec pv _ jobq	EMPTY
515	1136	2	-1	0	-1	ps _ dec _ thd -> pv _ jobq _ buf = ps _ dec -> pv _ jobq _ buf ;	pv _ jobq _ buf ps _ dec pv _ jobq _ buf	EMPTY
515	1137	3	-1	0	-1	ps _ dec _ thd -> i4 _ jobq _ buf _ size = ps _ dec -> i4 _ jobq _ buf _ size ;	i4 _ jobq _ buf _ size ps _ dec i4 _ jobq _ buf _ size	EMPTY
515	1140	1	0	0	-1	ps _ dec _ thd -> u2 _ frame _ rate _ code = ps _ dec -> u2 _ frame _ rate _ code ;	u2 _ frame _ rate _ code ps _ dec u2 _ frame _ rate _ code	EMPTY
515	1141	2	-1	0	-1	ps _ dec _ thd -> u2 _ frame _ rate _ extension _ n = ps _ dec -> u2 _ frame _ rate _ extension _ n ;	ps _ dec	EMPTY
515	1142	2	-1	0	-1	ps _ dec _ thd -> u2 _ frame _ rate _ extension _ d = ps _ dec -> u2 _ frame _ rate _ extension _ d ;	ps _ dec	EMPTY
515	1143	2	-1	0	-1	ps _ dec _ thd -> u2 _ frameperiod = ps _ dec -> u2 _ frameperiod ;	u2 _ frameperiod ps _ dec u2 _ frameperiod	EMPTY
515	1144	2	-1	0	-1	ps _ dec _ thd -> u2 _ display _ horizontal _ size = ps _ dec -> u2 _ display _ horizontal _ size ;	u2 _ display _ horizontal _ size ps _ dec u2 _ display _ horizontal _ size	EMPTY
515	1145	2	-1	0	-1	ps _ dec _ thd -> u2 _ display _ vertical _ size = ps _ dec -> u2 _ display _ vertical _ size ;	u2 _ display _ vertical _ size ps _ dec u2 _ display _ vertical _ size	EMPTY
515	1146	3	-1	0	-1	ps _ dec _ thd -> u2 _ aspect _ ratio _ info = ps _ dec -> u2 _ aspect _ ratio _ info ;	ps _ dec	EMPTY
515	1148	1	0	0	-1	ps _ dec _ thd -> ps _ func _ bi _ direct = ps _ dec -> ps _ func _ bi _ direct ;	ps _ func _ bi _ direct ps _ dec ps _ func _ bi _ direct	EMPTY
515	1149	2	-1	0	-1	ps _ dec _ thd -> ps _ func _ forw _ or _ back = ps _ dec -> ps _ func _ forw _ or _ back ;	ps _ func _ forw _ or _ back ps _ dec ps _ func _ forw _ or _ back	EMPTY
515	1150	2	-1	0	-1	ps _ dec _ thd -> pv _ deinterlacer _ ctxt = ps _ dec -> pv _ deinterlacer _ ctxt ;	pv _ deinterlacer _ ctxt ps _ dec pv _ deinterlacer _ ctxt	EMPTY
515	1151	3	-1	0	-1	ps _ dec _ thd -> ps _ deint _ pic = ps _ dec -> ps _ deint _ pic ;	ps _ deint _ pic ps _ dec ps _ deint _ pic	EMPTY
515	1153	1	0	0	0	return numconst ;	EMPTY	EMPTY
515	1154	3	-1	0	-1	}	EMPTY	EMPTY
515	1157	1	0	0	-1	word32 impeg2d _ get _ slice _ pos ( dec _ state _ multi _ core _ t * ps _ dec _ state _ multi _ core )	EMPTY	EMPTY
515	1158	2	-1	0	-1	{	EMPTY	EMPTY
515	1159	2	-1	0	-1	word32 u4 _ bits ;	EMPTY	EMPTY
515	1160	3	-1	0	-1	word32 i4 _ row ;	EMPTY	EMPTY
515	1163	1	0	0	0	dec _ state _ t * ps _ dec = ps _ dec _ state _ multi _ core -> ps _ dec _ state [ numconst ] ;	ps _ dec ps _ dec _ state	EMPTY
515	1164	2	-1	0	-1	word32 i4 _ prev _ row ;	EMPTY	EMPTY
515	1165	2	-1	0	-1	stream _ t s _ bitstrm ;	stream _ t	EMPTY
515	1166	2	-1	0	-1	word32 i4 _ start _ row ;	EMPTY	EMPTY
515	1167	2	-1	0	-1	word32 i4 _ slice _ bistream _ ofst ;	EMPTY	EMPTY
515	1168	2	-1	0	-1	word32 i ;	EMPTY	EMPTY
515	1169	2	-1	0	-1	s _ bitstrm = ps _ dec -> s _ bit _ stream ;	ps _ dec	EMPTY
515	1170	3	-1	0	-1	i4 _ prev _ row = - numconst ;	EMPTY	EMPTY
515	1172	1	0	0	-1	ps _ dec _ state _ multi _ core -> ps _ dec _ state [ numconst ] -> i4 _ start _ mb _ y = numconst ;	ps _ dec _ state	EMPTY
515	1173	2	-1	0	-1	ps _ dec _ state _ multi _ core -> ps _ dec _ state [ numconst ] -> i4 _ start _ mb _ y = - numconst ;	ps _ dec _ state	EMPTY
515	1174	2	-1	0	-1	ps _ dec _ state _ multi _ core -> ps _ dec _ state [ numconst ] -> i4 _ start _ mb _ y = - numconst ;	ps _ dec _ state	EMPTY
515	1175	3	-1	0	-1	ps _ dec _ state _ multi _ core -> ps _ dec _ state [ numconst ] -> i4 _ start _ mb _ y = - numconst ;	ps _ dec _ state	EMPTY
515	1177	1	0	0	-1	ps _ dec _ state _ multi _ core -> ps _ dec _ state [ numconst ] -> i4 _ end _ mb _ y = ps _ dec -> u2 _ num _ vert _ mb ;	ps _ dec _ state ps _ dec	EMPTY
515	1178	2	-1	0	-1	ps _ dec _ state _ multi _ core -> ps _ dec _ state [ numconst ] -> i4 _ end _ mb _ y = - numconst ;	ps _ dec _ state	EMPTY
515	1179	2	-1	0	-1	ps _ dec _ state _ multi _ core -> ps _ dec _ state [ numconst ] -> i4 _ end _ mb _ y = - numconst ;	ps _ dec _ state	EMPTY
515	1180	3	-1	0	-1	ps _ dec _ state _ multi _ core -> ps _ dec _ state [ numconst ] -> i4 _ end _ mb _ y = - numconst ;	ps _ dec _ state	EMPTY
515	1182	1	1	0	1	if ( ps _ dec -> i4 _ num _ cores == numconst )	ps _ dec	EMPTY
515	1183	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
515	1185	3	-1	1	-1	impeg2 _ jobq _ reset ( ( jobq _ t * ) ps _ dec -> pv _ jobq )	ps _ dec pv _ jobq	EMPTY
515	1187	1	0	0	-1	i4 _ start _ row = - 1	EMPTY	EMPTY
515	1188	2	-1	0	-1	i4 _ slice _ bistream _ ofst = 0	EMPTY	EMPTY
515	1189	2	-1	0	-1	while ( numconst )	EMPTY	EMPTY
515	1190	2	-1	0	-1	{	EMPTY	EMPTY
515	1191	3	-1	0	-1	word32 i4 _ is _ slice ;	EMPTY	EMPTY
515	1193	1	0	0	0	if ( s _ bitstrm . u4 _ offset + start _ code _ len >= s _ bitstrm . u4 _ max _ offset )	u4 _ offset u4 _ max _ offset	EMPTY
515	1194	2	-1	0	-1	{	EMPTY	EMPTY
515	1195	2	-1	0	-1	break ;	EMPTY	EMPTY
515	1196	2	-1	0	-1	}	EMPTY	EMPTY
515	1197	3	-1	0	-1	u4 _ bits = impeg2d _ bit _ stream _ nxt ( & s _ bitstrm , start _ code _ len )	EMPTY	EMPTY
515	1199	1	0	0	-1	i4 _ row = u4 _ bits & 0xff	EMPTY	EMPTY
515	1202	1	1	1	-1	i4 _ is _ slice = ( ( ( u4 _ bits >> 8 ) == 0x01 ) && ( i4 _ row ) && ( i4 _ row <= ps _ dec -> u2 _ num _ vert _ mb ) )	ps _ dec	EMPTY
515	1203	2	-1	0	-1	if ( ! i4 _ is _ slice )	EMPTY	EMPTY
515	1204	3	-1	0	-1	break	EMPTY	EMPTY
515	1206	1	0	0	-1	i4 _ row -= 1	EMPTY	EMPTY
515	1209	1	1	0	1	if ( i4 _ prev _ row < i4 _ row )	EMPTY	EMPTY
515	1210	2	-1	0	-1	{	EMPTY	EMPTY
515	1212	2	-1	1	-1	if ( i4 _ start _ row != - 1 )	EMPTY	EMPTY
515	1213	2	-1	0	-1	{	EMPTY	EMPTY
515	1214	2	-1	0	-1	job _ t s _ job ;	job _ t	EMPTY
515	1215	2	-1	0	-1	iv _ api _ call _ status _ t ret ;	EMPTY	EMPTY
515	1216	2	-1	0	-1	s _ job . i2 _ start _ mb _ y = i4 _ start _ row ;	i2 _ start _ mb _ y	EMPTY
515	1217	2	-1	0	-1	s _ job . i2 _ end _ mb _ y = i4 _ row ;	EMPTY	EMPTY
515	1218	2	-1	0	-1	s _ job . i4 _ cmd = cmd _ process ;	i4 _ cmd	EMPTY
515	1219	2	-1	0	-1	s _ job . i4 _ bistream _ ofst = i4 _ slice _ bistream _ ofst ;	i4 _ bistream _ ofst	EMPTY
515	1220	2	-1	0	-1	ret = impeg2 _ jobq _ queue ( ps _ dec -> pv _ jobq , & s _ job , sizeof ( s _ job ) , 1 , 0 ) ;	ps _ dec pv _ jobq	EMPTY
515	1221	2	-1	0	-1	if ( ret != iv _ success )	EMPTY	EMPTY
515	1222	3	-1	0	-1	return ret ;	EMPTY	EMPTY
515	1224	1	1	0	-1	}	EMPTY	EMPTY
515	1226	2	-1	1	-1	i4 _ slice _ bistream _ ofst = s _ bitstrm . u4 _ offset >> 3	u4 _ offset	EMPTY
515	1227	2	-1	0	-1	i4 _ slice _ bistream _ ofst -= ( size _ t ) s _ bitstrm . pv _ bs _ buf & 3	EMPTY	EMPTY
515	1228	3	-1	0	-1	i4 _ prev _ row = i4 _ row	EMPTY	EMPTY
515	1231	1	1	1	-1	i4 _ start _ row = i4 _ row	EMPTY	EMPTY
515	1233	1	0	0	0	if ( i4 _ prev _ row > i4 _ row ) {	EMPTY	EMPTY
515	1234	2	-1	0	-1	android _ errorwritelog ( numconst  strlit ) ;	EMPTY	EMPTY
515	1235	3	-1	0	-1	}	EMPTY	EMPTY
515	1238	1	0	0	0	impeg2d _ bit _ stream _ flush ( & s _ bitstrm  start _ code _ len ) ;	EMPTY	EMPTY
515	1242	1	1	1	1	while ( impeg2d _ bit _ stream _ nxt ( & s _ bitstrm , 24 ) != start _ code _ prefix )	EMPTY	EMPTY
515	1243	2	-1	0	-1	{	EMPTY	EMPTY
515	1244	3	-1	0	-1	impeg2d _ bit _ stream _ get ( & s _ bitstrm , 8 ) ;	EMPTY	EMPTY
515	1246	1	0	0	0	if ( s _ bitstrm . u4 _ offset >= s _ bitstrm . u4 _ max _ offset )	u4 _ offset u4 _ max _ offset	EMPTY
515	1247	2	-1	0	-1	{	EMPTY	EMPTY
515	1248	2	-1	0	-1	break ;	EMPTY	EMPTY
515	1249	2	-1	0	-1	}	EMPTY	EMPTY
515	1250	2	-1	0	-1	}	EMPTY	EMPTY
515	1251	3	-1	0	-1	}	EMPTY	EMPTY
515	1254	1	1	1	-1	{	EMPTY	EMPTY
515	1255	2	-1	0	-1	job _ t s _ job ;	job _ t	EMPTY
515	1256	2	-1	0	-1	iv _ api _ call _ status _ t e _ ret ;	EMPTY	EMPTY
515	1257	2	-1	0	-1	s _ job . i2 _ start _ mb _ y = i4 _ start _ row ;	i2 _ start _ mb _ y	EMPTY
515	1258	2	-1	0	-1	s _ job . i2 _ end _ mb _ y = ps _ dec -> u2 _ num _ vert _ mb ;	ps _ dec	EMPTY
515	1259	2	-1	0	-1	s _ job . i4 _ cmd = cmd _ process ;	i4 _ cmd	EMPTY
515	1260	2	-1	0	-1	s _ job . i4 _ bistream _ ofst = i4 _ slice _ bistream _ ofst ;	i4 _ bistream _ ofst	EMPTY
515	1261	2	-1	0	-1	e _ ret = impeg2 _ jobq _ queue ( ps _ dec -> pv _ jobq , & s _ job , sizeof ( s _ job ) , 1 , 0 ) ;	ps _ dec pv _ jobq	EMPTY
515	1262	2	-1	0	-1	if ( e _ ret != iv _ success )	EMPTY	EMPTY
515	1263	3	-1	0	-1	return e _ ret ;	EMPTY	EMPTY
515	1265	1	0	0	-1	}	EMPTY	EMPTY
515	1266	2	-1	0	-1	if ( ( null != ps _ dec -> ps _ disp _ pic ) && ( ( 0 == ps _ dec -> u4 _ share _ disp _ buf ) || ( iv _ yuv _ 420p != ps _ dec -> i4 _ chromaformat ) ) )	ps _ dec ps _ dec u4 _ share _ disp _ buf ps _ dec i4 _ chromaformat	EMPTY
515	1267	2	-1	0	-1	{	EMPTY	EMPTY
515	1268	2	-1	0	-1	for ( i = 0 ; i < ps _ dec -> u2 _ vertical _ size ; i += 64 )	ps _ dec	EMPTY
515	1269	2	-1	0	-1	{	EMPTY	EMPTY
515	1270	2	-1	0	-1	job _ t s _ job ;	job _ t	EMPTY
515	1271	2	-1	0	-1	iv _ api _ call _ status _ t ret ;	EMPTY	EMPTY
515	1272	2	-1	0	-1	s _ job . i2 _ start _ mb _ y = i ;	i2 _ start _ mb _ y	EMPTY
515	1273	2	-1	0	-1	s _ job . i2 _ start _ mb _ y >>= 4 ;	i2 _ start _ mb _ y	EMPTY
515	1274	2	-1	0	-1	s _ job . i2 _ end _ mb _ y = ( i + 64 ) ;	EMPTY	EMPTY
515	1275	2	-1	0	-1	s _ job . i2 _ end _ mb _ y >>= 4 ;	EMPTY	EMPTY
515	1276	2	-1	0	-1	s _ job . i4 _ cmd = cmd _ fmtconv ;	i4 _ cmd	EMPTY
515	1277	2	-1	0	-1	s _ job . i4 _ bistream _ ofst = 0 ;	i4 _ bistream _ ofst	EMPTY
515	1278	2	-1	0	-1	ret = impeg2 _ jobq _ queue ( ps _ dec -> pv _ jobq , & s _ job , sizeof ( s _ job ) , 1 , 0 ) ;	ps _ dec pv _ jobq	EMPTY
515	1279	2	-1	0	-1	if ( ret != iv _ success )	EMPTY	EMPTY
515	1280	3	-1	0	-1	return ret ;	EMPTY	EMPTY
515	1282	1	0	0	-1	}	EMPTY	EMPTY
515	1283	3	-1	0	-1	}	EMPTY	EMPTY
515	1285	1	0	0	0	impeg2 _ jobq _ terminate ( ps _ dec -> pv _ jobq )	ps _ dec pv _ jobq	EMPTY
515	1286	2	-1	0	-1	ps _ dec -> i4 _ bytes _ consumed = s _ bitstrm . u4 _ offset >> 3	ps _ dec i4 _ bytes _ consumed u4 _ offset	EMPTY
515	1287	3	-1	0	-1	ps _ dec -> i4 _ bytes _ consumed -= ( ( size _ t ) s _ bitstrm . pv _ bs _ buf & 3 )	ps _ dec i4 _ bytes _ consumed	EMPTY
515	1289	1	0	0	0	return 0	EMPTY	EMPTY
515	1290	3	-1	0	-1	}	EMPTY	EMPTY
515	1305	1	1	1	-1	void impeg2d _ dec _ pic _ data ( dec _ state _ t * ps _ dec )	ps _ dec	EMPTY
515	1306	3	-1	0	-1	{	EMPTY	EMPTY
515	1308	1	0	0	0	word32 i ;	EMPTY	EMPTY
515	1309	3	-1	0	-1	dec _ state _ multi _ core _ t * ps _ dec _ state _ multi _ core ;	EMPTY	EMPTY
515	1311	1	0	0	0	uword32 u4 _ error _ code ;	u4 _ error _ code	EMPTY
515	1313	1	0	0	0	dec _ state _ t * ps _ dec _ thd ;	EMPTY	EMPTY
515	1314	2	-1	0	-1	word32 i4 _ status ;	EMPTY	EMPTY
515	1315	3	-1	0	-1	word32 i4 _ min _ mb _ y ;	EMPTY	EMPTY
515	1319	1	1	1	-1	ps _ dec -> u2 _ mb _ x = ps _ dec -> u2 _ mb _ y = 0	ps _ dec ps _ dec	EMPTY
515	1320	3	-1	0	-1	u4 _ error _ code = 0	u4 _ error _ code	EMPTY
515	1322	1	0	0	-1	ps _ dec _ state _ multi _ core = ps _ dec -> ps _ dec _ state _ multi _ core	ps _ dec	EMPTY
515	1323	3	-1	0	-1	impeg2d _ get _ slice _ pos ( ps _ dec _ state _ multi _ core )	EMPTY	EMPTY
515	1325	1	0	0	-1	i4 _ min _ mb _ y = 1	EMPTY	EMPTY
515	1326	2	-1	0	-1	for ( i = numconst ; i < ps _ dec -> i4 _ num _ cores - numconst ; i ++ )	ps _ dec	EMPTY
515	1327	3	-1	0	-1	{	EMPTY	EMPTY
515	1331	1	1	1	-1	ps _ dec _ thd = ps _ dec _ state _ multi _ core -> ps _ dec _ state [ i + 1 ]	ps _ dec _ state	EMPTY
515	1333	1	0	0	-1	ps _ dec _ thd -> ps _ disp _ pic = ps _ dec -> ps _ disp _ pic	ps _ dec	EMPTY
515	1334	3	-1	0	-1	ps _ dec _ thd -> ps _ disp _ frm _ buf = ps _ dec -> ps _ disp _ frm _ buf	ps _ dec	EMPTY
515	1336	1	0	0	-1	i4 _ status = impeg2d _ init _ thread _ dec _ ctxt ( ps _ dec , ps _ dec _ thd , i4 _ min _ mb _ y )	ps _ dec	EMPTY
515	1339	1	1	1	1	if ( i4 _ status == 0 )	EMPTY	EMPTY
515	1340	2	-1	0	-1	{	EMPTY	EMPTY
515	1341	2	-1	0	-1	ithread _ create ( ps _ dec _ thd -> pv _ codec _ thread _ handle , null , ( void * ) impeg2d _ dec _ pic _ data _ thread , ps _ dec _ thd ) ;	EMPTY	EMPTY
515	1342	2	-1	0	-1	ps _ dec _ state _ multi _ core -> au4 _ thread _ launched [ i + 1 ] = 1 ;	EMPTY	EMPTY
515	1343	2	-1	0	-1	i4 _ min _ mb _ y = ps _ dec _ thd -> u2 _ mb _ y + 1 ;	EMPTY	EMPTY
515	1344	2	-1	0	-1	}	EMPTY	EMPTY
515	1345	2	-1	0	-1	else	EMPTY	EMPTY
515	1346	2	-1	0	-1	{	EMPTY	EMPTY
515	1347	2	-1	0	-1	ps _ dec _ state _ multi _ core -> au4 _ thread _ launched [ i + 1 ] = 0 ;	EMPTY	EMPTY
515	1348	2	-1	0	-1	break ;	EMPTY	EMPTY
515	1349	2	-1	0	-1	}	EMPTY	EMPTY
515	1350	3	-1	0	-1	}	EMPTY	EMPTY
515	1352	1	0	0	0	impeg2d _ dec _ pic _ data _ thread ( ps _ dec ) ;	ps _ dec	EMPTY
515	1355	1	1	1	1	for ( i = 0 ; i < ( ps _ dec -> i4 _ num _ cores - 1 ) ; i ++ )	ps _ dec	EMPTY
515	1356	2	-1	0	-1	{	EMPTY	EMPTY
515	1357	2	-1	0	-1	if ( ps _ dec _ state _ multi _ core -> au4 _ thread _ launched [ i + 1 ] == 1 )	EMPTY	EMPTY
515	1358	2	-1	0	-1	{	EMPTY	EMPTY
515	1359	2	-1	0	-1	ps _ dec _ thd = ps _ dec _ state _ multi _ core -> ps _ dec _ state [ i + 1 ] ;	ps _ dec _ state	EMPTY
515	1360	2	-1	0	-1	ithread _ join ( ps _ dec _ thd -> pv _ codec _ thread _ handle , null ) ;	EMPTY	EMPTY
515	1361	2	-1	0	-1	}	EMPTY	EMPTY
515	1362	3	-1	0	-1	}	EMPTY	EMPTY
515	1364	1	0	0	-1	ps _ dec -> u4 _ error _ code = u4 _ error _ code	ps _ dec u4 _ error _ code u4 _ error _ code	EMPTY
515	1366	1	0	0	-1	}	EMPTY	EMPTY
515	1379	1	0	0	-1	void impeg2d _ flush _ ext _ and _ user _ data ( dec _ state _ t * ps _ dec )	impeg2d _ flush _ ext _ and _ user _ data ps _ dec	EMPTY
515	1380	2	-1	0	-1	{	EMPTY	EMPTY
515	1381	2	-1	0	-1	uword32 u4 _ start _ code ;	EMPTY	EMPTY
515	1382	3	-1	0	-1	stream _ t * ps _ stream ;	stream _ t	EMPTY
515	1384	1	0	0	-1	ps _ stream = & ps _ dec -> s _ bit _ stream	ps _ dec	EMPTY
515	1385	3	-1	0	-1	u4 _ start _ code = impeg2d _ bit _ stream _ nxt ( ps _ stream , start _ code _ len )	EMPTY	EMPTY
515	1387	1	0	0	0	while ( ( u4 _ start _ code == extension _ start _ code || u4 _ start _ code == user _ data _ start _ code ) &&	EMPTY	EMPTY
515	1388	2	-1	0	-1	( ps _ stream -> u4 _ offset < ps _ stream -> u4 _ max _ offset ) )	u4 _ offset u4 _ max _ offset	EMPTY
515	1389	2	-1	0	-1	{	EMPTY	EMPTY
515	1390	2	-1	0	-1	impeg2d _ bit _ stream _ flush ( ps _ stream , start _ code _ len ) ;	EMPTY	EMPTY
515	1391	2	-1	0	-1	while ( impeg2d _ bit _ stream _ nxt ( ps _ stream , start _ code _ prefix _ len ) != start _ code _ prefix &&	EMPTY	EMPTY
515	1392	2	-1	0	-1	( ps _ stream -> u4 _ offset < ps _ stream -> u4 _ max _ offset ) )	u4 _ offset u4 _ max _ offset	EMPTY
515	1393	2	-1	0	-1	{	EMPTY	EMPTY
515	1394	2	-1	0	-1	impeg2d _ bit _ stream _ flush ( ps _ stream , 8 ) ;	EMPTY	EMPTY
515	1395	2	-1	0	-1	}	EMPTY	EMPTY
515	1396	2	-1	0	-1	u4 _ start _ code = impeg2d _ bit _ stream _ nxt ( ps _ stream , start _ code _ len ) ;	EMPTY	EMPTY
515	1397	2	-1	0	-1	}	EMPTY	EMPTY
515	1398	3	-1	0	-1	}	EMPTY	EMPTY
515	1410	1	0	0	-1	void impeg2d _ dec _ user _ data ( dec _ state _ t * ps _ dec )	impeg2d _ dec _ user _ data ps _ dec	EMPTY
515	1411	2	-1	0	-1	{	EMPTY	EMPTY
515	1412	2	-1	0	-1	uword32 u4 _ start _ code ;	EMPTY	EMPTY
515	1413	3	-1	0	-1	stream _ t * ps _ stream ;	stream _ t	EMPTY
515	1415	1	0	0	-1	ps _ stream = & ps _ dec -> s _ bit _ stream	ps _ dec	EMPTY
515	1416	3	-1	0	-1	u4 _ start _ code = impeg2d _ bit _ stream _ nxt ( ps _ stream , start _ code _ len )	EMPTY	EMPTY
515	1418	1	0	0	0	while ( u4 _ start _ code == user _ data _ start _ code )	EMPTY	EMPTY
515	1419	2	-1	0	-1	{	EMPTY	EMPTY
515	1420	2	-1	0	-1	impeg2d _ bit _ stream _ flush ( ps _ stream , start _ code _ len ) ;	EMPTY	EMPTY
515	1421	2	-1	0	-1	while ( ( impeg2d _ bit _ stream _ nxt ( ps _ stream , start _ code _ prefix _ len ) != start _ code _ prefix ) &&	EMPTY	EMPTY
515	1422	2	-1	0	-1	( ps _ stream -> u4 _ offset < ps _ stream -> u4 _ max _ offset ) )	u4 _ offset u4 _ max _ offset	EMPTY
515	1423	2	-1	0	-1	{	EMPTY	EMPTY
515	1424	2	-1	0	-1	impeg2d _ bit _ stream _ flush ( ps _ stream , 8 ) ;	EMPTY	EMPTY
515	1425	2	-1	0	-1	}	EMPTY	EMPTY
515	1426	2	-1	0	-1	u4 _ start _ code = impeg2d _ bit _ stream _ nxt ( ps _ stream , start _ code _ len ) ;	EMPTY	EMPTY
515	1427	2	-1	0	-1	}	EMPTY	EMPTY
515	1428	3	-1	0	-1	}	EMPTY	EMPTY
515	1440	1	0	0	-1	impeg2d _ error _ codes _ t impeg2d _ dec _ seq _ ext _ data ( dec _ state _ t * ps _ dec )	impeg2d _ dec _ seq _ ext _ data ps _ dec	EMPTY
515	1441	2	-1	0	-1	{	EMPTY	EMPTY
515	1442	2	-1	0	-1	stream _ t * ps _ stream ;	stream _ t	EMPTY
515	1443	2	-1	0	-1	uword32 u4 _ start _ code ;	EMPTY	EMPTY
515	1444	3	-1	0	-1	impeg2d _ error _ codes _ t e _ error ;	EMPTY	EMPTY
515	1446	1	0	0	-1	e _ error = ( impeg2d _ error _ codes _ t ) ivd _ error _ none	EMPTY	EMPTY
515	1448	1	1	0	-1	ps _ stream = & ps _ dec -> s _ bit _ stream	ps _ dec	EMPTY
515	1449	2	-1	0	-1	u4 _ start _ code = impeg2d _ bit _ stream _ nxt ( ps _ stream , start _ code _ len )	EMPTY	EMPTY
515	1450	2	-1	0	-1	while ( ( u4 _ start _ code == extension _ start _ code ||	EMPTY	EMPTY
515	1451	2	-1	0	-1	u4 _ start _ code == user _ data _ start _ code ) &&	EMPTY	EMPTY
515	1452	2	-1	0	-1	( impeg2d _ error _ codes _ t ) ivd _ error _ none == e _ error &&	EMPTY	EMPTY
515	1453	2	-1	0	-1	( ps _ stream -> u4 _ offset < ps _ stream -> u4 _ max _ offset ) )	u4 _ offset u4 _ max _ offset	EMPTY
515	1454	2	-1	0	-1	{	EMPTY	EMPTY
515	1455	2	-1	0	-1	if ( u4 _ start _ code == user _ data _ start _ code )	EMPTY	EMPTY
515	1456	2	-1	0	-1	{	EMPTY	EMPTY
515	1457	2	-1	0	-1	impeg2d _ dec _ user _ data ( ps _ dec )	impeg2d _ dec _ user _ data ps _ dec	EMPTY
515	1458	2	-1	0	-1	}	EMPTY	EMPTY
515	1459	2	-1	0	-1	else	EMPTY	EMPTY
515	1460	2	-1	0	-1	{	EMPTY	EMPTY
515	1461	2	-1	0	-1	impeg2d _ bit _ stream _ flush ( ps _ stream , start _ code _ len )	EMPTY	EMPTY
515	1462	2	-1	0	-1	u4 _ start _ code = impeg2d _ bit _ stream _ nxt ( ps _ stream , ext _ id _ len )	EMPTY	EMPTY
515	1463	2	-1	0	-1	switch ( u4 _ start _ code )	EMPTY	EMPTY
515	1464	2	-1	0	-1	{	EMPTY	EMPTY
515	1465	2	-1	0	-1	case seq _ display _ ext _ id :	EMPTY	EMPTY
515	1466	2	-1	0	-1	impeg2d _ dec _ seq _ disp _ ext ( ps _ dec )	impeg2d _ dec _ seq _ disp _ ext ps _ dec	EMPTY
515	1467	2	-1	0	-1	break	EMPTY	EMPTY
515	1468	2	-1	0	-1	case seq _ scalable _ ext _ id :	EMPTY	EMPTY
515	1469	2	-1	0	-1	e _ error = impeg2d _ scalabilitiy _ not _ supported	EMPTY	EMPTY
515	1470	2	-1	0	-1	break	EMPTY	EMPTY
515	1471	2	-1	0	-1	default :	EMPTY	EMPTY
515	1473	2	-1	1	-1	impeg2d _ bit _ stream _ flush ( ps _ stream  ext _ id _ len ) ;	EMPTY	EMPTY
515	1474	2	-1	0	-1	impeg2d _ peek _ next _ start _ code ( ps _ dec )	impeg2d _ peek _ next _ start _ code ps _ dec	EMPTY
515	1475	2	-1	0	-1	break	EMPTY	EMPTY
515	1476	2	-1	0	-1	}	EMPTY	EMPTY
515	1477	2	-1	0	-1	}	EMPTY	EMPTY
515	1478	3	-1	0	-1	u4 _ start _ code = impeg2d _ bit _ stream _ nxt ( ps _ stream  start _ code _ len ) ;	EMPTY	EMPTY
515	1479	1	0	0	-1	}	EMPTY	EMPTY
515	1480	2	-1	0	-1	return e _ error ;	EMPTY	EMPTY
515	1481	3	-1	0	-1	}	EMPTY	EMPTY
515	1493	1	0	0	-1	impeg2d _ error _ codes _ t impeg2d _ dec _ pic _ ext _ data ( dec _ state _ t * ps _ dec )	impeg2d _ dec _ pic _ ext _ data ps _ dec	EMPTY
515	1494	2	-1	0	-1	{	EMPTY	EMPTY
515	1495	2	-1	0	-1	stream _ t * ps _ stream ;	stream _ t	EMPTY
515	1496	2	-1	0	-1	uword32 u4 _ start _ code ;	EMPTY	EMPTY
515	1497	3	-1	0	-1	impeg2d _ error _ codes _ t e _ error ;	EMPTY	EMPTY
515	1499	1	0	0	-1	e _ error = ( impeg2d _ error _ codes _ t ) ivd _ error _ none	EMPTY	EMPTY
515	1501	1	0	0	-1	ps _ stream = & ps _ dec -> s _ bit _ stream	ps _ dec	EMPTY
515	1502	2	-1	0	-1	u4 _ start _ code = impeg2d _ bit _ stream _ nxt ( ps _ stream , start _ code _ len )	EMPTY	EMPTY
515	1503	2	-1	0	-1	while ( ( u4 _ start _ code == extension _ start _ code ||	EMPTY	EMPTY
515	1504	2	-1	0	-1	u4 _ start _ code == user _ data _ start _ code ) &&	EMPTY	EMPTY
515	1505	2	-1	0	-1	( impeg2d _ error _ codes _ t ) ivd _ error _ none == e _ error &&	EMPTY	EMPTY
515	1506	2	-1	0	-1	( ps _ stream -> u4 _ offset < ps _ stream -> u4 _ max _ offset ) )	u4 _ offset u4 _ max _ offset	EMPTY
515	1507	2	-1	0	-1	{	EMPTY	EMPTY
515	1508	2	-1	0	-1	if ( u4 _ start _ code == user _ data _ start _ code )	EMPTY	EMPTY
515	1509	2	-1	0	-1	{	EMPTY	EMPTY
515	1510	2	-1	0	-1	impeg2d _ dec _ user _ data ( ps _ dec )	impeg2d _ dec _ user _ data ps _ dec	EMPTY
515	1511	2	-1	0	-1	}	EMPTY	EMPTY
515	1512	2	-1	0	-1	else	EMPTY	EMPTY
515	1513	2	-1	0	-1	{	EMPTY	EMPTY
515	1514	2	-1	0	-1	impeg2d _ bit _ stream _ flush ( ps _ stream , start _ code _ len )	EMPTY	EMPTY
515	1515	2	-1	0	-1	u4 _ start _ code = impeg2d _ bit _ stream _ nxt ( ps _ stream , ext _ id _ len )	EMPTY	EMPTY
515	1516	2	-1	0	-1	switch ( u4 _ start _ code )	EMPTY	EMPTY
515	1517	2	-1	0	-1	{	EMPTY	EMPTY
515	1518	2	-1	0	-1	case quant _ matrix _ ext _ id :	EMPTY	EMPTY
515	1519	2	-1	0	-1	impeg2d _ dec _ quant _ matrix _ ext ( ps _ dec )	impeg2d _ dec _ quant _ matrix _ ext ps _ dec	EMPTY
515	1520	2	-1	0	-1	break	EMPTY	EMPTY
515	1521	2	-1	0	-1	case copyright _ ext _ id :	EMPTY	EMPTY
515	1522	2	-1	0	-1	impeg2d _ dec _ copyright _ ext ( ps _ dec )	ps _ dec	EMPTY
515	1523	2	-1	0	-1	break	EMPTY	EMPTY
515	1524	2	-1	0	-1	case pic _ display _ ext _ id :	EMPTY	EMPTY
515	1525	2	-1	0	-1	impeg2d _ dec _ pic _ disp _ ext ( ps _ dec )	impeg2d _ dec _ pic _ disp _ ext ps _ dec	EMPTY
515	1526	2	-1	0	-1	break	EMPTY	EMPTY
515	1527	2	-1	0	-1	case camera _ param _ ext _ id :	EMPTY	EMPTY
515	1528	2	-1	0	-1	impeg2d _ dec _ cam _ param _ ext ( ps _ dec )	ps _ dec	EMPTY
515	1529	2	-1	0	-1	break	EMPTY	EMPTY
515	1530	3	-1	0	-1	case itu _ t _ ext _ id :	EMPTY	EMPTY
515	1531	1	1	0	-1	impeg2d _ dec _ itu _ t _ ext ( ps _ dec )	impeg2d _ dec _ itu _ t _ ext ps _ dec	EMPTY
515	1532	2	-1	0	-1	break	EMPTY	EMPTY
515	1533	2	-1	0	-1	case pic _ spatial _ scalable _ ext _ id :	EMPTY	EMPTY
515	1534	2	-1	0	-1	case pic _ temporal _ scalable _ ext _ id :	EMPTY	EMPTY
515	1535	2	-1	0	-1	e _ error = impeg2d _ scalablity _ not _ sup	EMPTY	EMPTY
515	1536	2	-1	0	-1	break	EMPTY	EMPTY
515	1537	2	-1	0	-1	default :	EMPTY	EMPTY
515	1539	2	-1	1	-1	impeg2d _ bit _ stream _ flush ( ps _ stream  ext _ id _ len ) ;	EMPTY	EMPTY
515	1540	2	-1	0	-1	impeg2d _ next _ start _ code ( ps _ dec )	impeg2d _ next _ start _ code ps _ dec	EMPTY
515	1541	2	-1	0	-1	break	EMPTY	EMPTY
515	1542	2	-1	0	-1	}	EMPTY	EMPTY
515	1543	2	-1	0	-1	}	EMPTY	EMPTY
515	1544	2	-1	0	-1	u4 _ start _ code = impeg2d _ bit _ stream _ nxt ( ps _ stream  start _ code _ len ) ;	EMPTY	EMPTY
515	1545	2	-1	0	-1	}	EMPTY	EMPTY
515	1546	2	-1	0	-1	return e _ error ;	EMPTY	EMPTY
515	1547	3	-1	0	-1	}	EMPTY	EMPTY
515	1560	1	0	0	-1	impeg2d _ error _ codes _ t impeg2d _ process _ video _ header ( dec _ state _ t * ps _ dec )	impeg2d _ process _ video _ header ps _ dec	EMPTY
515	1561	2	-1	0	-1	{	EMPTY	EMPTY
515	1562	2	-1	0	-1	stream _ t * ps _ stream ;	stream _ t	EMPTY
515	1563	2	-1	0	-1	ps _ stream = & ps _ dec -> s _ bit _ stream	ps _ dec	EMPTY
515	1564	3	-1	0	-1	impeg2d _ error _ codes _ t e _ error ;	EMPTY	EMPTY
515	1566	1	1	0	1	impeg2d _ next _ code ( ps _ dec , sequence _ header _ code )	impeg2d _ next _ code ps _ dec	EMPTY
515	1567	2	-1	0	-1	if ( ps _ dec -> s _ bit _ stream . u4 _ offset < ps _ dec -> s _ bit _ stream . u4 _ max _ offset )	ps _ dec u4 _ offset ps _ dec u4 _ max _ offset	EMPTY
515	1568	2	-1	0	-1	{	EMPTY	EMPTY
515	1569	2	-1	0	-1	e _ error = impeg2d _ dec _ seq _ hdr ( ps _ dec ) ;	impeg2d _ dec _ seq _ hdr ps _ dec	EMPTY
515	1570	2	-1	0	-1	if ( ( impeg2d _ error _ codes _ t ) ivd _ error _ none != e _ error )	EMPTY	EMPTY
515	1571	2	-1	0	-1	{	EMPTY	EMPTY
515	1572	2	-1	0	-1	return e _ error ;	EMPTY	EMPTY
515	1573	2	-1	0	-1	}	EMPTY	EMPTY
515	1574	2	-1	0	-1	}	EMPTY	EMPTY
515	1575	2	-1	0	-1	else	EMPTY	EMPTY
515	1576	2	-1	0	-1	{	EMPTY	EMPTY
515	1577	2	-1	0	-1	return impeg2d _ bitstream _ buff _ exceeded _ err ;	EMPTY	EMPTY
515	1578	2	-1	0	-1	}	EMPTY	EMPTY
515	1579	2	-1	0	-1	if ( impeg2d _ bit _ stream _ nxt ( ps _ stream  start _ code _ len ) == extension _ start _ code )	EMPTY	EMPTY
515	1580	2	-1	0	-1	{	EMPTY	EMPTY
515	1582	2	-1	1	-1	if ( ps _ dec -> s _ bit _ stream . u4 _ offset < ps _ dec -> s _ bit _ stream . u4 _ max _ offset )	ps _ dec u4 _ offset ps _ dec u4 _ max _ offset	EMPTY
515	1583	2	-1	0	-1	{	EMPTY	EMPTY
515	1584	2	-1	0	-1	e _ error = impeg2d _ dec _ seq _ ext ( ps _ dec ) ;	impeg2d _ dec _ seq _ ext ps _ dec	EMPTY
515	1585	2	-1	0	-1	if ( ( impeg2d _ error _ codes _ t ) ivd _ error _ none != e _ error )	EMPTY	EMPTY
515	1586	2	-1	0	-1	{	EMPTY	EMPTY
515	1587	2	-1	0	-1	return e _ error ;	EMPTY	EMPTY
515	1588	2	-1	0	-1	}	EMPTY	EMPTY
515	1589	2	-1	0	-1	}	EMPTY	EMPTY
515	1590	2	-1	0	-1	else	EMPTY	EMPTY
515	1591	2	-1	0	-1	{	EMPTY	EMPTY
515	1592	2	-1	0	-1	return impeg2d _ bitstream _ buff _ exceeded _ err ;	EMPTY	EMPTY
515	1593	2	-1	0	-1	}	EMPTY	EMPTY
515	1594	2	-1	0	-1	if ( ps _ dec -> s _ bit _ stream . u4 _ offset < ps _ dec -> s _ bit _ stream . u4 _ max _ offset )	ps _ dec u4 _ offset ps _ dec u4 _ max _ offset	EMPTY
515	1595	2	-1	0	-1	{	EMPTY	EMPTY
515	1596	3	-1	0	-1	e _ error = impeg2d _ dec _ seq _ ext _ data ( ps _ dec ) ;	impeg2d _ dec _ seq _ ext _ data ps _ dec	EMPTY
515	1597	1	1	0	-1	if ( ( impeg2d _ error _ codes _ t ) ivd _ error _ none != e _ error )	EMPTY	EMPTY
515	1598	2	-1	0	-1	{	EMPTY	EMPTY
515	1599	2	-1	0	-1	return e _ error ;	EMPTY	EMPTY
515	1600	2	-1	0	-1	}	EMPTY	EMPTY
515	1601	2	-1	0	-1	}	EMPTY	EMPTY
515	1602	2	-1	0	-1	return impeg2d _ init _ video _ state ( ps _ dec , mpeg _ 2 _ video )	ps _ dec	EMPTY
515	1603	2	-1	0	-1	}	EMPTY	EMPTY
515	1604	2	-1	0	-1	else	EMPTY	EMPTY
515	1605	2	-1	0	-1	{	EMPTY	EMPTY
515	1607	2	-1	1	-1	if ( ps _ dec -> s _ bit _ stream . u4 _ offset < ps _ dec -> s _ bit _ stream . u4 _ max _ offset )	ps _ dec u4 _ offset ps _ dec u4 _ max _ offset	EMPTY
515	1608	2	-1	0	-1	{	EMPTY	EMPTY
515	1609	2	-1	0	-1	impeg2d _ flush _ ext _ and _ user _ data ( ps _ dec ) ;	impeg2d _ flush _ ext _ and _ user _ data ps _ dec	EMPTY
515	1610	2	-1	0	-1	}	EMPTY	EMPTY
515	1611	2	-1	0	-1	return impeg2d _ init _ video _ state ( ps _ dec , mpeg _ 1 _ video )	ps _ dec	EMPTY
515	1612	2	-1	0	-1	}	EMPTY	EMPTY
515	1613	3	-1	0	-1	}	EMPTY	EMPTY
515	1625	1	0	0	-1	impeg2d _ error _ codes _ t impeg2d _ process _ video _ bit _ stream ( dec _ state _ t * ps _ dec )	impeg2d _ process _ video _ bit _ stream ps _ dec	EMPTY
515	1626	2	-1	0	-1	{	EMPTY	EMPTY
515	1627	2	-1	0	-1	stream _ t * ps _ stream ;	stream _ t	EMPTY
515	1628	2	-1	0	-1	uword32 u4 _ next _ bits , u4 _ start _ code _ found ;	EMPTY	EMPTY
515	1629	3	-1	0	-1	impeg2d _ error _ codes _ t e _ error ;	EMPTY	EMPTY
515	1631	1	1	0	-1	ps _ stream = & ps _ dec -> s _ bit _ stream	ps _ dec	EMPTY
515	1632	2	-1	0	-1	impeg2d _ next _ start _ code ( ps _ dec )	impeg2d _ next _ start _ code ps _ dec	EMPTY
515	1634	3	-1	1	-1	u4 _ start _ code _ found = 0	EMPTY	EMPTY
515	1636	1	1	0	1	if ( ps _ dec -> u2 _ is _ mpeg2 )	ps _ dec u2 _ is _ mpeg2	EMPTY
515	1637	2	-1	0	-1	{	EMPTY	EMPTY
515	1639	2	-1	1	-1	while ( ( u4 _ start _ code _ found == 0 ) && ( ps _ dec -> s _ bit _ stream . u4 _ offset < ps _ dec -> s _ bit _ stream . u4 _ max _ offset ) )	ps _ dec u4 _ offset ps _ dec u4 _ max _ offset	EMPTY
515	1640	2	-1	0	-1	{	EMPTY	EMPTY
515	1641	3	-1	0	-1	u4 _ next _ bits = impeg2d _ bit _ stream _ nxt ( ps _ stream , start _ code _ len ) ;	EMPTY	EMPTY
515	1643	1	0	0	0	if ( u4 _ next _ bits == sequence _ header _ code )	EMPTY	EMPTY
515	1644	2	-1	0	-1	{	EMPTY	EMPTY
515	1645	2	-1	0	-1	if ( ps _ dec -> s _ bit _ stream . u4 _ offset < ps _ dec -> s _ bit _ stream . u4 _ max _ offset )	ps _ dec u4 _ offset ps _ dec u4 _ max _ offset	EMPTY
515	1646	2	-1	0	-1	{	EMPTY	EMPTY
515	1647	2	-1	0	-1	e _ error = impeg2d _ dec _ seq _ hdr ( ps _ dec ) ;	impeg2d _ dec _ seq _ hdr ps _ dec	EMPTY
515	1648	2	-1	0	-1	if ( ( impeg2d _ error _ codes _ t ) ivd _ error _ none != e _ error )	EMPTY	EMPTY
515	1649	2	-1	0	-1	{	EMPTY	EMPTY
515	1650	2	-1	0	-1	return e _ error ;	EMPTY	EMPTY
515	1651	3	-1	0	-1	}	EMPTY	EMPTY
515	1653	1	0	0	-1	u4 _ start _ code _ found = 0 ;	EMPTY	EMPTY
515	1655	1	0	0	-1	}	EMPTY	EMPTY
515	1656	2	-1	0	-1	else	EMPTY	EMPTY
515	1657	2	-1	0	-1	{	EMPTY	EMPTY
515	1658	2	-1	0	-1	return impeg2d _ bitstream _ buff _ exceeded _ err ;	EMPTY	EMPTY
515	1659	3	-1	0	-1	}	EMPTY	EMPTY
515	1662	1	0	0	0	if ( ps _ dec -> s _ bit _ stream . u4 _ offset < ps _ dec -> s _ bit _ stream . u4 _ max _ offset )	ps _ dec u4 _ offset ps _ dec u4 _ max _ offset	EMPTY
515	1663	2	-1	0	-1	{	EMPTY	EMPTY
515	1664	2	-1	0	-1	impeg2d _ error _ codes _ t e _ error ;	EMPTY	EMPTY
515	1665	2	-1	0	-1	e _ error = impeg2d _ dec _ seq _ ext ( ps _ dec ) ;	impeg2d _ dec _ seq _ ext ps _ dec	EMPTY
515	1666	2	-1	0	-1	if ( ( impeg2d _ error _ codes _ t ) ivd _ error _ none != e _ error )	EMPTY	EMPTY
515	1667	2	-1	0	-1	{	EMPTY	EMPTY
515	1668	2	-1	0	-1	return e _ error ;	EMPTY	EMPTY
515	1669	2	-1	0	-1	}	EMPTY	EMPTY
515	1670	3	-1	0	-1	u4 _ start _ code _ found = 0 ;	EMPTY	EMPTY
515	1672	1	0	0	-1	}	EMPTY	EMPTY
515	1673	2	-1	0	-1	else	EMPTY	EMPTY
515	1674	2	-1	0	-1	{	EMPTY	EMPTY
515	1675	2	-1	0	-1	return impeg2d _ bitstream _ buff _ exceeded _ err ;	EMPTY	EMPTY
515	1676	2	-1	0	-1	}	EMPTY	EMPTY
515	1677	2	-1	0	-1	}	EMPTY	EMPTY
515	1678	2	-1	0	-1	else if ( ( u4 _ next _ bits == user _ data _ start _ code ) || ( u4 _ next _ bits == extension _ start _ code ) )	EMPTY	EMPTY
515	1679	2	-1	0	-1	{	EMPTY	EMPTY
515	1680	2	-1	0	-1	if ( ps _ dec -> s _ bit _ stream . u4 _ offset < ps _ dec -> s _ bit _ stream . u4 _ max _ offset )	ps _ dec u4 _ offset ps _ dec u4 _ max _ offset	EMPTY
515	1681	2	-1	0	-1	{	EMPTY	EMPTY
515	1682	2	-1	0	-1	impeg2d _ dec _ seq _ ext _ data ( ps _ dec ) ;	impeg2d _ dec _ seq _ ext _ data ps _ dec	EMPTY
515	1683	3	-1	0	-1	u4 _ start _ code _ found = 0 ;	EMPTY	EMPTY
515	1685	1	0	0	-1	}	EMPTY	EMPTY
515	1687	1	0	0	-1	}	EMPTY	EMPTY
515	1688	2	-1	0	-1	else if ( ( ps _ dec -> s _ bit _ stream . u4 _ offset < ps _ dec -> s _ bit _ stream . u4 _ max _ offset )	ps _ dec u4 _ offset ps _ dec u4 _ max _ offset	EMPTY
515	1689	2	-1	0	-1	&& ( u4 _ next _ bits == gop _ start _ code ) )	EMPTY	EMPTY
515	1690	2	-1	0	-1	{	EMPTY	EMPTY
515	1691	2	-1	0	-1	impeg2d _ dec _ grp _ of _ pic _ hdr ( ps _ dec ) ;	ps _ dec	EMPTY
515	1692	2	-1	0	-1	impeg2d _ dec _ user _ data ( ps _ dec ) ;	impeg2d _ dec _ user _ data ps _ dec	EMPTY
515	1693	3	-1	0	-1	u4 _ start _ code _ found = 0 ;	EMPTY	EMPTY
515	1695	1	0	0	-1	}	EMPTY	EMPTY
515	1696	2	-1	0	-1	else if ( ( ps _ dec -> s _ bit _ stream . u4 _ offset < ps _ dec -> s _ bit _ stream . u4 _ max _ offset )	ps _ dec u4 _ offset ps _ dec u4 _ max _ offset	EMPTY
515	1697	2	-1	0	-1	&& ( u4 _ next _ bits == picture _ start _ code ) )	EMPTY	EMPTY
515	1698	3	-1	0	-1	{	EMPTY	EMPTY
515	1700	1	0	0	-1	e _ error = impeg2d _ dec _ pic _ hdr ( ps _ dec ) ;	impeg2d _ dec _ pic _ hdr ps _ dec	EMPTY
515	1701	2	-1	0	-1	if ( ( impeg2d _ error _ codes _ t ) ivd _ error _ none != e _ error )	EMPTY	EMPTY
515	1702	2	-1	0	-1	{	EMPTY	EMPTY
515	1703	2	-1	0	-1	return e _ error ;	EMPTY	EMPTY
515	1704	2	-1	0	-1	}	EMPTY	EMPTY
515	1705	2	-1	0	-1	impeg2d _ dec _ pic _ coding _ ext ( ps _ dec ) ;	impeg2d _ dec _ pic _ coding _ ext ps _ dec	EMPTY
515	1706	2	-1	0	-1	e _ error = impeg2d _ dec _ pic _ ext _ data ( ps _ dec ) ;	impeg2d _ dec _ pic _ ext _ data ps _ dec	EMPTY
515	1707	2	-1	0	-1	if ( ( impeg2d _ error _ codes _ t ) ivd _ error _ none != e _ error )	EMPTY	EMPTY
515	1708	2	-1	0	-1	{	EMPTY	EMPTY
515	1709	2	-1	0	-1	return e _ error ;	EMPTY	EMPTY
515	1710	2	-1	0	-1	}	EMPTY	EMPTY
515	1711	2	-1	0	-1	impeg2d _ pre _ pic _ dec _ proc ( ps _ dec ) ;	ps _ dec	EMPTY
515	1712	2	-1	0	-1	impeg2d _ dec _ pic _ data ( ps _ dec ) ;	ps _ dec	EMPTY
515	1713	2	-1	0	-1	impeg2d _ post _ pic _ dec _ proc ( ps _ dec ) ;	ps _ dec	EMPTY
515	1714	2	-1	0	-1	u4 _ start _ code _ found = 1 ;	EMPTY	EMPTY
515	1715	2	-1	0	-1	}	EMPTY	EMPTY
515	1716	3	-1	0	-1	else	EMPTY	EMPTY
515	1718	1	0	0	-1	{	EMPTY	EMPTY
515	1719	3	-1	0	-1	flush _ bits ( ps _ dec -> s _ bit _ stream . u4 _ offset , ps _ dec -> s _ bit _ stream . u4 _ buf , ps _ dec -> s _ bit _ stream . u4 _ buf _ nxt , 8 , ps _ dec -> s _ bit _ stream . pu4 _ buf _ aligned ) ;	ps _ dec u4 _ offset ps _ dec u4 _ buf ps _ dec u4 _ buf _ nxt ps _ dec	EMPTY
515	1721	1	0	0	-1	}	EMPTY	EMPTY
515	1722	2	-1	0	-1	if ( u4 _ start _ code _ found == 0 )	EMPTY	EMPTY
515	1723	2	-1	0	-1	{	EMPTY	EMPTY
515	1724	2	-1	0	-1	impeg2d _ next _ start _ code ( ps _ dec ) ;	impeg2d _ next _ start _ code ps _ dec	EMPTY
515	1725	2	-1	0	-1	}	EMPTY	EMPTY
515	1726	2	-1	0	-1	}	EMPTY	EMPTY
515	1727	2	-1	0	-1	if ( ( u4 _ start _ code _ found == 0 ) && ( ps _ dec -> s _ bit _ stream . u4 _ offset > ps _ dec -> s _ bit _ stream . u4 _ max _ offset ) )	ps _ dec u4 _ offset ps _ dec u4 _ max _ offset	EMPTY
515	1728	2	-1	0	-1	{	EMPTY	EMPTY
515	1729	2	-1	0	-1	return impeg2d _ frm _ hdr _ start _ code _ not _ found ;	impeg2d _ frm _ hdr _ start _ code _ not _ found	EMPTY
515	1730	3	-1	0	-1	}	EMPTY	EMPTY
515	1732	1	1	0	-1	}	EMPTY	EMPTY
515	1734	2	-1	1	-1	else	EMPTY	EMPTY
515	1735	2	-1	0	-1	{	EMPTY	EMPTY
515	1736	2	-1	0	-1	while ( ( u4 _ start _ code _ found == 0 ) && ( ps _ dec -> s _ bit _ stream . u4 _ offset < ps _ dec -> s _ bit _ stream . u4 _ max _ offset ) )	ps _ dec u4 _ offset ps _ dec u4 _ max _ offset	EMPTY
515	1737	2	-1	0	-1	{	EMPTY	EMPTY
515	1738	3	-1	0	-1	u4 _ next _ bits = impeg2d _ bit _ stream _ nxt ( ps _ stream , start _ code _ len ) ;	EMPTY	EMPTY
515	1740	1	0	0	0	if ( impeg2d _ bit _ stream _ nxt ( ps _ stream , start _ code _ len ) == sequence _ header _ code )	EMPTY	EMPTY
515	1741	2	-1	0	-1	{	EMPTY	EMPTY
515	1742	2	-1	0	-1	if ( ps _ dec -> s _ bit _ stream . u4 _ offset < ps _ dec -> s _ bit _ stream . u4 _ max _ offset )	ps _ dec u4 _ offset ps _ dec u4 _ max _ offset	EMPTY
515	1743	2	-1	0	-1	{	EMPTY	EMPTY
515	1744	2	-1	0	-1	e _ error = impeg2d _ dec _ seq _ hdr ( ps _ dec ) ;	impeg2d _ dec _ seq _ hdr ps _ dec	EMPTY
515	1745	2	-1	0	-1	if ( ( impeg2d _ error _ codes _ t ) ivd _ error _ none != e _ error )	EMPTY	EMPTY
515	1746	2	-1	0	-1	{	EMPTY	EMPTY
515	1747	2	-1	0	-1	return e _ error ;	EMPTY	EMPTY
515	1748	3	-1	0	-1	}	EMPTY	EMPTY
515	1750	1	0	0	-1	u4 _ start _ code _ found = 0 ;	EMPTY	EMPTY
515	1751	2	-1	0	-1	}	EMPTY	EMPTY
515	1752	2	-1	0	-1	else	EMPTY	EMPTY
515	1753	2	-1	0	-1	{	EMPTY	EMPTY
515	1754	2	-1	0	-1	return impeg2d _ bitstream _ buff _ exceeded _ err ;	EMPTY	EMPTY
515	1755	2	-1	0	-1	}	EMPTY	EMPTY
515	1756	2	-1	0	-1	}	EMPTY	EMPTY
515	1757	2	-1	0	-1	else if ( ( ps _ dec -> s _ bit _ stream . u4 _ offset < ps _ dec -> s _ bit _ stream . u4 _ max _ offset ) && ( u4 _ next _ bits == extension _ start _ code || u4 _ next _ bits == user _ data _ start _ code ) )	ps _ dec u4 _ offset ps _ dec u4 _ max _ offset	EMPTY
515	1758	2	-1	0	-1	{	EMPTY	EMPTY
515	1759	2	-1	0	-1	impeg2d _ flush _ ext _ and _ user _ data ( ps _ dec ) ;	impeg2d _ flush _ ext _ and _ user _ data ps _ dec	EMPTY
515	1760	2	-1	0	-1	u4 _ start _ code _ found = 0 ;	EMPTY	EMPTY
515	1761	3	-1	0	-1	}	EMPTY	EMPTY
515	1764	1	0	0	0	else if ( ( impeg2d _ bit _ stream _ nxt ( ps _ stream , start _ code _ len ) == gop _ start _ code )	EMPTY	EMPTY
515	1765	2	-1	0	-1	&& ( ps _ dec -> s _ bit _ stream . u4 _ offset < ps _ dec -> s _ bit _ stream . u4 _ max _ offset ) )	ps _ dec u4 _ offset ps _ dec u4 _ max _ offset	EMPTY
515	1766	2	-1	0	-1	{	EMPTY	EMPTY
515	1767	2	-1	0	-1	impeg2d _ dec _ grp _ of _ pic _ hdr ( ps _ dec ) ;	ps _ dec	EMPTY
515	1768	2	-1	0	-1	impeg2d _ flush _ ext _ and _ user _ data ( ps _ dec ) ;	impeg2d _ flush _ ext _ and _ user _ data ps _ dec	EMPTY
515	1769	2	-1	0	-1	u4 _ start _ code _ found = 0 ;	EMPTY	EMPTY
515	1770	2	-1	0	-1	}	EMPTY	EMPTY
515	1771	2	-1	0	-1	else if ( ( impeg2d _ bit _ stream _ nxt ( ps _ stream , start _ code _ len ) == picture _ start _ code )	EMPTY	EMPTY
515	1772	2	-1	0	-1	&& ( ps _ dec -> s _ bit _ stream . u4 _ offset < ps _ dec -> s _ bit _ stream . u4 _ max _ offset ) )	ps _ dec u4 _ offset ps _ dec u4 _ max _ offset	EMPTY
515	1773	3	-1	0	-1	{	EMPTY	EMPTY
515	1775	1	0	0	-1	e _ error = impeg2d _ dec _ pic _ hdr ( ps _ dec ) ;	impeg2d _ dec _ pic _ hdr ps _ dec	EMPTY
515	1776	2	-1	0	-1	if ( ( impeg2d _ error _ codes _ t ) ivd _ error _ none != e _ error )	EMPTY	EMPTY
515	1777	2	-1	0	-1	{	EMPTY	EMPTY
515	1778	2	-1	0	-1	return e _ error ;	EMPTY	EMPTY
515	1779	2	-1	0	-1	}	EMPTY	EMPTY
515	1780	2	-1	0	-1	impeg2d _ flush _ ext _ and _ user _ data ( ps _ dec ) ;	impeg2d _ flush _ ext _ and _ user _ data ps _ dec	EMPTY
515	1781	2	-1	0	-1	impeg2d _ pre _ pic _ dec _ proc ( ps _ dec ) ;	ps _ dec	EMPTY
515	1782	2	-1	0	-1	impeg2d _ dec _ pic _ data ( ps _ dec ) ;	ps _ dec	EMPTY
515	1783	2	-1	0	-1	impeg2d _ post _ pic _ dec _ proc ( ps _ dec ) ;	ps _ dec	EMPTY
515	1784	2	-1	0	-1	u4 _ start _ code _ found = 1 ;	EMPTY	EMPTY
515	1785	2	-1	0	-1	}	EMPTY	EMPTY
515	1786	2	-1	0	-1	else	EMPTY	EMPTY
515	1787	2	-1	0	-1	{	EMPTY	EMPTY
515	1788	2	-1	0	-1	flush _ bits ( ps _ dec -> s _ bit _ stream . u4 _ offset , ps _ dec -> s _ bit _ stream . u4 _ buf , ps _ dec -> s _ bit _ stream . u4 _ buf _ nxt , 8 , ps _ dec -> s _ bit _ stream . pu4 _ buf _ aligned ) ;	ps _ dec u4 _ offset ps _ dec u4 _ buf ps _ dec u4 _ buf _ nxt ps _ dec	EMPTY
515	1789	2	-1	0	-1	}	EMPTY	EMPTY
515	1790	3	-1	0	-1	impeg2d _ next _ start _ code ( ps _ dec ) ;	impeg2d _ next _ start _ code ps _ dec	EMPTY
515	1792	1	0	0	-1	}	EMPTY	EMPTY
515	1793	2	-1	0	-1	if ( ( u4 _ start _ code _ found == 0 ) && ( ps _ dec -> s _ bit _ stream . u4 _ offset > ps _ dec -> s _ bit _ stream . u4 _ max _ offset ) )	ps _ dec u4 _ offset ps _ dec u4 _ max _ offset	EMPTY
515	1794	2	-1	0	-1	{	EMPTY	EMPTY
515	1795	2	-1	0	-1	return impeg2d _ frm _ hdr _ start _ code _ not _ found ;	impeg2d _ frm _ hdr _ start _ code _ not _ found	EMPTY
515	1796	2	-1	0	-1	}	EMPTY	EMPTY
515	1797	3	-1	0	-1	}	EMPTY	EMPTY
515	1799	1	0	0	0	return ( impeg2d _ error _ codes _ t ) ivd _ error _ none	EMPTY	EMPTY
515	1800	3	-1	0	-1	}	EMPTY	EMPTY
522	66	1	0	0	-1	word16 impeg2d _ get _ luma _ dc _ diff ( stream _ t * ps _ stream )	impeg2d _ get _ luma _ dc _ diff stream _ t ps _ stream	EMPTY
522	67	2	-1	0	-1	{	EMPTY	EMPTY
522	68	2	-1	0	-1	uword16 u2 _ dc _ size ;	EMPTY	EMPTY
522	69	3	-1	0	-1	word16 i2 _ dc _ diff ;	EMPTY	EMPTY
522	71	1	0	0	-1	u2 _ dc _ size = impeg2d _ dec _ vld _ symbol ( ps _ stream  gai2 _ impeg2d _ dct _ dc _ size [ numconst ]	ps _ stream	EMPTY
522	72	2	-1	0	-1	mpeg2 _ dct _ dc _ luma _ size _ len ) +	EMPTY	EMPTY
522	73	2	-1	0	-1	mpeg2 _ dct _ dc _ size _ offset ;	EMPTY	EMPTY
522	74	2	-1	0	-1	if ( u2 _ dc _ size != 0 )	EMPTY	EMPTY
522	75	2	-1	0	-1	{	EMPTY	EMPTY
522	76	2	-1	0	-1	i2 _ dc _ diff = impeg2d _ bit _ stream _ get ( ps _ stream , u2 _ dc _ size ) ;	ps _ stream	EMPTY
522	77	2	-1	0	-1	if ( ( i2 _ dc _ diff & ( 1 << ( u2 _ dc _ size - 1 ) ) ) == 0 )	EMPTY	EMPTY
522	78	2	-1	0	-1	i2 _ dc _ diff -= ( 1 << u2 _ dc _ size ) - 1 ;	EMPTY	EMPTY
522	79	2	-1	0	-1	}	EMPTY	EMPTY
522	80	2	-1	0	-1	else	EMPTY	EMPTY
522	81	2	-1	0	-1	{	EMPTY	EMPTY
522	82	2	-1	0	-1	i2 _ dc _ diff = 0 ;	EMPTY	EMPTY
522	83	2	-1	0	-1	}	EMPTY	EMPTY
522	84	2	-1	0	-1	return i2 _ dc _ diff	EMPTY	EMPTY
522	85	3	-1	0	-1	}	EMPTY	EMPTY
522	112	1	0	0	-1	word16 impeg2d _ get _ chroma _ dc _ diff ( stream _ t * ps _ stream )	impeg2d _ get _ chroma _ dc _ diff stream _ t ps _ stream	EMPTY
522	113	2	-1	0	-1	{	EMPTY	EMPTY
522	114	2	-1	0	-1	uword16 u2 _ dc _ size ;	EMPTY	EMPTY
522	115	2	-1	0	-1	word16 i2 _ dc _ diff ;	EMPTY	EMPTY
522	116	2	-1	0	-1	u2 _ dc _ size = impeg2d _ dec _ vld _ symbol ( ps _ stream  gai2 _ impeg2d _ dct _ dc _ size [ numconst ]	ps _ stream	EMPTY
522	117	2	-1	0	-1	mpeg2 _ dct _ dc _ chroma _ size _ len ) +	EMPTY	EMPTY
522	118	2	-1	0	-1	mpeg2 _ dct _ dc _ size _ offset ;	EMPTY	EMPTY
522	119	2	-1	0	-1	if ( u2 _ dc _ size != 0 )	EMPTY	EMPTY
522	120	2	-1	0	-1	{	EMPTY	EMPTY
522	121	2	-1	0	-1	i2 _ dc _ diff = impeg2d _ bit _ stream _ get ( ps _ stream , u2 _ dc _ size ) ;	ps _ stream	EMPTY
522	122	2	-1	0	-1	if ( ( i2 _ dc _ diff & ( 1 << ( u2 _ dc _ size - 1 ) ) ) == 0 )	EMPTY	EMPTY
522	123	2	-1	0	-1	i2 _ dc _ diff -= ( 1 << u2 _ dc _ size ) - 1 ;	EMPTY	EMPTY
522	124	2	-1	0	-1	}	EMPTY	EMPTY
522	125	2	-1	0	-1	else	EMPTY	EMPTY
522	126	2	-1	0	-1	{	EMPTY	EMPTY
522	127	2	-1	0	-1	i2 _ dc _ diff = 0 ;	EMPTY	EMPTY
522	128	2	-1	0	-1	}	EMPTY	EMPTY
522	129	2	-1	0	-1	return i2 _ dc _ diff	EMPTY	EMPTY
522	130	3	-1	0	-1	}	EMPTY	EMPTY
522	141	1	0	0	-1	impeg2d _ error _ codes _ t impeg2d _ dec _ d _ slice ( dec _ state _ t * ps _ dec )	impeg2d _ dec _ d _ slice ps _ dec	EMPTY
522	142	2	-1	0	-1	{	EMPTY	EMPTY
522	143	2	-1	0	-1	uword32 i ;	EMPTY	EMPTY
522	144	3	-1	0	-1	yuv _ buf _ t * ps _ cur _ frm _ buf = & ps _ dec -> s _ cur _ frm _ buf ;	ps _ dec	EMPTY
522	146	1	0	0	0	stream _ t * ps _ stream = & ps _ dec -> s _ bit _ stream ;	stream _ t ps _ stream ps _ dec	EMPTY
522	147	3	-1	0	-1	uword8 * pu1 _ vld _ buf ;	EMPTY	EMPTY
522	149	1	0	0	0	word16 i2 _ dc _ diff ;	EMPTY	EMPTY
522	150	2	-1	0	-1	uword32 u4 _ frame _ width = ps _ dec -> u2 _ frame _ width ;	ps _ dec u2 _ frame _ width	EMPTY
522	151	2	-1	0	-1	uword32 u4 _ frm _ offset = 0 ;	EMPTY	EMPTY
522	152	2	-1	0	-1	if ( ps _ dec -> u2 _ picture _ structure != frame _ picture )	ps _ dec	EMPTY
522	153	2	-1	0	-1	{	EMPTY	EMPTY
522	154	2	-1	0	-1	u4 _ frame _ width <<= 1 ;	EMPTY	EMPTY
522	155	2	-1	0	-1	if ( ps _ dec -> u2 _ picture _ structure == bottom _ field )	ps _ dec	EMPTY
522	156	2	-1	0	-1	{	EMPTY	EMPTY
522	157	2	-1	0	-1	u4 _ frm _ offset = ps _ dec -> u2 _ frame _ width ;	ps _ dec u2 _ frame _ width	EMPTY
522	158	2	-1	0	-1	}	EMPTY	EMPTY
522	159	3	-1	0	-1	}	EMPTY	EMPTY
522	161	1	0	0	-1	do	EMPTY	EMPTY
522	162	3	-1	0	-1	{	EMPTY	EMPTY
522	164	1	0	0	0	uword32 u4 _ x _ offset , u4 _ y _ offset ;	u4 _ x _ offset u4 _ y _ offset	EMPTY
522	165	2	-1	0	-1	uword32 u4 _ blk _ pos ;	EMPTY	EMPTY
522	166	3	-1	0	-1	word16 i2 _ dc _ val ;	EMPTY	EMPTY
522	168	1	0	0	0	uword32 u4 _ dst _ x _ offset = u4 _ frm _ offset + ( ps _ dec -> u2 _ mb _ x << 4 ) ;	ps _ dec	EMPTY
522	169	2	-1	0	-1	uword32 u4 _ dst _ y _ offset = ( ps _ dec -> u2 _ mb _ y << 4 ) * u4 _ frame _ width ;	ps _ dec	EMPTY
522	170	2	-1	0	-1	uword8 * pu1 _ vld _ buf8 = ps _ cur _ frm _ buf -> pu1 _ y + u4 _ dst _ x _ offset + u4 _ dst _ y _ offset ;	EMPTY	EMPTY
522	171	3	-1	0	-1	uword32 u4 _ dst _ wd = u4 _ frame _ width ;	EMPTY	EMPTY
522	175	1	1	1	1	while ( impeg2d _ bit _ stream _ nxt ( ps _ stream , mb _ stuffing _ code _ len ) == mb _ stuffing _ code &&	ps _ stream	EMPTY
522	176	2	-1	0	-1	ps _ stream -> u4 _ offset < ps _ stream -> u4 _ max _ offset )	ps _ stream u4 _ offset ps _ stream u4 _ max _ offset	EMPTY
522	177	3	-1	0	-1	impeg2d _ bit _ stream _ flush ( ps _ stream , mb _ stuffing _ code _ len )	ps _ stream	EMPTY
522	182	1	1	1	1	impeg2d _ bit _ stream _ flush ( ps _ stream , 1 )	ps _ stream	EMPTY
522	184	1	1	0	1	if ( impeg2d _ bit _ stream _ get ( ps _ stream  numconst ) != numconst )	ps _ stream	EMPTY
522	185	2	-1	0	-1	{	EMPTY	EMPTY
522	187	3	-1	1	-1	}	EMPTY	EMPTY
522	190	1	1	1	1	for ( i = 0 ; i < num _ luma _ blks ; ++ i )	EMPTY	EMPTY
522	191	3	-1	0	-1	{	EMPTY	EMPTY
522	193	1	0	0	-1	u4 _ x _ offset = gai2 _ impeg2 _ blk _ x _ off [ i ] ;	u4 _ x _ offset	EMPTY
522	194	2	-1	0	-1	u4 _ y _ offset = gai2 _ impeg2 _ blk _ y _ off _ frm [ i ] ;	u4 _ y _ offset	EMPTY
522	195	2	-1	0	-1	u4 _ blk _ pos = ( u4 _ y _ offset * u4 _ dst _ wd ) + u4 _ x _ offset ;	u4 _ y _ offset u4 _ x _ offset	EMPTY
522	196	3	-1	0	-1	pu1 _ vld _ buf = pu1 _ vld _ buf8 + u4 _ blk _ pos ;	EMPTY	EMPTY
522	198	1	0	0	-1	i2 _ dc _ diff = impeg2d _ get _ luma _ dc _ diff ( ps _ stream ) ;	impeg2d _ get _ luma _ dc _ diff ps _ stream	EMPTY
522	199	2	-1	0	-1	i2 _ dc _ val = ps _ dec -> u2 _ def _ dc _ pred [ y _ luma ] + i2 _ dc _ diff ;	ps _ dec	EMPTY
522	200	2	-1	0	-1	ps _ dec -> u2 _ def _ dc _ pred [ y _ luma ] = i2 _ dc _ val ;	ps _ dec	EMPTY
522	201	3	-1	0	-1	i2 _ dc _ val = clip _ u8 ( i2 _ dc _ val ) ;	EMPTY	EMPTY
522	203	1	0	0	0	ps _ dec -> pf _ memset _ 8bit _ 8x8 _ block ( pu1 _ vld _ buf , i2 _ dc _ val , u4 _ dst _ wd ) ;	ps _ dec	EMPTY
522	204	3	-1	0	-1	}	EMPTY	EMPTY
522	210	1	1	1	-1	u4 _ dst _ x _ offset >>= 1	EMPTY	EMPTY
522	211	2	-1	0	-1	u4 _ dst _ y _ offset >>= 2	EMPTY	EMPTY
522	212	2	-1	0	-1	u4 _ dst _ wd >>= 1	EMPTY	EMPTY
522	213	2	-1	0	-1	pu1 _ vld _ buf = ps _ cur _ frm _ buf -> pu1 _ u + u4 _ dst _ x _ offset + u4 _ dst _ y _ offset	EMPTY	EMPTY
522	214	2	-1	0	-1	i2 _ dc _ diff = impeg2d _ get _ chroma _ dc _ diff ( ps _ stream )	impeg2d _ get _ chroma _ dc _ diff ps _ stream	EMPTY
522	215	2	-1	0	-1	i2 _ dc _ val = ps _ dec -> u2 _ def _ dc _ pred [ u _ chroma ] + i2 _ dc _ diff	ps _ dec	EMPTY
522	216	2	-1	0	-1	ps _ dec -> u2 _ def _ dc _ pred [ u _ chroma ] = i2 _ dc _ val	ps _ dec	EMPTY
522	217	2	-1	0	-1	i2 _ dc _ val = clip _ u8 ( i2 _ dc _ val )	EMPTY	EMPTY
522	218	3	-1	0	-1	ps _ dec -> pf _ memset _ 8bit _ 8x8 _ block ( pu1 _ vld _ buf , i2 _ dc _ val , u4 _ dst _ wd )	ps _ dec	EMPTY
522	223	1	1	1	-1	pu1 _ vld _ buf = ps _ cur _ frm _ buf -> pu1 _ v + u4 _ dst _ x _ offset + u4 _ dst _ y _ offset	EMPTY	EMPTY
522	224	2	-1	0	-1	i2 _ dc _ diff = impeg2d _ get _ chroma _ dc _ diff ( ps _ stream )	impeg2d _ get _ chroma _ dc _ diff ps _ stream	EMPTY
522	225	2	-1	0	-1	i2 _ dc _ val = ps _ dec -> u2 _ def _ dc _ pred [ v _ chroma ] + i2 _ dc _ diff	ps _ dec	EMPTY
522	226	2	-1	0	-1	ps _ dec -> u2 _ def _ dc _ pred [ v _ chroma ] = i2 _ dc _ val	ps _ dec	EMPTY
522	227	2	-1	0	-1	i2 _ dc _ val = clip _ u8 ( i2 _ dc _ val )	EMPTY	EMPTY
522	228	3	-1	0	-1	ps _ dec -> pf _ memset _ 8bit _ 8x8 _ block ( pu1 _ vld _ buf , i2 _ dc _ val , u4 _ dst _ wd )	ps _ dec	EMPTY
522	233	1	1	1	-1	ps _ dec -> u2 _ num _ mbs _ left --	ps _ dec	EMPTY
522	234	3	-1	0	-1	ps _ dec -> u2 _ mb _ x ++	ps _ dec	EMPTY
522	236	1	0	0	0	if ( ps _ dec -> s _ bit _ stream . u4 _ offset > ps _ dec -> s _ bit _ stream . u4 _ max _ offset )	ps _ dec u4 _ offset ps _ dec u4 _ max _ offset	EMPTY
522	237	2	-1	0	-1	{	EMPTY	EMPTY
522	238	2	-1	0	-1	return impeg2d _ bitstream _ buff _ exceeded _ err ;	EMPTY	EMPTY
522	239	2	-1	0	-1	}	EMPTY	EMPTY
522	240	2	-1	0	-1	else if ( ps _ dec -> u2 _ mb _ x == ps _ dec -> u2 _ num _ horiz _ mb )	ps _ dec ps _ dec	EMPTY
522	241	2	-1	0	-1	{	EMPTY	EMPTY
522	242	2	-1	0	-1	ps _ dec -> u2 _ mb _ x = 0 ;	ps _ dec	EMPTY
522	243	3	-1	0	-1	ps _ dec -> u2 _ mb _ y ++ ;	ps _ dec	EMPTY
522	245	1	0	0	-1	}	EMPTY	EMPTY
522	248	1	1	1	1	impeg2d _ bit _ stream _ flush ( ps _ stream , 1 )	ps _ stream	EMPTY
522	249	2	-1	0	-1	}	EMPTY	EMPTY
522	250	2	-1	0	-1	while ( ps _ dec -> u2 _ num _ mbs _ left != numconst && impeg2d _ bit _ stream _ nxt ( & ps _ dec -> s _ bit _ stream  numconst ) != numconst ) ;	ps _ dec ps _ dec	EMPTY
522	251	2	-1	0	-1	return ( impeg2d _ error _ codes _ t ) ivd _ error _ none ;	EMPTY	EMPTY
522	252	3	-1	1	-1	}	EMPTY	EMPTY
530	75	1	0	0	0	nfqueue } nftype _ t ;	EMPTY	EMPTY
530	80	1	0	0	-1	struct pcap _ netfilter {	pcap _ netfilter	EMPTY
530	81	2	-1	0	-1	u _ int packets _ read ;	packets _ read	EMPTY
530	82	3	-1	0	-1	} ;	EMPTY	EMPTY
530	84	1	0	0	-1	static int nfqueue _ send _ verdict ( const pcap _ t * handle  u _ int16 _ t group _ id  u _ int32 _ t id  u _ int32 _ t verdict ) ;	EMPTY	EMPTY
530	86	1	0	0	-1	static int	EMPTY	EMPTY
530	87	2	-1	0	-1	netfilter _ read _ linux ( pcap _ t * handle  int max _ packets  pcap _ handler callback  u _ char * user )	EMPTY	EMPTY
530	88	2	-1	0	-1	{	EMPTY	EMPTY
530	89	2	-1	0	-1	struct pcap _ netfilter * handlep = handle -> priv ;	pcap _ netfilter priv	EMPTY
530	90	2	-1	0	-1	const unsigned char * buf ;	EMPTY	EMPTY
530	91	2	-1	0	-1	int count = 0 ;	EMPTY	EMPTY
530	92	3	-1	0	-1	int len ;	len	EMPTY
530	95	1	1	1	-1	do {	EMPTY	EMPTY
530	96	2	-1	0	-1	len = recv ( handle -> fd , handle -> buffer , handle -> bufsize , 0 ) ;	len bufsize	recv
530	97	2	-1	0	-1	if ( handle -> break _ loop ) {	break _ loop	EMPTY
530	98	2	-1	0	-1	handle -> break _ loop = 0 ;	break _ loop	EMPTY
530	99	2	-1	0	-1	return - 2 ;	EMPTY	EMPTY
530	100	2	-1	0	-1	}	EMPTY	EMPTY
530	101	3	-1	0	-1	} while ( ( len == - 1 ) && ( errno == eintr ) )	len	EMPTY
530	103	1	0	0	0	if ( len < 0 ) {	len	EMPTY
530	104	2	-1	0	-1	snprintf ( handle -> errbuf , pcap _ errbuf _ size ,  " can't receive packet %d:%s "  , errno , pcap _ strerror ( errno ) ) ;	EMPTY	EMPTY
530	105	2	-1	0	-1	return - 1 ;	EMPTY	EMPTY
530	106	3	-1	0	-1	}	EMPTY	EMPTY
530	108	1	0	0	-1	buf = handle -> buffer	EMPTY	EMPTY
530	109	2	-1	0	-1	while ( len >= nlmsg _ space ( numconst ) ) {	len	EMPTY
530	110	2	-1	0	-1	const struct nlmsghdr * nlh = ( const struct nlmsghdr * ) buf ;	EMPTY	EMPTY
530	111	2	-1	0	-1	u _ int32 _ t msg _ len ;	EMPTY	EMPTY
530	112	3	-1	0	-1	nftype _ t type = other ;	EMPTY	EMPTY
530	114	1	0	0	0	if ( nlh -> nlmsg _ len < sizeof ( struct nlmsghdr ) || len < nlh -> nlmsg _ len ) {	len	EMPTY
530	115	2	-1	0	-1	snprintf ( handle -> errbuf , pcap _ errbuf _ size ,  " message truncated: (got: %d) (nlmsg _ len: %u) "  , len , nlh -> nlmsg _ len ) ;	len	EMPTY
530	116	2	-1	0	-1	return - 1 ;	EMPTY	EMPTY
530	117	3	-1	0	-1	}	EMPTY	EMPTY
530	119	1	0	0	0	if ( nfnl _ subsys _ id ( nlh -> nlmsg _ type ) == nfnl _ subsys _ ulog &&	EMPTY	EMPTY
530	120	2	-1	0	-1	nfnl _ msg _ type ( nlh -> nlmsg _ type ) == nfulnl _ msg _ packet )	EMPTY	nfulnl _ msg _ packet
530	121	2	-1	0	-1	type = nflog ;	EMPTY	EMPTY
530	122	2	-1	0	-1	else if ( nfnl _ subsys _ id ( nlh -> nlmsg _ type ) == nfnl _ subsys _ queue &&	EMPTY	EMPTY
530	123	2	-1	0	-1	nfnl _ msg _ type ( nlh -> nlmsg _ type ) == nfqnl _ msg _ packet )	EMPTY	nfqnl _ msg _ packet
530	124	3	-1	0	-1	type = nfqueue	EMPTY	EMPTY
530	126	1	0	0	0	if ( type != other ) {	EMPTY	EMPTY
530	127	2	-1	0	-1	const unsigned char * payload = null ;	EMPTY	EMPTY
530	128	3	-1	0	-1	struct pcap _ pkthdr pkth ;	pcap _ pkthdr	EMPTY
530	130	1	0	0	0	const struct nfgenmsg * nfg = null ;	EMPTY	EMPTY
530	131	3	-1	0	-1	int id = 0 ;	EMPTY	EMPTY
530	133	1	0	0	0	if ( handle -> linktype != dlt _ nflog ) {	linktype	EMPTY
530	134	3	-1	0	-1	const struct nfattr * payload _ attr = null ;	EMPTY	EMPTY
530	136	1	0	0	0	if ( nlh -> nlmsg _ len < hdr _ length ) {	EMPTY	EMPTY
530	137	2	-1	0	-1	snprintf ( handle -> errbuf , pcap _ errbuf _ size ,  " malformed message: (nlmsg _ len: %u) "  , nlh -> nlmsg _ len ) ;	EMPTY	EMPTY
530	138	2	-1	0	-1	return - 1 ;	EMPTY	EMPTY
530	139	3	-1	0	-1	}	EMPTY	EMPTY
530	141	1	0	0	-1	nfg = nlmsg _ data ( nlh ) ;	EMPTY	EMPTY
530	142	2	-1	0	-1	if ( nlh -> nlmsg _ len > hdr _ length ) {	EMPTY	EMPTY
530	143	2	-1	0	-1	struct nfattr * attr = nfm _ nfa ( nfg ) ;	EMPTY	EMPTY
530	144	3	-1	0	-1	int attr _ len = nlh -> nlmsg _ len - nlmsg _ align ( hdr _ length ) ;	EMPTY	EMPTY
530	146	1	0	0	0	while ( nfa _ ok ( attr , attr _ len ) ) {	EMPTY	EMPTY
530	147	2	-1	0	-1	if ( type == nfqueue ) {	EMPTY	EMPTY
530	148	2	-1	0	-1	switch ( nfa _ type ( attr ) ) {	EMPTY	EMPTY
530	149	2	-1	0	-1	case nfqa _ packet _ hdr :	EMPTY	nfqa _ packet _ hdr
530	150	2	-1	0	-1	{	EMPTY	EMPTY
530	151	3	-1	0	-1	const struct nfqnl _ msg _ packet _ hdr * pkt _ hdr = ( const struct nfqnl _ msg _ packet _ hdr * ) nfa _ data ( attr ) ;	EMPTY	EMPTY
530	153	1	0	0	-1	id = ntohl ( pkt _ hdr -> packet _ id ) ;	EMPTY	EMPTY
530	154	2	-1	0	-1	break ;	EMPTY	EMPTY
530	155	2	-1	0	-1	}	EMPTY	EMPTY
530	156	2	-1	0	-1	case nfqa _ payload :	EMPTY	nfqa _ payload
530	157	2	-1	0	-1	payload _ attr = attr ;	EMPTY	EMPTY
530	158	2	-1	0	-1	break ;	EMPTY	EMPTY
530	159	3	-1	0	-1	}	EMPTY	EMPTY
530	161	1	0	0	0	} else if ( type == nflog ) {	EMPTY	EMPTY
530	162	2	-1	0	-1	switch ( nfa _ type ( attr ) ) {	EMPTY	EMPTY
530	163	2	-1	0	-1	case nfula _ payload :	EMPTY	nfula _ payload
530	164	2	-1	0	-1	payload _ attr = attr ;	EMPTY	EMPTY
530	165	2	-1	0	-1	break ;	EMPTY	EMPTY
530	166	2	-1	0	-1	}	EMPTY	EMPTY
530	167	2	-1	0	-1	}	EMPTY	EMPTY
530	168	2	-1	0	-1	attr = nfa _ next ( attr , attr _ len ) ;	EMPTY	EMPTY
530	169	2	-1	0	-1	}	EMPTY	EMPTY
530	170	3	-1	0	-1	}	EMPTY	EMPTY
530	172	1	0	0	0	if ( payload _ attr ) {	EMPTY	EMPTY
530	173	2	-1	0	-1	payload = nfa _ data ( payload _ attr ) ;	EMPTY	EMPTY
530	174	2	-1	0	-1	pkth . len = pkth . caplen = nfa _ payload ( payload _ attr ) ;	len caplen	EMPTY
530	175	3	-1	0	-1	}	EMPTY	EMPTY
530	177	1	0	0	-1	} else {	EMPTY	EMPTY
530	178	2	-1	0	-1	payload = nlmsg _ data ( nlh ) ;	EMPTY	EMPTY
530	179	2	-1	0	-1	pkth . caplen = pkth . len = nlh -> nlmsg _ len - nlmsg _ align ( sizeof ( struct nlmsghdr ) ) ;	caplen len	EMPTY
530	180	3	-1	0	-1	}	EMPTY	EMPTY
530	182	1	0	0	0	if ( payload ) {	EMPTY	EMPTY
530	185	1	1	1	1	gettimeofday ( & pkth . ts , null )	ts	gettimeofday
530	186	2	-1	0	-1	if ( handle -> fcode . bf _ insns == null ||	fcode	EMPTY
530	187	2	-1	0	-1	bpf _ filter ( handle -> fcode . bf _ insns , payload , pkth . len , pkth . caplen ) )	fcode len caplen	EMPTY
530	188	2	-1	0	-1	{	EMPTY	EMPTY
530	189	2	-1	0	-1	handlep -> packets _ read ++ ;	packets _ read	EMPTY
530	190	2	-1	0	-1	callback ( user , & pkth , payload ) ;	EMPTY	EMPTY
530	191	2	-1	0	-1	count ++ ;	EMPTY	EMPTY
530	192	2	-1	0	-1	}	EMPTY	EMPTY
530	193	3	-1	0	-1	}	EMPTY	EMPTY
530	195	1	0	0	0	if ( type == nfqueue ) {	EMPTY	EMPTY
530	199	1	1	1	1	if ( nfg != null )	EMPTY	EMPTY
530	200	2	-1	0	-1	nfqueue _ send _ verdict ( handle , ntohs ( nfg -> res _ id ) , id , nf _ accept )	EMPTY	EMPTY
530	201	2	-1	0	-1	}	EMPTY	EMPTY
530	202	3	-1	0	-1	}	EMPTY	EMPTY
530	204	1	0	0	-1	msg _ len = nlmsg _ align ( nlh -> nlmsg _ len ) ;	EMPTY	EMPTY
530	205	2	-1	0	-1	if ( msg _ len > len )	len	EMPTY
530	206	3	-1	0	-1	msg _ len = len ;	len	EMPTY
530	208	1	0	0	-1	len -= msg _ len ;	len	EMPTY
530	209	2	-1	0	-1	buf += msg _ len ;	EMPTY	EMPTY
530	210	2	-1	0	-1	}	EMPTY	EMPTY
530	211	2	-1	0	-1	return count ;	EMPTY	EMPTY
530	212	3	-1	0	-1	}	EMPTY	EMPTY
530	214	1	0	0	-1	static int	EMPTY	EMPTY
530	215	2	-1	0	-1	netfilter _ set _ datalink ( pcap _ t * handle  int dlt )	EMPTY	EMPTY
530	216	2	-1	0	-1	{	EMPTY	EMPTY
530	217	2	-1	0	-1	handle -> linktype = dlt ;	linktype	EMPTY
530	218	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
530	219	3	-1	0	-1	}	EMPTY	EMPTY
530	221	1	0	0	-1	static int	EMPTY	EMPTY
530	222	2	-1	0	-1	netfilter _ stats _ linux ( pcap _ t * handle  struct pcap _ stat * stats )	pcap _ stat	EMPTY
530	223	2	-1	0	-1	{	EMPTY	EMPTY
530	224	3	-1	0	-1	struct pcap _ netfilter * handlep = handle -> priv ;	pcap _ netfilter priv	EMPTY
530	226	1	0	0	-1	stats -> ps _ recv = handlep -> packets _ read ;	ps _ recv packets _ read	EMPTY
530	227	2	-1	0	-1	stats -> ps _ drop = numconst ;	ps _ drop	EMPTY
530	228	2	-1	0	-1	stats -> ps _ ifdrop = numconst ;	ps _ ifdrop	EMPTY
530	229	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
530	230	3	-1	0	-1	}	EMPTY	EMPTY
530	232	1	0	0	-1	static int	EMPTY	EMPTY
530	233	2	-1	0	-1	netfilter _ inject _ linux ( pcap _ t * handle  const void * buf  size _ t size )	size	EMPTY
530	234	2	-1	0	-1	{	EMPTY	EMPTY
530	235	2	-1	0	-1	snprintf ( handle -> errbuf  pcap _ errbuf _ size  strlit ) ;	EMPTY	EMPTY
530	236	2	-1	0	-1	return ( - numconst ) ;	EMPTY	EMPTY
530	237	3	-1	0	-1	}	EMPTY	EMPTY
530	239	1	0	0	-1	struct my _ nfattr {	EMPTY	EMPTY
530	240	2	-1	0	-1	u _ int16 _ t nfa _ len ;	EMPTY	EMPTY
530	241	2	-1	0	-1	u _ int16 _ t nfa _ type ;	EMPTY	EMPTY
530	242	2	-1	0	-1	void * data ;	EMPTY	EMPTY
530	243	3	-1	0	-1	} ;	EMPTY	EMPTY
530	245	1	0	0	-1	static int	EMPTY	EMPTY
530	246	2	-1	0	-1	netfilter _ send _ config _ msg ( const pcap _ t * handle  u _ int16 _ t msg _ type  int ack  u _ int8 _ t family  u _ int16 _ t res _ id  const struct my _ nfattr * mynfa )	EMPTY	EMPTY
530	247	2	-1	0	-1	{	EMPTY	EMPTY
530	248	3	-1	0	-1	char buf [ numconst ]  _  _ attribute _  _  ( ( aligned ) ) ;	EMPTY	EMPTY
530	250	1	0	0	0	struct nlmsghdr * nlh = ( struct nlmsghdr * ) buf ;	EMPTY	EMPTY
530	251	3	-1	0	-1	struct nfgenmsg * nfg = ( struct nfgenmsg * ) ( buf + sizeof ( struct nlmsghdr ) ) ;	EMPTY	EMPTY
530	253	1	0	0	0	struct sockaddr _ nl snl ;	EMPTY	EMPTY
530	254	3	-1	0	-1	static unsigned int seq _ id ;	EMPTY	EMPTY
530	256	1	0	0	0	if ( ! seq _ id )	EMPTY	EMPTY
530	257	2	-1	0	-1	seq _ id = time ( null ) ;	EMPTY	time
530	258	3	-1	0	-1	++ seq _ id ;	EMPTY	EMPTY
530	260	1	1	0	-1	nlh -> nlmsg _ len = nlmsg _ length ( sizeof ( struct nfgenmsg ) ) ;	EMPTY	EMPTY
530	261	2	-1	0	-1	nlh -> nlmsg _ type = msg _ type ;	EMPTY	EMPTY
530	262	2	-1	0	-1	nlh -> nlmsg _ flags = nlm _ f _ request | ( ack ? nlm _ f _ ack : numconst ) ;	EMPTY	EMPTY
530	263	2	-1	1	-1	nlh -> nlmsg _ pid = numconst ;	EMPTY	EMPTY
530	264	3	-1	0	-1	nlh -> nlmsg _ seq = seq _ id	EMPTY	EMPTY
530	266	1	0	0	-1	nfg -> nfgen _ family = family	EMPTY	EMPTY
530	267	2	-1	0	-1	nfg -> version = nfnetlink _ v0 ;	EMPTY	EMPTY
530	268	3	-1	0	-1	nfg -> res _ id = htons ( res _ id ) ;	EMPTY	EMPTY
530	270	1	0	0	0	if ( mynfa ) {	EMPTY	EMPTY
530	271	3	-1	0	-1	struct nfattr * nfa = ( struct nfattr * ) ( buf + nlmsg _ align ( nlh -> nlmsg _ len ) ) ;	EMPTY	EMPTY
530	273	1	0	0	-1	nfa -> nfa _ type = mynfa -> nfa _ type ;	EMPTY	EMPTY
530	274	2	-1	0	-1	nfa -> nfa _ len = nfa _ length ( mynfa -> nfa _ len ) ;	EMPTY	EMPTY
530	275	2	-1	0	-1	memcpy ( nfa _ data ( nfa ) , mynfa -> data , mynfa -> nfa _ len ) ;	EMPTY	memcpy
530	276	2	-1	0	-1	nlh -> nlmsg _ len = nlmsg _ align ( nlh -> nlmsg _ len ) + nfa _ align ( nfa -> nfa _ len ) ;	EMPTY	EMPTY
530	277	3	-1	0	-1	}	EMPTY	EMPTY
530	279	1	0	0	0	memset ( & snl , 0 , sizeof ( snl ) )	EMPTY	memset
530	280	3	-1	0	-1	snl . nl _ family = af _ netlink ;	EMPTY	EMPTY
530	282	1	0	0	0	if ( sendto ( handle -> fd , nlh , nlh -> nlmsg _ len , 0 , ( struct sockaddr * ) & snl , sizeof ( snl ) ) == - 1 )	sockaddr	sendto
530	283	3	-1	0	-1	return - 1	EMPTY	EMPTY
530	285	1	0	0	0	if ( ! ack )	EMPTY	EMPTY
530	286	3	-1	0	-1	return 0	EMPTY	EMPTY
530	289	1	1	1	-1	do {	EMPTY	EMPTY
530	290	2	-1	0	-1	socklen _ t addrlen = sizeof ( snl ) ;	EMPTY	EMPTY
530	291	3	-1	0	-1	int len ;	len	EMPTY
530	294	1	1	1	-1	do {	EMPTY	EMPTY
530	295	2	-1	0	-1	len = recvfrom ( handle -> fd , buf , sizeof ( buf ) , 0 , ( struct sockaddr * ) & snl , & addrlen ) ;	len sockaddr	recvfrom
530	296	3	-1	0	-1	} while ( ( len == - 1 ) && ( errno == eintr ) )	len	EMPTY
530	298	1	0	0	0	if ( len <= 0 )	len	EMPTY
530	299	3	-1	0	-1	return len	len	EMPTY
530	301	1	0	0	0	if ( addrlen != sizeof ( snl ) || snl . nl _ family != af _ netlink ) {	EMPTY	EMPTY
530	302	2	-1	0	-1	errno = einval ;	EMPTY	EMPTY
530	303	2	-1	0	-1	return - 1 ;	EMPTY	EMPTY
530	304	3	-1	0	-1	}	EMPTY	EMPTY
530	306	1	0	0	-1	nlh = ( struct nlmsghdr * ) buf	EMPTY	EMPTY
530	307	2	-1	0	-1	if ( snl . nl _ pid != numconst || seq _ id != nlh -> nlmsg _ seq )	EMPTY	EMPTY
530	308	3	-1	0	-1	continue ;	EMPTY	EMPTY
530	310	1	0	0	0	while ( len >= nlmsg _ space ( 0 ) && nlmsg _ ok ( nlh , len ) ) {	len len	EMPTY
530	311	2	-1	0	-1	if ( nlh -> nlmsg _ type == nlmsg _ error || ( nlh -> nlmsg _ type == nlmsg _ done && nlh -> nlmsg _ flags & nlm _ f _ multi ) ) {	EMPTY	EMPTY
530	312	2	-1	0	-1	if ( nlh -> nlmsg _ len < nlmsg _ align ( sizeof ( struct nlmsgerr ) ) ) {	EMPTY	EMPTY
530	313	2	-1	0	-1	errno = ebadmsg ;	EMPTY	EMPTY
530	314	2	-1	0	-1	return - 1 ;	EMPTY	EMPTY
530	315	2	-1	0	-1	}	EMPTY	EMPTY
530	316	2	-1	0	-1	errno = - ( * ( ( int * ) nlmsg _ data ( nlh ) ) ) ;	EMPTY	EMPTY
530	317	2	-1	0	-1	return ( errno == 0 ) ? 0 : - 1 ;	EMPTY	EMPTY
530	318	2	-1	0	-1	}	EMPTY	EMPTY
530	319	2	-1	0	-1	nlh = nlmsg _ next ( nlh , len ) ;	len	EMPTY
530	320	2	-1	0	-1	}	EMPTY	EMPTY
530	321	3	-1	0	-1	} while ( numconst ) ;	EMPTY	EMPTY
530	323	1	0	0	-1	return - numconst ;	EMPTY	EMPTY
530	324	3	-1	0	-1	}	EMPTY	EMPTY
530	326	1	0	0	-1	static int	EMPTY	EMPTY
530	327	2	-1	0	-1	nflog _ send _ config _ msg ( const pcap _ t * handle  u _ int8 _ t family  u _ int16 _ t group _ id  const struct my _ nfattr * mynfa )	EMPTY	EMPTY
530	328	2	-1	0	-1	{	EMPTY	EMPTY
530	329	2	-1	0	-1	return netfilter _ send _ config _ msg ( handle  ( nfnl _ subsys _ ulog << numconst ) | nfulnl _ msg _ config  numconst  family  group _ id  mynfa ) ;	EMPTY	nfulnl _ msg _ config
530	330	3	-1	0	-1	}	EMPTY	EMPTY
530	332	1	0	0	-1	static int	EMPTY	EMPTY
530	333	2	-1	0	-1	nflog _ send _ config _ cmd ( const pcap _ t * handle  u _ int16 _ t group _ id  u _ int8 _ t cmd  u _ int8 _ t family )	EMPTY	EMPTY
530	334	2	-1	0	-1	{	EMPTY	EMPTY
530	335	2	-1	0	-1	struct nfulnl _ msg _ config _ cmd msg ;	EMPTY	EMPTY
530	336	3	-1	0	-1	struct my _ nfattr nfa ;	EMPTY	EMPTY
530	338	1	0	0	-1	msg . command = cmd ;	EMPTY	EMPTY
530	340	1	0	0	-1	nfa . data = & msg ;	EMPTY	EMPTY
530	341	2	-1	0	-1	nfa . nfa _ type = nfula _ cfg _ cmd ;	EMPTY	nfula _ cfg _ cmd
530	342	3	-1	0	-1	nfa . nfa _ len = sizeof ( msg ) ;	EMPTY	EMPTY
530	344	1	0	0	0	return nflog _ send _ config _ msg ( handle  family  group _ id  & nfa ) ;	EMPTY	EMPTY
530	345	3	-1	0	-1	}	EMPTY	EMPTY
530	347	1	0	0	-1	static int	EMPTY	EMPTY
530	348	2	-1	0	-1	nflog _ send _ config _ mode ( const pcap _ t * handle  u _ int16 _ t group _ id  u _ int8 _ t copy _ mode  u _ int32 _ t copy _ range )	EMPTY	EMPTY
530	349	2	-1	0	-1	{	EMPTY	EMPTY
530	350	2	-1	0	-1	struct nfulnl _ msg _ config _ mode msg ;	EMPTY	EMPTY
530	351	3	-1	0	-1	struct my _ nfattr nfa ;	EMPTY	EMPTY
530	353	1	0	0	-1	msg . copy _ range = htonl ( copy _ range ) ;	EMPTY	EMPTY
530	354	3	-1	0	-1	msg . copy _ mode = copy _ mode ;	EMPTY	EMPTY
530	356	1	0	0	-1	nfa . data = & msg ;	EMPTY	EMPTY
530	357	2	-1	0	-1	nfa . nfa _ type = nfula _ cfg _ mode ;	EMPTY	nfula _ cfg _ mode
530	358	3	-1	0	-1	nfa . nfa _ len = sizeof ( msg ) ;	EMPTY	EMPTY
530	360	1	0	0	0	return nflog _ send _ config _ msg ( handle  af _ unspec  group _ id  & nfa ) ;	EMPTY	EMPTY
530	361	3	-1	0	-1	}	EMPTY	EMPTY
530	363	1	0	0	-1	static int	EMPTY	EMPTY
530	364	2	-1	0	-1	nfqueue _ send _ verdict ( const pcap _ t * handle  u _ int16 _ t group _ id  u _ int32 _ t id  u _ int32 _ t verdict )	EMPTY	EMPTY
530	365	2	-1	0	-1	{	EMPTY	EMPTY
530	366	2	-1	0	-1	struct nfqnl _ msg _ verdict _ hdr msg ;	EMPTY	EMPTY
530	367	3	-1	0	-1	struct my _ nfattr nfa ;	EMPTY	EMPTY
530	369	1	0	0	-1	msg . id = htonl ( id ) ;	EMPTY	EMPTY
530	370	3	-1	0	-1	msg . verdict = htonl ( verdict ) ;	EMPTY	EMPTY
530	372	1	0	0	-1	nfa . data = & msg ;	EMPTY	EMPTY
530	373	2	-1	0	-1	nfa . nfa _ type = nfqa _ verdict _ hdr ;	EMPTY	nfqa _ verdict _ hdr
530	374	3	-1	0	-1	nfa . nfa _ len = sizeof ( msg ) ;	EMPTY	EMPTY
530	376	1	0	0	0	return netfilter _ send _ config _ msg ( handle  ( nfnl _ subsys _ queue << numconst ) | nfqnl _ msg _ verdict  numconst  af _ unspec  group _ id  & nfa ) ;	EMPTY	nfqnl _ msg _ verdict
530	377	3	-1	0	-1	}	EMPTY	EMPTY
530	379	1	0	0	-1	static int	EMPTY	EMPTY
530	380	2	-1	0	-1	nfqueue _ send _ config _ msg ( const pcap _ t * handle  u _ int8 _ t family  u _ int16 _ t group _ id  const struct my _ nfattr * mynfa )	EMPTY	EMPTY
530	381	2	-1	0	-1	{	EMPTY	EMPTY
530	382	2	-1	0	-1	return netfilter _ send _ config _ msg ( handle  ( nfnl _ subsys _ queue << numconst ) | nfqnl _ msg _ config  numconst  family  group _ id  mynfa ) ;	EMPTY	nfqnl _ msg _ config
530	383	3	-1	0	-1	}	EMPTY	EMPTY
530	385	1	0	0	-1	static int	EMPTY	EMPTY
530	386	2	-1	0	-1	nfqueue _ send _ config _ cmd ( const pcap _ t * handle  u _ int16 _ t group _ id  u _ int8 _ t cmd  u _ int16 _ t pf )	EMPTY	EMPTY
530	387	2	-1	0	-1	{	EMPTY	EMPTY
530	388	2	-1	0	-1	struct nfqnl _ msg _ config _ cmd msg ;	EMPTY	EMPTY
530	389	3	-1	0	-1	struct my _ nfattr nfa ;	EMPTY	EMPTY
530	391	1	0	0	-1	msg . command = cmd ;	EMPTY	EMPTY
530	392	3	-1	0	-1	msg . pf = htons ( pf ) ;	EMPTY	EMPTY
530	394	1	0	0	-1	nfa . data = & msg ;	EMPTY	EMPTY
530	395	2	-1	0	-1	nfa . nfa _ type = nfqa _ cfg _ cmd ;	EMPTY	nfqa _ cfg _ cmd
530	396	3	-1	0	-1	nfa . nfa _ len = sizeof ( msg ) ;	EMPTY	EMPTY
530	398	1	0	0	0	return nfqueue _ send _ config _ msg ( handle  af _ unspec  group _ id  & nfa ) ;	EMPTY	EMPTY
530	399	3	-1	0	-1	}	EMPTY	EMPTY
530	401	1	0	0	-1	static int	EMPTY	EMPTY
530	402	2	-1	0	-1	nfqueue _ send _ config _ mode ( const pcap _ t * handle  u _ int16 _ t group _ id  u _ int8 _ t copy _ mode  u _ int32 _ t copy _ range )	EMPTY	EMPTY
530	403	2	-1	0	-1	{	EMPTY	EMPTY
530	404	2	-1	0	-1	struct nfqnl _ msg _ config _ params msg ;	EMPTY	EMPTY
530	405	3	-1	0	-1	struct my _ nfattr nfa ;	EMPTY	EMPTY
530	407	1	0	0	-1	msg . copy _ range = htonl ( copy _ range ) ;	EMPTY	EMPTY
530	408	3	-1	0	-1	msg . copy _ mode = copy _ mode ;	EMPTY	EMPTY
530	410	1	0	0	-1	nfa . data = & msg ;	EMPTY	EMPTY
530	411	2	-1	0	-1	nfa . nfa _ type = nfqa _ cfg _ params ;	EMPTY	nfqa _ cfg _ params
530	412	3	-1	0	-1	nfa . nfa _ len = sizeof ( msg ) ;	EMPTY	EMPTY
530	414	1	0	0	0	return nfqueue _ send _ config _ msg ( handle  af _ unspec  group _ id  & nfa ) ;	EMPTY	EMPTY
530	415	3	-1	0	-1	}	EMPTY	EMPTY
530	417	1	0	0	-1	static int	EMPTY	EMPTY
530	418	2	-1	0	-1	netfilter _ activate ( pcap _ t * handle )	EMPTY	EMPTY
530	419	2	-1	0	-1	{	EMPTY	EMPTY
530	420	2	-1	0	-1	const char * dev = handle -> opt . source ;	EMPTY	EMPTY
530	421	2	-1	0	-1	unsigned short groups [ numconst ] ;	EMPTY	EMPTY
530	422	2	-1	0	-1	int group _ count = numconst ;	EMPTY	EMPTY
530	423	2	-1	0	-1	nftype _ t type = other ;	EMPTY	EMPTY
530	424	3	-1	0	-1	int i ;	EMPTY	EMPTY
530	426	1	0	0	0	if ( strncmp ( dev  nflog _ iface  strlen ( nflog _ iface ) ) == numconst ) {	EMPTY	strncmp strlen
530	427	2	-1	0	-1	dev += strlen ( nflog _ iface ) ;	EMPTY	strlen
530	428	3	-1	0	-1	type = nflog ;	EMPTY	EMPTY
530	430	1	0	0	0	if ( strncmp ( dev  nfqueue _ iface  strlen ( nfqueue _ iface ) ) == numconst ) {	EMPTY	strncmp strlen
530	431	2	-1	0	-1	dev += strlen ( nfqueue _ iface ) ;	EMPTY	strlen
530	432	2	-1	0	-1	type = nfqueue ;	EMPTY	EMPTY
530	433	3	-1	0	-1	}	EMPTY	EMPTY
530	435	1	0	0	0	if ( type != other && * dev == ':' ) {	EMPTY	EMPTY
530	436	2	-1	0	-1	dev ++ ;	EMPTY	EMPTY
530	437	2	-1	0	-1	while ( * dev ) {	EMPTY	EMPTY
530	438	2	-1	0	-1	long int group _ id ;	EMPTY	EMPTY
530	439	3	-1	0	-1	char * end _ dev ;	EMPTY	EMPTY
530	441	1	0	0	0	if ( group _ count == numconst ) {	EMPTY	EMPTY
530	442	2	-1	0	-1	snprintf ( handle -> errbuf  pcap _ errbuf _ size	EMPTY	EMPTY
530	443	2	-1	0	-1	strlit	EMPTY	EMPTY
530	444	2	-1	0	-1	handle -> opt . source ) ;	EMPTY	EMPTY
530	445	2	-1	0	-1	return pcap _ error ;	EMPTY	EMPTY
530	446	3	-1	0	-1	}	EMPTY	EMPTY
530	448	1	0	0	-1	group _ id = strtol ( dev  & end _ dev  numconst ) ;	EMPTY	strtol
530	449	2	-1	0	-1	if ( end _ dev != dev ) {	EMPTY	EMPTY
530	450	2	-1	0	-1	if ( group _ id < numconst || group _ id > numconst ) {	EMPTY	EMPTY
530	451	2	-1	0	-1	snprintf ( handle -> errbuf  pcap _ errbuf _ size	EMPTY	EMPTY
530	452	2	-1	0	-1	strlit	EMPTY	EMPTY
530	453	2	-1	0	-1	group _ id ) ;	EMPTY	EMPTY
530	454	2	-1	0	-1	return pcap _ error ;	EMPTY	EMPTY
530	455	3	-1	0	-1	}	EMPTY	EMPTY
530	457	1	0	0	-1	groups [ group _ count ++ ] = ( unsigned short ) group _ id ;	EMPTY	EMPTY
530	458	2	-1	0	-1	dev = end _ dev ;	EMPTY	EMPTY
530	459	2	-1	0	-1	}	EMPTY	EMPTY
530	460	2	-1	0	-1	if ( * dev != '' )	EMPTY	EMPTY
530	461	2	-1	0	-1	break ;	EMPTY	EMPTY
530	462	2	-1	0	-1	dev ++ ;	EMPTY	EMPTY
530	463	2	-1	0	-1	}	EMPTY	EMPTY
530	464	3	-1	0	-1	}	EMPTY	EMPTY
530	466	1	0	0	0	if ( type == other || * dev ) {	EMPTY	EMPTY
530	467	2	-1	0	-1	snprintf ( handle -> errbuf  pcap _ errbuf _ size	EMPTY	EMPTY
530	468	2	-1	0	-1	strlit	EMPTY	EMPTY
530	469	2	-1	0	-1	handle -> opt . source ) ;	EMPTY	EMPTY
530	470	2	-1	0	-1	return pcap _ error ;	EMPTY	EMPTY
530	471	3	-1	0	-1	}	EMPTY	EMPTY
530	474	1	0	0	-1	if ( ! group _ count ) {	EMPTY	EMPTY
530	475	2	-1	0	-1	groups [ 0 ] = 0 ;	EMPTY	EMPTY
530	476	2	-1	0	-1	group _ count = 1 ;	EMPTY	EMPTY
530	477	3	-1	0	-1	}	EMPTY	EMPTY
530	480	1	1	1	1	handle -> bufsize = 128 + handle -> snapshot	bufsize	EMPTY
530	481	2	-1	0	-1	handle -> offset = 0	offset	EMPTY
530	482	2	-1	0	-1	handle -> read _ op = netfilter _ read _ linux	read _ op	EMPTY
530	483	2	-1	0	-1	handle -> inject _ op = netfilter _ inject _ linux	EMPTY	EMPTY
530	484	2	-1	1	-1	handle -> setfilter _ op = install _ bpf _ program	EMPTY	EMPTY
530	485	2	-1	0	-1	handle -> setdirection _ op = null ;	EMPTY	EMPTY
530	486	2	-1	0	-1	handle -> set _ datalink _ op = netfilter _ set _ datalink	EMPTY	EMPTY
530	487	2	-1	0	-1	handle -> getnonblock _ op = pcap _ getnonblock _ fd	EMPTY	EMPTY
530	488	2	-1	0	-1	handle -> setnonblock _ op = pcap _ setnonblock _ fd	EMPTY	EMPTY
530	489	3	-1	0	-1	handle -> stats _ op = netfilter _ stats _ linux	EMPTY	EMPTY
530	492	1	1	1	-1	handle -> fd = socket ( af _ netlink , sock _ raw , netlink _ netfilter )	EMPTY	socket
530	493	2	-1	0	-1	if ( handle -> fd < 0 ) {	EMPTY	EMPTY
530	494	2	-1	0	-1	snprintf ( handle -> errbuf , pcap _ errbuf _ size ,  " can't create raw socket %d:%s "  , errno , pcap _ strerror ( errno ) ) ;	EMPTY	socket
530	495	2	-1	0	-1	return pcap _ error ;	EMPTY	EMPTY
530	496	3	-1	0	-1	}	EMPTY	EMPTY
530	498	1	0	0	0	if ( type == nflog ) {	EMPTY	EMPTY
530	499	2	-1	0	-1	handle -> linktype = dlt _ nflog ;	linktype	EMPTY
530	500	2	-1	0	-1	handle -> dlt _ list = ( u _ int * ) malloc ( sizeof ( u _ int ) * 2 )	EMPTY	malloc
530	501	2	-1	0	-1	if ( handle -> dlt _ list != null ) {	EMPTY	EMPTY
530	502	2	-1	0	-1	handle -> dlt _ list [ 0 ] = dlt _ nflog ;	EMPTY	EMPTY
530	503	2	-1	0	-1	handle -> dlt _ list [ 1 ] = dlt _ ipv4 ;	EMPTY	EMPTY
530	504	2	-1	0	-1	handle -> dlt _ count = 2 ;	EMPTY	EMPTY
530	505	3	-1	0	-1	}	EMPTY	EMPTY
530	507	1	0	0	-1	} else	EMPTY	EMPTY
530	508	3	-1	0	-1	handle -> linktype = dlt _ ipv4 ;	linktype	EMPTY
530	510	1	0	0	-1	handle -> buffer = malloc ( handle -> bufsize )	bufsize	malloc
530	511	2	-1	0	-1	if ( ! handle -> buffer ) {	EMPTY	EMPTY
530	512	2	-1	0	-1	snprintf ( handle -> errbuf , pcap _ errbuf _ size ,  " can't allocate dump buffer: %s "  , pcap _ strerror ( errno ) ) ;	EMPTY	EMPTY
530	513	2	-1	0	-1	goto close _ fail ;	EMPTY	EMPTY
530	514	3	-1	0	-1	}	EMPTY	EMPTY
530	516	1	0	0	0	if ( type == nflog ) {	EMPTY	EMPTY
530	517	2	-1	0	-1	if ( nflog _ send _ config _ cmd ( handle , 0 , nfulnl _ cfg _ cmd _ pf _ unbind , af _ inet ) < 0 ) {	EMPTY	nfulnl _ cfg _ cmd _ pf _ unbind
530	518	2	-1	0	-1	snprintf ( handle -> errbuf , pcap _ errbuf _ size ,  " nfulnl _ cfg _ cmd _ pf _ unbind: %s "  , pcap _ strerror ( errno ) ) ;	EMPTY	EMPTY
530	519	2	-1	0	-1	goto close _ fail ;	EMPTY	EMPTY
530	520	3	-1	0	-1	}	EMPTY	EMPTY
530	522	1	0	0	0	if ( nflog _ send _ config _ cmd ( handle , 0 , nfulnl _ cfg _ cmd _ pf _ bind , af _ inet ) < 0 ) {	EMPTY	nfulnl _ cfg _ cmd _ pf _ bind
530	523	2	-1	0	-1	snprintf ( handle -> errbuf , pcap _ errbuf _ size ,  " nfulnl _ cfg _ cmd _ pf _ bind: %s "  , pcap _ strerror ( errno ) ) ;	EMPTY	EMPTY
530	524	2	-1	0	-1	goto close _ fail ;	EMPTY	EMPTY
530	525	3	-1	0	-1	}	EMPTY	EMPTY
530	528	1	1	1	1	for ( i = 0 ; i < group _ count ; i ++ ) {	EMPTY	EMPTY
530	529	2	-1	0	-1	if ( nflog _ send _ config _ cmd ( handle , groups [ i ] , nfulnl _ cfg _ cmd _ bind , af _ unspec ) < 0 ) {	EMPTY	nfulnl _ cfg _ cmd _ bind
530	530	2	-1	0	-1	snprintf ( handle -> errbuf , pcap _ errbuf _ size ,  " can't listen on group group index: %s "  , pcap _ strerror ( errno ) ) ;	EMPTY	EMPTY
530	531	2	-1	0	-1	goto close _ fail ;	EMPTY	EMPTY
530	532	3	-1	0	-1	}	EMPTY	EMPTY
530	534	1	0	0	0	if ( nflog _ send _ config _ mode ( handle , groups [ i ] , nfulnl _ copy _ packet , handle -> snapshot ) < 0 ) {	EMPTY	EMPTY
530	535	2	-1	0	-1	snprintf ( handle -> errbuf , pcap _ errbuf _ size ,  " nfulnl _ copy _ packet: %s "  , pcap _ strerror ( errno ) ) ;	EMPTY	EMPTY
530	536	2	-1	0	-1	goto close _ fail ;	EMPTY	EMPTY
530	537	2	-1	0	-1	}	EMPTY	EMPTY
530	538	3	-1	0	-1	}	EMPTY	EMPTY
530	540	1	0	0	-1	} else {	EMPTY	EMPTY
530	541	2	-1	0	-1	if ( nfqueue _ send _ config _ cmd ( handle  numconst  nfqnl _ cfg _ cmd _ pf _ unbind  af _ inet ) < numconst ) {	EMPTY	nfqnl _ cfg _ cmd _ pf _ unbind
530	542	2	-1	0	-1	snprintf ( handle -> errbuf  pcap _ errbuf _ size  strlit  pcap _ strerror ( errno ) ) ;	EMPTY	EMPTY
530	543	2	-1	0	-1	goto close _ fail ;	EMPTY	EMPTY
530	544	3	-1	0	-1	}	EMPTY	EMPTY
530	546	1	0	0	0	if ( nfqueue _ send _ config _ cmd ( handle  numconst  nfqnl _ cfg _ cmd _ pf _ bind  af _ inet ) < numconst ) {	EMPTY	nfqnl _ cfg _ cmd _ pf _ bind
530	547	2	-1	0	-1	snprintf ( handle -> errbuf  pcap _ errbuf _ size  strlit  pcap _ strerror ( errno ) ) ;	EMPTY	EMPTY
530	548	2	-1	0	-1	goto close _ fail ;	EMPTY	EMPTY
530	549	3	-1	0	-1	}	EMPTY	EMPTY
530	552	1	1	1	1	for ( i = 0 ; i < group _ count ; i ++ ) {	EMPTY	EMPTY
530	553	2	-1	0	-1	if ( nfqueue _ send _ config _ cmd ( handle , groups [ i ] , nfqnl _ cfg _ cmd _ bind , af _ unspec ) < 0 ) {	EMPTY	nfqnl _ cfg _ cmd _ bind
530	554	2	-1	0	-1	snprintf ( handle -> errbuf , pcap _ errbuf _ size ,  " can't listen on group group index: %s "  , pcap _ strerror ( errno ) ) ;	EMPTY	EMPTY
530	555	2	-1	0	-1	goto close _ fail ;	EMPTY	EMPTY
530	556	3	-1	0	-1	}	EMPTY	EMPTY
530	558	1	0	0	0	if ( nfqueue _ send _ config _ mode ( handle , groups [ i ] , nfqnl _ copy _ packet , handle -> snapshot ) < 0 ) {	EMPTY	nfqnl _ copy _ packet
530	559	2	-1	0	-1	snprintf ( handle -> errbuf , pcap _ errbuf _ size ,  " nfqnl _ copy _ packet: %s "  , pcap _ strerror ( errno ) ) ;	EMPTY	EMPTY
530	560	2	-1	0	-1	goto close _ fail ;	EMPTY	EMPTY
530	561	2	-1	0	-1	}	EMPTY	EMPTY
530	562	2	-1	0	-1	}	EMPTY	EMPTY
530	563	3	-1	0	-1	}	EMPTY	EMPTY
530	565	1	1	0	1	if ( handle -> opt . rfmon ) {	rfmon	EMPTY
530	569	2	-1	1	-1	pcap _ cleanup _ live _ common ( handle )	EMPTY	EMPTY
530	570	2	-1	0	-1	return pcap _ error _ rfmon _ notsup ;	EMPTY	EMPTY
530	571	3	-1	0	-1	}	EMPTY	EMPTY
530	573	1	1	0	1	if ( handle -> opt . buffer _ size != numconst ) {	buffer _ size	EMPTY
530	577	2	-1	1	-1	if ( setsockopt ( handle -> fd , sol _ socket , so _ rcvbuf , & handle -> opt . buffer _ size , sizeof ( handle -> opt . buffer _ size ) ) == - 1 ) {	buffer _ size buffer _ size	setsockopt
530	578	2	-1	0	-1	snprintf ( handle -> errbuf , pcap _ errbuf _ size ,  " so _ rcvbuf: %s "  , pcap _ strerror ( errno ) ) ;	EMPTY	EMPTY
530	579	2	-1	0	-1	goto close _ fail ;	EMPTY	EMPTY
530	580	2	-1	0	-1	}	EMPTY	EMPTY
530	581	3	-1	0	-1	}	EMPTY	EMPTY
530	583	1	0	0	-1	handle -> selectable _ fd = handle -> fd ;	EMPTY	EMPTY
530	584	3	-1	0	-1	return numconst ;	EMPTY	EMPTY
530	586	1	0	0	-1	close _ fail :	EMPTY	EMPTY
530	587	2	-1	0	-1	pcap _ cleanup _ live _ common ( handle ) ;	EMPTY	EMPTY
530	588	2	-1	0	-1	return pcap _ error ;	EMPTY	EMPTY
530	589	3	-1	0	-1	}	EMPTY	EMPTY
530	591	1	0	0	-1	pcap _ t *	EMPTY	EMPTY
530	592	2	-1	0	-1	netfilter _ create ( const char * device  char * ebuf  int * is _ ours )	ebuf	EMPTY
530	593	2	-1	0	-1	{	EMPTY	EMPTY
530	594	2	-1	0	-1	const char * cp ;	EMPTY	EMPTY
530	595	3	-1	0	-1	pcap _ t * p ;	EMPTY	EMPTY
530	598	1	1	1	-1	cp = strrchr ( device , '/' )	EMPTY	strrchr
530	599	2	-1	0	-1	if ( cp == null )	EMPTY	EMPTY
530	600	3	-1	0	-1	cp = device	EMPTY	EMPTY
530	603	1	1	0	-1	if ( strncmp ( cp  nflog _ iface  sizeof nflog _ iface - numconst ) == numconst )	EMPTY	strncmp
530	604	2	-1	0	-1	cp += sizeof nflog _ iface - numconst ;	EMPTY	EMPTY
530	605	2	-1	0	-1	if ( strncmp ( cp  nfqueue _ iface  sizeof nfqueue _ iface - numconst ) == numconst )	EMPTY	strncmp
530	606	2	-1	0	-1	cp += sizeof nfqueue _ iface - numconst ;	EMPTY	EMPTY
530	607	2	-1	0	-1	else {	EMPTY	EMPTY
530	609	2	-1	1	-1	* is _ ours = 0	EMPTY	EMPTY
530	610	2	-1	0	-1	return null ;	EMPTY	EMPTY
530	611	3	-1	0	-1	}	EMPTY	EMPTY
530	617	1	1	0	-1	if ( * cp != ':' && * cp != '\\0' ) {	EMPTY	EMPTY
530	619	2	-1	1	-1	* is _ ours = 0	EMPTY	EMPTY
530	620	2	-1	0	-1	return null ;	EMPTY	EMPTY
530	621	3	-1	0	-1	}	EMPTY	EMPTY
530	624	1	1	1	-1	* is _ ours = 1	EMPTY	EMPTY
530	626	1	0	0	-1	p = pcap _ create _ common ( device , ebuf , sizeof ( struct pcap _ netfilter ) )	ebuf pcap _ netfilter	EMPTY
530	627	2	-1	0	-1	if ( p == null )	EMPTY	EMPTY
530	628	3	-1	0	-1	return ( null )	EMPTY	EMPTY
530	630	1	0	0	-1	p -> activate _ op = netfilter _ activate	activate _ op	EMPTY
530	631	2	-1	0	-1	return ( p )	EMPTY	EMPTY
530	632	3	-1	0	-1	}	EMPTY	EMPTY
530	634	1	0	0	-1	int	EMPTY	EMPTY
530	635	2	-1	0	-1	netfilter _ findalldevs ( pcap _ if _ t * * alldevsp  char * err _ str )	netfilter _ findalldevs alldevsp err _ str	EMPTY
530	636	2	-1	0	-1	{	EMPTY	EMPTY
530	637	3	-1	0	-1	int sock ;	EMPTY	EMPTY
530	639	1	1	0	-1	sock = socket ( af _ netlink  sock _ raw  netlink _ netfilter ) ;	EMPTY	socket
530	640	2	-1	0	-1	if ( sock < numconst ) {	EMPTY	EMPTY
530	642	2	-1	1	-1	if ( errno == eafnosupport || errno == eprotonosupport )	EMPTY	EMPTY
530	643	2	-1	0	-1	return 0	EMPTY	EMPTY
530	644	2	-1	0	-1	snprintf ( err _ str  pcap _ errbuf _ size  strlit	err _ str	EMPTY
530	645	2	-1	0	-1	errno  pcap _ strerror ( errno ) ) ;	EMPTY	EMPTY
530	646	2	-1	0	-1	return - 1	EMPTY	EMPTY
530	647	2	-1	0	-1	}	EMPTY	EMPTY
530	648	3	-1	0	-1	close ( sock ) ;	EMPTY	close
530	650	1	0	0	0	if ( pcap _ add _ if ( alldevsp  nflog _ iface  numconst  strlit  err _ str ) < numconst )	alldevsp err _ str	EMPTY
530	651	2	-1	0	-1	return - numconst ;	EMPTY	EMPTY
530	652	2	-1	0	-1	if ( pcap _ add _ if ( alldevsp  nfqueue _ iface  numconst  strlit  err _ str ) < numconst )	alldevsp err _ str	EMPTY
530	653	2	-1	0	-1	return - numconst ;	EMPTY	EMPTY
530	654	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
530	655	3	-1	0	-1	}	EMPTY	EMPTY
532	29	1	1	0	-1	void	EMPTY	EMPTY
532	30	2	-1	0	-1	bpf _ dump ( const struct bpf _ program * p  int option )	bpf _ program	EMPTY
532	31	2	-1	0	-1	{	EMPTY	EMPTY
532	32	2	-1	1	-1	const struct bpf _ insn * insn ;	bpf _ insn	EMPTY
532	33	2	-1	0	-1	int i ;	EMPTY	EMPTY
532	34	3	-1	0	-1	int n = p -> bf _ len ;	EMPTY	EMPTY
532	36	1	0	0	-1	insn = p -> bf _ insns	EMPTY	EMPTY
532	37	2	-1	0	-1	if ( option > 2 ) {	EMPTY	EMPTY
532	38	2	-1	0	-1	printf (  " %d\n "  , n ) ;	EMPTY	printf
532	39	2	-1	0	-1	for ( i = 0 ; i < n ; ++ insn , ++ i ) {	EMPTY	EMPTY
532	40	2	-1	0	-1	printf (  " %u %u %u %u\n "  , insn -> code ,	EMPTY	printf
532	41	2	-1	0	-1	insn -> jt , insn -> jf , insn -> k ) ;	EMPTY	EMPTY
532	42	2	-1	0	-1	}	EMPTY	EMPTY
532	43	2	-1	0	-1	return ;	EMPTY	EMPTY
532	44	2	-1	0	-1	}	EMPTY	EMPTY
532	45	2	-1	0	-1	if ( option > 1 ) {	EMPTY	EMPTY
532	46	2	-1	0	-1	for ( i = 0 ; i < n ; ++ insn , ++ i )	EMPTY	EMPTY
532	47	2	-1	0	-1	printf (  " { 0x%x, %d, %d, 0x%08x },\n "  ,	EMPTY	printf
532	48	2	-1	0	-1	insn -> code , insn -> jt , insn -> jf , insn -> k ) ;	EMPTY	EMPTY
532	49	2	-1	0	-1	return ;	EMPTY	EMPTY
532	50	2	-1	0	-1	}	EMPTY	EMPTY
532	51	2	-1	0	-1	for ( i = 0 ; i < n ; ++ insn , ++ i ) {	EMPTY	EMPTY
532	52	2	-1	0	-1	# ifdef bdebug	EMPTY	EMPTY
532	53	2	-1	0	-1	extern int bids [ ] ;	EMPTY	EMPTY
532	54	2	-1	0	-1	printf ( bids [ i ] > 0 ?  " [%02d] "  :  "  --  "  , bids [ i ] - 1 ) ;	EMPTY	printf
532	55	2	-1	0	-1	# endif	EMPTY	EMPTY
532	56	2	-1	0	-1	puts ( bpf _ image ( insn , i ) ) ;	EMPTY	puts
532	57	2	-1	0	-1	}	EMPTY	EMPTY
532	58	3	-1	0	-1	}	EMPTY	EMPTY
552	204	1	0	0	-1	enum {	EMPTY	EMPTY
552	205	2	-1	0	-1	bpf _ s _ anc _ none	EMPTY	EMPTY
552	206	2	-1	0	-1	bpf _ s _ anc _ vlan _ tag	EMPTY	EMPTY
552	207	2	-1	0	-1	bpf _ s _ anc _ vlan _ tag _ present	EMPTY	EMPTY
552	208	3	-1	0	-1	} ;	EMPTY	EMPTY
552	220	1	0	0	-1	u _ int	EMPTY	EMPTY
552	221	2	-1	0	-1	bpf _ filter _ with _ aux _ data ( pc  p  wirelen  buflen  aux _ data )	bpf _ filter _ with _ aux _ data	EMPTY
552	222	2	-1	0	-1	register const struct bpf _ insn * pc ;	bpf _ insn	EMPTY
552	223	2	-1	0	-1	register const u _ char * p ;	EMPTY	EMPTY
552	224	2	-1	0	-1	u _ int wirelen ;	EMPTY	EMPTY
552	225	2	-1	0	-1	register u _ int buflen ;	EMPTY	EMPTY
552	226	2	-1	0	-1	register const struct bpf _ aux _ data * aux _ data ;	bpf _ aux _ data	EMPTY
552	227	2	-1	0	-1	{	EMPTY	EMPTY
552	228	2	-1	0	-1	register u _ int32 a , x ;	EMPTY	EMPTY
552	229	2	-1	0	-1	register bpf _ u _ int32 k ;	EMPTY	EMPTY
552	230	2	-1	0	-1	u _ int32 mem [ bpf _ memwords ] ;	EMPTY	EMPTY
552	231	2	-1	0	-1	# if defined ( kernel ) || defined (  _ kernel )	EMPTY	EMPTY
552	232	2	-1	0	-1	struct mbuf * m  * n ;	EMPTY	EMPTY
552	233	3	-1	0	-1	int merr  len ;	EMPTY	EMPTY
552	235	1	0	0	-1	if ( buflen == numconst ) {	EMPTY	EMPTY
552	236	2	-1	0	-1	m = ( struct mbuf * ) p ;	EMPTY	EMPTY
552	237	2	-1	0	-1	p = mtod ( m  u _ char * ) ;	EMPTY	EMPTY
552	238	2	-1	0	-1	buflen = mlen ( m ) ;	EMPTY	EMPTY
552	239	2	-1	0	-1	} else	EMPTY	EMPTY
552	240	2	-1	0	-1	m = null ;	EMPTY	EMPTY
552	241	3	-1	0	-1	# endif	EMPTY	EMPTY
552	243	1	1	0	1	if ( pc == numconst )	EMPTY	EMPTY
552	247	2	-1	1	-1	return ( u _ int ) - numconst ;	EMPTY	EMPTY
552	248	2	-1	0	-1	a = 0	EMPTY	EMPTY
552	249	2	-1	0	-1	x = 0	EMPTY	EMPTY
552	250	2	-1	0	-1	-- pc	EMPTY	EMPTY
552	251	2	-1	0	-1	while ( numconst ) {	EMPTY	EMPTY
552	252	2	-1	0	-1	++ pc	EMPTY	EMPTY
552	253	3	-1	0	-1	switch ( pc -> code ) {	EMPTY	EMPTY
552	255	1	0	0	-1	default :	EMPTY	EMPTY
552	256	2	-1	0	-1	# if defined ( kernel ) || defined (  _ kernel )	EMPTY	EMPTY
552	257	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
552	258	2	-1	0	-1	# else	EMPTY	EMPTY
552	259	2	-1	0	-1	abort ( )	EMPTY	abort
552	260	2	-1	0	-1	# endif	EMPTY	EMPTY
552	261	2	-1	0	-1	case bpf _ ret | bpf _ k :	EMPTY	EMPTY
552	262	3	-1	0	-1	return ( u _ int ) pc -> k	EMPTY	EMPTY
552	264	1	0	0	-1	case bpf _ ret | bpf _ a :	EMPTY	EMPTY
552	265	3	-1	0	-1	return ( u _ int ) a	EMPTY	EMPTY
552	267	1	0	0	-1	case bpf _ ld | bpf _ w | bpf _ abs :	EMPTY	EMPTY
552	268	2	-1	0	-1	k = pc -> k	EMPTY	EMPTY
552	269	2	-1	0	-1	if ( k > buflen || sizeof ( int32 _ t ) > buflen - k ) {	EMPTY	EMPTY
552	270	2	-1	0	-1	# if defined ( kernel ) || defined (  _ kernel )	EMPTY	EMPTY
552	271	2	-1	0	-1	if ( m == null )	EMPTY	EMPTY
552	272	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
552	273	2	-1	0	-1	a = m _ xword ( m , k , & merr ) ;	EMPTY	EMPTY
552	274	2	-1	0	-1	if ( merr != 0 )	EMPTY	EMPTY
552	275	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
552	276	2	-1	0	-1	continue ;	EMPTY	EMPTY
552	277	2	-1	0	-1	# else	EMPTY	EMPTY
552	278	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
552	279	2	-1	0	-1	# endif	EMPTY	EMPTY
552	280	2	-1	0	-1	}	EMPTY	EMPTY
552	281	2	-1	0	-1	a = extract _ long ( & p [ k ] ) ;	EMPTY	EMPTY
552	282	3	-1	0	-1	continue	EMPTY	EMPTY
552	284	1	0	0	-1	case bpf _ ld | bpf _ h | bpf _ abs :	EMPTY	EMPTY
552	285	2	-1	0	-1	k = pc -> k	EMPTY	EMPTY
552	286	2	-1	0	-1	if ( k > buflen || sizeof ( int16 _ t ) > buflen - k ) {	EMPTY	EMPTY
552	287	2	-1	0	-1	# if defined ( kernel ) || defined (  _ kernel )	EMPTY	EMPTY
552	288	2	-1	0	-1	if ( m == null )	EMPTY	EMPTY
552	289	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
552	290	2	-1	0	-1	a = m _ xhalf ( m , k , & merr ) ;	EMPTY	EMPTY
552	291	2	-1	0	-1	if ( merr != 0 )	EMPTY	EMPTY
552	292	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
552	293	2	-1	0	-1	continue ;	EMPTY	EMPTY
552	294	2	-1	0	-1	# else	EMPTY	EMPTY
552	295	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
552	296	2	-1	0	-1	# endif	EMPTY	EMPTY
552	297	2	-1	0	-1	}	EMPTY	EMPTY
552	298	2	-1	0	-1	a = extract _ short ( & p [ k ] ) ;	EMPTY	EMPTY
552	299	3	-1	0	-1	continue	EMPTY	EMPTY
552	301	1	0	0	-1	case bpf _ ld | bpf _ b | bpf _ abs :	EMPTY	EMPTY
552	302	2	-1	0	-1	{	EMPTY	EMPTY
552	303	2	-1	0	-1	# if defined ( skf _ ad _ vlan _ tag ) && defined ( skf _ ad _ vlan _ tag _ present )	EMPTY	EMPTY
552	304	2	-1	0	-1	int code = bpf _ s _ anc _ none ;	EMPTY	EMPTY
552	305	2	-1	0	-1	# define ancillary ( code ) case skf _ ad _ off + skf _ ad _  ## code : \	EMPTY	EMPTY
552	306	2	-1	0	-1	code = bpf _ s _ anc _  ## code ; \	EMPTY	EMPTY
552	307	2	-1	0	-1	if ( ! aux _ data ) \	EMPTY	EMPTY
552	308	2	-1	0	-1	return 0 ; \	EMPTY	EMPTY
552	309	3	-1	0	-1	break ;	EMPTY	EMPTY
552	311	1	0	0	0	switch ( pc -> k ) {	EMPTY	EMPTY
552	312	2	-1	0	-1	ancillary ( vlan _ tag ) ;	EMPTY	EMPTY
552	313	2	-1	0	-1	ancillary ( vlan _ tag _ present ) ;	EMPTY	EMPTY
552	314	2	-1	0	-1	default :	EMPTY	EMPTY
552	315	2	-1	0	-1	# endif	EMPTY	EMPTY
552	316	2	-1	0	-1	k = pc -> k ;	EMPTY	EMPTY
552	317	2	-1	0	-1	if ( k >= buflen ) {	EMPTY	EMPTY
552	318	2	-1	0	-1	# if defined ( kernel ) || defined (  _ kernel )	EMPTY	EMPTY
552	319	2	-1	0	-1	if ( m == null )	EMPTY	EMPTY
552	320	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
552	321	2	-1	0	-1	n = m ;	EMPTY	EMPTY
552	322	2	-1	0	-1	mindex ( len , n , k ) ;	EMPTY	EMPTY
552	323	2	-1	0	-1	a = mtod ( n , u _ char * ) [ k ] ;	EMPTY	EMPTY
552	324	2	-1	0	-1	continue ;	EMPTY	EMPTY
552	325	2	-1	0	-1	# else	EMPTY	EMPTY
552	326	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
552	327	2	-1	0	-1	# endif	EMPTY	EMPTY
552	328	2	-1	0	-1	}	EMPTY	EMPTY
552	329	2	-1	0	-1	a = p [ k ] ;	EMPTY	EMPTY
552	330	2	-1	0	-1	# if defined ( skf _ ad _ vlan _ tag ) && defined ( skf _ ad _ vlan _ tag _ present )	EMPTY	EMPTY
552	331	2	-1	0	-1	}	EMPTY	EMPTY
552	332	2	-1	0	-1	switch ( code ) {	EMPTY	EMPTY
552	333	2	-1	0	-1	case bpf _ s _ anc _ vlan _ tag :	EMPTY	EMPTY
552	334	2	-1	0	-1	if ( aux _ data )	EMPTY	EMPTY
552	335	2	-1	0	-1	a = aux _ data -> vlan _ tag ;	EMPTY	EMPTY
552	336	3	-1	0	-1	break ;	EMPTY	EMPTY
552	338	1	0	0	-1	case bpf _ s _ anc _ vlan _ tag _ present :	EMPTY	EMPTY
552	339	2	-1	0	-1	if ( aux _ data )	EMPTY	EMPTY
552	340	2	-1	0	-1	a = aux _ data -> vlan _ tag _ present ;	EMPTY	EMPTY
552	341	2	-1	0	-1	break ;	EMPTY	EMPTY
552	342	2	-1	0	-1	}	EMPTY	EMPTY
552	343	2	-1	0	-1	# endif	EMPTY	EMPTY
552	344	2	-1	0	-1	continue ;	EMPTY	EMPTY
552	345	2	-1	0	-1	}	EMPTY	EMPTY
552	346	2	-1	0	-1	case bpf _ ld | bpf _ w | bpf _ len :	EMPTY	EMPTY
552	347	2	-1	0	-1	a = wirelen	EMPTY	EMPTY
552	348	3	-1	0	-1	continue	EMPTY	EMPTY
552	350	1	0	0	-1	case bpf _ ldx | bpf _ w | bpf _ len :	EMPTY	EMPTY
552	351	2	-1	0	-1	x = wirelen	EMPTY	EMPTY
552	352	3	-1	0	-1	continue	EMPTY	EMPTY
552	354	1	0	0	-1	case bpf _ ld | bpf _ w | bpf _ ind :	EMPTY	EMPTY
552	355	2	-1	0	-1	k = x + pc -> k	EMPTY	EMPTY
552	356	2	-1	0	-1	if ( pc -> k > buflen || x > buflen - pc -> k ||	EMPTY	EMPTY
552	357	2	-1	0	-1	sizeof ( int32 _ t ) > buflen - k ) {	EMPTY	EMPTY
552	358	2	-1	0	-1	# if defined ( kernel ) || defined (  _ kernel )	EMPTY	EMPTY
552	359	2	-1	0	-1	if ( m == null )	EMPTY	EMPTY
552	360	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
552	361	2	-1	0	-1	a = m _ xword ( m , k , & merr ) ;	EMPTY	EMPTY
552	362	2	-1	0	-1	if ( merr != 0 )	EMPTY	EMPTY
552	363	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
552	364	2	-1	0	-1	continue ;	EMPTY	EMPTY
552	365	2	-1	0	-1	# else	EMPTY	EMPTY
552	366	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
552	367	2	-1	0	-1	# endif	EMPTY	EMPTY
552	368	2	-1	0	-1	}	EMPTY	EMPTY
552	369	2	-1	0	-1	a = extract _ long ( & p [ k ] ) ;	EMPTY	EMPTY
552	370	3	-1	0	-1	continue	EMPTY	EMPTY
552	372	1	0	0	-1	case bpf _ ld | bpf _ h | bpf _ ind :	EMPTY	EMPTY
552	373	2	-1	0	-1	k = x + pc -> k	EMPTY	EMPTY
552	374	2	-1	0	-1	if ( x > buflen || pc -> k > buflen - x ||	EMPTY	EMPTY
552	375	2	-1	0	-1	sizeof ( int16 _ t ) > buflen - k ) {	EMPTY	EMPTY
552	376	2	-1	0	-1	# if defined ( kernel ) || defined (  _ kernel )	EMPTY	EMPTY
552	377	2	-1	0	-1	if ( m == null )	EMPTY	EMPTY
552	378	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
552	379	2	-1	0	-1	a = m _ xhalf ( m , k , & merr ) ;	EMPTY	EMPTY
552	380	2	-1	0	-1	if ( merr != 0 )	EMPTY	EMPTY
552	381	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
552	382	2	-1	0	-1	continue ;	EMPTY	EMPTY
552	383	2	-1	0	-1	# else	EMPTY	EMPTY
552	384	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
552	385	2	-1	0	-1	# endif	EMPTY	EMPTY
552	386	2	-1	0	-1	}	EMPTY	EMPTY
552	387	2	-1	0	-1	a = extract _ short ( & p [ k ] ) ;	EMPTY	EMPTY
552	388	3	-1	0	-1	continue	EMPTY	EMPTY
552	390	1	0	0	-1	case bpf _ ld | bpf _ b | bpf _ ind :	EMPTY	EMPTY
552	391	2	-1	0	-1	k = x + pc -> k	EMPTY	EMPTY
552	392	2	-1	0	-1	if ( pc -> k >= buflen || x >= buflen - pc -> k ) {	EMPTY	EMPTY
552	393	2	-1	0	-1	# if defined ( kernel ) || defined (  _ kernel )	EMPTY	EMPTY
552	394	2	-1	0	-1	if ( m == null )	EMPTY	EMPTY
552	395	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
552	396	2	-1	0	-1	n = m ;	EMPTY	EMPTY
552	397	2	-1	0	-1	mindex ( len , n , k ) ;	EMPTY	EMPTY
552	398	2	-1	0	-1	a = mtod ( n , u _ char * ) [ k ] ;	EMPTY	EMPTY
552	399	2	-1	0	-1	continue ;	EMPTY	EMPTY
552	400	2	-1	0	-1	# else	EMPTY	EMPTY
552	401	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
552	402	2	-1	0	-1	# endif	EMPTY	EMPTY
552	403	2	-1	0	-1	}	EMPTY	EMPTY
552	404	2	-1	0	-1	a = p [ k ]	EMPTY	EMPTY
552	405	3	-1	0	-1	continue	EMPTY	EMPTY
552	407	1	0	0	-1	case bpf _ ldx | bpf _ msh | bpf _ b :	EMPTY	EMPTY
552	408	2	-1	0	-1	k = pc -> k	EMPTY	EMPTY
552	409	2	-1	0	-1	if ( k >= buflen ) {	EMPTY	EMPTY
552	410	2	-1	0	-1	# if defined ( kernel ) || defined (  _ kernel )	EMPTY	EMPTY
552	411	2	-1	0	-1	if ( m == null )	EMPTY	EMPTY
552	412	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
552	413	2	-1	0	-1	n = m ;	EMPTY	EMPTY
552	414	2	-1	0	-1	mindex ( len , n , k ) ;	EMPTY	EMPTY
552	415	2	-1	0	-1	x = ( mtod ( n , char * ) [ k ] & 0xf ) << 2 ;	EMPTY	EMPTY
552	416	2	-1	0	-1	continue ;	EMPTY	EMPTY
552	417	2	-1	0	-1	# else	EMPTY	EMPTY
552	418	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
552	419	2	-1	0	-1	# endif	EMPTY	EMPTY
552	420	2	-1	0	-1	}	EMPTY	EMPTY
552	421	2	-1	0	-1	x = ( p [ pc -> k ] & 0xf ) << 2	EMPTY	EMPTY
552	422	3	-1	0	-1	continue	EMPTY	EMPTY
552	424	1	0	0	-1	case bpf _ ld | bpf _ imm :	EMPTY	EMPTY
552	425	2	-1	0	-1	a = pc -> k	EMPTY	EMPTY
552	426	3	-1	0	-1	continue	EMPTY	EMPTY
552	428	1	0	0	-1	case bpf _ ldx | bpf _ imm :	EMPTY	EMPTY
552	429	2	-1	0	-1	x = pc -> k	EMPTY	EMPTY
552	430	3	-1	0	-1	continue	EMPTY	EMPTY
552	432	1	0	0	-1	case bpf _ ld | bpf _ mem :	EMPTY	EMPTY
552	433	2	-1	0	-1	a = mem [ pc -> k ]	EMPTY	EMPTY
552	434	3	-1	0	-1	continue	EMPTY	EMPTY
552	436	1	0	0	-1	case bpf _ ldx | bpf _ mem :	EMPTY	EMPTY
552	437	2	-1	0	-1	x = mem [ pc -> k ]	EMPTY	EMPTY
552	438	3	-1	0	-1	continue	EMPTY	EMPTY
552	440	1	0	0	-1	case bpf _ st :	EMPTY	EMPTY
552	441	2	-1	0	-1	mem [ pc -> k ] = a	EMPTY	EMPTY
552	442	3	-1	0	-1	continue	EMPTY	EMPTY
552	444	1	0	0	-1	case bpf _ stx :	EMPTY	EMPTY
552	445	2	-1	0	-1	mem [ pc -> k ] = x	EMPTY	EMPTY
552	446	3	-1	0	-1	continue	EMPTY	EMPTY
552	448	1	1	0	-1	case bpf _ jmp | bpf _ ja :	EMPTY	EMPTY
552	449	2	-1	0	-1	# if defined ( kernel ) || defined (  _ kernel )	EMPTY	EMPTY
552	453	2	-1	1	-1	pc += pc -> k ;	EMPTY	EMPTY
552	454	2	-1	0	-1	# else	EMPTY	EMPTY
552	459	2	-1	1	-1	pc += ( bpf _ int32 ) pc -> k ;	EMPTY	EMPTY
552	460	2	-1	0	-1	# endif	EMPTY	EMPTY
552	461	3	-1	0	-1	continue	EMPTY	EMPTY
552	463	1	0	0	-1	case bpf _ jmp | bpf _ jgt | bpf _ k :	EMPTY	EMPTY
552	464	2	-1	0	-1	pc += ( a > pc -> k ) ? pc -> jt : pc -> jf	EMPTY	EMPTY
552	465	3	-1	0	-1	continue	EMPTY	EMPTY
552	467	1	0	0	-1	case bpf _ jmp | bpf _ jge | bpf _ k :	EMPTY	EMPTY
552	468	2	-1	0	-1	pc += ( a >= pc -> k ) ? pc -> jt : pc -> jf	EMPTY	EMPTY
552	469	3	-1	0	-1	continue	EMPTY	EMPTY
552	471	1	0	0	-1	case bpf _ jmp | bpf _ jeq | bpf _ k :	EMPTY	EMPTY
552	472	2	-1	0	-1	pc += ( a == pc -> k ) ? pc -> jt : pc -> jf	EMPTY	EMPTY
552	473	3	-1	0	-1	continue	EMPTY	EMPTY
552	475	1	0	0	-1	case bpf _ jmp | bpf _ jset | bpf _ k :	EMPTY	EMPTY
552	476	2	-1	0	-1	pc += ( a & pc -> k ) ? pc -> jt : pc -> jf	EMPTY	EMPTY
552	477	3	-1	0	-1	continue	EMPTY	EMPTY
552	479	1	0	0	-1	case bpf _ jmp | bpf _ jgt | bpf _ x :	EMPTY	EMPTY
552	480	2	-1	0	-1	pc += ( a > x ) ? pc -> jt : pc -> jf	EMPTY	EMPTY
552	481	3	-1	0	-1	continue	EMPTY	EMPTY
552	483	1	0	0	-1	case bpf _ jmp | bpf _ jge | bpf _ x :	EMPTY	EMPTY
552	484	2	-1	0	-1	pc += ( a >= x ) ? pc -> jt : pc -> jf	EMPTY	EMPTY
552	485	3	-1	0	-1	continue	EMPTY	EMPTY
552	487	1	0	0	-1	case bpf _ jmp | bpf _ jeq | bpf _ x :	EMPTY	EMPTY
552	488	2	-1	0	-1	pc += ( a == x ) ? pc -> jt : pc -> jf	EMPTY	EMPTY
552	489	3	-1	0	-1	continue	EMPTY	EMPTY
552	491	1	0	0	-1	case bpf _ jmp | bpf _ jset | bpf _ x :	EMPTY	EMPTY
552	492	2	-1	0	-1	pc += ( a & x ) ? pc -> jt : pc -> jf	EMPTY	EMPTY
552	493	3	-1	0	-1	continue	EMPTY	EMPTY
552	495	1	0	0	-1	case bpf _ alu | bpf _ add | bpf _ x :	EMPTY	EMPTY
552	496	2	-1	0	-1	a += x	EMPTY	EMPTY
552	497	3	-1	0	-1	continue	EMPTY	EMPTY
552	499	1	0	0	-1	case bpf _ alu | bpf _ sub | bpf _ x :	EMPTY	EMPTY
552	500	2	-1	0	-1	a -= x	EMPTY	EMPTY
552	501	3	-1	0	-1	continue	EMPTY	EMPTY
552	503	1	0	0	-1	case bpf _ alu | bpf _ mul | bpf _ x :	EMPTY	EMPTY
552	504	2	-1	0	-1	a *= x	EMPTY	EMPTY
552	505	3	-1	0	-1	continue	EMPTY	EMPTY
552	507	1	0	0	-1	case bpf _ alu | bpf _ div | bpf _ x :	EMPTY	EMPTY
552	508	2	-1	0	-1	if ( x == 0 )	EMPTY	EMPTY
552	509	2	-1	0	-1	return 0	EMPTY	EMPTY
552	510	2	-1	0	-1	a /= x	EMPTY	EMPTY
552	511	3	-1	0	-1	continue	EMPTY	EMPTY
552	513	1	0	0	-1	case bpf _ alu | bpf _ mod | bpf _ x :	EMPTY	EMPTY
552	514	2	-1	0	-1	if ( x == 0 )	EMPTY	EMPTY
552	515	2	-1	0	-1	return 0	EMPTY	EMPTY
552	516	2	-1	0	-1	a %= x	EMPTY	EMPTY
552	517	3	-1	0	-1	continue	EMPTY	EMPTY
552	519	1	0	0	-1	case bpf _ alu | bpf _ and | bpf _ x :	EMPTY	EMPTY
552	520	2	-1	0	-1	a &= x	EMPTY	EMPTY
552	521	3	-1	0	-1	continue	EMPTY	EMPTY
552	523	1	0	0	-1	case bpf _ alu | bpf _ or | bpf _ x :	EMPTY	EMPTY
552	524	2	-1	0	-1	a |= x	EMPTY	EMPTY
552	525	3	-1	0	-1	continue	EMPTY	EMPTY
552	527	1	0	0	-1	case bpf _ alu | bpf _ xor | bpf _ x :	EMPTY	EMPTY
552	528	2	-1	0	-1	a ^= x	EMPTY	EMPTY
552	529	3	-1	0	-1	continue	EMPTY	EMPTY
552	531	1	0	0	-1	case bpf _ alu | bpf _ lsh | bpf _ x :	EMPTY	EMPTY
552	532	2	-1	0	-1	a <<= x	EMPTY	EMPTY
552	533	3	-1	0	-1	continue	EMPTY	EMPTY
552	535	1	0	0	-1	case bpf _ alu | bpf _ rsh | bpf _ x :	EMPTY	EMPTY
552	536	2	-1	0	-1	a >>= x	EMPTY	EMPTY
552	537	3	-1	0	-1	continue	EMPTY	EMPTY
552	539	1	0	0	-1	case bpf _ alu | bpf _ add | bpf _ k :	EMPTY	EMPTY
552	540	2	-1	0	-1	a += pc -> k	EMPTY	EMPTY
552	541	3	-1	0	-1	continue	EMPTY	EMPTY
552	543	1	0	0	-1	case bpf _ alu | bpf _ sub | bpf _ k :	EMPTY	EMPTY
552	544	2	-1	0	-1	a -= pc -> k	EMPTY	EMPTY
552	545	3	-1	0	-1	continue	EMPTY	EMPTY
552	547	1	0	0	-1	case bpf _ alu | bpf _ mul | bpf _ k :	EMPTY	EMPTY
552	548	2	-1	0	-1	a *= pc -> k	EMPTY	EMPTY
552	549	3	-1	0	-1	continue	EMPTY	EMPTY
552	551	1	0	0	-1	case bpf _ alu | bpf _ div | bpf _ k :	EMPTY	EMPTY
552	552	2	-1	0	-1	a /= pc -> k	EMPTY	EMPTY
552	553	3	-1	0	-1	continue	EMPTY	EMPTY
552	555	1	0	0	-1	case bpf _ alu | bpf _ mod | bpf _ k :	EMPTY	EMPTY
552	556	2	-1	0	-1	a %= pc -> k	EMPTY	EMPTY
552	557	3	-1	0	-1	continue	EMPTY	EMPTY
552	559	1	0	0	-1	case bpf _ alu | bpf _ and | bpf _ k :	EMPTY	EMPTY
552	560	2	-1	0	-1	a &= pc -> k	EMPTY	EMPTY
552	561	3	-1	0	-1	continue	EMPTY	EMPTY
552	563	1	0	0	-1	case bpf _ alu | bpf _ or | bpf _ k :	EMPTY	EMPTY
552	564	2	-1	0	-1	a |= pc -> k	EMPTY	EMPTY
552	565	3	-1	0	-1	continue	EMPTY	EMPTY
552	567	1	0	0	-1	case bpf _ alu | bpf _ xor | bpf _ k :	EMPTY	EMPTY
552	568	2	-1	0	-1	a ^= pc -> k	EMPTY	EMPTY
552	569	3	-1	0	-1	continue	EMPTY	EMPTY
552	571	1	0	0	-1	case bpf _ alu | bpf _ lsh | bpf _ k :	EMPTY	EMPTY
552	572	2	-1	0	-1	a <<= pc -> k	EMPTY	EMPTY
552	573	3	-1	0	-1	continue	EMPTY	EMPTY
552	575	1	0	0	-1	case bpf _ alu | bpf _ rsh | bpf _ k :	EMPTY	EMPTY
552	576	2	-1	0	-1	a >>= pc -> k	EMPTY	EMPTY
552	577	3	-1	0	-1	continue	EMPTY	EMPTY
552	579	1	0	0	-1	case bpf _ alu | bpf _ neg :	EMPTY	EMPTY
552	580	2	-1	0	-1	a = - a	EMPTY	EMPTY
552	581	3	-1	0	-1	continue	EMPTY	EMPTY
552	583	1	0	0	-1	case bpf _ misc | bpf _ tax :	EMPTY	EMPTY
552	584	2	-1	0	-1	x = a	EMPTY	EMPTY
552	585	3	-1	0	-1	continue	EMPTY	EMPTY
552	587	1	0	0	-1	case bpf _ misc | bpf _ txa :	EMPTY	EMPTY
552	588	2	-1	0	-1	a = x	EMPTY	EMPTY
552	589	2	-1	0	-1	continue	EMPTY	EMPTY
552	590	2	-1	0	-1	}	EMPTY	EMPTY
552	591	2	-1	0	-1	}	EMPTY	EMPTY
552	592	3	-1	0	-1	}	EMPTY	EMPTY
552	594	1	0	0	-1	u _ int	EMPTY	EMPTY
552	595	2	-1	0	-1	bpf _ filter ( pc  p  wirelen  buflen )	EMPTY	EMPTY
552	596	2	-1	0	-1	register const struct bpf _ insn * pc ;	bpf _ insn	EMPTY
552	597	2	-1	0	-1	register const u _ char * p ;	EMPTY	EMPTY
552	598	2	-1	0	-1	u _ int wirelen ;	EMPTY	EMPTY
552	599	2	-1	0	-1	register u _ int buflen ;	EMPTY	EMPTY
552	600	2	-1	0	-1	{	EMPTY	EMPTY
552	601	2	-1	0	-1	return bpf _ filter _ with _ aux _ data ( pc  p  wirelen  buflen  null ) ;	bpf _ filter _ with _ aux _ data	EMPTY
552	602	3	-1	0	-1	}	EMPTY	EMPTY
552	616	1	0	0	-1	int	EMPTY	EMPTY
552	617	2	-1	0	-1	bpf _ validate ( f  len )	bpf _ validate	EMPTY
552	618	2	-1	0	-1	const struct bpf _ insn * f ;	bpf _ insn	EMPTY
552	619	2	-1	0	-1	int len ;	EMPTY	EMPTY
552	620	2	-1	0	-1	{	EMPTY	EMPTY
552	621	2	-1	0	-1	u _ int i , from ;	EMPTY	EMPTY
552	622	3	-1	0	-1	const struct bpf _ insn * p ;	bpf _ insn	EMPTY
552	624	1	1	0	1	if ( len < 1 )	EMPTY	EMPTY
552	625	2	-1	0	-1	return 0	EMPTY	EMPTY
552	629	2	-1	1	-1	# if defined ( kernel ) || defined (  _ kernel )	EMPTY	EMPTY
552	630	2	-1	0	-1	if ( len > bpf _ maxinsns )	EMPTY	EMPTY
552	631	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
552	632	3	-1	0	-1	# endif	EMPTY	EMPTY
552	634	1	1	0	1	for ( i = numconst ; i < len ; ++ i ) {	EMPTY	EMPTY
552	635	2	-1	0	-1	p = & f [ i ]	EMPTY	EMPTY
552	636	2	-1	0	-1	switch ( bpf _ class ( p -> code ) ) {	EMPTY	EMPTY
552	640	2	-1	1	-1	case bpf _ ld :	EMPTY	EMPTY
552	641	2	-1	0	-1	case bpf _ ldx :	EMPTY	EMPTY
552	642	2	-1	0	-1	switch ( bpf _ mode ( p -> code ) ) {	EMPTY	EMPTY
552	643	2	-1	0	-1	case bpf _ imm :	EMPTY	EMPTY
552	644	2	-1	0	-1	break	EMPTY	EMPTY
552	645	2	-1	0	-1	case bpf _ abs :	EMPTY	EMPTY
552	646	2	-1	0	-1	case bpf _ ind :	EMPTY	EMPTY
552	647	2	-1	0	-1	case bpf _ msh :	EMPTY	EMPTY
552	653	2	-1	1	-1	# if defined ( kernel ) || defined (  _ kernel )	EMPTY	EMPTY
552	658	2	-1	1	-1	if ( p -> k >= bpf _ maxbufsize )	EMPTY	EMPTY
552	659	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
552	660	2	-1	0	-1	# endif	EMPTY	EMPTY
552	661	2	-1	0	-1	break ;	EMPTY	EMPTY
552	662	2	-1	0	-1	case bpf _ mem :	EMPTY	EMPTY
552	663	2	-1	0	-1	if ( p -> k >= bpf _ memwords )	EMPTY	EMPTY
552	664	2	-1	0	-1	return 0	EMPTY	EMPTY
552	665	2	-1	0	-1	break	EMPTY	EMPTY
552	666	2	-1	0	-1	case bpf _ len :	EMPTY	EMPTY
552	667	2	-1	0	-1	break	EMPTY	EMPTY
552	668	2	-1	0	-1	default :	EMPTY	EMPTY
552	669	2	-1	0	-1	return 0	EMPTY	EMPTY
552	670	2	-1	0	-1	}	EMPTY	EMPTY
552	671	2	-1	0	-1	break ;	EMPTY	EMPTY
552	672	2	-1	0	-1	case bpf _ st :	EMPTY	EMPTY
552	673	2	-1	0	-1	case bpf _ stx :	EMPTY	EMPTY
552	674	2	-1	0	-1	if ( p -> k >= bpf _ memwords )	EMPTY	EMPTY
552	675	3	-1	0	-1	return numconst ;	EMPTY	EMPTY
552	676	1	1	0	-1	break ;	EMPTY	EMPTY
552	677	2	-1	0	-1	case bpf _ alu :	EMPTY	EMPTY
552	678	2	-1	0	-1	switch ( bpf _ op ( p -> code ) ) {	EMPTY	EMPTY
552	679	2	-1	0	-1	case bpf _ add :	EMPTY	EMPTY
552	680	2	-1	0	-1	case bpf _ sub :	EMPTY	EMPTY
552	681	2	-1	0	-1	case bpf _ mul :	EMPTY	EMPTY
552	682	2	-1	0	-1	case bpf _ or :	EMPTY	EMPTY
552	683	2	-1	0	-1	case bpf _ and :	EMPTY	EMPTY
552	684	2	-1	0	-1	case bpf _ xor :	EMPTY	EMPTY
552	685	2	-1	0	-1	case bpf _ lsh :	EMPTY	EMPTY
552	686	2	-1	0	-1	case bpf _ rsh :	EMPTY	EMPTY
552	687	2	-1	0	-1	case bpf _ neg :	EMPTY	EMPTY
552	688	2	-1	0	-1	break ;	EMPTY	EMPTY
552	689	2	-1	0	-1	case bpf _ div :	EMPTY	EMPTY
552	690	2	-1	0	-1	case bpf _ mod :	EMPTY	EMPTY
552	695	2	-1	1	-1	if ( bpf _ src ( p -> code ) == bpf _ k && p -> k == numconst )	EMPTY	EMPTY
552	696	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
552	697	2	-1	0	-1	break	EMPTY	EMPTY
552	698	2	-1	0	-1	default :	EMPTY	EMPTY
552	699	2	-1	0	-1	return 0	EMPTY	EMPTY
552	700	2	-1	0	-1	}	EMPTY	EMPTY
552	701	2	-1	0	-1	break ;	EMPTY	EMPTY
552	702	2	-1	0	-1	case bpf _ jmp :	EMPTY	EMPTY
552	729	2	-1	1	-1	from = i + numconst ;	EMPTY	EMPTY
552	730	2	-1	0	-1	switch ( bpf _ op ( p -> code ) ) {	EMPTY	EMPTY
552	731	2	-1	0	-1	case bpf _ ja :	EMPTY	EMPTY
552	732	2	-1	0	-1	# if defined ( kernel ) || defined (  _ kernel )	EMPTY	EMPTY
552	733	2	-1	0	-1	if ( from + p -> k < from || from + p -> k >= len )	EMPTY	EMPTY
552	734	2	-1	0	-1	# else	EMPTY	EMPTY
552	735	3	-1	0	-1	if ( from + p -> k >= len )	EMPTY	EMPTY
552	736	1	0	0	-1	# endif	EMPTY	EMPTY
552	737	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
552	738	2	-1	0	-1	break ;	EMPTY	EMPTY
552	739	2	-1	0	-1	case bpf _ jeq :	EMPTY	EMPTY
552	740	2	-1	0	-1	case bpf _ jgt :	EMPTY	EMPTY
552	741	2	-1	0	-1	case bpf _ jge :	EMPTY	EMPTY
552	742	2	-1	0	-1	case bpf _ jset :	EMPTY	EMPTY
552	743	2	-1	0	-1	if ( from + p -> jt >= len || from + p -> jf >= len )	EMPTY	EMPTY
552	744	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
552	745	2	-1	0	-1	break ;	EMPTY	EMPTY
552	746	2	-1	0	-1	default :	EMPTY	EMPTY
552	747	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
552	748	2	-1	0	-1	}	EMPTY	EMPTY
552	749	2	-1	0	-1	break	EMPTY	EMPTY
552	750	2	-1	0	-1	case bpf _ ret :	EMPTY	EMPTY
552	751	2	-1	0	-1	break	EMPTY	EMPTY
552	752	2	-1	0	-1	case bpf _ misc :	EMPTY	EMPTY
552	753	2	-1	0	-1	break	EMPTY	EMPTY
552	754	2	-1	0	-1	default :	EMPTY	EMPTY
552	755	2	-1	0	-1	return 0	EMPTY	EMPTY
552	756	2	-1	0	-1	}	EMPTY	EMPTY
552	757	2	-1	0	-1	}	EMPTY	EMPTY
552	758	2	-1	0	-1	return bpf _ class ( f [ len - numconst ] . code ) == bpf _ ret ;	EMPTY	EMPTY
552	759	3	-1	0	-1	}	EMPTY	EMPTY
562	15	1	0	0	-1	# endif	EMPTY	EMPTY
562	17	1	1	0	1	char * const z _ errmsg [ numconst ] = {	z _ errmsg	EMPTY
562	18	2	-1	1	-1	strlit	EMPTY	EMPTY
562	19	2	-1	1	-1	strlit	EMPTY	EMPTY
562	20	2	-1	1	-1	strlit	EMPTY	EMPTY
562	21	2	-1	1	-1	strlit	EMPTY	EMPTY
562	22	2	-1	1	-1	strlit	EMPTY	EMPTY
562	23	2	-1	1	-1	strlit	EMPTY	EMPTY
562	24	2	-1	1	-1	strlit	EMPTY	EMPTY
562	25	2	-1	1	-1	strlit	EMPTY	EMPTY
562	26	2	-1	1	-1	strlit	EMPTY	EMPTY
562	27	3	-1	0	-1	strlit } ;	EMPTY	EMPTY
562	30	1	0	0	-1	const char * zexport zlibversion ( )	EMPTY	EMPTY
562	31	2	-1	0	-1	{	EMPTY	EMPTY
562	32	2	-1	0	-1	return zlib _ version ;	EMPTY	EMPTY
562	33	3	-1	0	-1	}	EMPTY	EMPTY
562	35	1	0	0	-1	ulong zexport zlibcompileflags ( )	ulong	EMPTY
562	36	2	-1	0	-1	{	EMPTY	EMPTY
562	37	3	-1	0	-1	ulong flags ;	ulong	EMPTY
562	39	1	0	0	-1	flags = 0	EMPTY	EMPTY
562	40	2	-1	0	-1	switch ( ( int ) ( sizeof ( uint ) ) ) {	uint	EMPTY
562	41	2	-1	0	-1	case 2 : break ;	EMPTY	EMPTY
562	42	2	-1	0	-1	case 4 : flags += 1 ; break ;	EMPTY	EMPTY
562	43	2	-1	0	-1	case 8 : flags += 2 ; break ;	EMPTY	EMPTY
562	44	2	-1	0	-1	default : flags += 3 ;	EMPTY	EMPTY
562	45	2	-1	0	-1	}	EMPTY	EMPTY
562	46	2	-1	0	-1	switch ( ( int ) ( sizeof ( ulong ) ) ) {	ulong	EMPTY
562	47	2	-1	0	-1	case 2 : break ;	EMPTY	EMPTY
562	48	2	-1	0	-1	case 4 : flags += 1 << 2 ; break ;	EMPTY	EMPTY
562	49	2	-1	0	-1	case 8 : flags += 2 << 2 ; break ;	EMPTY	EMPTY
562	50	2	-1	0	-1	default : flags += 3 << 2 ;	EMPTY	EMPTY
562	51	2	-1	0	-1	}	EMPTY	EMPTY
562	52	2	-1	0	-1	switch ( ( int ) ( sizeof ( voidpf ) ) ) {	EMPTY	EMPTY
562	53	2	-1	0	-1	case 2 : break ;	EMPTY	EMPTY
562	54	2	-1	0	-1	case 4 : flags += 1 << 4 ; break ;	EMPTY	EMPTY
562	55	2	-1	0	-1	case 8 : flags += 2 << 4 ; break ;	EMPTY	EMPTY
562	56	2	-1	0	-1	default : flags += 3 << 4 ;	EMPTY	EMPTY
562	57	2	-1	0	-1	}	EMPTY	EMPTY
562	58	2	-1	0	-1	switch ( ( int ) ( sizeof ( z _ off _ t ) ) ) {	EMPTY	EMPTY
562	59	2	-1	0	-1	case 2 : break ;	EMPTY	EMPTY
562	60	2	-1	0	-1	case 4 : flags += 1 << 6 ; break ;	EMPTY	EMPTY
562	61	2	-1	0	-1	case 8 : flags += 2 << 6 ; break ;	EMPTY	EMPTY
562	62	2	-1	0	-1	default : flags += 3 << 6 ;	EMPTY	EMPTY
562	63	2	-1	0	-1	}	EMPTY	EMPTY
562	64	2	-1	0	-1	# ifdef debug	EMPTY	EMPTY
562	65	2	-1	0	-1	flags += numconst << numconst ;	EMPTY	EMPTY
562	66	2	-1	0	-1	# endif	EMPTY	EMPTY
562	67	2	-1	0	-1	# if defined ( asmv ) || defined ( asminf )	EMPTY	EMPTY
562	68	3	-1	0	-1	flags += numconst << numconst ;	EMPTY	EMPTY
562	69	1	0	0	-1	# endif	EMPTY	EMPTY
562	70	2	-1	0	-1	# ifdef zlib _ winapi	EMPTY	EMPTY
562	71	2	-1	0	-1	flags += numconst << numconst ;	EMPTY	EMPTY
562	72	2	-1	0	-1	# endif	EMPTY	EMPTY
562	73	2	-1	0	-1	# ifdef buildfixed	EMPTY	EMPTY
562	74	2	-1	0	-1	flags += numconst << numconst ;	EMPTY	EMPTY
562	75	2	-1	0	-1	# endif	EMPTY	EMPTY
562	76	2	-1	0	-1	# ifdef dynamic _ crc _ table	EMPTY	EMPTY
562	77	2	-1	0	-1	flags += numconst << numconst ;	EMPTY	EMPTY
562	78	2	-1	0	-1	# endif	EMPTY	EMPTY
562	79	2	-1	0	-1	# ifdef no _ gzcompress	EMPTY	EMPTY
562	80	2	-1	0	-1	flags += numconst << numconst ;	EMPTY	EMPTY
562	81	2	-1	0	-1	# endif	EMPTY	EMPTY
562	82	2	-1	0	-1	# ifdef no _ gzip	EMPTY	EMPTY
562	83	2	-1	0	-1	flags += numconst << numconst ;	EMPTY	EMPTY
562	84	2	-1	0	-1	# endif	EMPTY	EMPTY
562	85	2	-1	0	-1	# ifdef pkzip _ bug _ workaround	EMPTY	EMPTY
562	86	2	-1	0	-1	flags += numconst << numconst ;	EMPTY	EMPTY
562	87	2	-1	0	-1	# endif	EMPTY	EMPTY
562	88	2	-1	0	-1	# ifdef fastest	EMPTY	EMPTY
562	89	2	-1	0	-1	flags += numconst << numconst ;	EMPTY	EMPTY
562	90	2	-1	0	-1	# endif	EMPTY	EMPTY
562	91	2	-1	0	-1	# if defined ( stdc ) || defined ( z _ have _ stdarg _ h )	EMPTY	EMPTY
562	92	2	-1	0	-1	# ifdef no _ vsnprintf	EMPTY	EMPTY
562	93	2	-1	0	-1	flags += numconst << numconst ;	EMPTY	EMPTY
562	94	2	-1	0	-1	# ifdef has _ vsprintf _ void	EMPTY	EMPTY
562	95	2	-1	0	-1	flags += numconst << numconst ;	EMPTY	EMPTY
562	96	2	-1	0	-1	# endif	EMPTY	EMPTY
562	97	2	-1	0	-1	# else	EMPTY	EMPTY
562	98	3	-1	0	-1	# ifdef has _ vsnprintf _ void	EMPTY	EMPTY
562	99	1	0	0	-1	flags += numconst << numconst ;	EMPTY	EMPTY
562	100	2	-1	0	-1	# endif	EMPTY	EMPTY
562	101	2	-1	0	-1	# endif	EMPTY	EMPTY
562	102	2	-1	0	-1	# else	EMPTY	EMPTY
562	103	2	-1	0	-1	flags += numconst << numconst ;	EMPTY	EMPTY
562	104	2	-1	0	-1	# ifdef no _ snprintf	EMPTY	EMPTY
562	105	2	-1	0	-1	flags += numconst << numconst ;	EMPTY	EMPTY
562	106	2	-1	0	-1	# ifdef has _ sprintf _ void	EMPTY	EMPTY
562	107	2	-1	0	-1	flags += numconst << numconst ;	EMPTY	EMPTY
562	108	2	-1	0	-1	# endif	EMPTY	EMPTY
562	109	2	-1	0	-1	# else	EMPTY	EMPTY
562	110	2	-1	0	-1	# ifdef has _ snprintf _ void	EMPTY	EMPTY
562	111	2	-1	0	-1	flags += numconst << numconst ;	EMPTY	EMPTY
562	112	2	-1	0	-1	# endif	EMPTY	EMPTY
562	113	2	-1	0	-1	# endif	EMPTY	EMPTY
562	114	2	-1	0	-1	# endif	EMPTY	EMPTY
562	115	2	-1	0	-1	return flags	EMPTY	EMPTY
562	116	3	-1	0	-1	}	EMPTY	EMPTY
562	118	1	0	0	-1	# ifdef debug	EMPTY	EMPTY
562	120	1	0	0	-1	# ifndef verbose	EMPTY	EMPTY
562	121	2	-1	0	-1	# define verbose numconst	EMPTY	EMPTY
562	122	2	-1	0	-1	# endif	EMPTY	EMPTY
562	123	3	-1	0	-1	int zlib _ internal z _ verbose = verbose ;	EMPTY	EMPTY
562	125	1	0	0	-1	void zlib _ internal z _ error ( m )	EMPTY	EMPTY
562	126	2	-1	0	-1	char * m ;	EMPTY	EMPTY
562	127	2	-1	0	-1	{	EMPTY	EMPTY
562	128	2	-1	0	-1	fprintf ( stderr  strlit  m ) ;	EMPTY	EMPTY
562	129	2	-1	0	-1	exit ( numconst ) ;	EMPTY	EMPTY
562	130	2	-1	0	-1	}	EMPTY	EMPTY
562	131	3	-1	0	-1	# endif	EMPTY	EMPTY
562	136	1	0	0	-1	const char * zexport zerror ( err )	zerror err	EMPTY
562	137	2	-1	0	-1	int err ;	err	EMPTY
562	138	2	-1	0	-1	{	EMPTY	EMPTY
562	139	2	-1	0	-1	return err _ msg ( err ) ;	err	EMPTY
562	140	3	-1	0	-1	}	EMPTY	EMPTY
562	142	1	1	0	-1	# if defined (  _ win32 _ wce )	EMPTY	EMPTY
562	147	2	-1	1	-1	int errno = numconst ;	EMPTY	EMPTY
562	148	3	-1	0	-1	# endif	EMPTY	EMPTY
562	150	1	0	0	-1	# ifndef have _ memcpy	EMPTY	EMPTY
562	152	1	0	0	-1	void zlib _ internal zmemcpy ( dest  source  len )	EMPTY	EMPTY
562	153	2	-1	0	-1	bytef * dest ;	EMPTY	EMPTY
562	154	2	-1	0	-1	const bytef * source ;	EMPTY	EMPTY
562	155	2	-1	0	-1	uint len ;	uint	EMPTY
562	156	2	-1	0	-1	{	EMPTY	EMPTY
562	157	2	-1	0	-1	if ( len == numconst ) return ;	EMPTY	EMPTY
562	158	3	-1	0	-1	do {	EMPTY	EMPTY
562	160	1	1	1	-1	} while ( -- len != numconst ) ;	EMPTY	EMPTY
562	161	3	-1	0	-1	}	EMPTY	EMPTY
562	163	1	0	0	-1	int zlib _ internal zmemcmp ( s1  s2  len )	EMPTY	EMPTY
562	164	2	-1	0	-1	const bytef * s1 ;	EMPTY	EMPTY
562	165	2	-1	0	-1	const bytef * s2 ;	EMPTY	EMPTY
562	166	2	-1	0	-1	uint len ;	uint	EMPTY
562	167	2	-1	0	-1	{	EMPTY	EMPTY
562	168	3	-1	0	-1	uint j ;	uint	EMPTY
562	170	1	0	0	-1	for ( j = numconst ; j < len ; j ++ ) {	EMPTY	EMPTY
562	171	2	-1	0	-1	if ( s1 [ j ] != s2 [ j ] ) return numconst * ( s1 [ j ] > s2 [ j ] ) - numconst ;	EMPTY	EMPTY
562	172	2	-1	0	-1	}	EMPTY	EMPTY
562	173	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
562	174	3	-1	0	-1	}	EMPTY	EMPTY
562	176	1	0	0	-1	void zlib _ internal zmemzero ( dest  len )	EMPTY	EMPTY
562	177	2	-1	0	-1	bytef * dest ;	EMPTY	EMPTY
562	178	2	-1	0	-1	uint len ;	uint	EMPTY
562	179	2	-1	0	-1	{	EMPTY	EMPTY
562	180	2	-1	0	-1	if ( len == numconst ) return ;	EMPTY	EMPTY
562	181	3	-1	0	-1	do {	EMPTY	EMPTY
562	183	1	1	1	-1	} while ( -- len != numconst ) ;	EMPTY	EMPTY
562	184	2	-1	0	-1	}	EMPTY	EMPTY
562	185	3	-1	0	-1	# endif	EMPTY	EMPTY
562	187	1	0	0	-1	# ifndef z _ solo	EMPTY	EMPTY
562	189	1	0	0	-1	# ifdef sys16bit	EMPTY	EMPTY
562	191	1	0	0	-1	# ifdef  _  _ turboc _  _	EMPTY	EMPTY
562	194	1	1	1	-1	# define my _ zcalloc	EMPTY	EMPTY
562	202	1	1	1	-1	# define max _ ptr numconst	EMPTY	EMPTY
562	205	1	1	1	-1	local int next _ ptr = numconst ;	EMPTY	EMPTY
562	207	1	0	0	-1	typedef struct ptr _ table _ s {	EMPTY	EMPTY
562	208	2	-1	0	-1	voidpf org _ ptr ;	EMPTY	EMPTY
562	209	2	-1	0	-1	voidpf new _ ptr ;	EMPTY	EMPTY
562	210	3	-1	0	-1	} ptr _ table ;	EMPTY	EMPTY
562	212	1	0	0	-1	local ptr _ table table [ max _ ptr ] ;	EMPTY	EMPTY
562	220	1	1	1	-1	voidpf zlib _ internal zcalloc ( voidpf opaque  unsigned items  unsigned size )	opaque size	EMPTY
562	221	2	-1	0	-1	{	EMPTY	EMPTY
562	222	2	-1	1	-1	voidpf buf = opaque ;	opaque	EMPTY
562	223	3	-1	0	-1	ulg bsize = ( ulg ) items * size ;	size	EMPTY
562	228	1	1	1	-1	if ( bsize < numconst ) {	EMPTY	EMPTY
562	229	2	-1	0	-1	buf = farmalloc ( bsize ) ;	EMPTY	EMPTY
562	230	2	-1	0	-1	if ( * ( ush * ) & buf != numconst ) return buf ;	EMPTY	EMPTY
562	231	2	-1	0	-1	} else {	EMPTY	EMPTY
562	232	2	-1	0	-1	buf = farmalloc ( bsize + numconst ) ;	EMPTY	EMPTY
562	233	2	-1	0	-1	}	EMPTY	EMPTY
562	234	2	-1	0	-1	if ( buf == null || next _ ptr >= max _ ptr ) return null ;	EMPTY	EMPTY
562	235	3	-1	0	-1	table [ next _ ptr ] . org _ ptr = buf ;	EMPTY	EMPTY
562	240	1	1	1	-1	table [ next _ ptr ++ ] . new _ ptr = buf ;	EMPTY	EMPTY
562	241	2	-1	0	-1	return buf ;	EMPTY	EMPTY
562	242	3	-1	0	-1	}	EMPTY	EMPTY
562	244	1	1	0	-1	void zlib _ internal zcfree ( voidpf opaque  voidpf ptr )	opaque	EMPTY
562	245	2	-1	0	-1	{	EMPTY	EMPTY
562	246	2	-1	0	-1	int n ;	EMPTY	EMPTY
562	247	2	-1	1	-1	if ( * ( ush * ) & ptr != numconst ) {	EMPTY	EMPTY
562	248	2	-1	0	-1	farfree ( ptr ) ;	EMPTY	EMPTY
562	249	2	-1	0	-1	return ;	EMPTY	EMPTY
562	250	2	-1	0	-1	}	EMPTY	EMPTY
562	252	2	-1	1	-1	for ( n = numconst ; n < next _ ptr ; n ++ ) {	EMPTY	EMPTY
562	253	3	-1	0	-1	if ( ptr != table [ n ] . new _ ptr ) continue ;	EMPTY	EMPTY
562	255	1	1	0	-1	farfree ( table [ n ] . org _ ptr ) ;	EMPTY	EMPTY
562	256	2	-1	0	-1	while ( ++ n < next _ ptr ) {	EMPTY	EMPTY
562	257	2	-1	0	-1	table [ n - numconst ] = table [ n ] ;	EMPTY	EMPTY
562	258	2	-1	0	-1	}	EMPTY	EMPTY
562	259	2	-1	0	-1	next _ ptr -- ;	EMPTY	EMPTY
562	260	2	-1	0	-1	return ;	EMPTY	EMPTY
562	261	2	-1	0	-1	}	EMPTY	EMPTY
562	262	2	-1	1	-1	ptr = opaque ;	opaque	EMPTY
562	263	2	-1	0	-1	assert ( numconst  strlit ) ;	EMPTY	EMPTY
562	264	3	-1	0	-1	}	EMPTY	EMPTY
562	266	1	1	1	-1	# endif	EMPTY	EMPTY
562	269	1	0	0	-1	# ifdef m _ i86	EMPTY	EMPTY
562	272	1	1	1	-1	# define my _ zcalloc	EMPTY	EMPTY
562	274	1	0	0	-1	# if ( ! defined (  _ msc _ ver ) || (  _ msc _ ver <= numconst ) )	EMPTY	EMPTY
562	275	2	-1	0	-1	# define  _ halloc halloc	EMPTY	EMPTY
562	276	2	-1	0	-1	# define  _ hfree hfree	EMPTY	EMPTY
562	277	3	-1	0	-1	# endif	EMPTY	EMPTY
562	279	1	1	0	-1	voidpf zlib _ internal zcalloc ( voidpf opaque  uint items  uint size )	opaque uint uint size	EMPTY
562	280	2	-1	0	-1	{	EMPTY	EMPTY
562	281	2	-1	1	-1	if ( opaque ) opaque = numconst ;	opaque opaque	EMPTY
562	282	2	-1	0	-1	return  _ halloc ( ( long ) items  size ) ;	size	EMPTY
562	283	3	-1	0	-1	}	EMPTY	EMPTY
562	285	1	1	0	-1	void zlib _ internal zcfree ( voidpf opaque  voidpf ptr )	opaque	EMPTY
562	286	2	-1	0	-1	{	EMPTY	EMPTY
562	287	2	-1	1	-1	if ( opaque ) opaque = numconst ;	opaque opaque	EMPTY
562	288	2	-1	0	-1	_ hfree ( ptr ) ;	EMPTY	EMPTY
562	289	3	-1	0	-1	}	EMPTY	EMPTY
562	291	1	1	1	-1	# endif	EMPTY	EMPTY
562	293	1	1	1	-1	# endif	EMPTY	EMPTY
562	296	1	1	1	-1	# ifndef my _ zcalloc	EMPTY	EMPTY
562	298	1	0	0	-1	# ifndef stdc	EMPTY	EMPTY
562	299	2	-1	0	-1	extern voidp malloc of ( ( uint size ) ) ;	uint size	EMPTY
562	300	2	-1	0	-1	extern voidp calloc of ( ( uint items  uint size ) ) ;	uint uint size	EMPTY
562	301	2	-1	0	-1	extern void free of ( ( voidpf ptr ) ) ;	EMPTY	EMPTY
562	302	3	-1	0	-1	# endif	EMPTY	EMPTY
562	304	1	0	0	-1	voidpf zlib _ internal zcalloc ( opaque  items  size )	opaque size	EMPTY
562	305	2	-1	0	-1	voidpf opaque ;	opaque	EMPTY
562	306	2	-1	0	-1	unsigned items ;	EMPTY	EMPTY
562	307	2	-1	0	-1	unsigned size ;	size	EMPTY
562	308	2	-1	0	-1	{	EMPTY	EMPTY
562	309	2	-1	0	-1	if ( opaque ) items += size - size	opaque size size	EMPTY
562	310	2	-1	0	-1	return sizeof ( uint ) > 2 ? ( voidpf ) malloc ( items * size ) :	uint size	EMPTY
562	311	2	-1	0	-1	( voidpf ) calloc ( items , size )	size	EMPTY
562	312	3	-1	0	-1	}	EMPTY	EMPTY
562	314	1	0	0	-1	void zlib _ internal zcfree ( opaque  ptr )	opaque	EMPTY
562	315	2	-1	0	-1	voidpf opaque ;	opaque	EMPTY
562	316	2	-1	0	-1	voidpf ptr ;	EMPTY	EMPTY
562	317	2	-1	0	-1	{	EMPTY	EMPTY
562	318	2	-1	0	-1	free ( ptr ) ;	EMPTY	EMPTY
562	319	2	-1	0	-1	if ( opaque ) return ;	opaque	EMPTY
562	320	3	-1	0	-1	}	EMPTY	EMPTY
562	322	1	1	1	1	# endif	EMPTY	EMPTY
562	324	1	1	1	-1	# endif	EMPTY	EMPTY
583	28	1	1	0	1	struct {	EMPTY	EMPTY
583	29	3	-1	1	-1	struct jpeg _ source _ mgr pub ;	jpeg _ source _ mgr pub	EMPTY
583	31	1	1	1	1	file * infile ;	infile	EMPTY
583	32	2	-1	1	-1	joctet * buffer ;	buffer	EMPTY
583	33	2	-1	1	-1	boolean start _ of _ file ;	start _ of _ file	EMPTY
583	34	3	-1	0	-1	} my _ source _ mgr ;	EMPTY	EMPTY
583	36	1	0	0	-1	typedef my _ source _ mgr * my _ src _ ptr ;	EMPTY	EMPTY
583	38	1	1	1	1	# define input _ buf _ size numconst	EMPTY	EMPTY
583	46	1	1	1	-1	methoddef ( void )	EMPTY	EMPTY
583	47	2	-1	0	-1	init _ source ( j _ decompress _ ptr cinfo )	cinfo	EMPTY
583	48	2	-1	0	-1	{	EMPTY	EMPTY
583	49	3	-1	0	-1	my _ src _ ptr src = ( my _ src _ ptr ) cinfo -> src ;	src cinfo src	EMPTY
583	55	1	1	1	-1	src -> start _ of _ file = true ;	src start _ of _ file	EMPTY
583	56	3	-1	0	-1	}	EMPTY	EMPTY
583	58	1	1	0	1	# if jpeg _ lib _ version >= numconst || defined ( mem _ srcdst _ supported	EMPTY	EMPTY
583	59	2	-1	0	-1	methoddef ( void )	EMPTY	EMPTY
583	60	2	-1	0	-1	init _ mem _ source ( j _ decompress _ ptr cinfo )	cinfo	EMPTY
583	61	2	-1	0	-1	{	EMPTY	EMPTY
583	63	2	-1	1	-1	}	EMPTY	EMPTY
583	64	3	-1	0	-1	# endif	EMPTY	EMPTY
583	100	1	1	1	-1	methoddef ( boolean )	EMPTY	EMPTY
583	101	2	-1	0	-1	fill _ input _ buffer ( j _ decompress _ ptr cinfo )	cinfo	EMPTY
583	102	2	-1	0	-1	{	EMPTY	EMPTY
583	103	2	-1	0	-1	my _ src _ ptr src = ( my _ src _ ptr ) cinfo -> src ;	src cinfo src	EMPTY
583	104	3	-1	0	-1	size _ t nbytes ;	EMPTY	EMPTY
583	106	1	0	0	-1	nbytes = jfread ( src -> infile  src -> buffer  input _ buf _ size ) ;	src infile src buffer	EMPTY
583	108	1	1	0	1	if ( nbytes <= numconst ) {	EMPTY	EMPTY
583	109	2	-1	1	-1	if ( src -> start _ of _ file )	src start _ of _ file	EMPTY
583	110	2	-1	0	-1	errexit ( cinfo  jerr _ input _ empty ) ;	cinfo	EMPTY
583	111	2	-1	0	-1	warnms ( cinfo  jwrn _ jpeg _ eof ) ;	cinfo	EMPTY
583	113	2	-1	1	-1	src -> buffer [ 0 ] = ( joctet ) 0xff	src buffer	EMPTY
583	114	2	-1	0	-1	src -> buffer [ numconst ] = ( joctet ) jpeg _ eoi ;	src buffer	EMPTY
583	115	2	-1	0	-1	nbytes = 2	EMPTY	EMPTY
583	116	3	-1	0	-1	}	EMPTY	EMPTY
583	118	1	0	0	-1	src -> pub . next _ input _ byte = src -> buffer ;	src pub next _ input _ byte src buffer	EMPTY
583	119	2	-1	0	-1	src -> pub . bytes _ in _ buffer = nbytes ;	src pub bytes _ in _ buffer	EMPTY
583	120	3	-1	0	-1	src -> start _ of _ file = false ;	src start _ of _ file	EMPTY
583	122	1	0	0	0	return true ;	EMPTY	EMPTY
583	123	3	-1	0	-1	}	EMPTY	EMPTY
583	125	1	0	0	0	# if jpeg _ lib _ version >= numconst || defined ( mem _ srcdst _ supported	EMPTY	EMPTY
583	126	2	-1	0	-1	methoddef ( boolean )	EMPTY	EMPTY
583	127	2	-1	0	-1	fill _ mem _ input _ buffer ( j _ decompress _ ptr cinfo )	cinfo	EMPTY
583	128	2	-1	0	-1	{	EMPTY	EMPTY
583	129	2	-1	0	-1	static const joctet mybuffer [ numconst ] = {	EMPTY	EMPTY
583	130	2	-1	0	-1	( joctet ) numconst  ( joctet ) jpeg _ eoi  numconst  numconst	EMPTY	EMPTY
583	131	3	-1	0	-1	} ;	EMPTY	EMPTY
583	137	1	1	1	-1	warnms ( cinfo  jwrn _ jpeg _ eof ) ;	cinfo	EMPTY
583	141	1	1	1	-1	cinfo -> src -> next _ input _ byte = mybuffer	cinfo src next _ input _ byte	EMPTY
583	142	3	-1	0	-1	cinfo -> src -> bytes _ in _ buffer = 2	cinfo src bytes _ in _ buffer	EMPTY
583	144	1	0	0	0	return true ;	EMPTY	EMPTY
583	145	2	-1	0	-1	}	EMPTY	EMPTY
583	146	3	-1	0	-1	# endif	EMPTY	EMPTY
583	161	1	1	1	-1	methoddef ( void )	EMPTY	EMPTY
583	162	2	-1	0	-1	skip _ input _ data ( j _ decompress _ ptr cinfo  long num _ bytes )	cinfo	EMPTY
583	163	2	-1	0	-1	{	EMPTY	EMPTY
583	164	3	-1	0	-1	struct jpeg _ source _ mgr * src = cinfo -> src ;	jpeg _ source _ mgr src cinfo src	EMPTY
583	170	1	1	1	1	if ( num _ bytes > numconst ) {	EMPTY	EMPTY
583	171	2	-1	0	-1	while ( num _ bytes > ( long ) src -> bytes _ in _ buffer ) {	src bytes _ in _ buffer	EMPTY
583	172	2	-1	0	-1	num _ bytes -= ( long ) src -> bytes _ in _ buffer	src bytes _ in _ buffer	EMPTY
583	173	2	-1	0	-1	( void ) ( * src -> fill _ input _ buffer ) ( cinfo )	src cinfo	EMPTY
583	177	2	-1	1	-1	}	EMPTY	EMPTY
583	178	2	-1	0	-1	src -> next _ input _ byte += ( size _ t ) num _ bytes ;	src next _ input _ byte	EMPTY
583	179	2	-1	0	-1	src -> bytes _ in _ buffer -= ( size _ t ) num _ bytes ;	src bytes _ in _ buffer	EMPTY
583	180	2	-1	0	-1	}	EMPTY	EMPTY
583	181	3	-1	0	-1	}	EMPTY	EMPTY
583	202	1	1	1	-1	methoddef ( void )	EMPTY	EMPTY
583	203	2	-1	0	-1	term _ source ( j _ decompress _ ptr cinfo )	cinfo	EMPTY
583	204	2	-1	0	-1	{	EMPTY	EMPTY
583	206	3	-1	1	-1	}	EMPTY	EMPTY
583	215	1	1	1	-1	global ( void )	EMPTY	EMPTY
583	216	2	-1	0	-1	jpeg _ stdio _ src ( j _ decompress _ ptr cinfo  file * infile )	cinfo infile	EMPTY
583	217	2	-1	0	-1	{	EMPTY	EMPTY
583	218	3	-1	0	-1	my _ src _ ptr src ;	src	EMPTY
583	227	1	1	1	1	if ( cinfo -> src == null ) {	cinfo src	EMPTY
583	228	2	-1	0	-1	cinfo -> src = ( struct jpeg _ source _ mgr * )	cinfo src jpeg _ source _ mgr	EMPTY
583	229	2	-1	0	-1	( * cinfo -> mem -> alloc _ small ) ( ( j _ common _ ptr ) cinfo , jpool _ permanent ,	cinfo mem alloc _ small cinfo	EMPTY
583	230	2	-1	0	-1	sizeof ( my _ source _ mgr ) )	EMPTY	EMPTY
583	231	2	-1	0	-1	src = ( my _ src _ ptr ) cinfo -> src	src cinfo src	EMPTY
583	232	2	-1	0	-1	src -> buffer = ( joctet * )	src buffer	EMPTY
583	233	2	-1	0	-1	( * cinfo -> mem -> alloc _ small ) ( ( j _ common _ ptr ) cinfo , jpool _ permanent ,	cinfo mem alloc _ small cinfo	EMPTY
583	234	2	-1	0	-1	input _ buf _ size * sizeof ( joctet ) )	EMPTY	EMPTY
583	235	3	-1	0	-1	}	EMPTY	EMPTY
583	237	1	1	0	-1	src = ( my _ src _ ptr ) cinfo -> src ;	src cinfo src	EMPTY
583	238	2	-1	0	-1	src -> pub . init _ source = init _ source ;	src pub	EMPTY
583	239	2	-1	0	-1	src -> pub . fill _ input _ buffer = fill _ input _ buffer ;	src pub	EMPTY
583	240	2	-1	0	-1	src -> pub . skip _ input _ data = skip _ input _ data ;	src pub	EMPTY
583	241	2	-1	1	-1	src -> pub . resync _ to _ restart = jpeg _ resync _ to _ restart ;	src pub jpeg _ resync _ to _ restart	EMPTY
583	242	2	-1	0	-1	src -> pub . term _ source = term _ source	src pub	EMPTY
583	243	2	-1	0	-1	src -> infile = infile	src infile infile	EMPTY
583	244	2	-1	1	-1	src -> pub . bytes _ in _ buffer = 0	src pub bytes _ in _ buffer	EMPTY
583	245	2	-1	1	-1	src -> pub . next _ input _ byte = null ;	src pub next _ input _ byte	EMPTY
583	246	3	-1	0	-1	}	EMPTY	EMPTY
583	249	1	0	0	-1	# if jpeg _ lib _ version >= numconst || defined ( mem _ srcdst _ supported )	EMPTY	EMPTY
583	255	1	1	1	-1	global ( void )	EMPTY	EMPTY
583	256	2	-1	0	-1	jpeg _ mem _ src ( j _ decompress _ ptr cinfo	cinfo	EMPTY
583	257	2	-1	0	-1	unsigned char * inbuffer  unsigned long insize )	EMPTY	EMPTY
583	258	2	-1	0	-1	{	EMPTY	EMPTY
583	259	3	-1	0	-1	struct jpeg _ source _ mgr * src ;	jpeg _ source _ mgr src	EMPTY
583	261	1	1	1	-1	if ( inbuffer == null || insize == numconst )	EMPTY	EMPTY
583	262	3	-1	0	-1	errexit ( cinfo  jerr _ input _ empty ) ;	cinfo	EMPTY
583	268	1	1	1	1	if ( cinfo -> src == null ) {	cinfo src	EMPTY
583	269	2	-1	0	-1	cinfo -> src = ( struct jpeg _ source _ mgr * )	cinfo src jpeg _ source _ mgr	EMPTY
583	270	2	-1	0	-1	( * cinfo -> mem -> alloc _ small ) ( ( j _ common _ ptr ) cinfo , jpool _ permanent ,	cinfo mem alloc _ small cinfo	EMPTY
583	271	2	-1	0	-1	sizeof ( struct jpeg _ source _ mgr ) )	jpeg _ source _ mgr	EMPTY
583	272	3	-1	0	-1	}	EMPTY	EMPTY
583	274	1	1	0	-1	src = cinfo -> src ;	src cinfo src	EMPTY
583	275	2	-1	0	-1	src -> init _ source = init _ mem _ source ;	src	EMPTY
583	276	2	-1	0	-1	src -> fill _ input _ buffer = fill _ mem _ input _ buffer ;	src	EMPTY
583	277	2	-1	0	-1	src -> skip _ input _ data = skip _ input _ data ;	src	EMPTY
583	278	2	-1	1	-1	src -> resync _ to _ restart = jpeg _ resync _ to _ restart ;	src jpeg _ resync _ to _ restart	EMPTY
583	279	2	-1	0	-1	src -> term _ source = term _ source	src	EMPTY
583	280	2	-1	0	-1	src -> bytes _ in _ buffer = ( size _ t ) insize	src bytes _ in _ buffer	EMPTY
583	281	2	-1	0	-1	src -> next _ input _ byte = ( joctet * ) inbuffer	src next _ input _ byte	EMPTY
583	282	2	-1	0	-1	}	EMPTY	EMPTY
583	283	3	-1	0	-1	# endif	EMPTY	EMPTY
598	50	1	1	0	1	struct {	EMPTY	EMPTY
598	51	3	-1	1	-1	struct jpeg _ inverse _ dct pub ;	pub	EMPTY
598	58	1	1	1	1	int cur _ method [ max _ components ] ;	cur _ method	EMPTY
598	59	3	-1	0	-1	} my _ idct _ controller ;	EMPTY	EMPTY
598	61	1	0	0	-1	typedef my _ idct _ controller * my _ idct _ ptr ;	EMPTY	EMPTY
598	66	1	1	1	1	union {	EMPTY	EMPTY
598	67	2	-1	0	-1	islow _ mult _ type islow _ array [ dctsize2 ] ;	islow _ mult _ type	EMPTY
598	68	2	-1	0	-1	# ifdef dct _ ifast _ supported	EMPTY	EMPTY
598	69	2	-1	0	-1	ifast _ mult _ type ifast _ array [ dctsize2 ] ;	ifast _ mult _ type	EMPTY
598	70	2	-1	0	-1	# endif	EMPTY	EMPTY
598	71	2	-1	0	-1	# ifdef dct _ float _ supported	EMPTY	EMPTY
598	72	2	-1	0	-1	float _ mult _ type float _ array [ dctsize2 ] ;	float _ mult _ type	EMPTY
598	73	2	-1	0	-1	# endif	EMPTY	EMPTY
598	74	3	-1	0	-1	} multiplier _ table ;	EMPTY	EMPTY
598	80	1	1	1	-1	# ifdef dct _ islow _ supported	EMPTY	EMPTY
598	81	2	-1	0	-1	# define provide _ islow _ tables	EMPTY	EMPTY
598	82	2	-1	0	-1	# else	EMPTY	EMPTY
598	83	2	-1	0	-1	# ifdef idct _ scaling _ supported	EMPTY	EMPTY
598	84	2	-1	0	-1	# define provide _ islow _ tables	EMPTY	EMPTY
598	85	2	-1	0	-1	# endif	EMPTY	EMPTY
598	86	3	-1	0	-1	# endif	EMPTY	EMPTY
598	95	1	1	1	-1	methoddef ( void )	EMPTY	EMPTY
598	96	2	-1	0	-1	start _ pass ( j _ decompress _ ptr cinfo )	cinfo	EMPTY
598	97	2	-1	0	-1	{	EMPTY	EMPTY
598	98	2	-1	0	-1	my _ idct _ ptr idct = ( my _ idct _ ptr ) cinfo -> idct ;	cinfo	EMPTY
598	99	2	-1	0	-1	int ci , i ;	EMPTY	EMPTY
598	100	2	-1	0	-1	jpeg _ component _ info * compptr ;	compptr	EMPTY
598	101	2	-1	0	-1	int method = 0 ;	EMPTY	EMPTY
598	102	2	-1	0	-1	inverse _ dct _ method _ ptr method _ ptr = null ;	inverse _ dct _ method _ ptr	EMPTY
598	103	3	-1	0	-1	jquant _ tbl * qtbl ;	EMPTY	EMPTY
598	105	1	1	0	1	for ( ci = numconst  compptr = cinfo -> comp _ info ; ci < cinfo -> num _ components ;	compptr cinfo cinfo num _ components	EMPTY
598	106	2	-1	0	-1	ci ++  compptr ++ ) {	compptr	EMPTY
598	108	2	-1	1	-1	switch ( compptr ->  _ dct _ scaled _ size ) {	compptr	EMPTY
598	109	2	-1	0	-1	# ifdef idct _ scaling _ supported	EMPTY	EMPTY
598	110	2	-1	0	-1	case 1 :	EMPTY	EMPTY
598	111	2	-1	0	-1	method _ ptr = jpeg _ idct _ 1x1	EMPTY	EMPTY
598	112	2	-1	1	-1	method = jdct _ islow	jdct _ islow	EMPTY
598	113	2	-1	0	-1	break	EMPTY	EMPTY
598	114	2	-1	0	-1	case 2 :	EMPTY	EMPTY
598	115	2	-1	0	-1	if ( jsimd _ can _ idct _ 2x2 ( ) )	EMPTY	EMPTY
598	116	2	-1	0	-1	method _ ptr = jsimd _ idct _ 2x2 ;	EMPTY	EMPTY
598	117	2	-1	0	-1	else	EMPTY	EMPTY
598	118	2	-1	0	-1	method _ ptr = jpeg _ idct _ 2x2	EMPTY	EMPTY
598	119	2	-1	1	-1	method = jdct _ islow	jdct _ islow	EMPTY
598	120	2	-1	0	-1	break	EMPTY	EMPTY
598	121	2	-1	0	-1	case 3 :	EMPTY	EMPTY
598	122	2	-1	0	-1	method _ ptr = jpeg _ idct _ 3x3	EMPTY	EMPTY
598	123	2	-1	1	-1	method = jdct _ islow	jdct _ islow	EMPTY
598	124	2	-1	0	-1	break	EMPTY	EMPTY
598	125	2	-1	0	-1	case 4 :	EMPTY	EMPTY
598	126	2	-1	0	-1	if ( jsimd _ can _ idct _ 4x4 ( ) )	EMPTY	EMPTY
598	127	2	-1	0	-1	method _ ptr = jsimd _ idct _ 4x4 ;	EMPTY	EMPTY
598	128	2	-1	0	-1	else	EMPTY	EMPTY
598	129	2	-1	0	-1	method _ ptr = jpeg _ idct _ 4x4	EMPTY	EMPTY
598	130	2	-1	1	-1	method = jdct _ islow	jdct _ islow	EMPTY
598	131	2	-1	0	-1	break	EMPTY	EMPTY
598	132	2	-1	0	-1	case 5 :	EMPTY	EMPTY
598	133	2	-1	0	-1	method _ ptr = jpeg _ idct _ 5x5	EMPTY	EMPTY
598	134	2	-1	1	-1	method = jdct _ islow	jdct _ islow	EMPTY
598	135	3	-1	0	-1	break	EMPTY	EMPTY
598	136	1	1	0	-1	case 6 :	EMPTY	EMPTY
598	137	2	-1	0	-1	# if defined (  _  _ mips _  _  )	EMPTY	EMPTY
598	138	2	-1	0	-1	if ( jsimd _ can _ idct _ 6x6 ( ) )	EMPTY	EMPTY
598	139	2	-1	0	-1	method _ ptr = jsimd _ idct _ 6x6 ;	EMPTY	EMPTY
598	140	2	-1	0	-1	else	EMPTY	EMPTY
598	141	2	-1	0	-1	# endif	EMPTY	EMPTY
598	142	2	-1	0	-1	method _ ptr = jpeg _ idct _ 6x6	EMPTY	EMPTY
598	143	2	-1	1	-1	method = jdct _ islow	jdct _ islow	EMPTY
598	144	2	-1	0	-1	break	EMPTY	EMPTY
598	145	2	-1	0	-1	case 7 :	EMPTY	EMPTY
598	146	2	-1	0	-1	method _ ptr = jpeg _ idct _ 7x7	EMPTY	EMPTY
598	147	2	-1	1	-1	method = jdct _ islow	jdct _ islow	EMPTY
598	148	2	-1	0	-1	break	EMPTY	EMPTY
598	149	2	-1	0	-1	# endif	EMPTY	EMPTY
598	150	2	-1	0	-1	case dctsize :	EMPTY	EMPTY
598	151	2	-1	0	-1	switch ( cinfo -> dct _ method ) {	cinfo dct _ method	EMPTY
598	152	2	-1	0	-1	# ifdef dct _ islow _ supported	EMPTY	EMPTY
598	153	2	-1	0	-1	case jdct _ islow :	jdct _ islow	EMPTY
598	154	2	-1	0	-1	if ( jsimd _ can _ idct _ islow ( ) )	EMPTY	EMPTY
598	155	2	-1	0	-1	method _ ptr = jsimd _ idct _ islow ;	EMPTY	EMPTY
598	156	2	-1	0	-1	else	EMPTY	EMPTY
598	157	2	-1	0	-1	method _ ptr = jpeg _ idct _ islow ;	EMPTY	EMPTY
598	158	2	-1	0	-1	method = jdct _ islow ;	jdct _ islow	EMPTY
598	159	2	-1	0	-1	break ;	EMPTY	EMPTY
598	160	2	-1	0	-1	# endif	EMPTY	EMPTY
598	161	2	-1	0	-1	# ifdef dct _ ifast _ supported	EMPTY	EMPTY
598	162	2	-1	0	-1	case jdct _ ifast :	jdct _ ifast	EMPTY
598	163	2	-1	0	-1	if ( jsimd _ can _ idct _ ifast ( ) )	EMPTY	EMPTY
598	164	2	-1	0	-1	method _ ptr = jsimd _ idct _ ifast ;	EMPTY	EMPTY
598	165	3	-1	0	-1	else	EMPTY	EMPTY
598	166	1	1	0	-1	method _ ptr = jpeg _ idct _ ifast ;	EMPTY	EMPTY
598	167	2	-1	0	-1	method = jdct _ ifast ;	jdct _ ifast	EMPTY
598	168	2	-1	0	-1	break ;	EMPTY	EMPTY
598	169	2	-1	0	-1	# endif	EMPTY	EMPTY
598	170	2	-1	0	-1	# ifdef dct _ float _ supported	EMPTY	EMPTY
598	171	2	-1	0	-1	case jdct _ float :	jdct _ float	EMPTY
598	172	2	-1	0	-1	if ( jsimd _ can _ idct _ float ( ) )	EMPTY	EMPTY
598	173	2	-1	0	-1	method _ ptr = jsimd _ idct _ float ;	EMPTY	EMPTY
598	174	2	-1	0	-1	else	EMPTY	EMPTY
598	175	2	-1	0	-1	method _ ptr = jpeg _ idct _ float ;	EMPTY	EMPTY
598	176	2	-1	0	-1	method = jdct _ float ;	jdct _ float	EMPTY
598	177	2	-1	0	-1	break ;	EMPTY	EMPTY
598	178	2	-1	0	-1	# endif	EMPTY	EMPTY
598	179	2	-1	0	-1	default :	EMPTY	EMPTY
598	180	2	-1	0	-1	errexit ( cinfo , jerr _ not _ compiled ) ;	cinfo	EMPTY
598	181	2	-1	0	-1	break ;	EMPTY	EMPTY
598	182	2	-1	0	-1	}	EMPTY	EMPTY
598	183	2	-1	0	-1	break	EMPTY	EMPTY
598	184	2	-1	0	-1	# ifdef idct _ scaling _ supported	EMPTY	EMPTY
598	185	2	-1	0	-1	case 9 :	EMPTY	EMPTY
598	186	2	-1	0	-1	method _ ptr = jpeg _ idct _ 9x9	EMPTY	EMPTY
598	187	2	-1	1	-1	method = jdct _ islow	jdct _ islow	EMPTY
598	188	2	-1	0	-1	break	EMPTY	EMPTY
598	189	2	-1	0	-1	case 10 :	EMPTY	EMPTY
598	190	2	-1	0	-1	method _ ptr = jpeg _ idct _ 10x10	EMPTY	EMPTY
598	191	2	-1	1	-1	method = jdct _ islow	jdct _ islow	EMPTY
598	192	2	-1	0	-1	break	EMPTY	EMPTY
598	193	2	-1	0	-1	case 11 :	EMPTY	EMPTY
598	194	2	-1	0	-1	method _ ptr = jpeg _ idct _ 11x11	EMPTY	EMPTY
598	195	3	-1	1	-1	method = jdct _ islow	jdct _ islow	EMPTY
598	196	1	1	0	-1	break	EMPTY	EMPTY
598	197	2	-1	0	-1	case 12 :	EMPTY	EMPTY
598	198	2	-1	0	-1	# if defined (  _  _ mips _  _  )	EMPTY	EMPTY
598	199	2	-1	0	-1	if ( jsimd _ can _ idct _ 12x12 ( ) )	EMPTY	EMPTY
598	200	2	-1	0	-1	method _ ptr = jsimd _ idct _ 12x12 ;	EMPTY	EMPTY
598	201	2	-1	0	-1	else	EMPTY	EMPTY
598	202	2	-1	0	-1	# endif	EMPTY	EMPTY
598	203	2	-1	0	-1	method _ ptr = jpeg _ idct _ 12x12	EMPTY	EMPTY
598	204	2	-1	1	-1	method = jdct _ islow	jdct _ islow	EMPTY
598	205	2	-1	0	-1	break	EMPTY	EMPTY
598	206	2	-1	0	-1	case 13 :	EMPTY	EMPTY
598	207	2	-1	0	-1	method _ ptr = jpeg _ idct _ 13x13	EMPTY	EMPTY
598	208	2	-1	1	-1	method = jdct _ islow	jdct _ islow	EMPTY
598	209	2	-1	0	-1	break	EMPTY	EMPTY
598	210	2	-1	0	-1	case 14 :	EMPTY	EMPTY
598	211	2	-1	0	-1	method _ ptr = jpeg _ idct _ 14x14	EMPTY	EMPTY
598	212	2	-1	1	-1	method = jdct _ islow	jdct _ islow	EMPTY
598	213	2	-1	0	-1	break	EMPTY	EMPTY
598	214	2	-1	0	-1	case 15 :	EMPTY	EMPTY
598	215	2	-1	0	-1	method _ ptr = jpeg _ idct _ 15x15	EMPTY	EMPTY
598	216	2	-1	1	-1	method = jdct _ islow	jdct _ islow	EMPTY
598	217	2	-1	0	-1	break	EMPTY	EMPTY
598	218	2	-1	0	-1	case 16 :	EMPTY	EMPTY
598	219	2	-1	0	-1	method _ ptr = jpeg _ idct _ 16x16	EMPTY	EMPTY
598	220	2	-1	1	-1	method = jdct _ islow	jdct _ islow	EMPTY
598	221	2	-1	0	-1	break	EMPTY	EMPTY
598	222	2	-1	0	-1	# endif	EMPTY	EMPTY
598	223	2	-1	0	-1	default :	EMPTY	EMPTY
598	224	2	-1	0	-1	errexit1 ( cinfo  jerr _ bad _ dctsize  compptr ->  _ dct _ scaled _ size ) ;	cinfo compptr	EMPTY
598	225	3	-1	0	-1	break	EMPTY	EMPTY
598	226	1	1	0	-1	}	EMPTY	EMPTY
598	227	2	-1	0	-1	idct -> pub . inverse _ dct [ ci ] = method _ ptr ;	pub inverse _ dct	EMPTY
598	235	2	-1	1	-1	if ( ! compptr -> component _ needed || idct -> cur _ method [ ci ] == method )	compptr component _ needed cur _ method	EMPTY
598	236	2	-1	0	-1	continue	EMPTY	EMPTY
598	237	2	-1	0	-1	qtbl = compptr -> quant _ table	compptr quant _ table	EMPTY
598	238	2	-1	1	-1	if ( qtbl == null )	EMPTY	EMPTY
598	239	2	-1	0	-1	continue ;	EMPTY	EMPTY
598	240	2	-1	0	-1	idct -> cur _ method [ ci ] = method	cur _ method	EMPTY
598	241	2	-1	0	-1	switch ( method ) {	EMPTY	EMPTY
598	242	2	-1	0	-1	# ifdef provide _ islow _ tables	EMPTY	EMPTY
598	243	2	-1	0	-1	case jdct _ islow :	jdct _ islow	EMPTY
598	244	2	-1	0	-1	{	EMPTY	EMPTY
598	248	2	-1	1	-1	islow _ mult _ type * ismtbl = ( islow _ mult _ type * ) compptr -> dct _ table ;	islow _ mult _ type ismtbl islow _ mult _ type compptr dct _ table	EMPTY
598	249	2	-1	0	-1	for ( i = 0 ; i < dctsize2 ; i ++ ) {	EMPTY	EMPTY
598	250	2	-1	0	-1	ismtbl [ i ] = ( islow _ mult _ type ) qtbl -> quantval [ i ] ;	ismtbl islow _ mult _ type quantval	EMPTY
598	251	2	-1	0	-1	}	EMPTY	EMPTY
598	252	2	-1	0	-1	}	EMPTY	EMPTY
598	253	2	-1	0	-1	break ;	EMPTY	EMPTY
598	254	2	-1	0	-1	# endif	EMPTY	EMPTY
598	255	2	-1	0	-1	# ifdef dct _ ifast _ supported	EMPTY	EMPTY
598	256	2	-1	0	-1	case jdct _ ifast :	jdct _ ifast	EMPTY
598	257	2	-1	0	-1	{	EMPTY	EMPTY
598	265	2	-1	1	-1	ifast _ mult _ type * ifmtbl = ( ifast _ mult _ type * ) compptr -> dct _ table ;	ifast _ mult _ type ifmtbl ifast _ mult _ type compptr dct _ table	EMPTY
598	266	2	-1	0	-1	# define const _ bits numconst	EMPTY	EMPTY
598	267	2	-1	0	-1	static const int16 aanscales [ dctsize2 ] = {	int16	EMPTY
598	269	2	-1	1	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
598	270	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
598	271	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
598	272	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
598	273	3	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
598	274	1	0	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
598	275	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
598	276	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
598	277	2	-1	0	-1	} ;	EMPTY	EMPTY
598	278	3	-1	0	-1	shift _ temps	EMPTY	EMPTY
598	280	1	1	0	1	for ( i = 0 ; i < dctsize2 ; i ++ ) {	EMPTY	EMPTY
598	281	2	-1	0	-1	ifmtbl [ i ] = ( ifast _ mult _ type )	ifmtbl ifast _ mult _ type	EMPTY
598	282	2	-1	0	-1	descale ( multiply16v16 ( ( int32 ) qtbl -> quantval [ i ] ,	quantval	EMPTY
598	283	2	-1	0	-1	( int32 ) aanscales [ i ] ) ,	EMPTY	EMPTY
598	284	2	-1	0	-1	const _ bits - ifast _ scale _ bits ) ;	EMPTY	EMPTY
598	285	2	-1	0	-1	}	EMPTY	EMPTY
598	286	2	-1	0	-1	}	EMPTY	EMPTY
598	287	2	-1	0	-1	break ;	EMPTY	EMPTY
598	288	2	-1	0	-1	# endif	EMPTY	EMPTY
598	289	2	-1	0	-1	# ifdef dct _ float _ supported	EMPTY	EMPTY
598	290	2	-1	0	-1	case jdct _ float :	jdct _ float	EMPTY
598	291	2	-1	0	-1	{	EMPTY	EMPTY
598	297	2	-1	1	-1	float _ mult _ type * fmtbl = ( float _ mult _ type * ) compptr -> dct _ table ;	float _ mult _ type fmtbl float _ mult _ type compptr dct _ table	EMPTY
598	298	2	-1	0	-1	int row , col ;	EMPTY	EMPTY
598	299	2	-1	0	-1	static const double aanscalefactor [ dctsize ] = {	EMPTY	EMPTY
598	300	2	-1	0	-1	1.0 , 1.387039845 , 1.306562965 , 1.175875602 ,	EMPTY	EMPTY
598	301	2	-1	0	-1	1.0 , 0.785694958 , 0.541196100 , 0.275899379	EMPTY	EMPTY
598	302	3	-1	0	-1	} ;	EMPTY	EMPTY
598	304	1	0	0	-1	i = 0	EMPTY	EMPTY
598	305	2	-1	0	-1	for ( row = 0 ; row < dctsize ; row ++ ) {	EMPTY	EMPTY
598	306	2	-1	0	-1	for ( col = 0 ; col < dctsize ; col ++ ) {	EMPTY	EMPTY
598	307	2	-1	0	-1	fmtbl [ i ] = ( float _ mult _ type )	fmtbl float _ mult _ type	EMPTY
598	308	2	-1	0	-1	( ( double ) qtbl -> quantval [ i ] *	quantval	EMPTY
598	309	2	-1	0	-1	aanscalefactor [ row ] * aanscalefactor [ col ] ) ;	EMPTY	EMPTY
598	310	2	-1	0	-1	i ++ ;	EMPTY	EMPTY
598	311	2	-1	0	-1	}	EMPTY	EMPTY
598	312	2	-1	0	-1	}	EMPTY	EMPTY
598	313	2	-1	0	-1	}	EMPTY	EMPTY
598	314	2	-1	0	-1	break ;	EMPTY	EMPTY
598	315	2	-1	0	-1	# endif	EMPTY	EMPTY
598	316	2	-1	0	-1	default :	EMPTY	EMPTY
598	317	2	-1	0	-1	errexit ( cinfo  jerr _ not _ compiled ) ;	cinfo	EMPTY
598	318	2	-1	0	-1	break ;	EMPTY	EMPTY
598	319	2	-1	0	-1	}	EMPTY	EMPTY
598	320	2	-1	0	-1	}	EMPTY	EMPTY
598	321	3	-1	0	-1	}	EMPTY	EMPTY
598	328	1	1	1	-1	global ( void )	EMPTY	EMPTY
598	329	2	-1	0	-1	jinit _ inverse _ dct ( j _ decompress _ ptr cinfo )	cinfo	EMPTY
598	330	2	-1	0	-1	{	EMPTY	EMPTY
598	331	2	-1	0	-1	my _ idct _ ptr idct ;	EMPTY	EMPTY
598	332	2	-1	0	-1	int ci ;	EMPTY	EMPTY
598	333	3	-1	0	-1	jpeg _ component _ info * compptr ;	compptr	EMPTY
598	335	1	0	0	-1	idct = ( my _ idct _ ptr )	EMPTY	EMPTY
598	336	2	-1	0	-1	( * cinfo -> mem -> alloc _ small ) ( ( j _ common _ ptr ) cinfo , jpool _ image ,	cinfo mem alloc _ small cinfo	EMPTY
598	337	2	-1	0	-1	sizeof ( my _ idct _ controller ) )	EMPTY	EMPTY
598	338	2	-1	0	-1	cinfo -> idct = ( struct jpeg _ inverse _ dct * ) idct	cinfo	EMPTY
598	339	3	-1	0	-1	idct -> pub . start _ pass = start _ pass	pub	EMPTY
598	341	1	1	0	1	for ( ci = numconst  compptr = cinfo -> comp _ info ; ci < cinfo -> num _ components ;	compptr cinfo cinfo num _ components	EMPTY
598	342	2	-1	0	-1	ci ++  compptr ++ ) {	compptr	EMPTY
598	344	2	-1	1	-1	compptr -> dct _ table =	compptr dct _ table	EMPTY
598	345	2	-1	0	-1	( * cinfo -> mem -> alloc _ small ) ( ( j _ common _ ptr ) cinfo , jpool _ image ,	cinfo mem alloc _ small cinfo	EMPTY
598	346	2	-1	0	-1	sizeof ( multiplier _ table ) )	EMPTY	EMPTY
598	347	2	-1	0	-1	memzero ( compptr -> dct _ table  sizeof ( multiplier _ table ) ) ;	compptr dct _ table	EMPTY
598	349	2	-1	1	-1	idct -> cur _ method [ ci ] = - 1	cur _ method	EMPTY
598	350	2	-1	0	-1	}	EMPTY	EMPTY
598	351	3	-1	0	-1	}	EMPTY	EMPTY
615	24	1	0	0	0	struct {	EMPTY	EMPTY
615	25	3	-1	0	-1	struct jpeg _ color _ converter pub ;	jpeg _ color _ converter pub	EMPTY
615	28	1	1	1	1	int32 * rgb _ ycc _ tab ;	rgb _ ycc _ tab	EMPTY
615	29	3	-1	0	-1	} my _ color _ converter ;	EMPTY	EMPTY
615	31	1	0	0	-1	typedef my _ color _ converter * my _ cconvert _ ptr ;	EMPTY	EMPTY
615	64	1	1	1	-1	# define scalebits numconst	EMPTY	EMPTY
615	65	2	-1	0	-1	# define cbcr _ offset ( ( int32 ) centerjsample << scalebits )	EMPTY	EMPTY
615	66	2	-1	0	-1	# define one _ half ( ( int32 ) numconst << ( scalebits - numconst ) )	EMPTY	EMPTY
615	67	3	-1	0	-1	# define fix ( x ) ( ( int32 ) ( ( x ) * ( numconst << scalebits ) + numconst ) )	EMPTY	EMPTY
615	75	1	1	1	-1	# define r _ y _ off numconst	EMPTY	EMPTY
615	76	2	-1	1	-1	# define g _ y _ off ( numconst * ( maxjsample + numconst ) )	EMPTY	EMPTY
615	77	2	-1	1	-1	# define b _ y _ off ( numconst * ( maxjsample + numconst ) )	EMPTY	EMPTY
615	78	2	-1	0	-1	# define r _ cb _ off ( numconst * ( maxjsample + numconst ) )	EMPTY	EMPTY
615	79	2	-1	0	-1	# define g _ cb _ off ( numconst * ( maxjsample + numconst ) )	EMPTY	EMPTY
615	80	2	-1	0	-1	# define b _ cb _ off ( numconst * ( maxjsample + numconst ) )	EMPTY	EMPTY
615	81	2	-1	1	-1	# define r _ cr _ off b _ cb _ off	EMPTY	EMPTY
615	82	2	-1	0	-1	# define g _ cr _ off ( numconst * ( maxjsample + numconst ) )	EMPTY	EMPTY
615	83	2	-1	0	-1	# define b _ cr _ off ( numconst * ( maxjsample + numconst ) )	EMPTY	EMPTY
615	84	3	-1	0	-1	# define table _ size ( numconst * ( maxjsample + numconst ) )	EMPTY	EMPTY
615	89	1	1	1	-1	# include strlit	EMPTY	EMPTY
615	90	2	-1	0	-1	# undef rgb _ red	EMPTY	EMPTY
615	91	2	-1	0	-1	# undef rgb _ green	EMPTY	EMPTY
615	92	2	-1	0	-1	# undef rgb _ blue	EMPTY	EMPTY
615	93	3	-1	0	-1	# undef rgb _ pixelsize	EMPTY	EMPTY
615	95	1	0	0	-1	# define rgb _ red ext _ rgb _ red	EMPTY	EMPTY
615	96	2	-1	0	-1	# define rgb _ green ext _ rgb _ green	EMPTY	EMPTY
615	97	2	-1	0	-1	# define rgb _ blue ext _ rgb _ blue	EMPTY	EMPTY
615	98	2	-1	0	-1	# define rgb _ pixelsize ext _ rgb _ pixelsize	EMPTY	EMPTY
615	99	2	-1	0	-1	# define rgb _ ycc _ convert _ internal extrgb _ ycc _ convert _ internal	EMPTY	EMPTY
615	100	2	-1	0	-1	# define rgb _ gray _ convert _ internal extrgb _ gray _ convert _ internal	EMPTY	EMPTY
615	101	2	-1	0	-1	# define rgb _ rgb _ convert _ internal extrgb _ rgb _ convert _ internal	EMPTY	EMPTY
615	102	2	-1	0	-1	# include strlit	EMPTY	EMPTY
615	103	2	-1	0	-1	# undef rgb _ red	EMPTY	EMPTY
615	104	2	-1	0	-1	# undef rgb _ green	EMPTY	EMPTY
615	105	2	-1	0	-1	# undef rgb _ blue	EMPTY	EMPTY
615	106	2	-1	0	-1	# undef rgb _ pixelsize	EMPTY	EMPTY
615	107	2	-1	0	-1	# undef rgb _ ycc _ convert _ internal	EMPTY	EMPTY
615	108	2	-1	0	-1	# undef rgb _ gray _ convert _ internal	EMPTY	EMPTY
615	109	3	-1	0	-1	# undef rgb _ rgb _ convert _ internal	EMPTY	EMPTY
615	111	1	0	0	-1	# define rgb _ red ext _ rgbx _ red	EMPTY	EMPTY
615	112	2	-1	0	-1	# define rgb _ green ext _ rgbx _ green	EMPTY	EMPTY
615	113	2	-1	0	-1	# define rgb _ blue ext _ rgbx _ blue	EMPTY	EMPTY
615	114	2	-1	0	-1	# define rgb _ pixelsize ext _ rgbx _ pixelsize	EMPTY	EMPTY
615	115	2	-1	0	-1	# define rgb _ ycc _ convert _ internal extrgbx _ ycc _ convert _ internal	EMPTY	EMPTY
615	116	2	-1	0	-1	# define rgb _ gray _ convert _ internal extrgbx _ gray _ convert _ internal	EMPTY	EMPTY
615	117	2	-1	0	-1	# define rgb _ rgb _ convert _ internal extrgbx _ rgb _ convert _ internal	EMPTY	EMPTY
615	118	2	-1	0	-1	# include strlit	EMPTY	EMPTY
615	119	2	-1	0	-1	# undef rgb _ red	EMPTY	EMPTY
615	120	2	-1	0	-1	# undef rgb _ green	EMPTY	EMPTY
615	121	2	-1	0	-1	# undef rgb _ blue	EMPTY	EMPTY
615	122	2	-1	0	-1	# undef rgb _ pixelsize	EMPTY	EMPTY
615	123	2	-1	0	-1	# undef rgb _ ycc _ convert _ internal	EMPTY	EMPTY
615	124	2	-1	0	-1	# undef rgb _ gray _ convert _ internal	EMPTY	EMPTY
615	125	3	-1	0	-1	# undef rgb _ rgb _ convert _ internal	EMPTY	EMPTY
615	127	1	0	0	-1	# define rgb _ red ext _ bgr _ red	EMPTY	EMPTY
615	128	2	-1	0	-1	# define rgb _ green ext _ bgr _ green	EMPTY	EMPTY
615	129	2	-1	0	-1	# define rgb _ blue ext _ bgr _ blue	EMPTY	EMPTY
615	130	2	-1	0	-1	# define rgb _ pixelsize ext _ bgr _ pixelsize	EMPTY	EMPTY
615	131	2	-1	0	-1	# define rgb _ ycc _ convert _ internal extbgr _ ycc _ convert _ internal	EMPTY	EMPTY
615	132	2	-1	0	-1	# define rgb _ gray _ convert _ internal extbgr _ gray _ convert _ internal	EMPTY	EMPTY
615	133	2	-1	0	-1	# define rgb _ rgb _ convert _ internal extbgr _ rgb _ convert _ internal	EMPTY	EMPTY
615	134	2	-1	0	-1	# include strlit	EMPTY	EMPTY
615	135	2	-1	0	-1	# undef rgb _ red	EMPTY	EMPTY
615	136	2	-1	0	-1	# undef rgb _ green	EMPTY	EMPTY
615	137	2	-1	0	-1	# undef rgb _ blue	EMPTY	EMPTY
615	138	2	-1	0	-1	# undef rgb _ pixelsize	EMPTY	EMPTY
615	139	2	-1	0	-1	# undef rgb _ ycc _ convert _ internal	EMPTY	EMPTY
615	140	2	-1	0	-1	# undef rgb _ gray _ convert _ internal	EMPTY	EMPTY
615	141	3	-1	0	-1	# undef rgb _ rgb _ convert _ internal	EMPTY	EMPTY
615	143	1	0	0	-1	# define rgb _ red ext _ bgrx _ red	EMPTY	EMPTY
615	144	2	-1	0	-1	# define rgb _ green ext _ bgrx _ green	EMPTY	EMPTY
615	145	2	-1	0	-1	# define rgb _ blue ext _ bgrx _ blue	EMPTY	EMPTY
615	146	2	-1	0	-1	# define rgb _ pixelsize ext _ bgrx _ pixelsize	EMPTY	EMPTY
615	147	2	-1	0	-1	# define rgb _ ycc _ convert _ internal extbgrx _ ycc _ convert _ internal	EMPTY	EMPTY
615	148	2	-1	0	-1	# define rgb _ gray _ convert _ internal extbgrx _ gray _ convert _ internal	EMPTY	EMPTY
615	149	2	-1	0	-1	# define rgb _ rgb _ convert _ internal extbgrx _ rgb _ convert _ internal	EMPTY	EMPTY
615	150	2	-1	0	-1	# include strlit	EMPTY	EMPTY
615	151	2	-1	0	-1	# undef rgb _ red	EMPTY	EMPTY
615	152	2	-1	0	-1	# undef rgb _ green	EMPTY	EMPTY
615	153	2	-1	0	-1	# undef rgb _ blue	EMPTY	EMPTY
615	154	2	-1	0	-1	# undef rgb _ pixelsize	EMPTY	EMPTY
615	155	2	-1	0	-1	# undef rgb _ ycc _ convert _ internal	EMPTY	EMPTY
615	156	2	-1	0	-1	# undef rgb _ gray _ convert _ internal	EMPTY	EMPTY
615	157	3	-1	0	-1	# undef rgb _ rgb _ convert _ internal	EMPTY	EMPTY
615	159	1	0	0	-1	# define rgb _ red ext _ xbgr _ red	EMPTY	EMPTY
615	160	2	-1	0	-1	# define rgb _ green ext _ xbgr _ green	EMPTY	EMPTY
615	161	2	-1	0	-1	# define rgb _ blue ext _ xbgr _ blue	EMPTY	EMPTY
615	162	2	-1	0	-1	# define rgb _ pixelsize ext _ xbgr _ pixelsize	EMPTY	EMPTY
615	163	2	-1	0	-1	# define rgb _ ycc _ convert _ internal extxbgr _ ycc _ convert _ internal	EMPTY	EMPTY
615	164	2	-1	0	-1	# define rgb _ gray _ convert _ internal extxbgr _ gray _ convert _ internal	EMPTY	EMPTY
615	165	2	-1	0	-1	# define rgb _ rgb _ convert _ internal extxbgr _ rgb _ convert _ internal	EMPTY	EMPTY
615	166	2	-1	0	-1	# include strlit	EMPTY	EMPTY
615	167	2	-1	0	-1	# undef rgb _ red	EMPTY	EMPTY
615	168	2	-1	0	-1	# undef rgb _ green	EMPTY	EMPTY
615	169	2	-1	0	-1	# undef rgb _ blue	EMPTY	EMPTY
615	170	2	-1	0	-1	# undef rgb _ pixelsize	EMPTY	EMPTY
615	171	2	-1	0	-1	# undef rgb _ ycc _ convert _ internal	EMPTY	EMPTY
615	172	2	-1	0	-1	# undef rgb _ gray _ convert _ internal	EMPTY	EMPTY
615	173	3	-1	0	-1	# undef rgb _ rgb _ convert _ internal	EMPTY	EMPTY
615	175	1	0	0	-1	# define rgb _ red ext _ xrgb _ red	EMPTY	EMPTY
615	176	2	-1	0	-1	# define rgb _ green ext _ xrgb _ green	EMPTY	EMPTY
615	177	2	-1	0	-1	# define rgb _ blue ext _ xrgb _ blue	EMPTY	EMPTY
615	178	2	-1	0	-1	# define rgb _ pixelsize ext _ xrgb _ pixelsize	EMPTY	EMPTY
615	179	2	-1	0	-1	# define rgb _ ycc _ convert _ internal extxrgb _ ycc _ convert _ internal	EMPTY	EMPTY
615	180	2	-1	0	-1	# define rgb _ gray _ convert _ internal extxrgb _ gray _ convert _ internal	EMPTY	EMPTY
615	181	2	-1	0	-1	# define rgb _ rgb _ convert _ internal extxrgb _ rgb _ convert _ internal	EMPTY	EMPTY
615	182	2	-1	0	-1	# include strlit	EMPTY	EMPTY
615	183	2	-1	0	-1	# undef rgb _ red	EMPTY	EMPTY
615	184	2	-1	0	-1	# undef rgb _ green	EMPTY	EMPTY
615	185	2	-1	0	-1	# undef rgb _ blue	EMPTY	EMPTY
615	186	2	-1	0	-1	# undef rgb _ pixelsize	EMPTY	EMPTY
615	187	2	-1	0	-1	# undef rgb _ ycc _ convert _ internal	EMPTY	EMPTY
615	188	2	-1	0	-1	# undef rgb _ gray _ convert _ internal	EMPTY	EMPTY
615	189	3	-1	0	-1	# undef rgb _ rgb _ convert _ internal	EMPTY	EMPTY
615	196	1	1	1	-1	methoddef ( void )	EMPTY	EMPTY
615	197	2	-1	0	-1	rgb _ ycc _ start ( j _ compress _ ptr cinfo )	cinfo	EMPTY
615	198	2	-1	0	-1	{	EMPTY	EMPTY
615	199	2	-1	0	-1	my _ cconvert _ ptr cconvert = ( my _ cconvert _ ptr ) cinfo -> cconvert ;	cinfo	EMPTY
615	200	2	-1	0	-1	int32 * rgb _ ycc _ tab ;	rgb _ ycc _ tab	EMPTY
615	201	3	-1	0	-1	int32 i ;	EMPTY	EMPTY
615	204	1	1	1	-1	cconvert -> rgb _ ycc _ tab = rgb _ ycc _ tab = ( int32 * )	rgb _ ycc _ tab rgb _ ycc _ tab	EMPTY
615	205	2	-1	0	-1	( * cinfo -> mem -> alloc _ small ) ( ( j _ common _ ptr ) cinfo , jpool _ image ,	cinfo mem alloc _ small cinfo	EMPTY
615	206	3	-1	0	-1	( table _ size * sizeof ( int32 ) ) )	EMPTY	EMPTY
615	208	1	1	0	1	for ( i = numconst ; i <= maxjsample ; i ++ ) {	EMPTY	EMPTY
615	209	2	-1	0	-1	rgb _ ycc _ tab [ i + r _ y _ off ] = fix ( 0.29900 ) * i	rgb _ ycc _ tab	EMPTY
615	210	2	-1	0	-1	rgb _ ycc _ tab [ i + g _ y _ off ] = fix ( 0.58700 ) * i	rgb _ ycc _ tab	EMPTY
615	211	2	-1	0	-1	rgb _ ycc _ tab [ i + b _ y _ off ] = fix ( numconst ) * i + one _ half ;	rgb _ ycc _ tab	EMPTY
615	212	2	-1	0	-1	rgb _ ycc _ tab [ i + r _ cb _ off ] = ( - fix ( 0.16874 ) ) * i	rgb _ ycc _ tab	EMPTY
615	213	2	-1	0	-1	rgb _ ycc _ tab [ i + g _ cb _ off ] = ( - fix ( 0.33126 ) ) * i	rgb _ ycc _ tab	EMPTY
615	218	2	-1	1	-1	rgb _ ycc _ tab [ i + b _ cb _ off ] = fix ( 0.50000 ) * i + cbcr _ offset + one _ half - 1	rgb _ ycc _ tab	EMPTY
615	222	2	-1	1	-1	rgb _ ycc _ tab [ i + g _ cr _ off ] = ( - fix ( 0.41869 ) ) * i	rgb _ ycc _ tab	EMPTY
615	223	2	-1	0	-1	rgb _ ycc _ tab [ i + b _ cr _ off ] = ( - fix ( 0.08131 ) ) * i	rgb _ ycc _ tab	EMPTY
615	224	2	-1	0	-1	}	EMPTY	EMPTY
615	225	3	-1	0	-1	}	EMPTY	EMPTY
615	232	1	1	1	-1	methoddef ( void )	EMPTY	EMPTY
615	233	2	-1	0	-1	rgb _ ycc _ convert ( j _ compress _ ptr cinfo	cinfo	EMPTY
615	234	2	-1	0	-1	jsamparray input _ buf  jsampimage output _ buf	jsamparray jsampimage	EMPTY
615	235	2	-1	0	-1	jdimension output _ row  int num _ rows )	EMPTY	EMPTY
615	236	2	-1	0	-1	{	EMPTY	EMPTY
615	237	2	-1	0	-1	switch ( cinfo -> in _ color _ space ) {	cinfo in _ color _ space	EMPTY
615	238	2	-1	0	-1	case jcs _ ext _ rgb :	jcs _ ext _ rgb	EMPTY
615	239	2	-1	0	-1	extrgb _ ycc _ convert _ internal ( cinfo , input _ buf , output _ buf , output _ row ,	cinfo	EMPTY
615	240	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
615	241	2	-1	0	-1	break ;	EMPTY	EMPTY
615	242	2	-1	0	-1	case jcs _ ext _ rgbx :	jcs _ ext _ rgbx	EMPTY
615	243	2	-1	0	-1	case jcs _ ext _ rgba :	jcs _ ext _ rgba	EMPTY
615	244	2	-1	0	-1	extrgbx _ ycc _ convert _ internal ( cinfo , input _ buf , output _ buf , output _ row ,	cinfo	EMPTY
615	245	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
615	246	2	-1	0	-1	break ;	EMPTY	EMPTY
615	247	2	-1	0	-1	case jcs _ ext _ bgr :	jcs _ ext _ bgr	EMPTY
615	248	2	-1	0	-1	extbgr _ ycc _ convert _ internal ( cinfo , input _ buf , output _ buf , output _ row ,	cinfo	EMPTY
615	249	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
615	250	2	-1	0	-1	break ;	EMPTY	EMPTY
615	251	2	-1	0	-1	case jcs _ ext _ bgrx :	jcs _ ext _ bgrx	EMPTY
615	252	2	-1	0	-1	case jcs _ ext _ bgra :	jcs _ ext _ bgra	EMPTY
615	253	2	-1	0	-1	extbgrx _ ycc _ convert _ internal ( cinfo , input _ buf , output _ buf , output _ row ,	cinfo	EMPTY
615	254	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
615	255	2	-1	0	-1	break ;	EMPTY	EMPTY
615	256	2	-1	0	-1	case jcs _ ext _ xbgr :	jcs _ ext _ xbgr	EMPTY
615	257	2	-1	0	-1	case jcs _ ext _ abgr :	jcs _ ext _ abgr	EMPTY
615	258	2	-1	0	-1	extxbgr _ ycc _ convert _ internal ( cinfo , input _ buf , output _ buf , output _ row ,	cinfo	EMPTY
615	259	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
615	260	2	-1	0	-1	break ;	EMPTY	EMPTY
615	261	3	-1	0	-1	case jcs _ ext _ xrgb :	jcs _ ext _ xrgb	EMPTY
615	262	1	0	0	-1	case jcs _ ext _ argb :	jcs _ ext _ argb	EMPTY
615	263	2	-1	0	-1	extxrgb _ ycc _ convert _ internal ( cinfo , input _ buf , output _ buf , output _ row ,	cinfo	EMPTY
615	264	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
615	265	2	-1	0	-1	break ;	EMPTY	EMPTY
615	266	2	-1	0	-1	default :	EMPTY	EMPTY
615	267	2	-1	0	-1	rgb _ ycc _ convert _ internal ( cinfo , input _ buf , output _ buf , output _ row ,	cinfo	EMPTY
615	268	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
615	269	2	-1	0	-1	break ;	EMPTY	EMPTY
615	270	2	-1	0	-1	}	EMPTY	EMPTY
615	271	3	-1	0	-1	}	EMPTY	EMPTY
615	281	1	1	1	-1	methoddef ( void )	EMPTY	EMPTY
615	282	2	-1	0	-1	rgb _ gray _ convert ( j _ compress _ ptr cinfo	cinfo	EMPTY
615	283	2	-1	0	-1	jsamparray input _ buf  jsampimage output _ buf	jsamparray jsampimage	EMPTY
615	284	2	-1	0	-1	jdimension output _ row  int num _ rows )	EMPTY	EMPTY
615	285	2	-1	0	-1	{	EMPTY	EMPTY
615	286	2	-1	0	-1	switch ( cinfo -> in _ color _ space ) {	cinfo in _ color _ space	EMPTY
615	287	2	-1	0	-1	case jcs _ ext _ rgb :	jcs _ ext _ rgb	EMPTY
615	288	2	-1	0	-1	extrgb _ gray _ convert _ internal ( cinfo , input _ buf , output _ buf , output _ row ,	cinfo	EMPTY
615	289	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
615	290	2	-1	0	-1	break ;	EMPTY	EMPTY
615	291	2	-1	0	-1	case jcs _ ext _ rgbx :	jcs _ ext _ rgbx	EMPTY
615	292	2	-1	0	-1	case jcs _ ext _ rgba :	jcs _ ext _ rgba	EMPTY
615	293	2	-1	0	-1	extrgbx _ gray _ convert _ internal ( cinfo , input _ buf , output _ buf , output _ row ,	cinfo	EMPTY
615	294	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
615	295	2	-1	0	-1	break ;	EMPTY	EMPTY
615	296	2	-1	0	-1	case jcs _ ext _ bgr :	jcs _ ext _ bgr	EMPTY
615	297	2	-1	0	-1	extbgr _ gray _ convert _ internal ( cinfo , input _ buf , output _ buf , output _ row ,	cinfo	EMPTY
615	298	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
615	299	2	-1	0	-1	break ;	EMPTY	EMPTY
615	300	2	-1	0	-1	case jcs _ ext _ bgrx :	jcs _ ext _ bgrx	EMPTY
615	301	2	-1	0	-1	case jcs _ ext _ bgra :	jcs _ ext _ bgra	EMPTY
615	302	2	-1	0	-1	extbgrx _ gray _ convert _ internal ( cinfo , input _ buf , output _ buf , output _ row ,	cinfo	EMPTY
615	303	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
615	304	2	-1	0	-1	break ;	EMPTY	EMPTY
615	305	2	-1	0	-1	case jcs _ ext _ xbgr :	jcs _ ext _ xbgr	EMPTY
615	306	2	-1	0	-1	case jcs _ ext _ abgr :	jcs _ ext _ abgr	EMPTY
615	307	2	-1	0	-1	extxbgr _ gray _ convert _ internal ( cinfo , input _ buf , output _ buf , output _ row ,	cinfo	EMPTY
615	308	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
615	309	2	-1	0	-1	break ;	EMPTY	EMPTY
615	310	3	-1	0	-1	case jcs _ ext _ xrgb :	jcs _ ext _ xrgb	EMPTY
615	311	1	0	0	-1	case jcs _ ext _ argb :	jcs _ ext _ argb	EMPTY
615	312	2	-1	0	-1	extxrgb _ gray _ convert _ internal ( cinfo , input _ buf , output _ buf , output _ row ,	cinfo	EMPTY
615	313	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
615	314	2	-1	0	-1	break ;	EMPTY	EMPTY
615	315	2	-1	0	-1	default :	EMPTY	EMPTY
615	316	2	-1	0	-1	rgb _ gray _ convert _ internal ( cinfo , input _ buf , output _ buf , output _ row ,	cinfo	EMPTY
615	317	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
615	318	2	-1	0	-1	break ;	EMPTY	EMPTY
615	319	2	-1	0	-1	}	EMPTY	EMPTY
615	320	3	-1	0	-1	}	EMPTY	EMPTY
615	327	1	1	1	-1	methoddef ( void )	EMPTY	EMPTY
615	328	2	-1	0	-1	rgb _ rgb _ convert ( j _ compress _ ptr cinfo	cinfo	EMPTY
615	329	2	-1	0	-1	jsamparray input _ buf  jsampimage output _ buf	jsamparray jsampimage	EMPTY
615	330	2	-1	0	-1	jdimension output _ row  int num _ rows )	EMPTY	EMPTY
615	331	2	-1	0	-1	{	EMPTY	EMPTY
615	332	2	-1	0	-1	switch ( cinfo -> in _ color _ space ) {	cinfo in _ color _ space	EMPTY
615	333	2	-1	0	-1	case jcs _ ext _ rgb :	jcs _ ext _ rgb	EMPTY
615	334	2	-1	0	-1	extrgb _ rgb _ convert _ internal ( cinfo , input _ buf , output _ buf , output _ row ,	cinfo	EMPTY
615	335	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
615	336	2	-1	0	-1	break ;	EMPTY	EMPTY
615	337	2	-1	0	-1	case jcs _ ext _ rgbx :	jcs _ ext _ rgbx	EMPTY
615	338	2	-1	0	-1	case jcs _ ext _ rgba :	jcs _ ext _ rgba	EMPTY
615	339	2	-1	0	-1	extrgbx _ rgb _ convert _ internal ( cinfo , input _ buf , output _ buf , output _ row ,	cinfo	EMPTY
615	340	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
615	341	2	-1	0	-1	break ;	EMPTY	EMPTY
615	342	2	-1	0	-1	case jcs _ ext _ bgr :	jcs _ ext _ bgr	EMPTY
615	343	2	-1	0	-1	extbgr _ rgb _ convert _ internal ( cinfo , input _ buf , output _ buf , output _ row ,	cinfo	EMPTY
615	344	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
615	345	2	-1	0	-1	break ;	EMPTY	EMPTY
615	346	2	-1	0	-1	case jcs _ ext _ bgrx :	jcs _ ext _ bgrx	EMPTY
615	347	2	-1	0	-1	case jcs _ ext _ bgra :	jcs _ ext _ bgra	EMPTY
615	348	2	-1	0	-1	extbgrx _ rgb _ convert _ internal ( cinfo , input _ buf , output _ buf , output _ row ,	cinfo	EMPTY
615	349	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
615	350	2	-1	0	-1	break ;	EMPTY	EMPTY
615	351	2	-1	0	-1	case jcs _ ext _ xbgr :	jcs _ ext _ xbgr	EMPTY
615	352	2	-1	0	-1	case jcs _ ext _ abgr :	jcs _ ext _ abgr	EMPTY
615	353	2	-1	0	-1	extxbgr _ rgb _ convert _ internal ( cinfo , input _ buf , output _ buf , output _ row ,	cinfo	EMPTY
615	354	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
615	355	2	-1	0	-1	break ;	EMPTY	EMPTY
615	356	3	-1	0	-1	case jcs _ ext _ xrgb :	jcs _ ext _ xrgb	EMPTY
615	357	1	0	0	-1	case jcs _ ext _ argb :	jcs _ ext _ argb	EMPTY
615	358	2	-1	0	-1	extxrgb _ rgb _ convert _ internal ( cinfo , input _ buf , output _ buf , output _ row ,	cinfo	EMPTY
615	359	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
615	360	2	-1	0	-1	break ;	EMPTY	EMPTY
615	361	2	-1	0	-1	default :	EMPTY	EMPTY
615	362	2	-1	0	-1	rgb _ rgb _ convert _ internal ( cinfo , input _ buf , output _ buf , output _ row ,	cinfo	EMPTY
615	363	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
615	364	2	-1	0	-1	break ;	EMPTY	EMPTY
615	365	2	-1	0	-1	}	EMPTY	EMPTY
615	366	3	-1	0	-1	}	EMPTY	EMPTY
615	377	1	1	1	-1	methoddef ( void )	EMPTY	EMPTY
615	378	2	-1	0	-1	cmyk _ ycck _ convert ( j _ compress _ ptr cinfo	cinfo	EMPTY
615	379	2	-1	0	-1	jsamparray input _ buf  jsampimage output _ buf	jsamparray jsampimage	EMPTY
615	380	2	-1	0	-1	jdimension output _ row  int num _ rows )	EMPTY	EMPTY
615	381	2	-1	0	-1	{	EMPTY	EMPTY
615	382	2	-1	0	-1	my _ cconvert _ ptr cconvert = ( my _ cconvert _ ptr ) cinfo -> cconvert ;	cinfo	EMPTY
615	383	2	-1	0	-1	register int r , g , b ;	b	EMPTY
615	384	2	-1	0	-1	register int32 * ctab = cconvert -> rgb _ ycc _ tab ;	rgb _ ycc _ tab	EMPTY
615	385	2	-1	0	-1	register jsamprow inptr ;	jsamprow	EMPTY
615	386	2	-1	0	-1	register jsamprow outptr0 , outptr1 , outptr2 , outptr3 ;	jsamprow	EMPTY
615	387	2	-1	0	-1	register jdimension col ;	EMPTY	EMPTY
615	388	3	-1	0	-1	jdimension num _ cols = cinfo -> image _ width ;	cinfo image _ width	EMPTY
615	390	1	1	0	1	while ( -- num _ rows >= numconst ) {	EMPTY	EMPTY
615	391	2	-1	0	-1	inptr = * input _ buf ++	EMPTY	EMPTY
615	392	2	-1	0	-1	outptr0 = output _ buf [ 0 ] [ output _ row ]	EMPTY	EMPTY
615	393	2	-1	0	-1	outptr1 = output _ buf [ 1 ] [ output _ row ]	EMPTY	EMPTY
615	394	2	-1	0	-1	outptr2 = output _ buf [ 2 ] [ output _ row ]	EMPTY	EMPTY
615	395	2	-1	0	-1	outptr3 = output _ buf [ 3 ] [ output _ row ]	EMPTY	EMPTY
615	396	2	-1	0	-1	output _ row ++	EMPTY	EMPTY
615	397	2	-1	0	-1	for ( col = numconst ; col < num _ cols ; col ++ ) {	EMPTY	EMPTY
615	398	2	-1	0	-1	r = maxjsample - getjsample ( inptr [ numconst ] ) ;	EMPTY	EMPTY
615	399	2	-1	0	-1	g = maxjsample - getjsample ( inptr [ numconst ] ) ;	EMPTY	EMPTY
615	400	2	-1	0	-1	b = maxjsample - getjsample ( inptr [ numconst ] ) ;	b	EMPTY
615	402	2	-1	1	-1	outptr3 [ col ] = inptr [ 3 ]	EMPTY	EMPTY
615	403	2	-1	0	-1	inptr += 4	EMPTY	EMPTY
615	410	2	-1	1	-1	outptr0 [ col ] = ( jsample )	EMPTY	EMPTY
615	411	2	-1	0	-1	( ( ctab [ r + r _ y _ off ] + ctab [ g + g _ y _ off ] + ctab [ b + b _ y _ off ] )	b	EMPTY
615	412	2	-1	0	-1	>> scalebits )	EMPTY	EMPTY
615	414	2	-1	1	-1	outptr1 [ col ] = ( jsample )	EMPTY	EMPTY
615	415	2	-1	0	-1	( ( ctab [ r + r _ cb _ off ] + ctab [ g + g _ cb _ off ] + ctab [ b + b _ cb _ off ] )	b	EMPTY
615	416	2	-1	0	-1	>> scalebits )	EMPTY	EMPTY
615	418	2	-1	1	-1	outptr2 [ col ] = ( jsample )	EMPTY	EMPTY
615	419	2	-1	0	-1	( ( ctab [ r + r _ cr _ off ] + ctab [ g + g _ cr _ off ] + ctab [ b + b _ cr _ off ] )	b	EMPTY
615	420	2	-1	0	-1	>> scalebits )	EMPTY	EMPTY
615	421	2	-1	0	-1	}	EMPTY	EMPTY
615	422	2	-1	0	-1	}	EMPTY	EMPTY
615	423	3	-1	0	-1	}	EMPTY	EMPTY
615	432	1	1	1	-1	methoddef ( void )	EMPTY	EMPTY
615	433	2	-1	0	-1	grayscale _ convert ( j _ compress _ ptr cinfo	cinfo	EMPTY
615	434	2	-1	0	-1	jsamparray input _ buf  jsampimage output _ buf	jsamparray jsampimage	EMPTY
615	435	2	-1	0	-1	jdimension output _ row  int num _ rows )	EMPTY	EMPTY
615	436	2	-1	0	-1	{	EMPTY	EMPTY
615	437	2	-1	0	-1	register jsamprow inptr ;	jsamprow	EMPTY
615	438	2	-1	0	-1	register jsamprow outptr ;	jsamprow	EMPTY
615	439	2	-1	0	-1	register jdimension col ;	EMPTY	EMPTY
615	440	2	-1	0	-1	jdimension num _ cols = cinfo -> image _ width ;	cinfo image _ width	EMPTY
615	441	3	-1	0	-1	int instride = cinfo -> input _ components ;	cinfo input _ components	EMPTY
615	443	1	1	0	1	while ( -- num _ rows >= numconst ) {	EMPTY	EMPTY
615	444	2	-1	0	-1	inptr = * input _ buf ++	EMPTY	EMPTY
615	445	2	-1	0	-1	outptr = output _ buf [ 0 ] [ output _ row ]	EMPTY	EMPTY
615	446	2	-1	0	-1	output _ row ++	EMPTY	EMPTY
615	447	2	-1	0	-1	for ( col = numconst ; col < num _ cols ; col ++ ) {	EMPTY	EMPTY
615	448	2	-1	1	-1	outptr [ col ] = inptr [ 0 ]	EMPTY	EMPTY
615	449	2	-1	0	-1	inptr += instride	EMPTY	EMPTY
615	450	2	-1	0	-1	}	EMPTY	EMPTY
615	451	2	-1	0	-1	}	EMPTY	EMPTY
615	452	3	-1	0	-1	}	EMPTY	EMPTY
615	461	1	1	1	-1	methoddef ( void )	EMPTY	EMPTY
615	462	2	-1	0	-1	null _ convert ( j _ compress _ ptr cinfo	cinfo	EMPTY
615	463	2	-1	0	-1	jsamparray input _ buf  jsampimage output _ buf	jsamparray jsampimage	EMPTY
615	464	2	-1	0	-1	jdimension output _ row  int num _ rows )	EMPTY	EMPTY
615	465	2	-1	0	-1	{	EMPTY	EMPTY
615	466	2	-1	0	-1	register jsamprow inptr ;	jsamprow	EMPTY
615	467	2	-1	0	-1	register jsamprow outptr , outptr0 , outptr1 , outptr2 , outptr3 ;	jsamprow	EMPTY
615	468	2	-1	0	-1	register jdimension col ;	EMPTY	EMPTY
615	469	2	-1	0	-1	register int ci ;	EMPTY	EMPTY
615	470	2	-1	0	-1	int nc = cinfo -> num _ components ;	cinfo num _ components	EMPTY
615	471	3	-1	0	-1	jdimension num _ cols = cinfo -> image _ width ;	cinfo image _ width	EMPTY
615	473	1	0	0	1	if ( nc == numconst ) {	EMPTY	EMPTY
615	474	2	-1	0	-1	while ( -- num _ rows >= 0 ) {	EMPTY	EMPTY
615	475	2	-1	0	-1	inptr = * input _ buf ++ ;	EMPTY	EMPTY
615	476	2	-1	0	-1	outptr0 = output _ buf [ 0 ] [ output _ row ] ;	EMPTY	EMPTY
615	477	2	-1	0	-1	outptr1 = output _ buf [ 1 ] [ output _ row ] ;	EMPTY	EMPTY
615	478	2	-1	0	-1	outptr2 = output _ buf [ 2 ] [ output _ row ] ;	EMPTY	EMPTY
615	479	2	-1	0	-1	output _ row ++ ;	EMPTY	EMPTY
615	480	2	-1	0	-1	for ( col = 0 ; col < num _ cols ; col ++ ) {	EMPTY	EMPTY
615	481	2	-1	0	-1	outptr0 [ col ] = * inptr ++ ;	EMPTY	EMPTY
615	482	2	-1	0	-1	outptr1 [ col ] = * inptr ++ ;	EMPTY	EMPTY
615	483	2	-1	0	-1	outptr2 [ col ] = * inptr ++ ;	EMPTY	EMPTY
615	484	2	-1	0	-1	}	EMPTY	EMPTY
615	485	2	-1	0	-1	}	EMPTY	EMPTY
615	486	2	-1	0	-1	if ( nc == numconst ) {	EMPTY	EMPTY
615	487	2	-1	0	-1	while ( -- num _ rows >= 0 ) {	EMPTY	EMPTY
615	488	2	-1	0	-1	inptr = * input _ buf ++ ;	EMPTY	EMPTY
615	489	2	-1	0	-1	outptr0 = output _ buf [ 0 ] [ output _ row ] ;	EMPTY	EMPTY
615	490	2	-1	0	-1	outptr1 = output _ buf [ 1 ] [ output _ row ] ;	EMPTY	EMPTY
615	491	2	-1	0	-1	outptr2 = output _ buf [ 2 ] [ output _ row ] ;	EMPTY	EMPTY
615	492	2	-1	0	-1	outptr3 = output _ buf [ 3 ] [ output _ row ] ;	EMPTY	EMPTY
615	493	2	-1	0	-1	output _ row ++ ;	EMPTY	EMPTY
615	494	2	-1	0	-1	for ( col = 0 ; col < num _ cols ; col ++ ) {	EMPTY	EMPTY
615	495	2	-1	0	-1	outptr0 [ col ] = * inptr ++ ;	EMPTY	EMPTY
615	496	2	-1	0	-1	outptr1 [ col ] = * inptr ++ ;	EMPTY	EMPTY
615	497	2	-1	0	-1	outptr2 [ col ] = * inptr ++ ;	EMPTY	EMPTY
615	498	2	-1	0	-1	outptr3 [ col ] = * inptr ++ ;	EMPTY	EMPTY
615	499	2	-1	0	-1	}	EMPTY	EMPTY
615	500	2	-1	0	-1	}	EMPTY	EMPTY
615	501	2	-1	0	-1	}	EMPTY	EMPTY
615	502	3	-1	0	-1	while ( -- num _ rows >= numconst ) {	EMPTY	EMPTY
615	504	1	1	1	-1	for ( ci = numconst ; ci < nc ; ci ++ ) {	EMPTY	EMPTY
615	505	2	-1	0	-1	inptr = * input _ buf	EMPTY	EMPTY
615	506	2	-1	0	-1	outptr = output _ buf [ ci ] [ output _ row ]	EMPTY	EMPTY
615	507	2	-1	0	-1	for ( col = numconst ; col < num _ cols ; col ++ ) {	EMPTY	EMPTY
615	508	2	-1	1	-1	outptr [ col ] = inptr [ ci ]	EMPTY	EMPTY
615	509	2	-1	0	-1	inptr += nc	EMPTY	EMPTY
615	510	2	-1	0	-1	}	EMPTY	EMPTY
615	511	2	-1	0	-1	}	EMPTY	EMPTY
615	512	2	-1	0	-1	input _ buf ++ ;	EMPTY	EMPTY
615	513	2	-1	0	-1	output _ row ++ ;	EMPTY	EMPTY
615	514	2	-1	0	-1	}	EMPTY	EMPTY
615	515	2	-1	0	-1	}	EMPTY	EMPTY
615	516	3	-1	0	-1	}	EMPTY	EMPTY
615	523	1	1	1	-1	methoddef ( void )	EMPTY	EMPTY
615	524	2	-1	0	-1	null _ method ( j _ compress _ ptr cinfo )	cinfo	EMPTY
615	525	2	-1	0	-1	{	EMPTY	EMPTY
615	527	3	-1	1	-1	}	EMPTY	EMPTY
615	534	1	1	1	-1	global ( void )	EMPTY	EMPTY
615	535	2	-1	0	-1	jinit _ color _ converter ( j _ compress _ ptr cinfo )	cinfo	EMPTY
615	536	2	-1	0	-1	{	EMPTY	EMPTY
615	537	3	-1	0	-1	my _ cconvert _ ptr cconvert ;	EMPTY	EMPTY
615	539	1	1	0	-1	cconvert = ( my _ cconvert _ ptr )	EMPTY	EMPTY
615	540	2	-1	0	-1	( * cinfo -> mem -> alloc _ small ) ( ( j _ common _ ptr ) cinfo , jpool _ image ,	cinfo mem alloc _ small cinfo	EMPTY
615	541	2	-1	0	-1	sizeof ( my _ color _ converter ) )	EMPTY	EMPTY
615	542	2	-1	0	-1	cinfo -> cconvert = ( struct jpeg _ color _ converter * ) cconvert	cinfo jpeg _ color _ converter	EMPTY
615	544	3	-1	1	-1	cconvert -> pub . start _ pass = null _ method	pub	EMPTY
615	547	1	1	1	1	switch ( cinfo -> in _ color _ space ) {	cinfo in _ color _ space	EMPTY
615	548	2	-1	0	-1	case jcs _ grayscale :	jcs _ grayscale	EMPTY
615	549	2	-1	0	-1	if ( cinfo -> input _ components != numconst )	cinfo input _ components	EMPTY
615	550	2	-1	0	-1	errexit ( cinfo  jerr _ bad _ in _ colorspace ) ;	cinfo	EMPTY
615	551	3	-1	0	-1	break	EMPTY	EMPTY
615	553	1	0	0	-1	case jcs _ rgb :	jcs _ rgb	EMPTY
615	554	2	-1	0	-1	case jcs _ ext _ rgb :	jcs _ ext _ rgb	EMPTY
615	555	2	-1	0	-1	case jcs _ ext _ rgbx :	jcs _ ext _ rgbx	EMPTY
615	556	2	-1	0	-1	case jcs _ ext _ bgr :	jcs _ ext _ bgr	EMPTY
615	557	2	-1	0	-1	case jcs _ ext _ bgrx :	jcs _ ext _ bgrx	EMPTY
615	558	2	-1	0	-1	case jcs _ ext _ xbgr :	jcs _ ext _ xbgr	EMPTY
615	559	2	-1	0	-1	case jcs _ ext _ xrgb :	jcs _ ext _ xrgb	EMPTY
615	560	2	-1	0	-1	case jcs _ ext _ rgba :	jcs _ ext _ rgba	EMPTY
615	561	2	-1	0	-1	case jcs _ ext _ bgra :	jcs _ ext _ bgra	EMPTY
615	562	2	-1	0	-1	case jcs _ ext _ abgr :	jcs _ ext _ abgr	EMPTY
615	563	2	-1	0	-1	case jcs _ ext _ argb :	jcs _ ext _ argb	EMPTY
615	564	2	-1	0	-1	if ( cinfo -> input _ components != rgb _ pixelsize [ cinfo -> in _ color _ space ] )	cinfo input _ components cinfo in _ color _ space	EMPTY
615	565	2	-1	0	-1	errexit ( cinfo  jerr _ bad _ in _ colorspace ) ;	cinfo	EMPTY
615	566	3	-1	0	-1	break	EMPTY	EMPTY
615	568	1	0	0	-1	case jcs _ ycbcr :	jcs _ ycbcr	EMPTY
615	569	2	-1	0	-1	if ( cinfo -> input _ components != numconst )	cinfo input _ components	EMPTY
615	570	2	-1	0	-1	errexit ( cinfo  jerr _ bad _ in _ colorspace ) ;	cinfo	EMPTY
615	571	3	-1	0	-1	break	EMPTY	EMPTY
615	573	1	0	0	-1	case jcs _ cmyk :	jcs _ cmyk	EMPTY
615	574	2	-1	0	-1	case jcs _ ycck :	jcs _ ycck	EMPTY
615	575	2	-1	0	-1	if ( cinfo -> input _ components != numconst )	cinfo input _ components	EMPTY
615	576	2	-1	0	-1	errexit ( cinfo  jerr _ bad _ in _ colorspace ) ;	cinfo	EMPTY
615	577	3	-1	0	-1	break	EMPTY	EMPTY
615	579	1	1	1	-1	default :	EMPTY	EMPTY
615	580	2	-1	0	-1	if ( cinfo -> input _ components < numconst )	cinfo input _ components	EMPTY
615	581	2	-1	0	-1	errexit ( cinfo  jerr _ bad _ in _ colorspace ) ;	cinfo	EMPTY
615	582	2	-1	0	-1	break	EMPTY	EMPTY
615	583	3	-1	0	-1	}	EMPTY	EMPTY
615	586	1	1	1	1	switch ( cinfo -> jpeg _ color _ space ) {	cinfo jpeg _ color _ space	EMPTY
615	587	2	-1	0	-1	case jcs _ grayscale :	jcs _ grayscale	EMPTY
615	588	2	-1	0	-1	if ( cinfo -> num _ components != numconst )	cinfo num _ components	EMPTY
615	589	2	-1	0	-1	errexit ( cinfo  jerr _ bad _ j _ colorspace ) ;	cinfo	EMPTY
615	590	2	-1	0	-1	if ( cinfo -> in _ color _ space == jcs _ grayscale )	cinfo in _ color _ space jcs _ grayscale	EMPTY
615	591	2	-1	0	-1	cconvert -> pub . color _ convert = grayscale _ convert ;	pub	EMPTY
615	592	2	-1	0	-1	if ( cinfo -> in _ color _ space == jcs _ rgb ||	cinfo in _ color _ space jcs _ rgb	EMPTY
615	593	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ rgb ||	cinfo in _ color _ space jcs _ ext _ rgb	EMPTY
615	594	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ rgbx ||	cinfo in _ color _ space jcs _ ext _ rgbx	EMPTY
615	595	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ bgr ||	cinfo in _ color _ space jcs _ ext _ bgr	EMPTY
615	596	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ bgrx ||	cinfo in _ color _ space jcs _ ext _ bgrx	EMPTY
615	597	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ xbgr ||	cinfo in _ color _ space jcs _ ext _ xbgr	EMPTY
615	598	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ xrgb ||	cinfo in _ color _ space jcs _ ext _ xrgb	EMPTY
615	599	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ rgba ||	cinfo in _ color _ space jcs _ ext _ rgba	EMPTY
615	600	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ bgra ||	cinfo in _ color _ space jcs _ ext _ bgra	EMPTY
615	601	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ abgr ||	cinfo in _ color _ space jcs _ ext _ abgr	EMPTY
615	602	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ argb ) {	cinfo in _ color _ space jcs _ ext _ argb	EMPTY
615	603	2	-1	0	-1	if ( jsimd _ can _ rgb _ gray ( ) )	EMPTY	EMPTY
615	604	2	-1	0	-1	cconvert -> pub . color _ convert = jsimd _ rgb _ gray _ convert ;	pub	EMPTY
615	605	2	-1	0	-1	else {	EMPTY	EMPTY
615	606	2	-1	0	-1	cconvert -> pub . start _ pass = rgb _ ycc _ start ;	pub	EMPTY
615	607	2	-1	0	-1	cconvert -> pub . color _ convert = rgb _ gray _ convert ;	pub	EMPTY
615	608	2	-1	0	-1	}	EMPTY	EMPTY
615	609	2	-1	0	-1	if ( cinfo -> in _ color _ space == jcs _ ycbcr )	cinfo in _ color _ space jcs _ ycbcr	EMPTY
615	610	2	-1	0	-1	cconvert -> pub . color _ convert = grayscale _ convert ;	pub	EMPTY
615	611	2	-1	0	-1	else	EMPTY	EMPTY
615	612	2	-1	0	-1	errexit ( cinfo  jerr _ conversion _ notimpl ) ;	cinfo	EMPTY
615	613	3	-1	0	-1	break	EMPTY	EMPTY
615	615	1	0	0	-1	case jcs _ rgb :	jcs _ rgb	EMPTY
615	616	2	-1	0	-1	if ( cinfo -> num _ components != numconst )	cinfo num _ components	EMPTY
615	617	2	-1	0	-1	errexit ( cinfo  jerr _ bad _ j _ colorspace ) ;	cinfo	EMPTY
615	618	2	-1	0	-1	if ( rgb _ red [ cinfo -> in _ color _ space ] == numconst &&	cinfo in _ color _ space	EMPTY
615	619	2	-1	0	-1	rgb _ green [ cinfo -> in _ color _ space ] == numconst &&	cinfo in _ color _ space	EMPTY
615	620	2	-1	0	-1	rgb _ blue [ cinfo -> in _ color _ space ] == numconst &&	cinfo in _ color _ space	EMPTY
615	621	2	-1	0	-1	rgb _ pixelsize [ cinfo -> in _ color _ space ] == numconst ) {	cinfo in _ color _ space	EMPTY
615	622	2	-1	0	-1	# if defined (  _  _ mips _  _  )	EMPTY	EMPTY
615	623	2	-1	0	-1	if ( jsimd _ c _ can _ null _ convert ( ) )	EMPTY	EMPTY
615	624	2	-1	0	-1	cconvert -> pub . color _ convert = jsimd _ c _ null _ convert ;	pub	EMPTY
615	625	2	-1	0	-1	else	EMPTY	EMPTY
615	626	2	-1	0	-1	# endif	EMPTY	EMPTY
615	627	2	-1	0	-1	cconvert -> pub . color _ convert = null _ convert	pub	EMPTY
615	628	2	-1	0	-1	if ( cinfo -> in _ color _ space == jcs _ rgb ||	cinfo in _ color _ space jcs _ rgb	EMPTY
615	629	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ rgb ||	cinfo in _ color _ space jcs _ ext _ rgb	EMPTY
615	630	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ rgbx ||	cinfo in _ color _ space jcs _ ext _ rgbx	EMPTY
615	631	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ bgr ||	cinfo in _ color _ space jcs _ ext _ bgr	EMPTY
615	632	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ bgrx ||	cinfo in _ color _ space jcs _ ext _ bgrx	EMPTY
615	633	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ xbgr ||	cinfo in _ color _ space jcs _ ext _ xbgr	EMPTY
615	634	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ xrgb ||	cinfo in _ color _ space jcs _ ext _ xrgb	EMPTY
615	635	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ rgba ||	cinfo in _ color _ space jcs _ ext _ rgba	EMPTY
615	636	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ bgra ||	cinfo in _ color _ space jcs _ ext _ bgra	EMPTY
615	637	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ abgr ||	cinfo in _ color _ space jcs _ ext _ abgr	EMPTY
615	638	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ argb )	cinfo in _ color _ space jcs _ ext _ argb	EMPTY
615	639	2	-1	0	-1	cconvert -> pub . color _ convert = rgb _ rgb _ convert ;	pub	EMPTY
615	640	2	-1	0	-1	else	EMPTY	EMPTY
615	641	2	-1	0	-1	errexit ( cinfo  jerr _ conversion _ notimpl ) ;	cinfo	EMPTY
615	642	3	-1	0	-1	break	EMPTY	EMPTY
615	644	1	0	0	-1	case jcs _ ycbcr :	jcs _ ycbcr	EMPTY
615	645	2	-1	0	-1	if ( cinfo -> num _ components != numconst )	cinfo num _ components	EMPTY
615	646	2	-1	0	-1	errexit ( cinfo  jerr _ bad _ j _ colorspace ) ;	cinfo	EMPTY
615	647	2	-1	0	-1	if ( cinfo -> in _ color _ space == jcs _ rgb ||	cinfo in _ color _ space jcs _ rgb	EMPTY
615	648	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ rgb ||	cinfo in _ color _ space jcs _ ext _ rgb	EMPTY
615	649	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ rgbx ||	cinfo in _ color _ space jcs _ ext _ rgbx	EMPTY
615	650	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ bgr ||	cinfo in _ color _ space jcs _ ext _ bgr	EMPTY
615	651	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ bgrx ||	cinfo in _ color _ space jcs _ ext _ bgrx	EMPTY
615	652	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ xbgr ||	cinfo in _ color _ space jcs _ ext _ xbgr	EMPTY
615	653	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ xrgb ||	cinfo in _ color _ space jcs _ ext _ xrgb	EMPTY
615	654	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ rgba ||	cinfo in _ color _ space jcs _ ext _ rgba	EMPTY
615	655	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ bgra ||	cinfo in _ color _ space jcs _ ext _ bgra	EMPTY
615	656	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ abgr ||	cinfo in _ color _ space jcs _ ext _ abgr	EMPTY
615	657	2	-1	0	-1	cinfo -> in _ color _ space == jcs _ ext _ argb ) {	cinfo in _ color _ space jcs _ ext _ argb	EMPTY
615	658	2	-1	0	-1	if ( jsimd _ can _ rgb _ ycc ( ) )	EMPTY	EMPTY
615	659	2	-1	0	-1	cconvert -> pub . color _ convert = jsimd _ rgb _ ycc _ convert ;	pub	EMPTY
615	660	2	-1	0	-1	else {	EMPTY	EMPTY
615	661	2	-1	0	-1	cconvert -> pub . start _ pass = rgb _ ycc _ start ;	pub	EMPTY
615	662	2	-1	0	-1	cconvert -> pub . color _ convert = rgb _ ycc _ convert ;	pub	EMPTY
615	663	2	-1	0	-1	}	EMPTY	EMPTY
615	664	2	-1	0	-1	if ( cinfo -> in _ color _ space == jcs _ ycbcr ) {	cinfo in _ color _ space jcs _ ycbcr	EMPTY
615	665	2	-1	0	-1	# if defined (  _  _ mips _  _  )	EMPTY	EMPTY
615	666	2	-1	0	-1	if ( jsimd _ c _ can _ null _ convert ( ) )	EMPTY	EMPTY
615	667	2	-1	0	-1	cconvert -> pub . color _ convert = jsimd _ c _ null _ convert ;	pub	EMPTY
615	668	2	-1	0	-1	else	EMPTY	EMPTY
615	669	2	-1	0	-1	# endif	EMPTY	EMPTY
615	670	2	-1	0	-1	cconvert -> pub . color _ convert = null _ convert	pub	EMPTY
615	671	2	-1	0	-1	} else	EMPTY	EMPTY
615	672	2	-1	0	-1	errexit ( cinfo  jerr _ conversion _ notimpl ) ;	cinfo	EMPTY
615	673	3	-1	0	-1	break	EMPTY	EMPTY
615	675	1	0	0	-1	case jcs _ cmyk :	jcs _ cmyk	EMPTY
615	676	2	-1	0	-1	if ( cinfo -> num _ components != numconst )	cinfo num _ components	EMPTY
615	677	2	-1	0	-1	errexit ( cinfo  jerr _ bad _ j _ colorspace ) ;	cinfo	EMPTY
615	678	2	-1	0	-1	if ( cinfo -> in _ color _ space == jcs _ cmyk ) {	cinfo in _ color _ space jcs _ cmyk	EMPTY
615	679	2	-1	0	-1	# if defined (  _  _ mips _  _  )	EMPTY	EMPTY
615	680	2	-1	0	-1	if ( jsimd _ c _ can _ null _ convert ( ) )	EMPTY	EMPTY
615	681	2	-1	0	-1	cconvert -> pub . color _ convert = jsimd _ c _ null _ convert ;	pub	EMPTY
615	682	2	-1	0	-1	else	EMPTY	EMPTY
615	683	2	-1	0	-1	# endif	EMPTY	EMPTY
615	684	2	-1	0	-1	cconvert -> pub . color _ convert = null _ convert	pub	EMPTY
615	685	2	-1	0	-1	} else	EMPTY	EMPTY
615	686	2	-1	0	-1	errexit ( cinfo  jerr _ conversion _ notimpl ) ;	cinfo	EMPTY
615	687	3	-1	0	-1	break	EMPTY	EMPTY
615	689	1	0	0	-1	case jcs _ ycck :	jcs _ ycck	EMPTY
615	690	2	-1	0	-1	if ( cinfo -> num _ components != numconst )	cinfo num _ components	EMPTY
615	691	2	-1	0	-1	errexit ( cinfo  jerr _ bad _ j _ colorspace ) ;	cinfo	EMPTY
615	692	2	-1	0	-1	if ( cinfo -> in _ color _ space == jcs _ cmyk ) {	cinfo in _ color _ space jcs _ cmyk	EMPTY
615	693	2	-1	0	-1	cconvert -> pub . start _ pass = rgb _ ycc _ start	pub	EMPTY
615	694	2	-1	0	-1	cconvert -> pub . color _ convert = cmyk _ ycck _ convert	pub	EMPTY
615	695	2	-1	0	-1	if ( cinfo -> in _ color _ space == jcs _ ycck ) {	cinfo in _ color _ space jcs _ ycck	EMPTY
615	696	2	-1	0	-1	# if defined (  _  _ mips _  _  )	EMPTY	EMPTY
615	697	2	-1	0	-1	if ( jsimd _ c _ can _ null _ convert ( ) )	EMPTY	EMPTY
615	698	2	-1	0	-1	cconvert -> pub . color _ convert = jsimd _ c _ null _ convert ;	pub	EMPTY
615	699	2	-1	0	-1	else	EMPTY	EMPTY
615	700	2	-1	0	-1	# endif	EMPTY	EMPTY
615	701	2	-1	0	-1	cconvert -> pub . color _ convert = null _ convert	pub	EMPTY
615	702	2	-1	0	-1	} else	EMPTY	EMPTY
615	703	2	-1	0	-1	errexit ( cinfo  jerr _ conversion _ notimpl ) ;	cinfo	EMPTY
615	704	3	-1	0	-1	break	EMPTY	EMPTY
615	706	1	1	1	-1	default :	EMPTY	EMPTY
615	707	2	-1	0	-1	if ( cinfo -> jpeg _ color _ space != cinfo -> in _ color _ space ||	cinfo jpeg _ color _ space cinfo in _ color _ space	EMPTY
615	708	2	-1	0	-1	cinfo -> num _ components != cinfo -> input _ components )	cinfo num _ components cinfo input _ components	EMPTY
615	709	2	-1	0	-1	errexit ( cinfo  jerr _ conversion _ notimpl ) ;	cinfo	EMPTY
615	710	2	-1	0	-1	# if defined (  _  _ mips _  _  )	EMPTY	EMPTY
615	711	2	-1	0	-1	if ( jsimd _ c _ can _ null _ convert ( ) )	EMPTY	EMPTY
615	712	2	-1	0	-1	cconvert -> pub . color _ convert = jsimd _ c _ null _ convert ;	pub	EMPTY
615	713	2	-1	0	-1	else	EMPTY	EMPTY
615	714	2	-1	0	-1	# endif	EMPTY	EMPTY
615	715	2	-1	0	-1	cconvert -> pub . color _ convert = null _ convert	pub	EMPTY
615	716	2	-1	0	-1	break	EMPTY	EMPTY
615	717	2	-1	0	-1	}	EMPTY	EMPTY
615	718	3	-1	0	-1	}	EMPTY	EMPTY
