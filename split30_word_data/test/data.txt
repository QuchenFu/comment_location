24	148	1	0	0	-1	struct sunrpc _ pmap {	EMPTY	EMPTY
24	149	2	-1	0	-1	uint32 _ t pm _ prog ;	EMPTY	EMPTY
24	150	2	-1	0	-1	uint32 _ t pm _ vers ;	EMPTY	EMPTY
24	151	2	-1	0	-1	uint32 _ t pm _ prot ;	EMPTY	EMPTY
24	152	2	-1	0	-1	uint32 _ t pm _ port ;	EMPTY	EMPTY
24	153	3	-1	0	-1	} ;	EMPTY	EMPTY
24	155	1	0	0	-1	static const struct tok proc2str [ ] = {	EMPTY	EMPTY
24	156	2	-1	0	-1	{ sunrpc _ pmapproc _ null  strlit }	EMPTY	EMPTY
24	157	2	-1	0	-1	{ sunrpc _ pmapproc _ set  strlit }	EMPTY	EMPTY
24	158	2	-1	0	-1	{ sunrpc _ pmapproc _ unset  strlit }	EMPTY	EMPTY
24	159	2	-1	0	-1	{ sunrpc _ pmapproc _ getport  strlit }	EMPTY	EMPTY
24	160	2	-1	0	-1	{ sunrpc _ pmapproc _ dump  strlit }	EMPTY	EMPTY
24	161	2	-1	0	-1	{ sunrpc _ pmapproc _ callit  strlit }	EMPTY	EMPTY
24	162	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
24	163	3	-1	0	-1	} ;	EMPTY	EMPTY
24	166	1	0	0	-1	static char * progstr ( uint32 _ t ) ;	progstr	EMPTY
24	168	1	1	0	-1	void	EMPTY	EMPTY
24	169	2	-1	0	-1	sunrpcrequest _ print ( netdissect _ options * ndo  register const u _ char * bp	EMPTY	EMPTY
24	170	2	-1	0	-1	register u _ int length  register const u _ char * bp2 )	EMPTY	EMPTY
24	171	2	-1	0	-1	{	EMPTY	EMPTY
24	172	2	-1	1	-1	register const struct sunrpc _ msg * rp ;	sunrpc _ msg	EMPTY
24	173	2	-1	0	-1	register const struct ip * ip ;	ip ip	EMPTY
24	174	2	-1	0	-1	# ifdef inet6	EMPTY	EMPTY
24	175	2	-1	0	-1	register const struct ip6 _ hdr * ip6 ;	EMPTY	EMPTY
24	176	2	-1	0	-1	# endif	EMPTY	EMPTY
24	177	2	-1	0	-1	uint32 _ t x ;	EMPTY	EMPTY
24	178	3	-1	0	-1	char srcid [ 20 ] , dstid [ 20 ] ;	srcid dstid	EMPTY
24	180	1	1	1	1	rp = ( struct sunrpc _ msg * ) bp	sunrpc _ msg	EMPTY
24	182	1	0	0	0	if ( ! ndo -> ndo _ nflag ) {	ndo _ nflag	EMPTY
24	183	2	-1	0	-1	snprintf ( srcid , sizeof ( srcid ) ,  " 0x%x "  ,	srcid srcid	EMPTY
24	184	2	-1	0	-1	extract _ 32bits ( & rp -> rm _ xid ) ) ;	EMPTY	EMPTY
24	185	2	-1	0	-1	strlcpy ( dstid ,  " sunrpc "  , sizeof ( dstid ) ) ;	dstid dstid	strlcpy
24	186	2	-1	0	-1	} else {	EMPTY	EMPTY
24	187	2	-1	0	-1	snprintf ( srcid , sizeof ( srcid ) ,  " 0x%x "  ,	srcid srcid	EMPTY
24	188	2	-1	0	-1	extract _ 32bits ( & rp -> rm _ xid ) ) ;	EMPTY	EMPTY
24	189	2	-1	0	-1	snprintf ( dstid , sizeof ( dstid ) ,  " 0x%x "  , sunrpc _ pmapport ) ;	dstid dstid	EMPTY
24	190	3	-1	0	-1	}	EMPTY	EMPTY
24	192	1	0	0	0	switch ( ip _ v ( ( struct ip * ) bp2 ) ) {	ip	EMPTY
24	193	2	-1	0	-1	case 4 :	EMPTY	EMPTY
24	194	2	-1	0	-1	ip = ( struct ip * ) bp2 ;	ip ip	EMPTY
24	195	2	-1	0	-1	nd _ print ( ( ndo ,  " %s.%s > %s.%s: %d "  ,	EMPTY	EMPTY
24	196	2	-1	0	-1	ipaddr _ string ( ndo , & ip -> ip _ src ) , srcid ,	ip ip _ src srcid	EMPTY
24	197	2	-1	0	-1	ipaddr _ string ( ndo , & ip -> ip _ dst ) , dstid , length ) ) ;	ip ip _ dst dstid	EMPTY
24	198	2	-1	0	-1	break ;	EMPTY	EMPTY
24	199	2	-1	0	-1	# ifdef inet6	EMPTY	EMPTY
24	200	2	-1	0	-1	case 6 :	EMPTY	EMPTY
24	201	2	-1	0	-1	ip6 = ( struct ip6 _ hdr * ) bp2 ;	EMPTY	EMPTY
24	202	2	-1	0	-1	nd _ print ( ( ndo ,  " %s.%s > %s.%s: %d "  ,	EMPTY	EMPTY
24	203	2	-1	0	-1	ip6addr _ string ( ndo , & ip6 -> ip6 _ src ) , srcid ,	ip6 _ src srcid	EMPTY
24	204	2	-1	0	-1	ip6addr _ string ( ndo , & ip6 -> ip6 _ dst ) , dstid , length ) ) ;	ip6 _ dst dstid	EMPTY
24	205	2	-1	0	-1	break ;	EMPTY	EMPTY
24	206	2	-1	0	-1	# endif	EMPTY	EMPTY
24	207	2	-1	0	-1	default :	EMPTY	EMPTY
24	208	2	-1	0	-1	nd _ print ( ( ndo ,  " %s.%s > %s.%s: %d "  ,  " ? "  , srcid ,  " ? "  , dstid , length ) ) ;	srcid dstid	EMPTY
24	209	2	-1	0	-1	break ;	EMPTY	EMPTY
24	210	3	-1	0	-1	}	EMPTY	EMPTY
24	212	1	0	0	0	nd _ print ( ( ndo  strlit  tok2str ( proc2str  strlit	tok2str	EMPTY
24	213	2	-1	0	-1	extract _ 32bits ( & rp -> rm _ call . cb _ proc ) ) ) ) ;	EMPTY	EMPTY
24	214	2	-1	0	-1	x = extract _ 32bits ( & rp -> rm _ call . cb _ rpcvers )	cb _ rpcvers	EMPTY
24	215	2	-1	0	-1	if ( x != numconst )	EMPTY	EMPTY
24	216	3	-1	0	-1	nd _ print ( ( ndo  strlit  x ) ) ;	EMPTY	EMPTY
24	218	1	0	0	0	switch ( extract _ 32bits ( & rp -> rm _ call . cb _ proc ) ) {	EMPTY	EMPTY
24	220	1	0	0	-1	case sunrpc _ pmapproc _ set :	EMPTY	EMPTY
24	221	2	-1	0	-1	case sunrpc _ pmapproc _ unset :	EMPTY	EMPTY
24	222	2	-1	0	-1	case sunrpc _ pmapproc _ getport :	EMPTY	EMPTY
24	223	2	-1	0	-1	case sunrpc _ pmapproc _ callit :	EMPTY	EMPTY
24	224	2	-1	0	-1	x = extract _ 32bits ( & rp -> rm _ call . cb _ prog ) ;	cb _ prog	EMPTY
24	225	2	-1	0	-1	if ( ! ndo -> ndo _ nflag )	ndo _ nflag	EMPTY
24	226	2	-1	0	-1	nd _ print ( ( ndo ,  "  %s "  , progstr ( x ) ) ) ;	progstr	EMPTY
24	227	2	-1	0	-1	else	EMPTY	EMPTY
24	228	2	-1	0	-1	nd _ print ( ( ndo ,  "  %u "  , x ) ) ;	EMPTY	EMPTY
24	229	2	-1	0	-1	nd _ print ( ( ndo ,  " .%u "  , extract _ 32bits ( & rp -> rm _ call . cb _ vers ) ) ) ;	EMPTY	EMPTY
24	230	2	-1	0	-1	break ;	EMPTY	EMPTY
24	231	2	-1	0	-1	}	EMPTY	EMPTY
24	232	3	-1	0	-1	}	EMPTY	EMPTY
24	234	1	0	0	-1	static char *	EMPTY	EMPTY
24	235	2	-1	0	-1	progstr ( uint32 _ t prog )	progstr	EMPTY
24	236	2	-1	0	-1	{	EMPTY	EMPTY
24	237	2	-1	0	-1	# if defined ( have _ getrpcbynumber ) && defined ( have _ rpc _ rpc _ h )	EMPTY	EMPTY
24	238	2	-1	0	-1	register struct rpcent * rp ;	EMPTY	EMPTY
24	239	2	-1	0	-1	# endif	EMPTY	EMPTY
24	240	2	-1	0	-1	static char buf [ numconst ] ;	EMPTY	EMPTY
24	241	3	-1	0	-1	static uint32 _ t lastprog = numconst ;	EMPTY	EMPTY
24	243	1	0	0	0	if ( lastprog != numconst && prog == lastprog )	EMPTY	EMPTY
24	244	2	-1	0	-1	return ( buf ) ;	EMPTY	EMPTY
24	245	2	-1	0	-1	# if defined ( have _ getrpcbynumber ) && defined ( have _ rpc _ rpc _ h )	EMPTY	EMPTY
24	246	2	-1	0	-1	rp = getrpcbynumber ( prog ) ;	EMPTY	EMPTY
24	247	2	-1	0	-1	if ( rp == null )	EMPTY	EMPTY
24	248	2	-1	0	-1	# endif	EMPTY	EMPTY
24	249	2	-1	0	-1	( void ) snprintf ( buf  sizeof ( buf )  strlit  prog ) ;	EMPTY	EMPTY
24	250	2	-1	0	-1	# if defined ( have _ getrpcbynumber ) && defined ( have _ rpc _ rpc _ h )	EMPTY	EMPTY
24	251	2	-1	0	-1	else	EMPTY	EMPTY
24	252	2	-1	0	-1	strlcpy ( buf  rp -> r _ name  sizeof ( buf ) ) ;	EMPTY	strlcpy
24	253	2	-1	0	-1	# endif	EMPTY	EMPTY
24	254	2	-1	0	-1	return ( buf ) ;	EMPTY	EMPTY
24	255	3	-1	0	-1	}	EMPTY	EMPTY
41	45	1	0	0	-1	struct dccp _ hdr {	dccp _ hdr	EMPTY
41	46	2	-1	0	-1	uint16 _ t dccph _ sport	EMPTY	EMPTY
41	47	2	-1	0	-1	dccph _ dport ;	EMPTY	EMPTY
41	48	2	-1	0	-1	uint8 _ t dccph _ doff ;	EMPTY	EMPTY
41	49	2	-1	0	-1	uint8 _ t dccph _ ccval _ cscov ;	EMPTY	EMPTY
41	50	2	-1	0	-1	uint16 _ t dccph _ checksum ;	EMPTY	EMPTY
41	51	2	-1	0	-1	uint8 _ t dccph _ xtr ;	EMPTY	EMPTY
41	52	2	-1	0	-1	uint8 _ t dccph _ seq [ numconst ] ;	EMPTY	EMPTY
41	53	3	-1	0	-1	} unaligned ;	EMPTY	EMPTY
41	69	1	0	0	-1	struct dccp _ hdr _ ext {	dccp _ hdr _ ext	EMPTY
41	70	2	-1	0	-1	uint16 _ t dccph _ sport	EMPTY	EMPTY
41	71	2	-1	0	-1	dccph _ dport ;	EMPTY	EMPTY
41	72	2	-1	0	-1	uint8 _ t dccph _ doff ;	EMPTY	EMPTY
41	73	2	-1	0	-1	uint8 _ t dccph _ ccval _ cscov ;	EMPTY	EMPTY
41	74	2	-1	0	-1	uint16 _ t dccph _ checksum ;	EMPTY	EMPTY
41	75	2	-1	0	-1	uint8 _ t dccph _ xtr ;	EMPTY	EMPTY
41	76	2	-1	0	-1	uint8 _ t reserved ;	EMPTY	EMPTY
41	77	2	-1	0	-1	uint8 _ t dccph _ seq [ numconst ] ;	EMPTY	EMPTY
41	78	3	-1	0	-1	} unaligned ;	EMPTY	EMPTY
41	80	1	0	0	-1	# define dccph _ ccval ( dh ) ( ( ( dh ) -> dccph _ ccval _ cscov >> numconst ) & numconst )	EMPTY	EMPTY
41	81	3	-1	0	-1	# define dccph _ cscov ( dh ) ( ( ( dh ) -> dccph _ ccval _ cscov ) & numconst )	EMPTY	EMPTY
41	83	1	0	0	-1	# define dccph _ x ( dh ) ( ( dh ) -> dccph _ xtr & numconst )	EMPTY	EMPTY
41	84	3	-1	0	-1	# define dccph _ type ( dh ) ( ( ( dh ) -> dccph _ xtr >> numconst ) & numconst )	EMPTY	EMPTY
41	91	1	0	0	-1	struct dccp _ hdr _ request {	dccp _ hdr _ request	EMPTY
41	92	2	-1	0	-1	uint32 _ t dccph _ req _ service ;	EMPTY	EMPTY
41	93	3	-1	0	-1	} unaligned ;	EMPTY	EMPTY
41	101	1	0	0	-1	struct dccp _ hdr _ response {	dccp _ hdr _ response	EMPTY
41	102	2	-1	0	-1	uint8 _ t dccph _ resp _ ack [ numconst ] ;	dccph _ resp _ ack	EMPTY
41	103	2	-1	0	-1	uint32 _ t dccph _ resp _ service ;	dccph _ resp _ service	EMPTY
41	104	3	-1	0	-1	} unaligned ;	EMPTY	EMPTY
41	112	1	0	0	-1	struct dccp _ hdr _ reset {	dccp _ hdr _ reset	EMPTY
41	113	2	-1	0	-1	uint8 _ t dccph _ reset _ ack [ numconst ] ;	dccph _ reset _ ack	EMPTY
41	114	2	-1	0	-1	uint8 _ t dccph _ reset _ code	dccph _ reset _ code	EMPTY
41	115	2	-1	0	-1	dccph _ reset _ data [ numconst ] ;	dccph _ reset _ data	EMPTY
41	116	3	-1	0	-1	} unaligned ;	EMPTY	EMPTY
41	118	1	0	0	-1	enum dccp _ pkt _ type {	EMPTY	EMPTY
41	119	2	-1	0	-1	dccp _ pkt _ request = numconst	EMPTY	EMPTY
41	120	2	-1	0	-1	dccp _ pkt _ response	EMPTY	EMPTY
41	121	2	-1	0	-1	dccp _ pkt _ data	EMPTY	EMPTY
41	122	2	-1	0	-1	dccp _ pkt _ ack	EMPTY	EMPTY
41	123	2	-1	0	-1	dccp _ pkt _ dataack	EMPTY	EMPTY
41	124	2	-1	0	-1	dccp _ pkt _ closereq	EMPTY	EMPTY
41	125	2	-1	0	-1	dccp _ pkt _ close	EMPTY	EMPTY
41	126	2	-1	0	-1	dccp _ pkt _ reset	EMPTY	EMPTY
41	127	2	-1	0	-1	dccp _ pkt _ sync	EMPTY	EMPTY
41	128	2	-1	0	-1	dccp _ pkt _ syncack	EMPTY	EMPTY
41	129	3	-1	0	-1	} ;	EMPTY	EMPTY
41	131	1	0	0	-1	static const struct tok dccp _ pkt _ type _ str [ ] = {	EMPTY	EMPTY
41	132	2	-1	0	-1	{ dccp _ pkt _ request  strlit }	EMPTY	EMPTY
41	133	2	-1	0	-1	{ dccp _ pkt _ response  strlit }	EMPTY	EMPTY
41	134	2	-1	0	-1	{ dccp _ pkt _ data  strlit }	EMPTY	EMPTY
41	135	2	-1	0	-1	{ dccp _ pkt _ ack  strlit }	EMPTY	EMPTY
41	136	2	-1	0	-1	{ dccp _ pkt _ dataack  strlit }	EMPTY	EMPTY
41	137	2	-1	0	-1	{ dccp _ pkt _ closereq  strlit }	EMPTY	EMPTY
41	138	2	-1	0	-1	{ dccp _ pkt _ close  strlit }	EMPTY	EMPTY
41	139	2	-1	0	-1	{ dccp _ pkt _ reset  strlit }	EMPTY	EMPTY
41	140	2	-1	0	-1	{ dccp _ pkt _ sync  strlit }	EMPTY	EMPTY
41	141	2	-1	0	-1	{ dccp _ pkt _ syncack  strlit }	EMPTY	EMPTY
41	142	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
41	143	3	-1	0	-1	} ;	EMPTY	EMPTY
41	145	1	0	0	-1	enum dccp _ reset _ codes {	EMPTY	EMPTY
41	146	2	-1	0	-1	dccp _ reset _ code _ unspecified = numconst	EMPTY	EMPTY
41	147	2	-1	0	-1	dccp _ reset _ code _ closed	EMPTY	EMPTY
41	148	2	-1	0	-1	dccp _ reset _ code _ aborted	EMPTY	EMPTY
41	149	2	-1	0	-1	dccp _ reset _ code _ no _ connection	EMPTY	EMPTY
41	150	2	-1	0	-1	dccp _ reset _ code _ packet _ error	EMPTY	EMPTY
41	151	2	-1	0	-1	dccp _ reset _ code _ option _ error	EMPTY	EMPTY
41	152	2	-1	0	-1	dccp _ reset _ code _ mandatory _ error	EMPTY	EMPTY
41	153	2	-1	0	-1	dccp _ reset _ code _ connection _ refused	EMPTY	EMPTY
41	154	2	-1	0	-1	dccp _ reset _ code _ bad _ service _ code	EMPTY	EMPTY
41	155	2	-1	0	-1	dccp _ reset _ code _ too _ busy	EMPTY	EMPTY
41	156	2	-1	0	-1	dccp _ reset _ code _ bad _ init _ cookie	EMPTY	EMPTY
41	157	2	-1	0	-1	dccp _ reset _ code _ aggression _ penalty	EMPTY	EMPTY
41	158	2	-1	0	-1	_  _ dccp _ reset _ code _ last	EMPTY	EMPTY
41	159	3	-1	0	-1	} ;	EMPTY	EMPTY
41	161	1	0	0	-1	static const char tstr [ ] = strlit ;	EMPTY	EMPTY
41	163	1	0	0	-1	static const char * dccp _ reset _ codes [ ] = {	EMPTY	EMPTY
41	164	2	-1	0	-1	strlit	EMPTY	EMPTY
41	165	2	-1	0	-1	strlit	EMPTY	EMPTY
41	166	2	-1	0	-1	strlit	EMPTY	EMPTY
41	167	2	-1	0	-1	strlit	EMPTY	EMPTY
41	168	2	-1	0	-1	strlit	EMPTY	EMPTY
41	169	2	-1	0	-1	strlit	EMPTY	EMPTY
41	170	2	-1	0	-1	strlit	EMPTY	EMPTY
41	171	2	-1	0	-1	strlit	EMPTY	EMPTY
41	172	2	-1	0	-1	strlit	EMPTY	EMPTY
41	173	2	-1	0	-1	strlit	EMPTY	EMPTY
41	174	2	-1	0	-1	strlit	EMPTY	EMPTY
41	175	2	-1	0	-1	strlit	EMPTY	EMPTY
41	176	3	-1	0	-1	} ;	EMPTY	EMPTY
41	178	1	0	0	-1	static const char * dccp _ feature _ nums [ ] = {	EMPTY	EMPTY
41	179	2	-1	0	-1	strlit	EMPTY	EMPTY
41	180	2	-1	0	-1	strlit	EMPTY	EMPTY
41	181	2	-1	0	-1	strlit	EMPTY	EMPTY
41	182	2	-1	0	-1	strlit	EMPTY	EMPTY
41	183	2	-1	0	-1	strlit	EMPTY	EMPTY
41	184	2	-1	0	-1	strlit	EMPTY	EMPTY
41	185	2	-1	0	-1	strlit	EMPTY	EMPTY
41	186	2	-1	0	-1	strlit	EMPTY	EMPTY
41	187	2	-1	0	-1	strlit	EMPTY	EMPTY
41	188	2	-1	0	-1	strlit	EMPTY	EMPTY
41	189	3	-1	0	-1	} ;	EMPTY	EMPTY
41	191	1	0	0	-1	static inline u _ int dccp _ csum _ coverage ( const struct dccp _ hdr * dh  u _ int len )	dccp _ hdr len	EMPTY
41	192	2	-1	0	-1	{	EMPTY	EMPTY
41	193	3	-1	0	-1	u _ int cov ;	EMPTY	EMPTY
41	195	1	0	0	0	if ( dccph _ cscov ( dh ) == 0 )	EMPTY	EMPTY
41	196	2	-1	0	-1	return len	len	EMPTY
41	197	2	-1	0	-1	cov = ( dh -> dccph _ doff + dccph _ cscov ( dh ) - 1 ) * sizeof ( uint32 _ t )	EMPTY	EMPTY
41	198	2	-1	0	-1	return ( cov > len ) ? len : cov	len len	EMPTY
41	199	3	-1	0	-1	}	EMPTY	EMPTY
41	201	1	0	0	-1	static int dccp _ cksum ( netdissect _ options * ndo  const struct ip * ip	ndo ip ip	EMPTY
41	202	2	-1	0	-1	const struct dccp _ hdr * dh  u _ int len )	dccp _ hdr len	EMPTY
41	203	2	-1	0	-1	{	EMPTY	EMPTY
41	204	2	-1	0	-1	return nextproto4 _ cksum ( ndo , ip , ( const uint8 _ t * ) ( void * ) dh , len ,	ndo ip len	EMPTY
41	205	2	-1	0	-1	dccp _ csum _ coverage ( dh , len ) , ipproto _ dccp )	len	ipproto _ dccp
41	206	3	-1	0	-1	}	EMPTY	EMPTY
41	208	1	0	0	0	# ifdef inet6	EMPTY	EMPTY
41	209	2	-1	0	-1	static int dccp6 _ cksum ( const struct ip6 _ hdr * ip6  const struct dccp _ hdr * dh  u _ int len )	dccp _ hdr len	EMPTY
41	210	2	-1	0	-1	{	EMPTY	EMPTY
41	211	2	-1	0	-1	return nextproto6 _ cksum ( ip6 , ( const uint8 _ t * ) ( void * ) dh , len ,	nextproto6 _ cksum len	EMPTY
41	212	2	-1	0	-1	dccp _ csum _ coverage ( dh , len ) , ipproto _ dccp )	len	ipproto _ dccp
41	213	2	-1	0	-1	}	EMPTY	EMPTY
41	214	3	-1	0	-1	# endif	EMPTY	EMPTY
41	216	1	0	0	-1	static const char * dccp _ reset _ code ( uint8 _ t code )	EMPTY	EMPTY
41	217	2	-1	0	-1	{	EMPTY	EMPTY
41	218	2	-1	0	-1	if ( code >=  _  _ dccp _ reset _ code _ last )	EMPTY	EMPTY
41	219	2	-1	0	-1	return  " invalid "	EMPTY	EMPTY
41	220	2	-1	0	-1	return dccp _ reset _ codes [ code ]	EMPTY	EMPTY
41	221	3	-1	0	-1	}	EMPTY	EMPTY
41	223	1	0	0	-1	static uint64 _ t dccp _ seqno ( const u _ char * bp )	bp	EMPTY
41	224	2	-1	0	-1	{	EMPTY	EMPTY
41	225	2	-1	0	-1	const struct dccp _ hdr * dh = ( const struct dccp _ hdr * ) bp ;	dccp _ hdr dccp _ hdr bp	EMPTY
41	226	3	-1	0	-1	uint64 _ t seqno ;	EMPTY	EMPTY
41	228	1	0	0	0	if ( dccph _ x ( dh ) != 0 ) {	EMPTY	EMPTY
41	229	2	-1	0	-1	const struct dccp _ hdr _ ext * dhx = ( const struct dccp _ hdr _ ext * ) bp ;	dccp _ hdr _ ext dccp _ hdr _ ext bp	EMPTY
41	230	2	-1	0	-1	seqno = extract _ 48bits ( dhx -> dccph _ seq ) ;	EMPTY	EMPTY
41	231	2	-1	0	-1	} else {	EMPTY	EMPTY
41	232	2	-1	0	-1	seqno = extract _ 24bits ( dh -> dccph _ seq ) ;	EMPTY	EMPTY
41	233	3	-1	0	-1	}	EMPTY	EMPTY
41	235	1	0	0	0	return seqno	EMPTY	EMPTY
41	236	3	-1	0	-1	}	EMPTY	EMPTY
41	238	1	0	0	-1	static inline unsigned int dccp _ basic _ hdr _ len ( const struct dccp _ hdr * dh )	dccp _ hdr	EMPTY
41	239	2	-1	0	-1	{	EMPTY	EMPTY
41	240	2	-1	0	-1	return dccph _ x ( dh ) ? sizeof ( struct dccp _ hdr _ ext ) : sizeof ( struct dccp _ hdr )	dccp _ hdr _ ext dccp _ hdr	EMPTY
41	241	3	-1	0	-1	}	EMPTY	EMPTY
41	243	1	0	0	-1	static void dccp _ print _ ack _ no ( netdissect _ options * ndo  const u _ char * bp )	ndo bp	EMPTY
41	244	2	-1	0	-1	{	EMPTY	EMPTY
41	245	2	-1	0	-1	const struct dccp _ hdr * dh = ( const struct dccp _ hdr * ) bp ;	dccp _ hdr dccp _ hdr bp	EMPTY
41	246	2	-1	0	-1	const u _ char * ackp = bp + dccp _ basic _ hdr _ len ( dh ) ;	bp	EMPTY
41	247	3	-1	0	-1	uint64 _ t ackno ;	EMPTY	EMPTY
41	249	1	0	0	0	if ( dccph _ x ( dh ) != 0 ) {	EMPTY	EMPTY
41	250	2	-1	0	-1	nd _ tcheck2 ( * ackp , 8 ) ;	EMPTY	EMPTY
41	251	2	-1	0	-1	ackno = extract _ 48bits ( ackp + 2 ) ;	EMPTY	EMPTY
41	252	2	-1	0	-1	} else {	EMPTY	EMPTY
41	253	2	-1	0	-1	nd _ tcheck2 ( * ackp , 4 ) ;	EMPTY	EMPTY
41	254	2	-1	0	-1	ackno = extract _ 24bits ( ackp + 1 ) ;	EMPTY	EMPTY
41	255	3	-1	0	-1	}	EMPTY	EMPTY
41	257	1	0	0	0	nd _ print ( ( ndo  strlit priu64 strlit  ackno ) ) ;	ndo	EMPTY
41	258	2	-1	0	-1	trunc :	EMPTY	EMPTY
41	259	2	-1	0	-1	return	EMPTY	EMPTY
41	260	3	-1	0	-1	}	EMPTY	EMPTY
41	262	1	0	0	-1	static int dccp _ print _ option ( netdissect _ options *  const u _ char *  u _ int ) ;	EMPTY	EMPTY
41	270	1	0	0	-1	void dccp _ print ( netdissect _ options * ndo  const u _ char * bp  const u _ char * data2	dccp _ print ndo bp data2	EMPTY
41	271	2	-1	0	-1	u _ int len )	len	EMPTY
41	272	2	-1	0	-1	{	EMPTY	EMPTY
41	273	2	-1	0	-1	const struct dccp _ hdr * dh ;	dccp _ hdr	EMPTY
41	274	2	-1	0	-1	const struct ip * ip ;	ip ip	EMPTY
41	275	2	-1	0	-1	# ifdef inet6	EMPTY	EMPTY
41	276	2	-1	0	-1	const struct ip6 _ hdr * ip6 ;	EMPTY	EMPTY
41	277	2	-1	0	-1	# endif	EMPTY	EMPTY
41	278	2	-1	0	-1	const u _ char * cp ;	EMPTY	EMPTY
41	279	2	-1	0	-1	u _ short sport , dport ;	EMPTY	EMPTY
41	280	2	-1	0	-1	u _ int hlen ;	EMPTY	EMPTY
41	281	2	-1	0	-1	u _ int fixed _ hdrlen ;	EMPTY	EMPTY
41	282	3	-1	0	-1	uint8 _ t dccph _ type ;	EMPTY	EMPTY
41	284	1	0	0	-1	dh = ( const struct dccp _ hdr * ) bp	dccp _ hdr bp	EMPTY
41	286	1	1	0	-1	ip = ( struct ip * ) data2	ip ip data2	EMPTY
41	287	2	-1	0	-1	# ifdef inet6	EMPTY	EMPTY
41	288	2	-1	0	-1	if ( ip _ v ( ip ) == numconst )	ip	EMPTY
41	289	2	-1	0	-1	ip6 = ( const struct ip6 _ hdr * ) data2 ;	data2	EMPTY
41	290	2	-1	0	-1	else	EMPTY	EMPTY
41	291	2	-1	0	-1	ip6 = null ;	EMPTY	EMPTY
41	292	3	-1	1	-1	# endif	EMPTY	EMPTY
41	295	1	1	1	-1	cp = ( const u _ char * ) ( dh + 1 )	EMPTY	EMPTY
41	296	2	-1	0	-1	if ( cp > ndo -> ndo _ snapend ) {	ndo	EMPTY
41	297	2	-1	0	-1	nd _ print ( ( ndo ,  " [invalid packet|dccp] "  ) ) ;	ndo	EMPTY
41	298	2	-1	0	-1	return ;	EMPTY	EMPTY
41	299	2	-1	0	-1	}	EMPTY	EMPTY
41	300	2	-1	0	-1	if ( len < sizeof ( struct dccp _ hdr ) ) {	len dccp _ hdr	EMPTY
41	301	2	-1	0	-1	nd _ print ( ( ndo ,  " truncated-dccp - %u bytes missing! "  ,	ndo	EMPTY
41	302	2	-1	0	-1	len - ( u _ int ) sizeof ( struct dccp _ hdr ) ) ) ;	len dccp _ hdr	EMPTY
41	303	2	-1	0	-1	return ;	EMPTY	EMPTY
41	304	3	-1	0	-1	}	EMPTY	EMPTY
41	307	1	1	1	-1	fixed _ hdrlen = dccp _ basic _ hdr _ len ( dh )	EMPTY	EMPTY
41	308	2	-1	0	-1	if ( len < fixed _ hdrlen ) {	len	EMPTY
41	309	2	-1	0	-1	nd _ print ( ( ndo ,  " truncated-dccp - %u bytes missing! "  ,	ndo	EMPTY
41	310	2	-1	0	-1	len - fixed _ hdrlen ) ) ;	len	EMPTY
41	311	2	-1	0	-1	return ;	EMPTY	EMPTY
41	312	2	-1	0	-1	}	EMPTY	EMPTY
41	313	3	-1	0	-1	nd _ tcheck2 ( * dh  fixed _ hdrlen ) ;	EMPTY	EMPTY
41	315	1	0	0	-1	sport = extract _ 16bits ( & dh -> dccph _ sport )	extract _ 16bits	EMPTY
41	316	2	-1	0	-1	dport = extract _ 16bits ( & dh -> dccph _ dport )	extract _ 16bits	EMPTY
41	317	3	-1	0	-1	hlen = dh -> dccph _ doff * 4	EMPTY	EMPTY
41	319	1	1	0	-1	# ifdef inet6	EMPTY	EMPTY
41	320	2	-1	0	-1	if ( ip6 ) {	EMPTY	EMPTY
41	321	2	-1	0	-1	nd _ print ( ( ndo  strlit	ndo	EMPTY
41	322	2	-1	0	-1	ip6addr _ string ( ndo  & ip6 -> ip6 _ src )  sport	ndo ip6 _ src	EMPTY
41	323	2	-1	0	-1	ip6addr _ string ( ndo  & ip6 -> ip6 _ dst )  dport ) ) ;	ndo ip6 _ dst	EMPTY
41	324	2	-1	0	-1	} else	EMPTY	EMPTY
41	325	2	-1	1	-1	# endif	EMPTY	EMPTY
41	326	2	-1	0	-1	{	EMPTY	EMPTY
41	327	2	-1	0	-1	nd _ print ( ( ndo  strlit	ndo	EMPTY
41	328	2	-1	0	-1	ipaddr _ string ( ndo  & ip -> ip _ src )  sport	ndo ip ip _ src	EMPTY
41	329	2	-1	0	-1	ipaddr _ string ( ndo  & ip -> ip _ dst )  dport ) ) ;	ndo ip ip _ dst	EMPTY
41	330	3	-1	0	-1	}	EMPTY	EMPTY
41	332	1	0	0	0	nd _ print ( ( ndo  strlit ) ) ;	ndo	EMPTY
41	334	1	0	0	0	if ( ndo -> ndo _ qflag ) {	ndo ndo _ qflag	EMPTY
41	335	2	-1	0	-1	nd _ print ( ( ndo ,  "  %d "  , len - hlen ) ) ;	ndo len	EMPTY
41	336	2	-1	0	-1	if ( hlen > len ) {	len	EMPTY
41	337	2	-1	0	-1	nd _ print ( ( ndo ,  "  [bad hdr length %u - too long, > %u] "  ,	ndo	EMPTY
41	338	2	-1	0	-1	hlen , len ) ) ;	len	EMPTY
41	339	2	-1	0	-1	}	EMPTY	EMPTY
41	340	2	-1	0	-1	return ;	EMPTY	EMPTY
41	341	3	-1	0	-1	}	EMPTY	EMPTY
41	344	1	0	0	-1	if ( ndo -> ndo _ vflag ) {	ndo ndo _ vflag	EMPTY
41	345	2	-1	0	-1	nd _ print ( ( ndo ,  "  (ccval %d, cscov %d,  "  , dccph _ ccval ( dh ) , dccph _ cscov ( dh ) ) ) ;	ndo	EMPTY
41	346	3	-1	0	-1	}	EMPTY	EMPTY
41	349	1	0	0	-1	if ( ndo -> ndo _ vflag && nd _ ttest2 ( bp [ 0 ] , len ) ) {	ndo ndo _ vflag bp len	EMPTY
41	350	3	-1	0	-1	uint16 _ t sum = 0 , dccp _ sum ;	EMPTY	EMPTY
41	352	1	0	0	-1	dccp _ sum = extract _ 16bits ( & dh -> dccph _ checksum ) ;	extract _ 16bits	EMPTY
41	353	2	-1	0	-1	nd _ print ( ( ndo ,  " cksum 0x%04x  "  , dccp _ sum ) ) ;	ndo	EMPTY
41	354	2	-1	0	-1	if ( ip _ v ( ip ) == 4 )	ip	EMPTY
41	355	2	-1	0	-1	sum = dccp _ cksum ( ndo , ip , dh , len ) ;	ndo ip len	EMPTY
41	356	2	-1	0	-1	# ifdef inet6	EMPTY	EMPTY
41	357	2	-1	0	-1	else if ( ip _ v ( ip ) == 6 )	ip	EMPTY
41	358	2	-1	0	-1	sum = dccp6 _ cksum ( ip6 , dh , len ) ;	len	EMPTY
41	359	2	-1	0	-1	# endif	EMPTY	EMPTY
41	360	2	-1	0	-1	if ( sum != 0 )	EMPTY	EMPTY
41	361	2	-1	0	-1	nd _ print ( ( ndo ,  " (incorrect -> 0x%04x) "  , in _ cksum _ shouldbe ( dccp _ sum , sum ) ) ) ;	ndo	EMPTY
41	362	2	-1	0	-1	else	EMPTY	EMPTY
41	363	2	-1	0	-1	nd _ print ( ( ndo ,  " (correct) "  ) ) ;	ndo	EMPTY
41	364	3	-1	0	-1	}	EMPTY	EMPTY
41	366	1	0	0	0	if ( ndo -> ndo _ vflag )	ndo ndo _ vflag	EMPTY
41	367	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	ndo	EMPTY
41	368	3	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	ndo	EMPTY
41	370	1	0	0	-1	dccph _ type = dccph _ type ( dh ) ;	EMPTY	EMPTY
41	371	2	-1	0	-1	switch ( dccph _ type ) {	EMPTY	EMPTY
41	372	2	-1	0	-1	case dccp _ pkt _ request : {	EMPTY	EMPTY
41	373	2	-1	0	-1	struct dccp _ hdr _ request * dhr =	dccp _ hdr _ request	EMPTY
41	374	2	-1	0	-1	( struct dccp _ hdr _ request * ) ( bp + fixed _ hdrlen ) ;	dccp _ hdr _ request bp	EMPTY
41	375	2	-1	0	-1	fixed _ hdrlen += 4 ;	EMPTY	EMPTY
41	376	2	-1	0	-1	if ( len < fixed _ hdrlen ) {	len	EMPTY
41	377	2	-1	0	-1	nd _ print ( ( ndo ,  " truncated-%s - %u bytes missing! "  ,	ndo	EMPTY
41	378	2	-1	0	-1	tok2str ( dccp _ pkt _ type _ str ,  "  "  , dccph _ type ) ,	tok2str	EMPTY
41	379	2	-1	0	-1	len - fixed _ hdrlen ) ) ;	len	EMPTY
41	380	2	-1	0	-1	return ;	EMPTY	EMPTY
41	381	2	-1	0	-1	}	EMPTY	EMPTY
41	382	2	-1	0	-1	nd _ tcheck ( * dhr ) ;	EMPTY	EMPTY
41	383	2	-1	0	-1	nd _ print ( ( ndo ,  " %s (service=%d)  "  ,	ndo	EMPTY
41	384	2	-1	0	-1	tok2str ( dccp _ pkt _ type _ str ,  "  "  , dccph _ type ) ,	tok2str	EMPTY
41	385	2	-1	0	-1	extract _ 32bits ( & dhr -> dccph _ req _ service ) ) ) ;	EMPTY	EMPTY
41	386	2	-1	0	-1	break ;	EMPTY	EMPTY
41	387	2	-1	0	-1	}	EMPTY	EMPTY
41	388	2	-1	0	-1	case dccp _ pkt _ response : {	EMPTY	EMPTY
41	389	2	-1	0	-1	struct dccp _ hdr _ response * dhr =	dccp _ hdr _ response	EMPTY
41	390	2	-1	0	-1	( struct dccp _ hdr _ response * ) ( bp + fixed _ hdrlen ) ;	dccp _ hdr _ response bp	EMPTY
41	391	2	-1	0	-1	fixed _ hdrlen += 12 ;	EMPTY	EMPTY
41	392	2	-1	0	-1	if ( len < fixed _ hdrlen ) {	len	EMPTY
41	393	2	-1	0	-1	nd _ print ( ( ndo ,  " truncated-%s - %u bytes missing! "  ,	ndo	EMPTY
41	394	2	-1	0	-1	tok2str ( dccp _ pkt _ type _ str ,  "  "  , dccph _ type ) ,	tok2str	EMPTY
41	395	2	-1	0	-1	len - fixed _ hdrlen ) ) ;	len	EMPTY
41	396	2	-1	0	-1	return ;	EMPTY	EMPTY
41	397	2	-1	0	-1	}	EMPTY	EMPTY
41	398	2	-1	0	-1	nd _ tcheck ( * dhr ) ;	EMPTY	EMPTY
41	399	3	-1	0	-1	nd _ print ( ( ndo ,  " %s (service=%d)  "  ,	ndo	EMPTY
41	400	1	0	0	-1	tok2str ( dccp _ pkt _ type _ str ,  "  "  , dccph _ type ) ,	tok2str	EMPTY
41	401	2	-1	0	-1	extract _ 32bits ( & dhr -> dccph _ resp _ service ) ) ) ;	dccph _ resp _ service	EMPTY
41	402	2	-1	0	-1	break ;	EMPTY	EMPTY
41	403	2	-1	0	-1	}	EMPTY	EMPTY
41	404	2	-1	0	-1	case dccp _ pkt _ data :	EMPTY	EMPTY
41	405	2	-1	0	-1	nd _ print ( ( ndo ,  " %s  "  , tok2str ( dccp _ pkt _ type _ str ,  "  "  , dccph _ type ) ) ) ;	ndo tok2str	EMPTY
41	406	2	-1	0	-1	break ;	EMPTY	EMPTY
41	407	2	-1	0	-1	case dccp _ pkt _ ack : {	EMPTY	EMPTY
41	408	2	-1	0	-1	fixed _ hdrlen += 8 ;	EMPTY	EMPTY
41	409	2	-1	0	-1	if ( len < fixed _ hdrlen ) {	len	EMPTY
41	410	2	-1	0	-1	nd _ print ( ( ndo ,  " truncated-%s - %u bytes missing! "  ,	ndo	EMPTY
41	411	2	-1	0	-1	tok2str ( dccp _ pkt _ type _ str ,  "  "  , dccph _ type ) ,	tok2str	EMPTY
41	412	2	-1	0	-1	len - fixed _ hdrlen ) ) ;	len	EMPTY
41	413	2	-1	0	-1	return ;	EMPTY	EMPTY
41	414	2	-1	0	-1	}	EMPTY	EMPTY
41	415	2	-1	0	-1	nd _ print ( ( ndo ,  " %s  "  , tok2str ( dccp _ pkt _ type _ str ,  "  "  , dccph _ type ) ) ) ;	ndo tok2str	EMPTY
41	416	2	-1	0	-1	break ;	EMPTY	EMPTY
41	417	2	-1	0	-1	}	EMPTY	EMPTY
41	418	2	-1	0	-1	case dccp _ pkt _ dataack : {	EMPTY	EMPTY
41	419	2	-1	0	-1	fixed _ hdrlen += 8 ;	EMPTY	EMPTY
41	420	2	-1	0	-1	if ( len < fixed _ hdrlen ) {	len	EMPTY
41	421	2	-1	0	-1	nd _ print ( ( ndo ,  " truncated-%s - %u bytes missing! "  ,	ndo	EMPTY
41	422	2	-1	0	-1	tok2str ( dccp _ pkt _ type _ str ,  "  "  , dccph _ type ) ,	tok2str	EMPTY
41	423	2	-1	0	-1	len - fixed _ hdrlen ) ) ;	len	EMPTY
41	424	2	-1	0	-1	return ;	EMPTY	EMPTY
41	425	2	-1	0	-1	}	EMPTY	EMPTY
41	426	2	-1	0	-1	nd _ print ( ( ndo ,  " %s  "  , tok2str ( dccp _ pkt _ type _ str ,  "  "  , dccph _ type ) ) ) ;	ndo tok2str	EMPTY
41	427	2	-1	0	-1	break ;	EMPTY	EMPTY
41	428	2	-1	0	-1	}	EMPTY	EMPTY
41	429	3	-1	0	-1	case dccp _ pkt _ closereq :	EMPTY	EMPTY
41	430	1	0	0	-1	fixed _ hdrlen += 8 ;	EMPTY	EMPTY
41	431	2	-1	0	-1	if ( len < fixed _ hdrlen ) {	len	EMPTY
41	432	2	-1	0	-1	nd _ print ( ( ndo ,  " truncated-%s - %u bytes missing! "  ,	ndo	EMPTY
41	433	2	-1	0	-1	tok2str ( dccp _ pkt _ type _ str ,  "  "  , dccph _ type ) ,	tok2str	EMPTY
41	434	2	-1	0	-1	len - fixed _ hdrlen ) ) ;	len	EMPTY
41	435	2	-1	0	-1	return ;	EMPTY	EMPTY
41	436	2	-1	0	-1	}	EMPTY	EMPTY
41	437	2	-1	0	-1	nd _ print ( ( ndo ,  " %s  "  , tok2str ( dccp _ pkt _ type _ str ,  "  "  , dccph _ type ) ) ) ;	ndo tok2str	EMPTY
41	438	2	-1	0	-1	break ;	EMPTY	EMPTY
41	439	2	-1	0	-1	case dccp _ pkt _ close :	EMPTY	EMPTY
41	440	2	-1	0	-1	fixed _ hdrlen += 8 ;	EMPTY	EMPTY
41	441	2	-1	0	-1	if ( len < fixed _ hdrlen ) {	len	EMPTY
41	442	2	-1	0	-1	nd _ print ( ( ndo ,  " truncated-%s - %u bytes missing! "  ,	ndo	EMPTY
41	443	2	-1	0	-1	tok2str ( dccp _ pkt _ type _ str ,  "  "  , dccph _ type ) ,	tok2str	EMPTY
41	444	2	-1	0	-1	len - fixed _ hdrlen ) ) ;	len	EMPTY
41	445	2	-1	0	-1	return ;	EMPTY	EMPTY
41	446	2	-1	0	-1	}	EMPTY	EMPTY
41	447	2	-1	0	-1	nd _ print ( ( ndo ,  " %s  "  , tok2str ( dccp _ pkt _ type _ str ,  "  "  , dccph _ type ) ) ) ;	ndo tok2str	EMPTY
41	448	2	-1	0	-1	break ;	EMPTY	EMPTY
41	449	2	-1	0	-1	case dccp _ pkt _ reset : {	EMPTY	EMPTY
41	450	2	-1	0	-1	struct dccp _ hdr _ reset * dhr =	dccp _ hdr _ reset	EMPTY
41	451	2	-1	0	-1	( struct dccp _ hdr _ reset * ) ( bp + fixed _ hdrlen ) ;	dccp _ hdr _ reset bp	EMPTY
41	452	2	-1	0	-1	fixed _ hdrlen += 12 ;	EMPTY	EMPTY
41	453	2	-1	0	-1	if ( len < fixed _ hdrlen ) {	len	EMPTY
41	454	2	-1	0	-1	nd _ print ( ( ndo ,  " truncated-%s - %u bytes missing! "  ,	ndo	EMPTY
41	455	2	-1	0	-1	tok2str ( dccp _ pkt _ type _ str ,  "  "  , dccph _ type ) ,	tok2str	EMPTY
41	456	2	-1	0	-1	len - fixed _ hdrlen ) ) ;	len	EMPTY
41	457	2	-1	0	-1	return ;	EMPTY	EMPTY
41	458	2	-1	0	-1	}	EMPTY	EMPTY
41	459	3	-1	0	-1	nd _ tcheck ( * dhr ) ;	EMPTY	EMPTY
41	460	1	0	0	-1	nd _ print ( ( ndo ,  " %s (code=%s)  "  ,	ndo	EMPTY
41	461	2	-1	0	-1	tok2str ( dccp _ pkt _ type _ str ,  "  "  , dccph _ type ) ,	tok2str	EMPTY
41	462	2	-1	0	-1	dccp _ reset _ code ( dhr -> dccph _ reset _ code ) ) ) ;	dccph _ reset _ code	EMPTY
41	463	2	-1	0	-1	break ;	EMPTY	EMPTY
41	464	2	-1	0	-1	}	EMPTY	EMPTY
41	465	2	-1	0	-1	case dccp _ pkt _ sync :	EMPTY	EMPTY
41	466	2	-1	0	-1	fixed _ hdrlen += 8 ;	EMPTY	EMPTY
41	467	2	-1	0	-1	if ( len < fixed _ hdrlen ) {	len	EMPTY
41	468	2	-1	0	-1	nd _ print ( ( ndo ,  " truncated-%s - %u bytes missing! "  ,	ndo	EMPTY
41	469	2	-1	0	-1	tok2str ( dccp _ pkt _ type _ str ,  "  "  , dccph _ type ) ,	tok2str	EMPTY
41	470	2	-1	0	-1	len - fixed _ hdrlen ) ) ;	len	EMPTY
41	471	2	-1	0	-1	return ;	EMPTY	EMPTY
41	472	2	-1	0	-1	}	EMPTY	EMPTY
41	473	2	-1	0	-1	nd _ print ( ( ndo ,  " %s  "  , tok2str ( dccp _ pkt _ type _ str ,  "  "  , dccph _ type ) ) ) ;	ndo tok2str	EMPTY
41	474	2	-1	0	-1	break ;	EMPTY	EMPTY
41	475	2	-1	0	-1	case dccp _ pkt _ syncack :	EMPTY	EMPTY
41	476	2	-1	0	-1	fixed _ hdrlen += 8 ;	EMPTY	EMPTY
41	477	2	-1	0	-1	if ( len < fixed _ hdrlen ) {	len	EMPTY
41	478	2	-1	0	-1	nd _ print ( ( ndo ,  " truncated-%s - %u bytes missing! "  ,	ndo	EMPTY
41	479	2	-1	0	-1	tok2str ( dccp _ pkt _ type _ str ,  "  "  , dccph _ type ) ,	tok2str	EMPTY
41	480	2	-1	0	-1	len - fixed _ hdrlen ) ) ;	len	EMPTY
41	481	2	-1	0	-1	return ;	EMPTY	EMPTY
41	482	2	-1	0	-1	}	EMPTY	EMPTY
41	483	2	-1	0	-1	nd _ print ( ( ndo ,  " %s  "  , tok2str ( dccp _ pkt _ type _ str ,  "  "  , dccph _ type ) ) ) ;	ndo tok2str	EMPTY
41	484	2	-1	0	-1	break ;	EMPTY	EMPTY
41	485	2	-1	0	-1	default :	EMPTY	EMPTY
41	486	2	-1	0	-1	nd _ print ( ( ndo ,  " %s  "  , tok2str ( dccp _ pkt _ type _ str ,  " unknown-type-%u "  , dccph _ type ) ) ) ;	ndo tok2str	EMPTY
41	487	2	-1	0	-1	break ;	EMPTY	EMPTY
41	488	3	-1	0	-1	}	EMPTY	EMPTY
41	490	1	0	0	0	if ( ( dccph _ type ( dh ) != dccp _ pkt _ data ) &&	EMPTY	EMPTY
41	491	2	-1	0	-1	( dccph _ type ( dh ) != dccp _ pkt _ request ) )	EMPTY	EMPTY
41	492	3	-1	0	-1	dccp _ print _ ack _ no ( ndo , bp )	ndo bp	EMPTY
41	494	1	0	0	0	if ( ndo -> ndo _ vflag < 2 )	ndo ndo _ vflag	EMPTY
41	495	3	-1	0	-1	return	EMPTY	EMPTY
41	497	1	0	0	0	nd _ print ( ( ndo  strlit priu64  dccp _ seqno ( bp ) ) ) ;	ndo bp	EMPTY
41	500	1	0	0	-1	if ( hlen > fixed _ hdrlen ) {	EMPTY	EMPTY
41	501	2	-1	0	-1	const u _ char * cp ;	EMPTY	EMPTY
41	502	2	-1	0	-1	u _ int optlen ;	EMPTY	EMPTY
41	503	2	-1	0	-1	cp = bp + fixed _ hdrlen ;	bp	EMPTY
41	504	3	-1	0	-1	nd _ print ( ( ndo ,  "  < "  ) ) ;	ndo	EMPTY
41	506	1	0	0	-1	hlen -= fixed _ hdrlen ;	EMPTY	EMPTY
41	507	2	-1	0	-1	while ( 1 ) {	EMPTY	EMPTY
41	508	2	-1	0	-1	optlen = dccp _ print _ option ( ndo , cp , hlen ) ;	ndo	EMPTY
41	509	2	-1	0	-1	if ( ! optlen )	EMPTY	EMPTY
41	510	2	-1	0	-1	break ;	EMPTY	EMPTY
41	511	2	-1	0	-1	if ( hlen <= optlen )	EMPTY	EMPTY
41	512	2	-1	0	-1	break ;	EMPTY	EMPTY
41	513	2	-1	0	-1	hlen -= optlen ;	EMPTY	EMPTY
41	514	2	-1	0	-1	cp += optlen ;	EMPTY	EMPTY
41	515	2	-1	0	-1	nd _ print ( ( ndo ,  " ,  "  ) ) ;	ndo	EMPTY
41	516	2	-1	0	-1	}	EMPTY	EMPTY
41	517	2	-1	0	-1	nd _ print ( ( ndo ,  " > "  ) ) ;	ndo	EMPTY
41	518	2	-1	0	-1	}	EMPTY	EMPTY
41	519	2	-1	0	-1	return	EMPTY	EMPTY
41	520	2	-1	0	-1	trunc :	EMPTY	EMPTY
41	521	2	-1	0	-1	nd _ print ( ( ndo  strlit  tstr ) ) ;	ndo	EMPTY
41	522	2	-1	0	-1	return	EMPTY	EMPTY
41	523	3	-1	0	-1	}	EMPTY	EMPTY
41	525	1	0	0	-1	static const struct tok dccp _ option _ values [ ] = {	EMPTY	EMPTY
41	526	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
41	527	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
41	528	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
41	529	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
41	530	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
41	531	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
41	532	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
41	533	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
41	534	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
41	535	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
41	536	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
41	537	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
41	538	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
41	539	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
41	540	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
41	541	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
41	542	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
41	543	3	-1	0	-1	} ;	EMPTY	EMPTY
41	545	1	0	0	-1	static int dccp _ print _ option ( netdissect _ options * ndo  const u _ char * option  u _ int hlen )	ndo	EMPTY
41	546	2	-1	0	-1	{	EMPTY	EMPTY
41	547	3	-1	0	-1	uint8 _ t optlen  i ;	EMPTY	EMPTY
41	549	1	0	0	-1	nd _ tcheck ( * option ) ;	EMPTY	EMPTY
41	551	1	0	0	0	if ( * option >= numconst ) {	EMPTY	EMPTY
41	552	2	-1	0	-1	nd _ tcheck ( * ( option + numconst ) ) ;	EMPTY	EMPTY
41	553	2	-1	0	-1	optlen = * ( option + numconst ) ;	EMPTY	EMPTY
41	554	2	-1	0	-1	if ( optlen < numconst ) {	EMPTY	EMPTY
41	555	2	-1	0	-1	if ( * option >= numconst )	EMPTY	EMPTY
41	556	2	-1	0	-1	nd _ print ( ( ndo  strlit  * option ) ) ;	ndo	EMPTY
41	557	2	-1	0	-1	else	EMPTY	EMPTY
41	558	2	-1	0	-1	nd _ print ( ( ndo  strlit	ndo	EMPTY
41	559	2	-1	0	-1	tok2str ( dccp _ option _ values  strlit  * option ) ) ) ;	tok2str	EMPTY
41	560	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
41	561	2	-1	0	-1	}	EMPTY	EMPTY
41	562	2	-1	0	-1	} else	EMPTY	EMPTY
41	563	3	-1	0	-1	optlen = numconst ;	EMPTY	EMPTY
41	565	1	0	0	0	if ( hlen < optlen ) {	EMPTY	EMPTY
41	566	2	-1	0	-1	if ( * option >= numconst )	EMPTY	EMPTY
41	567	3	-1	0	-1	nd _ print ( ( ndo  strlit	ndo	EMPTY
41	569	1	0	0	-1	else	EMPTY	EMPTY
41	570	2	-1	0	-1	nd _ print ( ( ndo  strlit	ndo	EMPTY
41	571	2	-1	0	-1	tok2str ( dccp _ option _ values  strlit  * option ) ) ) ;	tok2str	EMPTY
41	572	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
41	573	2	-1	0	-1	}	EMPTY	EMPTY
41	574	3	-1	0	-1	nd _ tcheck2 ( * option  optlen ) ;	EMPTY	EMPTY
41	576	1	0	0	0	if ( * option >= numconst ) {	EMPTY	EMPTY
41	577	2	-1	0	-1	nd _ print ( ( ndo  strlit  * option ) ) ;	ndo	EMPTY
41	578	2	-1	0	-1	switch ( optlen ) {	EMPTY	EMPTY
41	579	2	-1	0	-1	case numconst :	EMPTY	EMPTY
41	580	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 16bits ( option + numconst ) ) ) ;	ndo extract _ 16bits	EMPTY
41	581	2	-1	0	-1	break ;	EMPTY	EMPTY
41	582	2	-1	0	-1	case numconst :	EMPTY	EMPTY
41	583	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 32bits ( option + numconst ) ) ) ;	ndo	EMPTY
41	584	2	-1	0	-1	break ;	EMPTY	EMPTY
41	585	2	-1	0	-1	default :	EMPTY	EMPTY
41	586	2	-1	0	-1	break ;	EMPTY	EMPTY
41	587	2	-1	0	-1	}	EMPTY	EMPTY
41	588	2	-1	0	-1	} else {	EMPTY	EMPTY
41	589	2	-1	0	-1	nd _ print ( ( ndo  strlit  tok2str ( dccp _ option _ values  strlit  * option ) ) ) ;	ndo tok2str	EMPTY
41	590	2	-1	0	-1	switch ( * option ) {	EMPTY	EMPTY
41	591	2	-1	0	-1	case numconst :	EMPTY	EMPTY
41	592	2	-1	0	-1	case numconst :	EMPTY	EMPTY
41	593	2	-1	0	-1	case numconst :	EMPTY	EMPTY
41	594	2	-1	0	-1	case numconst :	EMPTY	EMPTY
41	595	2	-1	0	-1	if ( optlen < numconst ) {	EMPTY	EMPTY
41	596	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	ndo	EMPTY
41	597	2	-1	0	-1	return optlen ;	EMPTY	EMPTY
41	598	2	-1	0	-1	}	EMPTY	EMPTY
41	599	2	-1	0	-1	if ( * ( option + numconst ) < numconst ) {	EMPTY	EMPTY
41	600	2	-1	0	-1	nd _ print ( ( ndo  strlit  dccp _ feature _ nums [ * ( option + numconst ) ] ) ) ;	ndo	EMPTY
41	601	2	-1	0	-1	for ( i = numconst ; i < optlen - numconst ; i ++ )	EMPTY	EMPTY
41	602	2	-1	0	-1	nd _ print ( ( ndo  strlit  * ( option + numconst + i ) ) ) ;	ndo	EMPTY
41	603	2	-1	0	-1	}	EMPTY	EMPTY
41	604	2	-1	0	-1	break ;	EMPTY	EMPTY
41	605	3	-1	0	-1	case numconst :	EMPTY	EMPTY
41	606	1	0	0	-1	if ( optlen > numconst ) {	EMPTY	EMPTY
41	607	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	ndo	EMPTY
41	608	2	-1	0	-1	for ( i = numconst ; i < optlen - numconst ; i ++ )	EMPTY	EMPTY
41	609	2	-1	0	-1	nd _ print ( ( ndo  strlit  * ( option + numconst + i ) ) ) ;	ndo	EMPTY
41	610	2	-1	0	-1	}	EMPTY	EMPTY
41	611	2	-1	0	-1	break ;	EMPTY	EMPTY
41	612	2	-1	0	-1	case numconst :	EMPTY	EMPTY
41	613	2	-1	0	-1	for ( i = numconst ; i < optlen - numconst ; i ++ )	EMPTY	EMPTY
41	614	2	-1	0	-1	nd _ print ( ( ndo  strlit  * ( option + numconst + i ) ) ) ;	ndo	EMPTY
41	615	2	-1	0	-1	break ;	EMPTY	EMPTY
41	616	2	-1	0	-1	case numconst :	EMPTY	EMPTY
41	617	2	-1	0	-1	if ( optlen > numconst ) {	EMPTY	EMPTY
41	618	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	ndo	EMPTY
41	619	2	-1	0	-1	for ( i = numconst ; i < optlen - numconst ; i ++ )	EMPTY	EMPTY
41	620	2	-1	0	-1	nd _ print ( ( ndo  strlit  * ( option + numconst + i ) ) ) ;	ndo	EMPTY
41	621	2	-1	0	-1	}	EMPTY	EMPTY
41	622	2	-1	0	-1	break ;	EMPTY	EMPTY
41	623	2	-1	0	-1	case numconst :	EMPTY	EMPTY
41	624	2	-1	0	-1	if ( optlen > numconst ) {	EMPTY	EMPTY
41	625	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	ndo	EMPTY
41	626	2	-1	0	-1	for ( i = numconst ; i < optlen - numconst ; i ++ )	EMPTY	EMPTY
41	627	2	-1	0	-1	nd _ print ( ( ndo  strlit  * ( option + numconst + i ) ) ) ;	ndo	EMPTY
41	628	2	-1	0	-1	}	EMPTY	EMPTY
41	629	2	-1	0	-1	break ;	EMPTY	EMPTY
41	630	2	-1	0	-1	case numconst :	EMPTY	EMPTY
41	631	2	-1	0	-1	if ( optlen > numconst ) {	EMPTY	EMPTY
41	632	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	ndo	EMPTY
41	633	2	-1	0	-1	for ( i = numconst ; i < optlen - numconst ; i ++ )	EMPTY	EMPTY
41	634	2	-1	0	-1	nd _ print ( ( ndo  strlit  * ( option + numconst + i ) ) ) ;	ndo	EMPTY
41	635	3	-1	0	-1	}	EMPTY	EMPTY
41	636	1	0	0	-1	break ;	EMPTY	EMPTY
41	637	2	-1	0	-1	case numconst :	EMPTY	EMPTY
41	638	2	-1	0	-1	if ( optlen == numconst )	EMPTY	EMPTY
41	639	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 32bits ( option + numconst ) ) ) ;	ndo	EMPTY
41	640	2	-1	0	-1	else	EMPTY	EMPTY
41	641	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	ndo	EMPTY
41	642	2	-1	0	-1	break ;	EMPTY	EMPTY
41	643	2	-1	0	-1	case numconst :	EMPTY	EMPTY
41	644	2	-1	0	-1	if ( optlen == numconst )	EMPTY	EMPTY
41	645	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 32bits ( option + numconst ) ) ) ;	ndo	EMPTY
41	646	2	-1	0	-1	else	EMPTY	EMPTY
41	647	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	ndo	EMPTY
41	648	2	-1	0	-1	break ;	EMPTY	EMPTY
41	649	2	-1	0	-1	case numconst :	EMPTY	EMPTY
41	650	2	-1	0	-1	if ( optlen == numconst )	EMPTY	EMPTY
41	651	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 32bits ( option + numconst ) ) ) ;	ndo	EMPTY
41	652	2	-1	0	-1	if ( optlen == numconst )	EMPTY	EMPTY
41	653	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 16bits ( option + numconst ) ) ) ;	ndo extract _ 16bits	EMPTY
41	654	2	-1	0	-1	else	EMPTY	EMPTY
41	655	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	ndo	EMPTY
41	656	2	-1	0	-1	break ;	EMPTY	EMPTY
41	657	2	-1	0	-1	case numconst :	EMPTY	EMPTY
41	658	2	-1	0	-1	if ( optlen > numconst ) {	EMPTY	EMPTY
41	659	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	ndo	EMPTY
41	660	2	-1	0	-1	for ( i = numconst ; i < optlen - numconst ; i ++ )	EMPTY	EMPTY
41	661	2	-1	0	-1	nd _ print ( ( ndo  strlit  * ( option + numconst + i ) ) ) ;	ndo	EMPTY
41	662	2	-1	0	-1	}	EMPTY	EMPTY
41	663	2	-1	0	-1	break ;	EMPTY	EMPTY
41	664	2	-1	0	-1	}	EMPTY	EMPTY
41	665	3	-1	0	-1	}	EMPTY	EMPTY
41	667	1	0	0	0	return optlen ;	EMPTY	EMPTY
41	668	2	-1	0	-1	trunc :	EMPTY	EMPTY
41	669	2	-1	0	-1	nd _ print ( ( ndo  strlit  tstr ) ) ;	ndo	EMPTY
41	670	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
41	671	3	-1	0	-1	}	EMPTY	EMPTY
42	35	1	1	0	-1	static const char * ftypes [ ] = {	EMPTY	EMPTY
42	36	2	-1	1	-1	strlit	EMPTY	EMPTY
42	37	2	-1	1	-1	strlit	EMPTY	EMPTY
42	38	2	-1	1	-1	strlit	EMPTY	EMPTY
42	39	2	-1	1	-1	strlit	EMPTY	EMPTY
42	40	2	-1	1	-1	strlit	EMPTY	EMPTY
42	41	2	-1	1	-1	strlit	EMPTY	EMPTY
42	42	2	-1	1	-1	strlit	EMPTY	EMPTY
42	43	2	-1	1	-1	strlit	EMPTY	EMPTY
42	44	3	-1	0	-1	} ;	EMPTY	EMPTY
42	46	1	0	0	-1	static int	EMPTY	EMPTY
42	47	2	-1	0	-1	extract _ header _ length ( uint16 _ t fc )	EMPTY	EMPTY
42	48	2	-1	0	-1	{	EMPTY	EMPTY
42	49	3	-1	0	-1	int len = 0 ;	len	EMPTY
42	51	1	0	0	0	switch ( ( fc >> numconst ) & numconst ) {	EMPTY	EMPTY
42	52	2	-1	0	-1	case numconst :	EMPTY	EMPTY
42	53	2	-1	0	-1	if ( fc & ( numconst << numconst ) )	EMPTY	EMPTY
42	54	2	-1	0	-1	return - numconst ;	EMPTY	EMPTY
42	55	2	-1	0	-1	break	EMPTY	EMPTY
42	56	2	-1	0	-1	case 0x01 :	EMPTY	EMPTY
42	57	2	-1	0	-1	return - 1	EMPTY	EMPTY
42	58	2	-1	0	-1	case 0x02 :	EMPTY	EMPTY
42	59	2	-1	0	-1	len += 4	len	EMPTY
42	60	2	-1	0	-1	break	EMPTY	EMPTY
42	61	2	-1	0	-1	case 0x03 :	EMPTY	EMPTY
42	62	2	-1	0	-1	len += 10	len	EMPTY
42	63	2	-1	0	-1	break	EMPTY	EMPTY
42	64	3	-1	0	-1	}	EMPTY	EMPTY
42	66	1	0	0	0	switch ( ( fc >> numconst ) & numconst ) {	EMPTY	EMPTY
42	67	2	-1	0	-1	case numconst :	EMPTY	EMPTY
42	68	2	-1	0	-1	break ;	EMPTY	EMPTY
42	69	2	-1	0	-1	case numconst :	EMPTY	EMPTY
42	70	2	-1	0	-1	return - numconst ;	EMPTY	EMPTY
42	71	2	-1	0	-1	case numconst :	EMPTY	EMPTY
42	72	2	-1	0	-1	len += numconst ;	len	EMPTY
42	73	2	-1	0	-1	break ;	EMPTY	EMPTY
42	74	2	-1	0	-1	case numconst :	EMPTY	EMPTY
42	75	2	-1	0	-1	len += numconst ;	len	EMPTY
42	76	2	-1	0	-1	break ;	EMPTY	EMPTY
42	77	3	-1	0	-1	}	EMPTY	EMPTY
42	79	1	0	0	0	if ( fc & ( numconst << numconst ) ) {	EMPTY	EMPTY
42	80	2	-1	0	-1	if ( len < numconst )	len	EMPTY
42	81	2	-1	0	-1	return - numconst ;	EMPTY	EMPTY
42	82	2	-1	0	-1	len -= numconst ;	len	EMPTY
42	83	3	-1	0	-1	}	EMPTY	EMPTY
42	85	1	0	0	0	return len ;	len	EMPTY
42	86	3	-1	0	-1	}	EMPTY	EMPTY
42	89	1	0	0	-1	u _ int	EMPTY	EMPTY
42	90	2	-1	0	-1	ieee802 _ 15 _ 4 _ if _ print ( netdissect _ options * ndo	EMPTY	EMPTY
42	91	2	-1	0	-1	const struct pcap _ pkthdr * h  const u _ char * p )	pcap _ pkthdr	EMPTY
42	92	2	-1	0	-1	{	EMPTY	EMPTY
42	93	2	-1	0	-1	u _ int caplen = h -> caplen ;	caplen caplen	EMPTY
42	94	2	-1	0	-1	int hdrlen ;	EMPTY	EMPTY
42	95	2	-1	0	-1	uint16 _ t fc ;	EMPTY	EMPTY
42	96	3	-1	0	-1	uint8 _ t seq ;	EMPTY	EMPTY
42	98	1	0	0	0	if ( caplen < numconst ) {	caplen	EMPTY
42	99	2	-1	0	-1	nd _ print ( ( ndo  strlit  caplen ) ) ;	caplen	EMPTY
42	100	2	-1	0	-1	return caplen ;	caplen	EMPTY
42	101	3	-1	0	-1	}	EMPTY	EMPTY
42	103	1	0	0	-1	fc = extract _ le _ 16bits ( p ) ;	EMPTY	EMPTY
42	104	3	-1	0	-1	hdrlen = extract _ header _ length ( fc ) ;	EMPTY	EMPTY
42	106	1	0	0	-1	seq = extract _ le _ 8bits ( p + numconst ) ;	EMPTY	EMPTY
42	108	1	0	0	-1	p += numconst ;	EMPTY	EMPTY
42	109	3	-1	0	-1	caplen -= numconst ;	caplen	EMPTY
42	111	1	0	0	0	nd _ print ( ( ndo  strlit  ftypes [ fc & numconst ] ) ) ;	EMPTY	EMPTY
42	112	2	-1	0	-1	if ( ndo -> ndo _ vflag )	ndo _ vflag	EMPTY
42	113	2	-1	0	-1	nd _ print ( ( ndo  strlit  seq ) ) ;	EMPTY	EMPTY
42	114	2	-1	0	-1	if ( hdrlen == - numconst ) {	EMPTY	EMPTY
42	115	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
42	116	2	-1	0	-1	return caplen ;	caplen	EMPTY
42	117	3	-1	0	-1	}	EMPTY	EMPTY
42	120	1	0	0	0	if ( ! ndo -> ndo _ vflag ) {	ndo _ vflag	EMPTY
42	121	2	-1	0	-1	p += hdrlen ;	EMPTY	EMPTY
42	122	2	-1	0	-1	caplen -= hdrlen ;	caplen	EMPTY
42	123	2	-1	0	-1	} else {	EMPTY	EMPTY
42	124	3	-1	0	-1	uint16 _ t panid = numconst ;	EMPTY	EMPTY
42	126	1	0	0	0	switch ( ( fc >> numconst ) & numconst ) {	EMPTY	EMPTY
42	127	2	-1	0	-1	case numconst :	EMPTY	EMPTY
42	128	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
42	129	2	-1	0	-1	break ;	EMPTY	EMPTY
42	130	2	-1	0	-1	case numconst :	EMPTY	EMPTY
42	131	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
42	132	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
42	133	2	-1	0	-1	case numconst :	EMPTY	EMPTY
42	134	2	-1	0	-1	panid = extract _ le _ 16bits ( p ) ;	EMPTY	EMPTY
42	135	2	-1	0	-1	p += numconst ;	EMPTY	EMPTY
42	136	2	-1	0	-1	nd _ print ( ( ndo  strlit  panid  extract _ le _ 16bits ( p ) ) ) ;	EMPTY	EMPTY
42	137	2	-1	0	-1	p += numconst ;	EMPTY	EMPTY
42	138	2	-1	0	-1	break ;	EMPTY	EMPTY
42	139	2	-1	0	-1	case numconst :	EMPTY	EMPTY
42	140	2	-1	0	-1	panid = extract _ le _ 16bits ( p ) ;	EMPTY	EMPTY
42	141	2	-1	0	-1	p += numconst ;	EMPTY	EMPTY
42	142	2	-1	0	-1	nd _ print ( ( ndo  strlit  panid  le64addr _ string ( p ) ) ) ;	EMPTY	EMPTY
42	143	2	-1	0	-1	p += numconst ;	EMPTY	EMPTY
42	144	2	-1	0	-1	break ;	EMPTY	EMPTY
42	145	2	-1	0	-1	}	EMPTY	EMPTY
42	146	3	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
42	148	1	0	0	0	switch ( ( fc >> numconst ) & numconst ) {	EMPTY	EMPTY
42	149	2	-1	0	-1	case numconst :	EMPTY	EMPTY
42	150	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
42	151	2	-1	0	-1	break ;	EMPTY	EMPTY
42	152	2	-1	0	-1	case numconst :	EMPTY	EMPTY
42	153	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
42	154	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
42	155	2	-1	0	-1	case numconst :	EMPTY	EMPTY
42	156	2	-1	0	-1	if ( ! ( fc & ( numconst << numconst ) ) ) {	EMPTY	EMPTY
42	157	2	-1	0	-1	panid = extract _ le _ 16bits ( p ) ;	EMPTY	EMPTY
42	158	2	-1	0	-1	p += numconst ;	EMPTY	EMPTY
42	159	2	-1	0	-1	}	EMPTY	EMPTY
42	160	2	-1	0	-1	nd _ print ( ( ndo  strlit  panid  extract _ le _ 16bits ( p ) ) ) ;	EMPTY	EMPTY
42	161	2	-1	0	-1	p += numconst ;	EMPTY	EMPTY
42	162	2	-1	0	-1	break ;	EMPTY	EMPTY
42	163	2	-1	0	-1	case numconst :	EMPTY	EMPTY
42	164	2	-1	0	-1	if ( ! ( fc & ( numconst << numconst ) ) ) {	EMPTY	EMPTY
42	165	2	-1	0	-1	panid = extract _ le _ 16bits ( p ) ;	EMPTY	EMPTY
42	166	2	-1	0	-1	p += numconst ;	EMPTY	EMPTY
42	167	2	-1	0	-1	}	EMPTY	EMPTY
42	168	2	-1	0	-1	nd _ print ( ( ndo  strlit  panid  le64addr _ string ( p ) ) ) ;	EMPTY	EMPTY
42	169	2	-1	0	-1	p += numconst ;	EMPTY	EMPTY
42	170	2	-1	0	-1	break ;	EMPTY	EMPTY
42	171	3	-1	0	-1	}	EMPTY	EMPTY
42	173	1	0	0	-1	caplen -= hdrlen ;	caplen	EMPTY
42	174	3	-1	0	-1	}	EMPTY	EMPTY
42	176	1	0	0	0	if ( ! ndo -> ndo _ suppress _ default _ print )	ndo _ suppress _ default _ print	EMPTY
42	177	3	-1	0	-1	nd _ defaultprint ( p  caplen ) ;	caplen	EMPTY
42	179	1	0	0	0	return numconst ;	EMPTY	EMPTY
42	180	3	-1	0	-1	}	EMPTY	EMPTY
52	73	1	0	0	-1	static const struct tok isis _ pdu _ values [ ] = {	EMPTY	EMPTY
52	74	2	-1	0	-1	{ isis _ pdu _ l1 _ lan _ iih  strlit }	EMPTY	EMPTY
52	75	2	-1	0	-1	{ isis _ pdu _ l2 _ lan _ iih  strlit }	EMPTY	EMPTY
52	76	2	-1	0	-1	{ isis _ pdu _ ptp _ iih  strlit }	EMPTY	EMPTY
52	77	2	-1	0	-1	{ isis _ pdu _ l1 _ lsp  strlit }	EMPTY	EMPTY
52	78	2	-1	0	-1	{ isis _ pdu _ l2 _ lsp  strlit }	EMPTY	EMPTY
52	79	2	-1	0	-1	{ isis _ pdu _ l1 _ csnp  strlit }	EMPTY	EMPTY
52	80	2	-1	0	-1	{ isis _ pdu _ l2 _ csnp  strlit }	EMPTY	EMPTY
52	81	2	-1	0	-1	{ isis _ pdu _ l1 _ psnp  strlit }	EMPTY	EMPTY
52	82	2	-1	0	-1	{ isis _ pdu _ l2 _ psnp  strlit }	EMPTY	EMPTY
52	83	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	84	3	-1	0	-1	} ;	EMPTY	EMPTY
52	94	1	1	1	-1	# define isis _ tlv _ area _ addr numconst	EMPTY	EMPTY
52	95	2	-1	1	-1	# define isis _ tlv _ is _ reach numconst	EMPTY	EMPTY
52	96	2	-1	1	-1	# define isis _ tlv _ esneigh numconst	EMPTY	EMPTY
52	97	2	-1	1	-1	# define isis _ tlv _ part _ dis numconst	EMPTY	EMPTY
52	98	2	-1	1	-1	# define isis _ tlv _ prefix _ neigh numconst	EMPTY	EMPTY
52	99	2	-1	1	-1	# define isis _ tlv _ isneigh numconst	EMPTY	EMPTY
52	100	2	-1	1	-1	# define isis _ tlv _ isneigh _ varlen numconst	EMPTY	EMPTY
52	101	2	-1	1	-1	# define isis _ tlv _ padding numconst	EMPTY	EMPTY
52	102	2	-1	1	-1	# define isis _ tlv _ lsp numconst	EMPTY	EMPTY
52	103	2	-1	1	-1	# define isis _ tlv _ auth numconst	EMPTY	EMPTY
52	104	2	-1	1	-1	# define isis _ tlv _ checksum numconst	EMPTY	EMPTY
52	105	2	-1	0	-1	# define isis _ tlv _ checksum _ minlen numconst	EMPTY	EMPTY
52	106	2	-1	1	-1	# define isis _ tlv _ lsp _ buffersize numconst	EMPTY	EMPTY
52	107	2	-1	0	-1	# define isis _ tlv _ lsp _ buffersize _ minlen numconst	EMPTY	EMPTY
52	108	2	-1	1	-1	# define isis _ tlv _ ext _ is _ reach numconst	EMPTY	EMPTY
52	109	2	-1	1	-1	# define isis _ tlv _ is _ alias _ id numconst	EMPTY	EMPTY
52	110	2	-1	0	-1	# define isis _ tlv _ decnet _ phase4 numconst	EMPTY	EMPTY
52	111	2	-1	0	-1	# define isis _ tlv _ lucent _ private numconst	EMPTY	EMPTY
52	112	2	-1	1	-1	# define isis _ tlv _ int _ ip _ reach numconst	EMPTY	EMPTY
52	113	2	-1	1	-1	# define isis _ tlv _ protocols numconst	EMPTY	EMPTY
52	114	2	-1	1	-1	# define isis _ tlv _ ext _ ip _ reach numconst	EMPTY	EMPTY
52	115	2	-1	1	-1	# define isis _ tlv _ idrp _ info numconst	EMPTY	EMPTY
52	116	2	-1	0	-1	# define isis _ tlv _ idrp _ info _ minlen numconst	EMPTY	EMPTY
52	117	2	-1	1	-1	# define isis _ tlv _ ipaddr numconst	EMPTY	EMPTY
52	118	2	-1	1	-1	# define isis _ tlv _ ipauth numconst	EMPTY	EMPTY
52	119	2	-1	1	-1	# define isis _ tlv _ te _ router _ id numconst	EMPTY	EMPTY
52	120	2	-1	1	-1	# define isis _ tlv _ extd _ ip _ reach numconst	EMPTY	EMPTY
52	121	2	-1	1	-1	# define isis _ tlv _ hostname numconst	EMPTY	EMPTY
52	122	2	-1	1	-1	# define isis _ tlv _ shared _ risk _ group numconst	EMPTY	EMPTY
52	123	3	-1	1	-1	# define isis _ tlv _ mt _ port _ cap numconst	EMPTY	EMPTY
52	124	1	1	1	-1	# define isis _ tlv _ mt _ capability numconst	EMPTY	EMPTY
52	125	2	-1	0	-1	# define isis _ tlv _ nortel _ private1 numconst	EMPTY	EMPTY
52	126	2	-1	0	-1	# define isis _ tlv _ nortel _ private2 numconst	EMPTY	EMPTY
52	127	2	-1	1	-1	# define isis _ tlv _ restart _ signaling numconst	EMPTY	EMPTY
52	128	2	-1	0	-1	# define isis _ tlv _ restart _ signaling _ flaglen numconst	EMPTY	EMPTY
52	129	2	-1	0	-1	# define isis _ tlv _ restart _ signaling _ holdtimelen numconst	EMPTY	EMPTY
52	130	2	-1	1	-1	# define isis _ tlv _ mt _ is _ reach numconst	EMPTY	EMPTY
52	131	2	-1	1	-1	# define isis _ tlv _ mt _ supported numconst	EMPTY	EMPTY
52	132	2	-1	0	-1	# define isis _ tlv _ mt _ supported _ minlen numconst	EMPTY	EMPTY
52	133	2	-1	1	-1	# define isis _ tlv _ ip6addr numconst	EMPTY	EMPTY
52	134	2	-1	1	-1	# define isis _ tlv _ mt _ ip _ reach numconst	EMPTY	EMPTY
52	135	2	-1	1	-1	# define isis _ tlv _ ip6 _ reach numconst	EMPTY	EMPTY
52	136	2	-1	1	-1	# define isis _ tlv _ mt _ ip6 _ reach numconst	EMPTY	EMPTY
52	137	2	-1	1	-1	# define isis _ tlv _ ptp _ adj numconst	EMPTY	EMPTY
52	138	2	-1	1	-1	# define isis _ tlv _ iih _ seqnr numconst	EMPTY	EMPTY
52	139	2	-1	0	-1	# define isis _ tlv _ iih _ seqnr _ minlen numconst	EMPTY	EMPTY
52	140	2	-1	1	-1	# define isis _ tlv _ vendor _ private numconst	EMPTY	EMPTY
52	141	3	-1	0	-1	# define isis _ tlv _ vendor _ private _ minlen numconst	EMPTY	EMPTY
52	143	1	0	0	-1	static const struct tok isis _ tlv _ values [ ] = {	EMPTY	EMPTY
52	144	2	-1	0	-1	{ isis _ tlv _ area _ addr  strlit }	EMPTY	EMPTY
52	145	2	-1	0	-1	{ isis _ tlv _ is _ reach  strlit }	EMPTY	EMPTY
52	146	2	-1	0	-1	{ isis _ tlv _ esneigh  strlit }	EMPTY	EMPTY
52	147	2	-1	0	-1	{ isis _ tlv _ part _ dis  strlit }	EMPTY	EMPTY
52	148	2	-1	0	-1	{ isis _ tlv _ prefix _ neigh  strlit }	EMPTY	EMPTY
52	149	2	-1	0	-1	{ isis _ tlv _ isneigh  strlit }	EMPTY	EMPTY
52	150	2	-1	0	-1	{ isis _ tlv _ isneigh _ varlen  strlit }	EMPTY	EMPTY
52	151	2	-1	0	-1	{ isis _ tlv _ padding  strlit }	EMPTY	EMPTY
52	152	2	-1	0	-1	{ isis _ tlv _ lsp  strlit }	EMPTY	EMPTY
52	153	2	-1	0	-1	{ isis _ tlv _ auth  strlit }	EMPTY	EMPTY
52	154	2	-1	0	-1	{ isis _ tlv _ checksum  strlit }	EMPTY	EMPTY
52	155	2	-1	0	-1	{ isis _ tlv _ lsp _ buffersize  strlit }	EMPTY	EMPTY
52	156	2	-1	0	-1	{ isis _ tlv _ ext _ is _ reach  strlit }	EMPTY	EMPTY
52	157	2	-1	0	-1	{ isis _ tlv _ is _ alias _ id  strlit }	EMPTY	EMPTY
52	158	2	-1	0	-1	{ isis _ tlv _ decnet _ phase4  strlit }	EMPTY	EMPTY
52	159	2	-1	0	-1	{ isis _ tlv _ lucent _ private  strlit }	EMPTY	EMPTY
52	160	2	-1	0	-1	{ isis _ tlv _ int _ ip _ reach  strlit }	EMPTY	EMPTY
52	161	2	-1	0	-1	{ isis _ tlv _ protocols  strlit }	EMPTY	EMPTY
52	162	2	-1	0	-1	{ isis _ tlv _ ext _ ip _ reach  strlit }	EMPTY	EMPTY
52	163	2	-1	0	-1	{ isis _ tlv _ idrp _ info  strlit }	EMPTY	EMPTY
52	164	2	-1	0	-1	{ isis _ tlv _ ipaddr  strlit }	EMPTY	EMPTY
52	165	2	-1	0	-1	{ isis _ tlv _ ipauth  strlit }	EMPTY	EMPTY
52	166	2	-1	0	-1	{ isis _ tlv _ te _ router _ id  strlit }	EMPTY	EMPTY
52	167	2	-1	0	-1	{ isis _ tlv _ extd _ ip _ reach  strlit }	EMPTY	EMPTY
52	168	2	-1	0	-1	{ isis _ tlv _ shared _ risk _ group  strlit }	EMPTY	EMPTY
52	169	2	-1	0	-1	{ isis _ tlv _ mt _ port _ cap  strlit }	EMPTY	EMPTY
52	170	2	-1	0	-1	{ isis _ tlv _ mt _ capability  strlit }	EMPTY	EMPTY
52	171	2	-1	0	-1	{ isis _ tlv _ nortel _ private1  strlit }	EMPTY	EMPTY
52	172	3	-1	0	-1	{ isis _ tlv _ nortel _ private2  strlit }	EMPTY	EMPTY
52	173	1	0	0	-1	{ isis _ tlv _ hostname  strlit }	EMPTY	EMPTY
52	174	2	-1	0	-1	{ isis _ tlv _ restart _ signaling  strlit }	EMPTY	EMPTY
52	175	2	-1	0	-1	{ isis _ tlv _ mt _ is _ reach  strlit }	EMPTY	EMPTY
52	176	2	-1	0	-1	{ isis _ tlv _ mt _ supported  strlit }	EMPTY	EMPTY
52	177	2	-1	0	-1	{ isis _ tlv _ ip6addr  strlit }	EMPTY	EMPTY
52	178	2	-1	0	-1	{ isis _ tlv _ mt _ ip _ reach  strlit }	EMPTY	EMPTY
52	179	2	-1	0	-1	{ isis _ tlv _ ip6 _ reach  strlit }	EMPTY	EMPTY
52	180	2	-1	0	-1	{ isis _ tlv _ mt _ ip6 _ reach  strlit }	EMPTY	EMPTY
52	181	2	-1	0	-1	{ isis _ tlv _ ptp _ adj  strlit }	EMPTY	EMPTY
52	182	2	-1	0	-1	{ isis _ tlv _ iih _ seqnr  strlit }	EMPTY	EMPTY
52	183	2	-1	0	-1	{ isis _ tlv _ vendor _ private  strlit }	EMPTY	EMPTY
52	184	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	185	3	-1	0	-1	} ;	EMPTY	EMPTY
52	187	1	1	0	-1	# define esis _ option _ protocols numconst	EMPTY	EMPTY
52	188	2	-1	1	-1	# define esis _ option _ qos _ maintenance numconst	EMPTY	EMPTY
52	189	2	-1	1	-1	# define esis _ option _ security numconst	EMPTY	EMPTY
52	190	2	-1	1	-1	# define esis _ option _ es _ conf _ time numconst	EMPTY	EMPTY
52	191	2	-1	1	-1	# define esis _ option _ priority numconst	EMPTY	EMPTY
52	192	2	-1	1	-1	# define esis _ option _ address _ mask numconst	EMPTY	EMPTY
52	193	3	-1	1	-1	# define esis _ option _ snpa _ mask numconst	EMPTY	EMPTY
52	195	1	0	0	-1	static const struct tok esis _ option _ values [ ] = {	EMPTY	EMPTY
52	196	2	-1	0	-1	{ esis _ option _ protocols  strlit }	EMPTY	EMPTY
52	197	2	-1	0	-1	{ esis _ option _ qos _ maintenance  strlit }	EMPTY	EMPTY
52	198	2	-1	0	-1	{ esis _ option _ security  strlit }	EMPTY	EMPTY
52	199	2	-1	0	-1	{ esis _ option _ es _ conf _ time  strlit }	EMPTY	EMPTY
52	200	2	-1	0	-1	{ esis _ option _ priority  strlit }	EMPTY	EMPTY
52	201	2	-1	0	-1	{ esis _ option _ address _ mask  strlit }	EMPTY	EMPTY
52	202	2	-1	0	-1	{ esis _ option _ snpa _ mask  strlit }	EMPTY	EMPTY
52	203	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	204	3	-1	0	-1	} ;	EMPTY	EMPTY
52	206	1	1	0	-1	# define clnp _ option _ discard _ reason numconst	EMPTY	EMPTY
52	207	2	-1	1	-1	# define clnp _ option _ qos _ maintenance numconst	EMPTY	EMPTY
52	208	2	-1	1	-1	# define clnp _ option _ security numconst	EMPTY	EMPTY
52	209	2	-1	1	-1	# define clnp _ option _ source _ routing numconst	EMPTY	EMPTY
52	210	2	-1	1	-1	# define clnp _ option _ route _ recording numconst	EMPTY	EMPTY
52	211	2	-1	1	-1	# define clnp _ option _ padding numconst	EMPTY	EMPTY
52	212	3	-1	1	-1	# define clnp _ option _ priority numconst	EMPTY	EMPTY
52	214	1	0	0	-1	static const struct tok clnp _ option _ values [ ] = {	EMPTY	EMPTY
52	215	2	-1	0	-1	{ clnp _ option _ discard _ reason  strlit }	EMPTY	EMPTY
52	216	2	-1	0	-1	{ clnp _ option _ priority  strlit }	EMPTY	EMPTY
52	217	2	-1	0	-1	{ clnp _ option _ qos _ maintenance  strlit }	EMPTY	EMPTY
52	218	2	-1	0	-1	{ clnp _ option _ security  strlit }	EMPTY	EMPTY
52	219	2	-1	0	-1	{ clnp _ option _ source _ routing  strlit }	EMPTY	EMPTY
52	220	2	-1	0	-1	{ clnp _ option _ route _ recording  strlit }	EMPTY	EMPTY
52	221	2	-1	0	-1	{ clnp _ option _ padding  strlit }	EMPTY	EMPTY
52	222	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	223	3	-1	0	-1	} ;	EMPTY	EMPTY
52	225	1	0	0	-1	static const struct tok clnp _ option _ rfd _ class _ values [ ] = {	EMPTY	EMPTY
52	226	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	227	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	228	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	229	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	230	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	231	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	232	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	233	3	-1	0	-1	} ;	EMPTY	EMPTY
52	235	1	0	0	-1	static const struct tok clnp _ option _ rfd _ general _ values [ ] = {	EMPTY	EMPTY
52	236	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	237	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	238	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	239	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	240	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	241	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	242	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	243	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	244	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	245	3	-1	0	-1	} ;	EMPTY	EMPTY
52	247	1	0	0	-1	static const struct tok clnp _ option _ rfd _ address _ values [ ] = {	EMPTY	EMPTY
52	248	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	249	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	250	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	251	3	-1	0	-1	} ;	EMPTY	EMPTY
52	253	1	0	0	-1	static const struct tok clnp _ option _ rfd _ source _ routeing _ values [ ] = {	EMPTY	EMPTY
52	254	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	255	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	256	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	257	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	258	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	259	3	-1	0	-1	} ;	EMPTY	EMPTY
52	261	1	0	0	-1	static const struct tok clnp _ option _ rfd _ lifetime _ values [ ] = {	EMPTY	EMPTY
52	262	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	263	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	264	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	265	3	-1	0	-1	} ;	EMPTY	EMPTY
52	267	1	0	0	-1	static const struct tok clnp _ option _ rfd _ pdu _ discard _ values [ ] = {	EMPTY	EMPTY
52	268	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	269	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	270	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	271	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	272	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	273	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	274	3	-1	0	-1	} ;	EMPTY	EMPTY
52	276	1	0	0	-1	static const struct tok clnp _ option _ rfd _ reassembly _ values [ ] = {	EMPTY	EMPTY
52	277	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	278	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	279	3	-1	0	-1	} ;	EMPTY	EMPTY
52	282	1	0	0	-1	static const struct tok * clnp _ option _ rfd _ error _ class [ ] = {	clnp _ option _ rfd _ error _ class	EMPTY
52	283	2	-1	0	-1	clnp _ option _ rfd _ general _ values	EMPTY	EMPTY
52	284	2	-1	0	-1	null	EMPTY	EMPTY
52	285	2	-1	0	-1	null	EMPTY	EMPTY
52	286	2	-1	0	-1	null	EMPTY	EMPTY
52	287	2	-1	0	-1	null	EMPTY	EMPTY
52	288	2	-1	0	-1	null	EMPTY	EMPTY
52	289	2	-1	0	-1	null	EMPTY	EMPTY
52	290	2	-1	0	-1	null	EMPTY	EMPTY
52	291	2	-1	0	-1	clnp _ option _ rfd _ address _ values	EMPTY	EMPTY
52	292	2	-1	0	-1	clnp _ option _ rfd _ source _ routeing _ values	EMPTY	EMPTY
52	293	2	-1	0	-1	clnp _ option _ rfd _ lifetime _ values	EMPTY	EMPTY
52	294	2	-1	0	-1	clnp _ option _ rfd _ pdu _ discard _ values	EMPTY	EMPTY
52	295	2	-1	0	-1	clnp _ option _ rfd _ reassembly _ values	EMPTY	EMPTY
52	296	2	-1	0	-1	null	EMPTY	EMPTY
52	297	2	-1	0	-1	null	EMPTY	EMPTY
52	298	2	-1	0	-1	null	EMPTY	EMPTY
52	299	3	-1	0	-1	} ;	EMPTY	EMPTY
52	301	1	0	0	-1	# define clnp _ option _ option _ qos _ mask numconst	EMPTY	EMPTY
52	302	2	-1	0	-1	# define clnp _ option _ scope _ mask numconst	EMPTY	EMPTY
52	303	2	-1	0	-1	# define clnp _ option _ scope _ sa _ spec numconst	EMPTY	EMPTY
52	304	2	-1	0	-1	# define clnp _ option _ scope _ da _ spec numconst	EMPTY	EMPTY
52	305	3	-1	0	-1	# define clnp _ option _ scope _ global numconst	EMPTY	EMPTY
52	307	1	0	0	-1	static const struct tok clnp _ option _ scope _ values [ ] = {	EMPTY	EMPTY
52	308	2	-1	0	-1	{ clnp _ option _ scope _ sa _ spec  strlit }	EMPTY	EMPTY
52	309	2	-1	0	-1	{ clnp _ option _ scope _ da _ spec  strlit }	EMPTY	EMPTY
52	310	2	-1	0	-1	{ clnp _ option _ scope _ global  strlit }	EMPTY	EMPTY
52	311	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	312	3	-1	0	-1	} ;	EMPTY	EMPTY
52	314	1	0	0	-1	static const struct tok clnp _ option _ sr _ rr _ values [ ] = {	EMPTY	EMPTY
52	315	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	316	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	317	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	318	3	-1	0	-1	} ;	EMPTY	EMPTY
52	320	1	0	0	-1	static const struct tok clnp _ option _ sr _ rr _ string _ values [ ] = {	EMPTY	EMPTY
52	321	2	-1	0	-1	{ clnp _ option _ source _ routing  strlit }	EMPTY	EMPTY
52	322	2	-1	0	-1	{ clnp _ option _ route _ recording  strlit }	EMPTY	EMPTY
52	323	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	324	3	-1	0	-1	} ;	EMPTY	EMPTY
52	326	1	0	0	-1	static const struct tok clnp _ option _ qos _ global _ values [ ] = {	EMPTY	EMPTY
52	327	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	328	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	329	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	330	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	331	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	332	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	333	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	334	3	-1	0	-1	} ;	EMPTY	EMPTY
52	336	1	1	1	-1	# define isis _ subtlv _ ext _ is _ reach _ admin _ group numconst	EMPTY	EMPTY
52	337	2	-1	1	-1	# define isis _ subtlv _ ext _ is _ reach _ link _ local _ remote _ id numconst	EMPTY	EMPTY
52	338	2	-1	1	-1	# define isis _ subtlv _ ext _ is _ reach _ link _ remote _ id numconst	EMPTY	EMPTY
52	339	2	-1	1	-1	# define isis _ subtlv _ ext _ is _ reach _ ipv4 _ intf _ addr numconst	EMPTY	EMPTY
52	340	2	-1	1	-1	# define isis _ subtlv _ ext _ is _ reach _ ipv4 _ neighbor _ addr numconst	EMPTY	EMPTY
52	341	2	-1	1	-1	# define isis _ subtlv _ ext _ is _ reach _ max _ link _ bw numconst	EMPTY	EMPTY
52	342	2	-1	1	-1	# define isis _ subtlv _ ext _ is _ reach _ reservable _ bw numconst	EMPTY	EMPTY
52	343	2	-1	1	-1	# define isis _ subtlv _ ext _ is _ reach _ unreserved _ bw numconst	EMPTY	EMPTY
52	344	2	-1	1	-1	# define isis _ subtlv _ ext _ is _ reach _ bw _ constraints _ old numconst	EMPTY	EMPTY
52	345	2	-1	1	-1	# define isis _ subtlv _ ext _ is _ reach _ te _ metric numconst	EMPTY	EMPTY
52	346	2	-1	1	-1	# define isis _ subtlv _ ext _ is _ reach _ link _ attribute numconst	EMPTY	EMPTY
52	347	2	-1	1	-1	# define isis _ subtlv _ ext _ is _ reach _ link _ protection _ type numconst	EMPTY	EMPTY
52	348	2	-1	1	-1	# define isis _ subtlv _ ext _ is _ reach _ intf _ sw _ cap _ descr numconst	EMPTY	EMPTY
52	349	3	-1	1	-1	# define isis _ subtlv _ ext _ is _ reach _ bw _ constraints numconst	EMPTY	EMPTY
52	351	1	1	1	-1	# define isis _ subtlv _ spb _ metric numconst	EMPTY	EMPTY
52	353	1	0	0	-1	static const struct tok isis _ ext _ is _ reach _ subtlv _ values [ ] = {	EMPTY	EMPTY
52	354	2	-1	0	-1	{ isis _ subtlv _ ext _ is _ reach _ admin _ group  strlit }	EMPTY	EMPTY
52	355	2	-1	0	-1	{ isis _ subtlv _ ext _ is _ reach _ link _ local _ remote _ id  strlit }	EMPTY	EMPTY
52	356	2	-1	0	-1	{ isis _ subtlv _ ext _ is _ reach _ link _ remote _ id  strlit }	EMPTY	EMPTY
52	357	2	-1	0	-1	{ isis _ subtlv _ ext _ is _ reach _ ipv4 _ intf _ addr  strlit }	EMPTY	EMPTY
52	358	2	-1	0	-1	{ isis _ subtlv _ ext _ is _ reach _ ipv4 _ neighbor _ addr  strlit }	EMPTY	EMPTY
52	359	2	-1	0	-1	{ isis _ subtlv _ ext _ is _ reach _ max _ link _ bw  strlit }	EMPTY	EMPTY
52	360	2	-1	0	-1	{ isis _ subtlv _ ext _ is _ reach _ reservable _ bw  strlit }	EMPTY	EMPTY
52	361	2	-1	0	-1	{ isis _ subtlv _ ext _ is _ reach _ unreserved _ bw  strlit }	EMPTY	EMPTY
52	362	2	-1	0	-1	{ isis _ subtlv _ ext _ is _ reach _ te _ metric  strlit }	EMPTY	EMPTY
52	363	2	-1	0	-1	{ isis _ subtlv _ ext _ is _ reach _ link _ attribute  strlit }	EMPTY	EMPTY
52	364	2	-1	0	-1	{ isis _ subtlv _ ext _ is _ reach _ link _ protection _ type  strlit }	EMPTY	EMPTY
52	365	2	-1	0	-1	{ isis _ subtlv _ ext _ is _ reach _ intf _ sw _ cap _ descr  strlit }	EMPTY	EMPTY
52	366	2	-1	0	-1	{ isis _ subtlv _ ext _ is _ reach _ bw _ constraints _ old  strlit }	EMPTY	EMPTY
52	367	2	-1	0	-1	{ isis _ subtlv _ ext _ is _ reach _ bw _ constraints  strlit }	EMPTY	EMPTY
52	368	2	-1	0	-1	{ isis _ subtlv _ spb _ metric  strlit }	EMPTY	EMPTY
52	369	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	370	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	371	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	372	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	373	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	374	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	375	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	376	3	-1	0	-1	} ;	EMPTY	EMPTY
52	378	1	1	1	-1	# define isis _ subtlv _ extd _ ip _ reach _ admin _ tag32 numconst	EMPTY	EMPTY
52	379	2	-1	1	-1	# define isis _ subtlv _ extd _ ip _ reach _ admin _ tag64 numconst	EMPTY	EMPTY
52	380	3	-1	1	-1	# define isis _ subtlv _ extd _ ip _ reach _ mgmt _ prefix _ color numconst	EMPTY	EMPTY
52	382	1	0	0	-1	static const struct tok isis _ ext _ ip _ reach _ subtlv _ values [ ] = {	EMPTY	EMPTY
52	383	2	-1	0	-1	{ isis _ subtlv _ extd _ ip _ reach _ admin _ tag32  strlit }	EMPTY	EMPTY
52	384	2	-1	0	-1	{ isis _ subtlv _ extd _ ip _ reach _ admin _ tag64  strlit }	EMPTY	EMPTY
52	385	2	-1	0	-1	{ isis _ subtlv _ extd _ ip _ reach _ mgmt _ prefix _ color  strlit }	EMPTY	EMPTY
52	386	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	387	3	-1	0	-1	} ;	EMPTY	EMPTY
52	389	1	0	0	-1	static const struct tok isis _ subtlv _ link _ attribute _ values [ ] = {	EMPTY	EMPTY
52	390	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	391	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	392	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	393	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	394	3	-1	0	-1	} ;	EMPTY	EMPTY
52	396	1	1	0	-1	# define isis _ subtlv _ auth _ simple numconst	EMPTY	EMPTY
52	397	2	-1	1	-1	# define isis _ subtlv _ auth _ generic numconst	EMPTY	EMPTY
52	398	2	-1	0	-1	# define isis _ subtlv _ auth _ md5 numconst	EMPTY	EMPTY
52	399	2	-1	0	-1	# define isis _ subtlv _ auth _ md5 _ len numconst	EMPTY	EMPTY
52	400	3	-1	0	-1	# define isis _ subtlv _ auth _ private numconst	EMPTY	EMPTY
52	402	1	0	0	-1	static const struct tok isis _ subtlv _ auth _ values [ ] = {	EMPTY	EMPTY
52	403	2	-1	0	-1	{ isis _ subtlv _ auth _ simple  strlit }	EMPTY	EMPTY
52	404	2	-1	0	-1	{ isis _ subtlv _ auth _ generic  strlit }	EMPTY	EMPTY
52	405	2	-1	0	-1	{ isis _ subtlv _ auth _ md5  strlit }	EMPTY	EMPTY
52	406	2	-1	0	-1	{ isis _ subtlv _ auth _ private  strlit }	EMPTY	EMPTY
52	407	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	408	3	-1	0	-1	} ;	EMPTY	EMPTY
52	410	1	0	0	-1	# define isis _ subtlv _ idrp _ res numconst	EMPTY	EMPTY
52	411	2	-1	0	-1	# define isis _ subtlv _ idrp _ local numconst	EMPTY	EMPTY
52	412	3	-1	0	-1	# define isis _ subtlv _ idrp _ asn numconst	EMPTY	EMPTY
52	414	1	0	0	-1	static const struct tok isis _ subtlv _ idrp _ values [ ] = {	EMPTY	EMPTY
52	415	2	-1	0	-1	{ isis _ subtlv _ idrp _ res  strlit }	EMPTY	EMPTY
52	416	2	-1	0	-1	{ isis _ subtlv _ idrp _ local  strlit }	EMPTY	EMPTY
52	417	2	-1	0	-1	{ isis _ subtlv _ idrp _ asn  strlit }	EMPTY	EMPTY
52	418	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	419	3	-1	0	-1	} ;	EMPTY	EMPTY
52	421	1	0	0	-1	# define isis _ subtlv _ spb _ mcid numconst	EMPTY	EMPTY
52	422	2	-1	0	-1	# define isis _ subtlv _ spb _ digest numconst	EMPTY	EMPTY
52	423	3	-1	0	-1	# define isis _ subtlv _ spb _ bvid numconst	EMPTY	EMPTY
52	425	1	0	0	-1	# define isis _ subtlv _ spb _ instance numconst	EMPTY	EMPTY
52	426	3	-1	0	-1	# define isis _ subtlv _ spbm _ si numconst	EMPTY	EMPTY
52	428	1	0	0	-1	# define isis _ spb _ mcid _ len numconst	EMPTY	EMPTY
52	429	2	-1	0	-1	# define isis _ subtlv _ spb _ mcid _ min _ len numconst	EMPTY	EMPTY
52	430	2	-1	0	-1	# define isis _ subtlv _ spb _ digest _ min _ len numconst	EMPTY	EMPTY
52	431	2	-1	0	-1	# define isis _ subtlv _ spb _ bvid _ min _ len numconst	EMPTY	EMPTY
52	432	2	-1	0	-1	# define isis _ subtlv _ spb _ instance _ min _ len numconst	EMPTY	EMPTY
52	433	3	-1	0	-1	# define isis _ subtlv _ spb _ instance _ vlan _ tuple _ len numconst	EMPTY	EMPTY
52	435	1	0	0	-1	static const struct tok isis _ mt _ port _ cap _ subtlv _ values [ ] = {	EMPTY	EMPTY
52	436	2	-1	0	-1	{ isis _ subtlv _ spb _ mcid  strlit }	EMPTY	EMPTY
52	437	2	-1	0	-1	{ isis _ subtlv _ spb _ digest  strlit }	EMPTY	EMPTY
52	438	2	-1	0	-1	{ isis _ subtlv _ spb _ bvid  strlit }	EMPTY	EMPTY
52	439	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	440	3	-1	0	-1	} ;	EMPTY	EMPTY
52	442	1	0	0	-1	static const struct tok isis _ mt _ capability _ subtlv _ values [ ] = {	EMPTY	EMPTY
52	443	2	-1	0	-1	{ isis _ subtlv _ spb _ instance  strlit }	EMPTY	EMPTY
52	444	2	-1	0	-1	{ isis _ subtlv _ spbm _ si  strlit }	EMPTY	EMPTY
52	445	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	446	3	-1	0	-1	} ;	EMPTY	EMPTY
52	448	1	0	0	-1	struct isis _ spb _ mcid {	EMPTY	EMPTY
52	449	2	-1	0	-1	uint8 _ t format _ id ;	EMPTY	EMPTY
52	450	2	-1	0	-1	uint8 _ t name [ numconst ] ;	name	EMPTY
52	451	2	-1	0	-1	uint8 _ t revision _ lvl [ numconst ] ;	EMPTY	EMPTY
52	452	2	-1	0	-1	uint8 _ t digest [ numconst ] ;	EMPTY	EMPTY
52	453	3	-1	0	-1	} ;	EMPTY	EMPTY
52	455	1	0	0	-1	struct isis _ subtlv _ spb _ mcid {	EMPTY	EMPTY
52	456	2	-1	0	-1	struct isis _ spb _ mcid mcid ;	EMPTY	EMPTY
52	457	2	-1	0	-1	struct isis _ spb _ mcid aux _ mcid ;	EMPTY	EMPTY
52	458	3	-1	0	-1	} ;	EMPTY	EMPTY
52	460	1	0	0	-1	struct isis _ subtlv _ spb _ instance {	EMPTY	EMPTY
52	461	2	-1	0	-1	uint8 _ t cist _ root _ id [ numconst ] ;	EMPTY	EMPTY
52	462	2	-1	0	-1	uint8 _ t cist _ external _ root _ path _ cost [ numconst ] ;	EMPTY	EMPTY
52	463	2	-1	0	-1	uint8 _ t bridge _ priority [ numconst ] ;	EMPTY	EMPTY
52	464	2	-1	0	-1	uint8 _ t spsourceid [ numconst ] ;	EMPTY	EMPTY
52	465	2	-1	0	-1	uint8 _ t no _ of _ trees ;	EMPTY	EMPTY
52	466	3	-1	0	-1	} ;	EMPTY	EMPTY
52	468	1	0	0	-1	# define clnp _ segment _ part numconst	EMPTY	EMPTY
52	469	2	-1	0	-1	# define clnp _ more _ segments numconst	EMPTY	EMPTY
52	470	3	-1	0	-1	# define clnp _ request _ er numconst	EMPTY	EMPTY
52	472	1	0	0	-1	static const struct tok clnp _ flag _ values [ ] = {	EMPTY	EMPTY
52	473	2	-1	0	-1	{ clnp _ segment _ part  strlit }	EMPTY	EMPTY
52	474	2	-1	0	-1	{ clnp _ more _ segments  strlit }	EMPTY	EMPTY
52	475	2	-1	0	-1	{ clnp _ request _ er  strlit }	EMPTY	EMPTY
52	476	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	477	3	-1	0	-1	} ;	EMPTY	EMPTY
52	479	1	0	0	-1	# define isis _ mask _ lsp _ ol _ bit ( x ) ( ( x ) & numconst )	EMPTY	EMPTY
52	480	2	-1	0	-1	# define isis _ mask _ lsp _ istype _ bits ( x ) ( ( x ) & numconst )	EMPTY	EMPTY
52	481	2	-1	0	-1	# define isis _ mask _ lsp _ partition _ bit ( x ) ( ( x ) & numconst )	EMPTY	EMPTY
52	482	2	-1	0	-1	# define isis _ mask _ lsp _ att _ bits ( x ) ( ( x ) & numconst )	EMPTY	EMPTY
52	483	2	-1	0	-1	# define isis _ mask _ lsp _ att _ error _ bit ( x ) ( ( x ) & numconst )	EMPTY	EMPTY
52	484	2	-1	0	-1	# define isis _ mask _ lsp _ att _ expense _ bit ( x ) ( ( x ) & numconst )	EMPTY	EMPTY
52	485	2	-1	0	-1	# define isis _ mask _ lsp _ att _ delay _ bit ( x ) ( ( x ) & numconst )	EMPTY	EMPTY
52	486	3	-1	0	-1	# define isis _ mask _ lsp _ att _ default _ bit ( x ) ( ( x ) & numconst )	EMPTY	EMPTY
52	488	1	0	0	-1	# define isis _ mask _ mtid ( x ) ( ( x ) & numconst )	EMPTY	EMPTY
52	489	3	-1	0	-1	# define isis _ mask _ mtflags ( x ) ( ( x ) & numconst )	EMPTY	EMPTY
52	491	1	0	0	-1	static const struct tok isis _ mt _ flag _ values [ ] = {	EMPTY	EMPTY
52	492	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	493	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	494	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	495	3	-1	0	-1	} ;	EMPTY	EMPTY
52	497	1	0	0	-1	# define isis _ mask _ tlv _ extd _ ip _ updown ( x ) ( ( x ) & numconst )	EMPTY	EMPTY
52	498	3	-1	0	-1	# define isis _ mask _ tlv _ extd _ ip _ subtlv ( x ) ( ( x ) & numconst )	EMPTY	EMPTY
52	500	1	0	0	-1	# define isis _ mask _ tlv _ extd _ ip6 _ ie ( x ) ( ( x ) & numconst )	EMPTY	EMPTY
52	501	3	-1	0	-1	# define isis _ mask _ tlv _ extd _ ip6 _ subtlv ( x ) ( ( x ) & numconst )	EMPTY	EMPTY
52	503	1	0	0	-1	# define isis _ lsp _ tlv _ metric _ supported ( x ) ( ( x ) & numconst )	EMPTY	EMPTY
52	504	2	-1	0	-1	# define isis _ lsp _ tlv _ metric _ ie ( x ) ( ( x ) & numconst )	EMPTY	EMPTY
52	505	2	-1	0	-1	# define isis _ lsp _ tlv _ metric _ updown ( x ) ( ( x ) & numconst )	EMPTY	EMPTY
52	506	3	-1	0	-1	# define isis _ lsp _ tlv _ metric _ value ( x ) ( ( x ) & numconst )	EMPTY	EMPTY
52	508	1	0	0	-1	# define isis _ mask _ tlv _ shared _ risk _ group ( x ) ( ( x ) & numconst )	EMPTY	EMPTY
52	510	1	0	0	-1	static const struct tok isis _ mt _ values [ ] = {	EMPTY	EMPTY
52	511	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	512	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	513	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	514	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	515	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	516	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	517	3	-1	0	-1	} ;	EMPTY	EMPTY
52	519	1	0	0	-1	static const struct tok isis _ iih _ circuit _ type _ values [ ] = {	EMPTY	EMPTY
52	520	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	521	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	522	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	523	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	524	3	-1	0	-1	} ;	EMPTY	EMPTY
52	526	1	0	0	-1	# define isis _ lsp _ type _ unused0 numconst	EMPTY	EMPTY
52	527	2	-1	0	-1	# define isis _ lsp _ type _ level _ 1 numconst	EMPTY	EMPTY
52	528	2	-1	0	-1	# define isis _ lsp _ type _ unused2 numconst	EMPTY	EMPTY
52	529	3	-1	0	-1	# define isis _ lsp _ type _ level _ 2 numconst	EMPTY	EMPTY
52	531	1	0	0	-1	static const struct tok isis _ lsp _ istype _ values [ ] = {	EMPTY	EMPTY
52	532	2	-1	0	-1	{ isis _ lsp _ type _ unused0  strlit }	EMPTY	EMPTY
52	533	2	-1	0	-1	{ isis _ lsp _ type _ level _ 1  strlit }	EMPTY	EMPTY
52	534	2	-1	0	-1	{ isis _ lsp _ type _ unused2  strlit }	EMPTY	EMPTY
52	535	2	-1	0	-1	{ isis _ lsp _ type _ level _ 2  strlit }	EMPTY	EMPTY
52	536	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	537	3	-1	0	-1	} ;	EMPTY	EMPTY
52	544	1	1	1	-1	# define isis _ ptp _ adj _ up numconst	EMPTY	EMPTY
52	545	2	-1	0	-1	# define isis _ ptp _ adj _ init numconst	EMPTY	EMPTY
52	546	3	-1	0	-1	# define isis _ ptp _ adj _ down numconst	EMPTY	EMPTY
52	548	1	0	0	-1	static const struct tok isis _ ptp _ adjancey _ values [ ] = {	EMPTY	EMPTY
52	549	2	-1	0	-1	{ isis _ ptp _ adj _ up  strlit }	EMPTY	EMPTY
52	550	2	-1	0	-1	{ isis _ ptp _ adj _ init  strlit }	EMPTY	EMPTY
52	551	2	-1	0	-1	{ isis _ ptp _ adj _ down  strlit }	EMPTY	EMPTY
52	552	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	553	3	-1	0	-1	} ;	EMPTY	EMPTY
52	555	1	0	0	-1	struct isis _ tlv _ ptp _ adj {	EMPTY	EMPTY
52	556	2	-1	0	-1	uint8 _ t adjacency _ state ;	EMPTY	EMPTY
52	557	2	-1	0	-1	uint8 _ t extd _ local _ circuit _ id [ numconst ] ;	EMPTY	EMPTY
52	558	2	-1	0	-1	uint8 _ t neighbor _ sysid [ system _ id _ len ] ;	EMPTY	EMPTY
52	559	2	-1	0	-1	uint8 _ t neighbor _ extd _ local _ circuit _ id [ numconst ] ;	EMPTY	EMPTY
52	560	3	-1	0	-1	} ;	EMPTY	EMPTY
52	562	1	0	0	-1	static void osi _ print _ cksum ( netdissect _ options *  const uint8 _ t * pptr  uint16 _ t checksum	EMPTY	EMPTY
52	563	2	-1	0	-1	u _ int checksum _ offset  u _ int length )	EMPTY	EMPTY
52	564	2	-1	0	-1	static int clnp _ print ( netdissect _ options *  const uint8 _ t *  u _ int )	EMPTY	EMPTY
52	565	2	-1	0	-1	static void esis _ print ( netdissect _ options *  const uint8 _ t *  u _ int )	EMPTY	EMPTY
52	566	3	-1	0	-1	static int isis _ print ( netdissect _ options *  const uint8 _ t *  u _ int ) ;	EMPTY	EMPTY
52	568	1	0	0	-1	struct isis _ metric _ block {	EMPTY	EMPTY
52	569	2	-1	0	-1	uint8 _ t metric _ default ;	EMPTY	EMPTY
52	570	2	-1	0	-1	uint8 _ t metric _ delay ;	EMPTY	EMPTY
52	571	2	-1	0	-1	uint8 _ t metric _ expense ;	EMPTY	EMPTY
52	572	2	-1	0	-1	uint8 _ t metric _ error ;	EMPTY	EMPTY
52	573	3	-1	0	-1	} ;	EMPTY	EMPTY
52	575	1	0	0	-1	struct isis _ tlv _ is _ reach {	EMPTY	EMPTY
52	576	2	-1	0	-1	struct isis _ metric _ block isis _ metric _ block ;	EMPTY	EMPTY
52	577	2	-1	0	-1	uint8 _ t neighbor _ nodeid [ node _ id _ len ] ;	EMPTY	EMPTY
52	578	3	-1	0	-1	} ;	EMPTY	EMPTY
52	580	1	0	0	-1	struct isis _ tlv _ es _ reach {	EMPTY	EMPTY
52	581	2	-1	0	-1	struct isis _ metric _ block isis _ metric _ block ;	EMPTY	EMPTY
52	582	2	-1	0	-1	uint8 _ t neighbor _ sysid [ system _ id _ len ] ;	EMPTY	EMPTY
52	583	3	-1	0	-1	} ;	EMPTY	EMPTY
52	585	1	0	0	-1	struct isis _ tlv _ ip _ reach {	EMPTY	EMPTY
52	586	2	-1	0	-1	struct isis _ metric _ block isis _ metric _ block ;	EMPTY	EMPTY
52	587	2	-1	0	-1	uint8 _ t prefix [ numconst ] ;	prefix	EMPTY
52	588	2	-1	0	-1	uint8 _ t mask [ numconst ] ;	EMPTY	EMPTY
52	589	3	-1	0	-1	} ;	EMPTY	EMPTY
52	591	1	0	0	-1	static const struct tok isis _ is _ reach _ virtual _ values [ ] = {	EMPTY	EMPTY
52	592	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	593	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	594	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	595	3	-1	0	-1	} ;	EMPTY	EMPTY
52	597	1	0	0	-1	static const struct tok isis _ restart _ flag _ values [ ] = {	EMPTY	EMPTY
52	598	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	599	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	600	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
52	601	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	602	3	-1	0	-1	} ;	EMPTY	EMPTY
52	604	1	1	0	-1	struct isis _ common _ header {	EMPTY	EMPTY
52	605	2	-1	0	-1	uint8 _ t nlpid ;	EMPTY	EMPTY
52	606	2	-1	0	-1	uint8 _ t fixed _ len ;	EMPTY	EMPTY
52	607	2	-1	1	-1	uint8 _ t version ;	version	EMPTY
52	608	2	-1	0	-1	uint8 _ t id _ length ;	id _ length	EMPTY
52	609	2	-1	1	-1	uint8 _ t pdu _ type ;	pdu _ type	EMPTY
52	610	2	-1	1	-1	uint8 _ t pdu _ version ;	pdu _ version	EMPTY
52	611	2	-1	0	-1	uint8 _ t reserved ;	reserved	EMPTY
52	612	2	-1	0	-1	uint8 _ t max _ area ;	EMPTY	EMPTY
52	613	3	-1	0	-1	} ;	EMPTY	EMPTY
52	615	1	0	0	-1	struct isis _ iih _ lan _ header {	EMPTY	EMPTY
52	616	2	-1	0	-1	uint8 _ t circuit _ type ;	EMPTY	EMPTY
52	617	2	-1	0	-1	uint8 _ t source _ id [ system _ id _ len ] ;	EMPTY	EMPTY
52	618	2	-1	0	-1	uint8 _ t holding _ time [ numconst ] ;	EMPTY	EMPTY
52	619	2	-1	0	-1	uint8 _ t pdu _ len [ numconst ] ;	EMPTY	EMPTY
52	620	2	-1	0	-1	uint8 _ t priority ;	EMPTY	EMPTY
52	621	2	-1	0	-1	uint8 _ t lan _ id [ node _ id _ len ] ;	EMPTY	EMPTY
52	622	3	-1	0	-1	} ;	EMPTY	EMPTY
52	624	1	0	0	-1	struct isis _ iih _ ptp _ header {	EMPTY	EMPTY
52	625	2	-1	0	-1	uint8 _ t circuit _ type ;	EMPTY	EMPTY
52	626	2	-1	0	-1	uint8 _ t source _ id [ system _ id _ len ] ;	EMPTY	EMPTY
52	627	2	-1	0	-1	uint8 _ t holding _ time [ numconst ] ;	EMPTY	EMPTY
52	628	2	-1	0	-1	uint8 _ t pdu _ len [ numconst ] ;	EMPTY	EMPTY
52	629	2	-1	0	-1	uint8 _ t circuit _ id ;	EMPTY	EMPTY
52	630	3	-1	0	-1	} ;	EMPTY	EMPTY
52	632	1	0	0	-1	struct isis _ lsp _ header {	EMPTY	EMPTY
52	633	2	-1	0	-1	uint8 _ t pdu _ len [ numconst ] ;	EMPTY	EMPTY
52	634	2	-1	0	-1	uint8 _ t remaining _ lifetime [ numconst ] ;	EMPTY	EMPTY
52	635	2	-1	0	-1	uint8 _ t lsp _ id [ lsp _ id _ len ] ;	EMPTY	EMPTY
52	636	2	-1	0	-1	uint8 _ t sequence _ number [ numconst ] ;	EMPTY	EMPTY
52	637	2	-1	0	-1	uint8 _ t checksum [ numconst ] ;	EMPTY	EMPTY
52	638	2	-1	0	-1	uint8 _ t typeblock ;	EMPTY	EMPTY
52	639	3	-1	0	-1	} ;	EMPTY	EMPTY
52	641	1	0	0	-1	struct isis _ csnp _ header {	EMPTY	EMPTY
52	642	2	-1	0	-1	uint8 _ t pdu _ len [ numconst ] ;	EMPTY	EMPTY
52	643	2	-1	0	-1	uint8 _ t source _ id [ node _ id _ len ] ;	EMPTY	EMPTY
52	644	2	-1	0	-1	uint8 _ t start _ lsp _ id [ lsp _ id _ len ] ;	EMPTY	EMPTY
52	645	2	-1	0	-1	uint8 _ t end _ lsp _ id [ lsp _ id _ len ] ;	EMPTY	EMPTY
52	646	3	-1	0	-1	} ;	EMPTY	EMPTY
52	648	1	0	0	-1	struct isis _ psnp _ header {	EMPTY	EMPTY
52	649	2	-1	0	-1	uint8 _ t pdu _ len [ numconst ] ;	EMPTY	EMPTY
52	650	2	-1	0	-1	uint8 _ t source _ id [ node _ id _ len ] ;	EMPTY	EMPTY
52	651	3	-1	0	-1	} ;	EMPTY	EMPTY
52	653	1	0	0	-1	struct isis _ tlv _ lsp {	EMPTY	EMPTY
52	654	2	-1	0	-1	uint8 _ t remaining _ lifetime [ numconst ] ;	EMPTY	EMPTY
52	655	2	-1	0	-1	uint8 _ t lsp _ id [ lsp _ id _ len ] ;	EMPTY	EMPTY
52	656	2	-1	0	-1	uint8 _ t sequence _ number [ numconst ] ;	EMPTY	EMPTY
52	657	2	-1	0	-1	uint8 _ t checksum [ numconst ] ;	EMPTY	EMPTY
52	658	3	-1	0	-1	} ;	EMPTY	EMPTY
52	660	1	0	0	-1	# define isis _ common _ header _ size ( sizeof ( struct isis _ common _ header ) )	EMPTY	EMPTY
52	661	2	-1	0	-1	# define isis _ iih _ lan _ header _ size ( sizeof ( struct isis _ iih _ lan _ header ) )	EMPTY	EMPTY
52	662	2	-1	0	-1	# define isis _ iih _ ptp _ header _ size ( sizeof ( struct isis _ iih _ ptp _ header ) )	EMPTY	EMPTY
52	663	2	-1	0	-1	# define isis _ lsp _ header _ size ( sizeof ( struct isis _ lsp _ header ) )	EMPTY	EMPTY
52	664	2	-1	0	-1	# define isis _ csnp _ header _ size ( sizeof ( struct isis _ csnp _ header ) )	EMPTY	EMPTY
52	665	3	-1	0	-1	# define isis _ psnp _ header _ size ( sizeof ( struct isis _ psnp _ header ) )	EMPTY	EMPTY
52	667	1	0	0	-1	void isoclns _ print ( netdissect _ options * ndo	EMPTY	EMPTY
52	668	2	-1	0	-1	const uint8 _ t * p  u _ int length  u _ int caplen )	caplen	EMPTY
52	669	2	-1	0	-1	{	EMPTY	EMPTY
52	670	2	-1	0	-1	if ( caplen <= numconst ) {	caplen	EMPTY
52	671	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
52	672	2	-1	0	-1	return	EMPTY	EMPTY
52	673	3	-1	0	-1	}	EMPTY	EMPTY
52	675	1	0	0	0	if ( ndo -> ndo _ eflag )	ndo _ eflag	EMPTY
52	676	3	-1	0	-1	nd _ print ( ( ndo  strlit  tok2str ( nlpid _ values  strlit  * p )  * p ) ) ;	tok2str	EMPTY
52	678	1	0	0	0	switch ( * p ) {	EMPTY	EMPTY
52	680	1	0	0	-1	case nlpid _ clnp :	EMPTY	EMPTY
52	681	2	-1	0	-1	if ( ! clnp _ print ( ndo  p  length ) )	EMPTY	EMPTY
52	682	2	-1	0	-1	print _ unknown _ data ( ndo  p  strlit  caplen ) ;	caplen	EMPTY
52	683	3	-1	0	-1	break ;	EMPTY	EMPTY
52	685	1	0	0	-1	case nlpid _ esis :	EMPTY	EMPTY
52	686	2	-1	0	-1	esis _ print ( ndo  p  length ) ;	EMPTY	EMPTY
52	687	3	-1	0	-1	return ;	EMPTY	EMPTY
52	689	1	0	0	-1	case nlpid _ isis :	EMPTY	EMPTY
52	690	2	-1	0	-1	if ( ! isis _ print ( ndo  p  length ) )	EMPTY	EMPTY
52	691	2	-1	0	-1	print _ unknown _ data ( ndo  p  strlit  caplen ) ;	caplen	EMPTY
52	692	3	-1	0	-1	break ;	EMPTY	EMPTY
52	694	1	0	0	-1	case nlpid _ nullns :	EMPTY	EMPTY
52	695	2	-1	0	-1	nd _ print ( ( ndo  strlit  ndo -> ndo _ eflag ? strlit : strlit  length ) ) ;	ndo _ eflag	EMPTY
52	696	3	-1	0	-1	break ;	EMPTY	EMPTY
52	698	1	0	0	-1	case nlpid _ q933 :	EMPTY	EMPTY
52	699	2	-1	0	-1	q933 _ print ( ndo  p + numconst  length - numconst ) ;	EMPTY	EMPTY
52	700	3	-1	0	-1	break ;	EMPTY	EMPTY
52	702	1	0	0	-1	case nlpid _ ip :	EMPTY	EMPTY
52	703	2	-1	0	-1	ip _ print ( ndo  p + numconst  length - numconst ) ;	EMPTY	EMPTY
52	704	3	-1	0	-1	break ;	EMPTY	EMPTY
52	706	1	0	0	-1	case nlpid _ ip6 :	EMPTY	EMPTY
52	707	2	-1	0	-1	ip6 _ print ( ndo  p + numconst  length - numconst ) ;	EMPTY	EMPTY
52	708	3	-1	0	-1	break ;	EMPTY	EMPTY
52	710	1	0	0	-1	case nlpid _ ppp :	EMPTY	EMPTY
52	711	2	-1	0	-1	ppp _ print ( ndo  p + numconst  length - numconst ) ;	EMPTY	EMPTY
52	712	3	-1	0	-1	break ;	EMPTY	EMPTY
52	714	1	0	0	-1	default :	EMPTY	EMPTY
52	715	2	-1	0	-1	if ( ! ndo -> ndo _ eflag )	ndo _ eflag	EMPTY
52	716	2	-1	0	-1	nd _ print ( ( ndo  strlit  * p ) ) ;	EMPTY	EMPTY
52	717	2	-1	0	-1	nd _ print ( ( ndo  strlit  ndo -> ndo _ eflag ? strlit : strlit  length ) ) ;	ndo _ eflag	EMPTY
52	718	2	-1	0	-1	if ( caplen > numconst )	caplen	EMPTY
52	719	2	-1	0	-1	print _ unknown _ data ( ndo  p  strlit  caplen ) ;	caplen	EMPTY
52	720	2	-1	0	-1	break ;	EMPTY	EMPTY
52	721	2	-1	0	-1	}	EMPTY	EMPTY
52	722	3	-1	0	-1	}	EMPTY	EMPTY
52	724	1	0	0	-1	# define clnp _ pdu _ er numconst	EMPTY	EMPTY
52	725	2	-1	0	-1	# define clnp _ pdu _ dt numconst	EMPTY	EMPTY
52	726	2	-1	0	-1	# define clnp _ pdu _ md numconst	EMPTY	EMPTY
52	727	2	-1	0	-1	# define clnp _ pdu _ erq numconst	EMPTY	EMPTY
52	728	3	-1	0	-1	# define clnp _ pdu _ erp numconst	EMPTY	EMPTY
52	730	1	0	0	-1	static const struct tok clnp _ pdu _ values [ ] = {	EMPTY	EMPTY
52	731	2	-1	0	-1	{ clnp _ pdu _ er  strlit }	EMPTY	EMPTY
52	732	2	-1	0	-1	{ clnp _ pdu _ md  strlit }	EMPTY	EMPTY
52	733	2	-1	0	-1	{ clnp _ pdu _ dt  strlit }	EMPTY	EMPTY
52	734	2	-1	0	-1	{ clnp _ pdu _ erq  strlit }	EMPTY	EMPTY
52	735	2	-1	0	-1	{ clnp _ pdu _ erp  strlit }	EMPTY	EMPTY
52	736	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	737	3	-1	0	-1	} ;	EMPTY	EMPTY
52	739	1	0	0	-1	struct clnp _ header _ t {	EMPTY	EMPTY
52	740	2	-1	0	-1	uint8 _ t nlpid ;	EMPTY	EMPTY
52	741	2	-1	0	-1	uint8 _ t length _ indicator ;	EMPTY	EMPTY
52	742	2	-1	0	-1	uint8 _ t version ;	version	EMPTY
52	743	2	-1	0	-1	uint8 _ t lifetime ;	lifetime	EMPTY
52	744	2	-1	0	-1	uint8 _ t type ;	type	EMPTY
52	745	2	-1	0	-1	uint8 _ t segment _ length [ numconst ] ;	EMPTY	EMPTY
52	746	2	-1	0	-1	uint8 _ t cksum [ numconst ] ;	EMPTY	EMPTY
52	747	3	-1	0	-1	} ;	EMPTY	EMPTY
52	749	1	0	0	-1	struct clnp _ segment _ header _ t {	EMPTY	EMPTY
52	750	2	-1	0	-1	uint8 _ t data _ unit _ id [ numconst ] ;	EMPTY	EMPTY
52	751	2	-1	0	-1	uint8 _ t segment _ offset [ numconst ] ;	EMPTY	EMPTY
52	752	2	-1	0	-1	uint8 _ t total _ length [ numconst ] ;	EMPTY	EMPTY
52	753	3	-1	0	-1	} ;	EMPTY	EMPTY
52	760	1	1	1	-1	static int	EMPTY	EMPTY
52	761	2	-1	0	-1	clnp _ print ( netdissect _ options * ndo	EMPTY	EMPTY
52	762	2	-1	0	-1	const uint8 _ t * pptr  u _ int length )	EMPTY	EMPTY
52	763	2	-1	0	-1	{	EMPTY	EMPTY
52	764	2	-1	0	-1	const uint8 _ t * optr , * source _ address , * dest _ address ;	EMPTY	EMPTY
52	765	2	-1	0	-1	u _ int li , tlen , nsap _ offset , source _ address _ length , dest _ address _ length , clnp _ pdu _ type , clnp _ flags ;	EMPTY	EMPTY
52	766	2	-1	0	-1	const struct clnp _ header _ t * clnp _ header ;	EMPTY	EMPTY
52	767	2	-1	0	-1	const struct clnp _ segment _ header _ t * clnp _ segment _ header ;	EMPTY	EMPTY
52	768	3	-1	0	-1	uint8 _ t rfd _ error _ major , rfd _ error _ minor ;	EMPTY	EMPTY
52	770	1	0	0	-1	clnp _ header = ( const struct clnp _ header _ t * ) pptr	EMPTY	EMPTY
52	771	3	-1	0	-1	nd _ tcheck ( * clnp _ header ) ;	EMPTY	EMPTY
52	773	1	0	0	-1	li = clnp _ header -> length _ indicator	EMPTY	EMPTY
52	774	3	-1	0	-1	optr = pptr	EMPTY	EMPTY
52	776	1	0	0	0	if ( ! ndo -> ndo _ eflag )	ndo _ eflag	EMPTY
52	777	3	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
52	783	1	1	1	1	if ( clnp _ header -> version != clnp _ version ) {	version	EMPTY
52	784	2	-1	0	-1	nd _ print ( ( ndo ,  " version %d packet not supported "  , clnp _ header -> version ) ) ;	version	EMPTY
52	785	2	-1	0	-1	return ( 0 ) ;	EMPTY	EMPTY
52	786	3	-1	0	-1	}	EMPTY	EMPTY
52	790	1	1	1	-1	clnp _ pdu _ type = clnp _ header -> type & clnp _ pdu _ type _ mask ;	type	EMPTY
52	791	3	-1	0	-1	clnp _ flags = clnp _ header -> type & clnp _ flag _ mask ;	type	EMPTY
52	793	1	0	0	-1	pptr += sizeof ( struct clnp _ header _ t )	EMPTY	EMPTY
52	794	2	-1	0	-1	li -= sizeof ( struct clnp _ header _ t )	EMPTY	EMPTY
52	795	2	-1	0	-1	dest _ address _ length = * pptr	EMPTY	EMPTY
52	796	3	-1	0	-1	dest _ address = pptr + 1	EMPTY	EMPTY
52	798	1	0	0	-1	pptr += ( 1 + dest _ address _ length )	EMPTY	EMPTY
52	799	2	-1	0	-1	li -= ( 1 + dest _ address _ length )	EMPTY	EMPTY
52	800	2	-1	0	-1	source _ address _ length = * pptr	EMPTY	EMPTY
52	801	3	-1	0	-1	source _ address = pptr + 1	EMPTY	EMPTY
52	803	1	0	0	-1	pptr += ( 1 + source _ address _ length )	EMPTY	EMPTY
52	804	3	-1	0	-1	li -= ( 1 + source _ address _ length )	EMPTY	EMPTY
52	806	1	0	0	0	if ( ndo -> ndo _ vflag < 1 ) {	ndo _ vflag	EMPTY
52	807	2	-1	0	-1	nd _ print ( ( ndo ,  " %s%s > %s, %s, length %u "  ,	EMPTY	EMPTY
52	808	2	-1	0	-1	ndo -> ndo _ eflag ?  "  "  :  " ,  "  ,	ndo _ eflag	EMPTY
52	809	2	-1	0	-1	isonsap _ string ( source _ address , source _ address _ length ) ,	EMPTY	EMPTY
52	810	2	-1	0	-1	isonsap _ string ( dest _ address , dest _ address _ length ) ,	EMPTY	EMPTY
52	811	2	-1	0	-1	tok2str ( clnp _ pdu _ values ,  " unknown (%u) "  , clnp _ pdu _ type ) ,	tok2str	EMPTY
52	812	2	-1	0	-1	length ) ) ;	EMPTY	EMPTY
52	813	2	-1	0	-1	return ( 1 ) ;	EMPTY	EMPTY
52	814	2	-1	0	-1	}	EMPTY	EMPTY
52	815	3	-1	0	-1	nd _ print ( ( ndo  strlit  ndo -> ndo _ eflag ? strlit : strlit  length ) ) ;	ndo _ eflag	EMPTY
52	817	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	818	2	-1	0	-1	tok2str ( clnp _ pdu _ values  strlit  clnp _ pdu _ type )	tok2str	EMPTY
52	819	2	-1	0	-1	clnp _ header -> length _ indicator	EMPTY	EMPTY
52	820	2	-1	0	-1	clnp _ header -> version	version	EMPTY
52	821	2	-1	0	-1	clnp _ header -> lifetime / numconst	lifetime	EMPTY
52	822	2	-1	0	-1	( clnp _ header -> lifetime % numconst ) * numconst	lifetime	EMPTY
52	823	2	-1	0	-1	extract _ 16bits ( clnp _ header -> segment _ length )	extract _ 16bits	EMPTY
52	824	3	-1	0	-1	extract _ 16bits ( clnp _ header -> cksum ) ) ) ;	extract _ 16bits	EMPTY
52	826	1	0	0	0	osi _ print _ cksum ( ndo , optr , extract _ 16bits ( clnp _ header -> cksum ) , 7 ,	extract _ 16bits	EMPTY
52	827	3	-1	0	-1	clnp _ header -> length _ indicator )	EMPTY	EMPTY
52	829	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	830	3	-1	0	-1	bittok2str ( clnp _ flag _ values  strlit  clnp _ flags ) ) ) ;	EMPTY	EMPTY
52	832	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	833	2	-1	0	-1	source _ address _ length	EMPTY	EMPTY
52	834	2	-1	0	-1	isonsap _ string ( source _ address  source _ address _ length )	EMPTY	EMPTY
52	835	2	-1	0	-1	dest _ address _ length	EMPTY	EMPTY
52	836	3	-1	0	-1	isonsap _ string ( dest _ address  dest _ address _ length ) ) ) ;	EMPTY	EMPTY
52	838	1	0	0	0	if ( clnp _ flags & clnp _ segment _ part ) {	EMPTY	EMPTY
52	839	2	-1	0	-1	clnp _ segment _ header = ( const struct clnp _ segment _ header _ t * ) pptr ;	EMPTY	EMPTY
52	840	2	-1	0	-1	nd _ tcheck ( * clnp _ segment _ header ) ;	EMPTY	EMPTY
52	841	2	-1	0	-1	nd _ print ( ( ndo ,  " \n\tdata unit id: 0x%04x, segment offset: %u, total pdu length: %u "  ,	EMPTY	EMPTY
52	842	2	-1	0	-1	extract _ 16bits ( clnp _ segment _ header -> data _ unit _ id ) ,	extract _ 16bits	EMPTY
52	843	2	-1	0	-1	extract _ 16bits ( clnp _ segment _ header -> segment _ offset ) ,	extract _ 16bits	EMPTY
52	844	2	-1	0	-1	extract _ 16bits ( clnp _ segment _ header -> total _ length ) ) ) ;	extract _ 16bits	EMPTY
52	845	2	-1	0	-1	pptr += sizeof ( const struct clnp _ segment _ header _ t ) ;	EMPTY	EMPTY
52	846	2	-1	0	-1	li -= sizeof ( const struct clnp _ segment _ header _ t ) ;	EMPTY	EMPTY
52	847	3	-1	0	-1	}	EMPTY	EMPTY
52	850	1	1	1	1	while ( li >= numconst ) {	EMPTY	EMPTY
52	851	2	-1	0	-1	u _ int op , opli ;	EMPTY	EMPTY
52	852	3	-1	0	-1	const uint8 _ t * tptr ;	EMPTY	EMPTY
52	854	1	0	0	0	nd _ tcheck2 ( * pptr  numconst ) ;	EMPTY	EMPTY
52	855	2	-1	0	-1	if ( li < 2 ) {	EMPTY	EMPTY
52	856	2	-1	0	-1	nd _ print ( ( ndo ,  " , bad opts/li "  ) ) ;	EMPTY	EMPTY
52	857	2	-1	0	-1	return ( 0 ) ;	EMPTY	EMPTY
52	858	2	-1	0	-1	}	EMPTY	EMPTY
52	859	2	-1	0	-1	op = * pptr ++	EMPTY	EMPTY
52	860	2	-1	0	-1	opli = * pptr ++	EMPTY	EMPTY
52	861	2	-1	0	-1	li -= 2	EMPTY	EMPTY
52	862	2	-1	0	-1	nd _ tcheck2 ( * pptr  opli ) ;	EMPTY	EMPTY
52	863	2	-1	0	-1	if ( opli > li ) {	EMPTY	EMPTY
52	864	2	-1	0	-1	nd _ print ( ( ndo ,  " , opt (%d) too long "  , op ) ) ;	EMPTY	EMPTY
52	865	2	-1	0	-1	return ( 0 ) ;	EMPTY	EMPTY
52	866	2	-1	0	-1	}	EMPTY	EMPTY
52	867	2	-1	0	-1	li -= opli	EMPTY	EMPTY
52	868	2	-1	0	-1	tptr = pptr	EMPTY	EMPTY
52	869	3	-1	0	-1	tlen = opli	EMPTY	EMPTY
52	871	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	872	2	-1	0	-1	tok2str ( clnp _ option _ values  strlit  op )	tok2str	EMPTY
52	873	2	-1	0	-1	op	EMPTY	EMPTY
52	874	3	-1	0	-1	opli ) ) ;	EMPTY	EMPTY
52	876	1	0	0	0	switch ( op ) {	EMPTY	EMPTY
52	879	1	1	1	-1	case clnp _ option _ route _ recording :	EMPTY	EMPTY
52	880	2	-1	0	-1	case clnp _ option _ source _ routing :	EMPTY	EMPTY
52	881	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	882	2	-1	0	-1	tok2str ( clnp _ option _ sr _ rr _ values  strlit  * tptr )	tok2str	EMPTY
52	883	2	-1	0	-1	tok2str ( clnp _ option _ sr _ rr _ string _ values  strlit  op ) ) ) ;	tok2str	EMPTY
52	884	2	-1	0	-1	nsap _ offset = * ( tptr + 1 )	EMPTY	EMPTY
52	885	2	-1	0	-1	if ( nsap _ offset == 0 ) {	EMPTY	EMPTY
52	886	2	-1	0	-1	nd _ print ( ( ndo ,  "  bad nsap offset (0) "  ) ) ;	EMPTY	EMPTY
52	887	2	-1	0	-1	break ;	EMPTY	EMPTY
52	888	2	-1	0	-1	}	EMPTY	EMPTY
52	889	2	-1	0	-1	nsap _ offset -= 1	EMPTY	EMPTY
52	890	2	-1	0	-1	if ( nsap _ offset > tlen ) {	EMPTY	EMPTY
52	891	2	-1	0	-1	nd _ print ( ( ndo ,  "  bad nsap offset (past end of option) "  ) ) ;	EMPTY	EMPTY
52	892	2	-1	0	-1	break ;	EMPTY	EMPTY
52	893	2	-1	0	-1	}	EMPTY	EMPTY
52	894	2	-1	0	-1	tptr += nsap _ offset	EMPTY	EMPTY
52	895	2	-1	0	-1	tlen -= nsap _ offset	EMPTY	EMPTY
52	896	2	-1	0	-1	while ( tlen > 0 ) {	EMPTY	EMPTY
52	897	2	-1	0	-1	source _ address _ length = * tptr ;	EMPTY	EMPTY
52	898	2	-1	0	-1	if ( tlen < source _ address _ length + 1 ) {	EMPTY	EMPTY
52	899	2	-1	0	-1	nd _ print ( ( ndo ,  " \n\t    nsap address goes past end of option "  ) ) ;	EMPTY	EMPTY
52	900	2	-1	0	-1	break ;	EMPTY	EMPTY
52	901	2	-1	0	-1	}	EMPTY	EMPTY
52	902	2	-1	0	-1	if ( source _ address _ length > 0 ) {	EMPTY	EMPTY
52	903	2	-1	0	-1	source _ address = ( tptr + 1 ) ;	EMPTY	EMPTY
52	904	2	-1	0	-1	nd _ tcheck2 ( * source _ address , source _ address _ length ) ;	EMPTY	EMPTY
52	905	2	-1	0	-1	nd _ print ( ( ndo ,  " \n\t    nsap address (length %u): %s "  ,	EMPTY	EMPTY
52	906	2	-1	0	-1	source _ address _ length ,	EMPTY	EMPTY
52	907	2	-1	0	-1	isonsap _ string ( source _ address , source _ address _ length ) ) ) ;	EMPTY	EMPTY
52	908	3	-1	0	-1	}	EMPTY	EMPTY
52	909	1	0	0	-1	tlen -= source _ address _ length + 1 ;	EMPTY	EMPTY
52	910	2	-1	0	-1	}	EMPTY	EMPTY
52	911	3	-1	0	-1	break	EMPTY	EMPTY
52	913	1	0	0	-1	case clnp _ option _ priority :	EMPTY	EMPTY
52	914	2	-1	0	-1	nd _ print ( ( ndo  strlit  * tptr & numconst ) ) ;	EMPTY	EMPTY
52	915	3	-1	0	-1	break	EMPTY	EMPTY
52	917	1	0	0	-1	case clnp _ option _ qos _ maintenance :	EMPTY	EMPTY
52	918	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	919	3	-1	0	-1	tok2str ( clnp _ option _ scope _ values  strlit  * tptr & clnp _ option _ scope _ mask ) ) ) ;	tok2str	EMPTY
52	921	1	0	0	0	if ( ( * tptr & clnp _ option _ scope _ mask ) == clnp _ option _ scope _ global )	EMPTY	EMPTY
52	922	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	923	2	-1	0	-1	bittok2str ( clnp _ option _ qos _ global _ values	EMPTY	EMPTY
52	924	3	-1	0	-1	strlit	EMPTY	EMPTY
52	926	1	0	0	-1	break	EMPTY	EMPTY
52	928	1	0	0	-1	case clnp _ option _ security :	EMPTY	EMPTY
52	929	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	930	3	-1	0	-1	tok2str ( clnp _ option _ scope _ values  strlit  * tptr & clnp _ option _ scope _ mask )	tok2str	EMPTY
52	932	1	0	0	-1	break	EMPTY	EMPTY
52	934	1	0	0	-1	case clnp _ option _ discard _ reason :	EMPTY	EMPTY
52	935	2	-1	0	-1	rfd _ error _ major = ( * tptr & 0xf0 ) >> 4	EMPTY	EMPTY
52	936	2	-1	0	-1	rfd _ error _ minor = * tptr & 0x0f	EMPTY	EMPTY
52	937	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	938	2	-1	0	-1	tok2str ( clnp _ option _ rfd _ class _ values  strlit  rfd _ error _ major )	tok2str	EMPTY
52	939	2	-1	0	-1	rfd _ error _ major	EMPTY	EMPTY
52	940	2	-1	0	-1	tok2str ( clnp _ option _ rfd _ error _ class [ rfd _ error _ major ]  strlit  rfd _ error _ minor )	tok2str clnp _ option _ rfd _ error _ class	EMPTY
52	941	2	-1	0	-1	rfd _ error _ minor ) ) ;	EMPTY	EMPTY
52	942	3	-1	0	-1	break	EMPTY	EMPTY
52	944	1	0	0	-1	case clnp _ option _ padding :	EMPTY	EMPTY
52	945	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
52	946	3	-1	0	-1	break	EMPTY	EMPTY
52	953	1	1	1	-1	default :	EMPTY	EMPTY
52	954	2	-1	0	-1	print _ unknown _ data ( ndo , tptr ,  " \n\t   "  , opli )	EMPTY	EMPTY
52	955	2	-1	0	-1	break	EMPTY	EMPTY
52	956	2	-1	0	-1	}	EMPTY	EMPTY
52	957	2	-1	0	-1	if ( ndo -> ndo _ vflag > numconst )	ndo _ vflag	EMPTY
52	958	2	-1	0	-1	print _ unknown _ data ( ndo  pptr  strlit  opli ) ;	EMPTY	EMPTY
52	959	2	-1	0	-1	pptr += opli ;	EMPTY	EMPTY
52	960	3	-1	0	-1	}	EMPTY	EMPTY
52	962	1	0	0	0	switch ( clnp _ pdu _ type ) {	EMPTY	EMPTY
52	964	1	1	1	-1	case clnp _ pdu _ er :	EMPTY	EMPTY
52	965	2	-1	0	-1	case clnp _ pdu _ erp :	EMPTY	EMPTY
52	966	2	-1	0	-1	nd _ tcheck ( * pptr ) ;	EMPTY	EMPTY
52	967	2	-1	0	-1	if ( * ( pptr ) == nlpid _ clnp ) {	EMPTY	EMPTY
52	968	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
52	970	2	-1	1	-1	clnp _ print ( ndo , pptr , length - clnp _ header -> length _ indicator )	EMPTY	EMPTY
52	971	2	-1	0	-1	break	EMPTY	EMPTY
52	972	3	-1	0	-1	}	EMPTY	EMPTY
52	974	1	0	0	-1	case clnp _ pdu _ dt :	EMPTY	EMPTY
52	975	2	-1	0	-1	case clnp _ pdu _ md :	EMPTY	EMPTY
52	976	3	-1	0	-1	case clnp _ pdu _ erq :	EMPTY	EMPTY
52	978	1	1	0	-1	default :	EMPTY	EMPTY
52	980	2	-1	1	-1	if ( length - ( pptr - optr ) > numconst ) {	EMPTY	EMPTY
52	981	2	-1	0	-1	nd _ print ( ( ndo  strlit  length - clnp _ header -> length _ indicator ) ) ;	EMPTY	EMPTY
52	982	2	-1	0	-1	print _ unknown _ data ( ndo , pptr ,  " \n\t   "  , length - ( pptr - optr ) )	EMPTY	EMPTY
52	983	2	-1	0	-1	}	EMPTY	EMPTY
52	984	3	-1	0	-1	}	EMPTY	EMPTY
52	986	1	0	0	0	return ( numconst ) ;	EMPTY	EMPTY
52	988	1	0	0	-1	trunc :	EMPTY	EMPTY
52	989	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
52	990	3	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	992	1	0	0	-1	}	EMPTY	EMPTY
52	995	1	0	0	-1	# define esis _ pdu _ redirect numconst	EMPTY	EMPTY
52	996	2	-1	0	-1	# define esis _ pdu _ esh numconst	EMPTY	EMPTY
52	997	3	-1	0	-1	# define esis _ pdu _ ish numconst	EMPTY	EMPTY
52	999	1	0	0	-1	static const struct tok esis _ pdu _ values [ ] = {	EMPTY	EMPTY
52	1000	2	-1	0	-1	{ esis _ pdu _ redirect  strlit }	EMPTY	EMPTY
52	1001	2	-1	0	-1	{ esis _ pdu _ esh  strlit }	EMPTY	EMPTY
52	1002	2	-1	0	-1	{ esis _ pdu _ ish  strlit }	EMPTY	EMPTY
52	1003	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
52	1004	3	-1	0	-1	} ;	EMPTY	EMPTY
52	1006	1	0	0	-1	struct esis _ header _ t {	EMPTY	EMPTY
52	1007	2	-1	0	-1	uint8 _ t nlpid ;	EMPTY	EMPTY
52	1008	2	-1	0	-1	uint8 _ t length _ indicator ;	EMPTY	EMPTY
52	1009	2	-1	0	-1	uint8 _ t version ;	version	EMPTY
52	1010	2	-1	0	-1	uint8 _ t reserved ;	reserved	EMPTY
52	1011	2	-1	0	-1	uint8 _ t type ;	type	EMPTY
52	1012	2	-1	0	-1	uint8 _ t holdtime [ numconst ] ;	EMPTY	EMPTY
52	1013	2	-1	0	-1	uint8 _ t cksum [ numconst ] ;	EMPTY	EMPTY
52	1014	3	-1	0	-1	} ;	EMPTY	EMPTY
52	1016	1	0	0	-1	static void	EMPTY	EMPTY
52	1017	2	-1	0	-1	esis _ print ( netdissect _ options * ndo	EMPTY	EMPTY
52	1018	2	-1	0	-1	const uint8 _ t * pptr  u _ int length )	EMPTY	EMPTY
52	1019	2	-1	0	-1	{	EMPTY	EMPTY
52	1020	2	-1	0	-1	const uint8 _ t * optr ;	EMPTY	EMPTY
52	1021	2	-1	0	-1	u _ int li  esis _ pdu _ type  source _ address _ length  source _ address _ number ;	EMPTY	EMPTY
52	1022	3	-1	0	-1	const struct esis _ header _ t * esis _ header ;	EMPTY	EMPTY
52	1024	1	0	0	0	if ( ! ndo -> ndo _ eflag )	ndo _ eflag	EMPTY
52	1025	3	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
52	1027	1	0	0	0	if ( length <= numconst ) {	EMPTY	EMPTY
52	1028	2	-1	0	-1	nd _ print ( ( ndo  ndo -> ndo _ qflag ? strlit : strlit ) ) ;	ndo _ qflag	EMPTY
52	1029	2	-1	0	-1	return ;	EMPTY	EMPTY
52	1030	3	-1	0	-1	}	EMPTY	EMPTY
52	1032	1	0	0	-1	esis _ header = ( const struct esis _ header _ t * ) pptr ;	EMPTY	EMPTY
52	1033	2	-1	0	-1	nd _ tcheck ( * esis _ header ) ;	EMPTY	EMPTY
52	1034	2	-1	0	-1	li = esis _ header -> length _ indicator ;	EMPTY	EMPTY
52	1035	3	-1	0	-1	optr = pptr ;	EMPTY	EMPTY
52	1041	1	1	1	1	if ( esis _ header -> nlpid != nlpid _ esis ) {	EMPTY	EMPTY
52	1042	2	-1	0	-1	nd _ print ( ( ndo ,  "  nlpid 0x%02x packet not supported "  , esis _ header -> nlpid ) ) ;	EMPTY	EMPTY
52	1043	2	-1	0	-1	return ;	EMPTY	EMPTY
52	1044	3	-1	0	-1	}	EMPTY	EMPTY
52	1046	1	0	0	0	if ( esis _ header -> version != esis _ version ) {	version	EMPTY
52	1047	2	-1	0	-1	nd _ print ( ( ndo ,  "  version %d packet not supported "  , esis _ header -> version ) ) ;	version version	EMPTY
52	1048	2	-1	0	-1	return ;	EMPTY	EMPTY
52	1049	3	-1	0	-1	}	EMPTY	EMPTY
52	1051	1	0	0	0	if ( li > length ) {	EMPTY	EMPTY
52	1052	2	-1	0	-1	nd _ print ( ( ndo ,  "  length indicator(%d) > pdu size (%d)! "  , li , length ) ) ;	EMPTY	EMPTY
52	1053	2	-1	0	-1	return ;	EMPTY	EMPTY
52	1054	3	-1	0	-1	}	EMPTY	EMPTY
52	1056	1	0	0	0	if ( li < sizeof ( struct esis _ header _ t ) + 2 ) {	EMPTY	EMPTY
52	1057	2	-1	0	-1	nd _ print ( ( ndo ,  "  length indicator < min pdu size %d: "  , li ) ) ;	EMPTY	EMPTY
52	1058	2	-1	0	-1	while ( pptr < ndo -> ndo _ snapend )	EMPTY	EMPTY
52	1059	2	-1	0	-1	nd _ print ( ( ndo ,  " %02x "  , * pptr ++ ) ) ;	EMPTY	EMPTY
52	1060	2	-1	0	-1	return ;	EMPTY	EMPTY
52	1061	3	-1	0	-1	}	EMPTY	EMPTY
52	1063	1	0	0	-1	esis _ pdu _ type = esis _ header -> type & esis _ pdu _ type _ mask ;	type	EMPTY
52	1065	1	0	0	0	if ( ndo -> ndo _ vflag < numconst ) {	ndo _ vflag	EMPTY
52	1066	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1067	2	-1	0	-1	ndo -> ndo _ eflag ? strlit : strlit	ndo _ eflag	EMPTY
52	1068	2	-1	0	-1	tok2str ( esis _ pdu _ values  strlit  esis _ pdu _ type )	tok2str	EMPTY
52	1069	2	-1	0	-1	length ) ) ;	EMPTY	EMPTY
52	1070	2	-1	0	-1	return	EMPTY	EMPTY
52	1071	2	-1	0	-1	}	EMPTY	EMPTY
52	1072	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1073	2	-1	0	-1	ndo -> ndo _ eflag ? strlit : strlit	ndo _ eflag	EMPTY
52	1074	2	-1	0	-1	length	EMPTY	EMPTY
52	1075	2	-1	0	-1	tok2str ( esis _ pdu _ values  strlit  esis _ pdu _ type )	tok2str	EMPTY
52	1076	3	-1	0	-1	esis _ pdu _ type ) ) ;	EMPTY	EMPTY
52	1078	1	0	0	0	nd _ print ( ( ndo  strlit  esis _ header -> version  esis _ header -> version == esis _ version ? strlit : strlit ) ) ;	version version	EMPTY
52	1079	3	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 16bits ( esis _ header -> cksum ) ) ) ;	extract _ 16bits	EMPTY
52	1081	1	0	0	0	osi _ print _ cksum ( ndo , pptr , extract _ 16bits ( esis _ header -> cksum ) , 7 , li )	extract _ 16bits	EMPTY
52	1083	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1084	3	-1	0	-1	extract _ 16bits ( esis _ header -> holdtime )  li ) ) ;	extract _ 16bits	EMPTY
52	1086	1	0	0	0	if ( ndo -> ndo _ vflag > 1 )	ndo _ vflag	EMPTY
52	1087	3	-1	0	-1	print _ unknown _ data ( ndo , optr ,  " \n\t "  , sizeof ( struct esis _ header _ t ) )	EMPTY	EMPTY
52	1089	1	0	0	-1	pptr += sizeof ( struct esis _ header _ t )	EMPTY	EMPTY
52	1090	3	-1	0	-1	li -= sizeof ( struct esis _ header _ t )	EMPTY	EMPTY
52	1092	1	0	0	0	switch ( esis _ pdu _ type ) {	EMPTY	EMPTY
52	1093	2	-1	0	-1	case esis _ pdu _ redirect : {	EMPTY	EMPTY
52	1094	2	-1	0	-1	const uint8 _ t * dst , * snpa , * neta ;	EMPTY	EMPTY
52	1095	3	-1	0	-1	u _ int dstl , snpal , netal ;	EMPTY	EMPTY
52	1097	1	0	0	-1	nd _ tcheck ( * pptr ) ;	EMPTY	EMPTY
52	1098	2	-1	0	-1	if ( li < 1 ) {	EMPTY	EMPTY
52	1099	2	-1	0	-1	nd _ print ( ( ndo ,  " , bad redirect/li "  ) ) ;	EMPTY	EMPTY
52	1100	2	-1	0	-1	return ;	EMPTY	EMPTY
52	1101	2	-1	0	-1	}	EMPTY	EMPTY
52	1102	2	-1	0	-1	dstl = * pptr ;	EMPTY	EMPTY
52	1103	2	-1	0	-1	pptr ++ ;	EMPTY	EMPTY
52	1104	2	-1	0	-1	li -- ;	EMPTY	EMPTY
52	1105	2	-1	0	-1	nd _ tcheck2 ( * pptr , dstl ) ;	EMPTY	EMPTY
52	1106	2	-1	0	-1	if ( li < dstl ) {	EMPTY	EMPTY
52	1107	2	-1	0	-1	nd _ print ( ( ndo ,  " , bad redirect/li "  ) ) ;	EMPTY	EMPTY
52	1108	2	-1	0	-1	return ;	EMPTY	EMPTY
52	1109	2	-1	0	-1	}	EMPTY	EMPTY
52	1110	2	-1	0	-1	dst = pptr ;	EMPTY	EMPTY
52	1111	2	-1	0	-1	pptr += dstl ;	EMPTY	EMPTY
52	1112	2	-1	0	-1	li -= dstl ;	EMPTY	EMPTY
52	1113	3	-1	0	-1	nd _ print ( ( ndo ,  " \n\t  %s "  , isonsap _ string ( dst , dstl ) ) ) ;	EMPTY	EMPTY
52	1115	1	0	0	-1	nd _ tcheck ( * pptr ) ;	EMPTY	EMPTY
52	1116	2	-1	0	-1	if ( li < 1 ) {	EMPTY	EMPTY
52	1117	2	-1	0	-1	nd _ print ( ( ndo ,  " , bad redirect/li "  ) ) ;	EMPTY	EMPTY
52	1118	2	-1	0	-1	return ;	EMPTY	EMPTY
52	1119	2	-1	0	-1	}	EMPTY	EMPTY
52	1120	2	-1	0	-1	snpal = * pptr ;	EMPTY	EMPTY
52	1121	2	-1	0	-1	pptr ++ ;	EMPTY	EMPTY
52	1122	2	-1	0	-1	li -- ;	EMPTY	EMPTY
52	1123	2	-1	0	-1	nd _ tcheck2 ( * pptr , snpal ) ;	EMPTY	EMPTY
52	1124	2	-1	0	-1	if ( li < snpal ) {	EMPTY	EMPTY
52	1125	2	-1	0	-1	nd _ print ( ( ndo ,  " , bad redirect/li "  ) ) ;	EMPTY	EMPTY
52	1126	2	-1	0	-1	return ;	EMPTY	EMPTY
52	1127	2	-1	0	-1	}	EMPTY	EMPTY
52	1128	2	-1	0	-1	snpa = pptr ;	EMPTY	EMPTY
52	1129	2	-1	0	-1	pptr += snpal ;	EMPTY	EMPTY
52	1130	2	-1	0	-1	li -= snpal ;	EMPTY	EMPTY
52	1131	2	-1	0	-1	nd _ tcheck ( * pptr ) ;	EMPTY	EMPTY
52	1132	2	-1	0	-1	if ( li < 1 ) {	EMPTY	EMPTY
52	1133	2	-1	0	-1	nd _ print ( ( ndo ,  " , bad redirect/li "  ) ) ;	EMPTY	EMPTY
52	1134	2	-1	0	-1	return ;	EMPTY	EMPTY
52	1135	2	-1	0	-1	}	EMPTY	EMPTY
52	1136	2	-1	0	-1	netal = * pptr ;	EMPTY	EMPTY
52	1137	2	-1	0	-1	pptr ++ ;	EMPTY	EMPTY
52	1138	2	-1	0	-1	nd _ tcheck2 ( * pptr , netal ) ;	EMPTY	EMPTY
52	1139	2	-1	0	-1	if ( li < netal ) {	EMPTY	EMPTY
52	1140	2	-1	0	-1	nd _ print ( ( ndo ,  " , bad redirect/li "  ) ) ;	EMPTY	EMPTY
52	1141	2	-1	0	-1	return ;	EMPTY	EMPTY
52	1142	2	-1	0	-1	}	EMPTY	EMPTY
52	1143	2	-1	0	-1	neta = pptr ;	EMPTY	EMPTY
52	1144	3	-1	0	-1	pptr += netal ;	EMPTY	EMPTY
52	1145	1	0	0	-1	li -= netal ;	EMPTY	EMPTY
52	1147	1	0	0	0	if ( netal == 0 )	EMPTY	EMPTY
52	1148	2	-1	0	-1	nd _ print ( ( ndo ,  " \n\t  %s "  , etheraddr _ string ( ndo , snpa ) ) ) ;	EMPTY	EMPTY
52	1149	2	-1	0	-1	else	EMPTY	EMPTY
52	1150	2	-1	0	-1	nd _ print ( ( ndo ,  " \n\t  %s "  , isonsap _ string ( neta , netal ) ) ) ;	EMPTY	EMPTY
52	1151	2	-1	0	-1	break ;	EMPTY	EMPTY
52	1152	3	-1	0	-1	}	EMPTY	EMPTY
52	1154	1	0	0	-1	case esis _ pdu _ esh :	EMPTY	EMPTY
52	1155	2	-1	0	-1	nd _ tcheck ( * pptr ) ;	EMPTY	EMPTY
52	1156	2	-1	0	-1	if ( li < 1 ) {	EMPTY	EMPTY
52	1157	2	-1	0	-1	nd _ print ( ( ndo ,  " , bad esh/li "  ) ) ;	EMPTY	EMPTY
52	1158	2	-1	0	-1	return ;	EMPTY	EMPTY
52	1159	2	-1	0	-1	}	EMPTY	EMPTY
52	1160	2	-1	0	-1	source _ address _ number = * pptr ;	EMPTY	EMPTY
52	1161	2	-1	0	-1	pptr ++ ;	EMPTY	EMPTY
52	1162	3	-1	0	-1	li -- ;	EMPTY	EMPTY
52	1164	1	0	0	0	nd _ print ( ( ndo ,  " \n\t  number of source addresses: %u "  , source _ address _ number ) ) ;	EMPTY	EMPTY
52	1166	1	0	0	0	while ( source _ address _ number > 0 ) {	EMPTY	EMPTY
52	1167	2	-1	0	-1	nd _ tcheck ( * pptr ) ;	EMPTY	EMPTY
52	1168	2	-1	0	-1	if ( li < 1 ) {	EMPTY	EMPTY
52	1169	2	-1	0	-1	nd _ print ( ( ndo ,  " , bad esh/li "  ) ) ;	EMPTY	EMPTY
52	1170	2	-1	0	-1	return ;	EMPTY	EMPTY
52	1171	2	-1	0	-1	}	EMPTY	EMPTY
52	1172	2	-1	0	-1	source _ address _ length = * pptr ;	EMPTY	EMPTY
52	1173	2	-1	0	-1	pptr ++ ;	EMPTY	EMPTY
52	1174	3	-1	0	-1	li -- ;	EMPTY	EMPTY
52	1176	1	0	0	0	nd _ tcheck2 ( * pptr , source _ address _ length ) ;	EMPTY	EMPTY
52	1177	2	-1	0	-1	if ( li < source _ address _ length ) {	EMPTY	EMPTY
52	1178	2	-1	0	-1	nd _ print ( ( ndo ,  " , bad esh/li "  ) ) ;	EMPTY	EMPTY
52	1179	2	-1	0	-1	return ;	EMPTY	EMPTY
52	1180	2	-1	0	-1	}	EMPTY	EMPTY
52	1181	2	-1	0	-1	nd _ print ( ( ndo ,  " \n\t  net (length: %u): %s "  ,	EMPTY	EMPTY
52	1182	2	-1	0	-1	source _ address _ length ,	EMPTY	EMPTY
52	1183	2	-1	0	-1	isonsap _ string ( pptr , source _ address _ length ) ) ) ;	EMPTY	EMPTY
52	1184	2	-1	0	-1	pptr += source _ address _ length ;	EMPTY	EMPTY
52	1185	2	-1	0	-1	li -= source _ address _ length ;	EMPTY	EMPTY
52	1186	2	-1	0	-1	source _ address _ number -- ;	EMPTY	EMPTY
52	1187	3	-1	0	-1	}	EMPTY	EMPTY
52	1189	1	0	0	-1	break ;	EMPTY	EMPTY
52	1191	1	0	0	-1	case esis _ pdu _ ish : {	EMPTY	EMPTY
52	1192	2	-1	0	-1	nd _ tcheck ( * pptr ) ;	EMPTY	EMPTY
52	1193	2	-1	0	-1	if ( li < 1 ) {	EMPTY	EMPTY
52	1194	2	-1	0	-1	nd _ print ( ( ndo ,  " , bad ish/li "  ) ) ;	EMPTY	EMPTY
52	1195	2	-1	0	-1	return ;	EMPTY	EMPTY
52	1196	2	-1	0	-1	}	EMPTY	EMPTY
52	1197	2	-1	0	-1	source _ address _ length = * pptr ;	EMPTY	EMPTY
52	1198	2	-1	0	-1	pptr ++ ;	EMPTY	EMPTY
52	1199	2	-1	0	-1	li -- ;	EMPTY	EMPTY
52	1200	2	-1	0	-1	nd _ tcheck2 ( * pptr , source _ address _ length ) ;	EMPTY	EMPTY
52	1201	2	-1	0	-1	if ( li < source _ address _ length ) {	EMPTY	EMPTY
52	1202	2	-1	0	-1	nd _ print ( ( ndo ,  " , bad ish/li "  ) ) ;	EMPTY	EMPTY
52	1203	2	-1	0	-1	return ;	EMPTY	EMPTY
52	1204	2	-1	0	-1	}	EMPTY	EMPTY
52	1205	2	-1	0	-1	nd _ print ( ( ndo ,  " \n\t  net (length: %u): %s "  , source _ address _ length , isonsap _ string ( pptr , source _ address _ length ) ) ) ;	EMPTY	EMPTY
52	1206	2	-1	0	-1	pptr += source _ address _ length ;	EMPTY	EMPTY
52	1207	2	-1	0	-1	li -= source _ address _ length ;	EMPTY	EMPTY
52	1208	2	-1	0	-1	break ;	EMPTY	EMPTY
52	1209	3	-1	0	-1	}	EMPTY	EMPTY
52	1211	1	0	0	-1	default :	EMPTY	EMPTY
52	1212	2	-1	0	-1	if ( ndo -> ndo _ vflag <= 1 ) {	ndo _ vflag	EMPTY
52	1213	2	-1	0	-1	if ( pptr < ndo -> ndo _ snapend )	EMPTY	EMPTY
52	1214	2	-1	0	-1	print _ unknown _ data ( ndo , pptr ,  " \n\t   "  , ndo -> ndo _ snapend - pptr ) ;	EMPTY	EMPTY
52	1215	2	-1	0	-1	}	EMPTY	EMPTY
52	1216	2	-1	0	-1	return ;	EMPTY	EMPTY
52	1217	3	-1	0	-1	}	EMPTY	EMPTY
52	1220	1	1	1	1	while ( li != numconst ) {	EMPTY	EMPTY
52	1221	2	-1	0	-1	u _ int op , opli ;	EMPTY	EMPTY
52	1222	3	-1	0	-1	const uint8 _ t * tptr ;	EMPTY	EMPTY
52	1224	1	0	0	0	if ( li < 2 ) {	EMPTY	EMPTY
52	1225	2	-1	0	-1	nd _ print ( ( ndo ,  " , bad opts/li "  ) ) ;	EMPTY	EMPTY
52	1226	2	-1	0	-1	return ;	EMPTY	EMPTY
52	1227	2	-1	0	-1	}	EMPTY	EMPTY
52	1228	2	-1	0	-1	nd _ tcheck2 ( * pptr  numconst ) ;	EMPTY	EMPTY
52	1229	2	-1	0	-1	op = * pptr ++	EMPTY	EMPTY
52	1230	2	-1	0	-1	opli = * pptr ++	EMPTY	EMPTY
52	1231	2	-1	0	-1	li -= 2	EMPTY	EMPTY
52	1232	2	-1	0	-1	if ( opli > li ) {	EMPTY	EMPTY
52	1233	2	-1	0	-1	nd _ print ( ( ndo ,  " , opt (%d) too long "  , op ) ) ;	EMPTY	EMPTY
52	1234	2	-1	0	-1	return ;	EMPTY	EMPTY
52	1235	2	-1	0	-1	}	EMPTY	EMPTY
52	1236	2	-1	0	-1	li -= opli	EMPTY	EMPTY
52	1237	3	-1	0	-1	tptr = pptr	EMPTY	EMPTY
52	1239	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1240	2	-1	0	-1	tok2str ( esis _ option _ values  strlit  op )	tok2str	EMPTY
52	1241	2	-1	0	-1	op	EMPTY	EMPTY
52	1242	3	-1	0	-1	opli ) ) ;	EMPTY	EMPTY
52	1244	1	0	0	0	switch ( op ) {	EMPTY	EMPTY
52	1246	1	0	0	-1	case esis _ option _ es _ conf _ time :	EMPTY	EMPTY
52	1247	2	-1	0	-1	if ( opli == numconst ) {	EMPTY	EMPTY
52	1248	2	-1	0	-1	nd _ tcheck2 ( * pptr  numconst ) ;	EMPTY	EMPTY
52	1249	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 16bits ( tptr ) ) ) ;	extract _ 16bits	EMPTY
52	1250	2	-1	0	-1	}	EMPTY	EMPTY
52	1251	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
52	1252	3	-1	0	-1	break	EMPTY	EMPTY
52	1254	1	0	0	-1	case esis _ option _ protocols :	EMPTY	EMPTY
52	1255	2	-1	0	-1	while ( opli > numconst ) {	EMPTY	EMPTY
52	1256	2	-1	0	-1	nd _ tcheck ( * pptr ) ;	EMPTY	EMPTY
52	1257	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1258	2	-1	0	-1	tok2str ( nlpid _ values	tok2str	EMPTY
52	1259	3	-1	0	-1	strlit	EMPTY	EMPTY
52	1262	1	0	0	-1	if ( opli > numconst )	EMPTY	EMPTY
52	1263	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
52	1264	2	-1	0	-1	tptr ++	EMPTY	EMPTY
52	1265	2	-1	0	-1	opli --	EMPTY	EMPTY
52	1266	2	-1	0	-1	}	EMPTY	EMPTY
52	1267	3	-1	0	-1	break ;	EMPTY	EMPTY
52	1274	1	1	1	-1	case esis _ option _ qos _ maintenance :	EMPTY	EMPTY
52	1275	2	-1	0	-1	case esis _ option _ security :	EMPTY	EMPTY
52	1276	2	-1	0	-1	case esis _ option _ priority :	EMPTY	EMPTY
52	1277	2	-1	0	-1	case esis _ option _ address _ mask :	EMPTY	EMPTY
52	1278	3	-1	0	-1	case esis _ option _ snpa _ mask :	EMPTY	EMPTY
52	1280	1	0	0	-1	default :	EMPTY	EMPTY
52	1281	2	-1	0	-1	print _ unknown _ data ( ndo , tptr ,  " \n\t   "  , opli )	EMPTY	EMPTY
52	1282	2	-1	0	-1	break	EMPTY	EMPTY
52	1283	2	-1	0	-1	}	EMPTY	EMPTY
52	1284	2	-1	0	-1	if ( ndo -> ndo _ vflag > numconst )	ndo _ vflag	EMPTY
52	1285	2	-1	0	-1	print _ unknown _ data ( ndo  pptr  strlit  opli ) ;	EMPTY	EMPTY
52	1286	2	-1	0	-1	pptr += opli ;	EMPTY	EMPTY
52	1287	2	-1	0	-1	}	EMPTY	EMPTY
52	1288	2	-1	0	-1	trunc :	EMPTY	EMPTY
52	1289	2	-1	0	-1	return ;	EMPTY	EMPTY
52	1290	3	-1	0	-1	}	EMPTY	EMPTY
52	1292	1	0	0	-1	static void	EMPTY	EMPTY
52	1293	2	-1	0	-1	isis _ print _ mcid ( netdissect _ options * ndo	EMPTY	EMPTY
52	1294	2	-1	0	-1	const struct isis _ spb _ mcid * mcid )	EMPTY	EMPTY
52	1295	2	-1	0	-1	{	EMPTY	EMPTY
52	1296	3	-1	0	-1	int i ;	EMPTY	EMPTY
52	1298	1	0	0	0	nd _ print ( ( ndo  strlit  mcid -> format _ id ) ) ;	EMPTY	EMPTY
52	1300	1	0	0	0	for ( i = numconst ; i < numconst ; i ++ )	EMPTY	EMPTY
52	1301	2	-1	0	-1	{	EMPTY	EMPTY
52	1302	2	-1	0	-1	nd _ print ( ( ndo  strlit  mcid -> name [ i ] ) ) ;	name	EMPTY
52	1303	2	-1	0	-1	if ( mcid -> name [ i ] == '\\0' )	name	EMPTY
52	1304	2	-1	0	-1	break ;	EMPTY	EMPTY
52	1305	3	-1	0	-1	}	EMPTY	EMPTY
52	1307	1	0	0	0	nd _ print ( ( ndo  strlit  extract _ 16bits ( mcid -> revision _ lvl ) ) ) ;	extract _ 16bits	EMPTY
52	1309	1	0	0	0	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
52	1311	1	0	0	0	for ( i = numconst ; i < numconst ; i ++ )	EMPTY	EMPTY
52	1312	2	-1	0	-1	nd _ print ( ( ndo  strlit  mcid -> digest [ i ] ) ) ;	EMPTY	EMPTY
52	1313	3	-1	0	-1	}	EMPTY	EMPTY
52	1315	1	0	0	-1	static int	EMPTY	EMPTY
52	1316	2	-1	0	-1	isis _ print _ mt _ port _ cap _ subtlv ( netdissect _ options * ndo	EMPTY	EMPTY
52	1317	2	-1	0	-1	const uint8 _ t * tptr  int len )	len	EMPTY
52	1318	2	-1	0	-1	{	EMPTY	EMPTY
52	1319	2	-1	0	-1	int stlv _ type  stlv _ len ;	EMPTY	EMPTY
52	1320	2	-1	0	-1	const struct isis _ subtlv _ spb _ mcid * subtlv _ spb _ mcid ;	EMPTY	EMPTY
52	1321	3	-1	0	-1	int i ;	EMPTY	EMPTY
52	1323	1	0	0	0	while ( len > numconst )	len	EMPTY
52	1324	2	-1	0	-1	{	EMPTY	EMPTY
52	1325	2	-1	0	-1	stlv _ type = * ( tptr ++ ) ;	EMPTY	EMPTY
52	1326	3	-1	0	-1	stlv _ len = * ( tptr ++ ) ;	EMPTY	EMPTY
52	1329	1	1	1	1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1330	2	-1	0	-1	tok2str ( isis _ mt _ port _ cap _ subtlv _ values  strlit  stlv _ type )	tok2str	EMPTY
52	1331	2	-1	0	-1	stlv _ type	EMPTY	EMPTY
52	1332	3	-1	0	-1	stlv _ len ) ) ;	EMPTY	EMPTY
52	1335	1	1	1	-1	len = len - 2	len len	EMPTY
52	1337	1	0	0	0	switch ( stlv _ type )	EMPTY	EMPTY
52	1338	2	-1	0	-1	{	EMPTY	EMPTY
52	1339	2	-1	0	-1	case isis _ subtlv _ spb _ mcid :	EMPTY	EMPTY
52	1340	2	-1	0	-1	{	EMPTY	EMPTY
52	1341	2	-1	0	-1	if ( ! nd _ ttest2 ( * ( tptr ) , isis _ subtlv _ spb _ mcid _ min _ len ) )	EMPTY	EMPTY
52	1342	3	-1	0	-1	goto trunctlv	EMPTY	EMPTY
52	1344	1	0	0	-1	subtlv _ spb _ mcid = ( struct isis _ subtlv _ spb _ mcid * ) tptr	EMPTY	EMPTY
52	1346	1	0	0	0	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
52	1347	3	-1	0	-1	isis _ print _ mcid ( ndo , & ( subtlv _ spb _ mcid -> mcid ) )	EMPTY	EMPTY
52	1352	1	1	1	1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
52	1353	3	-1	0	-1	isis _ print _ mcid ( ndo , & ( subtlv _ spb _ mcid -> aux _ mcid ) )	EMPTY	EMPTY
52	1357	1	1	1	-1	tptr = tptr + sizeof ( struct isis _ subtlv _ spb _ mcid )	EMPTY	EMPTY
52	1358	3	-1	0	-1	len = len - sizeof ( struct isis _ subtlv _ spb _ mcid )	len len	EMPTY
52	1360	1	0	0	-1	break	EMPTY	EMPTY
52	1361	3	-1	0	-1	}	EMPTY	EMPTY
52	1363	1	0	0	-1	case isis _ subtlv _ spb _ digest :	EMPTY	EMPTY
52	1364	2	-1	0	-1	{	EMPTY	EMPTY
52	1365	2	-1	0	-1	if ( ! nd _ ttest2 ( * ( tptr )  isis _ subtlv _ spb _ digest _ min _ len ) )	EMPTY	EMPTY
52	1366	3	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	1368	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1369	2	-1	0	-1	( * ( tptr ) >> numconst )  ( ( ( * tptr ) >> numconst ) & numconst )	EMPTY	EMPTY
52	1370	3	-1	0	-1	( ( * ( tptr ) >> numconst ) & numconst )  ( ( * tptr ) & numconst ) ) ) ;	EMPTY	EMPTY
52	1372	1	0	0	-1	tptr ++ ;	EMPTY	EMPTY
52	1374	1	0	0	0	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
52	1376	1	0	0	0	for ( i = numconst ; i <= numconst ; i ++ )	EMPTY	EMPTY
52	1377	2	-1	0	-1	{	EMPTY	EMPTY
52	1378	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 32bits ( tptr ) ) ) ;	EMPTY	EMPTY
52	1379	2	-1	0	-1	if ( i % numconst == numconst && i != numconst )	EMPTY	EMPTY
52	1380	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
52	1381	2	-1	0	-1	tptr = tptr + numconst ;	EMPTY	EMPTY
52	1382	3	-1	0	-1	}	EMPTY	EMPTY
52	1384	1	0	0	-1	len = len - isis _ subtlv _ spb _ digest _ min _ len ;	len len	EMPTY
52	1386	1	0	0	-1	break ;	EMPTY	EMPTY
52	1387	3	-1	0	-1	}	EMPTY	EMPTY
52	1389	1	0	0	-1	case isis _ subtlv _ spb _ bvid :	EMPTY	EMPTY
52	1390	2	-1	0	-1	{	EMPTY	EMPTY
52	1391	2	-1	0	-1	if ( ! nd _ ttest2 ( * ( tptr )  stlv _ len ) )	EMPTY	EMPTY
52	1392	3	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	1394	1	0	0	0	while ( len )	len	EMPTY
52	1395	2	-1	0	-1	{	EMPTY	EMPTY
52	1396	2	-1	0	-1	if ( ! nd _ ttest2 ( * ( tptr )  isis _ subtlv _ spb _ bvid _ min _ len ) )	EMPTY	EMPTY
52	1397	3	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	1399	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1400	3	-1	0	-1	extract _ 32bits ( tptr ) ) ) ;	EMPTY	EMPTY
52	1402	1	0	0	-1	tptr = tptr + numconst ;	EMPTY	EMPTY
52	1404	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1405	2	-1	0	-1	( extract _ 16bits ( tptr ) >> numconst )	extract _ 16bits	EMPTY
52	1406	2	-1	0	-1	( extract _ 16bits ( tptr ) >> numconst ) & numconst	extract _ 16bits	EMPTY
52	1407	3	-1	0	-1	( extract _ 16bits ( tptr ) >> numconst ) & numconst ) ) ;	extract _ 16bits	EMPTY
52	1409	1	0	0	-1	tptr = tptr + numconst ;	EMPTY	EMPTY
52	1410	2	-1	0	-1	len = len - isis _ subtlv _ spb _ bvid _ min _ len ;	len len	EMPTY
52	1411	3	-1	0	-1	}	EMPTY	EMPTY
52	1413	1	0	0	-1	break ;	EMPTY	EMPTY
52	1414	3	-1	0	-1	}	EMPTY	EMPTY
52	1416	1	0	0	-1	default :	EMPTY	EMPTY
52	1417	2	-1	0	-1	break ;	EMPTY	EMPTY
52	1418	2	-1	0	-1	}	EMPTY	EMPTY
52	1419	3	-1	0	-1	}	EMPTY	EMPTY
52	1421	1	0	0	0	return numconst ;	EMPTY	EMPTY
52	1423	1	0	0	-1	trunctlv :	EMPTY	EMPTY
52	1424	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
52	1425	2	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	1426	3	-1	0	-1	}	EMPTY	EMPTY
52	1428	1	0	0	-1	static int	EMPTY	EMPTY
52	1429	2	-1	0	-1	isis _ print _ mt _ capability _ subtlv ( netdissect _ options * ndo	EMPTY	EMPTY
52	1430	2	-1	0	-1	const uint8 _ t * tptr  int len )	len	EMPTY
52	1431	2	-1	0	-1	{	EMPTY	EMPTY
52	1432	3	-1	0	-1	int stlv _ type  stlv _ len  tmp ;	EMPTY	EMPTY
52	1434	1	0	0	0	while ( len > numconst )	len	EMPTY
52	1435	2	-1	0	-1	{	EMPTY	EMPTY
52	1436	2	-1	0	-1	stlv _ type = * ( tptr ++ ) ;	EMPTY	EMPTY
52	1437	3	-1	0	-1	stlv _ len = * ( tptr ++ ) ;	EMPTY	EMPTY
52	1440	1	1	1	1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1441	2	-1	0	-1	tok2str ( isis _ mt _ capability _ subtlv _ values  strlit  stlv _ type )	tok2str	EMPTY
52	1442	2	-1	0	-1	stlv _ type	EMPTY	EMPTY
52	1443	3	-1	0	-1	stlv _ len ) ) ;	EMPTY	EMPTY
52	1445	1	0	0	-1	len = len - 2	len len	EMPTY
52	1447	1	0	0	0	switch ( stlv _ type )	EMPTY	EMPTY
52	1448	2	-1	0	-1	{	EMPTY	EMPTY
52	1449	3	-1	0	-1	case isis _ subtlv _ spb _ instance :	EMPTY	EMPTY
52	1451	1	0	0	0	if ( ! nd _ ttest2 ( * ( tptr ) , isis _ subtlv _ spb _ instance _ min _ len ) )	EMPTY	EMPTY
52	1452	3	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	1454	1	0	0	0	nd _ print ( ( ndo ,  " \n\t        cist root-id: %08x "  , extract _ 32bits ( tptr ) ) ) ;	EMPTY	EMPTY
52	1455	2	-1	0	-1	tptr = tptr + 4 ;	EMPTY	EMPTY
52	1456	2	-1	0	-1	nd _ print ( ( ndo ,  "  %08x "  , extract _ 32bits ( tptr ) ) ) ;	EMPTY	EMPTY
52	1457	2	-1	0	-1	tptr = tptr + 4 ;	EMPTY	EMPTY
52	1458	2	-1	0	-1	nd _ print ( ( ndo ,  " , path cost: %08x "  , extract _ 32bits ( tptr ) ) ) ;	EMPTY	EMPTY
52	1459	2	-1	0	-1	tptr = tptr + 4 ;	EMPTY	EMPTY
52	1460	2	-1	0	-1	nd _ print ( ( ndo ,  " , prio: %d "  , extract _ 16bits ( tptr ) ) ) ;	extract _ 16bits	EMPTY
52	1461	2	-1	0	-1	tptr = tptr + 2 ;	EMPTY	EMPTY
52	1462	2	-1	0	-1	nd _ print ( ( ndo ,  " \n\t        res: %d "  ,	EMPTY	EMPTY
52	1463	2	-1	0	-1	extract _ 16bits ( tptr ) >> 5 ) ) ;	extract _ 16bits	EMPTY
52	1464	2	-1	0	-1	nd _ print ( ( ndo ,  " , v: %d "  ,	EMPTY	EMPTY
52	1465	2	-1	0	-1	( extract _ 16bits ( tptr ) >> 4 ) & 0x0001 ) ) ;	extract _ 16bits	EMPTY
52	1466	2	-1	0	-1	nd _ print ( ( ndo ,  " , spsource-id: %d "  ,	EMPTY	EMPTY
52	1467	2	-1	0	-1	( extract _ 32bits ( tptr ) & 0x000fffff ) ) ) ;	EMPTY	EMPTY
52	1468	2	-1	0	-1	tptr = tptr + 4 ;	EMPTY	EMPTY
52	1469	3	-1	0	-1	nd _ print ( ( ndo ,  " , no of trees: %x "  , * ( tptr ) ) ) ;	EMPTY	EMPTY
52	1471	1	0	0	-1	tmp = * ( tptr ++ ) ;	EMPTY	EMPTY
52	1473	1	0	0	-1	len = len - isis _ subtlv _ spb _ instance _ min _ len ;	len len	EMPTY
52	1475	1	0	0	0	while ( tmp )	EMPTY	EMPTY
52	1476	2	-1	0	-1	{	EMPTY	EMPTY
52	1477	2	-1	0	-1	if ( ! nd _ ttest2 ( * ( tptr ) , isis _ subtlv _ spb _ instance _ vlan _ tuple _ len ) )	EMPTY	EMPTY
52	1478	3	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	1480	1	0	0	0	nd _ print ( ( ndo ,  " \n\t         u:%d, m:%d, a:%d, res:%d "  ,	EMPTY	EMPTY
52	1481	2	-1	0	-1	* ( tptr ) >> 7 , ( * ( tptr ) >> 6 ) & 0x01 ,	EMPTY	EMPTY
52	1482	3	-1	0	-1	( * ( tptr ) >> 5 ) & 0x01 , ( * ( tptr ) & 0x1f ) ) ) ;	EMPTY	EMPTY
52	1484	1	0	0	-1	tptr ++ ;	EMPTY	EMPTY
52	1486	1	0	0	0	nd _ print ( ( ndo ,  " , ect: %08x "  , extract _ 32bits ( tptr ) ) ) ;	EMPTY	EMPTY
52	1488	1	0	0	-1	tptr = tptr + 4 ;	EMPTY	EMPTY
52	1490	1	0	0	0	nd _ print ( ( ndo ,  " , bvid: %d, spvid: %d "  ,	EMPTY	EMPTY
52	1491	2	-1	0	-1	( extract _ 24bits ( tptr ) >> 12 ) & 0x000fff ,	EMPTY	EMPTY
52	1492	3	-1	0	-1	extract _ 24bits ( tptr ) & 0x000fff ) ) ;	EMPTY	EMPTY
52	1494	1	0	0	-1	tptr = tptr + 3 ;	EMPTY	EMPTY
52	1495	2	-1	0	-1	len = len - isis _ subtlv _ spb _ instance _ vlan _ tuple _ len ;	len len	EMPTY
52	1496	2	-1	0	-1	tmp -- ;	EMPTY	EMPTY
52	1497	3	-1	0	-1	}	EMPTY	EMPTY
52	1499	1	0	0	-1	break ;	EMPTY	EMPTY
52	1501	1	0	0	-1	case isis _ subtlv _ spbm _ si :	EMPTY	EMPTY
52	1503	1	0	0	0	if ( ! nd _ ttest2 ( * ( tptr ) , 6 ) )	EMPTY	EMPTY
52	1504	3	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	1506	1	0	0	0	nd _ print ( ( ndo ,  " \n\t        bmac: %08x "  , extract _ 32bits ( tptr ) ) ) ;	EMPTY	EMPTY
52	1507	2	-1	0	-1	tptr = tptr + 4 ;	EMPTY	EMPTY
52	1508	2	-1	0	-1	nd _ print ( ( ndo ,  " %04x "  , extract _ 16bits ( tptr ) ) ) ;	extract _ 16bits	EMPTY
52	1509	3	-1	0	-1	tptr = tptr + 2 ;	EMPTY	EMPTY
52	1511	1	0	0	0	nd _ print ( ( ndo ,  " , res: %d, vid: %d "  , extract _ 16bits ( tptr ) >> 12 ,	extract _ 16bits	EMPTY
52	1512	3	-1	0	-1	( extract _ 16bits ( tptr ) ) & 0x0fff ) ) ;	extract _ 16bits	EMPTY
52	1514	1	0	0	-1	tptr = tptr + 2 ;	EMPTY	EMPTY
52	1515	2	-1	0	-1	len = len - 8 ;	len len	EMPTY
52	1516	3	-1	0	-1	stlv _ len = stlv _ len - 8 ;	EMPTY	EMPTY
52	1518	1	0	0	0	while ( stlv _ len )	EMPTY	EMPTY
52	1519	2	-1	0	-1	{	EMPTY	EMPTY
52	1520	2	-1	0	-1	nd _ print ( ( ndo ,  " \n\t        t: %d, r: %d, res: %d, isid: %d "  ,	EMPTY	EMPTY
52	1521	2	-1	0	-1	( extract _ 32bits ( tptr ) >> 31 ) ,	EMPTY	EMPTY
52	1522	2	-1	0	-1	( extract _ 32bits ( tptr ) >> 30 ) & 0x01 ,	EMPTY	EMPTY
52	1523	2	-1	0	-1	( extract _ 32bits ( tptr ) >> 24 ) & 0x03f ,	EMPTY	EMPTY
52	1524	3	-1	0	-1	( extract _ 32bits ( tptr ) ) & 0x0ffffff ) ) ;	EMPTY	EMPTY
52	1526	1	0	0	-1	tptr = tptr + 4 ;	EMPTY	EMPTY
52	1527	2	-1	0	-1	len = len - 4 ;	len len	EMPTY
52	1528	2	-1	0	-1	stlv _ len = stlv _ len - 4 ;	EMPTY	EMPTY
52	1529	3	-1	0	-1	}	EMPTY	EMPTY
52	1531	1	0	0	-1	break ;	EMPTY	EMPTY
52	1533	1	0	0	-1	default :	EMPTY	EMPTY
52	1534	2	-1	0	-1	break ;	EMPTY	EMPTY
52	1535	2	-1	0	-1	}	EMPTY	EMPTY
52	1536	2	-1	0	-1	}	EMPTY	EMPTY
52	1537	3	-1	0	-1	return numconst ;	EMPTY	EMPTY
52	1539	1	0	0	-1	trunctlv :	EMPTY	EMPTY
52	1540	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
52	1541	2	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	1542	3	-1	0	-1	}	EMPTY	EMPTY
52	1545	1	0	0	-1	static char *	EMPTY	EMPTY
52	1546	2	-1	0	-1	isis _ print _ id ( const uint8 _ t * cp  int id _ len )	isis _ print _ id	EMPTY
52	1547	2	-1	0	-1	{	EMPTY	EMPTY
52	1548	2	-1	0	-1	int i ;	EMPTY	EMPTY
52	1549	2	-1	0	-1	static char id [ sizeof (  " xxxx.xxxx.xxxx.yy-zz "  ) ] ;	EMPTY	EMPTY
52	1550	3	-1	0	-1	char * pos = id ;	EMPTY	EMPTY
52	1552	1	0	0	0	for ( i = 1 ; i <= system _ id _ len ; i ++ ) {	EMPTY	EMPTY
52	1553	2	-1	0	-1	snprintf ( pos , sizeof ( id ) - ( pos - id ) ,  " %02x "  , * cp ++ ) ;	EMPTY	EMPTY
52	1554	2	-1	0	-1	pos += strlen ( pos ) ;	EMPTY	strlen
52	1555	2	-1	0	-1	if ( i == 2 || i == 4 )	EMPTY	EMPTY
52	1556	2	-1	0	-1	* pos ++ = '.' ;	EMPTY	EMPTY
52	1557	2	-1	0	-1	}	EMPTY	EMPTY
52	1558	2	-1	0	-1	if ( id _ len >= node _ id _ len ) {	EMPTY	EMPTY
52	1559	2	-1	0	-1	snprintf ( pos , sizeof ( id ) - ( pos - id ) ,  " .%02x "  , * cp ++ ) ;	EMPTY	EMPTY
52	1560	2	-1	0	-1	pos += strlen ( pos ) ;	EMPTY	strlen
52	1561	2	-1	0	-1	}	EMPTY	EMPTY
52	1562	2	-1	0	-1	if ( id _ len == lsp _ id _ len )	EMPTY	EMPTY
52	1563	2	-1	0	-1	snprintf ( pos  sizeof ( id ) - ( pos - id )  strlit  * cp ) ;	EMPTY	EMPTY
52	1564	2	-1	0	-1	return ( id )	EMPTY	EMPTY
52	1565	3	-1	0	-1	}	EMPTY	EMPTY
52	1568	1	0	0	-1	static int	EMPTY	EMPTY
52	1569	2	-1	0	-1	isis _ print _ metric _ block ( netdissect _ options * ndo	isis _ print _ metric _ block	EMPTY
52	1570	2	-1	0	-1	const struct isis _ metric _ block * isis _ metric _ block )	EMPTY	EMPTY
52	1571	2	-1	0	-1	{	EMPTY	EMPTY
52	1572	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1573	2	-1	0	-1	isis _ lsp _ tlv _ metric _ value ( isis _ metric _ block -> metric _ default )	EMPTY	EMPTY
52	1574	2	-1	0	-1	isis _ lsp _ tlv _ metric _ ie ( isis _ metric _ block -> metric _ default ) ? strlit : strlit ) ) ;	EMPTY	EMPTY
52	1575	2	-1	0	-1	if ( ! isis _ lsp _ tlv _ metric _ supported ( isis _ metric _ block -> metric _ delay ) )	EMPTY	EMPTY
52	1576	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1577	2	-1	0	-1	isis _ lsp _ tlv _ metric _ value ( isis _ metric _ block -> metric _ delay )	EMPTY	EMPTY
52	1578	2	-1	0	-1	isis _ lsp _ tlv _ metric _ ie ( isis _ metric _ block -> metric _ delay ) ? strlit : strlit ) ) ;	EMPTY	EMPTY
52	1579	2	-1	0	-1	if ( ! isis _ lsp _ tlv _ metric _ supported ( isis _ metric _ block -> metric _ expense ) )	EMPTY	EMPTY
52	1580	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1581	2	-1	0	-1	isis _ lsp _ tlv _ metric _ value ( isis _ metric _ block -> metric _ expense )	EMPTY	EMPTY
52	1582	2	-1	0	-1	isis _ lsp _ tlv _ metric _ ie ( isis _ metric _ block -> metric _ expense ) ? strlit : strlit ) ) ;	EMPTY	EMPTY
52	1583	2	-1	0	-1	if ( ! isis _ lsp _ tlv _ metric _ supported ( isis _ metric _ block -> metric _ error ) )	EMPTY	EMPTY
52	1584	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1585	2	-1	0	-1	isis _ lsp _ tlv _ metric _ value ( isis _ metric _ block -> metric _ error )	EMPTY	EMPTY
52	1586	3	-1	0	-1	isis _ lsp _ tlv _ metric _ ie ( isis _ metric _ block -> metric _ error ) ? strlit : strlit ) ) ;	EMPTY	EMPTY
52	1588	1	0	0	-1	return ( 1 )	EMPTY	EMPTY
52	1589	3	-1	0	-1	}	EMPTY	EMPTY
52	1591	1	0	0	-1	static int	EMPTY	EMPTY
52	1592	2	-1	0	-1	isis _ print _ tlv _ ip _ reach ( netdissect _ options * ndo	EMPTY	EMPTY
52	1593	2	-1	0	-1	const uint8 _ t * cp  const char * ident  int length )	EMPTY	EMPTY
52	1594	2	-1	0	-1	{	EMPTY	EMPTY
52	1595	2	-1	0	-1	int prefix _ len ;	EMPTY	EMPTY
52	1596	3	-1	0	-1	const struct isis _ tlv _ ip _ reach * tlv _ ip _ reach ;	EMPTY	EMPTY
52	1598	1	0	0	-1	tlv _ ip _ reach = ( const struct isis _ tlv _ ip _ reach * ) cp ;	EMPTY	EMPTY
52	1600	1	0	0	0	while ( length > numconst ) {	EMPTY	EMPTY
52	1601	2	-1	0	-1	if ( ( size _ t ) length < sizeof ( * tlv _ ip _ reach ) ) {	EMPTY	EMPTY
52	1602	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1603	2	-1	0	-1	length	EMPTY	EMPTY
52	1604	2	-1	0	-1	( unsigned long ) sizeof ( * tlv _ ip _ reach ) ) ) ;	EMPTY	EMPTY
52	1605	2	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	1606	3	-1	0	-1	}	EMPTY	EMPTY
52	1608	1	0	0	0	if ( ! nd _ ttest ( * tlv _ ip _ reach ) )	EMPTY	EMPTY
52	1609	3	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	1611	1	0	0	-1	prefix _ len = mask2plen ( extract _ 32bits ( tlv _ ip _ reach -> mask ) ) ;	EMPTY	EMPTY
52	1613	1	0	0	0	if ( prefix _ len == - numconst )	EMPTY	EMPTY
52	1614	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1615	2	-1	0	-1	ident	EMPTY	EMPTY
52	1616	2	-1	0	-1	ipaddr _ string ( ndo  ( tlv _ ip _ reach -> prefix ) )	prefix	EMPTY
52	1617	2	-1	0	-1	ipaddr _ string ( ndo  ( tlv _ ip _ reach -> mask ) ) ) ) ;	EMPTY	EMPTY
52	1618	2	-1	0	-1	else	EMPTY	EMPTY
52	1619	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1620	2	-1	0	-1	ident	EMPTY	EMPTY
52	1621	2	-1	0	-1	ipaddr _ string ( ndo  ( tlv _ ip _ reach -> prefix ) )	prefix	EMPTY
52	1622	3	-1	0	-1	prefix _ len ) ) ;	EMPTY	EMPTY
52	1624	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1625	2	-1	0	-1	isis _ lsp _ tlv _ metric _ updown ( tlv _ ip _ reach -> isis _ metric _ block . metric _ default ) ? strlit : strlit	EMPTY	EMPTY
52	1626	2	-1	0	-1	isis _ lsp _ tlv _ metric _ value ( tlv _ ip _ reach -> isis _ metric _ block . metric _ default )	EMPTY	EMPTY
52	1627	3	-1	0	-1	isis _ lsp _ tlv _ metric _ ie ( tlv _ ip _ reach -> isis _ metric _ block . metric _ default ) ? strlit : strlit ) ) ;	EMPTY	EMPTY
52	1629	1	0	0	0	if ( ! isis _ lsp _ tlv _ metric _ supported ( tlv _ ip _ reach -> isis _ metric _ block . metric _ delay ) )	EMPTY	EMPTY
52	1630	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1631	2	-1	0	-1	ident	EMPTY	EMPTY
52	1632	2	-1	0	-1	isis _ lsp _ tlv _ metric _ value ( tlv _ ip _ reach -> isis _ metric _ block . metric _ delay )	EMPTY	EMPTY
52	1633	3	-1	0	-1	isis _ lsp _ tlv _ metric _ ie ( tlv _ ip _ reach -> isis _ metric _ block . metric _ delay ) ? strlit : strlit ) ) ;	EMPTY	EMPTY
52	1635	1	0	0	0	if ( ! isis _ lsp _ tlv _ metric _ supported ( tlv _ ip _ reach -> isis _ metric _ block . metric _ expense ) )	EMPTY	EMPTY
52	1636	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1637	2	-1	0	-1	ident	EMPTY	EMPTY
52	1638	2	-1	0	-1	isis _ lsp _ tlv _ metric _ value ( tlv _ ip _ reach -> isis _ metric _ block . metric _ expense )	EMPTY	EMPTY
52	1639	3	-1	0	-1	isis _ lsp _ tlv _ metric _ ie ( tlv _ ip _ reach -> isis _ metric _ block . metric _ expense ) ? strlit : strlit ) ) ;	EMPTY	EMPTY
52	1641	1	0	0	0	if ( ! isis _ lsp _ tlv _ metric _ supported ( tlv _ ip _ reach -> isis _ metric _ block . metric _ error ) )	EMPTY	EMPTY
52	1642	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1643	2	-1	0	-1	ident	EMPTY	EMPTY
52	1644	2	-1	0	-1	isis _ lsp _ tlv _ metric _ value ( tlv _ ip _ reach -> isis _ metric _ block . metric _ error )	EMPTY	EMPTY
52	1645	3	-1	0	-1	isis _ lsp _ tlv _ metric _ ie ( tlv _ ip _ reach -> isis _ metric _ block . metric _ error ) ? strlit : strlit ) ) ;	EMPTY	EMPTY
52	1647	1	0	0	-1	length -= sizeof ( struct isis _ tlv _ ip _ reach ) ;	EMPTY	EMPTY
52	1648	2	-1	0	-1	tlv _ ip _ reach ++ ;	EMPTY	EMPTY
52	1649	2	-1	0	-1	}	EMPTY	EMPTY
52	1650	2	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	1651	3	-1	0	-1	}	EMPTY	EMPTY
52	1658	1	1	1	-1	static int	EMPTY	EMPTY
52	1659	2	-1	0	-1	isis _ print _ ip _ reach _ subtlv ( netdissect _ options * ndo	EMPTY	EMPTY
52	1660	2	-1	0	-1	const uint8 _ t * tptr  int subt  int subl	EMPTY	EMPTY
52	1661	2	-1	0	-1	const char * ident )	EMPTY	EMPTY
52	1662	2	-1	0	-1	{	EMPTY	EMPTY
52	1664	2	-1	1	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1665	2	-1	0	-1	ident  tok2str ( isis _ ext _ ip _ reach _ subtlv _ values  strlit  subt )	tok2str	EMPTY
52	1666	3	-1	0	-1	subt  subl ) ) ;	EMPTY	EMPTY
52	1668	1	0	0	0	if ( ! nd _ ttest2 ( * tptr , subl ) )	EMPTY	EMPTY
52	1669	3	-1	0	-1	goto trunctlv	EMPTY	EMPTY
52	1671	1	1	0	1	switch ( subt ) {	EMPTY	EMPTY
52	1672	2	-1	1	-1	case isis _ subtlv _ extd _ ip _ reach _ mgmt _ prefix _ color :	EMPTY	EMPTY
52	1673	2	-1	0	-1	case isis _ subtlv _ extd _ ip _ reach _ admin _ tag32 :	EMPTY	EMPTY
52	1674	2	-1	0	-1	while ( subl >= numconst ) {	EMPTY	EMPTY
52	1675	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1676	2	-1	0	-1	extract _ 32bits ( tptr )	EMPTY	EMPTY
52	1677	2	-1	0	-1	extract _ 32bits ( tptr ) ) ) ;	EMPTY	EMPTY
52	1678	2	-1	0	-1	tptr += 4	EMPTY	EMPTY
52	1679	2	-1	0	-1	subl -= 4	EMPTY	EMPTY
52	1680	2	-1	0	-1	}	EMPTY	EMPTY
52	1681	2	-1	0	-1	break	EMPTY	EMPTY
52	1682	2	-1	0	-1	case isis _ subtlv _ extd _ ip _ reach _ admin _ tag64 :	EMPTY	EMPTY
52	1683	2	-1	0	-1	while ( subl >= 8 ) {	EMPTY	EMPTY
52	1684	2	-1	0	-1	nd _ print ( ( ndo ,  " , 0x%08x%08x "  ,	EMPTY	EMPTY
52	1685	2	-1	0	-1	extract _ 32bits ( tptr ) ,	EMPTY	EMPTY
52	1686	2	-1	0	-1	extract _ 32bits ( tptr + 4 ) ) ) ;	EMPTY	EMPTY
52	1687	2	-1	0	-1	tptr += 8 ;	EMPTY	EMPTY
52	1688	2	-1	0	-1	subl -= 8 ;	EMPTY	EMPTY
52	1689	2	-1	0	-1	}	EMPTY	EMPTY
52	1690	2	-1	0	-1	break	EMPTY	EMPTY
52	1691	2	-1	0	-1	default :	EMPTY	EMPTY
52	1692	2	-1	0	-1	if ( ! print _ unknown _ data ( ndo , tptr ,  " \n\t\t     "  , subl ) )	EMPTY	EMPTY
52	1693	2	-1	0	-1	return ( 0 )	EMPTY	EMPTY
52	1694	2	-1	0	-1	break	EMPTY	EMPTY
52	1695	2	-1	0	-1	}	EMPTY	EMPTY
52	1696	3	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	1698	1	0	0	-1	trunctlv :	EMPTY	EMPTY
52	1699	2	-1	0	-1	nd _ print ( ( ndo  strlit  ident ) ) ;	EMPTY	EMPTY
52	1700	2	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	1701	3	-1	0	-1	}	EMPTY	EMPTY
52	1708	1	1	1	-1	static int	EMPTY	EMPTY
52	1709	2	-1	0	-1	isis _ print _ is _ reach _ subtlv ( netdissect _ options * ndo	EMPTY	EMPTY
52	1710	2	-1	0	-1	const uint8 _ t * tptr  u _ int subt  u _ int subl	EMPTY	EMPTY
52	1711	2	-1	0	-1	const char * ident )	EMPTY	EMPTY
52	1712	2	-1	0	-1	{	EMPTY	EMPTY
52	1713	2	-1	0	-1	u _ int te _ class , priority _ level , gmpls _ switch _ cap ;	EMPTY	EMPTY
52	1714	2	-1	0	-1	union {	EMPTY	EMPTY
52	1715	2	-1	0	-1	float f ;	f	EMPTY
52	1716	2	-1	0	-1	uint32 _ t i ;	EMPTY	EMPTY
52	1717	3	-1	0	-1	} bw ;	bw	EMPTY
52	1720	1	1	1	1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1721	2	-1	0	-1	ident  tok2str ( isis _ ext _ is _ reach _ subtlv _ values  strlit  subt )	tok2str	EMPTY
52	1722	3	-1	0	-1	subt  subl ) ) ;	EMPTY	EMPTY
52	1724	1	0	0	0	if ( ! nd _ ttest2 ( * tptr , subl ) )	EMPTY	EMPTY
52	1725	3	-1	0	-1	goto trunctlv	EMPTY	EMPTY
52	1727	1	0	0	1	switch ( subt ) {	EMPTY	EMPTY
52	1728	2	-1	0	-1	case isis _ subtlv _ ext _ is _ reach _ admin _ group :	EMPTY	EMPTY
52	1729	2	-1	0	-1	case isis _ subtlv _ ext _ is _ reach _ link _ local _ remote _ id :	EMPTY	EMPTY
52	1730	2	-1	0	-1	case isis _ subtlv _ ext _ is _ reach _ link _ remote _ id :	EMPTY	EMPTY
52	1731	2	-1	0	-1	if ( subl >= numconst ) {	EMPTY	EMPTY
52	1732	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 32bits ( tptr ) ) ) ;	EMPTY	EMPTY
52	1733	2	-1	0	-1	if ( subl == numconst )	EMPTY	EMPTY
52	1734	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 32bits ( tptr + numconst ) ) ) ;	EMPTY	EMPTY
52	1735	2	-1	0	-1	}	EMPTY	EMPTY
52	1736	2	-1	0	-1	break ;	EMPTY	EMPTY
52	1737	2	-1	0	-1	case isis _ subtlv _ ext _ is _ reach _ ipv4 _ intf _ addr :	EMPTY	EMPTY
52	1738	2	-1	0	-1	case isis _ subtlv _ ext _ is _ reach _ ipv4 _ neighbor _ addr :	EMPTY	EMPTY
52	1739	2	-1	0	-1	if ( subl >= sizeof ( struct in _ addr ) )	EMPTY	EMPTY
52	1740	2	-1	0	-1	nd _ print ( ( ndo  strlit  ipaddr _ string ( ndo  tptr ) ) ) ;	EMPTY	EMPTY
52	1741	2	-1	0	-1	break ;	EMPTY	EMPTY
52	1742	2	-1	0	-1	case isis _ subtlv _ ext _ is _ reach _ max _ link _ bw :	EMPTY	EMPTY
52	1743	2	-1	0	-1	case isis _ subtlv _ ext _ is _ reach _ reservable _ bw :	EMPTY	EMPTY
52	1744	2	-1	0	-1	if ( subl >= numconst ) {	EMPTY	EMPTY
52	1745	2	-1	0	-1	bw . i = extract _ 32bits ( tptr ) ;	bw	EMPTY
52	1746	2	-1	0	-1	nd _ print ( ( ndo  strlit  bw . f * numconst / numconst ) ) ;	bw f	EMPTY
52	1747	2	-1	0	-1	}	EMPTY	EMPTY
52	1748	2	-1	0	-1	break ;	EMPTY	EMPTY
52	1749	2	-1	0	-1	case isis _ subtlv _ ext _ is _ reach _ unreserved _ bw :	EMPTY	EMPTY
52	1750	2	-1	0	-1	if ( subl >= numconst ) {	EMPTY	EMPTY
52	1751	2	-1	0	-1	for ( te _ class = numconst ; te _ class < numconst ; te _ class ++ ) {	EMPTY	EMPTY
52	1752	2	-1	0	-1	bw . i = extract _ 32bits ( tptr ) ;	bw	EMPTY
52	1753	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1754	2	-1	0	-1	ident	EMPTY	EMPTY
52	1755	2	-1	0	-1	te _ class	EMPTY	EMPTY
52	1756	3	-1	0	-1	bw . f * numconst / numconst ) ) ;	bw f	EMPTY
52	1757	1	1	0	-1	tptr += numconst ;	EMPTY	EMPTY
52	1758	2	-1	0	-1	}	EMPTY	EMPTY
52	1759	2	-1	0	-1	}	EMPTY	EMPTY
52	1760	2	-1	0	-1	break ;	EMPTY	EMPTY
52	1761	2	-1	1	-1	case isis _ subtlv _ ext _ is _ reach _ bw _ constraints :	EMPTY	EMPTY
52	1762	2	-1	0	-1	case isis _ subtlv _ ext _ is _ reach _ bw _ constraints _ old :	EMPTY	EMPTY
52	1763	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1764	2	-1	0	-1	ident	EMPTY	EMPTY
52	1765	3	-1	0	-1	tok2str ( diffserv _ te _ bc _ values  strlit  * tptr )	tok2str	EMPTY
52	1767	1	1	0	-1	tptr ++	EMPTY	EMPTY
52	1769	2	-1	1	-1	for ( te _ class = 0 ; te _ class < ( subl - 1 ) / 4 ; te _ class ++ ) {	EMPTY	EMPTY
52	1770	2	-1	0	-1	bw . i = extract _ 32bits ( tptr ) ;	bw	EMPTY
52	1771	2	-1	0	-1	nd _ print ( ( ndo ,  " %s  bandwidth constraint ct%u: %.3f mbps "  ,	EMPTY	EMPTY
52	1772	2	-1	0	-1	ident ,	EMPTY	EMPTY
52	1773	2	-1	0	-1	te _ class ,	EMPTY	EMPTY
52	1774	2	-1	0	-1	bw . f * 8 / 1000000 ) ) ;	bw f	EMPTY
52	1775	2	-1	0	-1	tptr += 4 ;	EMPTY	EMPTY
52	1776	2	-1	0	-1	}	EMPTY	EMPTY
52	1777	2	-1	0	-1	break	EMPTY	EMPTY
52	1778	2	-1	0	-1	case isis _ subtlv _ ext _ is _ reach _ te _ metric :	EMPTY	EMPTY
52	1779	2	-1	0	-1	if ( subl >= numconst )	EMPTY	EMPTY
52	1780	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 24bits ( tptr ) ) ) ;	EMPTY	EMPTY
52	1781	2	-1	0	-1	break	EMPTY	EMPTY
52	1782	2	-1	0	-1	case isis _ subtlv _ ext _ is _ reach _ link _ attribute :	EMPTY	EMPTY
52	1783	2	-1	0	-1	if ( subl == 2 ) {	EMPTY	EMPTY
52	1784	2	-1	0	-1	nd _ print ( ( ndo ,  " , [ %s ] (0x%04x) "  ,	EMPTY	EMPTY
52	1785	2	-1	0	-1	bittok2str ( isis _ subtlv _ link _ attribute _ values ,	EMPTY	EMPTY
52	1786	2	-1	0	-1	" unknown "  ,	EMPTY	EMPTY
52	1787	2	-1	0	-1	extract _ 16bits ( tptr ) ) ,	extract _ 16bits	EMPTY
52	1788	2	-1	0	-1	extract _ 16bits ( tptr ) ) ) ;	extract _ 16bits	EMPTY
52	1789	2	-1	0	-1	}	EMPTY	EMPTY
52	1790	2	-1	0	-1	break	EMPTY	EMPTY
52	1791	2	-1	0	-1	case isis _ subtlv _ ext _ is _ reach _ link _ protection _ type :	EMPTY	EMPTY
52	1792	2	-1	0	-1	if ( subl >= 2 ) {	EMPTY	EMPTY
52	1793	2	-1	0	-1	nd _ print ( ( ndo ,  " , %s, priority %u "  ,	EMPTY	EMPTY
52	1794	2	-1	0	-1	bittok2str ( gmpls _ link _ prot _ values ,  " none "  , * tptr ) ,	EMPTY	EMPTY
52	1795	2	-1	0	-1	* ( tptr + 1 ) ) ) ;	EMPTY	EMPTY
52	1796	2	-1	0	-1	}	EMPTY	EMPTY
52	1797	3	-1	0	-1	break	EMPTY	EMPTY
52	1798	1	0	0	-1	case isis _ subtlv _ spb _ metric :	EMPTY	EMPTY
52	1799	2	-1	0	-1	if ( subl >= 6 ) {	EMPTY	EMPTY
52	1800	2	-1	0	-1	nd _ print ( ( ndo ,  " , lm: %u "  , extract _ 24bits ( tptr ) ) ) ;	EMPTY	EMPTY
52	1801	2	-1	0	-1	tptr = tptr + 3 ;	EMPTY	EMPTY
52	1802	2	-1	0	-1	nd _ print ( ( ndo ,  " , p: %u "  , * ( tptr ) ) ) ;	EMPTY	EMPTY
52	1803	2	-1	0	-1	tptr ++ ;	EMPTY	EMPTY
52	1804	2	-1	0	-1	nd _ print ( ( ndo ,  " , p-id: %u "  , extract _ 16bits ( tptr ) ) ) ;	extract _ 16bits	EMPTY
52	1805	2	-1	0	-1	}	EMPTY	EMPTY
52	1806	2	-1	0	-1	break	EMPTY	EMPTY
52	1807	2	-1	0	-1	case isis _ subtlv _ ext _ is _ reach _ intf _ sw _ cap _ descr :	EMPTY	EMPTY
52	1808	2	-1	0	-1	if ( subl >= numconst ) {	EMPTY	EMPTY
52	1809	2	-1	0	-1	gmpls _ switch _ cap = * tptr	EMPTY	EMPTY
52	1810	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1811	2	-1	0	-1	ident	EMPTY	EMPTY
52	1812	2	-1	0	-1	tok2str ( gmpls _ switch _ cap _ values  strlit  gmpls _ switch _ cap ) ) ) ;	tok2str	EMPTY
52	1813	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1814	2	-1	0	-1	tok2str ( gmpls _ encoding _ values  strlit  * ( tptr + numconst ) ) ) ) ;	tok2str	EMPTY
52	1815	2	-1	0	-1	tptr += 4	EMPTY	EMPTY
52	1816	2	-1	0	-1	nd _ print ( ( ndo  strlit  ident ) ) ;	EMPTY	EMPTY
52	1817	2	-1	0	-1	for ( priority _ level = 0 ; priority _ level < 8 ; priority _ level ++ ) {	EMPTY	EMPTY
52	1818	2	-1	0	-1	bw . i = extract _ 32bits ( tptr ) ;	bw	EMPTY
52	1819	2	-1	0	-1	nd _ print ( ( ndo ,  " %s    priority level %d: %.3f mbps "  ,	EMPTY	EMPTY
52	1820	2	-1	0	-1	ident ,	EMPTY	EMPTY
52	1821	2	-1	0	-1	priority _ level ,	EMPTY	EMPTY
52	1822	2	-1	0	-1	bw . f * 8 / 1000000 ) ) ;	bw f	EMPTY
52	1823	2	-1	0	-1	tptr += 4 ;	EMPTY	EMPTY
52	1824	2	-1	0	-1	}	EMPTY	EMPTY
52	1825	2	-1	0	-1	subl -= 36	EMPTY	EMPTY
52	1826	2	-1	0	-1	switch ( gmpls _ switch _ cap ) {	EMPTY	EMPTY
52	1827	3	-1	0	-1	case gmpls _ psc1 :	EMPTY	EMPTY
52	1828	1	1	0	-1	case gmpls _ psc2 :	EMPTY	EMPTY
52	1829	2	-1	0	-1	case gmpls _ psc3 :	EMPTY	EMPTY
52	1830	2	-1	0	-1	case gmpls _ psc4 :	EMPTY	EMPTY
52	1831	2	-1	0	-1	bw . i = extract _ 32bits ( tptr )	bw	EMPTY
52	1832	2	-1	0	-1	nd _ print ( ( ndo  strlit  ident  bw . f * numconst / numconst ) ) ;	bw f	EMPTY
52	1833	2	-1	0	-1	nd _ print ( ( ndo  strlit  ident  extract _ 16bits ( tptr + numconst ) ) ) ;	extract _ 16bits	EMPTY
52	1834	2	-1	0	-1	break	EMPTY	EMPTY
52	1835	2	-1	0	-1	case gmpls _ tsc :	EMPTY	EMPTY
52	1836	2	-1	0	-1	bw . i = extract _ 32bits ( tptr )	bw	EMPTY
52	1837	2	-1	0	-1	nd _ print ( ( ndo  strlit  ident  bw . f * numconst / numconst ) ) ;	bw f	EMPTY
52	1838	2	-1	0	-1	nd _ print ( ( ndo  strlit  ident	EMPTY	EMPTY
52	1839	2	-1	0	-1	tok2str ( gmpls _ switch _ cap _ tsc _ indication _ values  strlit  * ( tptr + numconst ) ) ) ) ;	tok2str	EMPTY
52	1840	2	-1	0	-1	break	EMPTY	EMPTY
52	1841	2	-1	0	-1	default :	EMPTY	EMPTY
52	1844	2	-1	1	-1	if ( subl > numconst ) {	EMPTY	EMPTY
52	1845	2	-1	0	-1	if ( ! print _ unknown _ data ( ndo , tptr ,  " \n\t\t     "  , subl ) )	EMPTY	EMPTY
52	1846	2	-1	0	-1	return ( 0 )	EMPTY	EMPTY
52	1847	2	-1	0	-1	}	EMPTY	EMPTY
52	1848	2	-1	0	-1	}	EMPTY	EMPTY
52	1849	2	-1	0	-1	}	EMPTY	EMPTY
52	1850	2	-1	0	-1	break ;	EMPTY	EMPTY
52	1851	2	-1	0	-1	default :	EMPTY	EMPTY
52	1852	2	-1	0	-1	if ( ! print _ unknown _ data ( ndo  tptr  strlit  subl ) )	EMPTY	EMPTY
52	1853	2	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	1854	2	-1	0	-1	break ;	EMPTY	EMPTY
52	1855	2	-1	0	-1	}	EMPTY	EMPTY
52	1856	3	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	1858	1	0	0	-1	trunctlv :	EMPTY	EMPTY
52	1859	2	-1	0	-1	nd _ print ( ( ndo  strlit  ident ) ) ;	EMPTY	EMPTY
52	1860	2	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	1861	3	-1	0	-1	}	EMPTY	EMPTY
52	1869	1	1	1	-1	static int	EMPTY	EMPTY
52	1870	2	-1	0	-1	isis _ print _ ext _ is _ reach ( netdissect _ options * ndo	EMPTY	EMPTY
52	1871	2	-1	0	-1	const uint8 _ t * tptr  const char * ident  int tlv _ type )	EMPTY	EMPTY
52	1872	2	-1	0	-1	{	EMPTY	EMPTY
52	1873	2	-1	0	-1	char ident _ buffer [ 20 ] ;	EMPTY	EMPTY
52	1874	2	-1	0	-1	int subtlv _ type , subtlv _ len , subtlv _ sum _ len ;	EMPTY	EMPTY
52	1875	3	-1	0	-1	int proc _ bytes = 0 ;	proc _ bytes	EMPTY
52	1877	1	0	0	0	if ( ! nd _ ttest2 ( * tptr , node _ id _ len ) )	EMPTY	EMPTY
52	1878	3	-1	0	-1	return ( 0 )	EMPTY	EMPTY
52	1880	1	0	0	0	nd _ print ( ( ndo  strlit  ident  isis _ print _ id ( tptr  node _ id _ len ) ) ) ;	isis _ print _ id	EMPTY
52	1881	3	-1	0	-1	tptr += ( node _ id _ len )	EMPTY	EMPTY
52	1883	1	1	0	-1	if ( tlv _ type != isis _ tlv _ is _ alias _ id ) {	EMPTY	EMPTY
52	1884	2	-1	1	-1	if ( ! nd _ ttest2 ( * tptr  numconst ) )	EMPTY	EMPTY
52	1885	2	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	1886	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 24bits ( tptr ) ) ) ;	EMPTY	EMPTY
52	1887	2	-1	0	-1	tptr += 3	EMPTY	EMPTY
52	1888	3	-1	0	-1	}	EMPTY	EMPTY
52	1890	1	1	0	1	if ( ! nd _ ttest2 ( * tptr  numconst ) )	EMPTY	EMPTY
52	1891	2	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	1892	2	-1	1	-1	subtlv _ sum _ len = * ( tptr ++ ) ;	EMPTY	EMPTY
52	1893	2	-1	0	-1	proc _ bytes = node _ id _ len + 3 + 1	proc _ bytes	EMPTY
52	1894	2	-1	0	-1	nd _ print ( ( ndo  strlit  subtlv _ sum _ len ? strlit : strlit ) ) ;	EMPTY	EMPTY
52	1895	2	-1	0	-1	if ( subtlv _ sum _ len ) {	EMPTY	EMPTY
52	1896	2	-1	0	-1	nd _ print ( ( ndo  strlit  subtlv _ sum _ len ) ) ;	EMPTY	EMPTY
52	1897	2	-1	0	-1	while ( subtlv _ sum _ len > numconst ) {	EMPTY	EMPTY
52	1898	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr , 2 ) )	EMPTY	EMPTY
52	1899	2	-1	0	-1	return ( 0 )	EMPTY	EMPTY
52	1900	2	-1	0	-1	subtlv _ type = * ( tptr ++ )	EMPTY	EMPTY
52	1901	2	-1	0	-1	subtlv _ len = * ( tptr ++ )	EMPTY	EMPTY
52	1903	2	-1	1	-1	snprintf ( ident _ buffer  sizeof ( ident _ buffer )  strlit  ident ) ;	EMPTY	EMPTY
52	1904	2	-1	0	-1	if ( ! isis _ print _ is _ reach _ subtlv ( ndo , tptr , subtlv _ type , subtlv _ len , ident _ buffer ) )	EMPTY	EMPTY
52	1905	2	-1	0	-1	return ( 0 )	EMPTY	EMPTY
52	1906	2	-1	0	-1	tptr += subtlv _ len	EMPTY	EMPTY
52	1907	2	-1	0	-1	subtlv _ sum _ len -= ( subtlv _ len + 2 )	EMPTY	EMPTY
52	1908	2	-1	0	-1	proc _ bytes += ( subtlv _ len + 2 )	proc _ bytes	EMPTY
52	1909	2	-1	0	-1	}	EMPTY	EMPTY
52	1910	2	-1	0	-1	}	EMPTY	EMPTY
52	1911	2	-1	0	-1	return ( proc _ bytes ) ;	proc _ bytes	EMPTY
52	1912	3	-1	0	-1	}	EMPTY	EMPTY
52	1919	1	1	1	-1	static int	EMPTY	EMPTY
52	1920	2	-1	0	-1	isis _ print _ mtid ( netdissect _ options * ndo	EMPTY	EMPTY
52	1921	2	-1	0	-1	const uint8 _ t * tptr  const char * ident )	EMPTY	EMPTY
52	1922	2	-1	0	-1	{	EMPTY	EMPTY
52	1923	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr , 2 ) )	EMPTY	EMPTY
52	1924	3	-1	0	-1	return ( 0 )	EMPTY	EMPTY
52	1926	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1927	2	-1	0	-1	ident	EMPTY	EMPTY
52	1928	2	-1	0	-1	tok2str ( isis _ mt _ values	tok2str	EMPTY
52	1929	2	-1	0	-1	strlit	EMPTY	EMPTY
52	1930	3	-1	0	-1	isis _ mask _ mtid ( extract _ 16bits ( tptr ) ) ) ) ) ;	extract _ 16bits	EMPTY
52	1932	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	1933	2	-1	0	-1	isis _ mask _ mtid ( extract _ 16bits ( tptr ) )	extract _ 16bits	EMPTY
52	1934	3	-1	0	-1	bittok2str ( isis _ mt _ flag _ values  strlit  isis _ mask _ mtflags ( extract _ 16bits ( tptr ) ) ) ) ) ;	extract _ 16bits	EMPTY
52	1936	1	0	0	0	return ( 2 )	EMPTY	EMPTY
52	1937	3	-1	0	-1	}	EMPTY	EMPTY
52	1946	1	1	1	-1	static int	EMPTY	EMPTY
52	1947	2	-1	0	-1	isis _ print _ extd _ ip _ reach ( netdissect _ options * ndo	EMPTY	EMPTY
52	1948	2	-1	0	-1	const uint8 _ t * tptr  const char * ident  uint16 _ t afi )	EMPTY	EMPTY
52	1949	2	-1	0	-1	{	EMPTY	EMPTY
52	1950	2	-1	0	-1	char ident _ buffer [ 20 ] ;	EMPTY	EMPTY
52	1951	2	-1	0	-1	# ifdef inet6	EMPTY	EMPTY
52	1952	2	-1	0	-1	uint8 _ t prefix [ sizeof ( struct in6 _ addr ) ] ;	prefix	EMPTY
52	1953	2	-1	0	-1	# else	EMPTY	EMPTY
52	1954	2	-1	1	-1	uint8 _ t prefix [ sizeof ( struct in _ addr ) ] ;	prefix	EMPTY
52	1955	2	-1	0	-1	# endif	EMPTY	EMPTY
52	1956	3	-1	0	-1	u _ int metric , status _ byte , bit _ length , byte _ length , sublen , processed , subtlvtype , subtlvlen ;	EMPTY	EMPTY
52	1958	1	0	0	0	if ( ! nd _ ttest2 ( * tptr , 4 ) )	EMPTY	EMPTY
52	1959	2	-1	0	-1	return ( 0 )	EMPTY	EMPTY
52	1960	2	-1	0	-1	metric = extract _ 32bits ( tptr )	EMPTY	EMPTY
52	1961	2	-1	0	-1	processed = 4	EMPTY	EMPTY
52	1962	3	-1	0	-1	tptr += 4	EMPTY	EMPTY
52	1964	1	0	0	0	if ( afi == af _ inet ) {	EMPTY	EMPTY
52	1965	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr  numconst ) )	EMPTY	EMPTY
52	1966	2	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	1967	2	-1	0	-1	status _ byte = * ( tptr ++ )	EMPTY	EMPTY
52	1968	2	-1	0	-1	bit _ length = status _ byte & 0x3f	EMPTY	EMPTY
52	1969	2	-1	0	-1	if ( bit _ length > 32 ) {	EMPTY	EMPTY
52	1970	2	-1	0	-1	nd _ print ( ( ndo ,  " %sipv4 prefix: bad bit length %u "  ,	EMPTY	EMPTY
52	1971	2	-1	0	-1	ident ,	EMPTY	EMPTY
52	1972	2	-1	0	-1	bit _ length ) ) ;	EMPTY	EMPTY
52	1973	2	-1	0	-1	return ( 0 ) ;	EMPTY	EMPTY
52	1974	2	-1	0	-1	}	EMPTY	EMPTY
52	1975	2	-1	0	-1	processed ++	EMPTY	EMPTY
52	1976	2	-1	0	-1	# ifdef inet6	EMPTY	EMPTY
52	1977	2	-1	0	-1	if ( afi == af _ inet6 ) {	EMPTY	EMPTY
52	1978	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr  numconst ) )	EMPTY	EMPTY
52	1979	2	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	1980	2	-1	0	-1	status _ byte = * ( tptr ++ )	EMPTY	EMPTY
52	1981	2	-1	0	-1	bit _ length = * ( tptr ++ )	EMPTY	EMPTY
52	1982	2	-1	0	-1	if ( bit _ length > 128 ) {	EMPTY	EMPTY
52	1983	2	-1	0	-1	nd _ print ( ( ndo ,  " %sipv6 prefix: bad bit length %u "  ,	EMPTY	EMPTY
52	1984	2	-1	0	-1	ident ,	EMPTY	EMPTY
52	1985	2	-1	0	-1	bit _ length ) ) ;	EMPTY	EMPTY
52	1986	2	-1	0	-1	return ( 0 ) ;	EMPTY	EMPTY
52	1987	2	-1	0	-1	}	EMPTY	EMPTY
52	1988	2	-1	0	-1	processed += 2	EMPTY	EMPTY
52	1989	2	-1	0	-1	# endif	EMPTY	EMPTY
52	1990	2	-1	0	-1	}	EMPTY	EMPTY
52	1991	3	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	1993	1	1	1	1	byte _ length = ( bit _ length + 7 ) / 8	EMPTY	EMPTY
52	1995	1	1	0	1	if ( ! nd _ ttest2 ( * tptr , byte _ length ) )	EMPTY	EMPTY
52	1996	2	-1	0	-1	return ( 0 )	EMPTY	EMPTY
52	1997	2	-1	1	-1	memset ( prefix , 0 , sizeof prefix )	prefix prefix	memset
52	1998	2	-1	1	-1	memcpy ( prefix , tptr , byte _ length )	prefix	memcpy
52	1999	2	-1	0	-1	tptr += byte _ length	EMPTY	EMPTY
52	2000	3	-1	0	-1	processed += byte _ length	EMPTY	EMPTY
52	2002	1	0	0	0	if ( afi == af _ inet )	EMPTY	EMPTY
52	2003	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2004	2	-1	0	-1	ident	EMPTY	EMPTY
52	2005	2	-1	0	-1	ipaddr _ string ( ndo  prefix )	prefix	EMPTY
52	2006	2	-1	0	-1	bit _ length ) ) ;	EMPTY	EMPTY
52	2007	2	-1	0	-1	# ifdef inet6	EMPTY	EMPTY
52	2008	2	-1	0	-1	if ( afi == af _ inet6 )	EMPTY	EMPTY
52	2009	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2010	2	-1	0	-1	ident	EMPTY	EMPTY
52	2011	2	-1	0	-1	ip6addr _ string ( ndo  prefix )	prefix	EMPTY
52	2012	2	-1	0	-1	bit _ length ) ) ;	EMPTY	EMPTY
52	2013	3	-1	0	-1	# endif	EMPTY	EMPTY
52	2015	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2016	2	-1	0	-1	isis _ mask _ tlv _ extd _ ip _ updown ( status _ byte ) ? strlit : strlit	EMPTY	EMPTY
52	2017	3	-1	0	-1	metric ) ) ;	EMPTY	EMPTY
52	2019	1	0	0	0	if ( afi == af _ inet && isis _ mask _ tlv _ extd _ ip _ subtlv ( status _ byte ) )	EMPTY	EMPTY
52	2020	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
52	2021	2	-1	0	-1	# ifdef inet6	EMPTY	EMPTY
52	2022	2	-1	0	-1	if ( afi == af _ inet6 )	EMPTY	EMPTY
52	2023	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2024	2	-1	0	-1	isis _ mask _ tlv _ extd _ ip6 _ ie ( status _ byte ) ? strlit : strlit	EMPTY	EMPTY
52	2025	2	-1	0	-1	isis _ mask _ tlv _ extd _ ip6 _ subtlv ( status _ byte ) ? strlit : strlit ) ) ;	EMPTY	EMPTY
52	2026	3	-1	0	-1	# endif	EMPTY	EMPTY
52	2028	1	1	0	1	if ( ( afi == af _ inet && isis _ mask _ tlv _ extd _ ip _ subtlv ( status _ byte ) )	EMPTY	EMPTY
52	2029	2	-1	0	-1	# ifdef inet6	EMPTY	EMPTY
52	2030	2	-1	0	-1	|| ( afi == af _ inet6 && isis _ mask _ tlv _ extd _ ip6 _ subtlv ( status _ byte ) )	EMPTY	EMPTY
52	2031	2	-1	0	-1	# endif	EMPTY	EMPTY
52	2032	2	-1	0	-1	) {	EMPTY	EMPTY
52	2037	2	-1	1	-1	if ( ! nd _ ttest2 ( * tptr , 1 ) )	EMPTY	EMPTY
52	2038	2	-1	0	-1	return ( 0 )	EMPTY	EMPTY
52	2039	2	-1	0	-1	sublen = * ( tptr ++ )	EMPTY	EMPTY
52	2040	2	-1	0	-1	processed += sublen + 1	EMPTY	EMPTY
52	2041	3	-1	1	-1	nd _ print ( ( ndo  strlit  sublen ) ) ;	EMPTY	EMPTY
52	2043	1	1	0	1	while ( sublen > numconst ) {	EMPTY	EMPTY
52	2044	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr , 2 ) )	EMPTY	EMPTY
52	2045	2	-1	0	-1	return ( 0 )	EMPTY	EMPTY
52	2046	2	-1	0	-1	subtlvtype = * ( tptr ++ )	EMPTY	EMPTY
52	2047	2	-1	0	-1	subtlvlen = * ( tptr ++ )	EMPTY	EMPTY
52	2049	2	-1	1	-1	snprintf ( ident _ buffer  sizeof ( ident _ buffer )  strlit  ident ) ;	EMPTY	EMPTY
52	2050	2	-1	0	-1	if ( ! isis _ print _ ip _ reach _ subtlv ( ndo , tptr , subtlvtype , subtlvlen , ident _ buffer ) )	EMPTY	EMPTY
52	2051	2	-1	0	-1	return ( 0 )	EMPTY	EMPTY
52	2052	2	-1	0	-1	tptr += subtlvlen	EMPTY	EMPTY
52	2053	2	-1	0	-1	sublen -= ( subtlvlen + 2 )	EMPTY	EMPTY
52	2054	2	-1	0	-1	}	EMPTY	EMPTY
52	2055	2	-1	0	-1	}	EMPTY	EMPTY
52	2056	2	-1	0	-1	return ( processed ) ;	EMPTY	EMPTY
52	2057	3	-1	0	-1	}	EMPTY	EMPTY
52	2064	1	1	1	-1	static int	EMPTY	EMPTY
52	2065	2	-1	0	-1	isis _ print ( netdissect _ options * ndo	EMPTY	EMPTY
52	2066	2	-1	0	-1	const uint8 _ t * p  u _ int length )	EMPTY	EMPTY
52	2067	2	-1	0	-1	{	EMPTY	EMPTY
52	2068	3	-1	0	-1	const struct isis _ common _ header * isis _ header ;	EMPTY	EMPTY
52	2070	1	0	0	0	const struct isis _ iih _ lan _ header * header _ iih _ lan ;	EMPTY	EMPTY
52	2071	2	-1	0	-1	const struct isis _ iih _ ptp _ header * header _ iih _ ptp ;	EMPTY	EMPTY
52	2072	2	-1	0	-1	struct isis _ lsp _ header * header _ lsp ;	EMPTY	EMPTY
52	2073	2	-1	0	-1	const struct isis _ csnp _ header * header _ csnp ;	EMPTY	EMPTY
52	2074	3	-1	0	-1	const struct isis _ psnp _ header * header _ psnp ;	EMPTY	EMPTY
52	2076	1	0	0	0	const struct isis _ tlv _ lsp * tlv _ lsp ;	EMPTY	EMPTY
52	2077	2	-1	0	-1	const struct isis _ tlv _ ptp _ adj * tlv _ ptp _ adj ;	EMPTY	EMPTY
52	2078	2	-1	0	-1	const struct isis _ tlv _ is _ reach * tlv _ is _ reach ;	EMPTY	EMPTY
52	2079	3	-1	0	-1	const struct isis _ tlv _ es _ reach * tlv _ es _ reach ;	EMPTY	EMPTY
52	2081	1	0	0	0	uint8 _ t pdu _ type , max _ area , id _ length , tlv _ type , tlv _ len , tmp , alen , lan _ alen , prefix _ len ;	pdu _ type id _ length	EMPTY
52	2082	2	-1	0	-1	uint8 _ t ext _ is _ len , ext _ ip _ len , mt _ len ;	EMPTY	EMPTY
52	2083	2	-1	0	-1	const uint8 _ t * optr , * pptr , * tptr ;	EMPTY	EMPTY
52	2084	2	-1	0	-1	u _ short packet _ len , pdu _ len , key _ id ;	EMPTY	EMPTY
52	2085	2	-1	0	-1	u _ int i , vendor _ id ;	EMPTY	EMPTY
52	2086	3	-1	0	-1	int sigcheck ;	EMPTY	EMPTY
52	2088	1	1	0	-1	packet _ len = length	EMPTY	EMPTY
52	2089	2	-1	1	-1	optr = p	EMPTY	EMPTY
52	2090	2	-1	1	-1	need it for parsing the checksum tlv and authentication	EMPTY	EMPTY
52	2091	2	-1	1	-1	tlv verification * /	EMPTY	EMPTY
52	2092	2	-1	0	-1	isis _ header = ( const struct isis _ common _ header * ) p	EMPTY	EMPTY
52	2093	2	-1	0	-1	nd _ tcheck ( * isis _ header ) ;	EMPTY	EMPTY
52	2094	2	-1	0	-1	pptr = p + ( isis _ common _ header _ size )	EMPTY	EMPTY
52	2095	2	-1	0	-1	header _ iih _ lan = ( const struct isis _ iih _ lan _ header * ) pptr	EMPTY	EMPTY
52	2096	2	-1	0	-1	header _ iih _ ptp = ( const struct isis _ iih _ ptp _ header * ) pptr	EMPTY	EMPTY
52	2097	2	-1	0	-1	header _ lsp = ( struct isis _ lsp _ header * ) pptr	EMPTY	EMPTY
52	2098	2	-1	0	-1	header _ csnp = ( const struct isis _ csnp _ header * ) pptr	EMPTY	EMPTY
52	2099	3	-1	0	-1	header _ psnp = ( const struct isis _ psnp _ header * ) pptr	EMPTY	EMPTY
52	2101	1	0	0	0	if ( ! ndo -> ndo _ eflag )	ndo _ eflag	EMPTY
52	2102	3	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
52	2108	1	1	1	1	if ( isis _ header -> version != isis _ version ) {	version	EMPTY
52	2109	2	-1	0	-1	nd _ print ( ( ndo ,  " version %d packet not supported "  , isis _ header -> version ) ) ;	version	EMPTY
52	2110	2	-1	0	-1	return ( 0 ) ;	EMPTY	EMPTY
52	2111	3	-1	0	-1	}	EMPTY	EMPTY
52	2113	1	0	0	0	if ( ( isis _ header -> id _ length != system _ id _ len ) && ( isis _ header -> id _ length != 0 ) ) {	id _ length id _ length	EMPTY
52	2114	2	-1	0	-1	nd _ print ( ( ndo ,  " system id length of %d is not supported "  ,	EMPTY	EMPTY
52	2115	2	-1	0	-1	isis _ header -> id _ length ) ) ;	id _ length	EMPTY
52	2116	2	-1	0	-1	return ( 0 ) ;	EMPTY	EMPTY
52	2117	3	-1	0	-1	}	EMPTY	EMPTY
52	2119	1	0	0	0	if ( isis _ header -> pdu _ version != isis _ version ) {	pdu _ version	EMPTY
52	2120	2	-1	0	-1	nd _ print ( ( ndo ,  " version %d packet not supported "  , isis _ header -> pdu _ version ) ) ;	pdu _ version	EMPTY
52	2121	2	-1	0	-1	return ( 0 ) ;	EMPTY	EMPTY
52	2122	3	-1	0	-1	}	EMPTY	EMPTY
52	2124	1	1	0	-1	max _ area = isis _ header -> max _ area	EMPTY	EMPTY
52	2125	2	-1	0	-1	switch ( max _ area ) {	EMPTY	EMPTY
52	2126	2	-1	0	-1	case 0 :	EMPTY	EMPTY
52	2127	2	-1	1	-1	max _ area = 3	EMPTY	EMPTY
52	2128	2	-1	0	-1	break	EMPTY	EMPTY
52	2129	2	-1	0	-1	case numconst :	EMPTY	EMPTY
52	2130	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
52	2131	2	-1	0	-1	return ( 0 )	EMPTY	EMPTY
52	2132	2	-1	0	-1	default :	EMPTY	EMPTY
52	2133	2	-1	0	-1	break	EMPTY	EMPTY
52	2134	3	-1	0	-1	}	EMPTY	EMPTY
52	2136	1	1	0	-1	id _ length = isis _ header -> id _ length ;	id _ length id _ length	EMPTY
52	2137	2	-1	0	-1	switch ( id _ length ) {	id _ length	EMPTY
52	2138	2	-1	0	-1	case numconst :	EMPTY	EMPTY
52	2139	2	-1	1	-1	id _ length = numconst ;	id _ length	EMPTY
52	2140	2	-1	0	-1	break	EMPTY	EMPTY
52	2141	2	-1	1	-1	case numconst :	EMPTY	EMPTY
52	2142	2	-1	0	-1	case numconst :	EMPTY	EMPTY
52	2143	2	-1	0	-1	case numconst :	EMPTY	EMPTY
52	2144	2	-1	0	-1	case numconst :	EMPTY	EMPTY
52	2145	2	-1	0	-1	case numconst :	EMPTY	EMPTY
52	2146	2	-1	0	-1	case numconst :	EMPTY	EMPTY
52	2147	2	-1	0	-1	case numconst :	EMPTY	EMPTY
52	2148	2	-1	0	-1	case numconst :	EMPTY	EMPTY
52	2149	2	-1	0	-1	break ;	EMPTY	EMPTY
52	2150	2	-1	0	-1	case 255 :	EMPTY	EMPTY
52	2151	2	-1	1	-1	id _ length = 0	id _ length	EMPTY
52	2152	2	-1	0	-1	break	EMPTY	EMPTY
52	2153	2	-1	0	-1	default :	EMPTY	EMPTY
52	2154	2	-1	0	-1	break	EMPTY	EMPTY
52	2155	3	-1	0	-1	}	EMPTY	EMPTY
52	2158	1	1	1	1	if ( id _ length != 6 ) {	id _ length	EMPTY
52	2159	2	-1	0	-1	nd _ print ( ( ndo ,  " bad packet -- illegal sys-id length (%u) "  , id _ length ) ) ;	id _ length	EMPTY
52	2160	2	-1	0	-1	return ( 0 ) ;	EMPTY	EMPTY
52	2161	3	-1	0	-1	}	EMPTY	EMPTY
52	2163	1	0	0	-1	pdu _ type = isis _ header -> pdu _ type	pdu _ type pdu _ type	EMPTY
52	2166	1	1	1	1	if ( ndo -> ndo _ vflag < 1 ) {	ndo _ vflag	EMPTY
52	2167	2	-1	0	-1	nd _ print ( ( ndo ,  " %s%s "  ,	EMPTY	EMPTY
52	2168	2	-1	0	-1	ndo -> ndo _ eflag ?  "  "  :  " ,  "  ,	ndo _ eflag	EMPTY
52	2169	3	-1	0	-1	tok2str ( isis _ pdu _ values ,  " unknown pdu-type %u "  , pdu _ type ) ) ) ;	tok2str pdu _ type	EMPTY
52	2171	1	0	0	0	switch ( pdu _ type ) {	pdu _ type	EMPTY
52	2173	1	0	0	-1	case isis _ pdu _ l1 _ lan _ iih :	EMPTY	EMPTY
52	2174	2	-1	0	-1	case isis _ pdu _ l2 _ lan _ iih :	EMPTY	EMPTY
52	2175	2	-1	0	-1	nd _ print ( ( ndo ,  " , src-id %s "  ,	EMPTY	EMPTY
52	2176	2	-1	0	-1	isis _ print _ id ( header _ iih _ lan -> source _ id , system _ id _ len ) ) ) ;	isis _ print _ id	EMPTY
52	2177	2	-1	0	-1	nd _ print ( ( ndo ,  " , lan-id %s, prio %u "  ,	EMPTY	EMPTY
52	2178	2	-1	0	-1	isis _ print _ id ( header _ iih _ lan -> lan _ id , node _ id _ len ) ,	isis _ print _ id	EMPTY
52	2179	2	-1	0	-1	header _ iih _ lan -> priority ) ) ;	EMPTY	EMPTY
52	2180	2	-1	0	-1	break ;	EMPTY	EMPTY
52	2181	2	-1	0	-1	case isis _ pdu _ ptp _ iih :	EMPTY	EMPTY
52	2182	2	-1	0	-1	nd _ print ( ( ndo ,  " , src-id %s "  , isis _ print _ id ( header _ iih _ ptp -> source _ id , system _ id _ len ) ) ) ;	isis _ print _ id	EMPTY
52	2183	2	-1	0	-1	break ;	EMPTY	EMPTY
52	2184	2	-1	0	-1	case isis _ pdu _ l1 _ lsp :	EMPTY	EMPTY
52	2185	2	-1	0	-1	case isis _ pdu _ l2 _ lsp :	EMPTY	EMPTY
52	2186	2	-1	0	-1	nd _ print ( ( ndo ,  " , lsp-id %s, seq 0x%08x, lifetime %5us "  ,	lifetime	EMPTY
52	2187	2	-1	0	-1	isis _ print _ id ( header _ lsp -> lsp _ id , lsp _ id _ len ) ,	isis _ print _ id	EMPTY
52	2188	2	-1	0	-1	extract _ 32bits ( header _ lsp -> sequence _ number ) ,	EMPTY	EMPTY
52	2189	2	-1	0	-1	extract _ 16bits ( header _ lsp -> remaining _ lifetime ) ) ) ;	extract _ 16bits	EMPTY
52	2190	2	-1	0	-1	break ;	EMPTY	EMPTY
52	2191	2	-1	0	-1	case isis _ pdu _ l1 _ csnp :	EMPTY	EMPTY
52	2192	2	-1	0	-1	case isis _ pdu _ l2 _ csnp :	EMPTY	EMPTY
52	2193	2	-1	0	-1	nd _ print ( ( ndo ,  " , src-id %s "  , isis _ print _ id ( header _ csnp -> source _ id , node _ id _ len ) ) ) ;	isis _ print _ id	EMPTY
52	2194	2	-1	0	-1	break ;	EMPTY	EMPTY
52	2195	2	-1	0	-1	case isis _ pdu _ l1 _ psnp :	EMPTY	EMPTY
52	2196	2	-1	0	-1	case isis _ pdu _ l2 _ psnp :	EMPTY	EMPTY
52	2197	2	-1	0	-1	nd _ print ( ( ndo ,  " , src-id %s "  , isis _ print _ id ( header _ psnp -> source _ id , node _ id _ len ) ) ) ;	isis _ print _ id	EMPTY
52	2198	3	-1	0	-1	break ;	EMPTY	EMPTY
52	2200	1	0	0	-1	}	EMPTY	EMPTY
52	2201	3	-1	0	-1	nd _ print ( ( ndo ,  " , length %u "  , length ) ) ;	EMPTY	EMPTY
52	2203	1	0	0	0	return ( 1 ) ;	EMPTY	EMPTY
52	2204	3	-1	0	-1	}	EMPTY	EMPTY
52	2207	1	1	1	1	nd _ print ( ( ndo  strlit  ndo -> ndo _ eflag ? strlit : strlit  length ) ) ;	ndo _ eflag	EMPTY
52	2209	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2210	2	-1	0	-1	tok2str ( isis _ pdu _ values	tok2str	EMPTY
52	2211	2	-1	0	-1	strlit	EMPTY	EMPTY
52	2212	2	-1	0	-1	pdu _ type )	pdu _ type	EMPTY
52	2213	2	-1	0	-1	isis _ header -> fixed _ len	EMPTY	EMPTY
52	2214	2	-1	0	-1	isis _ header -> version	version	EMPTY
52	2215	2	-1	0	-1	isis _ header -> pdu _ version	pdu _ version	EMPTY
52	2216	2	-1	0	-1	id _ length	id _ length	EMPTY
52	2217	2	-1	0	-1	isis _ header -> id _ length	id _ length	EMPTY
52	2218	2	-1	0	-1	max _ area	EMPTY	EMPTY
52	2219	3	-1	0	-1	isis _ header -> max _ area ) ) ;	EMPTY	EMPTY
52	2221	1	1	0	1	if ( ndo -> ndo _ vflag > numconst ) {	ndo _ vflag	EMPTY
52	2222	2	-1	0	-1	if ( ! print _ unknown _ data ( ndo  optr  strlit  numconst ) )	EMPTY	EMPTY
52	2223	2	-1	1	-1	return ( numconst ) ;	EMPTY	EMPTY
52	2224	3	-1	0	-1	}	EMPTY	EMPTY
52	2226	1	0	0	0	switch ( pdu _ type ) {	pdu _ type	EMPTY
52	2228	1	0	0	-1	case isis _ pdu _ l1 _ lan _ iih :	EMPTY	EMPTY
52	2229	2	-1	0	-1	case isis _ pdu _ l2 _ lan _ iih :	EMPTY	EMPTY
52	2230	2	-1	0	-1	if ( isis _ header -> fixed _ len != ( isis _ common _ header _ size + isis _ iih _ lan _ header _ size ) ) {	EMPTY	EMPTY
52	2231	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2232	2	-1	0	-1	isis _ header -> fixed _ len  ( unsigned long ) isis _ iih _ lan _ header _ size ) ) ;	EMPTY	EMPTY
52	2233	2	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	2234	3	-1	0	-1	}	EMPTY	EMPTY
52	2236	1	1	0	-1	pdu _ len = extract _ 16bits ( header _ iih _ lan -> pdu _ len ) ;	extract _ 16bits	EMPTY
52	2237	2	-1	0	-1	if ( packet _ len > pdu _ len ) {	EMPTY	EMPTY
52	2238	2	-1	1	-1	packet _ len = pdu _ len ;	EMPTY	EMPTY
52	2239	2	-1	0	-1	length = pdu _ len	EMPTY	EMPTY
52	2240	3	-1	0	-1	}	EMPTY	EMPTY
52	2242	1	0	0	-1	nd _ tcheck ( * header _ iih _ lan ) ;	EMPTY	EMPTY
52	2243	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2244	2	-1	0	-1	isis _ print _ id ( header _ iih _ lan -> source _ id  system _ id _ len )	isis _ print _ id	EMPTY
52	2245	2	-1	0	-1	extract _ 16bits ( header _ iih _ lan -> holding _ time )	extract _ 16bits	EMPTY
52	2246	2	-1	0	-1	tok2str ( isis _ iih _ circuit _ type _ values	tok2str	EMPTY
52	2247	2	-1	0	-1	strlit	EMPTY	EMPTY
52	2248	3	-1	0	-1	header _ iih _ lan -> circuit _ type ) ) ) ;	EMPTY	EMPTY
52	2250	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2251	2	-1	0	-1	isis _ print _ id ( header _ iih _ lan -> lan _ id  node _ id _ len )	isis _ print _ id	EMPTY
52	2252	2	-1	0	-1	( header _ iih _ lan -> priority ) & isis _ lan _ priority _ mask	EMPTY	EMPTY
52	2253	3	-1	0	-1	pdu _ len ) ) ;	EMPTY	EMPTY
52	2255	1	0	0	0	if ( ndo -> ndo _ vflag > numconst ) {	ndo _ vflag	EMPTY
52	2256	2	-1	0	-1	if ( ! print _ unknown _ data ( ndo  pptr  strlit  isis _ iih _ lan _ header _ size ) )	EMPTY	EMPTY
52	2257	2	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	2258	3	-1	0	-1	}	EMPTY	EMPTY
52	2260	1	0	0	-1	packet _ len -= ( isis _ common _ header _ size + isis _ iih _ lan _ header _ size ) ;	EMPTY	EMPTY
52	2261	2	-1	0	-1	pptr = p + ( isis _ common _ header _ size + isis _ iih _ lan _ header _ size ) ;	EMPTY	EMPTY
52	2262	3	-1	0	-1	break ;	EMPTY	EMPTY
52	2264	1	0	0	-1	case isis _ pdu _ ptp _ iih :	EMPTY	EMPTY
52	2265	2	-1	0	-1	if ( isis _ header -> fixed _ len != ( isis _ common _ header _ size + isis _ iih _ ptp _ header _ size ) ) {	EMPTY	EMPTY
52	2266	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2267	2	-1	0	-1	isis _ header -> fixed _ len  ( unsigned long ) isis _ iih _ ptp _ header _ size ) ) ;	EMPTY	EMPTY
52	2268	2	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	2269	3	-1	0	-1	}	EMPTY	EMPTY
52	2271	1	1	0	-1	pdu _ len = extract _ 16bits ( header _ iih _ ptp -> pdu _ len ) ;	extract _ 16bits	EMPTY
52	2272	2	-1	0	-1	if ( packet _ len > pdu _ len ) {	EMPTY	EMPTY
52	2273	2	-1	1	-1	packet _ len = pdu _ len ;	EMPTY	EMPTY
52	2274	2	-1	0	-1	length = pdu _ len	EMPTY	EMPTY
52	2275	3	-1	0	-1	}	EMPTY	EMPTY
52	2277	1	0	0	-1	nd _ tcheck ( * header _ iih _ ptp ) ;	EMPTY	EMPTY
52	2278	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2279	2	-1	0	-1	isis _ print _ id ( header _ iih _ ptp -> source _ id  system _ id _ len )	isis _ print _ id	EMPTY
52	2280	2	-1	0	-1	extract _ 16bits ( header _ iih _ ptp -> holding _ time )	extract _ 16bits	EMPTY
52	2281	2	-1	0	-1	tok2str ( isis _ iih _ circuit _ type _ values	tok2str	EMPTY
52	2282	2	-1	0	-1	strlit	EMPTY	EMPTY
52	2283	3	-1	0	-1	header _ iih _ ptp -> circuit _ type ) ) ) ;	EMPTY	EMPTY
52	2285	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2286	2	-1	0	-1	header _ iih _ ptp -> circuit _ id	EMPTY	EMPTY
52	2287	3	-1	0	-1	pdu _ len ) ) ;	EMPTY	EMPTY
52	2289	1	0	0	0	if ( ndo -> ndo _ vflag > numconst ) {	ndo _ vflag	EMPTY
52	2290	2	-1	0	-1	if ( ! print _ unknown _ data ( ndo  pptr  strlit  isis _ iih _ ptp _ header _ size ) )	EMPTY	EMPTY
52	2291	2	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	2292	3	-1	0	-1	}	EMPTY	EMPTY
52	2294	1	0	0	-1	packet _ len -= ( isis _ common _ header _ size + isis _ iih _ ptp _ header _ size ) ;	EMPTY	EMPTY
52	2295	2	-1	0	-1	pptr = p + ( isis _ common _ header _ size + isis _ iih _ ptp _ header _ size ) ;	EMPTY	EMPTY
52	2296	3	-1	0	-1	break ;	EMPTY	EMPTY
52	2298	1	0	0	-1	case isis _ pdu _ l1 _ lsp :	EMPTY	EMPTY
52	2299	2	-1	0	-1	case isis _ pdu _ l2 _ lsp :	EMPTY	EMPTY
52	2300	2	-1	0	-1	if ( isis _ header -> fixed _ len != ( isis _ common _ header _ size + isis _ lsp _ header _ size ) ) {	EMPTY	EMPTY
52	2301	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2302	2	-1	0	-1	isis _ header -> fixed _ len  ( unsigned long ) isis _ lsp _ header _ size ) ) ;	EMPTY	EMPTY
52	2303	2	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	2304	3	-1	0	-1	}	EMPTY	EMPTY
52	2306	1	1	0	-1	pdu _ len = extract _ 16bits ( header _ lsp -> pdu _ len ) ;	extract _ 16bits	EMPTY
52	2307	2	-1	0	-1	if ( packet _ len > pdu _ len ) {	EMPTY	EMPTY
52	2308	2	-1	1	-1	packet _ len = pdu _ len ;	EMPTY	EMPTY
52	2309	2	-1	0	-1	length = pdu _ len	EMPTY	EMPTY
52	2310	3	-1	0	-1	}	EMPTY	EMPTY
52	2312	1	0	0	-1	nd _ tcheck ( * header _ lsp ) ;	EMPTY	EMPTY
52	2313	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2314	2	-1	0	-1	isis _ print _ id ( header _ lsp -> lsp _ id  lsp _ id _ len )	isis _ print _ id	EMPTY
52	2315	2	-1	0	-1	extract _ 32bits ( header _ lsp -> sequence _ number )	EMPTY	EMPTY
52	2316	2	-1	0	-1	extract _ 16bits ( header _ lsp -> remaining _ lifetime )	extract _ 16bits	EMPTY
52	2317	3	-1	0	-1	extract _ 16bits ( header _ lsp -> checksum ) ) ) ;	extract _ 16bits	EMPTY
52	2320	1	0	0	0	osi _ print _ cksum ( ndo  ( uint8 _ t * ) header _ lsp -> lsp _ id	EMPTY	EMPTY
52	2321	3	-1	0	-1	extract _ 16bits ( header _ lsp -> checksum )  numconst  length - numconst ) ;	extract _ 16bits	EMPTY
52	2326	1	1	1	-1	header _ lsp -> checksum [ 0 ] = 0	EMPTY	EMPTY
52	2327	2	-1	0	-1	header _ lsp -> checksum [ 1 ] = 0	EMPTY	EMPTY
52	2328	2	-1	0	-1	header _ lsp -> remaining _ lifetime [ 0 ] = 0	EMPTY	EMPTY
52	2329	3	-1	0	-1	header _ lsp -> remaining _ lifetime [ 1 ] = 0	EMPTY	EMPTY
52	2332	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2333	2	-1	0	-1	pdu _ len	EMPTY	EMPTY
52	2334	3	-1	0	-1	isis _ mask _ lsp _ ol _ bit ( header _ lsp -> typeblock ) ? strlit : strlit ) ) ;	EMPTY	EMPTY
52	2336	1	0	0	0	if ( isis _ mask _ lsp _ att _ bits ( header _ lsp -> typeblock ) ) {	EMPTY	EMPTY
52	2337	2	-1	0	-1	nd _ print ( ( ndo ,  " %s "  , isis _ mask _ lsp _ att _ default _ bit ( header _ lsp -> typeblock ) ?  " default  "  :  "  "  ) ) ;	EMPTY	EMPTY
52	2338	2	-1	0	-1	nd _ print ( ( ndo ,  " %s "  , isis _ mask _ lsp _ att _ delay _ bit ( header _ lsp -> typeblock ) ?  " delay  "  :  "  "  ) ) ;	EMPTY	EMPTY
52	2339	2	-1	0	-1	nd _ print ( ( ndo ,  " %s "  , isis _ mask _ lsp _ att _ expense _ bit ( header _ lsp -> typeblock ) ?  " expense  "  :  "  "  ) ) ;	EMPTY	EMPTY
52	2340	2	-1	0	-1	nd _ print ( ( ndo ,  " %s "  , isis _ mask _ lsp _ att _ error _ bit ( header _ lsp -> typeblock ) ?  " error  "  :  "  "  ) ) ;	EMPTY	EMPTY
52	2341	2	-1	0	-1	nd _ print ( ( ndo ,  " att bit set,  "  ) ) ;	EMPTY	EMPTY
52	2342	2	-1	0	-1	}	EMPTY	EMPTY
52	2343	2	-1	0	-1	nd _ print ( ( ndo  strlit  isis _ mask _ lsp _ partition _ bit ( header _ lsp -> typeblock ) ? strlit : strlit ) ) ;	EMPTY	EMPTY
52	2344	2	-1	0	-1	nd _ print ( ( ndo  strlit  tok2str ( isis _ lsp _ istype _ values  strlit	tok2str	EMPTY
52	2345	3	-1	0	-1	isis _ mask _ lsp _ istype _ bits ( header _ lsp -> typeblock ) ) ) ) ;	EMPTY	EMPTY
52	2347	1	0	0	0	if ( ndo -> ndo _ vflag > 1 ) {	ndo _ vflag	EMPTY
52	2348	2	-1	0	-1	if ( ! print _ unknown _ data ( ndo , pptr ,  " \n\t   "  , isis _ lsp _ header _ size ) )	EMPTY	EMPTY
52	2349	2	-1	0	-1	return ( 0 ) ;	EMPTY	EMPTY
52	2350	3	-1	0	-1	}	EMPTY	EMPTY
52	2352	1	0	0	-1	packet _ len -= ( isis _ common _ header _ size + isis _ lsp _ header _ size )	EMPTY	EMPTY
52	2353	2	-1	0	-1	pptr = p + ( isis _ common _ header _ size + isis _ lsp _ header _ size )	EMPTY	EMPTY
52	2354	3	-1	0	-1	break	EMPTY	EMPTY
52	2356	1	0	0	-1	case isis _ pdu _ l1 _ csnp :	EMPTY	EMPTY
52	2357	2	-1	0	-1	case isis _ pdu _ l2 _ csnp :	EMPTY	EMPTY
52	2358	2	-1	0	-1	if ( isis _ header -> fixed _ len != ( isis _ common _ header _ size + isis _ csnp _ header _ size ) ) {	EMPTY	EMPTY
52	2359	2	-1	0	-1	nd _ print ( ( ndo ,  " , bogus fixed header length %u should be %lu "  ,	EMPTY	EMPTY
52	2360	2	-1	0	-1	isis _ header -> fixed _ len , ( unsigned long ) isis _ csnp _ header _ size ) ) ;	EMPTY	EMPTY
52	2361	2	-1	0	-1	return ( 0 ) ;	EMPTY	EMPTY
52	2362	3	-1	0	-1	}	EMPTY	EMPTY
52	2364	1	1	0	-1	pdu _ len = extract _ 16bits ( header _ csnp -> pdu _ len )	extract _ 16bits	EMPTY
52	2365	2	-1	0	-1	if ( packet _ len > pdu _ len ) {	EMPTY	EMPTY
52	2366	2	-1	1	-1	packet _ len = pdu _ len	EMPTY	EMPTY
52	2367	2	-1	0	-1	length = pdu _ len	EMPTY	EMPTY
52	2368	3	-1	0	-1	}	EMPTY	EMPTY
52	2370	1	0	0	-1	nd _ tcheck ( * header _ csnp ) ;	EMPTY	EMPTY
52	2371	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2372	2	-1	0	-1	isis _ print _ id ( header _ csnp -> source _ id  node _ id _ len )	isis _ print _ id	EMPTY
52	2373	2	-1	0	-1	pdu _ len ) ) ;	EMPTY	EMPTY
52	2374	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2375	2	-1	0	-1	isis _ print _ id ( header _ csnp -> start _ lsp _ id  lsp _ id _ len ) ) ) ;	isis _ print _ id	EMPTY
52	2376	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2377	3	-1	0	-1	isis _ print _ id ( header _ csnp -> end _ lsp _ id  lsp _ id _ len ) ) ) ;	isis _ print _ id	EMPTY
52	2379	1	0	0	0	if ( ndo -> ndo _ vflag > numconst ) {	ndo _ vflag	EMPTY
52	2380	2	-1	0	-1	if ( ! print _ unknown _ data ( ndo  pptr  strlit  isis _ csnp _ header _ size ) )	EMPTY	EMPTY
52	2381	2	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	2382	3	-1	0	-1	}	EMPTY	EMPTY
52	2384	1	0	0	-1	packet _ len -= ( isis _ common _ header _ size + isis _ csnp _ header _ size ) ;	EMPTY	EMPTY
52	2385	2	-1	0	-1	pptr = p + ( isis _ common _ header _ size + isis _ csnp _ header _ size ) ;	EMPTY	EMPTY
52	2386	3	-1	0	-1	break ;	EMPTY	EMPTY
52	2388	1	0	0	-1	case isis _ pdu _ l1 _ psnp :	EMPTY	EMPTY
52	2389	2	-1	0	-1	case isis _ pdu _ l2 _ psnp :	EMPTY	EMPTY
52	2390	2	-1	0	-1	if ( isis _ header -> fixed _ len != ( isis _ common _ header _ size + isis _ psnp _ header _ size ) ) {	EMPTY	EMPTY
52	2391	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2392	2	-1	0	-1	isis _ header -> fixed _ len  ( unsigned long ) isis _ psnp _ header _ size ) ) ;	EMPTY	EMPTY
52	2393	2	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	2394	3	-1	0	-1	}	EMPTY	EMPTY
52	2396	1	1	0	-1	pdu _ len = extract _ 16bits ( header _ psnp -> pdu _ len ) ;	extract _ 16bits	EMPTY
52	2397	2	-1	0	-1	if ( packet _ len > pdu _ len ) {	EMPTY	EMPTY
52	2398	2	-1	1	-1	packet _ len = pdu _ len ;	EMPTY	EMPTY
52	2399	2	-1	0	-1	length = pdu _ len	EMPTY	EMPTY
52	2400	3	-1	0	-1	}	EMPTY	EMPTY
52	2402	1	0	0	-1	nd _ tcheck ( * header _ psnp ) ;	EMPTY	EMPTY
52	2403	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2404	2	-1	0	-1	isis _ print _ id ( header _ psnp -> source _ id  node _ id _ len )	isis _ print _ id	EMPTY
52	2405	3	-1	0	-1	pdu _ len ) ) ;	EMPTY	EMPTY
52	2407	1	0	0	0	if ( ndo -> ndo _ vflag > numconst ) {	ndo _ vflag	EMPTY
52	2408	2	-1	0	-1	if ( ! print _ unknown _ data ( ndo  pptr  strlit  isis _ psnp _ header _ size ) )	EMPTY	EMPTY
52	2409	2	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	2410	3	-1	0	-1	}	EMPTY	EMPTY
52	2412	1	0	0	-1	packet _ len -= ( isis _ common _ header _ size + isis _ psnp _ header _ size ) ;	EMPTY	EMPTY
52	2413	2	-1	0	-1	pptr = p + ( isis _ common _ header _ size + isis _ psnp _ header _ size ) ;	EMPTY	EMPTY
52	2414	3	-1	0	-1	break ;	EMPTY	EMPTY
52	2416	1	0	0	-1	default :	EMPTY	EMPTY
52	2417	2	-1	0	-1	( void ) print _ unknown _ data ( ndo  pptr  strlit  length ) ;	EMPTY	EMPTY
52	2418	2	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	2419	3	-1	0	-1	}	EMPTY	EMPTY
52	2425	1	1	1	1	while ( packet _ len >= numconst ) {	EMPTY	EMPTY
52	2426	2	-1	0	-1	if ( pptr == ndo -> ndo _ snapend ) {	EMPTY	EMPTY
52	2427	2	-1	0	-1	return ( 1 ) ;	EMPTY	EMPTY
52	2428	3	-1	0	-1	}	EMPTY	EMPTY
52	2430	1	1	0	1	if ( ! nd _ ttest2 ( * pptr , 2 ) ) {	EMPTY	EMPTY
52	2431	2	-1	0	-1	nd _ print ( ( ndo ,  " \n\t\t packet exceeded snapshot (%ld) bytes "  ,	EMPTY	EMPTY
52	2432	2	-1	0	-1	( long ) ( pptr - ndo -> ndo _ snapend ) ) ) ;	EMPTY	EMPTY
52	2433	2	-1	0	-1	return ( 1 ) ;	EMPTY	EMPTY
52	2434	2	-1	0	-1	}	EMPTY	EMPTY
52	2435	2	-1	0	-1	tlv _ type = * pptr ++	EMPTY	EMPTY
52	2436	2	-1	0	-1	tlv _ len = * pptr ++	EMPTY	EMPTY
52	2437	2	-1	1	-1	tmp = tlv _ len	EMPTY	EMPTY
52	2438	2	-1	0	-1	tptr = pptr	EMPTY	EMPTY
52	2439	2	-1	0	-1	packet _ len -= 2	EMPTY	EMPTY
52	2440	2	-1	0	-1	if ( tlv _ len > packet _ len ) {	EMPTY	EMPTY
52	2441	2	-1	0	-1	break ;	EMPTY	EMPTY
52	2442	3	-1	0	-1	}	EMPTY	EMPTY
52	2445	1	1	1	1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2446	2	-1	0	-1	tok2str ( isis _ tlv _ values	tok2str	EMPTY
52	2447	2	-1	0	-1	strlit	EMPTY	EMPTY
52	2448	2	-1	0	-1	tlv _ type )	EMPTY	EMPTY
52	2449	2	-1	0	-1	tlv _ type	EMPTY	EMPTY
52	2450	3	-1	0	-1	tlv _ len ) ) ;	EMPTY	EMPTY
52	2452	1	0	0	-1	if ( tlv _ len == numconst )	EMPTY	EMPTY
52	2453	3	-1	0	-1	continue ;	EMPTY	EMPTY
52	2456	1	1	1	1	switch ( tlv _ type ) {	EMPTY	EMPTY
52	2457	2	-1	0	-1	case isis _ tlv _ area _ addr :	EMPTY	EMPTY
52	2458	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr , 1 ) )	EMPTY	EMPTY
52	2459	2	-1	0	-1	goto trunctlv	EMPTY	EMPTY
52	2460	2	-1	0	-1	alen = * tptr ++	EMPTY	EMPTY
52	2461	2	-1	0	-1	while ( tmp && alen < tmp ) {	EMPTY	EMPTY
52	2462	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2463	2	-1	0	-1	alen	EMPTY	EMPTY
52	2464	2	-1	0	-1	isonsap _ string ( tptr  alen ) ) ) ;	EMPTY	EMPTY
52	2465	2	-1	0	-1	tptr += alen	EMPTY	EMPTY
52	2466	2	-1	0	-1	tmp -= alen + 1	EMPTY	EMPTY
52	2467	2	-1	0	-1	if ( tmp == numconst )	EMPTY	EMPTY
52	2468	2	-1	0	-1	break ;	EMPTY	EMPTY
52	2469	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr , 1 ) )	EMPTY	EMPTY
52	2470	2	-1	0	-1	goto trunctlv	EMPTY	EMPTY
52	2471	2	-1	0	-1	alen = * tptr ++	EMPTY	EMPTY
52	2472	2	-1	0	-1	}	EMPTY	EMPTY
52	2473	2	-1	0	-1	break ;	EMPTY	EMPTY
52	2474	2	-1	0	-1	case isis _ tlv _ isneigh :	EMPTY	EMPTY
52	2475	2	-1	0	-1	while ( tmp >= ether _ addr _ len ) {	EMPTY	EMPTY
52	2476	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr  ether _ addr _ len ) )	EMPTY	EMPTY
52	2477	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2478	2	-1	0	-1	nd _ print ( ( ndo  strlit  isis _ print _ id ( tptr  ether _ addr _ len ) ) ) ;	isis _ print _ id	EMPTY
52	2479	2	-1	0	-1	tmp -= ether _ addr _ len ;	EMPTY	EMPTY
52	2480	2	-1	0	-1	tptr += ether _ addr _ len ;	EMPTY	EMPTY
52	2481	2	-1	0	-1	}	EMPTY	EMPTY
52	2482	3	-1	0	-1	break ;	EMPTY	EMPTY
52	2484	1	0	0	-1	case isis _ tlv _ isneigh _ varlen :	EMPTY	EMPTY
52	2485	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr  numconst ) || tmp < numconst )	EMPTY	EMPTY
52	2486	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2487	2	-1	0	-1	lan _ alen = * tptr ++	EMPTY	EMPTY
52	2488	2	-1	0	-1	if ( lan _ alen == 0 ) {	EMPTY	EMPTY
52	2489	2	-1	0	-1	nd _ print ( ( ndo ,  " \n\t      lan address length 0 bytes (invalid) "  ) ) ;	EMPTY	EMPTY
52	2490	2	-1	0	-1	break ;	EMPTY	EMPTY
52	2491	2	-1	0	-1	}	EMPTY	EMPTY
52	2492	2	-1	0	-1	tmp --	EMPTY	EMPTY
52	2493	2	-1	0	-1	nd _ print ( ( ndo  strlit  lan _ alen ) ) ;	EMPTY	EMPTY
52	2494	2	-1	0	-1	while ( tmp >= lan _ alen ) {	EMPTY	EMPTY
52	2495	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr , lan _ alen ) )	EMPTY	EMPTY
52	2496	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2497	2	-1	0	-1	nd _ print ( ( ndo ,  " \n\t\tis neighbor: %s "  , isis _ print _ id ( tptr , lan _ alen ) ) ) ;	isis _ print _ id	EMPTY
52	2498	2	-1	0	-1	tmp -= lan _ alen ;	EMPTY	EMPTY
52	2499	2	-1	0	-1	tptr += lan _ alen ;	EMPTY	EMPTY
52	2500	2	-1	0	-1	}	EMPTY	EMPTY
52	2501	3	-1	0	-1	break	EMPTY	EMPTY
52	2503	1	0	0	-1	case isis _ tlv _ padding :	EMPTY	EMPTY
52	2504	3	-1	0	-1	break	EMPTY	EMPTY
52	2506	1	0	0	-1	case isis _ tlv _ mt _ is _ reach :	EMPTY	EMPTY
52	2507	2	-1	0	-1	mt _ len = isis _ print _ mtid ( ndo , tptr ,  " \n\t       "  )	EMPTY	EMPTY
52	2508	2	-1	0	-1	if ( mt _ len == numconst )	EMPTY	EMPTY
52	2509	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2510	2	-1	0	-1	tptr += mt _ len	EMPTY	EMPTY
52	2511	2	-1	0	-1	tmp -= mt _ len	EMPTY	EMPTY
52	2512	2	-1	0	-1	while ( tmp >= numconst + node _ id _ len + numconst + numconst ) {	EMPTY	EMPTY
52	2513	2	-1	0	-1	ext _ is _ len = isis _ print _ ext _ is _ reach ( ndo , tptr ,  " \n\t       "  , tlv _ type )	EMPTY	EMPTY
52	2514	2	-1	0	-1	if ( ext _ is _ len == numconst )	EMPTY	EMPTY
52	2515	3	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2517	1	0	0	-1	tmp -= ext _ is _ len	EMPTY	EMPTY
52	2518	2	-1	0	-1	tptr += ext _ is _ len	EMPTY	EMPTY
52	2519	2	-1	0	-1	}	EMPTY	EMPTY
52	2520	3	-1	0	-1	break ;	EMPTY	EMPTY
52	2522	1	0	0	-1	case isis _ tlv _ is _ alias _ id :	EMPTY	EMPTY
52	2523	2	-1	0	-1	while ( tmp >= node _ id _ len + numconst ) {	EMPTY	EMPTY
52	2524	2	-1	0	-1	ext _ is _ len = isis _ print _ ext _ is _ reach ( ndo , tptr ,  " \n\t       "  , tlv _ type )	EMPTY	EMPTY
52	2525	2	-1	0	-1	if ( ext _ is _ len == numconst )	EMPTY	EMPTY
52	2526	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2527	2	-1	0	-1	tmp -= ext _ is _ len	EMPTY	EMPTY
52	2528	2	-1	0	-1	tptr += ext _ is _ len	EMPTY	EMPTY
52	2529	2	-1	0	-1	}	EMPTY	EMPTY
52	2530	3	-1	0	-1	break ;	EMPTY	EMPTY
52	2532	1	1	0	-1	case isis _ tlv _ ext _ is _ reach :	EMPTY	EMPTY
52	2533	2	-1	0	-1	while ( tmp >= node _ id _ len + numconst + numconst ) {	EMPTY	EMPTY
52	2534	2	-1	0	-1	ext _ is _ len = isis _ print _ ext _ is _ reach ( ndo , tptr ,  " \n\t       "  , tlv _ type )	EMPTY	EMPTY
52	2535	2	-1	0	-1	if ( ext _ is _ len == numconst )	EMPTY	EMPTY
52	2536	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2537	2	-1	0	-1	tmp -= ext _ is _ len	EMPTY	EMPTY
52	2538	2	-1	0	-1	tptr += ext _ is _ len	EMPTY	EMPTY
52	2539	2	-1	0	-1	}	EMPTY	EMPTY
52	2540	2	-1	0	-1	break ;	EMPTY	EMPTY
52	2541	2	-1	0	-1	case isis _ tlv _ is _ reach :	EMPTY	EMPTY
52	2542	2	-1	1	-1	if ( ! nd _ ttest2 ( * tptr  numconst ) )	EMPTY	EMPTY
52	2543	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2544	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2545	2	-1	0	-1	tok2str ( isis _ is _ reach _ virtual _ values	tok2str	EMPTY
52	2546	3	-1	0	-1	strlit	EMPTY	EMPTY
52	2548	1	0	0	-1	tlv _ is _ reach = ( const struct isis _ tlv _ is _ reach * ) tptr	EMPTY	EMPTY
52	2549	2	-1	0	-1	while ( tmp >= sizeof ( struct isis _ tlv _ is _ reach ) ) {	EMPTY	EMPTY
52	2550	2	-1	0	-1	if ( ! nd _ ttest ( * tlv _ is _ reach ) )	EMPTY	EMPTY
52	2551	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2552	2	-1	0	-1	nd _ print ( ( ndo ,  " \n\t      is neighbor: %s "  ,	EMPTY	EMPTY
52	2553	2	-1	0	-1	isis _ print _ id ( tlv _ is _ reach -> neighbor _ nodeid , node _ id _ len ) ) ) ;	isis _ print _ id	EMPTY
52	2554	2	-1	0	-1	isis _ print _ metric _ block ( ndo , & tlv _ is _ reach -> isis _ metric _ block ) ;	isis _ print _ metric _ block	EMPTY
52	2555	2	-1	0	-1	tmp -= sizeof ( struct isis _ tlv _ is _ reach ) ;	EMPTY	EMPTY
52	2556	2	-1	0	-1	tlv _ is _ reach ++ ;	EMPTY	EMPTY
52	2557	2	-1	0	-1	}	EMPTY	EMPTY
52	2558	3	-1	0	-1	break	EMPTY	EMPTY
52	2560	1	0	0	-1	case isis _ tlv _ esneigh :	EMPTY	EMPTY
52	2561	2	-1	0	-1	tlv _ es _ reach = ( const struct isis _ tlv _ es _ reach * ) tptr	EMPTY	EMPTY
52	2562	2	-1	0	-1	while ( tmp >= sizeof ( struct isis _ tlv _ es _ reach ) ) {	EMPTY	EMPTY
52	2563	2	-1	0	-1	if ( ! nd _ ttest ( * tlv _ es _ reach ) )	EMPTY	EMPTY
52	2564	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2565	2	-1	0	-1	nd _ print ( ( ndo ,  " \n\t      es neighbor: %s "  ,	EMPTY	EMPTY
52	2566	2	-1	0	-1	isis _ print _ id ( tlv _ es _ reach -> neighbor _ sysid , system _ id _ len ) ) ) ;	isis _ print _ id	EMPTY
52	2567	2	-1	0	-1	isis _ print _ metric _ block ( ndo , & tlv _ es _ reach -> isis _ metric _ block ) ;	isis _ print _ metric _ block	EMPTY
52	2568	2	-1	0	-1	tmp -= sizeof ( struct isis _ tlv _ es _ reach ) ;	EMPTY	EMPTY
52	2569	2	-1	0	-1	tlv _ es _ reach ++ ;	EMPTY	EMPTY
52	2570	2	-1	0	-1	}	EMPTY	EMPTY
52	2571	3	-1	0	-1	break	EMPTY	EMPTY
52	2574	1	1	1	-1	case isis _ tlv _ int _ ip _ reach :	EMPTY	EMPTY
52	2575	2	-1	0	-1	case isis _ tlv _ ext _ ip _ reach :	EMPTY	EMPTY
52	2576	2	-1	0	-1	if ( ! isis _ print _ tlv _ ip _ reach ( ndo , pptr ,  " \n\t       "  , tlv _ len ) )	EMPTY	EMPTY
52	2577	2	-1	0	-1	return ( 1 )	EMPTY	EMPTY
52	2578	3	-1	0	-1	break	EMPTY	EMPTY
52	2580	1	0	0	-1	case isis _ tlv _ extd _ ip _ reach :	EMPTY	EMPTY
52	2581	2	-1	0	-1	while ( tmp > numconst ) {	EMPTY	EMPTY
52	2582	2	-1	0	-1	ext _ ip _ len = isis _ print _ extd _ ip _ reach ( ndo , tptr ,  " \n\t       "  , af _ inet )	EMPTY	EMPTY
52	2583	2	-1	0	-1	if ( ext _ ip _ len == numconst )	EMPTY	EMPTY
52	2584	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2585	2	-1	0	-1	tptr += ext _ ip _ len	EMPTY	EMPTY
52	2586	2	-1	0	-1	tmp -= ext _ ip _ len	EMPTY	EMPTY
52	2587	2	-1	0	-1	}	EMPTY	EMPTY
52	2588	3	-1	0	-1	break ;	EMPTY	EMPTY
52	2590	1	0	0	-1	case isis _ tlv _ mt _ ip _ reach :	EMPTY	EMPTY
52	2591	2	-1	0	-1	mt _ len = isis _ print _ mtid ( ndo  tptr  strlit ) ;	EMPTY	EMPTY
52	2592	2	-1	0	-1	if ( mt _ len == numconst ) {	EMPTY	EMPTY
52	2593	2	-1	0	-1	goto trunctlv	EMPTY	EMPTY
52	2594	2	-1	0	-1	}	EMPTY	EMPTY
52	2595	2	-1	0	-1	tptr += mt _ len ;	EMPTY	EMPTY
52	2596	3	-1	0	-1	tmp -= mt _ len ;	EMPTY	EMPTY
52	2598	1	0	0	0	while ( tmp > numconst ) {	EMPTY	EMPTY
52	2599	2	-1	0	-1	ext _ ip _ len = isis _ print _ extd _ ip _ reach ( ndo  tptr  strlit  af _ inet ) ;	EMPTY	EMPTY
52	2600	2	-1	0	-1	if ( ext _ ip _ len == numconst )	EMPTY	EMPTY
52	2601	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2602	2	-1	0	-1	tptr += ext _ ip _ len	EMPTY	EMPTY
52	2603	2	-1	0	-1	tmp -= ext _ ip _ len	EMPTY	EMPTY
52	2604	2	-1	0	-1	}	EMPTY	EMPTY
52	2605	3	-1	0	-1	break ;	EMPTY	EMPTY
52	2607	1	0	0	-1	# ifdef inet6	EMPTY	EMPTY
52	2608	2	-1	0	-1	case isis _ tlv _ ip6 _ reach :	EMPTY	EMPTY
52	2609	2	-1	0	-1	while ( tmp > numconst ) {	EMPTY	EMPTY
52	2610	2	-1	0	-1	ext _ ip _ len = isis _ print _ extd _ ip _ reach ( ndo  tptr  strlit  af _ inet6 ) ;	EMPTY	EMPTY
52	2611	2	-1	0	-1	if ( ext _ ip _ len == numconst )	EMPTY	EMPTY
52	2612	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2613	2	-1	0	-1	tptr += ext _ ip _ len	EMPTY	EMPTY
52	2614	2	-1	0	-1	tmp -= ext _ ip _ len	EMPTY	EMPTY
52	2615	2	-1	0	-1	}	EMPTY	EMPTY
52	2616	3	-1	0	-1	break ;	EMPTY	EMPTY
52	2618	1	0	0	-1	case isis _ tlv _ mt _ ip6 _ reach :	EMPTY	EMPTY
52	2619	2	-1	0	-1	mt _ len = isis _ print _ mtid ( ndo  tptr  strlit ) ;	EMPTY	EMPTY
52	2620	2	-1	0	-1	if ( mt _ len == numconst ) {	EMPTY	EMPTY
52	2621	2	-1	0	-1	goto trunctlv	EMPTY	EMPTY
52	2622	2	-1	0	-1	}	EMPTY	EMPTY
52	2623	2	-1	0	-1	tptr += mt _ len ;	EMPTY	EMPTY
52	2624	3	-1	0	-1	tmp -= mt _ len ;	EMPTY	EMPTY
52	2626	1	0	0	0	while ( tmp > numconst ) {	EMPTY	EMPTY
52	2627	2	-1	0	-1	ext _ ip _ len = isis _ print _ extd _ ip _ reach ( ndo  tptr  strlit  af _ inet6 ) ;	EMPTY	EMPTY
52	2628	2	-1	0	-1	if ( ext _ ip _ len == numconst )	EMPTY	EMPTY
52	2629	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2630	2	-1	0	-1	tptr += ext _ ip _ len	EMPTY	EMPTY
52	2631	2	-1	0	-1	tmp -= ext _ ip _ len	EMPTY	EMPTY
52	2632	2	-1	0	-1	}	EMPTY	EMPTY
52	2633	3	-1	0	-1	break ;	EMPTY	EMPTY
52	2635	1	0	0	-1	case isis _ tlv _ ip6addr :	EMPTY	EMPTY
52	2636	2	-1	0	-1	while ( tmp >= sizeof ( struct in6 _ addr ) ) {	EMPTY	EMPTY
52	2637	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr  sizeof ( struct in6 _ addr ) ) )	EMPTY	EMPTY
52	2638	3	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2640	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2641	3	-1	0	-1	ip6addr _ string ( ndo  tptr ) ) ) ;	EMPTY	EMPTY
52	2643	1	0	0	-1	tptr += sizeof ( struct in6 _ addr ) ;	EMPTY	EMPTY
52	2644	2	-1	0	-1	tmp -= sizeof ( struct in6 _ addr ) ;	EMPTY	EMPTY
52	2645	2	-1	0	-1	}	EMPTY	EMPTY
52	2646	2	-1	0	-1	break ;	EMPTY	EMPTY
52	2647	2	-1	0	-1	# endif	EMPTY	EMPTY
52	2648	2	-1	0	-1	case isis _ tlv _ auth :	EMPTY	EMPTY
52	2649	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr  numconst ) )	EMPTY	EMPTY
52	2650	3	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2652	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2653	2	-1	0	-1	tok2str ( isis _ subtlv _ auth _ values	tok2str	EMPTY
52	2654	3	-1	0	-1	strlit	EMPTY	EMPTY
52	2657	1	0	0	0	switch ( * tptr ) {	EMPTY	EMPTY
52	2658	2	-1	0	-1	case isis _ subtlv _ auth _ simple :	EMPTY	EMPTY
52	2659	2	-1	0	-1	for ( i = numconst ; i < tlv _ len ; i ++ ) {	EMPTY	EMPTY
52	2660	2	-1	0	-1	if ( ! nd _ ttest2 ( * ( tptr + i )  numconst ) )	EMPTY	EMPTY
52	2661	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2662	2	-1	0	-1	nd _ print ( ( ndo  strlit  * ( tptr + i ) ) ) ;	EMPTY	EMPTY
52	2663	2	-1	0	-1	}	EMPTY	EMPTY
52	2664	2	-1	0	-1	break ;	EMPTY	EMPTY
52	2665	2	-1	0	-1	case isis _ subtlv _ auth _ md5 :	EMPTY	EMPTY
52	2666	2	-1	0	-1	for ( i = numconst ; i < tlv _ len ; i ++ ) {	EMPTY	EMPTY
52	2667	2	-1	0	-1	if ( ! nd _ ttest2 ( * ( tptr + i )  numconst ) )	EMPTY	EMPTY
52	2668	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2669	2	-1	0	-1	nd _ print ( ( ndo  strlit  * ( tptr + i ) ) ) ;	EMPTY	EMPTY
52	2670	2	-1	0	-1	}	EMPTY	EMPTY
52	2671	2	-1	0	-1	if ( tlv _ len != isis _ subtlv _ auth _ md5 _ len + numconst )	EMPTY	EMPTY
52	2672	3	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
52	2674	1	0	0	-1	# ifdef have _ libcrypto	EMPTY	EMPTY
52	2675	2	-1	0	-1	sigcheck = signature _ verify ( ndo  optr  length	EMPTY	EMPTY
52	2676	2	-1	0	-1	( unsigned char * ) tptr + numconst ) ;	EMPTY	EMPTY
52	2677	2	-1	0	-1	# else	EMPTY	EMPTY
52	2678	2	-1	0	-1	sigcheck = cant _ check _ signature ;	EMPTY	EMPTY
52	2679	2	-1	0	-1	# endif	EMPTY	EMPTY
52	2680	3	-1	0	-1	nd _ print ( ( ndo  strlit  tok2str ( signature _ check _ values  strlit  sigcheck ) ) ) ;	tok2str	EMPTY
52	2682	1	0	0	-1	break ;	EMPTY	EMPTY
52	2683	2	-1	0	-1	case isis _ subtlv _ auth _ generic :	EMPTY	EMPTY
52	2684	2	-1	0	-1	key _ id = extract _ 16bits ( ( tptr + numconst ) ) ;	extract _ 16bits	EMPTY
52	2685	2	-1	0	-1	nd _ print ( ( ndo  strlit  key _ id ) ) ;	EMPTY	EMPTY
52	2686	2	-1	0	-1	for ( i = numconst + sizeof ( uint16 _ t ) ; i < tlv _ len ; i ++ ) {	EMPTY	EMPTY
52	2687	2	-1	0	-1	if ( ! nd _ ttest2 ( * ( tptr + i )  numconst ) )	EMPTY	EMPTY
52	2688	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2689	2	-1	0	-1	nd _ print ( ( ndo  strlit  * ( tptr + i ) ) ) ;	EMPTY	EMPTY
52	2690	2	-1	0	-1	}	EMPTY	EMPTY
52	2691	2	-1	0	-1	break ;	EMPTY	EMPTY
52	2692	2	-1	0	-1	case isis _ subtlv _ auth _ private :	EMPTY	EMPTY
52	2693	2	-1	0	-1	default :	EMPTY	EMPTY
52	2694	2	-1	0	-1	if ( ! print _ unknown _ data ( ndo  tptr + numconst  strlit  tlv _ len - numconst ) )	EMPTY	EMPTY
52	2695	2	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	2696	2	-1	0	-1	break ;	EMPTY	EMPTY
52	2697	2	-1	0	-1	}	EMPTY	EMPTY
52	2698	3	-1	0	-1	break ;	EMPTY	EMPTY
52	2700	1	0	0	-1	case isis _ tlv _ ptp _ adj :	EMPTY	EMPTY
52	2701	2	-1	0	-1	tlv _ ptp _ adj = ( const struct isis _ tlv _ ptp _ adj * ) tptr ;	EMPTY	EMPTY
52	2702	2	-1	0	-1	if ( tmp >= numconst ) {	EMPTY	EMPTY
52	2703	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr  numconst ) )	EMPTY	EMPTY
52	2704	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2705	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2706	3	-1	0	-1	tok2str ( isis _ ptp _ adjancey _ values  strlit  * tptr )	tok2str	EMPTY
52	2708	1	0	0	-1	tmp -- ;	EMPTY	EMPTY
52	2709	2	-1	0	-1	}	EMPTY	EMPTY
52	2710	2	-1	0	-1	if ( tmp > sizeof ( tlv _ ptp _ adj -> extd _ local _ circuit _ id ) ) {	EMPTY	EMPTY
52	2711	2	-1	0	-1	if ( ! nd _ ttest2 ( tlv _ ptp _ adj -> extd _ local _ circuit _ id	EMPTY	EMPTY
52	2712	2	-1	0	-1	sizeof ( tlv _ ptp _ adj -> extd _ local _ circuit _ id ) ) )	EMPTY	EMPTY
52	2713	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2714	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2715	2	-1	0	-1	extract _ 32bits ( tlv _ ptp _ adj -> extd _ local _ circuit _ id ) ) ) ;	EMPTY	EMPTY
52	2716	2	-1	0	-1	tmp -= sizeof ( tlv _ ptp _ adj -> extd _ local _ circuit _ id ) ;	EMPTY	EMPTY
52	2717	2	-1	0	-1	}	EMPTY	EMPTY
52	2718	2	-1	0	-1	if ( tmp >= system _ id _ len ) {	EMPTY	EMPTY
52	2719	2	-1	0	-1	if ( ! nd _ ttest2 ( tlv _ ptp _ adj -> neighbor _ sysid  system _ id _ len ) )	EMPTY	EMPTY
52	2720	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2721	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2722	2	-1	0	-1	isis _ print _ id ( tlv _ ptp _ adj -> neighbor _ sysid  system _ id _ len ) ) ) ;	isis _ print _ id	EMPTY
52	2723	2	-1	0	-1	tmp -= system _ id _ len ;	EMPTY	EMPTY
52	2724	2	-1	0	-1	}	EMPTY	EMPTY
52	2725	2	-1	0	-1	if ( tmp >= sizeof ( tlv _ ptp _ adj -> neighbor _ extd _ local _ circuit _ id ) ) {	EMPTY	EMPTY
52	2726	2	-1	0	-1	if ( ! nd _ ttest2 ( tlv _ ptp _ adj -> neighbor _ extd _ local _ circuit _ id	EMPTY	EMPTY
52	2727	2	-1	0	-1	sizeof ( tlv _ ptp _ adj -> neighbor _ extd _ local _ circuit _ id ) ) )	EMPTY	EMPTY
52	2728	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2729	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2730	2	-1	0	-1	extract _ 32bits ( tlv _ ptp _ adj -> neighbor _ extd _ local _ circuit _ id ) ) ) ;	EMPTY	EMPTY
52	2731	2	-1	0	-1	}	EMPTY	EMPTY
52	2732	3	-1	0	-1	break ;	EMPTY	EMPTY
52	2734	1	0	0	-1	case isis _ tlv _ protocols :	EMPTY	EMPTY
52	2735	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
52	2736	2	-1	0	-1	while ( tmp > numconst ) {	EMPTY	EMPTY
52	2737	2	-1	0	-1	if ( ! nd _ ttest2 ( * ( tptr )  numconst ) )	EMPTY	EMPTY
52	2738	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2739	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2740	2	-1	0	-1	tok2str ( nlpid _ values	tok2str	EMPTY
52	2741	3	-1	0	-1	strlit	EMPTY	EMPTY
52	2744	1	0	0	-1	if ( tmp > numconst )	EMPTY	EMPTY
52	2745	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
52	2746	2	-1	0	-1	tptr ++	EMPTY	EMPTY
52	2747	2	-1	0	-1	tmp --	EMPTY	EMPTY
52	2748	2	-1	0	-1	}	EMPTY	EMPTY
52	2749	3	-1	0	-1	break ;	EMPTY	EMPTY
52	2751	1	0	0	-1	case isis _ tlv _ mt _ port _ cap :	EMPTY	EMPTY
52	2752	2	-1	0	-1	{	EMPTY	EMPTY
52	2753	2	-1	0	-1	if ( ! nd _ ttest2 ( * ( tptr )  numconst ) )	EMPTY	EMPTY
52	2754	3	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2756	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2757	2	-1	0	-1	( extract _ 16bits ( tptr ) >> numconst )	extract _ 16bits	EMPTY
52	2758	3	-1	0	-1	( extract _ 16bits ( tptr ) & numconst ) ) ) ;	extract _ 16bits	EMPTY
52	2760	1	0	0	-1	tmp = tmp - numconst ;	EMPTY	EMPTY
52	2761	3	-1	0	-1	tptr = tptr + numconst ;	EMPTY	EMPTY
52	2763	1	0	0	0	if ( tmp )	EMPTY	EMPTY
52	2764	3	-1	0	-1	isis _ print _ mt _ port _ cap _ subtlv ( ndo  tptr  tmp ) ;	EMPTY	EMPTY
52	2766	1	0	0	-1	break ;	EMPTY	EMPTY
52	2767	3	-1	0	-1	}	EMPTY	EMPTY
52	2769	1	0	0	-1	case isis _ tlv _ mt _ capability :	EMPTY	EMPTY
52	2771	1	0	0	0	if ( ! nd _ ttest2 ( * ( tptr )  numconst ) )	EMPTY	EMPTY
52	2772	3	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2774	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2775	2	-1	0	-1	( extract _ 16bits ( tptr ) >> numconst ) & numconst	extract _ 16bits	EMPTY
52	2776	2	-1	0	-1	( extract _ 16bits ( tptr ) >> numconst ) & numconst	extract _ 16bits	EMPTY
52	2777	3	-1	0	-1	extract _ 16bits ( tptr ) & numconst ) ) ;	extract _ 16bits	EMPTY
52	2779	1	0	0	-1	tmp = tmp - numconst ;	EMPTY	EMPTY
52	2780	3	-1	0	-1	tptr = tptr + numconst ;	EMPTY	EMPTY
52	2782	1	0	0	0	if ( tmp )	EMPTY	EMPTY
52	2783	3	-1	0	-1	isis _ print _ mt _ capability _ subtlv ( ndo  tptr  tmp ) ;	EMPTY	EMPTY
52	2785	1	0	0	-1	break ;	EMPTY	EMPTY
52	2787	1	0	0	-1	case isis _ tlv _ te _ router _ id :	EMPTY	EMPTY
52	2788	2	-1	0	-1	if ( ! nd _ ttest2 ( * pptr  sizeof ( struct in _ addr ) ) )	EMPTY	EMPTY
52	2789	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2790	2	-1	0	-1	nd _ print ( ( ndo  strlit  ipaddr _ string ( ndo  pptr ) ) ) ;	EMPTY	EMPTY
52	2791	3	-1	0	-1	break ;	EMPTY	EMPTY
52	2793	1	0	0	-1	case isis _ tlv _ ipaddr :	EMPTY	EMPTY
52	2794	2	-1	0	-1	while ( tmp >= sizeof ( struct in _ addr ) ) {	EMPTY	EMPTY
52	2795	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr  sizeof ( struct in _ addr ) ) )	EMPTY	EMPTY
52	2796	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2797	2	-1	0	-1	nd _ print ( ( ndo  strlit  ipaddr _ string ( ndo  tptr ) ) ) ;	EMPTY	EMPTY
52	2798	2	-1	0	-1	tptr += sizeof ( struct in _ addr ) ;	EMPTY	EMPTY
52	2799	2	-1	0	-1	tmp -= sizeof ( struct in _ addr ) ;	EMPTY	EMPTY
52	2800	2	-1	0	-1	}	EMPTY	EMPTY
52	2801	3	-1	0	-1	break ;	EMPTY	EMPTY
52	2803	1	0	0	-1	case isis _ tlv _ hostname :	EMPTY	EMPTY
52	2804	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
52	2805	2	-1	0	-1	while ( tmp > numconst ) {	EMPTY	EMPTY
52	2806	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr  numconst ) )	EMPTY	EMPTY
52	2807	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2808	2	-1	0	-1	nd _ print ( ( ndo  strlit  * tptr ++ ) ) ;	EMPTY	EMPTY
52	2809	2	-1	0	-1	tmp -- ;	EMPTY	EMPTY
52	2810	2	-1	0	-1	}	EMPTY	EMPTY
52	2811	3	-1	0	-1	break ;	EMPTY	EMPTY
52	2813	1	0	0	-1	case isis _ tlv _ shared _ risk _ group :	EMPTY	EMPTY
52	2814	2	-1	0	-1	if ( tmp < node _ id _ len )	EMPTY	EMPTY
52	2815	2	-1	0	-1	break ;	EMPTY	EMPTY
52	2816	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr  node _ id _ len ) )	EMPTY	EMPTY
52	2817	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2818	2	-1	0	-1	nd _ print ( ( ndo  strlit  isis _ print _ id ( tptr  node _ id _ len ) ) ) ;	isis _ print _ id	EMPTY
52	2819	2	-1	0	-1	tptr += ( node _ id _ len ) ;	EMPTY	EMPTY
52	2820	3	-1	0	-1	tmp -= ( node _ id _ len ) ;	EMPTY	EMPTY
52	2822	1	0	0	0	if ( tmp < numconst )	EMPTY	EMPTY
52	2823	2	-1	0	-1	break ;	EMPTY	EMPTY
52	2824	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr  numconst ) )	EMPTY	EMPTY
52	2825	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2826	2	-1	0	-1	nd _ print ( ( ndo  strlit  isis _ mask _ tlv _ shared _ risk _ group ( * tptr ++ ) ? strlit : strlit ) ) ;	EMPTY	EMPTY
52	2827	3	-1	0	-1	tmp -- ;	EMPTY	EMPTY
52	2829	1	0	0	0	if ( tmp < sizeof ( struct in _ addr ) )	EMPTY	EMPTY
52	2830	2	-1	0	-1	break ;	EMPTY	EMPTY
52	2831	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr  sizeof ( struct in _ addr ) ) )	EMPTY	EMPTY
52	2832	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2833	2	-1	0	-1	nd _ print ( ( ndo  strlit  ipaddr _ string ( ndo  tptr ) ) ) ;	EMPTY	EMPTY
52	2834	2	-1	0	-1	tptr += sizeof ( struct in _ addr ) ;	EMPTY	EMPTY
52	2835	3	-1	0	-1	tmp -= sizeof ( struct in _ addr ) ;	EMPTY	EMPTY
52	2837	1	0	0	0	if ( tmp < sizeof ( struct in _ addr ) )	EMPTY	EMPTY
52	2838	2	-1	0	-1	break ;	EMPTY	EMPTY
52	2839	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr  sizeof ( struct in _ addr ) ) )	EMPTY	EMPTY
52	2840	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2841	2	-1	0	-1	nd _ print ( ( ndo  strlit  ipaddr _ string ( ndo  tptr ) ) ) ;	EMPTY	EMPTY
52	2842	2	-1	0	-1	tptr += sizeof ( struct in _ addr ) ;	EMPTY	EMPTY
52	2843	3	-1	0	-1	tmp -= sizeof ( struct in _ addr ) ;	EMPTY	EMPTY
52	2845	1	0	0	0	while ( tmp >= numconst ) {	EMPTY	EMPTY
52	2846	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr  numconst ) )	EMPTY	EMPTY
52	2847	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2848	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 32bits ( tptr ) ) ) ;	EMPTY	EMPTY
52	2849	2	-1	0	-1	tptr += numconst ;	EMPTY	EMPTY
52	2850	2	-1	0	-1	tmp -= numconst ;	EMPTY	EMPTY
52	2851	2	-1	0	-1	}	EMPTY	EMPTY
52	2852	3	-1	0	-1	break ;	EMPTY	EMPTY
52	2854	1	0	0	-1	case isis _ tlv _ lsp :	EMPTY	EMPTY
52	2855	2	-1	0	-1	tlv _ lsp = ( const struct isis _ tlv _ lsp * ) tptr ;	EMPTY	EMPTY
52	2856	2	-1	0	-1	while ( tmp >= sizeof ( struct isis _ tlv _ lsp ) ) {	EMPTY	EMPTY
52	2857	2	-1	0	-1	if ( ! nd _ ttest ( ( tlv _ lsp -> lsp _ id ) [ lsp _ id _ len - numconst ] ) )	EMPTY	EMPTY
52	2858	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2859	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2860	2	-1	0	-1	isis _ print _ id ( tlv _ lsp -> lsp _ id  lsp _ id _ len ) ) ) ;	isis _ print _ id	EMPTY
52	2861	2	-1	0	-1	if ( ! nd _ ttest2 ( tlv _ lsp -> sequence _ number  numconst ) )	EMPTY	EMPTY
52	2862	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2863	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 32bits ( tlv _ lsp -> sequence _ number ) ) ) ;	EMPTY	EMPTY
52	2864	2	-1	0	-1	if ( ! nd _ ttest2 ( tlv _ lsp -> remaining _ lifetime  numconst ) )	EMPTY	EMPTY
52	2865	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2866	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 16bits ( tlv _ lsp -> remaining _ lifetime ) ) ) ;	extract _ 16bits	EMPTY
52	2867	2	-1	0	-1	if ( ! nd _ ttest2 ( tlv _ lsp -> checksum  numconst ) )	EMPTY	EMPTY
52	2868	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2869	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 16bits ( tlv _ lsp -> checksum ) ) ) ;	extract _ 16bits	EMPTY
52	2870	2	-1	0	-1	tmp -= sizeof ( struct isis _ tlv _ lsp ) ;	EMPTY	EMPTY
52	2871	2	-1	0	-1	tlv _ lsp ++ ;	EMPTY	EMPTY
52	2872	2	-1	0	-1	}	EMPTY	EMPTY
52	2873	3	-1	0	-1	break ;	EMPTY	EMPTY
52	2875	1	1	0	-1	case isis _ tlv _ checksum :	EMPTY	EMPTY
52	2876	2	-1	0	-1	if ( tmp < isis _ tlv _ checksum _ minlen )	EMPTY	EMPTY
52	2877	2	-1	0	-1	break ;	EMPTY	EMPTY
52	2878	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr  isis _ tlv _ checksum _ minlen ) )	EMPTY	EMPTY
52	2879	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2880	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 16bits ( tptr ) ) ) ;	extract _ 16bits	EMPTY
52	2886	2	-1	1	-1	osi _ print _ cksum ( ndo , optr , extract _ 16bits ( tptr ) , tptr - optr , length )	extract _ 16bits	EMPTY
52	2887	3	-1	0	-1	break	EMPTY	EMPTY
52	2889	1	1	0	-1	case isis _ tlv _ mt _ supported :	EMPTY	EMPTY
52	2890	2	-1	0	-1	if ( tmp < isis _ tlv _ mt _ supported _ minlen )	EMPTY	EMPTY
52	2891	2	-1	0	-1	break	EMPTY	EMPTY
52	2892	2	-1	0	-1	while ( tmp > numconst ) {	EMPTY	EMPTY
52	2895	2	-1	1	-1	if ( tmp != numconst ) {	EMPTY	EMPTY
52	2896	2	-1	0	-1	mt _ len = isis _ print _ mtid ( ndo , tptr ,  " \n\t       "  )	EMPTY	EMPTY
52	2897	2	-1	0	-1	if ( mt _ len == numconst )	EMPTY	EMPTY
52	2898	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2899	2	-1	0	-1	tptr += mt _ len	EMPTY	EMPTY
52	2900	2	-1	0	-1	tmp -= mt _ len	EMPTY	EMPTY
52	2901	2	-1	0	-1	}	EMPTY	EMPTY
52	2902	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
52	2903	2	-1	0	-1	break ;	EMPTY	EMPTY
52	2904	2	-1	0	-1	}	EMPTY	EMPTY
52	2905	2	-1	0	-1	}	EMPTY	EMPTY
52	2906	3	-1	0	-1	break ;	EMPTY	EMPTY
52	2908	1	1	0	-1	case isis _ tlv _ restart _ signaling :	EMPTY	EMPTY
52	2910	2	-1	1	-1	if ( tmp < isis _ tlv _ restart _ signaling _ flaglen )	EMPTY	EMPTY
52	2911	2	-1	0	-1	break ;	EMPTY	EMPTY
52	2912	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr , isis _ tlv _ restart _ signaling _ flaglen ) )	EMPTY	EMPTY
52	2913	2	-1	0	-1	goto trunctlv	EMPTY	EMPTY
52	2914	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2915	2	-1	0	-1	bittok2str ( isis _ restart _ flag _ values  strlit  * tptr ) ) ) ;	EMPTY	EMPTY
52	2916	2	-1	0	-1	tptr += isis _ tlv _ restart _ signaling _ flaglen ;	EMPTY	EMPTY
52	2917	3	-1	0	-1	tmp -= isis _ tlv _ restart _ signaling _ flaglen ;	EMPTY	EMPTY
52	2920	1	1	1	1	if ( tmp == 0 )	EMPTY	EMPTY
52	2921	3	-1	0	-1	break	EMPTY	EMPTY
52	2923	1	0	0	0	if ( tmp < isis _ tlv _ restart _ signaling _ holdtimelen )	EMPTY	EMPTY
52	2924	2	-1	0	-1	break	EMPTY	EMPTY
52	2925	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr , isis _ tlv _ restart _ signaling _ holdtimelen ) )	EMPTY	EMPTY
52	2926	3	-1	0	-1	goto trunctlv	EMPTY	EMPTY
52	2928	1	0	0	0	nd _ print ( ( ndo  strlit  extract _ 16bits ( tptr ) ) ) ;	extract _ 16bits	EMPTY
52	2929	2	-1	0	-1	tptr += isis _ tlv _ restart _ signaling _ holdtimelen ;	EMPTY	EMPTY
52	2930	3	-1	0	-1	tmp -= isis _ tlv _ restart _ signaling _ holdtimelen ;	EMPTY	EMPTY
52	2933	1	1	1	1	if ( tmp == system _ id _ len ) {	EMPTY	EMPTY
52	2934	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr , system _ id _ len ) )	EMPTY	EMPTY
52	2935	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2936	2	-1	0	-1	nd _ print ( ( ndo ,  " , for %s "  , isis _ print _ id ( tptr , system _ id _ len ) ) ) ;	isis _ print _ id	EMPTY
52	2937	2	-1	0	-1	}	EMPTY	EMPTY
52	2938	3	-1	0	-1	break	EMPTY	EMPTY
52	2940	1	0	0	-1	case isis _ tlv _ idrp _ info :	EMPTY	EMPTY
52	2941	2	-1	0	-1	if ( tmp < isis _ tlv _ idrp _ info _ minlen )	EMPTY	EMPTY
52	2942	2	-1	0	-1	break	EMPTY	EMPTY
52	2943	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr , isis _ tlv _ idrp _ info _ minlen ) )	EMPTY	EMPTY
52	2944	2	-1	0	-1	goto trunctlv	EMPTY	EMPTY
52	2945	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	2946	2	-1	0	-1	tok2str ( isis _ subtlv _ idrp _ values	tok2str	EMPTY
52	2947	3	-1	0	-1	strlit	EMPTY	EMPTY
52	2949	1	0	0	0	switch ( * tptr ++ ) {	EMPTY	EMPTY
52	2950	2	-1	0	-1	case isis _ subtlv _ idrp _ asn :	EMPTY	EMPTY
52	2951	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr  numconst ) )	EMPTY	EMPTY
52	2952	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2953	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 16bits ( tptr ) ) ) ;	extract _ 16bits	EMPTY
52	2954	2	-1	0	-1	break	EMPTY	EMPTY
52	2955	2	-1	0	-1	case isis _ subtlv _ idrp _ local :	EMPTY	EMPTY
52	2956	2	-1	0	-1	case isis _ subtlv _ idrp _ res :	EMPTY	EMPTY
52	2957	2	-1	0	-1	default :	EMPTY	EMPTY
52	2958	2	-1	0	-1	if ( ! print _ unknown _ data ( ndo , tptr ,  " \n\t       "  , tlv _ len - 1 ) )	EMPTY	EMPTY
52	2959	2	-1	0	-1	return ( 0 )	EMPTY	EMPTY
52	2960	2	-1	0	-1	break	EMPTY	EMPTY
52	2961	2	-1	0	-1	}	EMPTY	EMPTY
52	2962	3	-1	0	-1	break ;	EMPTY	EMPTY
52	2964	1	0	0	-1	case isis _ tlv _ lsp _ buffersize :	EMPTY	EMPTY
52	2965	2	-1	0	-1	if ( tmp < isis _ tlv _ lsp _ buffersize _ minlen )	EMPTY	EMPTY
52	2966	2	-1	0	-1	break ;	EMPTY	EMPTY
52	2967	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr  isis _ tlv _ lsp _ buffersize _ minlen ) )	EMPTY	EMPTY
52	2968	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2969	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 16bits ( tptr ) ) ) ;	extract _ 16bits	EMPTY
52	2970	3	-1	0	-1	break ;	EMPTY	EMPTY
52	2972	1	0	0	-1	case isis _ tlv _ part _ dis :	EMPTY	EMPTY
52	2973	2	-1	0	-1	while ( tmp >= system _ id _ len ) {	EMPTY	EMPTY
52	2974	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr  system _ id _ len ) )	EMPTY	EMPTY
52	2975	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2976	2	-1	0	-1	nd _ print ( ( ndo  strlit  isis _ print _ id ( tptr  system _ id _ len ) ) ) ;	isis _ print _ id	EMPTY
52	2977	2	-1	0	-1	tptr += system _ id _ len ;	EMPTY	EMPTY
52	2978	2	-1	0	-1	tmp -= system _ id _ len ;	EMPTY	EMPTY
52	2979	2	-1	0	-1	}	EMPTY	EMPTY
52	2980	3	-1	0	-1	break ;	EMPTY	EMPTY
52	2982	1	0	0	-1	case isis _ tlv _ prefix _ neigh :	EMPTY	EMPTY
52	2983	2	-1	0	-1	if ( tmp < sizeof ( struct isis _ metric _ block ) )	EMPTY	EMPTY
52	2984	2	-1	0	-1	break ;	EMPTY	EMPTY
52	2985	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr  sizeof ( struct isis _ metric _ block ) ) )	EMPTY	EMPTY
52	2986	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2987	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
52	2988	2	-1	0	-1	isis _ print _ metric _ block ( ndo  ( const struct isis _ metric _ block * ) tptr ) ;	isis _ print _ metric _ block	EMPTY
52	2989	2	-1	0	-1	tptr += sizeof ( struct isis _ metric _ block ) ;	EMPTY	EMPTY
52	2990	3	-1	0	-1	tmp -= sizeof ( struct isis _ metric _ block ) ;	EMPTY	EMPTY
52	2992	1	0	0	0	while ( tmp > numconst ) {	EMPTY	EMPTY
52	2993	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr  numconst ) )	EMPTY	EMPTY
52	2994	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	2995	2	-1	0	-1	prefix _ len = * tptr ++ ;	EMPTY	EMPTY
52	2996	2	-1	0	-1	if ( prefix _ len < 2 ) {	EMPTY	EMPTY
52	2997	2	-1	0	-1	nd _ print ( ( ndo ,  " \n\t\taddress: prefix length %u < 2 "  , prefix _ len ) ) ;	prefix	EMPTY
52	2998	2	-1	0	-1	break ;	EMPTY	EMPTY
52	2999	2	-1	0	-1	}	EMPTY	EMPTY
52	3000	2	-1	0	-1	tmp --	EMPTY	EMPTY
52	3001	2	-1	0	-1	if ( tmp < prefix _ len / 2 )	EMPTY	EMPTY
52	3002	2	-1	0	-1	break	EMPTY	EMPTY
52	3003	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr , prefix _ len / 2 ) )	EMPTY	EMPTY
52	3004	2	-1	0	-1	goto trunctlv	EMPTY	EMPTY
52	3005	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	3006	2	-1	0	-1	isonsap _ string ( tptr  prefix _ len / numconst )  prefix _ len * numconst ) ) ;	EMPTY	EMPTY
52	3007	2	-1	0	-1	tptr += prefix _ len / 2	EMPTY	EMPTY
52	3008	2	-1	0	-1	tmp -= prefix _ len / 2	EMPTY	EMPTY
52	3009	2	-1	0	-1	}	EMPTY	EMPTY
52	3010	3	-1	0	-1	break ;	EMPTY	EMPTY
52	3012	1	0	0	-1	case isis _ tlv _ iih _ seqnr :	EMPTY	EMPTY
52	3013	2	-1	0	-1	if ( tmp < isis _ tlv _ iih _ seqnr _ minlen )	EMPTY	EMPTY
52	3014	2	-1	0	-1	break ;	EMPTY	EMPTY
52	3015	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr  isis _ tlv _ iih _ seqnr _ minlen ) )	EMPTY	EMPTY
52	3016	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	3017	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 32bits ( tptr ) ) ) ;	EMPTY	EMPTY
52	3018	3	-1	0	-1	break	EMPTY	EMPTY
52	3020	1	0	0	-1	case isis _ tlv _ vendor _ private :	EMPTY	EMPTY
52	3021	2	-1	0	-1	if ( tmp < isis _ tlv _ vendor _ private _ minlen )	EMPTY	EMPTY
52	3022	2	-1	0	-1	break	EMPTY	EMPTY
52	3023	2	-1	0	-1	if ( ! nd _ ttest2 ( * tptr  isis _ tlv _ vendor _ private _ minlen ) )	EMPTY	EMPTY
52	3024	2	-1	0	-1	goto trunctlv ;	EMPTY	EMPTY
52	3025	2	-1	0	-1	vendor _ id = extract _ 24bits ( tptr ) ;	EMPTY	EMPTY
52	3026	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
52	3027	2	-1	0	-1	tok2str ( oui _ values  strlit  vendor _ id )	tok2str	EMPTY
52	3028	2	-1	0	-1	vendor _ id ) ) ;	EMPTY	EMPTY
52	3029	2	-1	0	-1	tptr += 3	EMPTY	EMPTY
52	3030	2	-1	0	-1	tmp -= 3	EMPTY	EMPTY
52	3031	2	-1	0	-1	if ( tmp > numconst )	EMPTY	EMPTY
52	3032	2	-1	0	-1	if ( ! print _ unknown _ data ( ndo  tptr  strlit  tmp ) )	EMPTY	EMPTY
52	3033	2	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	3034	3	-1	0	-1	break	EMPTY	EMPTY
52	3040	1	1	1	1	case isis _ tlv _ decnet _ phase4 :	EMPTY	EMPTY
52	3041	2	-1	0	-1	case isis _ tlv _ lucent _ private :	EMPTY	EMPTY
52	3042	2	-1	0	-1	case isis _ tlv _ ipauth :	EMPTY	EMPTY
52	3043	2	-1	0	-1	case isis _ tlv _ nortel _ private1 :	EMPTY	EMPTY
52	3044	3	-1	0	-1	case isis _ tlv _ nortel _ private2 :	EMPTY	EMPTY
52	3046	1	1	0	-1	default :	EMPTY	EMPTY
52	3047	2	-1	0	-1	if ( ndo -> ndo _ vflag <= 1 ) {	ndo _ vflag	EMPTY
52	3048	2	-1	0	-1	if ( ! print _ unknown _ data ( ndo , pptr ,  " \n\t\t "  , tlv _ len ) )	EMPTY	EMPTY
52	3049	2	-1	0	-1	return ( 0 ) ;	EMPTY	EMPTY
52	3050	2	-1	0	-1	}	EMPTY	EMPTY
52	3051	2	-1	0	-1	break	EMPTY	EMPTY
52	3052	2	-1	0	-1	}	EMPTY	EMPTY
52	3054	2	-1	1	-1	if ( ndo -> ndo _ vflag > 1 ) {	ndo _ vflag	EMPTY
52	3055	2	-1	0	-1	if ( ! print _ unknown _ data ( ndo , pptr ,  " \n\t       "  , tlv _ len ) )	EMPTY	EMPTY
52	3056	2	-1	0	-1	return ( 0 ) ;	EMPTY	EMPTY
52	3057	3	-1	0	-1	}	EMPTY	EMPTY
52	3059	1	0	0	-1	pptr += tlv _ len	EMPTY	EMPTY
52	3060	2	-1	0	-1	packet _ len -= tlv _ len	EMPTY	EMPTY
52	3061	3	-1	0	-1	}	EMPTY	EMPTY
52	3063	1	0	0	0	if ( packet _ len != numconst ) {	EMPTY	EMPTY
52	3064	2	-1	0	-1	nd _ print ( ( ndo  strlit  packet _ len ) ) ;	EMPTY	EMPTY
52	3065	2	-1	0	-1	}	EMPTY	EMPTY
52	3066	3	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	3068	1	0	0	-1	trunc :	EMPTY	EMPTY
52	3069	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
52	3070	3	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	3072	1	0	0	-1	trunctlv :	EMPTY	EMPTY
52	3073	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
52	3074	2	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
52	3075	3	-1	0	-1	}	EMPTY	EMPTY
52	3077	1	0	0	-1	static void	EMPTY	EMPTY
52	3078	2	-1	0	-1	osi _ print _ cksum ( netdissect _ options * ndo	EMPTY	EMPTY
52	3079	2	-1	0	-1	const uint8 _ t * pptr  uint16 _ t checksum	EMPTY	EMPTY
52	3080	2	-1	0	-1	u _ int checksum _ offset  u _ int length )	EMPTY	EMPTY
52	3081	2	-1	0	-1	{	EMPTY	EMPTY
52	3082	3	-1	0	-1	uint16 _ t calculated _ checksum ;	EMPTY	EMPTY
52	3089	1	1	1	1	if ( ! checksum	EMPTY	EMPTY
52	3090	2	-1	0	-1	|| length > ndo -> ndo _ snaplen	EMPTY	EMPTY
52	3091	2	-1	0	-1	|| checksum _ offset > ndo -> ndo _ snaplen	EMPTY	EMPTY
52	3092	2	-1	0	-1	|| checksum _ offset > length ) {	EMPTY	EMPTY
52	3093	2	-1	0	-1	nd _ print ( ( ndo ,  " (unverified) "  ) ) ;	EMPTY	EMPTY
52	3094	2	-1	0	-1	} else {	EMPTY	EMPTY
52	3095	2	-1	0	-1	unsigned char * truncated =  " trunc "  ;	EMPTY	EMPTY
52	3096	2	-1	0	-1	# if 0	EMPTY	EMPTY
52	3097	2	-1	0	-1	printf (  " \nosi _ print _ cksum: %p %u %u %u\n "  , pptr , checksum _ offset , length , ndo -> ndo _ snaplen ) ;	EMPTY	EMPTY
52	3098	2	-1	0	-1	nd _ tcheck2 ( pptr , checksum _ offset + length ) ;	EMPTY	EMPTY
52	3099	2	-1	0	-1	# endif	EMPTY	EMPTY
52	3100	2	-1	0	-1	calculated _ checksum = create _ osi _ cksum ( pptr , checksum _ offset , length ) ;	EMPTY	EMPTY
52	3101	2	-1	0	-1	if ( checksum == calculated _ checksum ) {	EMPTY	EMPTY
52	3102	2	-1	0	-1	nd _ print ( ( ndo ,  "  (correct) "  ) ) ;	EMPTY	EMPTY
52	3103	2	-1	0	-1	} else {	EMPTY	EMPTY
52	3104	2	-1	0	-1	truncated =  " incorrect "  ;	EMPTY	EMPTY
52	3105	2	-1	0	-1	# if 0	EMPTY	EMPTY
52	3106	2	-1	0	-1	trunc :	EMPTY	EMPTY
52	3107	2	-1	0	-1	# endif	EMPTY	EMPTY
52	3108	2	-1	0	-1	nd _ print ( ( ndo ,  "  (%s should be 0x%04x) "  , truncated , calculated _ checksum ) ) ;	EMPTY	EMPTY
52	3109	2	-1	0	-1	}	EMPTY	EMPTY
52	3110	2	-1	0	-1	}	EMPTY	EMPTY
52	3111	3	-1	0	-1	}	EMPTY	EMPTY
60	29	1	0	0	-1	static const char copyright [ ]  _ u _  =	EMPTY	EMPTY
60	30	2	-1	0	-1	strlit	EMPTY	EMPTY
60	31	2	-1	0	-1	the regents of the university of california . all rights reserved . \\ n \;	n	EMPTY
60	32	3	-1	0	-1	# endif	EMPTY	EMPTY
60	42	1	1	1	-1	# ifdef have _ config _ h	EMPTY	EMPTY
60	43	2	-1	0	-1	# include strlit	EMPTY	EMPTY
60	44	3	-1	0	-1	# endif	EMPTY	EMPTY
60	51	1	1	1	-1	# ifdef have _ pcap _ findalldevs	EMPTY	EMPTY
60	52	2	-1	0	-1	# ifndef have _ pcap _ if _ t	EMPTY	EMPTY
60	53	2	-1	0	-1	# undef have _ pcap _ findalldevs	EMPTY	EMPTY
60	54	2	-1	0	-1	# endif	EMPTY	EMPTY
60	55	3	-1	0	-1	# endif	EMPTY	EMPTY
60	57	1	0	0	-1	# include < tcpdump - stdinc . h >	EMPTY	EMPTY
60	59	1	1	0	-1	# ifdef win32	EMPTY	EMPTY
60	60	2	-1	0	-1	# include strlit	EMPTY	EMPTY
60	61	2	-1	0	-1	extern int strcasecmp ( const char *  _  _ s1  const char *  _  _ s2 ) ;	EMPTY	strcasecmp
60	62	2	-1	0	-1	extern int size _ buf ;	EMPTY	EMPTY
60	63	2	-1	0	-1	# define off _ t long	EMPTY	EMPTY
60	64	2	-1	0	-1	# define uint uint	EMPTY	EMPTY
60	65	3	-1	1	-1	# endif	EMPTY	EMPTY
60	67	1	0	0	-1	# ifdef use _ libsmi	EMPTY	EMPTY
60	68	2	-1	0	-1	# include < smi . h >	EMPTY	EMPTY
60	69	3	-1	0	-1	# endif	EMPTY	EMPTY
60	71	1	0	0	-1	# ifdef have _ libcrypto	EMPTY	EMPTY
60	72	2	-1	0	-1	# include < openssl / crypto . h >	EMPTY	EMPTY
60	73	3	-1	0	-1	# endif	EMPTY	EMPTY
60	75	1	1	0	-1	# ifdef have _ getopt _ long	EMPTY	EMPTY
60	76	2	-1	0	-1	# include < getopt . h >	EMPTY	EMPTY
60	77	2	-1	0	-1	# else	EMPTY	EMPTY
60	78	2	-1	0	-1	# include strlit	EMPTY	EMPTY
60	79	2	-1	0	-1	# endif	EMPTY	EMPTY
60	84	2	-1	1	-1	# ifdef have _ capsicum	EMPTY	EMPTY
60	85	2	-1	0	-1	# include < sys / capability . h >	EMPTY	EMPTY
60	86	2	-1	0	-1	# include < sys / ioccom . h >	EMPTY	EMPTY
60	87	2	-1	0	-1	# include < net / bpf . h >	EMPTY	EMPTY
60	88	2	-1	0	-1	# include < fcntl . h >	EMPTY	EMPTY
60	89	2	-1	0	-1	# include < libgen . h >	EMPTY	EMPTY
60	90	2	-1	1	-1	# endif	EMPTY	EMPTY
60	91	2	-1	0	-1	# include < pcap . h >	EMPTY	EMPTY
60	92	2	-1	0	-1	# include < signal . h >	EMPTY	EMPTY
60	93	2	-1	0	-1	# include < stdio . h >	EMPTY	EMPTY
60	94	2	-1	0	-1	# include < stdlib . h >	EMPTY	EMPTY
60	95	2	-1	0	-1	# include < string . h >	EMPTY	EMPTY
60	96	2	-1	0	-1	# include < limits . h >	EMPTY	EMPTY
60	97	2	-1	0	-1	# ifndef win32	EMPTY	EMPTY
60	98	2	-1	0	-1	# include < sys / wait . h >	EMPTY	wait
60	99	2	-1	0	-1	# include < sys / resource . h >	EMPTY	EMPTY
60	100	2	-1	0	-1	# include < pwd . h >	EMPTY	EMPTY
60	101	2	-1	0	-1	# include < grp . h >	EMPTY	EMPTY
60	102	3	-1	1	-1	# endif	EMPTY	EMPTY
60	109	1	1	1	-1	# ifdef have _ libcap _ ng	EMPTY	EMPTY
60	110	2	-1	0	-1	# ifdef have _ cap _ ng _ h	EMPTY	EMPTY
60	111	2	-1	0	-1	# include < cap - ng . h >	EMPTY	EMPTY
60	112	2	-1	0	-1	# else	EMPTY	EMPTY
60	113	2	-1	0	-1	# undef have _ libcap _ ng	EMPTY	EMPTY
60	114	2	-1	1	-1	# endif	EMPTY	EMPTY
60	115	3	-1	1	-1	# endif	EMPTY	EMPTY
60	117	1	0	0	-1	# include strlit	EMPTY	EMPTY
60	118	2	-1	0	-1	# include strlit	EMPTY	EMPTY
60	119	2	-1	0	-1	# include strlit	EMPTY	EMPTY
60	120	2	-1	0	-1	# include strlit	EMPTY	EMPTY
60	121	2	-1	0	-1	# include strlit	EMPTY	EMPTY
60	122	2	-1	0	-1	# include strlit	EMPTY	EMPTY
60	123	3	-1	0	-1	# include strlit	EMPTY	EMPTY
60	125	1	0	0	-1	# ifndef path _ max	EMPTY	EMPTY
60	126	2	-1	0	-1	# define path _ max numconst	EMPTY	EMPTY
60	127	3	-1	0	-1	# endif	EMPTY	EMPTY
60	129	1	0	0	-1	# ifdef siginfo	EMPTY	EMPTY
60	130	2	-1	0	-1	# define signal _ req _ info siginfo	EMPTY	EMPTY
60	131	2	-1	0	-1	# elif sigusr1	EMPTY	EMPTY
60	132	2	-1	0	-1	# define signal _ req _ info sigusr1	EMPTY	EMPTY
60	133	3	-1	0	-1	# endif	EMPTY	EMPTY
60	135	1	0	0	0	netdissect _ options gndo	EMPTY	EMPTY
60	136	3	-1	0	-1	netdissect _ options * gndo = & gndo ;	EMPTY	EMPTY
60	138	1	1	1	-1	static int dflag ;	dflag	EMPTY
60	139	2	-1	1	-1	static int dflag ;	dflag	EMPTY
60	140	2	-1	1	-1	static int lflag ;	lflag	EMPTY
60	141	2	-1	0	-1	# ifdef have _ pcap _ set _ tstamp _ type	EMPTY	EMPTY
60	142	2	-1	1	-1	static int jflag ;	jflag	EMPTY
60	143	2	-1	0	-1	# endif	EMPTY	EMPTY
60	144	2	-1	0	-1	# ifdef have _ pcap _ setdirection	EMPTY	EMPTY
60	145	2	-1	1	-1	int qflag = - numconst ;	qflag	EMPTY
60	146	2	-1	0	-1	# endif	EMPTY	EMPTY
60	147	3	-1	1	-1	static char * zflag = null ;	zflag	EMPTY
60	149	1	0	0	0	static int infodelay	EMPTY	EMPTY
60	150	3	-1	0	-1	static int infoprint ;	EMPTY	EMPTY
60	152	1	0	0	-1	char * program _ name ;	program _ name	EMPTY
60	154	1	1	1	1	int32 _ t thiszone ;	thiszone	EMPTY
60	157	1	0	0	0	static retsigtype cleanup ( int )	cleanup	EMPTY
60	158	2	-1	0	-1	static retsigtype child _ cleanup ( int )	EMPTY	EMPTY
60	159	2	-1	0	-1	static void print _ version ( void )	EMPTY	EMPTY
60	160	2	-1	0	-1	static void print _ usage ( void )	EMPTY	EMPTY
60	161	3	-1	0	-1	static void show _ dlts _ and _ exit ( const char * device  pcap _ t * pd )  _  _ attribute _  _  ( ( noreturn ) ) ;	EMPTY	EMPTY
60	163	1	1	0	1	static void print _ packet ( u _ char *  const struct pcap _ pkthdr *  const u _ char * )	pcap _ pkthdr	EMPTY
60	164	2	-1	0	-1	static void ndo _ default _ print ( netdissect _ options *  const u _ char *  u _ int )	ndo _ default _ print	EMPTY
60	165	2	-1	0	-1	static void dump _ packet _ and _ trunc ( u _ char *  const struct pcap _ pkthdr *  const u _ char * )	pcap _ pkthdr	EMPTY
60	166	2	-1	0	-1	static void dump _ packet ( u _ char *  const struct pcap _ pkthdr *  const u _ char * )	pcap _ pkthdr	EMPTY
60	167	2	-1	0	-1	static void droproot ( const char *  const char * )	droproot	EMPTY
60	168	2	-1	0	-1	static void ndo _ error ( netdissect _ options * ndo  const char * fmt  ... )	ndo _ error	EMPTY
60	169	2	-1	0	-1	_  _ attribute _  _  ( ( noreturn ) )	EMPTY	EMPTY
60	170	2	-1	0	-1	# ifdef  _  _ attribute _  _  _ format _ ok	EMPTY	EMPTY
60	171	2	-1	0	-1	_  _ attribute _  _  ( ( format ( printf  numconst  numconst ) ) )	EMPTY	printf
60	172	2	-1	1	-1	# endif	EMPTY	EMPTY
60	173	2	-1	0	-1	;	EMPTY	EMPTY
60	174	2	-1	0	-1	static void ndo _ warning ( netdissect _ options * ndo  const char * fmt  ... )	ndo _ warning	EMPTY
60	175	2	-1	0	-1	# ifdef  _  _ attribute _  _  _ format _ ok	EMPTY	EMPTY
60	176	2	-1	0	-1	_  _ attribute _  _  ( ( format ( printf  numconst  numconst ) ) )	EMPTY	printf
60	177	2	-1	1	-1	# endif	EMPTY	EMPTY
60	178	3	-1	0	-1	;	EMPTY	EMPTY
60	180	1	0	0	0	# ifdef signal _ req _ info	EMPTY	EMPTY
60	181	2	-1	0	-1	retsigtype requestinfo ( int ) ;	EMPTY	EMPTY
60	182	3	-1	0	-1	# endif	EMPTY	EMPTY
60	184	1	0	0	-1	# if defined ( use _ win32 _ mm _ timer )	EMPTY	EMPTY
60	185	2	-1	0	-1	# include < mmsystem . h >	EMPTY	EMPTY
60	186	2	-1	0	-1	static uint timer _ id ;	EMPTY	EMPTY
60	187	2	-1	0	-1	static void callback verbose _ stats _ dump ( uint  uint  dword _ ptr  dword _ ptr  dword _ ptr ) ;	EMPTY	EMPTY
60	188	2	-1	0	-1	# elif defined ( have _ alarm )	EMPTY	EMPTY
60	189	2	-1	0	-1	static void verbose _ stats _ dump ( int sig ) ;	EMPTY	EMPTY
60	190	3	-1	0	-1	# endif	EMPTY	EMPTY
60	192	1	0	0	0	static void info ( int )	EMPTY	EMPTY
60	193	3	-1	0	-1	static u _ int packets _ captured ;	EMPTY	EMPTY
60	195	1	0	0	-1	struct printer {	EMPTY	EMPTY
60	196	2	-1	0	-1	if _ printer f ;	EMPTY	EMPTY
60	197	2	-1	0	-1	int type ;	EMPTY	EMPTY
60	198	3	-1	0	-1	} ;	EMPTY	EMPTY
60	201	1	0	0	-1	struct ndo _ printer {	EMPTY	EMPTY
60	202	2	-1	0	-1	if _ ndo _ printer f ;	EMPTY	EMPTY
60	203	2	-1	0	-1	int type ;	EMPTY	EMPTY
60	204	3	-1	0	-1	} ;	EMPTY	EMPTY
60	207	1	0	0	-1	static const struct printer printers [ ] = {	EMPTY	EMPTY
60	208	2	-1	0	-1	{ null  numconst }	EMPTY	EMPTY
60	209	3	-1	0	-1	} ;	EMPTY	EMPTY
60	211	1	0	0	-1	static const struct ndo _ printer ndo _ printers [ ] = {	EMPTY	EMPTY
60	212	2	-1	0	-1	{ ether _ if _ print  dlt _ en10mb }	EMPTY	EMPTY
60	213	2	-1	0	-1	# ifdef dlt _ ipnet	EMPTY	EMPTY
60	214	2	-1	0	-1	{ ipnet _ if _ print  dlt _ ipnet }	EMPTY	EMPTY
60	215	2	-1	0	-1	# endif	EMPTY	EMPTY
60	216	2	-1	0	-1	# ifdef dlt _ ieee802 _ 15 _ 4	EMPTY	EMPTY
60	217	2	-1	0	-1	{ ieee802 _ 15 _ 4 _ if _ print  dlt _ ieee802 _ 15 _ 4 }	EMPTY	EMPTY
60	218	2	-1	0	-1	# endif	EMPTY	EMPTY
60	219	2	-1	0	-1	# ifdef dlt _ ieee802 _ 15 _ 4 _ nofcs	EMPTY	EMPTY
60	220	2	-1	0	-1	{ ieee802 _ 15 _ 4 _ if _ print  dlt _ ieee802 _ 15 _ 4 _ nofcs }	EMPTY	EMPTY
60	221	2	-1	0	-1	# endif	EMPTY	EMPTY
60	222	2	-1	0	-1	# ifdef dlt _ ppi	EMPTY	EMPTY
60	223	2	-1	0	-1	{ ppi _ if _ print  dlt _ ppi }	EMPTY	EMPTY
60	224	2	-1	0	-1	# endif	EMPTY	EMPTY
60	225	2	-1	0	-1	# ifdef dlt _ netanalyzer	EMPTY	EMPTY
60	226	2	-1	0	-1	{ netanalyzer _ if _ print  dlt _ netanalyzer }	EMPTY	EMPTY
60	227	2	-1	0	-1	# endif	EMPTY	EMPTY
60	228	2	-1	0	-1	# ifdef dlt _ netanalyzer _ transparent	EMPTY	EMPTY
60	229	2	-1	0	-1	{ netanalyzer _ transparent _ if _ print  dlt _ netanalyzer _ transparent }	EMPTY	EMPTY
60	230	2	-1	0	-1	# endif	EMPTY	EMPTY
60	231	2	-1	0	-1	# if defined ( dlt _ nflog ) && defined ( have _ pcap _ nflog _ h )	EMPTY	EMPTY
60	232	2	-1	0	-1	{ nflog _ if _ print  dlt _ nflog }	EMPTY	EMPTY
60	233	2	-1	0	-1	# endif	EMPTY	EMPTY
60	234	2	-1	0	-1	# ifdef dlt _ cip	EMPTY	EMPTY
60	235	2	-1	0	-1	{ cip _ if _ print  dlt _ cip }	EMPTY	EMPTY
60	236	2	-1	0	-1	# endif	EMPTY	EMPTY
60	237	2	-1	0	-1	# ifdef dlt _ atm _ clip	EMPTY	EMPTY
60	238	2	-1	0	-1	{ cip _ if _ print  dlt _ atm _ clip }	EMPTY	EMPTY
60	239	2	-1	0	-1	# endif	EMPTY	EMPTY
60	240	3	-1	0	-1	# ifdef dlt _ ip _ over _ fc	EMPTY	EMPTY
60	241	1	1	0	-1	{ ipfc _ if _ print  dlt _ ip _ over _ fc }	EMPTY	EMPTY
60	242	2	-1	0	-1	# endif	EMPTY	EMPTY
60	243	2	-1	0	-1	{ null _ if _ print  dlt _ null }	EMPTY	EMPTY
60	244	2	-1	0	-1	# ifdef dlt _ loop	EMPTY	EMPTY
60	245	2	-1	0	-1	{ null _ if _ print  dlt _ loop }	EMPTY	EMPTY
60	246	2	-1	0	-1	# endif	EMPTY	EMPTY
60	247	2	-1	0	-1	# ifdef dlt _ apple _ ip _ over _ ieee1394	EMPTY	EMPTY
60	248	2	-1	0	-1	{ ap1394 _ if _ print  dlt _ apple _ ip _ over _ ieee1394 }	EMPTY	EMPTY
60	249	2	-1	0	-1	# endif	EMPTY	EMPTY
60	250	2	-1	0	-1	# if defined ( dlt _ bluetooth _ hci _ h4 _ with _ phdr ) && defined ( have _ pcap _ bluetooth _ h )	EMPTY	EMPTY
60	251	2	-1	0	-1	{ bt _ if _ print  dlt _ bluetooth _ hci _ h4 _ with _ phdr }	EMPTY	EMPTY
60	252	2	-1	0	-1	# endif	EMPTY	EMPTY
60	253	2	-1	0	-1	# ifdef dlt _ lane8023	EMPTY	EMPTY
60	254	2	-1	0	-1	{ lane _ if _ print  dlt _ lane8023 }	EMPTY	EMPTY
60	255	2	-1	0	-1	# endif	EMPTY	EMPTY
60	256	2	-1	0	-1	{ arcnet _ if _ print  dlt _ arcnet }	EMPTY	EMPTY
60	257	2	-1	0	-1	# ifdef dlt _ arcnet _ linux	EMPTY	EMPTY
60	258	2	-1	0	-1	{ arcnet _ linux _ if _ print  dlt _ arcnet _ linux }	EMPTY	EMPTY
60	259	2	-1	0	-1	# endif	EMPTY	EMPTY
60	260	2	-1	0	-1	{ raw _ if _ print  dlt _ raw }	EMPTY	EMPTY
60	261	2	-1	0	-1	# ifdef dlt _ ipv4	EMPTY	EMPTY
60	262	2	-1	0	-1	{ raw _ if _ print  dlt _ ipv4 }	EMPTY	EMPTY
60	263	2	-1	0	-1	# endif	EMPTY	EMPTY
60	264	2	-1	0	-1	# ifdef dlt _ ipv6	EMPTY	EMPTY
60	265	2	-1	0	-1	{ raw _ if _ print  dlt _ ipv6 }	EMPTY	EMPTY
60	266	2	-1	0	-1	# endif	EMPTY	EMPTY
60	267	2	-1	0	-1	# ifdef have _ pcap _ usb _ h	EMPTY	EMPTY
60	268	2	-1	0	-1	# ifdef dlt _ usb _ linux	EMPTY	EMPTY
60	269	2	-1	0	-1	{ usb _ linux _ 48 _ byte _ print  dlt _ usb _ linux }	EMPTY	EMPTY
60	270	3	-1	1	-1	# endif	EMPTY	EMPTY
60	271	1	1	0	-1	# ifdef dlt _ usb _ linux _ mmapped	EMPTY	EMPTY
60	272	2	-1	0	-1	{ usb _ linux _ 64 _ byte _ print  dlt _ usb _ linux _ mmapped }	EMPTY	EMPTY
60	273	2	-1	1	-1	# endif	EMPTY	EMPTY
60	274	2	-1	1	-1	# endif	EMPTY	EMPTY
60	275	2	-1	0	-1	# ifdef dlt _ symantec _ firewall	EMPTY	EMPTY
60	276	2	-1	0	-1	{ symantec _ if _ print  dlt _ symantec _ firewall }	EMPTY	EMPTY
60	277	2	-1	0	-1	# endif	EMPTY	EMPTY
60	278	2	-1	0	-1	# ifdef dlt _ c _ hdlc	EMPTY	EMPTY
60	279	2	-1	0	-1	{ chdlc _ if _ print  dlt _ c _ hdlc }	EMPTY	EMPTY
60	280	2	-1	0	-1	# endif	EMPTY	EMPTY
60	281	2	-1	0	-1	# ifdef dlt _ hdlc	EMPTY	EMPTY
60	282	2	-1	0	-1	{ chdlc _ if _ print  dlt _ hdlc }	EMPTY	EMPTY
60	283	2	-1	0	-1	# endif	EMPTY	EMPTY
60	284	2	-1	0	-1	# ifdef dlt _ ppp _ ether	EMPTY	EMPTY
60	285	2	-1	0	-1	{ pppoe _ if _ print  dlt _ ppp _ ether }	EMPTY	EMPTY
60	286	2	-1	0	-1	# endif	EMPTY	EMPTY
60	287	2	-1	0	-1	# if defined ( dlt _ pflog ) && defined ( have _ net _ pfvar _ h )	EMPTY	EMPTY
60	288	2	-1	0	-1	{ pflog _ if _ print  dlt _ pflog }	EMPTY	EMPTY
60	289	2	-1	0	-1	# endif	EMPTY	EMPTY
60	290	2	-1	0	-1	{ token _ if _ print  dlt _ ieee802 }	EMPTY	EMPTY
60	291	2	-1	0	-1	{ fddi _ if _ print  dlt _ fddi }	EMPTY	EMPTY
60	292	2	-1	0	-1	# ifdef dlt _ linux _ sll	EMPTY	EMPTY
60	293	2	-1	0	-1	{ sll _ if _ print  dlt _ linux _ sll }	EMPTY	EMPTY
60	294	2	-1	0	-1	# endif	EMPTY	EMPTY
60	295	2	-1	0	-1	# ifdef dlt _ fr	EMPTY	EMPTY
60	296	2	-1	0	-1	{ fr _ if _ print  dlt _ fr }	EMPTY	EMPTY
60	297	2	-1	0	-1	# endif	EMPTY	EMPTY
60	298	2	-1	0	-1	# ifdef dlt _ frelay	EMPTY	EMPTY
60	299	2	-1	0	-1	{ fr _ if _ print  dlt _ frelay }	EMPTY	EMPTY
60	300	3	-1	0	-1	# endif	EMPTY	EMPTY
60	301	1	0	0	-1	# ifdef dlt _ mfr	EMPTY	EMPTY
60	302	2	-1	0	-1	{ mfr _ if _ print  dlt _ mfr }	EMPTY	EMPTY
60	303	2	-1	0	-1	# endif	EMPTY	EMPTY
60	304	2	-1	0	-1	{ atm _ if _ print  dlt _ atm _ rfc1483 }	EMPTY	EMPTY
60	305	2	-1	0	-1	# ifdef dlt _ sunatm	EMPTY	EMPTY
60	306	2	-1	0	-1	{ sunatm _ if _ print  dlt _ sunatm }	EMPTY	EMPTY
60	307	2	-1	0	-1	# endif	EMPTY	EMPTY
60	308	2	-1	0	-1	# ifdef dlt _ enc	EMPTY	EMPTY
60	309	2	-1	0	-1	{ enc _ if _ print  dlt _ enc }	EMPTY	EMPTY
60	310	2	-1	0	-1	# endif	EMPTY	EMPTY
60	311	2	-1	0	-1	{ sl _ if _ print  dlt _ slip }	EMPTY	EMPTY
60	312	2	-1	0	-1	# ifdef dlt _ slip _ bsdos	EMPTY	EMPTY
60	313	2	-1	0	-1	{ sl _ bsdos _ if _ print  dlt _ slip _ bsdos }	EMPTY	EMPTY
60	314	2	-1	0	-1	# endif	EMPTY	EMPTY
60	315	2	-1	0	-1	# ifdef dlt _ ltalk	EMPTY	EMPTY
60	316	2	-1	0	-1	{ ltalk _ if _ print  dlt _ ltalk }	EMPTY	EMPTY
60	317	2	-1	0	-1	# endif	EMPTY	EMPTY
60	318	2	-1	0	-1	# ifdef dlt _ juniper _ atm1	EMPTY	EMPTY
60	319	2	-1	0	-1	{ juniper _ atm1 _ print  dlt _ juniper _ atm1 }	EMPTY	EMPTY
60	320	2	-1	0	-1	# endif	EMPTY	EMPTY
60	321	2	-1	0	-1	# ifdef dlt _ juniper _ atm2	EMPTY	EMPTY
60	322	2	-1	0	-1	{ juniper _ atm2 _ print  dlt _ juniper _ atm2 }	EMPTY	EMPTY
60	323	2	-1	0	-1	# endif	EMPTY	EMPTY
60	324	2	-1	0	-1	# ifdef dlt _ juniper _ mfr	EMPTY	EMPTY
60	325	2	-1	0	-1	{ juniper _ mfr _ print  dlt _ juniper _ mfr }	EMPTY	EMPTY
60	326	2	-1	0	-1	# endif	EMPTY	EMPTY
60	327	2	-1	0	-1	# ifdef dlt _ juniper _ mlfr	EMPTY	EMPTY
60	328	2	-1	0	-1	{ juniper _ mlfr _ print  dlt _ juniper _ mlfr }	EMPTY	EMPTY
60	329	2	-1	0	-1	# endif	EMPTY	EMPTY
60	330	3	-1	0	-1	# ifdef dlt _ juniper _ mlppp	EMPTY	EMPTY
60	331	1	0	0	-1	{ juniper _ mlppp _ print  dlt _ juniper _ mlppp }	EMPTY	EMPTY
60	332	2	-1	0	-1	# endif	EMPTY	EMPTY
60	333	2	-1	0	-1	# ifdef dlt _ juniper _ pppoe	EMPTY	EMPTY
60	334	2	-1	0	-1	{ juniper _ pppoe _ print  dlt _ juniper _ pppoe }	EMPTY	EMPTY
60	335	2	-1	0	-1	# endif	EMPTY	EMPTY
60	336	2	-1	0	-1	# ifdef dlt _ juniper _ pppoe _ atm	EMPTY	EMPTY
60	337	2	-1	0	-1	{ juniper _ pppoe _ atm _ print  dlt _ juniper _ pppoe _ atm }	EMPTY	EMPTY
60	338	2	-1	0	-1	# endif	EMPTY	EMPTY
60	339	2	-1	0	-1	# ifdef dlt _ juniper _ ggsn	EMPTY	EMPTY
60	340	2	-1	0	-1	{ juniper _ ggsn _ print  dlt _ juniper _ ggsn }	EMPTY	EMPTY
60	341	2	-1	0	-1	# endif	EMPTY	EMPTY
60	342	2	-1	0	-1	# ifdef dlt _ juniper _ es	EMPTY	EMPTY
60	343	2	-1	0	-1	{ juniper _ es _ print  dlt _ juniper _ es }	EMPTY	EMPTY
60	344	2	-1	0	-1	# endif	EMPTY	EMPTY
60	345	2	-1	0	-1	# ifdef dlt _ juniper _ monitor	EMPTY	EMPTY
60	346	2	-1	0	-1	{ juniper _ monitor _ print  dlt _ juniper _ monitor }	EMPTY	EMPTY
60	347	2	-1	0	-1	# endif	EMPTY	EMPTY
60	348	2	-1	0	-1	# ifdef dlt _ juniper _ services	EMPTY	EMPTY
60	349	2	-1	0	-1	{ juniper _ services _ print  dlt _ juniper _ services }	EMPTY	EMPTY
60	350	2	-1	0	-1	# endif	EMPTY	EMPTY
60	351	2	-1	0	-1	# ifdef dlt _ juniper _ ether	EMPTY	EMPTY
60	352	2	-1	0	-1	{ juniper _ ether _ print  dlt _ juniper _ ether }	EMPTY	EMPTY
60	353	2	-1	0	-1	# endif	EMPTY	EMPTY
60	354	2	-1	0	-1	# ifdef dlt _ juniper _ ppp	EMPTY	EMPTY
60	355	2	-1	0	-1	{ juniper _ ppp _ print  dlt _ juniper _ ppp }	EMPTY	EMPTY
60	356	2	-1	0	-1	# endif	EMPTY	EMPTY
60	357	2	-1	0	-1	# ifdef dlt _ juniper _ frelay	EMPTY	EMPTY
60	358	2	-1	0	-1	{ juniper _ frelay _ print  dlt _ juniper _ frelay }	EMPTY	EMPTY
60	359	2	-1	0	-1	# endif	EMPTY	EMPTY
60	360	3	-1	0	-1	# ifdef dlt _ juniper _ chdlc	EMPTY	EMPTY
60	361	1	0	0	-1	{ juniper _ chdlc _ print  dlt _ juniper _ chdlc }	EMPTY	EMPTY
60	362	2	-1	0	-1	# endif	EMPTY	EMPTY
60	363	2	-1	0	-1	# ifdef dlt _ pktap	EMPTY	EMPTY
60	364	2	-1	0	-1	{ pktap _ if _ print  dlt _ pktap }	EMPTY	EMPTY
60	365	2	-1	0	-1	# endif	EMPTY	EMPTY
60	366	2	-1	0	-1	# ifdef dlt _ ieee802 _ 11 _ radio	EMPTY	EMPTY
60	367	2	-1	0	-1	{ ieee802 _ 11 _ radio _ if _ print  dlt _ ieee802 _ 11 _ radio }	EMPTY	EMPTY
60	368	2	-1	0	-1	# endif	EMPTY	EMPTY
60	369	2	-1	0	-1	# ifdef dlt _ ieee802 _ 11	EMPTY	EMPTY
60	370	2	-1	0	-1	{ ieee802 _ 11 _ if _ print  dlt _ ieee802 _ 11 }	EMPTY	EMPTY
60	371	2	-1	0	-1	# endif	EMPTY	EMPTY
60	372	2	-1	0	-1	# ifdef dlt _ ieee802 _ 11 _ radio _ avs	EMPTY	EMPTY
60	373	2	-1	0	-1	{ ieee802 _ 11 _ radio _ avs _ if _ print  dlt _ ieee802 _ 11 _ radio _ avs }	EMPTY	EMPTY
60	374	2	-1	0	-1	# endif	EMPTY	EMPTY
60	375	2	-1	0	-1	# ifdef dlt _ prism _ header	EMPTY	EMPTY
60	376	2	-1	0	-1	{ prism _ if _ print  dlt _ prism _ header }	EMPTY	EMPTY
60	377	2	-1	0	-1	# endif	EMPTY	EMPTY
60	378	2	-1	0	-1	{ ppp _ if _ print  dlt _ ppp }	EMPTY	EMPTY
60	379	2	-1	0	-1	# ifdef dlt _ ppp _ withdirection	EMPTY	EMPTY
60	380	2	-1	0	-1	{ ppp _ if _ print  dlt _ ppp _ withdirection }	EMPTY	EMPTY
60	381	2	-1	0	-1	# endif	EMPTY	EMPTY
60	382	2	-1	0	-1	# ifdef dlt _ ppp _ bsdos	EMPTY	EMPTY
60	383	2	-1	0	-1	{ ppp _ bsdos _ if _ print  dlt _ ppp _ bsdos }	EMPTY	EMPTY
60	384	2	-1	0	-1	# endif	EMPTY	EMPTY
60	385	2	-1	0	-1	# ifdef dlt _ ppp _ serial	EMPTY	EMPTY
60	386	2	-1	0	-1	{ ppp _ hdlc _ if _ print  dlt _ ppp _ serial }	EMPTY	EMPTY
60	387	2	-1	0	-1	# endif	EMPTY	EMPTY
60	388	2	-1	0	-1	{ null  numconst }	EMPTY	EMPTY
60	389	3	-1	0	-1	} ;	EMPTY	EMPTY
60	391	1	0	0	-1	static const struct tok status _ flags [ ] = {	EMPTY	EMPTY
60	392	2	-1	0	-1	# ifdef pcap _ if _ up	EMPTY	EMPTY
60	393	2	-1	0	-1	{ pcap _ if _ up  strlit }	EMPTY	EMPTY
60	394	2	-1	0	-1	# endif	EMPTY	EMPTY
60	395	2	-1	0	-1	# ifdef pcap _ if _ running	EMPTY	EMPTY
60	396	2	-1	0	-1	{ pcap _ if _ running  strlit }	EMPTY	EMPTY
60	397	2	-1	0	-1	# endif	EMPTY	EMPTY
60	398	2	-1	0	-1	{ pcap _ if _ loopback  strlit }	EMPTY	EMPTY
60	399	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
60	400	3	-1	0	-1	} ;	EMPTY	EMPTY
60	402	1	0	0	-1	if _ printer	EMPTY	EMPTY
60	403	2	-1	0	-1	lookup _ printer ( int type )	EMPTY	EMPTY
60	404	2	-1	0	-1	{	EMPTY	EMPTY
60	405	3	-1	0	-1	const struct printer * p ;	EMPTY	EMPTY
60	407	1	0	0	0	for ( p = printers ; p -> f ; ++ p )	EMPTY	EMPTY
60	408	2	-1	0	-1	if ( type == p -> type )	EMPTY	EMPTY
60	409	3	-1	0	-1	return p -> f	EMPTY	EMPTY
60	411	1	1	0	1	return null ;	EMPTY	EMPTY
60	413	3	-1	1	-1	}	EMPTY	EMPTY
60	415	1	0	0	-1	if _ ndo _ printer	EMPTY	EMPTY
60	416	2	-1	0	-1	lookup _ ndo _ printer ( int type )	EMPTY	EMPTY
60	417	2	-1	0	-1	{	EMPTY	EMPTY
60	418	3	-1	0	-1	const struct ndo _ printer * p ;	EMPTY	EMPTY
60	420	1	0	0	0	for ( p = ndo _ printers ; p -> f ; ++ p )	EMPTY	EMPTY
60	421	2	-1	0	-1	if ( type == p -> type )	EMPTY	EMPTY
60	422	3	-1	0	-1	return p -> f ;	EMPTY	EMPTY
60	424	1	0	0	-1	# if defined ( dlt _ user2 ) && defined ( dlt _ pktap )	EMPTY	EMPTY
60	441	1	0	0	-1	if ( type == dlt _ user2 ) {	EMPTY	EMPTY
60	442	2	-1	0	-1	for ( p = ndo _ printers ; p -> f ; ++ p )	EMPTY	EMPTY
60	443	2	-1	0	-1	if ( dlt _ pktap == p -> type )	EMPTY	EMPTY
60	444	2	-1	0	-1	return p -> f ;	EMPTY	EMPTY
60	445	2	-1	0	-1	}	EMPTY	EMPTY
60	446	3	-1	0	-1	# endif	EMPTY	EMPTY
60	448	1	1	0	1	return null ;	EMPTY	EMPTY
60	450	3	-1	1	-1	}	EMPTY	EMPTY
60	452	1	0	0	-1	static pcap _ t * pd ;	EMPTY	EMPTY
60	454	1	0	0	-1	static int supports _ monitor _ mode ;	EMPTY	EMPTY
60	456	1	0	0	0	extern int optind	optind	EMPTY
60	457	2	-1	0	-1	extern int opterr	opterr	EMPTY
60	458	3	-1	0	-1	extern char * optarg ;	optarg	EMPTY
60	460	1	0	0	-1	struct print _ info {	EMPTY	EMPTY
60	461	2	-1	0	-1	netdissect _ options * ndo ;	EMPTY	EMPTY
60	462	2	-1	0	-1	union {	EMPTY	EMPTY
60	463	2	-1	0	-1	if _ printer printer ;	EMPTY	EMPTY
60	464	2	-1	0	-1	if _ ndo _ printer ndo _ printer ;	EMPTY	EMPTY
60	465	2	-1	0	-1	} p ;	EMPTY	EMPTY
60	466	2	-1	0	-1	int ndo _ type ;	EMPTY	EMPTY
60	467	3	-1	0	-1	} ;	EMPTY	EMPTY
60	469	1	0	0	-1	struct dump _ info {	EMPTY	EMPTY
60	470	2	-1	0	-1	char * wfilename ;	EMPTY	EMPTY
60	471	2	-1	0	-1	char * currentfilename ;	EMPTY	EMPTY
60	472	2	-1	0	-1	pcap _ t * pd ;	EMPTY	EMPTY
60	473	2	-1	0	-1	pcap _ dumper _ t * p ;	EMPTY	EMPTY
60	474	2	-1	0	-1	# ifdef have _ capsicum	EMPTY	EMPTY
60	475	2	-1	0	-1	int dirfd ;	EMPTY	EMPTY
60	476	2	-1	0	-1	# endif	EMPTY	EMPTY
60	477	3	-1	0	-1	} ;	EMPTY	EMPTY
60	479	1	0	0	0	# ifdef have _ pcap _ set _ tstamp _ type	EMPTY	EMPTY
60	480	2	-1	0	-1	static void	EMPTY	EMPTY
60	481	2	-1	0	-1	show _ tstamp _ types _ and _ exit ( const char * device  pcap _ t * pd )	EMPTY	EMPTY
60	482	2	-1	0	-1	{	EMPTY	EMPTY
60	483	2	-1	0	-1	int n _ tstamp _ types ;	EMPTY	EMPTY
60	484	2	-1	0	-1	int * tstamp _ types = numconst ;	EMPTY	EMPTY
60	485	2	-1	0	-1	const char * tstamp _ type _ name ;	EMPTY	EMPTY
60	486	3	-1	0	-1	int i ;	EMPTY	EMPTY
60	488	1	0	0	-1	n _ tstamp _ types = pcap _ list _ tstamp _ types ( pd  & tstamp _ types ) ;	EMPTY	EMPTY
60	489	2	-1	0	-1	if ( n _ tstamp _ types < numconst )	EMPTY	EMPTY
60	490	3	-1	0	-1	error ( strlit  pcap _ geterr ( pd ) ) ;	EMPTY	EMPTY
60	492	1	0	0	0	if ( n _ tstamp _ types == numconst ) {	EMPTY	EMPTY
60	493	2	-1	0	-1	fprintf ( stderr  strlit	EMPTY	fprintf stderr
60	494	2	-1	0	-1	device ) ;	EMPTY	EMPTY
60	495	2	-1	0	-1	exit ( numconst ) ;	EMPTY	exit
60	496	2	-1	0	-1	}	EMPTY	EMPTY
60	497	2	-1	0	-1	fprintf ( stderr  strlit	EMPTY	fprintf stderr
60	498	2	-1	0	-1	device ) ;	EMPTY	EMPTY
60	499	2	-1	0	-1	for ( i = numconst ; i < n _ tstamp _ types ; i ++ ) {	EMPTY	EMPTY
60	500	2	-1	0	-1	tstamp _ type _ name = pcap _ tstamp _ type _ val _ to _ name ( tstamp _ types [ i ] ) ;	EMPTY	EMPTY
60	501	2	-1	0	-1	if ( tstamp _ type _ name != null ) {	EMPTY	EMPTY
60	502	2	-1	0	-1	( void ) fprintf ( stderr  strlit  tstamp _ type _ name	EMPTY	fprintf stderr
60	503	2	-1	0	-1	pcap _ tstamp _ type _ val _ to _ description ( tstamp _ types [ i ] ) ) ;	EMPTY	EMPTY
60	504	2	-1	0	-1	} else {	EMPTY	EMPTY
60	505	2	-1	0	-1	( void ) fprintf ( stderr  strlit  tstamp _ types [ i ] ) ;	EMPTY	fprintf stderr
60	506	2	-1	0	-1	}	EMPTY	EMPTY
60	507	2	-1	0	-1	}	EMPTY	EMPTY
60	508	2	-1	0	-1	pcap _ free _ tstamp _ types ( tstamp _ types ) ;	EMPTY	EMPTY
60	509	2	-1	0	-1	exit ( numconst ) ;	EMPTY	exit
60	510	2	-1	0	-1	}	EMPTY	EMPTY
60	511	3	-1	0	-1	# endif	EMPTY	EMPTY
60	513	1	0	0	-1	static void	EMPTY	EMPTY
60	514	2	-1	0	-1	show _ dlts _ and _ exit ( const char * device  pcap _ t * pd )	EMPTY	EMPTY
60	515	2	-1	0	-1	{	EMPTY	EMPTY
60	516	2	-1	0	-1	int n _ dlts ;	EMPTY	EMPTY
60	517	2	-1	0	-1	int * dlts = numconst ;	EMPTY	EMPTY
60	518	3	-1	0	-1	const char * dlt _ name ;	EMPTY	EMPTY
60	520	1	0	0	-1	n _ dlts = pcap _ list _ datalinks ( pd  & dlts ) ;	EMPTY	EMPTY
60	521	2	-1	0	-1	if ( n _ dlts < numconst )	EMPTY	EMPTY
60	522	2	-1	0	-1	error ( strlit  pcap _ geterr ( pd ) ) ;	EMPTY	EMPTY
60	523	2	-1	0	-1	if ( n _ dlts == numconst || ! dlts )	EMPTY	EMPTY
60	524	3	-1	0	-1	error ( strlit ) ;	EMPTY	EMPTY
60	534	1	0	0	-1	if ( supports _ monitor _ mode )	EMPTY	EMPTY
60	535	2	-1	0	-1	( void ) fprintf ( stderr ,  " data link types for %s %s (use option -y to set):\n "  ,	EMPTY	fprintf stderr
60	536	2	-1	0	-1	device ,	EMPTY	EMPTY
60	537	2	-1	0	-1	iflag ?  " when in monitor mode "  :  " when not in monitor mode "  ) ;	EMPTY	EMPTY
60	538	2	-1	0	-1	else	EMPTY	EMPTY
60	539	2	-1	0	-1	( void ) fprintf ( stderr ,  " data link types for %s (use option -y to set):\n "  ,	EMPTY	fprintf stderr
60	540	3	-1	0	-1	device )	EMPTY	EMPTY
60	542	1	0	0	0	while ( -- n _ dlts >= numconst ) {	EMPTY	EMPTY
60	543	2	-1	0	-1	dlt _ name = pcap _ datalink _ val _ to _ name ( dlts [ n _ dlts ] )	EMPTY	EMPTY
60	544	2	-1	0	-1	if ( dlt _ name != null ) {	EMPTY	EMPTY
60	545	2	-1	0	-1	( void ) fprintf ( stderr ,  "   %s (%s) "  , dlt _ name ,	EMPTY	fprintf stderr
60	546	3	-1	0	-1	pcap _ datalink _ val _ to _ description ( dlts [ n _ dlts ] ) )	EMPTY	EMPTY
60	551	1	1	1	1	if ( lookup _ printer ( dlts [ n _ dlts ] ) == null	EMPTY	EMPTY
60	552	2	-1	0	-1	&& lookup _ ndo _ printer ( dlts [ n _ dlts ] ) == null )	EMPTY	EMPTY
60	553	2	-1	0	-1	( void ) fprintf ( stderr ,  "  (printing not supported) "  )	EMPTY	fprintf stderr
60	554	2	-1	0	-1	fprintf ( stderr ,  " \n "  )	EMPTY	fprintf stderr
60	555	2	-1	0	-1	}	EMPTY	EMPTY
60	556	2	-1	0	-1	( void ) fprintf ( stderr  strlit	EMPTY	fprintf stderr
60	557	2	-1	0	-1	dlts [ n _ dlts ] ) ;	EMPTY	EMPTY
60	558	2	-1	0	-1	}	EMPTY	EMPTY
60	559	2	-1	0	-1	}	EMPTY	EMPTY
60	560	2	-1	0	-1	# ifdef have _ pcap _ free _ datalinks	EMPTY	EMPTY
60	561	2	-1	0	-1	pcap _ free _ datalinks ( dlts ) ;	EMPTY	EMPTY
60	562	2	-1	0	-1	# endif	EMPTY	EMPTY
60	563	2	-1	0	-1	exit ( numconst ) ;	EMPTY	exit
60	564	3	-1	0	-1	}	EMPTY	EMPTY
60	566	1	0	0	0	# ifdef have _ pcap _ findalldevs	EMPTY	EMPTY
60	567	2	-1	0	-1	static void	EMPTY	EMPTY
60	568	2	-1	0	-1	show _ devices _ and _ exit ( void )	EMPTY	EMPTY
60	569	2	-1	0	-1	{	EMPTY	EMPTY
60	570	2	-1	0	-1	pcap _ if _ t * devpointer ;	EMPTY	EMPTY
60	571	2	-1	0	-1	char ebuf [ pcap _ errbuf _ size ] ;	EMPTY	EMPTY
60	572	3	-1	0	-1	int i ;	EMPTY	EMPTY
60	574	1	1	0	1	if ( pcap _ findalldevs ( & devpointer  ebuf ) < numconst )	EMPTY	EMPTY
60	575	2	-1	0	-1	error ( strlit  ebuf ) ;	EMPTY	EMPTY
60	576	2	-1	0	-1	else {	EMPTY	EMPTY
60	577	2	-1	0	-1	for ( i = numconst ; devpointer != null ; i ++ ) {	EMPTY	EMPTY
60	578	2	-1	0	-1	printf ( strlit  i + numconst  devpointer -> name ) ;	name	printf
60	579	2	-1	0	-1	if ( devpointer -> description != null )	description	EMPTY
60	580	2	-1	0	-1	printf ( strlit  devpointer -> description ) ;	description	printf
60	581	2	-1	0	-1	if ( devpointer -> flags != numconst )	flags	EMPTY
60	582	2	-1	0	-1	printf ( strlit  bittok2str ( status _ flags  strlit  devpointer -> flags ) ) ;	flags	printf
60	583	2	-1	0	-1	printf ( strlit ) ;	EMPTY	printf
60	584	2	-1	0	-1	devpointer = devpointer -> next ;	EMPTY	EMPTY
60	585	2	-1	0	-1	}	EMPTY	EMPTY
60	586	2	-1	0	-1	}	EMPTY	EMPTY
60	587	2	-1	0	-1	exit ( numconst ) ;	EMPTY	exit
60	588	2	-1	0	-1	}	EMPTY	EMPTY
60	589	3	-1	1	-1	# endif	EMPTY	EMPTY
60	625	1	1	1	-1	# if defined ( have _ pcap _ create ) || defined ( win32 )	EMPTY	EMPTY
60	626	2	-1	0	-1	# define b _ flag strlit	EMPTY	EMPTY
60	627	2	-1	0	-1	# define b _ flag _ usage strlit	EMPTY	EMPTY
60	628	2	-1	1	-1	# else	EMPTY	EMPTY
60	629	2	-1	0	-1	# define b _ flag	EMPTY	EMPTY
60	630	2	-1	0	-1	# define b _ flag _ usage	EMPTY	EMPTY
60	631	3	-1	1	-1	# endif	EMPTY	EMPTY
60	633	1	1	0	-1	# ifdef have _ pcap _ create	EMPTY	EMPTY
60	634	2	-1	0	-1	# define i _ flag strlit	EMPTY	EMPTY
60	635	2	-1	1	-1	# else	EMPTY	EMPTY
60	636	2	-1	0	-1	# define i _ flag	EMPTY	EMPTY
60	637	3	-1	1	-1	# endif	EMPTY	EMPTY
60	639	1	1	0	-1	# ifdef have _ pcap _ set _ tstamp _ type	EMPTY	EMPTY
60	640	2	-1	0	-1	# define j _ flag strlit	EMPTY	EMPTY
60	641	2	-1	0	-1	# define j _ flag _ usage strlit	EMPTY	EMPTY
60	642	2	-1	0	-1	# define j _ flag strlit	EMPTY	EMPTY
60	643	2	-1	1	-1	# else	EMPTY	EMPTY
60	644	2	-1	0	-1	# define j _ flag	EMPTY	EMPTY
60	645	2	-1	0	-1	# define j _ flag _ usage	EMPTY	EMPTY
60	646	2	-1	0	-1	# define j _ flag	EMPTY	EMPTY
60	647	3	-1	1	-1	# endif	EMPTY	EMPTY
60	649	1	0	0	-1	# ifdef have _ pcap _ findalldevs	EMPTY	EMPTY
60	650	2	-1	0	-1	# define d _ flag strlit	EMPTY	EMPTY
60	651	2	-1	0	-1	# else	EMPTY	EMPTY
60	652	2	-1	0	-1	# define d _ flag	EMPTY	EMPTY
60	653	3	-1	0	-1	# endif	EMPTY	EMPTY
60	655	1	0	0	-1	# ifdef have _ pcap _ dump _ flush	EMPTY	EMPTY
60	656	2	-1	0	-1	# define u _ flag strlit	EMPTY	EMPTY
60	657	2	-1	0	-1	# else	EMPTY	EMPTY
60	658	2	-1	0	-1	# define u _ flag	EMPTY	EMPTY
60	659	3	-1	0	-1	# endif	EMPTY	EMPTY
60	661	1	0	0	-1	# ifdef have _ pcap _ setdirection	EMPTY	EMPTY
60	662	2	-1	0	-1	# define q _ flag strlit	EMPTY	EMPTY
60	663	2	-1	0	-1	# else	EMPTY	EMPTY
60	664	2	-1	0	-1	# define q _ flag	EMPTY	EMPTY
60	665	3	-1	0	-1	# endif	EMPTY	EMPTY
60	667	1	0	0	-1	# define shortopts strlit b _ flag strlit d _ flag strlit i _ flag j _ flag j _ flag strlit q _ flag strlit u _ flag strlit	EMPTY	EMPTY
60	689	1	1	1	-1	# define option _ version numconst	EMPTY	EMPTY
60	690	2	-1	0	-1	# define option _ tstamp _ precision numconst	EMPTY	EMPTY
60	691	3	-1	0	-1	# define option _ immediate _ mode numconst	EMPTY	EMPTY
60	693	1	0	0	-1	static const struct option longopts [ ] = {	EMPTY	EMPTY
60	694	2	-1	0	-1	# if defined ( have _ pcap _ create ) || defined ( win32 )	EMPTY	EMPTY
60	695	2	-1	0	-1	{ strlit  required _ argument  null  'b' }	EMPTY	EMPTY
60	696	2	-1	0	-1	# endif	EMPTY	EMPTY
60	697	2	-1	0	-1	{ strlit  no _ argument  null  'd' }	EMPTY	EMPTY
60	698	2	-1	0	-1	{ strlit  no _ argument  null  'h' }	EMPTY	EMPTY
60	699	2	-1	0	-1	{ strlit  required _ argument  null  'i' }	EMPTY	EMPTY
60	700	2	-1	0	-1	# ifdef have _ pcap _ create	EMPTY	EMPTY
60	701	2	-1	0	-1	{ strlit  no _ argument  null  'i' }	EMPTY	EMPTY
60	702	2	-1	0	-1	# endif	EMPTY	EMPTY
60	703	2	-1	0	-1	# ifdef have _ pcap _ set _ tstamp _ type	EMPTY	EMPTY
60	704	2	-1	0	-1	{ strlit  required _ argument  null  'j' }	EMPTY	EMPTY
60	705	2	-1	0	-1	{ strlit  no _ argument  null  'j' }	EMPTY	EMPTY
60	706	2	-1	0	-1	# endif	EMPTY	EMPTY
60	707	2	-1	0	-1	# ifdef have _ pcap _ set _ tstamp _ precision	EMPTY	EMPTY
60	708	2	-1	0	-1	{ strlit  required _ argument  null  option _ tstamp _ precision }	EMPTY	EMPTY
60	709	2	-1	0	-1	# endif	EMPTY	EMPTY
60	710	2	-1	0	-1	{ strlit  no _ argument  null  'k' }	EMPTY	EMPTY
60	711	2	-1	0	-1	{ strlit  no _ argument  null  'l' }	EMPTY	EMPTY
60	712	2	-1	0	-1	{ strlit  no _ argument  null  'o' }	EMPTY	EMPTY
60	713	2	-1	0	-1	{ strlit  no _ argument  null  'p' }	EMPTY	EMPTY
60	714	2	-1	0	-1	# ifdef have _ pcap _ setdirection	EMPTY	EMPTY
60	715	2	-1	0	-1	{ strlit  required _ argument  null  'q' }	EMPTY	EMPTY
60	716	2	-1	0	-1	# endif	EMPTY	EMPTY
60	717	2	-1	0	-1	{ strlit  required _ argument  null  's' }	EMPTY	EMPTY
60	718	2	-1	0	-1	{ strlit  no _ argument  null  's' }	EMPTY	EMPTY
60	719	2	-1	0	-1	# ifdef have _ pcap _ dump _ flush	EMPTY	EMPTY
60	720	2	-1	0	-1	{ strlit  no _ argument  null  'u' }	EMPTY	EMPTY
60	721	2	-1	0	-1	# endif	EMPTY	EMPTY
60	722	3	-1	0	-1	{ strlit  required _ argument  null  'y' }	EMPTY	EMPTY
60	723	1	0	0	-1	# ifdef have _ pcap _ set _ immediate _ mode	EMPTY	EMPTY
60	724	2	-1	0	-1	{ strlit  no _ argument  null  option _ immediate _ mode }	EMPTY	EMPTY
60	725	2	-1	0	-1	# endif	EMPTY	EMPTY
60	726	2	-1	0	-1	# if defined ( have _ pcap _ debug ) || defined ( have _ yydebug )	EMPTY	EMPTY
60	727	2	-1	0	-1	{ strlit  no _ argument  null  'y' }	EMPTY	EMPTY
60	728	2	-1	0	-1	# endif	EMPTY	EMPTY
60	729	2	-1	0	-1	{ strlit  required _ argument  null  'z' }	EMPTY	EMPTY
60	730	2	-1	0	-1	{ strlit  no _ argument  null  '#' }	EMPTY	EMPTY
60	731	2	-1	0	-1	{ strlit  no _ argument  null  option _ version }	EMPTY	EMPTY
60	732	2	-1	0	-1	{ null  numconst  null  numconst }	EMPTY	EMPTY
60	733	3	-1	0	-1	} ;	EMPTY	EMPTY
60	735	1	0	0	-1	# ifndef win32	EMPTY	EMPTY
60	737	1	0	0	-1	static void	EMPTY	EMPTY
60	738	2	-1	0	-1	droproot ( const char * username  const char * chroot _ dir )	droproot	EMPTY
60	739	2	-1	0	-1	{	EMPTY	EMPTY
60	740	3	-1	0	-1	struct passwd * pw = null ;	EMPTY	EMPTY
60	742	1	0	0	0	if ( chroot _ dir && ! username ) {	EMPTY	EMPTY
60	743	2	-1	0	-1	fprintf ( stderr ,  " tcpdump: chroot without dropping root is insecure\n "  ) ;	EMPTY	fprintf stderr
60	744	2	-1	0	-1	exit ( 1 ) ;	EMPTY	exit
60	745	3	-1	0	-1	}	EMPTY	EMPTY
60	747	1	0	0	-1	pw = getpwnam ( username )	EMPTY	getpwnam
60	748	2	-1	0	-1	if ( pw ) {	EMPTY	EMPTY
60	749	2	-1	0	-1	if ( chroot _ dir ) {	EMPTY	EMPTY
60	750	2	-1	0	-1	if ( chroot ( chroot _ dir ) != 0 || chdir (  " / "  ) != 0 ) {	EMPTY	chroot chdir
60	751	2	-1	0	-1	fprintf ( stderr ,  " tcpdump: couldn't chroot/chdir to '%.64s': %s\n "  ,	EMPTY	fprintf stderr
60	752	2	-1	0	-1	chroot _ dir , pcap _ strerror ( errno ) ) ;	EMPTY	EMPTY
60	753	2	-1	0	-1	exit ( 1 ) ;	EMPTY	exit
60	754	2	-1	0	-1	}	EMPTY	EMPTY
60	755	2	-1	0	-1	}	EMPTY	EMPTY
60	756	2	-1	0	-1	# ifdef have _ libcap _ ng	EMPTY	EMPTY
60	757	2	-1	0	-1	int ret = capng _ change _ id ( pw -> pw _ uid  pw -> pw _ gid  capng _ no _ flag ) ;	EMPTY	EMPTY
60	758	2	-1	0	-1	if ( ret < numconst ) {	EMPTY	EMPTY
60	759	2	-1	0	-1	fprintf ( stderr  strlit  ret ) ;	EMPTY	fprintf stderr
60	760	2	-1	0	-1	}	EMPTY	EMPTY
60	761	2	-1	0	-1	else {	EMPTY	EMPTY
60	762	2	-1	0	-1	fprintf ( stderr  strlit  username ) ;	EMPTY	fprintf stderr
60	763	2	-1	0	-1	}	EMPTY	EMPTY
60	764	2	-1	0	-1	# else	EMPTY	EMPTY
60	765	2	-1	0	-1	if ( initgroups ( pw -> pw _ name , pw -> pw _ gid ) != 0 ||	EMPTY	initgroups
60	766	2	-1	0	-1	setgid ( pw -> pw _ gid ) != 0 || setuid ( pw -> pw _ uid ) != 0 ) {	EMPTY	setgid setuid
60	767	2	-1	0	-1	fprintf ( stderr ,  " tcpdump: couldn't change to '%.32s' uid=%lu gid=%lu: %s\n "  ,	EMPTY	fprintf stderr
60	768	2	-1	0	-1	username ,	EMPTY	EMPTY
60	769	2	-1	0	-1	( unsigned long ) pw -> pw _ uid ,	EMPTY	EMPTY
60	770	2	-1	0	-1	( unsigned long ) pw -> pw _ gid ,	EMPTY	EMPTY
60	771	2	-1	0	-1	pcap _ strerror ( errno ) ) ;	EMPTY	EMPTY
60	772	2	-1	0	-1	exit ( 1 ) ;	EMPTY	exit
60	773	2	-1	0	-1	}	EMPTY	EMPTY
60	774	2	-1	0	-1	else {	EMPTY	EMPTY
60	775	2	-1	0	-1	fprintf ( stderr ,  " dropped privs to %s\n "  , username ) ;	EMPTY	fprintf stderr
60	776	3	-1	0	-1	}	EMPTY	EMPTY
60	777	1	1	1	-1	# endif	EMPTY	EMPTY
60	778	2	-1	0	-1	}	EMPTY	EMPTY
60	779	2	-1	0	-1	else {	EMPTY	EMPTY
60	780	2	-1	0	-1	fprintf ( stderr  strlit	EMPTY	fprintf stderr
60	781	2	-1	0	-1	username ) ;	EMPTY	EMPTY
60	782	2	-1	0	-1	exit ( numconst ) ;	EMPTY	exit
60	783	2	-1	0	-1	}	EMPTY	EMPTY
60	784	2	-1	0	-1	# ifdef have _ libcap _ ng	EMPTY	EMPTY
60	786	2	-1	1	-1	capng _ updatev (	EMPTY	EMPTY
60	787	2	-1	0	-1	capng _ drop	EMPTY	EMPTY
60	788	2	-1	0	-1	capng _ effective | capng _ permitted	EMPTY	EMPTY
60	789	2	-1	0	-1	cap _ setuid	EMPTY	EMPTY
60	790	2	-1	0	-1	cap _ setgid	EMPTY	EMPTY
60	791	2	-1	0	-1	- numconst ) ;	EMPTY	EMPTY
60	792	2	-1	0	-1	capng _ apply ( capng _ select _ both ) ;	EMPTY	EMPTY
60	793	3	-1	1	-1	# endif	EMPTY	EMPTY
60	795	1	1	0	-1	}	EMPTY	EMPTY
60	796	3	-1	1	-1	# endif	EMPTY	EMPTY
60	798	1	0	0	-1	static int	EMPTY	EMPTY
60	799	2	-1	0	-1	getwflagchars ( int x )	EMPTY	EMPTY
60	800	2	-1	0	-1	{	EMPTY	EMPTY
60	801	3	-1	0	-1	int c = 0 ;	EMPTY	EMPTY
60	803	1	0	0	-1	x -= 1	EMPTY	EMPTY
60	804	2	-1	0	-1	while ( x > 0 ) {	EMPTY	EMPTY
60	805	2	-1	0	-1	c += 1 ;	EMPTY	EMPTY
60	806	2	-1	0	-1	x /= 10 ;	EMPTY	EMPTY
60	807	3	-1	0	-1	}	EMPTY	EMPTY
60	809	1	0	0	0	return c	EMPTY	EMPTY
60	810	3	-1	0	-1	}	EMPTY	EMPTY
60	813	1	0	0	-1	static void	EMPTY	EMPTY
60	814	2	-1	0	-1	makefilename ( char * buffer  char * orig _ name  int cnt  int max _ chars )	EMPTY	EMPTY
60	815	2	-1	0	-1	{	EMPTY	EMPTY
60	816	2	-1	0	-1	char * filename = malloc ( path _ max + 1 ) ;	EMPTY	malloc
60	817	2	-1	0	-1	if ( filename == null )	EMPTY	EMPTY
60	818	3	-1	0	-1	error (  " makefilename: malloc "  )	EMPTY	EMPTY
60	821	1	1	1	1	if ( gflag != numconst ) {	EMPTY	EMPTY
60	822	3	-1	0	-1	struct tm * local _ tm ;	EMPTY	EMPTY
60	825	1	1	1	1	if ( ( local _ tm = localtime ( & gflag _ time ) ) == null ) {	EMPTY	localtime
60	826	2	-1	0	-1	error (  " maketimedfilename: localtime "  ) ;	EMPTY	EMPTY
60	827	3	-1	0	-1	}	EMPTY	EMPTY
60	832	1	1	1	1	strftime ( filename , path _ max , orig _ name , local _ tm )	EMPTY	strftime
60	833	2	-1	0	-1	}	EMPTY	EMPTY
60	834	2	-1	0	-1	strncpy ( filename  orig _ name  path _ max ) ;	EMPTY	strncpy
60	835	3	-1	0	-1	}	EMPTY	EMPTY
60	837	1	1	0	1	if ( cnt == numconst && max _ chars == numconst )	EMPTY	EMPTY
60	838	2	-1	0	-1	strncpy ( buffer  filename  path _ max + numconst ) ;	EMPTY	strncpy
60	839	2	-1	0	-1	else	EMPTY	EMPTY
60	840	2	-1	0	-1	if ( snprintf ( buffer  path _ max + numconst  strlit  filename  max _ chars  cnt ) > path _ max )	EMPTY	EMPTY
60	842	2	-1	1	-1	error ( strlit  path _ max ) ;	EMPTY	EMPTY
60	843	2	-1	0	-1	free ( filename )	EMPTY	free
60	844	3	-1	0	-1	}	EMPTY	EMPTY
60	846	1	0	0	-1	static int tcpdump _ printf ( netdissect _ options * ndo  _ u _	EMPTY	EMPTY
60	847	2	-1	0	-1	const char * fmt  ... )	EMPTY	EMPTY
60	848	3	-1	0	-1	{	EMPTY	EMPTY
60	850	1	0	0	0	va _ list args ;	EMPTY	EMPTY
60	851	3	-1	0	-1	int ret ;	EMPTY	EMPTY
60	853	1	0	0	0	va _ start ( args  fmt ) ;	EMPTY	EMPTY
60	854	2	-1	0	-1	ret = vfprintf ( stdout  fmt  args ) ;	EMPTY	vfprintf stdout
60	855	3	-1	0	-1	va _ end ( args ) ;	EMPTY	EMPTY
60	857	1	0	0	0	return ret ;	EMPTY	EMPTY
60	858	3	-1	0	-1	}	EMPTY	EMPTY
60	860	1	0	0	-1	static struct print _ info	EMPTY	EMPTY
60	861	2	-1	0	-1	get _ print _ info ( int type )	EMPTY	EMPTY
60	862	2	-1	0	-1	{	EMPTY	EMPTY
60	863	3	-1	0	-1	struct print _ info printinfo ;	EMPTY	EMPTY
60	865	1	0	0	-1	printinfo . ndo _ type = numconst ;	EMPTY	EMPTY
60	866	2	-1	0	-1	printinfo . ndo = gndo ;	EMPTY	EMPTY
60	867	2	-1	0	-1	printinfo . p . ndo _ printer = lookup _ ndo _ printer ( type ) ;	EMPTY	EMPTY
60	868	2	-1	0	-1	if ( printinfo . p . ndo _ printer == null ) {	EMPTY	EMPTY
60	869	2	-1	0	-1	printinfo . p . printer = lookup _ printer ( type ) ;	EMPTY	EMPTY
60	870	2	-1	0	-1	printinfo . ndo _ type = numconst ;	EMPTY	EMPTY
60	871	2	-1	0	-1	if ( printinfo . p . printer == null ) {	EMPTY	EMPTY
60	872	2	-1	0	-1	gndo -> ndo _ dltname = pcap _ datalink _ val _ to _ name ( type ) ;	ndo _ dltname	EMPTY
60	873	2	-1	0	-1	if ( gndo -> ndo _ dltname != null )	ndo _ dltname	EMPTY
60	874	2	-1	0	-1	error ( strlit	EMPTY	EMPTY
60	875	2	-1	0	-1	gndo -> ndo _ dltname ) ;	ndo _ dltname	EMPTY
60	876	2	-1	0	-1	else	EMPTY	EMPTY
60	877	2	-1	0	-1	error ( strlit  type ) ;	EMPTY	EMPTY
60	878	2	-1	0	-1	}	EMPTY	EMPTY
60	879	2	-1	0	-1	}	EMPTY	EMPTY
60	880	2	-1	0	-1	return ( printinfo ) ;	EMPTY	EMPTY
60	881	3	-1	0	-1	}	EMPTY	EMPTY
60	883	1	0	0	-1	static char *	EMPTY	EMPTY
60	884	2	-1	0	-1	get _ next _ file ( file * vfile  char * ptr )	ptr	EMPTY
60	885	2	-1	0	-1	{	EMPTY	EMPTY
60	886	3	-1	0	-1	char * ret ;	EMPTY	EMPTY
60	888	1	0	0	-1	ret = fgets ( ptr  path _ max  vfile ) ;	ptr	fgets
60	889	2	-1	0	-1	if ( ! ret )	EMPTY	EMPTY
60	890	3	-1	0	-1	return null ;	EMPTY	EMPTY
60	892	1	0	0	0	if ( ptr [ strlen ( ptr ) - numconst ] == '\\n' )	ptr ptr	strlen
60	893	3	-1	0	-1	ptr [ strlen ( ptr ) - numconst ] = '\\0' ;	ptr ptr	strlen
60	895	1	0	0	0	return ret ;	EMPTY	EMPTY
60	896	3	-1	0	-1	}	EMPTY	EMPTY
60	898	1	0	0	-1	# ifdef have _ pcap _ set _ tstamp _ precision	EMPTY	EMPTY
60	899	2	-1	0	-1	static int	EMPTY	EMPTY
60	900	2	-1	0	-1	tstamp _ precision _ from _ string ( const char * precision )	EMPTY	EMPTY
60	901	2	-1	0	-1	{	EMPTY	EMPTY
60	902	2	-1	0	-1	if ( strncmp ( precision  strlit  strlen ( strlit ) ) == numconst )	EMPTY	strlen
60	903	3	-1	0	-1	return pcap _ tstamp _ precision _ nano ;	EMPTY	EMPTY
60	905	1	0	0	-1	if ( strncmp ( precision  strlit  strlen ( strlit ) ) == numconst )	EMPTY	strlen
60	906	3	-1	0	-1	return pcap _ tstamp _ precision _ micro ;	EMPTY	EMPTY
60	908	1	0	0	-1	return - einval ;	EMPTY	EMPTY
60	909	3	-1	0	-1	}	EMPTY	EMPTY
60	911	1	0	0	-1	static const char *	EMPTY	EMPTY
60	912	2	-1	0	-1	tstamp _ precision _ to _ string ( int precision )	EMPTY	EMPTY
60	913	2	-1	0	-1	{	EMPTY	EMPTY
60	914	3	-1	0	-1	switch ( precision ) {	EMPTY	EMPTY
60	916	1	0	0	-1	case pcap _ tstamp _ precision _ micro :	EMPTY	EMPTY
60	917	3	-1	0	-1	return strlit ;	EMPTY	EMPTY
60	919	1	0	0	-1	case pcap _ tstamp _ precision _ nano :	EMPTY	EMPTY
60	920	3	-1	0	-1	return strlit ;	EMPTY	EMPTY
60	922	1	0	0	-1	default :	EMPTY	EMPTY
60	923	2	-1	0	-1	return strlit ;	EMPTY	EMPTY
60	924	2	-1	0	-1	}	EMPTY	EMPTY
60	925	2	-1	0	-1	}	EMPTY	EMPTY
60	926	3	-1	0	-1	# endif	EMPTY	EMPTY
60	928	1	1	0	-1	# ifdef have _ capsicum	EMPTY	EMPTY
60	982	2	-1	1	-1	static void	EMPTY	EMPTY
60	983	2	-1	0	-1	set _ dumper _ capsicum _ rights ( pcap _ dumper _ t * p )	EMPTY	EMPTY
60	984	2	-1	0	-1	{	EMPTY	EMPTY
60	985	2	-1	0	-1	int fd = fileno ( pcap _ dump _ file ( p ) ) ;	EMPTY	EMPTY
60	986	3	-1	0	-1	cap _ rights _ t rights ;	EMPTY	EMPTY
60	988	1	0	0	-1	cap _ rights _ init ( & rights  cap _ seek  cap _ write  cap _ fcntl ) ;	EMPTY	EMPTY
60	989	2	-1	0	-1	if ( cap _ rights _ limit ( fd  & rights ) < numconst && errno != enosys ) {	EMPTY	EMPTY
60	990	2	-1	0	-1	error ( strlit ) ;	EMPTY	EMPTY
60	991	2	-1	0	-1	}	EMPTY	EMPTY
60	992	2	-1	0	-1	if ( cap _ fcntls _ limit ( fd  cap _ fcntl _ getfl ) < numconst && errno != enosys ) {	EMPTY	EMPTY
60	993	2	-1	0	-1	error ( strlit ) ;	EMPTY	EMPTY
60	994	2	-1	0	-1	}	EMPTY	EMPTY
60	995	2	-1	0	-1	}	EMPTY	EMPTY
60	996	3	-1	0	-1	# endif	EMPTY	EMPTY
60	998	1	0	0	-1	int	EMPTY	EMPTY
60	999	2	-1	0	-1	main ( int argc  char * * argv )	EMPTY	EMPTY
60	1000	2	-1	0	-1	{	EMPTY	EMPTY
60	1001	2	-1	0	-1	register int cnt  op  i ;	EMPTY	EMPTY
60	1002	2	-1	0	-1	bpf _ u _ int32 localnet = numconst  netmask = numconst ;	netmask	EMPTY
60	1003	2	-1	0	-1	register char * cp  * infile  * cmdbuf  * device  * rfilename  * vfilename  * wfilename ;	EMPTY	EMPTY
60	1004	2	-1	0	-1	pcap _ handler callback ;	EMPTY	EMPTY
60	1005	2	-1	0	-1	int type ;	EMPTY	EMPTY
60	1006	2	-1	0	-1	int dlt ;	EMPTY	EMPTY
60	1007	2	-1	0	-1	int new _ dlt ;	EMPTY	EMPTY
60	1008	2	-1	0	-1	const char * dlt _ name ;	EMPTY	EMPTY
60	1009	2	-1	0	-1	struct bpf _ program fcode ;	bpf _ program	EMPTY
60	1010	2	-1	0	-1	# ifndef win32	EMPTY	EMPTY
60	1011	2	-1	0	-1	retsigtype ( * oldhandler ) ( int ) ;	EMPTY	EMPTY
60	1012	2	-1	0	-1	# endif	EMPTY	EMPTY
60	1013	2	-1	0	-1	struct print _ info printinfo ;	EMPTY	EMPTY
60	1014	2	-1	0	-1	struct dump _ info dumpinfo ;	EMPTY	EMPTY
60	1015	2	-1	0	-1	u _ char * pcap _ userdata ;	EMPTY	EMPTY
60	1016	2	-1	0	-1	char ebuf [ pcap _ errbuf _ size ] ;	EMPTY	EMPTY
60	1017	2	-1	0	-1	char vfileline [ path _ max + numconst ] ;	EMPTY	EMPTY
60	1018	2	-1	0	-1	char * username = null ;	EMPTY	EMPTY
60	1019	2	-1	0	-1	char * chroot _ dir = null ;	EMPTY	EMPTY
60	1020	2	-1	0	-1	char * ret = null ;	EMPTY	EMPTY
60	1021	2	-1	0	-1	char * end ;	EMPTY	EMPTY
60	1022	2	-1	0	-1	# ifdef have _ pcap _ findalldevs	EMPTY	EMPTY
60	1023	2	-1	0	-1	pcap _ if _ t * devpointer ;	EMPTY	EMPTY
60	1024	2	-1	0	-1	int devnum ;	EMPTY	EMPTY
60	1025	2	-1	0	-1	# endif	EMPTY	EMPTY
60	1026	2	-1	0	-1	int status ;	EMPTY	EMPTY
60	1027	3	-1	0	-1	file * vfile ;	EMPTY	EMPTY
60	1028	1	1	0	-1	# ifdef have _ capsicum	EMPTY	EMPTY
60	1029	2	-1	0	-1	cap _ rights _ t rights ;	EMPTY	EMPTY
60	1030	2	-1	0	-1	int cansandbox ;	EMPTY	EMPTY
60	1031	3	-1	1	-1	# endif	EMPTY	EMPTY
60	1033	1	1	0	-1	# ifdef win32	EMPTY	EMPTY
60	1034	2	-1	0	-1	if ( wsockinit ( ) != numconst ) return numconst ;	EMPTY	EMPTY
60	1035	3	-1	1	-1	# endif	EMPTY	EMPTY
60	1037	1	1	1	-1	jflag = - numconst ;	EMPTY	EMPTY
60	1038	2	-1	0	-1	gndo -> ndo _ oflag = 1	ndo _ oflag	EMPTY
60	1039	2	-1	0	-1	gndo -> ndo _ rflag = 1	ndo _ rflag	EMPTY
60	1040	2	-1	0	-1	gndo -> ndo _ dlt = - 1	ndo _ dlt	EMPTY
60	1041	2	-1	0	-1	gndo -> ndo _ default _ print = ndo _ default _ print	ndo _ default _ print ndo _ default _ print	EMPTY
60	1042	2	-1	0	-1	gndo -> ndo _ printf = tcpdump _ printf	ndo _ printf	EMPTY
60	1043	2	-1	0	-1	gndo -> ndo _ error = ndo _ error	ndo _ error ndo _ error	EMPTY
60	1044	2	-1	0	-1	gndo -> ndo _ warning = ndo _ warning	ndo _ warning ndo _ warning	EMPTY
60	1045	2	-1	0	-1	gndo -> ndo _ snaplen = default _ snaplen ;	EMPTY	EMPTY
60	1046	3	-1	0	-1	gndo -> ndo _ immediate = 0	ndo _ immediate	EMPTY
60	1048	1	0	0	-1	cnt = - 1	EMPTY	EMPTY
60	1049	2	-1	0	-1	device = null ;	EMPTY	EMPTY
60	1050	2	-1	0	-1	infile = null ;	EMPTY	EMPTY
60	1051	2	-1	0	-1	rfilename = null ;	EMPTY	EMPTY
60	1052	2	-1	0	-1	vfilename = null ;	EMPTY	EMPTY
60	1053	2	-1	0	-1	vfile = null ;	EMPTY	EMPTY
60	1054	2	-1	0	-1	wfilename = null ;	EMPTY	EMPTY
60	1055	2	-1	0	-1	dlt = - 1	EMPTY	EMPTY
60	1056	2	-1	0	-1	if ( ( cp = strrchr ( argv [ 0 ] , '/' ) ) != null )	EMPTY	strrchr
60	1057	2	-1	0	-1	program _ name = cp + 1 ;	program _ name	EMPTY
60	1058	2	-1	0	-1	else	EMPTY	EMPTY
60	1059	3	-1	0	-1	program _ name = argv [ 0 ]	program _ name	EMPTY
60	1068	1	0	0	-1	if ( abort _ on _ misalignment ( ebuf , sizeof ( ebuf ) ) < 0 )	EMPTY	EMPTY
60	1069	3	-1	0	-1	error (  " %s "  , ebuf )	EMPTY	EMPTY
60	1071	1	0	0	-1	# ifdef use _ libsmi	EMPTY	EMPTY
60	1072	2	-1	0	-1	smiinit ( strlit ) ;	EMPTY	EMPTY
60	1073	3	-1	0	-1	# endif	EMPTY	EMPTY
60	1075	1	0	0	0	while (	EMPTY	EMPTY
60	1076	2	-1	0	-1	( op = getopt _ long ( argc  argv  shortopts  longopts  null ) ) != - numconst )	EMPTY	EMPTY
60	1077	3	-1	0	-1	switch ( op ) {	EMPTY	EMPTY
60	1079	1	1	0	-1	case 'a' :	EMPTY	EMPTY
60	1081	3	-1	1	-1	break ;	EMPTY	EMPTY
60	1083	1	0	0	-1	case 'a' :	EMPTY	EMPTY
60	1084	2	-1	0	-1	++ aflag ;	EMPTY	EMPTY
60	1085	3	-1	0	-1	break	EMPTY	EMPTY
60	1087	1	0	0	-1	case 'b' :	EMPTY	EMPTY
60	1088	2	-1	0	-1	++ bflag ;	EMPTY	EMPTY
60	1089	3	-1	0	-1	break	EMPTY	EMPTY
60	1091	1	1	0	-1	# if defined ( have _ pcap _ create ) || defined ( win32 )	EMPTY	EMPTY
60	1092	2	-1	0	-1	case 'b' :	EMPTY	EMPTY
60	1093	2	-1	0	-1	bflag = atoi ( optarg ) * 1024	optarg	atoi
60	1094	2	-1	0	-1	if ( bflag <= 0 )	EMPTY	EMPTY
60	1095	2	-1	0	-1	error (  " invalid packet buffer size %s "  , optarg )	optarg	EMPTY
60	1096	2	-1	0	-1	break	EMPTY	EMPTY
60	1097	3	-1	1	-1	# endif	EMPTY	EMPTY
60	1099	1	0	0	-1	case 'c' :	EMPTY	EMPTY
60	1100	2	-1	0	-1	cnt = atoi ( optarg )	optarg	atoi
60	1101	2	-1	0	-1	if ( cnt <= 0 )	EMPTY	EMPTY
60	1102	2	-1	0	-1	error (  " invalid packet count %s "  , optarg )	optarg	EMPTY
60	1103	3	-1	0	-1	break	EMPTY	EMPTY
60	1105	1	0	0	-1	case 'c' :	EMPTY	EMPTY
60	1106	2	-1	0	-1	cflag = atoi ( optarg ) * 1000000	optarg	atoi
60	1107	2	-1	0	-1	if ( cflag < 0 )	EMPTY	EMPTY
60	1108	2	-1	0	-1	error (  " invalid file size %s "  , optarg )	optarg	EMPTY
60	1109	3	-1	0	-1	break	EMPTY	EMPTY
60	1111	1	0	0	-1	case 'd' :	EMPTY	EMPTY
60	1112	2	-1	0	-1	++ dflag	dflag	EMPTY
60	1113	3	-1	0	-1	break	EMPTY	EMPTY
60	1115	1	0	0	-1	case 'd' :	EMPTY	EMPTY
60	1116	2	-1	0	-1	dflag ++	dflag	EMPTY
60	1117	3	-1	0	-1	break	EMPTY	EMPTY
60	1119	1	0	0	-1	case 'l' :	EMPTY	EMPTY
60	1120	2	-1	0	-1	lflag ++	lflag	EMPTY
60	1121	3	-1	0	-1	break	EMPTY	EMPTY
60	1123	1	0	0	-1	case 'e' :	EMPTY	EMPTY
60	1124	2	-1	0	-1	++ eflag ;	EMPTY	EMPTY
60	1125	3	-1	0	-1	break	EMPTY	EMPTY
60	1127	1	0	0	-1	case 'e' :	EMPTY	EMPTY
60	1128	2	-1	0	-1	# ifndef have _ libcrypto	EMPTY	EMPTY
60	1129	2	-1	0	-1	warning (  " crypto code not compiled in "  ) ;	EMPTY	EMPTY
60	1130	2	-1	0	-1	# endif	EMPTY	EMPTY
60	1131	2	-1	0	-1	gndo -> ndo _ espsecret = optarg	optarg	EMPTY
60	1132	3	-1	0	-1	break	EMPTY	EMPTY
60	1134	1	0	0	-1	case 'f' :	EMPTY	EMPTY
60	1135	2	-1	0	-1	++ fflag ;	EMPTY	EMPTY
60	1136	3	-1	0	-1	break	EMPTY	EMPTY
60	1138	1	0	0	-1	case 'f' :	EMPTY	EMPTY
60	1139	2	-1	0	-1	infile = optarg	optarg	EMPTY
60	1140	3	-1	0	-1	break	EMPTY	EMPTY
60	1142	1	0	0	-1	case 'g' :	EMPTY	EMPTY
60	1143	2	-1	0	-1	gflag = atoi ( optarg )	optarg	atoi
60	1144	2	-1	0	-1	if ( gflag < 0 )	EMPTY	EMPTY
60	1145	3	-1	0	-1	error (  " invalid number of seconds %s "  , optarg )	optarg	EMPTY
60	1148	1	1	1	-1	gflag _ count = numconst ;	EMPTY	EMPTY
60	1151	1	1	1	1	if ( ( gflag _ time = time ( null ) ) == ( time _ t ) - 1 ) {	EMPTY	time
60	1152	2	-1	0	-1	error (  " main: can't get current time: %s "  ,	EMPTY	EMPTY
60	1153	2	-1	0	-1	pcap _ strerror ( errno ) ) ;	EMPTY	EMPTY
60	1154	2	-1	0	-1	}	EMPTY	EMPTY
60	1155	3	-1	0	-1	break	EMPTY	EMPTY
60	1157	1	0	0	-1	case 'h' :	EMPTY	EMPTY
60	1158	2	-1	0	-1	print _ usage ( )	EMPTY	EMPTY
60	1159	2	-1	0	-1	exit ( 0 )	EMPTY	exit
60	1160	3	-1	0	-1	break	EMPTY	EMPTY
60	1162	1	0	0	-1	case 'h' :	EMPTY	EMPTY
60	1163	2	-1	0	-1	++ hflag ;	EMPTY	EMPTY
60	1164	3	-1	0	-1	break	EMPTY	EMPTY
60	1166	1	0	0	-1	case 'i' :	EMPTY	EMPTY
60	1167	2	-1	0	-1	if ( optarg [ 0 ] == '0' && optarg [ 1 ] == 0 )	optarg optarg	EMPTY
60	1168	3	-1	0	-1	error (  " invalid adapter index "  )	EMPTY	EMPTY
60	1170	1	1	0	-1	# ifdef have _ pcap _ findalldevs	EMPTY	EMPTY
60	1181	2	-1	1	-1	devnum = strtol ( optarg , & end , 10 )	optarg	strtol
60	1182	2	-1	0	-1	if ( optarg != end && * end == '\\0' ) {	optarg	EMPTY
60	1183	2	-1	0	-1	if ( devnum < 0 )	EMPTY	EMPTY
60	1184	3	-1	0	-1	error (  " invalid adapter index "  )	EMPTY	EMPTY
60	1186	1	1	0	1	if ( pcap _ findalldevs ( & devpointer  ebuf ) < numconst )	EMPTY	EMPTY
60	1187	2	-1	0	-1	error ( strlit  ebuf ) ;	EMPTY	EMPTY
60	1188	2	-1	0	-1	else {	EMPTY	EMPTY
60	1194	2	-1	1	-1	for ( i = 0 ;	EMPTY	EMPTY
60	1195	2	-1	0	-1	i < devnum - 1 && devpointer != null ;	EMPTY	EMPTY
60	1196	2	-1	0	-1	i ++ , devpointer = devpointer -> next )	EMPTY	EMPTY
60	1197	2	-1	0	-1	;	EMPTY	EMPTY
60	1198	2	-1	0	-1	if ( devpointer == null )	EMPTY	EMPTY
60	1199	2	-1	0	-1	error (  " invalid adapter index "  )	EMPTY	EMPTY
60	1200	2	-1	0	-1	}	EMPTY	EMPTY
60	1201	2	-1	0	-1	device = devpointer -> name ;	name	EMPTY
60	1202	2	-1	0	-1	break ;	EMPTY	EMPTY
60	1203	2	-1	0	-1	}	EMPTY	EMPTY
60	1204	2	-1	1	-1	# endif	EMPTY	EMPTY
60	1205	2	-1	0	-1	device = optarg	optarg	EMPTY
60	1206	3	-1	0	-1	break	EMPTY	EMPTY
60	1208	1	1	0	-1	# ifdef have _ pcap _ create	EMPTY	EMPTY
60	1209	2	-1	0	-1	case 'i' :	EMPTY	EMPTY
60	1210	2	-1	0	-1	++ iflag ;	EMPTY	EMPTY
60	1211	2	-1	0	-1	break	EMPTY	EMPTY
60	1212	3	-1	1	-1	# endif	EMPTY	EMPTY
60	1214	1	0	0	-1	# ifdef have _ pcap _ set _ tstamp _ type	EMPTY	EMPTY
60	1215	2	-1	0	-1	case 'j' :	EMPTY	EMPTY
60	1216	2	-1	0	-1	jflag = pcap _ tstamp _ type _ name _ to _ val ( optarg )	optarg	EMPTY
60	1217	2	-1	0	-1	if ( jflag < 0 )	EMPTY	EMPTY
60	1218	2	-1	0	-1	error (  " invalid time stamp type %s "  , optarg )	optarg	time
60	1219	3	-1	0	-1	break	EMPTY	EMPTY
60	1221	1	0	0	-1	case 'j' :	EMPTY	EMPTY
60	1222	2	-1	0	-1	jflag ++	jflag	EMPTY
60	1223	2	-1	0	-1	break	EMPTY	EMPTY
60	1224	3	-1	0	-1	# endif	EMPTY	EMPTY
60	1226	1	1	0	-1	case 'l' :	EMPTY	EMPTY
60	1227	2	-1	0	-1	# ifdef win32	EMPTY	EMPTY
60	1237	2	-1	1	-1	setvbuf ( stdout  null   _ ionbf  numconst ) ;	EMPTY	stdout
60	1238	2	-1	1	-1	# else	EMPTY	EMPTY
60	1239	2	-1	0	-1	# ifdef have _ setlinebuf	EMPTY	EMPTY
60	1240	2	-1	0	-1	setlinebuf ( stdout ) ;	EMPTY	setlinebuf stdout
60	1241	2	-1	0	-1	# else	EMPTY	EMPTY
60	1242	2	-1	0	-1	setvbuf ( stdout  null   _ iolbf  numconst ) ;	EMPTY	stdout
60	1243	2	-1	0	-1	# endif	EMPTY	EMPTY
60	1244	2	-1	1	-1	# endif	EMPTY	EMPTY
60	1245	3	-1	0	-1	break	EMPTY	EMPTY
60	1247	1	0	0	-1	case 'k' :	EMPTY	EMPTY
60	1248	2	-1	0	-1	++ kflag ;	EMPTY	EMPTY
60	1249	3	-1	0	-1	break	EMPTY	EMPTY
60	1251	1	0	0	-1	case 'm' :	EMPTY	EMPTY
60	1252	2	-1	0	-1	# ifdef use _ libsmi	EMPTY	EMPTY
60	1253	2	-1	0	-1	if ( smiloadmodule ( optarg ) == 0 ) {	optarg	EMPTY
60	1254	2	-1	0	-1	error (  " could not load mib module %s "  , optarg ) ;	optarg	EMPTY
60	1255	2	-1	0	-1	}	EMPTY	EMPTY
60	1256	2	-1	0	-1	sflag = 1 ;	EMPTY	EMPTY
60	1257	2	-1	0	-1	# else	EMPTY	EMPTY
60	1258	2	-1	0	-1	( void ) fprintf ( stderr ,  " %s: ignoring option `-m %s'  "  ,	EMPTY	fprintf stderr
60	1259	2	-1	0	-1	program _ name , optarg )	program _ name optarg	EMPTY
60	1260	2	-1	0	-1	( void ) fprintf ( stderr ,  " (no libsmi support)\n "  )	EMPTY	fprintf stderr
60	1261	2	-1	0	-1	# endif	EMPTY	EMPTY
60	1262	3	-1	0	-1	break	EMPTY	EMPTY
60	1264	1	1	0	-1	case 'm' :	EMPTY	EMPTY
60	1266	2	-1	1	-1	# ifndef have _ libcrypto	EMPTY	EMPTY
60	1267	2	-1	0	-1	warning ( strlit ) ;	EMPTY	EMPTY
60	1268	2	-1	0	-1	# endif	EMPTY	EMPTY
60	1269	2	-1	0	-1	sigsecret = optarg ;	optarg	EMPTY
60	1270	3	-1	0	-1	break	EMPTY	EMPTY
60	1272	1	0	0	-1	case 'n' :	EMPTY	EMPTY
60	1273	2	-1	0	-1	++ nflag ;	EMPTY	EMPTY
60	1274	3	-1	0	-1	break	EMPTY	EMPTY
60	1276	1	0	0	-1	case 'n' :	EMPTY	EMPTY
60	1277	2	-1	0	-1	++ nflag ;	EMPTY	EMPTY
60	1278	3	-1	0	-1	break	EMPTY	EMPTY
60	1280	1	0	0	-1	case 'o' :	EMPTY	EMPTY
60	1281	2	-1	0	-1	oflag = 0	EMPTY	EMPTY
60	1282	3	-1	0	-1	break	EMPTY	EMPTY
60	1284	1	0	0	-1	case 'p' :	EMPTY	EMPTY
60	1285	2	-1	0	-1	++ pflag ;	EMPTY	EMPTY
60	1286	3	-1	0	-1	break	EMPTY	EMPTY
60	1288	1	0	0	-1	case 'q' :	EMPTY	EMPTY
60	1289	2	-1	0	-1	++ qflag ;	EMPTY	EMPTY
60	1290	2	-1	0	-1	++ suppress _ default _ print ;	EMPTY	EMPTY
60	1291	3	-1	0	-1	break	EMPTY	EMPTY
60	1293	1	1	0	-1	# ifdef have _ pcap _ setdirection	EMPTY	EMPTY
60	1294	2	-1	0	-1	case 'q' :	EMPTY	EMPTY
60	1295	2	-1	0	-1	if ( strcasecmp ( optarg ,  " in "  ) == 0 )	optarg	strcasecmp
60	1296	2	-1	0	-1	qflag = pcap _ d _ in ;	qflag	EMPTY
60	1297	2	-1	0	-1	else if ( strcasecmp ( optarg ,  " out "  ) == 0 )	optarg	strcasecmp
60	1298	2	-1	0	-1	qflag = pcap _ d _ out ;	qflag	EMPTY
60	1299	2	-1	0	-1	else if ( strcasecmp ( optarg ,  " inout "  ) == 0 )	optarg	strcasecmp
60	1300	2	-1	0	-1	qflag = pcap _ d _ inout ;	qflag	EMPTY
60	1301	2	-1	0	-1	else	EMPTY	EMPTY
60	1302	2	-1	0	-1	error (  " unknown capture direction `%s' "  , optarg )	optarg	EMPTY
60	1303	2	-1	0	-1	break	EMPTY	EMPTY
60	1304	3	-1	1	-1	# endif	EMPTY	EMPTY
60	1306	1	0	0	-1	case 'r' :	EMPTY	EMPTY
60	1307	2	-1	0	-1	rfilename = optarg	optarg	EMPTY
60	1308	3	-1	0	-1	break	EMPTY	EMPTY
60	1310	1	0	0	-1	case 'r' :	EMPTY	EMPTY
60	1311	2	-1	0	-1	rflag = 0	EMPTY	EMPTY
60	1312	3	-1	0	-1	break	EMPTY	EMPTY
60	1314	1	0	0	-1	case 's' :	EMPTY	EMPTY
60	1315	2	-1	0	-1	snaplen = strtol ( optarg , & end , 0 )	snaplen optarg	strtol
60	1316	2	-1	0	-1	if ( optarg == end || * end != '\\0'	optarg	EMPTY
60	1317	2	-1	0	-1	|| snaplen < numconst || snaplen > maximum _ snaplen )	snaplen snaplen	EMPTY
60	1318	2	-1	0	-1	error ( strlit  optarg ) ;	optarg	EMPTY
60	1319	2	-1	0	-1	if ( snaplen == numconst )	snaplen	EMPTY
60	1320	2	-1	0	-1	snaplen = maximum _ snaplen ;	snaplen	EMPTY
60	1321	3	-1	0	-1	break	EMPTY	EMPTY
60	1323	1	0	0	-1	case 's' :	EMPTY	EMPTY
60	1324	2	-1	0	-1	++ sflag ;	EMPTY	EMPTY
60	1325	3	-1	0	-1	break	EMPTY	EMPTY
60	1327	1	0	0	-1	case 't' :	EMPTY	EMPTY
60	1328	2	-1	0	-1	++ tflag ;	EMPTY	EMPTY
60	1329	3	-1	0	-1	break	EMPTY	EMPTY
60	1331	1	0	0	-1	case 't' :	EMPTY	EMPTY
60	1332	2	-1	0	-1	if ( strcasecmp ( optarg ,  " vat "  ) == 0 )	optarg	strcasecmp
60	1333	2	-1	0	-1	packettype = pt _ vat ;	EMPTY	EMPTY
60	1334	2	-1	0	-1	else if ( strcasecmp ( optarg ,  " wb "  ) == 0 )	optarg	strcasecmp
60	1335	2	-1	0	-1	packettype = pt _ wb ;	EMPTY	EMPTY
60	1336	2	-1	0	-1	else if ( strcasecmp ( optarg ,  " rpc "  ) == 0 )	optarg	strcasecmp
60	1337	2	-1	0	-1	packettype = pt _ rpc ;	EMPTY	EMPTY
60	1338	2	-1	0	-1	else if ( strcasecmp ( optarg ,  " rtp "  ) == 0 )	optarg	strcasecmp
60	1339	2	-1	0	-1	packettype = pt _ rtp ;	EMPTY	EMPTY
60	1340	2	-1	0	-1	else if ( strcasecmp ( optarg ,  " rtcp "  ) == 0 )	optarg	strcasecmp
60	1341	2	-1	0	-1	packettype = pt _ rtcp ;	EMPTY	EMPTY
60	1342	2	-1	0	-1	else if ( strcasecmp ( optarg ,  " snmp "  ) == 0 )	optarg	strcasecmp
60	1343	2	-1	0	-1	packettype = pt _ snmp ;	EMPTY	EMPTY
60	1344	2	-1	0	-1	else if ( strcasecmp ( optarg ,  " cnfp "  ) == 0 )	optarg	strcasecmp
60	1345	2	-1	0	-1	packettype = pt _ cnfp ;	EMPTY	EMPTY
60	1346	2	-1	0	-1	else if ( strcasecmp ( optarg ,  " tftp "  ) == 0 )	optarg	strcasecmp
60	1347	2	-1	0	-1	packettype = pt _ tftp ;	EMPTY	EMPTY
60	1348	2	-1	0	-1	else if ( strcasecmp ( optarg ,  " aodv "  ) == 0 )	optarg	strcasecmp
60	1349	2	-1	0	-1	packettype = pt _ aodv ;	EMPTY	EMPTY
60	1350	2	-1	0	-1	else if ( strcasecmp ( optarg ,  " carp "  ) == 0 )	optarg	strcasecmp
60	1351	2	-1	0	-1	packettype = pt _ carp ;	EMPTY	EMPTY
60	1352	2	-1	0	-1	else if ( strcasecmp ( optarg ,  " radius "  ) == 0 )	optarg	strcasecmp
60	1353	2	-1	0	-1	packettype = pt _ radius ;	EMPTY	EMPTY
60	1354	2	-1	0	-1	else if ( strcasecmp ( optarg ,  " zmtp1 "  ) == 0 )	optarg	strcasecmp
60	1355	2	-1	0	-1	packettype = pt _ zmtp1 ;	EMPTY	EMPTY
60	1356	2	-1	0	-1	else if ( strcasecmp ( optarg ,  " vxlan "  ) == 0 )	optarg	strcasecmp
60	1357	2	-1	0	-1	packettype = pt _ vxlan ;	EMPTY	EMPTY
60	1358	2	-1	0	-1	else if ( strcasecmp ( optarg ,  " pgm "  ) == 0 )	optarg	strcasecmp
60	1359	2	-1	0	-1	packettype = pt _ pgm ;	EMPTY	EMPTY
60	1360	3	-1	0	-1	else if ( strcasecmp ( optarg ,  " pgm _ zmtp1 "  ) == 0 )	optarg	strcasecmp
60	1361	1	0	0	-1	packettype = pt _ pgm _ zmtp1 ;	EMPTY	EMPTY
60	1362	2	-1	0	-1	else if ( strcasecmp ( optarg ,  " lmp "  ) == 0 )	optarg	strcasecmp
60	1363	2	-1	0	-1	packettype = pt _ lmp ;	EMPTY	EMPTY
60	1364	2	-1	0	-1	else	EMPTY	EMPTY
60	1365	2	-1	0	-1	error (  " unknown packet type `%s' "  , optarg )	optarg	EMPTY
60	1366	3	-1	0	-1	break	EMPTY	EMPTY
60	1368	1	0	0	-1	case 'u' :	EMPTY	EMPTY
60	1369	2	-1	0	-1	++ uflag ;	EMPTY	EMPTY
60	1370	3	-1	0	-1	break	EMPTY	EMPTY
60	1372	1	0	0	-1	# ifdef have _ pcap _ dump _ flush	EMPTY	EMPTY
60	1373	2	-1	0	-1	case 'u' :	EMPTY	EMPTY
60	1374	2	-1	0	-1	++ uflag ;	EMPTY	EMPTY
60	1375	2	-1	0	-1	break	EMPTY	EMPTY
60	1376	3	-1	0	-1	# endif	EMPTY	EMPTY
60	1378	1	0	0	-1	case 'v' :	EMPTY	EMPTY
60	1379	2	-1	0	-1	++ vflag ;	EMPTY	EMPTY
60	1380	3	-1	0	-1	break	EMPTY	EMPTY
60	1382	1	0	0	-1	case 'v' :	EMPTY	EMPTY
60	1383	2	-1	0	-1	vfilename = optarg	optarg	EMPTY
60	1384	3	-1	0	-1	break	EMPTY	EMPTY
60	1386	1	0	0	-1	case 'w' :	EMPTY	EMPTY
60	1387	2	-1	0	-1	wfilename = optarg	optarg	EMPTY
60	1388	3	-1	0	-1	break	EMPTY	EMPTY
60	1390	1	0	0	-1	case 'w' :	EMPTY	EMPTY
60	1391	2	-1	0	-1	wflag = atoi ( optarg )	optarg	atoi
60	1392	2	-1	0	-1	if ( wflag < 0 )	EMPTY	EMPTY
60	1393	2	-1	0	-1	error (  " invalid number of output files %s "  , optarg )	optarg	EMPTY
60	1394	2	-1	0	-1	wflagchars = getwflagchars ( wflag ) ;	EMPTY	EMPTY
60	1395	3	-1	0	-1	break	EMPTY	EMPTY
60	1397	1	0	0	-1	case 'x' :	EMPTY	EMPTY
60	1398	2	-1	0	-1	++ xflag ;	EMPTY	EMPTY
60	1399	2	-1	0	-1	++ suppress _ default _ print ;	EMPTY	EMPTY
60	1400	3	-1	0	-1	break	EMPTY	EMPTY
60	1402	1	0	0	-1	case 'x' :	EMPTY	EMPTY
60	1403	2	-1	0	-1	++ xflag ;	EMPTY	EMPTY
60	1404	2	-1	0	-1	++ suppress _ default _ print ;	EMPTY	EMPTY
60	1405	3	-1	0	-1	break	EMPTY	EMPTY
60	1407	1	0	0	-1	case 'y' :	EMPTY	EMPTY
60	1408	2	-1	0	-1	gndo -> ndo _ dltname = optarg	ndo _ dltname optarg	EMPTY
60	1409	2	-1	0	-1	gndo -> ndo _ dlt =	ndo _ dlt	EMPTY
60	1410	2	-1	0	-1	pcap _ datalink _ name _ to _ val ( gndo -> ndo _ dltname )	ndo _ dltname	EMPTY
60	1411	2	-1	0	-1	if ( gndo -> ndo _ dlt < 0 )	ndo _ dlt	EMPTY
60	1412	2	-1	0	-1	error (  " invalid data link type %s "  , gndo -> ndo _ dltname )	ndo _ dltname	EMPTY
60	1413	3	-1	0	-1	break	EMPTY	EMPTY
60	1415	1	1	0	-1	# if defined ( have _ pcap _ debug ) || defined ( have _ yydebug )	EMPTY	EMPTY
60	1416	2	-1	0	-1	case 'y' :	EMPTY	EMPTY
60	1417	2	-1	0	-1	{	EMPTY	EMPTY
60	1419	2	-1	1	-1	# ifdef have _ pcap _ debug	EMPTY	EMPTY
60	1420	2	-1	0	-1	extern int pcap _ debug ;	EMPTY	EMPTY
60	1421	2	-1	0	-1	pcap _ debug = numconst ;	EMPTY	EMPTY
60	1422	2	-1	0	-1	# else	EMPTY	EMPTY
60	1423	2	-1	0	-1	extern int yydebug ;	EMPTY	EMPTY
60	1424	2	-1	0	-1	yydebug = numconst ;	EMPTY	EMPTY
60	1425	2	-1	0	-1	# endif	EMPTY	EMPTY
60	1426	2	-1	0	-1	}	EMPTY	EMPTY
60	1427	2	-1	0	-1	break ;	EMPTY	EMPTY
60	1428	2	-1	0	-1	# endif	EMPTY	EMPTY
60	1429	2	-1	0	-1	case 'z' :	EMPTY	EMPTY
60	1430	2	-1	0	-1	zflag = strdup ( optarg )	zflag optarg	strdup
60	1431	3	-1	0	-1	break	EMPTY	EMPTY
60	1433	1	0	0	-1	case 'z' :	EMPTY	EMPTY
60	1434	2	-1	0	-1	username = strdup ( optarg )	optarg	strdup
60	1435	3	-1	0	-1	break	EMPTY	EMPTY
60	1437	1	0	0	-1	case '#' :	EMPTY	EMPTY
60	1438	2	-1	0	-1	gndo -> ndo _ packet _ number = 1	ndo _ packet _ number	EMPTY
60	1439	3	-1	0	-1	break	EMPTY	EMPTY
60	1441	1	0	0	-1	case option _ version :	EMPTY	EMPTY
60	1442	2	-1	0	-1	print _ version ( )	EMPTY	EMPTY
60	1443	2	-1	0	-1	exit ( 0 )	EMPTY	exit
60	1444	3	-1	0	-1	break	EMPTY	EMPTY
60	1446	1	0	0	-1	# ifdef have _ pcap _ set _ tstamp _ precision	EMPTY	EMPTY
60	1447	2	-1	0	-1	case option _ tstamp _ precision :	EMPTY	EMPTY
60	1448	2	-1	0	-1	gndo -> ndo _ tstamp _ precision = tstamp _ precision _ from _ string ( optarg ) ;	ndo _ tstamp _ precision optarg	EMPTY
60	1449	2	-1	0	-1	if ( gndo -> ndo _ tstamp _ precision < numconst )	ndo _ tstamp _ precision	EMPTY
60	1450	2	-1	0	-1	error ( strlit ) ;	EMPTY	EMPTY
60	1451	2	-1	0	-1	break ;	EMPTY	EMPTY
60	1452	3	-1	0	-1	# endif	EMPTY	EMPTY
60	1454	1	0	0	-1	# ifdef have _ pcap _ set _ immediate _ mode	EMPTY	EMPTY
60	1455	2	-1	0	-1	case option _ immediate _ mode :	EMPTY	EMPTY
60	1456	2	-1	0	-1	gndo -> ndo _ immediate = numconst ;	ndo _ immediate	EMPTY
60	1457	2	-1	0	-1	break ;	EMPTY	EMPTY
60	1458	3	-1	0	-1	# endif	EMPTY	EMPTY
60	1460	1	1	0	-1	default :	EMPTY	EMPTY
60	1461	2	-1	0	-1	print _ usage ( )	EMPTY	EMPTY
60	1462	2	-1	0	-1	exit ( 1 )	EMPTY	exit
60	1464	3	-1	1	-1	}	EMPTY	EMPTY
60	1466	1	0	0	-1	# ifdef have _ pcap _ findalldevs	EMPTY	EMPTY
60	1467	2	-1	0	-1	if ( dflag )	dflag	EMPTY
60	1468	2	-1	0	-1	show _ devices _ and _ exit ( ) ;	EMPTY	EMPTY
60	1469	3	-1	0	-1	# endif	EMPTY	EMPTY
60	1471	1	0	0	0	switch ( tflag ) {	EMPTY	EMPTY
60	1473	1	1	1	-1	case numconst :	EMPTY	EMPTY
60	1474	2	-1	1	-1	case numconst :	EMPTY	EMPTY
60	1475	2	-1	0	-1	thiszone = gmt2local ( numconst ) ;	thiszone	EMPTY
60	1476	3	-1	0	-1	break	EMPTY	EMPTY
60	1478	1	1	1	-1	case numconst :	EMPTY	EMPTY
60	1479	2	-1	1	-1	case numconst :	EMPTY	EMPTY
60	1480	2	-1	1	-1	case numconst :	EMPTY	EMPTY
60	1481	2	-1	1	-1	case numconst :	EMPTY	EMPTY
60	1482	3	-1	0	-1	break ;	EMPTY	EMPTY
60	1484	1	1	1	-1	default :	EMPTY	EMPTY
60	1485	2	-1	0	-1	error ( strlit ) ;	EMPTY	EMPTY
60	1486	2	-1	0	-1	break	EMPTY	EMPTY
60	1487	3	-1	0	-1	}	EMPTY	EMPTY
60	1489	1	0	0	0	if ( fflag != numconst && ( vfilename != null || rfilename != null ) )	EMPTY	EMPTY
60	1490	3	-1	0	-1	error ( strlit ) ;	EMPTY	EMPTY
60	1492	1	0	0	0	if ( vfilename != null && rfilename != null )	EMPTY	EMPTY
60	1493	3	-1	0	-1	error ( strlit ) ;	EMPTY	EMPTY
60	1495	1	1	0	-1	# ifdef have _ pcap _ set _ immediate _ mode	EMPTY	EMPTY
60	1502	2	-1	1	-1	if ( wfilename == null && isatty ( numconst ) )	EMPTY	EMPTY
60	1503	2	-1	0	-1	gndo -> ndo _ immediate = numconst ;	ndo _ immediate	EMPTY
60	1504	3	-1	0	-1	# endif	EMPTY	EMPTY
60	1506	1	1	0	-1	# ifdef with _ chroot	EMPTY	EMPTY
60	1508	2	-1	1	-1	if ( getuid ( ) == numconst || geteuid ( ) == numconst ) {	EMPTY	getuid geteuid
60	1510	2	-1	1	-1	if ( ! chroot _ dir )	EMPTY	EMPTY
60	1511	2	-1	0	-1	chroot _ dir = with _ chroot ;	EMPTY	EMPTY
60	1512	2	-1	0	-1	}	EMPTY	EMPTY
60	1513	3	-1	0	-1	# endif	EMPTY	EMPTY
60	1515	1	1	0	-1	# ifdef with _ user	EMPTY	EMPTY
60	1517	2	-1	1	-1	if ( getuid ( ) == numconst || geteuid ( ) == numconst ) {	EMPTY	getuid geteuid
60	1519	2	-1	1	-1	if ( ! username )	EMPTY	EMPTY
60	1520	2	-1	0	-1	username = with _ user ;	EMPTY	EMPTY
60	1521	2	-1	0	-1	}	EMPTY	EMPTY
60	1522	3	-1	0	-1	# endif	EMPTY	EMPTY
60	1524	1	1	0	1	if ( rfilename != null || vfilename != null ) {	EMPTY	EMPTY
60	1534	2	-1	1	-1	# ifndef win32	EMPTY	EMPTY
60	1544	2	-1	1	-1	if ( setgid ( getgid ( ) ) != 0 || setuid ( getuid ( ) ) != 0 )	EMPTY	setgid getgid setuid getuid
60	1545	2	-1	0	-1	fprintf ( stderr ,  " warning: setgid/setuid failed !\n "  )	EMPTY	fprintf stderr
60	1546	2	-1	0	-1	# endif	EMPTY	EMPTY
60	1547	2	-1	0	-1	if ( vfilename != null ) {	EMPTY	EMPTY
60	1548	2	-1	0	-1	if ( vfilename [ 0 ] == '-' && vfilename [ 1 ] == '\0' )	EMPTY	EMPTY
60	1549	2	-1	0	-1	vfile = stdin ;	EMPTY	stdin
60	1550	2	-1	0	-1	else	EMPTY	EMPTY
60	1551	3	-1	0	-1	vfile = fopen ( vfilename ,  " r "  ) ;	EMPTY	fopen
60	1553	1	0	0	0	if ( vfile == null )	EMPTY	EMPTY
60	1554	3	-1	0	-1	error (  " unable to open file: %s\n "  , strerror ( errno ) ) ;	EMPTY	strerror
60	1556	1	0	0	-1	ret = get _ next _ file ( vfile , vfileline ) ;	EMPTY	EMPTY
60	1557	2	-1	0	-1	if ( ! ret )	EMPTY	EMPTY
60	1558	2	-1	0	-1	error (  " nothing in %s\n "  , vfilename ) ;	EMPTY	EMPTY
60	1559	2	-1	0	-1	rfilename = vfileline ;	EMPTY	EMPTY
60	1560	3	-1	0	-1	}	EMPTY	EMPTY
60	1562	1	0	0	-1	# ifdef have _ pcap _ set _ tstamp _ precision	EMPTY	EMPTY
60	1563	2	-1	0	-1	pd = pcap _ open _ offline _ with _ tstamp _ precision ( rfilename	EMPTY	EMPTY
60	1564	2	-1	0	-1	gndo -> ndo _ tstamp _ precision  ebuf ) ;	ndo _ tstamp _ precision	EMPTY
60	1565	2	-1	0	-1	# else	EMPTY	EMPTY
60	1566	2	-1	0	-1	pd = pcap _ open _ offline ( rfilename , ebuf )	EMPTY	EMPTY
60	1567	3	-1	0	-1	# endif	EMPTY	EMPTY
60	1569	1	1	0	1	if ( pd == null )	EMPTY	EMPTY
60	1570	2	-1	0	-1	error (  " %s "  , ebuf )	EMPTY	EMPTY
60	1571	2	-1	0	-1	# ifdef have _ capsicum	EMPTY	EMPTY
60	1572	2	-1	0	-1	cap _ rights _ init ( & rights  cap _ read ) ;	EMPTY	EMPTY
60	1573	2	-1	0	-1	if ( cap _ rights _ limit ( fileno ( pcap _ file ( pd ) )  & rights ) < numconst &&	pcap _ file	EMPTY
60	1574	2	-1	0	-1	errno != enosys ) {	EMPTY	EMPTY
60	1575	2	-1	0	-1	error ( strlit ) ;	EMPTY	EMPTY
60	1576	2	-1	0	-1	}	EMPTY	EMPTY
60	1577	2	-1	0	-1	# endif	EMPTY	EMPTY
60	1578	2	-1	0	-1	dlt = pcap _ datalink ( pd )	EMPTY	EMPTY
60	1579	2	-1	0	-1	dlt _ name = pcap _ datalink _ val _ to _ name ( dlt )	EMPTY	EMPTY
60	1580	2	-1	0	-1	if ( dlt _ name == null ) {	EMPTY	EMPTY
60	1581	2	-1	0	-1	fprintf ( stderr ,  " reading from file %s, link-type %u\n "  ,	EMPTY	fprintf stderr
60	1582	2	-1	0	-1	rfilename , dlt ) ;	EMPTY	EMPTY
60	1583	2	-1	0	-1	} else {	EMPTY	EMPTY
60	1584	2	-1	0	-1	fprintf ( stderr ,	EMPTY	fprintf stderr
60	1585	2	-1	0	-1	" reading from file %s, link-type %s (%s)\n "  ,	EMPTY	EMPTY
60	1586	2	-1	0	-1	rfilename , dlt _ name ,	EMPTY	EMPTY
60	1587	2	-1	0	-1	pcap _ datalink _ val _ to _ description ( dlt ) ) ;	EMPTY	EMPTY
60	1588	2	-1	0	-1	}	EMPTY	EMPTY
60	1589	2	-1	0	-1	} else {	EMPTY	EMPTY
60	1593	2	-1	1	-1	if ( device == null ) {	EMPTY	EMPTY
60	1594	2	-1	0	-1	device = pcap _ lookupdev ( ebuf ) ;	EMPTY	EMPTY
60	1595	2	-1	0	-1	if ( device == null )	EMPTY	EMPTY
60	1596	2	-1	0	-1	error (  " %s "  , ebuf ) ;	EMPTY	EMPTY
60	1597	2	-1	0	-1	}	EMPTY	EMPTY
60	1598	2	-1	0	-1	# ifdef win32	EMPTY	EMPTY
60	1603	2	-1	1	-1	if ( strlen ( device ) == numconst )	EMPTY	strlen
60	1604	2	-1	1	-1	{	EMPTY	EMPTY
60	1605	3	-1	0	-1	fprintf ( stderr  strlit  program _ name  device ) ;	program _ name	fprintf stderr
60	1606	1	0	0	-1	}	EMPTY	EMPTY
60	1607	2	-1	0	-1	else	EMPTY	EMPTY
60	1608	2	-1	0	-1	{	EMPTY	EMPTY
60	1609	2	-1	0	-1	fprintf ( stderr  strlit  program _ name  device ) ;	program _ name	fprintf stderr
60	1610	3	-1	0	-1	}	EMPTY	EMPTY
60	1612	1	1	0	-1	fflush ( stderr ) ;	EMPTY	fflush stderr
60	1613	2	-1	1	-1	# endif	EMPTY	EMPTY
60	1614	2	-1	0	-1	# ifdef have _ pcap _ create	EMPTY	EMPTY
60	1615	2	-1	0	-1	pd = pcap _ create ( device , ebuf )	EMPTY	EMPTY
60	1616	2	-1	0	-1	if ( pd == null )	EMPTY	EMPTY
60	1617	2	-1	0	-1	error (  " %s "  , ebuf )	EMPTY	EMPTY
60	1618	2	-1	0	-1	# ifdef have _ pcap _ set _ tstamp _ type	EMPTY	EMPTY
60	1619	2	-1	0	-1	if ( jflag )	jflag	EMPTY
60	1620	2	-1	0	-1	show _ tstamp _ types _ and _ exit ( device , pd )	EMPTY	EMPTY
60	1621	2	-1	0	-1	# endif	EMPTY	EMPTY
60	1622	2	-1	0	-1	# ifdef have _ pcap _ set _ tstamp _ precision	EMPTY	EMPTY
60	1623	2	-1	0	-1	status = pcap _ set _ tstamp _ precision ( pd  gndo -> ndo _ tstamp _ precision ) ;	ndo _ tstamp _ precision	EMPTY
60	1624	2	-1	0	-1	if ( status != numconst )	EMPTY	EMPTY
60	1625	2	-1	0	-1	error ( strlit	EMPTY	EMPTY
60	1626	2	-1	0	-1	device	EMPTY	EMPTY
60	1627	2	-1	0	-1	tstamp _ precision _ to _ string ( gndo -> ndo _ tstamp _ precision )	ndo _ tstamp _ precision	EMPTY
60	1628	2	-1	0	-1	pcap _ statustostr ( status ) ) ;	EMPTY	EMPTY
60	1629	3	-1	0	-1	# endif	EMPTY	EMPTY
60	1631	1	1	0	-1	# ifdef have _ pcap _ set _ immediate _ mode	EMPTY	EMPTY
60	1632	2	-1	0	-1	if ( gndo -> ndo _ immediate ) {	ndo _ immediate	EMPTY
60	1633	2	-1	0	-1	status = pcap _ set _ immediate _ mode ( pd  numconst ) ;	EMPTY	EMPTY
60	1634	2	-1	0	-1	if ( status != numconst )	EMPTY	EMPTY
60	1635	2	-1	0	-1	error ( strlit	EMPTY	EMPTY
60	1636	2	-1	0	-1	device	EMPTY	EMPTY
60	1637	2	-1	0	-1	pcap _ statustostr ( status ) ) ;	EMPTY	EMPTY
60	1638	2	-1	0	-1	}	EMPTY	EMPTY
60	1639	2	-1	0	-1	# endif	EMPTY	EMPTY
60	1643	2	-1	1	-1	if ( pcap _ can _ set _ rfmon ( pd ) == 1 )	EMPTY	EMPTY
60	1644	2	-1	0	-1	supports _ monitor _ mode = 1 ;	EMPTY	EMPTY
60	1645	2	-1	0	-1	else	EMPTY	EMPTY
60	1646	2	-1	0	-1	supports _ monitor _ mode = 0	EMPTY	EMPTY
60	1647	2	-1	0	-1	status = pcap _ set _ snaplen ( pd , snaplen )	snaplen	EMPTY
60	1648	2	-1	0	-1	if ( status != 0 )	EMPTY	EMPTY
60	1649	2	-1	0	-1	error (  " %s: can't set snapshot length: %s "  ,	EMPTY	EMPTY
60	1650	2	-1	0	-1	device , pcap _ statustostr ( status ) )	EMPTY	EMPTY
60	1651	2	-1	0	-1	status = pcap _ set _ promisc ( pd , ! pflag )	EMPTY	EMPTY
60	1652	2	-1	0	-1	if ( status != 0 )	EMPTY	EMPTY
60	1653	2	-1	0	-1	error (  " %s: can't set promiscuous mode: %s "  ,	EMPTY	EMPTY
60	1654	2	-1	0	-1	device , pcap _ statustostr ( status ) )	EMPTY	EMPTY
60	1655	2	-1	0	-1	if ( iflag ) {	EMPTY	EMPTY
60	1656	2	-1	0	-1	status = pcap _ set _ rfmon ( pd , 1 ) ;	EMPTY	EMPTY
60	1657	2	-1	0	-1	if ( status != 0 )	EMPTY	EMPTY
60	1658	2	-1	0	-1	error (  " %s: can't set monitor mode: %s "  ,	EMPTY	EMPTY
60	1659	2	-1	0	-1	device , pcap _ statustostr ( status ) ) ;	EMPTY	EMPTY
60	1660	2	-1	0	-1	}	EMPTY	EMPTY
60	1661	2	-1	0	-1	status = pcap _ set _ timeout ( pd , 1000 )	EMPTY	EMPTY
60	1662	2	-1	0	-1	if ( status != 0 )	EMPTY	EMPTY
60	1663	3	-1	0	-1	error (  " %s: pcap _ set _ timeout failed: %s "  ,	EMPTY	EMPTY
60	1664	1	1	0	-1	device , pcap _ statustostr ( status ) )	EMPTY	EMPTY
60	1665	2	-1	0	-1	if ( bflag != 0 ) {	EMPTY	EMPTY
60	1666	2	-1	0	-1	status = pcap _ set _ buffer _ size ( pd , bflag ) ;	EMPTY	EMPTY
60	1667	2	-1	0	-1	if ( status != 0 )	EMPTY	EMPTY
60	1668	2	-1	0	-1	error (  " %s: can't set buffer size: %s "  ,	EMPTY	EMPTY
60	1669	2	-1	0	-1	device , pcap _ statustostr ( status ) ) ;	EMPTY	EMPTY
60	1670	2	-1	0	-1	}	EMPTY	EMPTY
60	1671	2	-1	0	-1	# ifdef have _ pcap _ set _ tstamp _ type	EMPTY	EMPTY
60	1672	2	-1	0	-1	if ( jflag != - 1 ) {	EMPTY	EMPTY
60	1673	2	-1	0	-1	status = pcap _ set _ tstamp _ type ( pd , jflag ) ;	EMPTY	EMPTY
60	1674	2	-1	0	-1	if ( status < 0 )	EMPTY	EMPTY
60	1675	2	-1	0	-1	error (  " %s: can't set time stamp type: %s "  ,	EMPTY	time
60	1676	2	-1	0	-1	device , pcap _ statustostr ( status ) ) ;	EMPTY	EMPTY
60	1677	2	-1	0	-1	}	EMPTY	EMPTY
60	1678	2	-1	0	-1	# endif	EMPTY	EMPTY
60	1679	2	-1	0	-1	status = pcap _ activate ( pd )	EMPTY	EMPTY
60	1680	2	-1	0	-1	if ( status < numconst ) {	EMPTY	EMPTY
60	1684	2	-1	1	-1	cp = pcap _ geterr ( pd )	EMPTY	EMPTY
60	1685	2	-1	0	-1	if ( status == pcap _ error )	EMPTY	EMPTY
60	1686	2	-1	0	-1	error (  " %s "  , cp ) ;	EMPTY	EMPTY
60	1687	2	-1	0	-1	else if ( ( status == pcap _ error _ no _ such _ device ||	EMPTY	EMPTY
60	1688	2	-1	0	-1	status == pcap _ error _ perm _ denied ) &&	EMPTY	EMPTY
60	1689	2	-1	0	-1	* cp != '\0' )	EMPTY	EMPTY
60	1690	2	-1	0	-1	error (  " %s: %s\n(%s) "  , device ,	EMPTY	EMPTY
60	1691	2	-1	0	-1	pcap _ statustostr ( status ) , cp ) ;	EMPTY	EMPTY
60	1692	2	-1	0	-1	else	EMPTY	EMPTY
60	1693	2	-1	0	-1	error (  " %s: %s "  , device ,	EMPTY	EMPTY
60	1694	2	-1	0	-1	pcap _ statustostr ( status ) )	EMPTY	EMPTY
60	1695	2	-1	0	-1	if ( status > numconst ) {	EMPTY	EMPTY
60	1700	3	-1	1	-1	cp = pcap _ geterr ( pd )	EMPTY	EMPTY
60	1701	1	1	0	-1	if ( status == pcap _ warning )	EMPTY	EMPTY
60	1702	2	-1	0	-1	warning (  " %s "  , cp ) ;	EMPTY	EMPTY
60	1703	2	-1	0	-1	else if ( status == pcap _ warning _ promisc _ notsup &&	EMPTY	EMPTY
60	1704	2	-1	0	-1	* cp != '\0' )	EMPTY	EMPTY
60	1705	2	-1	0	-1	warning (  " %s: %s\n(%s) "  , device ,	EMPTY	EMPTY
60	1706	2	-1	0	-1	pcap _ statustostr ( status ) , cp ) ;	EMPTY	EMPTY
60	1707	2	-1	0	-1	else	EMPTY	EMPTY
60	1708	2	-1	0	-1	warning (  " %s: %s "  , device ,	EMPTY	EMPTY
60	1709	2	-1	0	-1	pcap _ statustostr ( status ) )	EMPTY	EMPTY
60	1710	2	-1	0	-1	}	EMPTY	EMPTY
60	1711	2	-1	0	-1	# ifdef have _ pcap _ setdirection	EMPTY	EMPTY
60	1712	2	-1	0	-1	if ( qflag != - numconst ) {	qflag	EMPTY
60	1713	2	-1	0	-1	status = pcap _ setdirection ( pd  qflag ) ;	qflag	EMPTY
60	1714	2	-1	0	-1	if ( status != numconst )	EMPTY	EMPTY
60	1715	2	-1	0	-1	error ( strlit	EMPTY	EMPTY
60	1716	2	-1	0	-1	device  pcap _ geterr ( pd ) ) ;	EMPTY	EMPTY
60	1717	2	-1	0	-1	}	EMPTY	EMPTY
60	1718	2	-1	1	-1	# endif	EMPTY	EMPTY
60	1719	3	-1	0	-1	# else	EMPTY	EMPTY
60	1721	1	1	0	-1	pd = pcap _ open _ live ( device  snaplen  ! pflag  numconst  ebuf ) ;	snaplen	EMPTY
60	1722	2	-1	0	-1	if ( pd == null )	EMPTY	EMPTY
60	1723	2	-1	0	-1	error ( strlit  ebuf ) ;	EMPTY	EMPTY
60	1724	2	-1	0	-1	else if ( * ebuf )	EMPTY	EMPTY
60	1725	2	-1	0	-1	warning ( strlit  ebuf ) ;	EMPTY	EMPTY
60	1726	2	-1	1	-1	# endif	EMPTY	EMPTY
60	1730	2	-1	1	-1	# ifndef win32	EMPTY	EMPTY
60	1731	2	-1	0	-1	if ( setgid ( getgid ( ) ) != 0 || setuid ( getuid ( ) ) != 0 )	EMPTY	setgid getgid setuid getuid
60	1732	2	-1	0	-1	fprintf ( stderr ,  " warning: setgid/setuid failed !\n "  )	EMPTY	fprintf stderr
60	1733	2	-1	1	-1	# endif	EMPTY	EMPTY
60	1734	2	-1	0	-1	# if ! defined ( have _ pcap _ create ) && defined ( win32 )	EMPTY	EMPTY
60	1735	2	-1	0	-1	if ( bflag != numconst )	EMPTY	EMPTY
60	1736	2	-1	0	-1	if ( pcap _ setbuff ( pd  bflag ) == - numconst ) {	EMPTY	EMPTY
60	1737	2	-1	0	-1	error ( strlit  pcap _ geterr ( pd ) ) ;	EMPTY	EMPTY
60	1738	2	-1	0	-1	}	EMPTY	EMPTY
60	1739	2	-1	0	-1	# endif	EMPTY	EMPTY
60	1740	2	-1	0	-1	if ( lflag )	lflag	EMPTY
60	1741	2	-1	0	-1	show _ dlts _ and _ exit ( device , pd )	EMPTY	EMPTY
60	1742	2	-1	0	-1	if ( gndo -> ndo _ dlt >= 0 ) {	ndo _ dlt	EMPTY
60	1743	2	-1	0	-1	# ifdef have _ pcap _ set _ datalink	EMPTY	EMPTY
60	1744	2	-1	0	-1	if ( pcap _ set _ datalink ( pd , gndo -> ndo _ dlt ) < 0 )	ndo _ dlt	EMPTY
60	1745	2	-1	0	-1	error (  " %s "  , pcap _ geterr ( pd ) ) ;	EMPTY	EMPTY
60	1746	2	-1	0	-1	# else	EMPTY	EMPTY
60	1747	2	-1	0	-1	/* 	EMPTY	EMPTY
60	1752	2	-1	1	-1	if ( gndo -> ndo _ dlt != pcap _ datalink ( pd ) ) {	ndo _ dlt	EMPTY
60	1753	2	-1	0	-1	error (  " %s is not one of the dlts supported by this device\n "  ,	EMPTY	EMPTY
60	1754	2	-1	0	-1	gndo -> ndo _ dltname ) ;	ndo _ dltname	EMPTY
60	1755	2	-1	0	-1	}	EMPTY	EMPTY
60	1756	2	-1	0	-1	# endif	EMPTY	EMPTY
60	1757	3	-1	0	-1	( void ) fprintf ( stderr ,  " %s: data link type %s\n "  ,	EMPTY	fprintf stderr
60	1758	1	0	0	-1	program _ name , gndo -> ndo _ dltname ) ;	program _ name ndo _ dltname	EMPTY
60	1759	2	-1	0	-1	( void ) fflush ( stderr ) ;	EMPTY	fflush stderr
60	1760	2	-1	0	-1	}	EMPTY	EMPTY
60	1761	2	-1	0	-1	i = pcap _ snapshot ( pd )	EMPTY	EMPTY
60	1762	2	-1	0	-1	if ( snaplen < i ) {	snaplen	EMPTY
60	1763	2	-1	0	-1	warning (  " snaplen raised from %d to %d "  , snaplen , i ) ;	snaplen	EMPTY
60	1764	2	-1	0	-1	snaplen = i ;	snaplen	EMPTY
60	1765	2	-1	0	-1	}	EMPTY	EMPTY
60	1766	2	-1	0	-1	if ( fflag != 0 ) {	EMPTY	EMPTY
60	1767	2	-1	0	-1	if ( pcap _ lookupnet ( device , & localnet , & netmask , ebuf ) < 0 ) {	netmask	EMPTY
60	1768	2	-1	0	-1	warning (  " foreign (-f) flag used but: %s "  , ebuf ) ;	flag	EMPTY
60	1769	2	-1	0	-1	}	EMPTY	EMPTY
60	1770	3	-1	0	-1	}	EMPTY	EMPTY
60	1772	1	0	0	-1	}	EMPTY	EMPTY
60	1773	2	-1	0	-1	if ( infile )	EMPTY	EMPTY
60	1774	2	-1	0	-1	cmdbuf = read _ infile ( infile ) ;	EMPTY	EMPTY
60	1775	2	-1	0	-1	else	EMPTY	EMPTY
60	1776	3	-1	0	-1	cmdbuf = copy _ argv ( & argv [ optind ] ) ;	optind	EMPTY
60	1778	1	0	0	0	if ( pcap _ compile ( pd  & fcode  cmdbuf  oflag  netmask ) < numconst )	netmask	EMPTY
60	1779	2	-1	0	-1	error ( strlit  pcap _ geterr ( pd ) ) ;	EMPTY	EMPTY
60	1780	2	-1	0	-1	if ( dflag ) {	dflag	EMPTY
60	1781	2	-1	0	-1	bpf _ dump ( & fcode  dflag ) ;	dflag	EMPTY
60	1782	2	-1	0	-1	pcap _ close ( pd ) ;	EMPTY	EMPTY
60	1783	2	-1	0	-1	free ( cmdbuf ) ;	EMPTY	free
60	1784	2	-1	0	-1	exit ( numconst ) ;	EMPTY	exit
60	1785	2	-1	0	-1	}	EMPTY	EMPTY
60	1786	2	-1	0	-1	init _ addrtoname ( gndo  localnet  netmask ) ;	netmask	EMPTY
60	1787	3	-1	0	-1	init _ checksum ( ) ;	init _ checksum	EMPTY
60	1789	1	1	0	-1	# ifndef win32	EMPTY	EMPTY
60	1790	2	-1	0	-1	( void ) setsignal ( sigpipe  cleanup ) ;	cleanup	EMPTY
60	1791	2	-1	0	-1	( void ) setsignal ( sigterm  cleanup ) ;	cleanup	EMPTY
60	1792	2	-1	0	-1	( void ) setsignal ( sigint  cleanup ) ;	cleanup	EMPTY
60	1793	2	-1	1	-1	# endif	EMPTY	EMPTY
60	1794	2	-1	0	-1	# if defined ( have _ fork ) || defined ( have _ vfork )	EMPTY	EMPTY
60	1795	2	-1	0	-1	( void ) setsignal ( sigchld , child _ cleanup )	EMPTY	EMPTY
60	1796	2	-1	0	-1	# endif	EMPTY	EMPTY
60	1798	2	-1	1	-1	# ifndef win32	EMPTY	EMPTY
60	1799	2	-1	0	-1	if ( ( oldhandler = setsignal ( sighup , cleanup ) ) != sig _ dfl )	cleanup	EMPTY
60	1800	2	-1	0	-1	( void ) setsignal ( sighup , oldhandler )	EMPTY	EMPTY
60	1801	3	-1	1	-1	# endif	EMPTY	EMPTY
60	1803	1	0	0	-1	# ifndef win32	EMPTY	EMPTY
60	1822	1	1	1	1	if ( getuid ( ) == numconst || geteuid ( ) == numconst ) {	EMPTY	getuid geteuid
60	1823	2	-1	0	-1	# ifdef have _ libcap _ ng	EMPTY	EMPTY
60	1825	2	-1	1	-1	capng _ clear ( capng _ select _ both ) ;	EMPTY	EMPTY
60	1826	2	-1	0	-1	if ( username ) {	EMPTY	EMPTY
60	1827	2	-1	0	-1	capng _ updatev (	EMPTY	EMPTY
60	1828	2	-1	0	-1	capng _ add	EMPTY	EMPTY
60	1829	2	-1	0	-1	capng _ permitted | capng _ effective	EMPTY	EMPTY
60	1830	2	-1	0	-1	cap _ setuid	EMPTY	EMPTY
60	1831	2	-1	0	-1	cap _ setgid	EMPTY	EMPTY
60	1832	2	-1	0	-1	- numconst ) ;	EMPTY	EMPTY
60	1833	3	-1	0	-1	}	EMPTY	EMPTY
60	1835	1	0	0	-1	if ( wfilename ) {	EMPTY	EMPTY
60	1836	2	-1	0	-1	capng _ update (	EMPTY	EMPTY
60	1837	2	-1	0	-1	capng _ add	EMPTY	EMPTY
60	1838	2	-1	0	-1	capng _ permitted | capng _ effective	EMPTY	EMPTY
60	1839	2	-1	0	-1	cap _ dac _ override	EMPTY	EMPTY
60	1840	2	-1	0	-1	) ;	EMPTY	EMPTY
60	1841	2	-1	0	-1	}	EMPTY	EMPTY
60	1842	2	-1	0	-1	capng _ apply ( capng _ select _ both ) ;	EMPTY	EMPTY
60	1843	2	-1	0	-1	# endif	EMPTY	EMPTY
60	1844	2	-1	0	-1	if ( username || chroot _ dir )	EMPTY	EMPTY
60	1845	3	-1	0	-1	droproot ( username , chroot _ dir )	droproot	EMPTY
60	1847	1	1	0	-1	}	EMPTY	EMPTY
60	1848	3	-1	1	-1	# endif	EMPTY	EMPTY
60	1850	1	0	0	0	if ( pcap _ setfilter ( pd , & fcode ) < 0 )	EMPTY	EMPTY
60	1851	2	-1	0	-1	error (  " %s "  , pcap _ geterr ( pd ) )	EMPTY	EMPTY
60	1852	2	-1	0	-1	# ifdef have _ capsicum	EMPTY	EMPTY
60	1853	2	-1	0	-1	if ( rfilename == null && vfilename == null ) {	EMPTY	EMPTY
60	1854	3	-1	0	-1	static const unsigned long cmds [ ] = { biocgstats } ;	EMPTY	EMPTY
60	1856	1	1	0	-1	cap _ rights _ init ( & rights  cap _ ioctl  cap _ read ) ;	EMPTY	EMPTY
60	1857	2	-1	0	-1	if ( cap _ rights _ limit ( pcap _ fileno ( pd )  & rights ) < numconst &&	EMPTY	EMPTY
60	1858	2	-1	0	-1	errno != enosys ) {	EMPTY	EMPTY
60	1859	2	-1	0	-1	error ( strlit ) ;	EMPTY	EMPTY
60	1860	2	-1	0	-1	}	EMPTY	EMPTY
60	1861	2	-1	0	-1	if ( cap _ ioctls _ limit ( pcap _ fileno ( pd )  cmds	EMPTY	EMPTY
60	1862	2	-1	0	-1	sizeof ( cmds ) / sizeof ( cmds [ numconst ] ) ) < numconst && errno != enosys ) {	EMPTY	EMPTY
60	1863	2	-1	0	-1	error ( strlit ) ;	EMPTY	EMPTY
60	1864	2	-1	0	-1	}	EMPTY	EMPTY
60	1865	2	-1	0	-1	}	EMPTY	EMPTY
60	1866	2	-1	0	-1	# endif	EMPTY	EMPTY
60	1867	2	-1	0	-1	if ( wfilename ) {	EMPTY	EMPTY
60	1868	2	-1	0	-1	pcap _ dumper _ t * p ;	EMPTY	EMPTY
60	1870	3	-1	1	-1	dumpinfo . currentfilename = ( char * ) malloc ( path _ max + 1 )	EMPTY	malloc
60	1872	1	0	0	0	if ( dumpinfo . currentfilename == null )	EMPTY	EMPTY
60	1873	3	-1	0	-1	error (  " malloc of dumpinfo.currentfilename "  )	EMPTY	EMPTY
60	1876	1	1	1	1	if ( cflag != 0 )	EMPTY	EMPTY
60	1877	2	-1	0	-1	makefilename ( dumpinfo . currentfilename , wfilename , 0 , wflagchars ) ;	EMPTY	EMPTY
60	1878	2	-1	0	-1	else	EMPTY	EMPTY
60	1879	3	-1	0	-1	makefilename ( dumpinfo . currentfilename , wfilename , 0 , 0 )	EMPTY	EMPTY
60	1881	1	1	0	-1	p = pcap _ dump _ open ( pd , dumpinfo . currentfilename )	EMPTY	EMPTY
60	1882	2	-1	0	-1	# ifdef have _ libcap _ ng	EMPTY	EMPTY
60	1887	2	-1	1	-1	capng _ update (	EMPTY	EMPTY
60	1888	2	-1	0	-1	capng _ drop	EMPTY	EMPTY
60	1889	2	-1	0	-1	( cflag || gflag ? numconst : capng _ permitted )	EMPTY	EMPTY
60	1890	2	-1	0	-1	| capng _ effective	EMPTY	EMPTY
60	1891	2	-1	0	-1	cap _ dac _ override	EMPTY	EMPTY
60	1892	2	-1	0	-1	) ;	EMPTY	EMPTY
60	1893	2	-1	0	-1	capng _ apply ( capng _ select _ both ) ;	EMPTY	EMPTY
60	1894	2	-1	0	-1	# endif	EMPTY	EMPTY
60	1895	2	-1	0	-1	if ( p == null )	EMPTY	EMPTY
60	1896	2	-1	0	-1	error (  " %s "  , pcap _ geterr ( pd ) )	EMPTY	EMPTY
60	1897	2	-1	0	-1	# ifdef have _ capsicum	EMPTY	EMPTY
60	1898	2	-1	0	-1	set _ dumper _ capsicum _ rights ( p ) ;	EMPTY	EMPTY
60	1899	2	-1	0	-1	# endif	EMPTY	EMPTY
60	1900	2	-1	0	-1	if ( cflag != numconst || gflag != numconst ) {	EMPTY	EMPTY
60	1901	2	-1	0	-1	# ifdef have _ capsicum	EMPTY	EMPTY
60	1902	2	-1	0	-1	dumpinfo . wfilename = strdup ( basename ( wfilename ) ) ;	EMPTY	strdup
60	1903	2	-1	0	-1	dumpinfo . dirfd = open ( dirname ( wfilename )	EMPTY	EMPTY
60	1904	2	-1	0	-1	o _ directory | o _ rdonly ) ;	EMPTY	EMPTY
60	1905	2	-1	0	-1	if ( dumpinfo . dirfd < numconst ) {	EMPTY	EMPTY
60	1906	2	-1	0	-1	error ( strlit	EMPTY	EMPTY
60	1907	2	-1	0	-1	dirname ( wfilename ) ) ;	EMPTY	EMPTY
60	1908	2	-1	0	-1	}	EMPTY	EMPTY
60	1909	2	-1	0	-1	cap _ rights _ init ( & rights  cap _ create  cap _ fcntl	EMPTY	EMPTY
60	1910	2	-1	0	-1	cap _ ftruncate  cap _ lookup  cap _ seek  cap _ write ) ;	EMPTY	EMPTY
60	1911	2	-1	0	-1	if ( cap _ rights _ limit ( dumpinfo . dirfd  & rights ) < numconst &&	EMPTY	EMPTY
60	1912	2	-1	0	-1	errno != enosys ) {	EMPTY	EMPTY
60	1913	2	-1	0	-1	error ( strlit ) ;	EMPTY	EMPTY
60	1914	3	-1	0	-1	}	EMPTY	EMPTY
60	1915	1	1	0	-1	if ( cap _ fcntls _ limit ( dumpinfo . dirfd  cap _ fcntl _ getfl ) < numconst &&	EMPTY	EMPTY
60	1916	2	-1	0	-1	errno != enosys ) {	EMPTY	EMPTY
60	1917	2	-1	0	-1	error ( strlit ) ;	EMPTY	EMPTY
60	1918	2	-1	0	-1	}	EMPTY	EMPTY
60	1919	2	-1	1	-1	# else	EMPTY	EMPTY
60	1920	2	-1	0	-1	dumpinfo . wfilename = wfilename	EMPTY	EMPTY
60	1921	2	-1	0	-1	# endif	EMPTY	EMPTY
60	1922	2	-1	0	-1	callback = dump _ packet _ and _ trunc	EMPTY	EMPTY
60	1923	2	-1	0	-1	dumpinfo . pd = pd	EMPTY	EMPTY
60	1924	2	-1	0	-1	dumpinfo . p = p	EMPTY	EMPTY
60	1925	2	-1	0	-1	pcap _ userdata = ( u _ char * ) & dumpinfo	EMPTY	EMPTY
60	1926	2	-1	0	-1	} else {	EMPTY	EMPTY
60	1927	2	-1	0	-1	callback = dump _ packet ;	EMPTY	EMPTY
60	1928	2	-1	0	-1	pcap _ userdata = ( u _ char * ) p ;	EMPTY	EMPTY
60	1929	2	-1	0	-1	}	EMPTY	EMPTY
60	1930	2	-1	0	-1	# ifdef have _ pcap _ dump _ flush	EMPTY	EMPTY
60	1931	2	-1	0	-1	if ( uflag )	EMPTY	EMPTY
60	1932	2	-1	0	-1	pcap _ dump _ flush ( p ) ;	EMPTY	EMPTY
60	1933	2	-1	0	-1	# endif	EMPTY	EMPTY
60	1934	2	-1	0	-1	} else {	EMPTY	EMPTY
60	1935	2	-1	0	-1	type = pcap _ datalink ( pd ) ;	EMPTY	EMPTY
60	1936	2	-1	0	-1	printinfo = get _ print _ info ( type ) ;	EMPTY	EMPTY
60	1937	2	-1	0	-1	callback = print _ packet ;	EMPTY	EMPTY
60	1938	2	-1	0	-1	pcap _ userdata = ( u _ char * ) & printinfo ;	EMPTY	EMPTY
60	1939	3	-1	0	-1	}	EMPTY	EMPTY
60	1941	1	0	0	-1	# ifdef signal _ req _ info	EMPTY	EMPTY
60	1946	1	0	0	-1	if ( rfilename == null )	EMPTY	EMPTY
60	1947	2	-1	0	-1	( void ) setsignal ( signal _ req _ info , requestinfo )	EMPTY	EMPTY
60	1948	3	-1	0	-1	# endif	EMPTY	EMPTY
60	1950	1	1	0	1	if ( vflag > numconst && wfilename ) {	EMPTY	EMPTY
60	1956	2	-1	1	-1	# ifdef use _ win32 _ mm _ timer	EMPTY	EMPTY
60	1958	2	-1	1	-1	timer _ id = timesetevent ( numconst  numconst  verbose _ stats _ dump  numconst  time _ periodic ) ;	EMPTY	EMPTY
60	1959	2	-1	0	-1	setvbuf ( stderr  null   _ ionbf  numconst ) ;	EMPTY	stderr
60	1960	2	-1	0	-1	# elif defined ( have _ alarm )	EMPTY	EMPTY
60	1961	2	-1	0	-1	( void ) setsignal ( sigalrm , verbose _ stats _ dump )	EMPTY	EMPTY
60	1962	2	-1	0	-1	alarm ( 1 )	EMPTY	alarm
60	1963	2	-1	0	-1	# endif	EMPTY	EMPTY
60	1964	3	-1	0	-1	}	EMPTY	EMPTY
60	1966	1	1	0	-1	# ifndef win32	EMPTY	EMPTY
60	1967	2	-1	0	-1	if ( rfilename == null ) {	EMPTY	EMPTY
60	1973	2	-1	1	-1	if ( ! vflag && ! wfilename ) {	EMPTY	EMPTY
60	1974	2	-1	0	-1	( void ) fprintf ( stderr ,	EMPTY	fprintf stderr
60	1975	2	-1	0	-1	" %s: verbose output suppressed, use -v or -vv for full protocol decode\n "  ,	verbose	EMPTY
60	1976	2	-1	0	-1	program _ name ) ;	program _ name	EMPTY
60	1977	2	-1	0	-1	} else	EMPTY	EMPTY
60	1978	2	-1	0	-1	( void ) fprintf ( stderr ,  " %s:  "  , program _ name )	program _ name	fprintf stderr
60	1979	2	-1	0	-1	dlt = pcap _ datalink ( pd )	EMPTY	EMPTY
60	1980	2	-1	0	-1	dlt _ name = pcap _ datalink _ val _ to _ name ( dlt )	EMPTY	EMPTY
60	1981	2	-1	0	-1	if ( dlt _ name == null ) {	EMPTY	EMPTY
60	1982	2	-1	0	-1	( void ) fprintf ( stderr ,  " listening on %s, link-type %u, capture size %u bytes\n "  ,	EMPTY	fprintf stderr
60	1983	2	-1	0	-1	device , dlt , snaplen ) ;	snaplen	EMPTY
60	1984	2	-1	0	-1	} else {	EMPTY	EMPTY
60	1985	2	-1	0	-1	( void ) fprintf ( stderr ,  " listening on %s, link-type %s (%s), capture size %u bytes\n "  ,	EMPTY	fprintf stderr
60	1986	2	-1	0	-1	device , dlt _ name ,	EMPTY	EMPTY
60	1987	2	-1	0	-1	pcap _ datalink _ val _ to _ description ( dlt ) , snaplen ) ;	snaplen	EMPTY
60	1988	2	-1	0	-1	}	EMPTY	EMPTY
60	1989	2	-1	0	-1	( void ) fflush ( stderr )	EMPTY	fflush stderr
60	1990	2	-1	0	-1	}	EMPTY	EMPTY
60	1991	3	-1	1	-1	# endif	EMPTY	EMPTY
60	1993	1	1	0	-1	# ifdef have _ capsicum	EMPTY	EMPTY
60	1994	2	-1	0	-1	cansandbox = ( nflag && vfilename == null && zflag == null ) ;	zflag	EMPTY
60	1995	2	-1	0	-1	if ( cansandbox && cap _ enter ( ) < numconst && errno != enosys )	EMPTY	EMPTY
60	1996	2	-1	0	-1	error ( strlit ) ;	EMPTY	EMPTY
60	1997	2	-1	0	-1	if ( cap _ sandboxed ( ) )	EMPTY	EMPTY
60	1998	2	-1	0	-1	fprintf ( stderr  strlit ) ;	EMPTY	fprintf stderr
60	1999	3	-1	1	-1	# endif	EMPTY	EMPTY
60	2001	1	1	0	-1	do {	EMPTY	EMPTY
60	2002	2	-1	0	-1	status = pcap _ loop ( pd , cnt , callback , pcap _ userdata )	EMPTY	EMPTY
60	2003	2	-1	0	-1	if ( wfilename == null ) {	EMPTY	EMPTY
60	2008	2	-1	1	-1	if ( status == - numconst ) {	EMPTY	EMPTY
60	2014	2	-1	1	-1	putchar ( '\n' )	EMPTY	putchar
60	2015	2	-1	0	-1	}	EMPTY	EMPTY
60	2016	2	-1	0	-1	( void ) fflush ( stdout ) ;	EMPTY	fflush stdout
60	2017	2	-1	0	-1	}	EMPTY	EMPTY
60	2018	2	-1	0	-1	if ( status == - numconst ) {	EMPTY	EMPTY
60	2023	2	-1	1	-1	vfilename = null ;	EMPTY	EMPTY
60	2024	2	-1	0	-1	ret = null ;	EMPTY	EMPTY
60	2025	2	-1	0	-1	}	EMPTY	EMPTY
60	2026	2	-1	0	-1	if ( status == - numconst ) {	EMPTY	EMPTY
60	2030	2	-1	1	-1	( void ) fprintf ( stderr ,  " %s: pcap _ loop: %s\n "  ,	EMPTY	fprintf stderr
60	2031	2	-1	0	-1	program _ name , pcap _ geterr ( pd ) )	program _ name	EMPTY
60	2032	2	-1	0	-1	}	EMPTY	EMPTY
60	2033	2	-1	0	-1	if ( rfilename == null ) {	EMPTY	EMPTY
60	2038	2	-1	1	-1	info ( 1 )	EMPTY	EMPTY
60	2039	2	-1	0	-1	}	EMPTY	EMPTY
60	2040	2	-1	0	-1	pcap _ close ( pd ) ;	EMPTY	EMPTY
60	2041	2	-1	0	-1	if ( vfilename != null ) {	EMPTY	EMPTY
60	2042	2	-1	0	-1	ret = get _ next _ file ( vfile  vfileline ) ;	EMPTY	EMPTY
60	2043	2	-1	0	-1	if ( ret ) {	EMPTY	EMPTY
60	2044	2	-1	0	-1	rfilename = vfileline ;	EMPTY	EMPTY
60	2045	2	-1	0	-1	pd = pcap _ open _ offline ( rfilename  ebuf ) ;	EMPTY	EMPTY
60	2046	2	-1	0	-1	if ( pd == null )	EMPTY	EMPTY
60	2047	2	-1	0	-1	error ( strlit  ebuf ) ;	EMPTY	EMPTY
60	2048	2	-1	0	-1	# ifdef have _ capsicum	EMPTY	EMPTY
60	2049	2	-1	0	-1	cap _ rights _ init ( & rights  cap _ read ) ;	EMPTY	EMPTY
60	2050	3	-1	0	-1	if ( cap _ rights _ limit ( fileno ( pcap _ file ( pd ) )	pcap _ file	EMPTY
60	2051	1	0	0	-1	& rights ) < numconst && errno != enosys ) {	EMPTY	EMPTY
60	2052	2	-1	0	-1	error ( strlit ) ;	EMPTY	EMPTY
60	2053	2	-1	0	-1	}	EMPTY	EMPTY
60	2054	2	-1	0	-1	# endif	EMPTY	EMPTY
60	2055	2	-1	0	-1	new _ dlt = pcap _ datalink ( pd ) ;	EMPTY	EMPTY
60	2056	2	-1	0	-1	if ( wfilename && new _ dlt != dlt )	EMPTY	EMPTY
60	2057	2	-1	0	-1	error ( strlit  rfilename ) ;	EMPTY	EMPTY
60	2058	2	-1	0	-1	printinfo = get _ print _ info ( new _ dlt ) ;	EMPTY	EMPTY
60	2059	2	-1	0	-1	dlt _ name = pcap _ datalink _ val _ to _ name ( new _ dlt ) ;	EMPTY	EMPTY
60	2060	2	-1	0	-1	if ( dlt _ name == null ) {	EMPTY	EMPTY
60	2061	2	-1	0	-1	fprintf ( stderr  strlit	EMPTY	fprintf stderr
60	2062	2	-1	0	-1	rfilename  new _ dlt ) ;	EMPTY	EMPTY
60	2063	2	-1	0	-1	}	EMPTY	EMPTY
60	2064	2	-1	0	-1	fprintf ( stderr	EMPTY	fprintf stderr
60	2065	2	-1	0	-1	strlit	EMPTY	EMPTY
60	2066	2	-1	0	-1	rfilename  dlt _ name	EMPTY	EMPTY
60	2067	2	-1	0	-1	pcap _ datalink _ val _ to _ description ( new _ dlt ) ) ;	EMPTY	EMPTY
60	2068	2	-1	0	-1	}	EMPTY	EMPTY
60	2069	2	-1	0	-1	if ( pcap _ compile ( pd  & fcode  cmdbuf  oflag  netmask ) < numconst )	netmask	EMPTY
60	2070	2	-1	0	-1	error ( strlit  pcap _ geterr ( pd ) ) ;	EMPTY	EMPTY
60	2071	2	-1	0	-1	if ( pcap _ setfilter ( pd  & fcode ) < numconst )	EMPTY	EMPTY
60	2072	2	-1	0	-1	error ( strlit  pcap _ geterr ( pd ) ) ;	EMPTY	EMPTY
60	2073	2	-1	0	-1	}	EMPTY	EMPTY
60	2074	2	-1	0	-1	}	EMPTY	EMPTY
60	2075	2	-1	0	-1	}	EMPTY	EMPTY
60	2076	3	-1	0	-1	while ( ret != null ) ;	EMPTY	EMPTY
60	2078	1	0	0	0	free ( cmdbuf ) ;	EMPTY	free
60	2079	2	-1	0	-1	exit ( status == - numconst ? numconst : numconst ) ;	EMPTY	exit
60	2080	3	-1	0	-1	}	EMPTY	EMPTY
60	2083	1	0	0	-1	static retsigtype	EMPTY	EMPTY
60	2084	2	-1	0	-1	cleanup ( int signo  _ u _  )	cleanup	EMPTY
60	2085	2	-1	0	-1	{	EMPTY	EMPTY
60	2086	2	-1	0	-1	# ifdef use _ win32 _ mm _ timer	EMPTY	EMPTY
60	2087	2	-1	0	-1	if ( timer _ id )	EMPTY	EMPTY
60	2088	2	-1	0	-1	timekillevent ( timer _ id ) ;	EMPTY	EMPTY
60	2089	2	-1	0	-1	timer _ id = numconst ;	EMPTY	EMPTY
60	2090	2	-1	0	-1	# elif defined ( have _ alarm )	EMPTY	EMPTY
60	2091	2	-1	0	-1	alarm ( 0 )	EMPTY	alarm
60	2092	3	-1	0	-1	# endif	EMPTY	EMPTY
60	2094	1	0	0	-1	# ifdef have _ pcap _ breakloop	EMPTY	EMPTY
60	2101	1	1	0	-1	pcap _ breakloop ( pd )	EMPTY	EMPTY
60	2102	2	-1	0	-1	# else	EMPTY	EMPTY
60	2109	2	-1	1	-1	if ( pd != null && pcap _ file ( pd ) == null ) {	pcap _ file	EMPTY
60	2115	2	-1	1	-1	putchar ( '\\n' ) ;	EMPTY	putchar
60	2116	2	-1	0	-1	( void ) fflush ( stdout ) ;	EMPTY	fflush stdout
60	2117	2	-1	0	-1	info ( numconst ) ;	EMPTY	EMPTY
60	2118	2	-1	0	-1	}	EMPTY	EMPTY
60	2119	2	-1	0	-1	exit ( numconst ) ;	EMPTY	exit
60	2120	2	-1	0	-1	# endif	EMPTY	EMPTY
60	2121	3	-1	0	-1	}	EMPTY	EMPTY
60	2127	1	1	1	1	# if defined ( have _ fork ) || defined ( have _ vfork	EMPTY	EMPTY
60	2128	2	-1	0	-1	static retsigtype	EMPTY	EMPTY
60	2129	2	-1	0	-1	child _ cleanup ( int signo  _ u _  )	EMPTY	EMPTY
60	2130	2	-1	0	-1	{	EMPTY	EMPTY
60	2131	2	-1	0	-1	wait ( null )	EMPTY	wait
60	2132	2	-1	0	-1	}	EMPTY	EMPTY
60	2133	3	-1	1	-1	# endif	EMPTY	EMPTY
60	2135	1	0	0	-1	static void	EMPTY	EMPTY
60	2136	2	-1	0	-1	info ( register int verbose )	verbose	EMPTY
60	2137	2	-1	0	-1	{	EMPTY	EMPTY
60	2138	3	-1	0	-1	struct pcap _ stat stat ;	pcap _ stat	EMPTY
60	2144	1	1	1	-1	stat . ps _ ifdrop = 0	ps _ ifdrop	EMPTY
60	2145	2	-1	0	-1	if ( pcap _ stats ( pd , & stat ) < 0 ) {	EMPTY	EMPTY
60	2146	2	-1	0	-1	( void ) fprintf ( stderr ,  " pcap _ stats: %s\n "  , pcap _ geterr ( pd ) ) ;	EMPTY	fprintf stderr
60	2147	2	-1	0	-1	infoprint = 0 ;	EMPTY	EMPTY
60	2148	2	-1	0	-1	return ;	EMPTY	EMPTY
60	2149	3	-1	0	-1	}	EMPTY	EMPTY
60	2151	1	0	0	0	if ( ! verbose )	verbose	EMPTY
60	2152	3	-1	0	-1	fprintf ( stderr ,  " %s:  "  , program _ name )	program _ name	fprintf stderr
60	2154	1	0	0	-1	( void ) fprintf ( stderr ,  " %u packet%s captured "  , packets _ captured ,	EMPTY	fprintf stderr
60	2155	2	-1	0	-1	plural _ suffix ( packets _ captured ) )	EMPTY	EMPTY
60	2156	2	-1	0	-1	if ( ! verbose )	verbose	EMPTY
60	2157	2	-1	0	-1	fputs (  " ,  "  , stderr ) ;	EMPTY	fputs stderr
60	2158	2	-1	0	-1	else	EMPTY	EMPTY
60	2159	2	-1	0	-1	putc ( '\n' , stderr )	EMPTY	putc stderr
60	2160	2	-1	0	-1	( void ) fprintf ( stderr ,  " %u packet%s received by filter "  , stat . ps _ recv ,	ps _ recv	fprintf stderr
60	2161	2	-1	0	-1	plural _ suffix ( stat . ps _ recv ) )	ps _ recv	EMPTY
60	2162	2	-1	0	-1	if ( ! verbose )	verbose	EMPTY
60	2163	2	-1	0	-1	fputs (  " ,  "  , stderr ) ;	EMPTY	fputs stderr
60	2164	2	-1	0	-1	else	EMPTY	EMPTY
60	2165	2	-1	0	-1	putc ( '\n' , stderr )	EMPTY	putc stderr
60	2166	2	-1	0	-1	( void ) fprintf ( stderr ,  " %u packet%s dropped by kernel "  , stat . ps _ drop ,	ps _ drop	fprintf stderr
60	2167	2	-1	0	-1	plural _ suffix ( stat . ps _ drop ) )	ps _ drop	EMPTY
60	2168	2	-1	0	-1	if ( stat . ps _ ifdrop != 0 ) {	ps _ ifdrop	EMPTY
60	2169	2	-1	0	-1	if ( ! verbose )	verbose	EMPTY
60	2170	2	-1	0	-1	fputs (  " ,  "  , stderr ) ;	EMPTY	fputs stderr
60	2171	2	-1	0	-1	else	EMPTY	EMPTY
60	2172	2	-1	0	-1	putc ( '\n' , stderr ) ;	EMPTY	putc stderr
60	2173	2	-1	0	-1	( void ) fprintf ( stderr ,  " %u packet%s dropped by interface\n "  ,	EMPTY	fprintf stderr
60	2174	2	-1	0	-1	stat . ps _ ifdrop , plural _ suffix ( stat . ps _ ifdrop ) ) ;	ps _ ifdrop ps _ ifdrop	EMPTY
60	2175	2	-1	0	-1	} else	EMPTY	EMPTY
60	2176	2	-1	0	-1	putc ( '\n' , stderr )	EMPTY	putc stderr
60	2177	2	-1	0	-1	infoprint = 0	EMPTY	EMPTY
60	2178	3	-1	0	-1	}	EMPTY	EMPTY
60	2180	1	1	0	1	# if defined ( have _ fork ) || defined ( have _ vfork	EMPTY	EMPTY
60	2181	2	-1	0	-1	static void	EMPTY	EMPTY
60	2182	2	-1	0	-1	compress _ savefile ( const char * filename )	EMPTY	EMPTY
60	2183	2	-1	0	-1	{	EMPTY	EMPTY
60	2184	2	-1	0	-1	# ifdef have _ fork	EMPTY	EMPTY
60	2185	2	-1	0	-1	if ( fork ( ) )	EMPTY	fork
60	2186	2	-1	0	-1	# else	EMPTY	EMPTY
60	2187	2	-1	0	-1	if ( vfork ( ) )	EMPTY	EMPTY
60	2188	2	-1	0	-1	# endif	EMPTY	EMPTY
60	2189	2	-1	0	-1	return ;	EMPTY	EMPTY
60	2193	2	-1	1	-1	# ifdef nzero	EMPTY	EMPTY
60	2194	2	-1	0	-1	setpriority ( prio _ process  numconst  nzero - numconst ) ;	EMPTY	setpriority
60	2195	2	-1	0	-1	# else	EMPTY	EMPTY
60	2196	2	-1	0	-1	setpriority ( prio _ process , 0 , 19 )	EMPTY	setpriority
60	2197	2	-1	0	-1	# endif	EMPTY	EMPTY
60	2198	2	-1	0	-1	if ( execlp ( zflag , zflag , filename , ( char * ) null ) == - 1 )	zflag zflag	execlp
60	2199	2	-1	0	-1	fprintf ( stderr ,	EMPTY	fprintf stderr
60	2200	2	-1	0	-1	" compress _ savefile:execlp(%s, %s): %s\n "  ,	EMPTY	EMPTY
60	2201	2	-1	0	-1	zflag ,	zflag	EMPTY
60	2202	2	-1	0	-1	filename ,	EMPTY	EMPTY
60	2203	2	-1	0	-1	strerror ( errno ) )	EMPTY	strerror
60	2204	2	-1	0	-1	# ifdef have _ fork	EMPTY	EMPTY
60	2205	2	-1	0	-1	exit ( 1 )	EMPTY	exit
60	2206	2	-1	0	-1	# else	EMPTY	EMPTY
60	2207	2	-1	0	-1	_ exit ( numconst ) ;	EMPTY	EMPTY
60	2208	2	-1	0	-1	# endif	EMPTY	EMPTY
60	2209	2	-1	0	-1	}	EMPTY	EMPTY
60	2210	2	-1	1	-1	# else	EMPTY	EMPTY
60	2211	2	-1	0	-1	static void	EMPTY	EMPTY
60	2212	3	-1	0	-1	compress _ savefile ( const char * filename )	EMPTY	EMPTY
60	2213	1	1	0	-1	{	EMPTY	EMPTY
60	2214	2	-1	0	-1	fprintf ( stderr	EMPTY	fprintf stderr
60	2215	2	-1	0	-1	strlit ) ;	EMPTY	EMPTY
60	2216	2	-1	0	-1	}	EMPTY	EMPTY
60	2217	3	-1	1	-1	# endif	EMPTY	EMPTY
60	2219	1	0	0	-1	static void	EMPTY	EMPTY
60	2220	2	-1	0	-1	dump _ packet _ and _ trunc ( u _ char * user  const struct pcap _ pkthdr * h  const u _ char * sp )	pcap _ pkthdr	EMPTY
60	2221	2	-1	0	-1	{	EMPTY	EMPTY
60	2222	3	-1	0	-1	struct dump _ info * dump _ info ;	EMPTY	EMPTY
60	2224	1	0	0	-1	++ packets _ captured	EMPTY	EMPTY
60	2226	1	0	0	-1	++ infodelay	EMPTY	EMPTY
60	2228	1	0	0	-1	dump _ info = ( struct dump _ info * ) user	EMPTY	EMPTY
60	2238	1	1	0	-1	if ( gflag != numconst ) {	EMPTY	EMPTY
60	2240	3	-1	1	-1	time _ t t ;	t	EMPTY
60	2243	1	1	1	1	if ( ( t = time ( null ) ) == ( time _ t ) - 1 ) {	t	time
60	2244	2	-1	0	-1	error (  " dump _ and _ trunc _ packet: can't get current _ time: %s "  ,	EMPTY	EMPTY
60	2245	2	-1	0	-1	pcap _ strerror ( errno ) ) ;	EMPTY	EMPTY
60	2246	3	-1	0	-1	}	EMPTY	EMPTY
60	2250	1	1	1	1	if ( t - gflag _ time >= gflag ) {	t	EMPTY
60	2251	2	-1	0	-1	# ifdef have _ capsicum	EMPTY	EMPTY
60	2252	2	-1	0	-1	file * fp ;	EMPTY	EMPTY
60	2253	2	-1	0	-1	int fd ;	EMPTY	EMPTY
60	2254	3	-1	0	-1	# endif	EMPTY	EMPTY
60	2257	1	1	1	-1	gflag _ time = t ;	t	EMPTY
60	2259	2	-1	1	-1	gflag _ count ++ ;	EMPTY	EMPTY
60	2263	3	-1	1	-1	pcap _ dump _ close ( dump _ info -> p )	EMPTY	EMPTY
60	2268	1	1	1	1	if ( zflag != null )	zflag	EMPTY
60	2269	3	-1	0	-1	compress _ savefile ( dump _ info -> currentfilename )	EMPTY	EMPTY
60	2275	1	1	1	1	if ( cflag == numconst && wflag > numconst && gflag _ count >= wflag ) {	EMPTY	EMPTY
60	2276	2	-1	0	-1	( void ) fprintf ( stderr ,  " maximum file limit reached: %d\n "  ,	EMPTY	fprintf stderr
60	2277	2	-1	0	-1	wflag )	EMPTY	EMPTY
60	2278	2	-1	0	-1	exit ( 0 )	EMPTY	exit
60	2280	2	-1	1	-1	}	EMPTY	EMPTY
60	2281	2	-1	0	-1	if ( dump _ info -> currentfilename != null )	EMPTY	EMPTY
60	2282	2	-1	0	-1	free ( dump _ info -> currentfilename ) ;	EMPTY	free
60	2284	2	-1	1	-1	dump _ info -> currentfilename = ( char * ) malloc ( path _ max + 1 )	EMPTY	malloc
60	2285	2	-1	0	-1	if ( dump _ info -> currentfilename == null )	EMPTY	EMPTY
60	2286	2	-1	0	-1	error (  " dump _ packet _ and _ trunc: malloc "  )	EMPTY	EMPTY
60	2292	3	-1	1	-1	cflag _ count = numconst ;	EMPTY	EMPTY
60	2299	1	1	1	1	if ( cflag != 0 )	EMPTY	EMPTY
60	2300	2	-1	0	-1	makefilename ( dump _ info -> currentfilename , dump _ info -> wfilename , 0 ,	EMPTY	EMPTY
60	2301	2	-1	0	-1	wflagchars ) ;	EMPTY	EMPTY
60	2302	2	-1	0	-1	else	EMPTY	EMPTY
60	2303	3	-1	0	-1	makefilename ( dump _ info -> currentfilename , dump _ info -> wfilename , 0 , 0 )	EMPTY	EMPTY
60	2305	1	1	0	-1	# ifdef have _ libcap _ ng	EMPTY	EMPTY
60	2306	2	-1	0	-1	capng _ update ( capng _ add  capng _ effective  cap _ dac _ override ) ;	EMPTY	EMPTY
60	2307	2	-1	0	-1	capng _ apply ( capng _ select _ both ) ;	EMPTY	EMPTY
60	2308	2	-1	1	-1	# endif	EMPTY	EMPTY
60	2309	2	-1	0	-1	# ifdef have _ capsicum	EMPTY	EMPTY
60	2310	2	-1	0	-1	fd = openat ( dump _ info -> dirfd	EMPTY	EMPTY
60	2311	2	-1	0	-1	dump _ info -> currentfilename	EMPTY	EMPTY
60	2312	2	-1	0	-1	o _ creat | o _ wronly | o _ trunc  numconst ) ;	EMPTY	EMPTY
60	2313	2	-1	0	-1	if ( fd < numconst ) {	EMPTY	EMPTY
60	2314	2	-1	0	-1	error ( strlit	EMPTY	EMPTY
60	2315	2	-1	0	-1	dump _ info -> currentfilename ) ;	EMPTY	EMPTY
60	2316	2	-1	0	-1	}	EMPTY	EMPTY
60	2317	2	-1	0	-1	fp = fdopen ( fd  strlit ) ;	EMPTY	EMPTY
60	2318	2	-1	0	-1	if ( fp == null ) {	EMPTY	EMPTY
60	2319	2	-1	0	-1	error ( strlit	EMPTY	EMPTY
60	2320	2	-1	0	-1	dump _ info -> currentfilename ) ;	EMPTY	EMPTY
60	2321	2	-1	0	-1	}	EMPTY	EMPTY
60	2322	2	-1	0	-1	dump _ info -> p = pcap _ dump _ fopen ( dump _ info -> pd  fp ) ;	EMPTY	EMPTY
60	2323	2	-1	1	-1	# else	EMPTY	EMPTY
60	2324	2	-1	0	-1	dump _ info -> p = pcap _ dump _ open ( dump _ info -> pd , dump _ info -> currentfilename )	EMPTY	EMPTY
60	2325	2	-1	0	-1	# endif	EMPTY	EMPTY
60	2326	2	-1	0	-1	# ifdef have _ libcap _ ng	EMPTY	EMPTY
60	2327	2	-1	0	-1	capng _ update ( capng _ drop  capng _ effective  cap _ dac _ override ) ;	EMPTY	EMPTY
60	2328	2	-1	0	-1	capng _ apply ( capng _ select _ both ) ;	EMPTY	EMPTY
60	2329	2	-1	0	-1	# endif	EMPTY	EMPTY
60	2330	2	-1	0	-1	if ( dump _ info -> p == null )	EMPTY	EMPTY
60	2331	2	-1	0	-1	error (  " %s "  , pcap _ geterr ( pd ) )	EMPTY	EMPTY
60	2332	2	-1	0	-1	# ifdef have _ capsicum	EMPTY	EMPTY
60	2333	2	-1	0	-1	set _ dumper _ capsicum _ rights ( dump _ info -> p ) ;	EMPTY	EMPTY
60	2334	3	-1	0	-1	# endif	EMPTY	EMPTY
60	2335	1	0	0	-1	}	EMPTY	EMPTY
60	2336	3	-1	0	-1	}	EMPTY	EMPTY
60	2343	1	0	0	-1	if ( cflag != numconst ) {	EMPTY	EMPTY
60	2344	3	-1	0	-1	long size = pcap _ dump _ ftell ( dump _ info -> p ) ;	EMPTY	EMPTY
60	2346	1	0	0	0	if ( size == - 1 )	EMPTY	EMPTY
60	2347	2	-1	0	-1	error (  " ftell fails on output file "  )	EMPTY	EMPTY
60	2348	2	-1	0	-1	if ( size > cflag ) {	EMPTY	EMPTY
60	2349	2	-1	0	-1	# ifdef have _ capsicum	EMPTY	EMPTY
60	2350	2	-1	0	-1	file * fp ;	EMPTY	EMPTY
60	2351	2	-1	0	-1	int fd ;	EMPTY	EMPTY
60	2352	3	-1	0	-1	# endif	EMPTY	EMPTY
60	2357	1	1	1	1	pcap _ dump _ close ( dump _ info -> p )	EMPTY	EMPTY
60	2363	1	1	1	1	if ( zflag != null )	zflag	EMPTY
60	2364	3	-1	0	-1	compress _ savefile ( dump _ info -> currentfilename )	EMPTY	EMPTY
60	2366	1	1	0	-1	cflag _ count ++ ;	EMPTY	EMPTY
60	2367	2	-1	0	-1	if ( wflag > 0 ) {	EMPTY	EMPTY
60	2368	2	-1	0	-1	if ( cflag _ count >= wflag )	EMPTY	EMPTY
60	2369	2	-1	0	-1	cflag _ count = 0 ;	EMPTY	EMPTY
60	2370	2	-1	0	-1	}	EMPTY	EMPTY
60	2371	2	-1	0	-1	if ( dump _ info -> currentfilename != null )	EMPTY	EMPTY
60	2372	2	-1	0	-1	free ( dump _ info -> currentfilename )	EMPTY	free
60	2373	2	-1	0	-1	dump _ info -> currentfilename = ( char * ) malloc ( path _ max + 1 )	EMPTY	malloc
60	2374	2	-1	0	-1	if ( dump _ info -> currentfilename == null )	EMPTY	EMPTY
60	2375	2	-1	0	-1	error (  " dump _ packet _ and _ trunc: malloc "  )	EMPTY	EMPTY
60	2376	2	-1	0	-1	makefilename ( dump _ info -> currentfilename , dump _ info -> wfilename , cflag _ count , wflagchars )	EMPTY	EMPTY
60	2377	2	-1	0	-1	# ifdef have _ libcap _ ng	EMPTY	EMPTY
60	2378	2	-1	0	-1	capng _ update ( capng _ add  capng _ effective  cap _ dac _ override ) ;	EMPTY	EMPTY
60	2379	2	-1	0	-1	capng _ apply ( capng _ select _ both ) ;	EMPTY	EMPTY
60	2380	2	-1	1	-1	# endif	EMPTY	EMPTY
60	2381	2	-1	0	-1	# ifdef have _ capsicum	EMPTY	EMPTY
60	2382	2	-1	0	-1	fd = openat ( dump _ info -> dirfd  dump _ info -> currentfilename	EMPTY	EMPTY
60	2383	2	-1	0	-1	o _ creat | o _ wronly | o _ trunc  numconst ) ;	EMPTY	EMPTY
60	2384	2	-1	0	-1	if ( fd < numconst ) {	EMPTY	EMPTY
60	2385	2	-1	0	-1	error ( strlit	EMPTY	EMPTY
60	2386	2	-1	0	-1	dump _ info -> currentfilename ) ;	EMPTY	EMPTY
60	2387	2	-1	0	-1	}	EMPTY	EMPTY
60	2388	2	-1	0	-1	fp = fdopen ( fd  strlit ) ;	EMPTY	EMPTY
60	2389	2	-1	0	-1	if ( fp == null ) {	EMPTY	EMPTY
60	2390	2	-1	0	-1	error ( strlit	EMPTY	EMPTY
60	2391	2	-1	0	-1	dump _ info -> currentfilename ) ;	EMPTY	EMPTY
60	2392	2	-1	0	-1	}	EMPTY	EMPTY
60	2393	2	-1	0	-1	dump _ info -> p = pcap _ dump _ fopen ( dump _ info -> pd  fp ) ;	EMPTY	EMPTY
60	2394	2	-1	1	-1	# else	EMPTY	EMPTY
60	2395	3	-1	0	-1	dump _ info -> p = pcap _ dump _ open ( dump _ info -> pd , dump _ info -> currentfilename )	EMPTY	EMPTY
60	2396	1	0	0	-1	# endif	EMPTY	EMPTY
60	2397	2	-1	0	-1	# ifdef have _ libcap _ ng	EMPTY	EMPTY
60	2398	2	-1	0	-1	capng _ update ( capng _ drop  capng _ effective  cap _ dac _ override ) ;	EMPTY	EMPTY
60	2399	2	-1	0	-1	capng _ apply ( capng _ select _ both ) ;	EMPTY	EMPTY
60	2400	2	-1	0	-1	# endif	EMPTY	EMPTY
60	2401	2	-1	0	-1	if ( dump _ info -> p == null )	EMPTY	EMPTY
60	2402	2	-1	0	-1	error (  " %s "  , pcap _ geterr ( pd ) )	EMPTY	EMPTY
60	2403	2	-1	0	-1	# ifdef have _ capsicum	EMPTY	EMPTY
60	2404	2	-1	0	-1	set _ dumper _ capsicum _ rights ( dump _ info -> p ) ;	EMPTY	EMPTY
60	2405	2	-1	0	-1	# endif	EMPTY	EMPTY
60	2406	2	-1	0	-1	}	EMPTY	EMPTY
60	2407	3	-1	0	-1	}	EMPTY	EMPTY
60	2409	1	0	0	0	pcap _ dump ( ( u _ char * ) dump _ info -> p  h  sp ) ;	EMPTY	EMPTY
60	2410	2	-1	0	-1	# ifdef have _ pcap _ dump _ flush	EMPTY	EMPTY
60	2411	2	-1	0	-1	if ( uflag )	EMPTY	EMPTY
60	2412	2	-1	0	-1	pcap _ dump _ flush ( dump _ info -> p ) ;	EMPTY	EMPTY
60	2413	3	-1	0	-1	# endif	EMPTY	EMPTY
60	2415	1	0	0	-1	-- infodelay ;	EMPTY	EMPTY
60	2416	2	-1	0	-1	if ( infoprint )	EMPTY	EMPTY
60	2417	2	-1	0	-1	info ( numconst ) ;	EMPTY	EMPTY
60	2418	3	-1	0	-1	}	EMPTY	EMPTY
60	2420	1	0	0	-1	static void	EMPTY	EMPTY
60	2421	2	-1	0	-1	dump _ packet ( u _ char * user  const struct pcap _ pkthdr * h  const u _ char * sp )	pcap _ pkthdr	EMPTY
60	2422	2	-1	0	-1	{	EMPTY	EMPTY
60	2423	3	-1	0	-1	++ packets _ captured ;	EMPTY	EMPTY
60	2425	1	0	0	-1	++ infodelay ;	EMPTY	EMPTY
60	2427	1	0	0	0	pcap _ dump ( user  h  sp ) ;	EMPTY	EMPTY
60	2428	2	-1	0	-1	# ifdef have _ pcap _ dump _ flush	EMPTY	EMPTY
60	2429	2	-1	0	-1	if ( uflag )	EMPTY	EMPTY
60	2430	2	-1	0	-1	pcap _ dump _ flush ( ( pcap _ dumper _ t * ) user ) ;	EMPTY	EMPTY
60	2431	3	-1	0	-1	# endif	EMPTY	EMPTY
60	2433	1	0	0	-1	-- infodelay ;	EMPTY	EMPTY
60	2434	2	-1	0	-1	if ( infoprint )	EMPTY	EMPTY
60	2435	2	-1	0	-1	info ( numconst ) ;	EMPTY	EMPTY
60	2436	3	-1	0	-1	}	EMPTY	EMPTY
60	2438	1	0	0	-1	static void	EMPTY	EMPTY
60	2439	2	-1	0	-1	print _ packet ( u _ char * user  const struct pcap _ pkthdr * h  const u _ char * sp )	pcap _ pkthdr	EMPTY
60	2440	2	-1	0	-1	{	EMPTY	EMPTY
60	2441	2	-1	0	-1	struct print _ info * print _ info ;	EMPTY	EMPTY
60	2442	2	-1	0	-1	u _ int hdrlen ;	EMPTY	EMPTY
60	2443	3	-1	0	-1	netdissect _ options * ndo ;	EMPTY	EMPTY
60	2445	1	0	0	-1	++ packets _ captured ;	EMPTY	EMPTY
60	2447	1	0	0	-1	++ infodelay ;	EMPTY	EMPTY
60	2449	1	0	0	-1	print _ info = ( struct print _ info * ) user ;	EMPTY	EMPTY
60	2450	3	-1	0	-1	ndo = print _ info -> ndo ;	EMPTY	EMPTY
60	2452	1	0	0	0	if ( ndo -> ndo _ packet _ number )	ndo _ packet _ number	EMPTY
60	2453	3	-1	0	-1	nd _ print ( ( ndo  strlit  packets _ captured ) ) ;	EMPTY	EMPTY
60	2455	1	0	0	0	ts _ print ( ndo  & h -> ts ) ;	ts	EMPTY
60	2463	1	1	1	-1	ndo -> ndo _ snapend = sp + h -> caplen	caplen	EMPTY
60	2465	1	0	0	0	if ( print _ info -> ndo _ type ) {	EMPTY	EMPTY
60	2466	2	-1	0	-1	hdrlen = ( * print _ info -> p . ndo _ printer ) ( print _ info -> ndo , h , sp ) ;	EMPTY	EMPTY
60	2467	2	-1	0	-1	} else {	EMPTY	EMPTY
60	2468	2	-1	0	-1	hdrlen = ( * print _ info -> p . printer ) ( h , sp ) ;	EMPTY	EMPTY
60	2469	3	-1	0	-1	}	EMPTY	EMPTY
60	2475	1	1	1	-1	ndo -> ndo _ snapend = sp + h -> caplen	caplen	EMPTY
60	2476	2	-1	0	-1	if ( ndo -> ndo _ xflag ) {	ndo _ xflag	EMPTY
60	2480	2	-1	1	-1	if ( ndo -> ndo _ xflag > numconst ) {	ndo _ xflag	EMPTY
60	2484	2	-1	1	-1	hex _ and _ ascii _ print ( ndo ,  " \n\t "  , sp , h -> caplen )	caplen	EMPTY
60	2485	2	-1	0	-1	}	EMPTY	EMPTY
60	2491	2	-1	1	-1	if ( h -> caplen > hdrlen )	caplen	EMPTY
60	2492	2	-1	0	-1	hex _ and _ ascii _ print ( ndo ,  " \n\t "  , sp + hdrlen ,	EMPTY	EMPTY
60	2493	2	-1	0	-1	h -> caplen - hdrlen )	caplen	EMPTY
60	2494	2	-1	0	-1	}	EMPTY	EMPTY
60	2495	2	-1	0	-1	if ( ndo -> ndo _ xflag ) {	ndo _ xflag	EMPTY
60	2499	2	-1	1	-1	if ( ndo -> ndo _ xflag > numconst ) {	ndo _ xflag	EMPTY
60	2503	2	-1	1	-1	hex _ print ( ndo ,  " \n\t "  , sp , h -> caplen )	caplen	EMPTY
60	2504	2	-1	0	-1	}	EMPTY	EMPTY
60	2510	2	-1	1	-1	if ( h -> caplen > hdrlen )	caplen	EMPTY
60	2511	2	-1	0	-1	hex _ print ( ndo ,  " \n\t "  , sp + hdrlen ,	EMPTY	EMPTY
60	2512	2	-1	0	-1	h -> caplen - hdrlen )	caplen	EMPTY
60	2513	2	-1	0	-1	}	EMPTY	EMPTY
60	2514	2	-1	0	-1	if ( ndo -> ndo _ aflag ) {	ndo _ aflag	EMPTY
60	2518	2	-1	1	-1	if ( ndo -> ndo _ aflag > numconst ) {	ndo _ aflag	EMPTY
60	2522	2	-1	1	-1	ascii _ print ( ndo , sp , h -> caplen )	caplen	EMPTY
60	2523	2	-1	0	-1	}	EMPTY	EMPTY
60	2529	2	-1	1	-1	if ( h -> caplen > hdrlen )	caplen	EMPTY
60	2530	2	-1	0	-1	ascii _ print ( ndo , sp + hdrlen , h -> caplen - hdrlen )	caplen	EMPTY
60	2531	2	-1	0	-1	}	EMPTY	EMPTY
60	2532	3	-1	0	-1	}	EMPTY	EMPTY
60	2534	1	0	0	0	putchar ( '\\n' ) ;	EMPTY	putchar
60	2536	1	0	0	-1	-- infodelay ;	EMPTY	EMPTY
60	2537	2	-1	0	-1	if ( infoprint )	EMPTY	EMPTY
60	2538	2	-1	0	-1	info ( numconst ) ;	EMPTY	EMPTY
60	2539	3	-1	0	-1	}	EMPTY	EMPTY
60	2541	1	1	0	-1	# ifdef win32	EMPTY	EMPTY
60	2560	2	-1	1	-1	char wdversion [ ] = strlit ;	EMPTY	EMPTY
60	2561	2	-1	0	-1	# if ! defined ( have _ generated _ version )	EMPTY	EMPTY
60	2562	2	-1	0	-1	char version [ ] = strlit ;	EMPTY	EMPTY
60	2563	2	-1	0	-1	# endif	EMPTY	EMPTY
60	2564	2	-1	0	-1	char pcap _ version [ ] = strlit ;	EMPTY	EMPTY
60	2565	2	-1	0	-1	char wpcap _ version [ ] = strlit ;	EMPTY	EMPTY
60	2566	3	-1	0	-1	# endif	EMPTY	EMPTY
60	2571	1	0	0	-1	static void	EMPTY	EMPTY
60	2572	2	-1	0	-1	ndo _ default _ print ( netdissect _ options * ndo  const u _ char * bp  u _ int length )	ndo _ default _ print	EMPTY
60	2573	2	-1	0	-1	{	EMPTY	EMPTY
60	2574	2	-1	0	-1	hex _ and _ ascii _ print ( ndo ,  " \n\t "  , bp , length )	EMPTY	EMPTY
60	2575	3	-1	0	-1	}	EMPTY	EMPTY
60	2577	1	0	0	-1	void	EMPTY	EMPTY
60	2578	2	-1	0	-1	default _ print ( const u _ char * bp  u _ int length )	EMPTY	EMPTY
60	2579	2	-1	0	-1	{	EMPTY	EMPTY
60	2580	2	-1	0	-1	ndo _ default _ print ( gndo  bp  length ) ;	ndo _ default _ print	EMPTY
60	2581	3	-1	0	-1	}	EMPTY	EMPTY
60	2583	1	0	0	0	# ifdef signal _ req _ info	EMPTY	EMPTY
60	2584	2	-1	0	-1	retsigtype requestinfo ( int signo  _ u _  )	EMPTY	EMPTY
60	2585	2	-1	0	-1	{	EMPTY	EMPTY
60	2586	2	-1	0	-1	if ( infodelay )	EMPTY	EMPTY
60	2587	2	-1	0	-1	++ infoprint ;	EMPTY	EMPTY
60	2588	2	-1	0	-1	else	EMPTY	EMPTY
60	2589	2	-1	0	-1	info ( numconst ) ;	EMPTY	EMPTY
60	2590	2	-1	0	-1	}	EMPTY	EMPTY
60	2591	3	-1	0	-1	# endif	EMPTY	EMPTY
60	2596	1	1	1	-1	# ifdef use _ win32 _ mm _ timer	EMPTY	EMPTY
60	2597	2	-1	0	-1	void callback verbose _ stats _ dump ( uint timer _ id  _ u _   uint msg  _ u _   dword _ ptr arg  _ u _	EMPTY	EMPTY
60	2598	2	-1	0	-1	dword _ ptr dw1  _ u _   dword _ ptr dw2  _ u _  )	EMPTY	EMPTY
60	2599	2	-1	0	-1	{	EMPTY	EMPTY
60	2600	3	-1	0	-1	struct pcap _ stat stat ;	pcap _ stat	EMPTY
60	2602	1	0	0	-1	if ( infodelay == numconst && pcap _ stats ( pd  & stat ) >= numconst )	EMPTY	EMPTY
60	2603	2	-1	0	-1	fprintf ( stderr  strlit  packets _ captured ) ;	EMPTY	fprintf stderr
60	2604	2	-1	0	-1	}	EMPTY	EMPTY
60	2605	2	-1	0	-1	# elif defined ( have _ alarm	EMPTY	EMPTY
60	2606	2	-1	0	-1	static void verbose _ stats _ dump ( int sig  _ u _  )	EMPTY	EMPTY
60	2607	2	-1	0	-1	{	EMPTY	EMPTY
60	2608	3	-1	0	-1	struct pcap _ stat stat ;	pcap _ stat	EMPTY
60	2610	1	0	0	0	if ( infodelay == 0 && pcap _ stats ( pd , & stat ) >= 0 )	EMPTY	EMPTY
60	2611	2	-1	0	-1	fprintf ( stderr ,  " got %u\r "  , packets _ captured )	EMPTY	fprintf stderr
60	2612	2	-1	0	-1	alarm ( 1 )	EMPTY	alarm
60	2613	2	-1	0	-1	}	EMPTY	EMPTY
60	2614	3	-1	0	-1	# endif	EMPTY	EMPTY
60	2616	1	1	0	1	uses _ apple _ deprecated _ api	EMPTY	EMPTY
60	2617	2	-1	0	-1	static void	EMPTY	EMPTY
60	2618	2	-1	0	-1	print _ version ( void )	EMPTY	EMPTY
60	2619	2	-1	0	-1	{	EMPTY	EMPTY
60	2620	2	-1	0	-1	extern char version [ ] ;	EMPTY	EMPTY
60	2621	2	-1	0	-1	# ifndef have _ pcap _ lib _ version	EMPTY	EMPTY
60	2622	2	-1	0	-1	# if defined ( win32 ) || defined ( have _ pcap _ version )	EMPTY	EMPTY
60	2623	2	-1	0	-1	extern char pcap _ version [ ] ;	EMPTY	EMPTY
60	2624	2	-1	1	-1	# else	EMPTY	EMPTY
60	2625	2	-1	0	-1	static char pcap _ version [ ] = strlit ;	EMPTY	EMPTY
60	2626	2	-1	1	-1	# endif	EMPTY	EMPTY
60	2627	3	-1	1	-1	# endif	EMPTY	EMPTY
60	2629	1	1	0	-1	# ifdef have _ pcap _ lib _ version	EMPTY	EMPTY
60	2630	2	-1	0	-1	# ifdef win32	EMPTY	EMPTY
60	2631	2	-1	0	-1	( void ) fprintf ( stderr  strlit  program _ name  wdversion  version ) ;	program _ name	fprintf stderr
60	2632	2	-1	1	-1	# else	EMPTY	EMPTY
60	2633	2	-1	0	-1	( void ) fprintf ( stderr ,  " %s version %s\n "  , program _ name , version )	program _ name	fprintf stderr
60	2634	2	-1	1	-1	# endif	EMPTY	EMPTY
60	2635	2	-1	0	-1	( void ) fprintf ( stderr ,  " %s\n "  , pcap _ lib _ version ( ) )	EMPTY	fprintf stderr
60	2636	2	-1	1	-1	# else	EMPTY	EMPTY
60	2637	2	-1	0	-1	# ifdef win32	EMPTY	EMPTY
60	2638	2	-1	0	-1	( void ) fprintf ( stderr  strlit  program _ name  wdversion  version ) ;	program _ name	fprintf stderr
60	2639	2	-1	0	-1	( void ) fprintf ( stderr  strlit  wpcap _ version  pcap _ version ) ;	EMPTY	fprintf stderr
60	2640	2	-1	1	-1	# else	EMPTY	EMPTY
60	2641	2	-1	0	-1	( void ) fprintf ( stderr  strlit  program _ name  version ) ;	program _ name	fprintf stderr
60	2642	2	-1	0	-1	( void ) fprintf ( stderr  strlit  pcap _ version ) ;	EMPTY	fprintf stderr
60	2643	2	-1	1	-1	# endif	EMPTY	EMPTY
60	2644	3	-1	1	-1	# endif	EMPTY	EMPTY
60	2646	1	0	0	-1	# if defined ( have _ libcrypto ) && defined ( ssleay _ version )	EMPTY	EMPTY
60	2647	2	-1	0	-1	( void ) fprintf ( stderr ,  " %s\n "  , ssleay _ version ( ssleay _ version ) )	ssleay _ version	fprintf stderr
60	2648	3	-1	0	-1	# endif	EMPTY	EMPTY
60	2650	1	0	0	-1	# ifdef use _ libsmi	EMPTY	EMPTY
60	2651	2	-1	0	-1	( void ) fprintf ( stderr  strlit  smi _ version _ string ) ;	EMPTY	fprintf stderr
60	2652	2	-1	0	-1	# endif	EMPTY	EMPTY
60	2653	2	-1	0	-1	}	EMPTY	EMPTY
60	2654	3	-1	0	-1	uses _ apple _ rst	EMPTY	EMPTY
60	2656	1	0	0	-1	static void	EMPTY	EMPTY
60	2657	2	-1	0	-1	print _ usage ( void )	EMPTY	EMPTY
60	2658	2	-1	0	-1	{	EMPTY	EMPTY
60	2659	2	-1	0	-1	print _ version ( ) ;	EMPTY	EMPTY
60	2660	2	-1	0	-1	( void ) fprintf ( stderr	EMPTY	fprintf stderr
60	2661	2	-1	0	-1	strlit d _ flag strlit i _ flag j _ flag strlit u _ flag strlit b _ flag _ usage strlit  program _ name ) ;	program _ name	EMPTY
60	2662	2	-1	0	-1	( void ) fprintf ( stderr	EMPTY	fprintf stderr
60	2663	2	-1	0	-1	strlit ) ;	EMPTY	EMPTY
60	2664	2	-1	0	-1	( void ) fprintf ( stderr	EMPTY	fprintf stderr
60	2665	2	-1	0	-1	strlit j _ flag _ usage strlit ) ;	EMPTY	EMPTY
60	2666	2	-1	0	-1	# ifdef have _ pcap _ setdirection	EMPTY	EMPTY
60	2667	2	-1	0	-1	( void ) fprintf ( stderr	EMPTY	fprintf stderr
60	2668	2	-1	0	-1	strlit ) ;	EMPTY	EMPTY
60	2669	2	-1	0	-1	# endif	EMPTY	EMPTY
60	2670	2	-1	0	-1	( void ) fprintf ( stderr	EMPTY	fprintf stderr
60	2671	2	-1	0	-1	strlit ) ;	EMPTY	EMPTY
60	2672	2	-1	0	-1	# ifdef have _ pcap _ set _ tstamp _ precision	EMPTY	EMPTY
60	2673	2	-1	0	-1	( void ) fprintf ( stderr  strlit ) ;	EMPTY	fprintf stderr
60	2674	2	-1	0	-1	( void ) fprintf ( stderr	EMPTY	fprintf stderr
60	2675	2	-1	0	-1	strlit ) ;	EMPTY	EMPTY
60	2676	2	-1	0	-1	# endif	EMPTY	EMPTY
60	2677	2	-1	0	-1	# ifdef have _ pcap _ set _ immediate _ mode	EMPTY	EMPTY
60	2678	2	-1	0	-1	( void ) fprintf ( stderr  strlit ) ;	EMPTY	fprintf stderr
60	2679	2	-1	0	-1	# endif	EMPTY	EMPTY
60	2680	2	-1	0	-1	( void ) fprintf ( stderr  strlit ) ;	EMPTY	fprintf stderr
60	2681	2	-1	0	-1	( void ) fprintf ( stderr	EMPTY	fprintf stderr
60	2682	2	-1	0	-1	strlit ) ;	EMPTY	EMPTY
60	2683	2	-1	0	-1	( void ) fprintf ( stderr	EMPTY	fprintf stderr
60	2684	2	-1	0	-1	strlit ) ;	EMPTY	EMPTY
60	2685	3	-1	0	-1	}	EMPTY	EMPTY
60	2690	1	0	0	-1	static void	EMPTY	EMPTY
60	2691	2	-1	0	-1	ndo _ error ( netdissect _ options * ndo  _ u _   const char * fmt  ... )	ndo _ error	EMPTY
60	2692	2	-1	0	-1	{	EMPTY	EMPTY
60	2693	3	-1	0	-1	va _ list ap ;	EMPTY	EMPTY
60	2695	1	1	0	-1	( void ) fprintf ( stderr ,  " %s:  "  , program _ name )	program _ name	fprintf stderr
60	2696	2	-1	0	-1	va _ start ( ap  fmt ) ;	EMPTY	EMPTY
60	2697	2	-1	0	-1	( void ) vfprintf ( stderr , fmt , ap )	EMPTY	vfprintf stderr
60	2698	2	-1	0	-1	va _ end ( ap ) ;	EMPTY	EMPTY
60	2699	2	-1	0	-1	if ( * fmt ) {	EMPTY	EMPTY
60	2700	2	-1	0	-1	fmt += strlen ( fmt ) ;	EMPTY	strlen
60	2701	2	-1	0	-1	if ( fmt [ - 1 ] != '\n' )	EMPTY	EMPTY
60	2702	2	-1	0	-1	( void ) fputc ( '\n' , stderr ) ;	EMPTY	fputc stderr
60	2703	2	-1	0	-1	}	EMPTY	EMPTY
60	2704	2	-1	0	-1	exit ( 1 )	EMPTY	exit
60	2706	3	-1	1	-1	}	EMPTY	EMPTY
60	2709	1	0	0	-1	static void	EMPTY	EMPTY
60	2710	2	-1	0	-1	ndo _ warning ( netdissect _ options * ndo  _ u _   const char * fmt  ... )	ndo _ warning	EMPTY
60	2711	2	-1	0	-1	{	EMPTY	EMPTY
60	2712	3	-1	0	-1	va _ list ap ;	EMPTY	EMPTY
60	2714	1	0	0	-1	( void ) fprintf ( stderr ,  " %s: warning:  "  , program _ name )	program _ name	fprintf stderr
60	2715	2	-1	0	-1	va _ start ( ap  fmt ) ;	EMPTY	EMPTY
60	2716	2	-1	0	-1	( void ) vfprintf ( stderr , fmt , ap )	EMPTY	vfprintf stderr
60	2717	2	-1	0	-1	va _ end ( ap ) ;	EMPTY	EMPTY
60	2718	2	-1	0	-1	if ( * fmt ) {	EMPTY	EMPTY
60	2719	2	-1	0	-1	fmt += strlen ( fmt ) ;	EMPTY	strlen
60	2720	2	-1	0	-1	if ( fmt [ - 1 ] != '\n' )	EMPTY	EMPTY
60	2721	2	-1	0	-1	( void ) fputc ( '\n' , stderr ) ;	EMPTY	fputc stderr
60	2722	2	-1	0	-1	}	EMPTY	EMPTY
60	2723	3	-1	0	-1	}	EMPTY	EMPTY
69	39	1	1	0	-1	struct fddi _ header {	EMPTY	EMPTY
69	40	2	-1	1	-1	u _ char fddi _ fc ;	fddi _ fc	EMPTY
69	41	2	-1	0	-1	u _ char fddi _ dhost [ numconst ] ;	fddi _ dhost	EMPTY
69	42	2	-1	0	-1	u _ char fddi _ shost [ numconst ] ;	EMPTY	EMPTY
69	43	3	-1	0	-1	} ;	EMPTY	EMPTY
69	51	1	1	1	-1	# define fddi _ hdrlen numconst	EMPTY	EMPTY
69	58	1	1	1	-1	# define fddifc _ c numconst	EMPTY	EMPTY
69	59	2	-1	1	-1	# define fddifc _ l numconst	EMPTY	EMPTY
69	60	2	-1	1	-1	# define fddifc _ f numconst	EMPTY	EMPTY
69	61	3	-1	1	-1	# define fddifc _ z numconst	EMPTY	EMPTY
69	66	1	1	1	-1	# define fddifc _ void numconst	EMPTY	EMPTY
69	67	2	-1	1	-1	# define fddifc _ nrt numconst	EMPTY	EMPTY
69	68	2	-1	1	-1	# define fddifc _ rt numconst	EMPTY	EMPTY
69	69	2	-1	1	-1	# define fddifc _ smt _ info numconst	EMPTY	EMPTY
69	70	2	-1	1	-1	# define fddifc _ smt _ nsa numconst	EMPTY	EMPTY
69	71	2	-1	1	-1	# define fddifc _ mac _ beacon numconst	EMPTY	EMPTY
69	72	2	-1	1	-1	# define fddifc _ mac _ claim numconst	EMPTY	EMPTY
69	73	2	-1	1	-1	# define fddifc _ llc _ async numconst	EMPTY	EMPTY
69	74	2	-1	1	-1	# define fddifc _ llc _ sync numconst	EMPTY	EMPTY
69	75	2	-1	1	-1	# define fddifc _ imp _ async numconst	EMPTY	EMPTY
69	76	2	-1	1	-1	# define fddifc _ imp _ sync numconst	EMPTY	EMPTY
69	77	2	-1	1	-1	# define fddifc _ smt numconst	EMPTY	EMPTY
69	78	3	-1	1	-1	# define fddifc _ mac numconst	EMPTY	EMPTY
69	80	1	1	1	-1	# define fddifc _ clff numconst	EMPTY	EMPTY
69	81	3	-1	1	-1	# define fddifc _ zzzz numconst	EMPTY	EMPTY
69	86	1	1	1	1	# if defined ( ultrix ) || defined (  _  _ alpha ) || defined (  _  _ bsdi ) || defined (  _  _ netbsd _  _  ) || defined (  _  _ linux _  _	EMPTY	EMPTY
69	87	2	-1	0	-1	int fddi _ bitswap = numconst ;	EMPTY	EMPTY
69	88	2	-1	0	-1	# else	EMPTY	EMPTY
69	89	2	-1	0	-1	int fddi _ bitswap = numconst ;	EMPTY	EMPTY
69	90	3	-1	0	-1	# endif	EMPTY	EMPTY
69	122	1	1	1	-1	static const u _ char fddi _ bit _ swap [ ] = {	EMPTY	EMPTY
69	123	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	124	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	125	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	126	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	127	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	128	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	129	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	130	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	131	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	132	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	133	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	134	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	135	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	136	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	137	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	138	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	139	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	140	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	141	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	142	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	143	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	144	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	145	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	146	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	147	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	148	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	149	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	150	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	151	3	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	152	1	0	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	153	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	154	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
69	155	3	-1	0	-1	} ;	EMPTY	EMPTY
69	160	1	0	0	-1	static inline void	EMPTY	EMPTY
69	161	2	-1	0	-1	print _ fddi _ fc ( netdissect _ options * ndo  u _ char fc )	print _ fddi _ fc	EMPTY
69	162	2	-1	0	-1	{	EMPTY	EMPTY
69	163	3	-1	0	-1	switch ( fc ) {	EMPTY	EMPTY
69	165	1	1	1	1	case fddifc _ void :	EMPTY	EMPTY
69	166	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
69	167	3	-1	0	-1	break	EMPTY	EMPTY
69	169	1	1	1	-1	case fddifc _ nrt :	EMPTY	EMPTY
69	170	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
69	171	3	-1	0	-1	break	EMPTY	EMPTY
69	173	1	1	1	-1	case fddifc _ rt :	EMPTY	EMPTY
69	174	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
69	175	3	-1	0	-1	break	EMPTY	EMPTY
69	177	1	1	1	-1	case fddifc _ smt _ info :	EMPTY	EMPTY
69	178	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
69	179	3	-1	0	-1	break	EMPTY	EMPTY
69	181	1	1	1	-1	case fddifc _ smt _ nsa :	EMPTY	EMPTY
69	182	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
69	183	3	-1	0	-1	break	EMPTY	EMPTY
69	185	1	1	1	-1	case fddifc _ mac _ beacon :	EMPTY	EMPTY
69	186	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
69	187	3	-1	0	-1	break	EMPTY	EMPTY
69	189	1	1	1	-1	case fddifc _ mac _ claim :	EMPTY	EMPTY
69	190	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
69	191	3	-1	0	-1	break	EMPTY	EMPTY
69	193	1	0	0	-1	default :	EMPTY	EMPTY
69	194	3	-1	0	-1	switch ( fc & fddifc _ clff ) {	EMPTY	EMPTY
69	196	1	0	0	-1	case fddifc _ mac :	EMPTY	EMPTY
69	197	2	-1	0	-1	nd _ print ( ( ndo ,  " mac%1x  "  , fc & fddifc _ zzzz ) ) ;	EMPTY	EMPTY
69	198	3	-1	0	-1	break ;	EMPTY	EMPTY
69	200	1	0	0	-1	case fddifc _ smt :	EMPTY	EMPTY
69	201	2	-1	0	-1	nd _ print ( ( ndo ,  " smt%1x  "  , fc & fddifc _ zzzz ) ) ;	EMPTY	EMPTY
69	202	3	-1	0	-1	break ;	EMPTY	EMPTY
69	204	1	0	0	-1	case fddifc _ llc _ async :	EMPTY	EMPTY
69	205	2	-1	0	-1	nd _ print ( ( ndo ,  " async%1x  "  , fc & fddifc _ zzzz ) ) ;	EMPTY	EMPTY
69	206	3	-1	0	-1	break ;	EMPTY	EMPTY
69	208	1	0	0	-1	case fddifc _ llc _ sync :	EMPTY	EMPTY
69	209	2	-1	0	-1	nd _ print ( ( ndo ,  " sync%1x  "  , fc & fddifc _ zzzz ) ) ;	EMPTY	EMPTY
69	210	3	-1	0	-1	break ;	EMPTY	EMPTY
69	212	1	0	0	-1	case fddifc _ imp _ async :	EMPTY	EMPTY
69	213	2	-1	0	-1	nd _ print ( ( ndo ,  " imp _ async%1x  "  , fc & fddifc _ zzzz ) ) ;	EMPTY	EMPTY
69	214	3	-1	0	-1	break ;	EMPTY	EMPTY
69	216	1	0	0	-1	case fddifc _ imp _ sync :	EMPTY	EMPTY
69	217	2	-1	0	-1	nd _ print ( ( ndo ,  " imp _ sync%1x  "  , fc & fddifc _ zzzz ) ) ;	EMPTY	EMPTY
69	218	3	-1	0	-1	break ;	EMPTY	EMPTY
69	220	1	0	0	-1	default :	EMPTY	EMPTY
69	221	2	-1	0	-1	nd _ print ( ( ndo ,  " %02x  "  , fc ) ) ;	EMPTY	EMPTY
69	222	2	-1	0	-1	break ;	EMPTY	EMPTY
69	223	2	-1	0	-1	}	EMPTY	EMPTY
69	224	2	-1	0	-1	}	EMPTY	EMPTY
69	225	3	-1	0	-1	}	EMPTY	EMPTY
69	228	1	0	0	-1	static inline void	EMPTY	EMPTY
69	229	2	-1	0	-1	extract _ fddi _ addrs ( const struct fddi _ header * fddip  char * fsrc  char * fdst )	extract _ fddi _ addrs	EMPTY
69	230	2	-1	0	-1	{	EMPTY	EMPTY
69	231	3	-1	0	-1	register int i ;	EMPTY	EMPTY
69	233	1	1	0	1	if ( fddi _ bitswap ) {	EMPTY	EMPTY
69	238	2	-1	1	-1	for ( i = 0 ; i < 6 ; ++ i )	EMPTY	EMPTY
69	239	2	-1	0	-1	fdst [ i ] = fddi _ bit _ swap [ fddip -> fddi _ dhost [ i ] ]	fddi _ dhost	EMPTY
69	240	2	-1	0	-1	for ( i = 0 ; i < 6 ; ++ i )	EMPTY	EMPTY
69	241	2	-1	0	-1	fsrc [ i ] = fddi _ bit _ swap [ fddip -> fddi _ shost [ i ] ]	EMPTY	EMPTY
69	242	2	-1	0	-1	}	EMPTY	EMPTY
69	243	2	-1	0	-1	else {	EMPTY	EMPTY
69	244	2	-1	0	-1	memcpy ( fdst  ( const char * ) fddip -> fddi _ dhost  numconst ) ;	fddi _ dhost	memcpy
69	245	2	-1	0	-1	memcpy ( fsrc  ( const char * ) fddip -> fddi _ shost  numconst ) ;	EMPTY	memcpy
69	246	2	-1	0	-1	}	EMPTY	EMPTY
69	247	3	-1	0	-1	}	EMPTY	EMPTY
69	252	1	0	0	-1	static inline void	EMPTY	EMPTY
69	253	2	-1	0	-1	fddi _ hdr _ print ( netdissect _ options * ndo	fddi _ hdr _ print	EMPTY
69	254	2	-1	0	-1	register const struct fddi _ header * fddip  register u _ int length	EMPTY	EMPTY
69	255	2	-1	0	-1	register const u _ char * fsrc  register const u _ char * fdst )	EMPTY	EMPTY
69	256	2	-1	0	-1	{	EMPTY	EMPTY
69	257	3	-1	0	-1	const char * srcname , * dstname ;	EMPTY	EMPTY
69	259	1	0	0	-1	srcname = etheraddr _ string ( ndo , fsrc )	EMPTY	EMPTY
69	260	3	-1	0	-1	dstname = etheraddr _ string ( ndo , fdst )	EMPTY	EMPTY
69	262	1	0	0	0	if ( ndo -> ndo _ vflag )	ndo _ vflag	EMPTY
69	263	2	-1	0	-1	nd _ print ( ( ndo ,  " %02x %s %s %d:  "  ,	EMPTY	EMPTY
69	264	2	-1	0	-1	fddip -> fddi _ fc ,	fddi _ fc	EMPTY
69	265	2	-1	0	-1	srcname , dstname ,	EMPTY	EMPTY
69	266	2	-1	0	-1	length ) ) ;	EMPTY	EMPTY
69	267	2	-1	0	-1	else if ( ndo -> ndo _ qflag )	ndo _ qflag	EMPTY
69	268	2	-1	0	-1	nd _ print ( ( ndo ,  " %s %s %d:  "  , srcname , dstname , length ) ) ;	EMPTY	EMPTY
69	269	2	-1	0	-1	else {	EMPTY	EMPTY
69	270	2	-1	0	-1	print _ fddi _ fc ( ndo , fddip -> fddi _ fc ) ;	print _ fddi _ fc fddi _ fc	EMPTY
69	271	2	-1	0	-1	nd _ print ( ( ndo ,  " %s %s %d:  "  , srcname , dstname , length ) ) ;	EMPTY	EMPTY
69	272	2	-1	0	-1	}	EMPTY	EMPTY
69	273	3	-1	0	-1	}	EMPTY	EMPTY
69	275	1	0	0	-1	static inline void	EMPTY	EMPTY
69	276	2	-1	0	-1	fddi _ smt _ print ( netdissect _ options * ndo  const u _ char * p  _ u _   u _ int length  _ u _  )	EMPTY	EMPTY
69	277	2	-1	0	-1	{	EMPTY	EMPTY
69	278	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
69	279	3	-1	0	-1	}	EMPTY	EMPTY
69	281	1	0	0	-1	void	EMPTY	EMPTY
69	282	2	-1	0	-1	fddi _ print ( netdissect _ options * ndo  const u _ char * p  u _ int length  u _ int caplen )	caplen	EMPTY
69	283	2	-1	0	-1	{	EMPTY	EMPTY
69	284	2	-1	0	-1	const struct fddi _ header * fddip = ( const struct fddi _ header * ) p ;	EMPTY	EMPTY
69	285	2	-1	0	-1	struct ether _ header ehdr ;	ether _ header	EMPTY
69	286	3	-1	0	-1	u _ short extracted _ ethertype ;	EMPTY	EMPTY
69	288	1	0	0	0	if ( caplen < fddi _ hdrlen ) {	caplen	EMPTY
69	289	2	-1	0	-1	nd _ print ( ( ndo ,  " [|fddi] "  ) ) ;	EMPTY	EMPTY
69	290	2	-1	0	-1	return ;	EMPTY	EMPTY
69	291	3	-1	0	-1	}	EMPTY	EMPTY
69	296	1	0	0	-1	extract _ fddi _ addrs ( fddip , ( char * ) esrc ( & ehdr ) , ( char * ) edst ( & ehdr ) )	extract _ fddi _ addrs	EMPTY
69	298	1	0	0	0	if ( ndo -> ndo _ eflag )	ndo _ eflag	EMPTY
69	299	3	-1	0	-1	fddi _ hdr _ print ( ndo , fddip , length , esrc ( & ehdr ) , edst ( & ehdr ) )	fddi _ hdr _ print	EMPTY
69	302	1	1	1	1	length -= fddi _ hdrlen ;	EMPTY	EMPTY
69	303	2	-1	0	-1	p += fddi _ hdrlen ;	EMPTY	EMPTY
69	304	3	-1	0	-1	caplen -= fddi _ hdrlen ;	caplen	EMPTY
69	307	1	1	0	-1	if ( ( fddip -> fddi _ fc & fddifc _ clff ) == fddifc _ llc _ async ) {	fddi _ fc	EMPTY
69	309	2	-1	1	-1	if ( llc _ print ( ndo  p  length  caplen  esrc ( & ehdr )  edst ( & ehdr )	caplen	EMPTY
69	310	2	-1	0	-1	& extracted _ ethertype ) == numconst ) {	EMPTY	EMPTY
69	315	2	-1	1	-1	if ( ! ndo -> ndo _ eflag )	ndo _ eflag	EMPTY
69	316	2	-1	0	-1	fddi _ hdr _ print ( ndo , fddip , length + fddi _ hdrlen ,	fddi _ hdr _ print	EMPTY
69	317	2	-1	0	-1	esrc ( & ehdr ) , edst ( & ehdr ) )	EMPTY	EMPTY
69	318	2	-1	0	-1	if ( extracted _ ethertype ) {	EMPTY	EMPTY
69	319	2	-1	0	-1	nd _ print ( ( ndo ,  " (llc %s)  "  ,	EMPTY	EMPTY
69	320	2	-1	0	-1	etherproto _ string ( htons ( extracted _ ethertype ) ) ) ) ;	EMPTY	EMPTY
69	321	2	-1	0	-1	}	EMPTY	EMPTY
69	322	2	-1	0	-1	if ( ! ndo -> ndo _ suppress _ default _ print )	ndo _ suppress _ default _ print	EMPTY
69	323	2	-1	0	-1	nd _ defaultprint ( p  caplen ) ;	caplen	EMPTY
69	324	2	-1	0	-1	}	EMPTY	EMPTY
69	325	2	-1	0	-1	if ( ( fddip -> fddi _ fc & fddifc _ clff ) == fddifc _ smt )	fddi _ fc	EMPTY
69	326	2	-1	0	-1	fddi _ smt _ print ( ndo  p  caplen ) ;	caplen	EMPTY
69	327	2	-1	0	-1	else {	EMPTY	EMPTY
69	329	2	-1	1	-1	if ( ! ndo -> ndo _ eflag )	ndo _ eflag	EMPTY
69	330	2	-1	0	-1	fddi _ hdr _ print ( ndo , fddip , length + fddi _ hdrlen , esrc ( & ehdr ) ,	fddi _ hdr _ print	EMPTY
69	331	2	-1	0	-1	edst ( & ehdr ) )	EMPTY	EMPTY
69	332	2	-1	0	-1	if ( ! ndo -> ndo _ suppress _ default _ print )	ndo _ suppress _ default _ print	EMPTY
69	333	2	-1	0	-1	nd _ defaultprint ( p  caplen ) ;	caplen	EMPTY
69	334	2	-1	0	-1	}	EMPTY	EMPTY
69	335	3	-1	0	-1	}	EMPTY	EMPTY
69	343	1	0	0	-1	u _ int	EMPTY	EMPTY
69	344	2	-1	0	-1	fddi _ if _ print ( netdissect _ options * ndo  const struct pcap _ pkthdr * h  register const u _ char * p )	fddi _ if _ print pcap _ pkthdr	EMPTY
69	345	2	-1	0	-1	{	EMPTY	EMPTY
69	346	3	-1	0	-1	fddi _ print ( ndo , p , h -> len , h -> caplen )	len caplen	EMPTY
69	348	1	0	0	0	return ( fddi _ hdrlen )	EMPTY	EMPTY
69	349	3	-1	0	-1	}	EMPTY	EMPTY
76	65	1	0	0	-1	static const struct tok geneve _ flag _ values [ ] = {	EMPTY	EMPTY
76	66	2	-1	0	-1	{ flag _ oam  strlit }	EMPTY	EMPTY
76	67	2	-1	0	-1	{ flag _ critical  strlit }	EMPTY	EMPTY
76	68	2	-1	0	-1	{ flag _ r1  strlit }	EMPTY	EMPTY
76	69	2	-1	0	-1	{ flag _ r2  strlit }	EMPTY	EMPTY
76	70	2	-1	0	-1	{ flag _ r3  strlit }	EMPTY	EMPTY
76	71	2	-1	0	-1	{ flag _ r4  strlit }	EMPTY	EMPTY
76	72	2	-1	0	-1	{ flag _ r5  strlit }	EMPTY	EMPTY
76	73	2	-1	0	-1	{ flag _ r6  strlit }	EMPTY	EMPTY
76	74	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
76	75	3	-1	0	-1	} ;	EMPTY	EMPTY
76	77	1	1	0	-1	static const char *	EMPTY	EMPTY
76	78	2	-1	0	-1	format _ opt _ class ( uint16 _ t opt _ class )	EMPTY	EMPTY
76	79	2	-1	0	-1	{	EMPTY	EMPTY
76	80	2	-1	1	-1	if ( opt _ class <= 0xff )	EMPTY	EMPTY
76	81	2	-1	0	-1	return  " standard "  ;	EMPTY	EMPTY
76	82	2	-1	0	-1	else if ( opt _ class == 0xffff )	EMPTY	EMPTY
76	83	2	-1	0	-1	return  " experimental "  ;	EMPTY	EMPTY
76	84	2	-1	0	-1	else	EMPTY	EMPTY
76	85	2	-1	0	-1	return  " unknown "	EMPTY	EMPTY
76	86	3	-1	0	-1	}	EMPTY	EMPTY
76	88	1	0	0	-1	static void	EMPTY	EMPTY
76	89	2	-1	0	-1	geneve _ opts _ print ( netdissect _ options * ndo  const u _ char * bp  u _ int len )	len	EMPTY
76	90	2	-1	0	-1	{	EMPTY	EMPTY
76	91	3	-1	0	-1	const char * sep =  "  "  ;	EMPTY	EMPTY
76	93	1	0	0	0	while ( len > 0 ) {	len	EMPTY
76	94	2	-1	0	-1	uint16 _ t opt _ class ;	EMPTY	EMPTY
76	95	2	-1	0	-1	uint8 _ t opt _ type ;	EMPTY	EMPTY
76	96	3	-1	0	-1	uint8 _ t opt _ len ;	EMPTY	EMPTY
76	98	1	0	0	0	nd _ print ( ( ndo ,  " %s "  , sep ) ) ;	EMPTY	EMPTY
76	99	3	-1	0	-1	sep =  " ,  "  ;	EMPTY	EMPTY
76	101	1	0	0	-1	opt _ class = extract _ 16bits ( bp ) ;	extract _ 16bits	EMPTY
76	102	2	-1	0	-1	opt _ type = * ( bp + 2 ) ;	EMPTY	EMPTY
76	103	3	-1	0	-1	opt _ len = 4 + ( ( * ( bp + 3 ) & opt _ len _ mask ) * 4 ) ;	EMPTY	EMPTY
76	105	1	0	0	0	nd _ print ( ( ndo ,  " class %s (0x%x) type 0x%x%s len %u "  ,	len	EMPTY
76	106	2	-1	0	-1	format _ opt _ class ( opt _ class ) , opt _ class , opt _ type ,	EMPTY	EMPTY
76	107	3	-1	0	-1	opt _ type & opt _ type _ critical ?  " (c) "  :  "  "  , opt _ len ) ) ;	EMPTY	EMPTY
76	109	1	0	0	0	if ( opt _ len > len ) {	len	EMPTY
76	110	2	-1	0	-1	nd _ print ( ( ndo ,  "  [bad length] "  ) ) ;	EMPTY	EMPTY
76	111	2	-1	0	-1	return ;	EMPTY	EMPTY
76	112	3	-1	0	-1	}	EMPTY	EMPTY
76	114	1	0	0	0	if ( ndo -> ndo _ vflag > 1 && opt _ len > 4 ) {	ndo _ vflag	EMPTY
76	115	2	-1	0	-1	uint32 _ t * print _ data = ( uint32 _ t * ) ( bp + 4 ) ;	EMPTY	EMPTY
76	116	3	-1	0	-1	int i ;	EMPTY	EMPTY
76	118	1	0	0	0	nd _ print ( ( ndo ,  "  data "  ) ) ;	EMPTY	EMPTY
76	120	1	0	0	0	for ( i = 4 ; i < opt _ len ; i += 4 ) {	EMPTY	EMPTY
76	121	2	-1	0	-1	nd _ print ( ( ndo ,  "  %08x "  , extract _ 32bits ( print _ data ) ) ) ;	EMPTY	EMPTY
76	122	2	-1	0	-1	print _ data ++ ;	EMPTY	EMPTY
76	123	2	-1	0	-1	}	EMPTY	EMPTY
76	124	3	-1	0	-1	}	EMPTY	EMPTY
76	126	1	0	0	-1	bp += opt _ len ;	EMPTY	EMPTY
76	127	2	-1	0	-1	len -= opt _ len ;	len	EMPTY
76	128	2	-1	0	-1	}	EMPTY	EMPTY
76	129	3	-1	0	-1	}	EMPTY	EMPTY
76	131	1	0	0	-1	void	EMPTY	EMPTY
76	132	2	-1	0	-1	geneve _ print ( netdissect _ options * ndo  const u _ char * bp  u _ int len )	len	EMPTY
76	133	2	-1	0	-1	{	EMPTY	EMPTY
76	134	2	-1	0	-1	uint8 _ t ver _ opt ;	EMPTY	EMPTY
76	135	2	-1	0	-1	uint version ;	EMPTY	EMPTY
76	136	2	-1	0	-1	uint8 _ t flags ;	flags	EMPTY
76	137	2	-1	0	-1	uint16 _ t prot ;	EMPTY	EMPTY
76	138	2	-1	0	-1	uint32 _ t vni ;	EMPTY	EMPTY
76	139	2	-1	0	-1	uint8 _ t reserved ;	EMPTY	EMPTY
76	140	3	-1	0	-1	u _ int opts _ len ;	EMPTY	EMPTY
76	142	1	0	0	0	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
76	144	1	0	0	0	nd _ tcheck2 ( * bp  numconst ) ;	EMPTY	EMPTY
76	146	1	0	0	-1	ver _ opt = * bp	EMPTY	EMPTY
76	147	2	-1	0	-1	bp += 1	EMPTY	EMPTY
76	148	3	-1	0	-1	len -= 1	len	EMPTY
76	150	1	0	0	-1	version = ver _ opt >> ver _ shift ;	EMPTY	EMPTY
76	151	2	-1	0	-1	if ( version != 0 ) {	EMPTY	EMPTY
76	152	2	-1	0	-1	nd _ print ( ( ndo ,  "  error: unknown-version %u "  , version ) ) ;	EMPTY	EMPTY
76	153	2	-1	0	-1	return ;	EMPTY	EMPTY
76	154	3	-1	0	-1	}	EMPTY	EMPTY
76	156	1	0	0	-1	flags = * bp	flags	EMPTY
76	157	2	-1	0	-1	bp += 1	EMPTY	EMPTY
76	158	3	-1	0	-1	len -= 1	len	EMPTY
76	160	1	0	0	-1	prot = extract _ 16bits ( bp )	extract _ 16bits	EMPTY
76	161	2	-1	0	-1	bp += 2	EMPTY	EMPTY
76	162	3	-1	0	-1	len -= 2	len	EMPTY
76	164	1	0	0	-1	vni = extract _ 24bits ( bp ) ;	EMPTY	EMPTY
76	165	2	-1	0	-1	bp += 3	EMPTY	EMPTY
76	166	3	-1	0	-1	len -= 3	len	EMPTY
76	168	1	0	0	-1	reserved = * bp	EMPTY	EMPTY
76	169	2	-1	0	-1	bp += 1	EMPTY	EMPTY
76	170	3	-1	0	-1	len -= 1	len	EMPTY
76	172	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
76	173	2	-1	0	-1	bittok2str _ nosep ( geneve _ flag _ values  strlit  flags ) ) ) ;	flags	EMPTY
76	174	3	-1	0	-1	nd _ print ( ( ndo  strlit  vni ) ) ;	EMPTY	EMPTY
76	176	1	0	0	0	if ( reserved )	EMPTY	EMPTY
76	177	3	-1	0	-1	nd _ print ( ( ndo  strlit  reserved ) ) ;	EMPTY	EMPTY
76	179	1	0	0	0	if ( ndo -> ndo _ eflag )	ndo _ eflag	EMPTY
76	180	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
76	181	3	-1	0	-1	tok2str ( ethertype _ values  strlit  prot )  prot ) ) ;	tok2str	EMPTY
76	183	1	0	0	-1	opts _ len = ( ver _ opt & hdr _ opts _ len _ mask ) * 4	EMPTY	EMPTY
76	185	1	0	0	0	if ( len < opts _ len ) {	len	EMPTY
76	186	2	-1	0	-1	nd _ print ( ( ndo ,  "  truncated-geneve - %u bytes missing "  ,	EMPTY	EMPTY
76	187	2	-1	0	-1	len - opts _ len ) ) ;	len	EMPTY
76	188	2	-1	0	-1	return ;	EMPTY	EMPTY
76	189	3	-1	0	-1	}	EMPTY	EMPTY
76	191	1	0	0	0	nd _ tcheck2 ( * bp  opts _ len ) ;	EMPTY	EMPTY
76	193	1	0	0	0	if ( opts _ len > 0 ) {	EMPTY	EMPTY
76	194	3	-1	0	-1	nd _ print ( ( ndo ,  " , options [ "  ) ) ;	EMPTY	EMPTY
76	196	1	0	0	0	if ( ndo -> ndo _ vflag )	ndo _ vflag	EMPTY
76	197	2	-1	0	-1	geneve _ opts _ print ( ndo , bp , opts _ len ) ;	EMPTY	EMPTY
76	198	2	-1	0	-1	else	EMPTY	EMPTY
76	199	3	-1	0	-1	nd _ print ( ( ndo ,  " %u bytes "  , opts _ len ) ) ;	EMPTY	EMPTY
76	201	1	0	0	0	nd _ print ( ( ndo ,  " ] "  ) ) ;	EMPTY	EMPTY
76	202	3	-1	0	-1	}	EMPTY	EMPTY
76	204	1	0	0	-1	bp += opts _ len	EMPTY	EMPTY
76	205	3	-1	0	-1	len -= opts _ len	len	EMPTY
76	207	1	0	0	0	if ( ndo -> ndo _ vflag < numconst )	ndo _ vflag	EMPTY
76	208	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
76	209	2	-1	0	-1	else	EMPTY	EMPTY
76	210	3	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
76	212	1	0	0	0	if ( ethertype _ print ( ndo , prot , bp , len , len ) == 0 ) {	len len	EMPTY
76	213	2	-1	0	-1	if ( prot == ethertype _ teb )	EMPTY	EMPTY
76	214	2	-1	0	-1	ether _ print ( ndo , bp , len , len , null , null ) ;	len len	EMPTY
76	215	2	-1	0	-1	else	EMPTY	EMPTY
76	216	2	-1	0	-1	nd _ print ( ( ndo ,  " geneve-proto-0x%x "  , prot ) ) ;	EMPTY	EMPTY
76	217	3	-1	0	-1	}	EMPTY	EMPTY
76	219	1	0	0	0	return	EMPTY	EMPTY
76	221	1	0	0	-1	trunc :	EMPTY	EMPTY
76	222	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
76	223	3	-1	0	-1	}	EMPTY	EMPTY
104	62	1	0	0	-1	static const struct tok ppptype2str [ ] = {	EMPTY	EMPTY
104	63	2	-1	0	-1	{ ppp _ ip  strlit }	EMPTY	EMPTY
104	64	2	-1	0	-1	{ ppp _ osi  strlit }	EMPTY	EMPTY
104	65	2	-1	0	-1	{ ppp _ ns  strlit }	EMPTY	EMPTY
104	66	2	-1	0	-1	{ ppp _ decnet  strlit }	EMPTY	EMPTY
104	67	2	-1	0	-1	{ ppp _ apple  strlit }	EMPTY	EMPTY
104	68	2	-1	0	-1	{ ppp _ ipx  strlit }	EMPTY	EMPTY
104	69	2	-1	0	-1	{ ppp _ vjc  strlit }	EMPTY	EMPTY
104	70	2	-1	0	-1	{ ppp _ vjnc  strlit }	EMPTY	EMPTY
104	71	2	-1	0	-1	{ ppp _ brpdu  strlit }	EMPTY	EMPTY
104	72	2	-1	0	-1	{ ppp _ stii  strlit }	EMPTY	EMPTY
104	73	2	-1	0	-1	{ ppp _ vines  strlit }	EMPTY	EMPTY
104	74	2	-1	0	-1	{ ppp _ mpls _ ucast  strlit }	EMPTY	EMPTY
104	75	2	-1	0	-1	{ ppp _ mpls _ mcast  strlit }	EMPTY	EMPTY
104	76	2	-1	0	-1	{ ppp _ comp  strlit }	EMPTY	EMPTY
104	77	2	-1	0	-1	{ ppp _ ml  strlit }	EMPTY	EMPTY
104	78	3	-1	0	-1	{ ppp _ ipv6  strlit }	EMPTY	EMPTY
104	80	1	0	0	-1	{ ppp _ hello  strlit }	EMPTY	EMPTY
104	81	2	-1	0	-1	{ ppp _ luxcom  strlit }	EMPTY	EMPTY
104	82	2	-1	0	-1	{ ppp _ sns  strlit }	EMPTY	EMPTY
104	83	2	-1	0	-1	{ ppp _ ipcp  strlit }	EMPTY	EMPTY
104	84	2	-1	0	-1	{ ppp _ osicp  strlit }	EMPTY	EMPTY
104	85	2	-1	0	-1	{ ppp _ nscp  strlit }	EMPTY	EMPTY
104	86	2	-1	0	-1	{ ppp _ decnetcp  strlit }	EMPTY	EMPTY
104	87	2	-1	0	-1	{ ppp _ applecp  strlit }	EMPTY	EMPTY
104	88	2	-1	0	-1	{ ppp _ ipxcp  strlit }	EMPTY	EMPTY
104	89	2	-1	0	-1	{ ppp _ stiicp  strlit }	EMPTY	EMPTY
104	90	2	-1	0	-1	{ ppp _ vinescp  strlit }	EMPTY	EMPTY
104	91	2	-1	0	-1	{ ppp _ ipv6cp  strlit }	EMPTY	EMPTY
104	92	3	-1	0	-1	{ ppp _ mplscp  strlit }	EMPTY	EMPTY
104	94	1	0	0	-1	{ ppp _ lcp  strlit }	EMPTY	EMPTY
104	95	2	-1	0	-1	{ ppp _ pap  strlit }	EMPTY	EMPTY
104	96	2	-1	0	-1	{ ppp _ lqm  strlit }	EMPTY	EMPTY
104	97	2	-1	0	-1	{ ppp _ chap  strlit }	EMPTY	EMPTY
104	98	2	-1	0	-1	{ ppp _ eap  strlit }	EMPTY	EMPTY
104	99	2	-1	0	-1	{ ppp _ spap  strlit }	EMPTY	EMPTY
104	100	2	-1	0	-1	{ ppp _ spap _ old  strlit }	EMPTY	EMPTY
104	101	2	-1	0	-1	{ ppp _ bacp  strlit }	EMPTY	EMPTY
104	102	2	-1	0	-1	{ ppp _ bap  strlit }	EMPTY	EMPTY
104	103	2	-1	0	-1	{ ppp _ mpcp  strlit }	EMPTY	EMPTY
104	104	2	-1	0	-1	{ ppp _ ccp  strlit }	EMPTY	EMPTY
104	105	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
104	106	3	-1	0	-1	} ;	EMPTY	EMPTY
104	110	1	1	1	-1	# define cpcodes _ vext numconst	EMPTY	EMPTY
104	111	2	-1	1	-1	# define cpcodes _ conf _ req numconst	EMPTY	EMPTY
104	112	2	-1	1	-1	# define cpcodes _ conf _ ack numconst	EMPTY	EMPTY
104	113	2	-1	1	-1	# define cpcodes _ conf _ nak numconst	EMPTY	EMPTY
104	114	2	-1	1	-1	# define cpcodes _ conf _ rej numconst	EMPTY	EMPTY
104	115	2	-1	1	-1	# define cpcodes _ term _ req numconst	EMPTY	EMPTY
104	116	2	-1	1	-1	# define cpcodes _ term _ ack numconst	EMPTY	EMPTY
104	117	2	-1	1	-1	# define cpcodes _ code _ rej numconst	EMPTY	EMPTY
104	118	2	-1	1	-1	# define cpcodes _ prot _ rej numconst	EMPTY	EMPTY
104	119	2	-1	1	-1	# define cpcodes _ echo _ req numconst	EMPTY	EMPTY
104	120	2	-1	1	-1	# define cpcodes _ echo _ rpl numconst	EMPTY	EMPTY
104	121	2	-1	1	-1	# define cpcodes _ disc _ req numconst	EMPTY	EMPTY
104	122	2	-1	1	-1	# define cpcodes _ id numconst	EMPTY	EMPTY
104	123	2	-1	1	-1	# define cpcodes _ time _ rem numconst	EMPTY	EMPTY
104	124	2	-1	1	-1	# define cpcodes _ reset _ req numconst	EMPTY	EMPTY
104	125	3	-1	1	-1	# define cpcodes _ reset _ rep numconst	EMPTY	EMPTY
104	127	1	1	0	-1	static const struct tok cpcodes [ ] = {	EMPTY	EMPTY
104	128	2	-1	1	-1	{ cpcodes _ vext  strlit }	EMPTY	EMPTY
104	129	2	-1	0	-1	{ cpcodes _ conf _ req  strlit }	EMPTY	EMPTY
104	130	2	-1	0	-1	{ cpcodes _ conf _ ack  strlit }	EMPTY	EMPTY
104	131	2	-1	0	-1	{ cpcodes _ conf _ nak  strlit }	EMPTY	EMPTY
104	132	2	-1	0	-1	{ cpcodes _ conf _ rej  strlit }	EMPTY	EMPTY
104	133	2	-1	0	-1	{ cpcodes _ term _ req  strlit }	EMPTY	EMPTY
104	134	2	-1	0	-1	{ cpcodes _ term _ ack  strlit }	EMPTY	EMPTY
104	135	2	-1	0	-1	{ cpcodes _ code _ rej  strlit }	EMPTY	EMPTY
104	136	2	-1	0	-1	{ cpcodes _ prot _ rej  strlit }	EMPTY	EMPTY
104	137	2	-1	0	-1	{ cpcodes _ echo _ req  strlit }	EMPTY	EMPTY
104	138	2	-1	0	-1	{ cpcodes _ echo _ rpl  strlit }	EMPTY	EMPTY
104	139	2	-1	0	-1	{ cpcodes _ disc _ req  strlit }	EMPTY	EMPTY
104	140	2	-1	1	-1	{ cpcodes _ id  strlit }	EMPTY	EMPTY
104	141	2	-1	1	-1	{ cpcodes _ time _ rem  strlit }	EMPTY	EMPTY
104	142	2	-1	1	-1	{ cpcodes _ reset _ req  strlit }	EMPTY	EMPTY
104	143	2	-1	1	-1	{ cpcodes _ reset _ rep  strlit }	EMPTY	EMPTY
104	144	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
104	145	3	-1	0	-1	} ;	EMPTY	EMPTY
104	149	1	1	1	-1	# define lcpopt _ vext numconst	EMPTY	EMPTY
104	150	2	-1	0	-1	# define lcpopt _ mru numconst	EMPTY	EMPTY
104	151	2	-1	0	-1	# define lcpopt _ accm numconst	EMPTY	EMPTY
104	152	2	-1	0	-1	# define lcpopt _ ap numconst	EMPTY	EMPTY
104	153	2	-1	0	-1	# define lcpopt _ qp numconst	EMPTY	EMPTY
104	154	2	-1	0	-1	# define lcpopt _ mn numconst	EMPTY	EMPTY
104	155	2	-1	0	-1	# define lcpopt _ dep6 numconst	EMPTY	EMPTY
104	156	2	-1	0	-1	# define lcpopt _ pfc numconst	EMPTY	EMPTY
104	157	2	-1	0	-1	# define lcpopt _ acfc numconst	EMPTY	EMPTY
104	158	2	-1	0	-1	# define lcpopt _ fcsalt numconst	EMPTY	EMPTY
104	159	2	-1	0	-1	# define lcpopt _ sdp numconst	EMPTY	EMPTY
104	160	2	-1	0	-1	# define lcpopt _ nummode numconst	EMPTY	EMPTY
104	161	2	-1	0	-1	# define lcpopt _ dep12 numconst	EMPTY	EMPTY
104	162	2	-1	0	-1	# define lcpopt _ cback numconst	EMPTY	EMPTY
104	163	2	-1	0	-1	# define lcpopt _ dep14 numconst	EMPTY	EMPTY
104	164	2	-1	0	-1	# define lcpopt _ dep15 numconst	EMPTY	EMPTY
104	165	2	-1	0	-1	# define lcpopt _ dep16 numconst	EMPTY	EMPTY
104	166	2	-1	0	-1	# define lcpopt _ mlmrru numconst	EMPTY	EMPTY
104	167	2	-1	0	-1	# define lcpopt _ mlssnhf numconst	EMPTY	EMPTY
104	168	2	-1	0	-1	# define lcpopt _ mled numconst	EMPTY	EMPTY
104	169	2	-1	0	-1	# define lcpopt _ prop numconst	EMPTY	EMPTY
104	170	2	-1	0	-1	# define lcpopt _ dceid numconst	EMPTY	EMPTY
104	171	2	-1	0	-1	# define lcpopt _ mpp numconst	EMPTY	EMPTY
104	172	2	-1	0	-1	# define lcpopt _ ld numconst	EMPTY	EMPTY
104	173	2	-1	0	-1	# define lcpopt _ lcpaopt numconst	EMPTY	EMPTY
104	174	2	-1	0	-1	# define lcpopt _ cobs numconst	EMPTY	EMPTY
104	175	2	-1	0	-1	# define lcpopt _ pe numconst	EMPTY	EMPTY
104	176	2	-1	0	-1	# define lcpopt _ mlhf numconst	EMPTY	EMPTY
104	177	2	-1	0	-1	# define lcpopt _ i18n numconst	EMPTY	EMPTY
104	178	3	-1	0	-1	# define lcpopt _ sdlos numconst	EMPTY	EMPTY
104	179	1	0	0	-1	# define lcpopt _ pppmux numconst	EMPTY	EMPTY
104	181	1	0	0	-1	# define lcpopt _ min lcpopt _ vext	EMPTY	EMPTY
104	182	3	-1	0	-1	# define lcpopt _ max lcpopt _ pppmux	EMPTY	EMPTY
104	184	1	1	0	-1	static const char * lcpconfopts [ ] = {	EMPTY	EMPTY
104	185	2	-1	1	-1	strlit	EMPTY	EMPTY
104	186	2	-1	1	-1	strlit	EMPTY	EMPTY
104	187	2	-1	1	-1	strlit	EMPTY	EMPTY
104	188	2	-1	1	-1	strlit	EMPTY	EMPTY
104	189	2	-1	1	-1	strlit	EMPTY	EMPTY
104	190	2	-1	1	-1	strlit	EMPTY	EMPTY
104	191	2	-1	1	-1	strlit	EMPTY	EMPTY
104	192	2	-1	1	-1	strlit	EMPTY	EMPTY
104	193	2	-1	1	-1	strlit	EMPTY	EMPTY
104	194	2	-1	1	-1	strlit	EMPTY	EMPTY
104	195	2	-1	1	-1	strlit	EMPTY	EMPTY
104	196	2	-1	1	-1	strlit	EMPTY	EMPTY
104	197	2	-1	1	-1	strlit	EMPTY	EMPTY
104	198	2	-1	1	-1	strlit	EMPTY	EMPTY
104	199	2	-1	1	-1	strlit	EMPTY	EMPTY
104	200	2	-1	1	-1	strlit	EMPTY	EMPTY
104	201	2	-1	1	-1	strlit	EMPTY	EMPTY
104	202	2	-1	1	-1	strlit	EMPTY	EMPTY
104	203	2	-1	1	-1	strlit	EMPTY	EMPTY
104	204	2	-1	1	-1	strlit	EMPTY	EMPTY
104	205	2	-1	1	-1	strlit	EMPTY	EMPTY
104	206	2	-1	1	-1	strlit	EMPTY	EMPTY
104	207	2	-1	1	-1	strlit	EMPTY	EMPTY
104	208	2	-1	1	-1	strlit	EMPTY	EMPTY
104	209	2	-1	1	-1	strlit	EMPTY	EMPTY
104	210	2	-1	1	-1	strlit	EMPTY	EMPTY
104	211	2	-1	1	-1	strlit	EMPTY	EMPTY
104	212	2	-1	1	-1	strlit	EMPTY	EMPTY
104	213	3	-1	1	-1	strlit	EMPTY	EMPTY
104	214	1	1	1	-1	strlit	EMPTY	EMPTY
104	215	2	-1	1	-1	strlit	EMPTY	EMPTY
104	216	3	-1	0	-1	} ;	EMPTY	EMPTY
104	222	1	1	1	-1	# define ccpopt _ oui numconst	EMPTY	EMPTY
104	223	2	-1	1	-1	# define ccpopt _ pred1 numconst	EMPTY	EMPTY
104	224	2	-1	1	-1	# define ccpopt _ pred2 numconst	EMPTY	EMPTY
104	225	2	-1	1	-1	# define ccpopt _ pjump numconst	EMPTY	EMPTY
104	227	2	-1	1	-1	# define ccpopt _ hpppc numconst	EMPTY	EMPTY
104	228	2	-1	1	-1	# define ccpopt _ staclzs numconst	EMPTY	EMPTY
104	229	2	-1	1	-1	# define ccpopt _ mppc numconst	EMPTY	EMPTY
104	230	2	-1	1	-1	# define ccpopt _ gfza numconst	EMPTY	EMPTY
104	231	2	-1	1	-1	# define ccpopt _ v42bis numconst	EMPTY	EMPTY
104	232	2	-1	1	-1	# define ccpopt _ bsdcomp numconst	EMPTY	EMPTY
104	234	2	-1	1	-1	# define ccpopt _ lzsdcp numconst	EMPTY	EMPTY
104	235	2	-1	1	-1	# define ccpopt _ mvrca numconst	EMPTY	EMPTY
104	236	2	-1	1	-1	# define ccpopt _ dec numconst	EMPTY	EMPTY
104	237	2	-1	1	-1	# define ccpopt _ deflate numconst	EMPTY	EMPTY
104	239	3	-1	1	-1	# define ccpopt _ resv numconst	EMPTY	EMPTY
104	241	1	0	0	-1	static const struct tok ccpconfopts _ values [ ] = {	EMPTY	EMPTY
104	242	2	-1	0	-1	{ ccpopt _ oui  strlit }	EMPTY	EMPTY
104	243	2	-1	0	-1	{ ccpopt _ pred1  strlit }	EMPTY	EMPTY
104	244	2	-1	0	-1	{ ccpopt _ pred2  strlit }	EMPTY	EMPTY
104	245	2	-1	0	-1	{ ccpopt _ pjump  strlit }	EMPTY	EMPTY
104	246	2	-1	0	-1	{ ccpopt _ hpppc  strlit }	EMPTY	EMPTY
104	247	2	-1	0	-1	{ ccpopt _ staclzs  strlit }	EMPTY	EMPTY
104	248	2	-1	0	-1	{ ccpopt _ mppc  strlit }	EMPTY	EMPTY
104	249	2	-1	0	-1	{ ccpopt _ gfza  strlit }	EMPTY	EMPTY
104	250	2	-1	0	-1	{ ccpopt _ v42bis  strlit }	EMPTY	EMPTY
104	251	2	-1	0	-1	{ ccpopt _ bsdcomp  strlit }	EMPTY	EMPTY
104	252	2	-1	0	-1	{ ccpopt _ lzsdcp  strlit }	EMPTY	EMPTY
104	253	2	-1	0	-1	{ ccpopt _ mvrca  strlit }	EMPTY	EMPTY
104	254	2	-1	0	-1	{ ccpopt _ dec  strlit }	EMPTY	EMPTY
104	255	2	-1	0	-1	{ ccpopt _ deflate  strlit }	EMPTY	EMPTY
104	256	2	-1	0	-1	{ ccpopt _ resv  strlit }	EMPTY	EMPTY
104	257	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
104	258	3	-1	0	-1	} ;	EMPTY	EMPTY
104	262	1	1	1	-1	# define bacpopt _ fpeer numconst	EMPTY	EMPTY
104	264	1	0	0	-1	static const struct tok bacconfopts _ values [ ] = {	EMPTY	EMPTY
104	265	2	-1	0	-1	{ bacpopt _ fpeer  strlit }	EMPTY	EMPTY
104	266	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
104	267	3	-1	0	-1	} ;	EMPTY	EMPTY
104	273	1	1	1	-1	# define ipcpopt _ 2addr numconst	EMPTY	EMPTY
104	274	2	-1	1	-1	# define ipcpopt _ ipcomp numconst	EMPTY	EMPTY
104	275	2	-1	1	-1	# define ipcpopt _ addr numconst	EMPTY	EMPTY
104	276	2	-1	1	-1	# define ipcpopt _ mobile4 numconst	EMPTY	EMPTY
104	277	2	-1	1	-1	# define ipcpopt _ pridns numconst	EMPTY	EMPTY
104	278	2	-1	1	-1	# define ipcpopt _ prinbns numconst	EMPTY	EMPTY
104	279	2	-1	1	-1	# define ipcpopt _ secdns numconst	EMPTY	EMPTY
104	280	3	-1	1	-1	# define ipcpopt _ secnbns numconst	EMPTY	EMPTY
104	282	1	0	0	-1	static const struct tok ipcpopt _ values [ ] = {	EMPTY	EMPTY
104	283	2	-1	0	-1	{ ipcpopt _ 2addr  strlit }	EMPTY	EMPTY
104	284	2	-1	0	-1	{ ipcpopt _ ipcomp  strlit }	EMPTY	EMPTY
104	285	2	-1	0	-1	{ ipcpopt _ addr  strlit }	EMPTY	EMPTY
104	286	2	-1	0	-1	{ ipcpopt _ mobile4  strlit }	EMPTY	EMPTY
104	287	2	-1	0	-1	{ ipcpopt _ pridns  strlit }	EMPTY	EMPTY
104	288	2	-1	0	-1	{ ipcpopt _ prinbns  strlit }	EMPTY	EMPTY
104	289	2	-1	0	-1	{ ipcpopt _ secdns  strlit }	EMPTY	EMPTY
104	290	2	-1	0	-1	{ ipcpopt _ secnbns  strlit }	EMPTY	EMPTY
104	291	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
104	292	3	-1	0	-1	} ;	EMPTY	EMPTY
104	294	1	1	1	-1	# define ipcpopt _ ipcomp _ hdrcomp numconst	EMPTY	EMPTY
104	295	3	-1	0	-1	# define ipcpopt _ ipcomp _ minlen numconst	EMPTY	EMPTY
104	297	1	0	0	-1	static const struct tok ipcpopt _ compproto _ values [ ] = {	EMPTY	EMPTY
104	298	2	-1	0	-1	{ ppp _ vjc  strlit }	EMPTY	EMPTY
104	299	2	-1	0	-1	{ ipcpopt _ ipcomp _ hdrcomp  strlit }	EMPTY	EMPTY
104	300	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
104	301	3	-1	0	-1	} ;	EMPTY	EMPTY
104	303	1	0	0	-1	static const struct tok ipcpopt _ compproto _ subopt _ values [ ] = {	EMPTY	EMPTY
104	304	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
104	305	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
104	306	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
104	307	3	-1	0	-1	} ;	EMPTY	EMPTY
104	310	1	1	1	-1	# define ip6cp _ ifid numconst	EMPTY	EMPTY
104	312	1	0	0	-1	static const struct tok ip6cpopt _ values [ ] = {	EMPTY	EMPTY
104	313	2	-1	0	-1	{ ip6cp _ ifid  strlit }	EMPTY	EMPTY
104	314	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
104	315	3	-1	0	-1	} ;	EMPTY	EMPTY
104	327	1	1	1	-1	# define authalg _ chapmd5 numconst	EMPTY	EMPTY
104	328	2	-1	1	-1	# define authalg _ mschap1 numconst	EMPTY	EMPTY
104	329	3	-1	1	-1	# define authalg _ mschap2 numconst	EMPTY	EMPTY
104	331	1	0	0	-1	static const struct tok authalg _ values [ ] = {	EMPTY	EMPTY
104	332	2	-1	0	-1	{ authalg _ chapmd5  strlit }	EMPTY	EMPTY
104	333	2	-1	0	-1	{ authalg _ mschap1  strlit }	EMPTY	EMPTY
104	334	2	-1	0	-1	{ authalg _ mschap2  strlit }	EMPTY	EMPTY
104	335	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
104	336	3	-1	0	-1	} ;	EMPTY	EMPTY
104	341	1	1	1	-1	# define medclass _ null numconst	EMPTY	EMPTY
104	342	2	-1	1	-1	# define medclass _ local numconst	EMPTY	EMPTY
104	343	2	-1	1	-1	# define medclass _ ipv4 numconst	EMPTY	EMPTY
104	344	2	-1	1	-1	# define medclass _ mac numconst	EMPTY	EMPTY
104	345	2	-1	1	-1	# define medclass _ mnb numconst	EMPTY	EMPTY
104	346	3	-1	1	-1	# define medclass _ psndn numconst	EMPTY	EMPTY
104	349	1	1	1	-1	# define callback _ auth numconst	EMPTY	EMPTY
104	350	2	-1	1	-1	# define callback _ dstr numconst	EMPTY	EMPTY
104	351	2	-1	1	-1	# define callback _ lid numconst	EMPTY	EMPTY
104	352	2	-1	1	-1	# define callback _ e164 numconst	EMPTY	EMPTY
104	353	2	-1	1	-1	# define callback _ x500 numconst	EMPTY	EMPTY
104	354	3	-1	1	-1	# define callback _ cbcp numconst	EMPTY	EMPTY
104	356	1	0	0	-1	static const struct tok ppp _ callback _ values [ ] = {	EMPTY	EMPTY
104	357	2	-1	0	-1	{ callback _ auth  strlit }	EMPTY	EMPTY
104	358	2	-1	0	-1	{ callback _ dstr  strlit }	EMPTY	EMPTY
104	359	2	-1	0	-1	{ callback _ lid  strlit }	EMPTY	EMPTY
104	360	2	-1	0	-1	{ callback _ e164  strlit }	EMPTY	EMPTY
104	361	2	-1	0	-1	{ callback _ x500  strlit }	EMPTY	EMPTY
104	362	2	-1	0	-1	{ callback _ cbcp  strlit }	EMPTY	EMPTY
104	363	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
104	364	3	-1	0	-1	} ;	EMPTY	EMPTY
104	368	1	1	1	-1	# define chap _ chal numconst	EMPTY	EMPTY
104	369	2	-1	0	-1	# define chap _ resp numconst	EMPTY	EMPTY
104	370	2	-1	0	-1	# define chap _ succ numconst	EMPTY	EMPTY
104	371	3	-1	0	-1	# define chap _ fail numconst	EMPTY	EMPTY
104	373	1	0	0	-1	static const struct tok chapcode _ values [ ] = {	EMPTY	EMPTY
104	374	2	-1	0	-1	{ chap _ chal  strlit }	EMPTY	EMPTY
104	375	2	-1	0	-1	{ chap _ resp  strlit }	EMPTY	EMPTY
104	376	2	-1	0	-1	{ chap _ succ  strlit }	EMPTY	EMPTY
104	377	2	-1	0	-1	{ chap _ fail  strlit }	EMPTY	EMPTY
104	378	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
104	379	3	-1	0	-1	} ;	EMPTY	EMPTY
104	383	1	1	1	-1	# define pap _ areq numconst	EMPTY	EMPTY
104	384	2	-1	0	-1	# define pap _ aack numconst	EMPTY	EMPTY
104	385	3	-1	0	-1	# define pap _ anak numconst	EMPTY	EMPTY
104	387	1	0	0	-1	static const struct tok papcode _ values [ ] = {	EMPTY	EMPTY
104	388	2	-1	0	-1	{ pap _ areq  strlit }	EMPTY	EMPTY
104	389	2	-1	0	-1	{ pap _ aack  strlit }	EMPTY	EMPTY
104	390	2	-1	0	-1	{ pap _ anak  strlit }	EMPTY	EMPTY
104	391	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
104	392	3	-1	0	-1	} ;	EMPTY	EMPTY
104	395	1	1	1	-1	# define bap _ callreq numconst	EMPTY	EMPTY
104	396	2	-1	0	-1	# define bap _ callres numconst	EMPTY	EMPTY
104	397	2	-1	0	-1	# define bap _ cbreq numconst	EMPTY	EMPTY
104	398	2	-1	0	-1	# define bap _ cbres numconst	EMPTY	EMPTY
104	399	2	-1	0	-1	# define bap _ ldqreq numconst	EMPTY	EMPTY
104	400	2	-1	0	-1	# define bap _ ldqres numconst	EMPTY	EMPTY
104	401	2	-1	0	-1	# define bap _ csind numconst	EMPTY	EMPTY
104	402	3	-1	0	-1	# define bap _ csres numconst	EMPTY	EMPTY
104	404	1	0	0	0	static int print _ lcp _ config _ options ( netdissect _ options *  const u _ char * p  int )	print _ lcp _ config _ options	EMPTY
104	405	2	-1	0	-1	static int print _ ipcp _ config _ options ( netdissect _ options *  const u _ char * p  int )	print _ ipcp _ config _ options	EMPTY
104	406	2	-1	0	-1	static int print _ ip6cp _ config _ options ( netdissect _ options *  const u _ char * p  int )	print _ ip6cp _ config _ options	EMPTY
104	407	2	-1	0	-1	static int print _ ccp _ config _ options ( netdissect _ options *  const u _ char * p  int )	print _ ccp _ config _ options	EMPTY
104	408	2	-1	0	-1	static int print _ bacp _ config _ options ( netdissect _ options *  const u _ char * p  int )	print _ bacp _ config _ options	EMPTY
104	409	3	-1	0	-1	static void handle _ ppp ( netdissect _ options *  u _ int proto  const u _ char * p  int length ) ;	handle _ ppp	EMPTY
104	412	1	0	0	-1	static void	EMPTY	EMPTY
104	413	2	-1	0	-1	handle _ ctrl _ proto ( netdissect _ options * ndo	handle _ ctrl _ proto	EMPTY
104	414	2	-1	0	-1	u _ int proto  const u _ char * pptr  int length )	EMPTY	EMPTY
104	415	2	-1	0	-1	{	EMPTY	EMPTY
104	416	2	-1	0	-1	const char * typestr ;	EMPTY	EMPTY
104	417	2	-1	0	-1	u _ int code , len ;	len	EMPTY
104	418	2	-1	0	-1	int ( * pfunc ) ( netdissect _ options * , const u _ char * , int ) ;	EMPTY	EMPTY
104	419	2	-1	0	-1	int x , j ;	EMPTY	EMPTY
104	420	3	-1	0	-1	const u _ char * tptr ;	EMPTY	EMPTY
104	422	1	0	0	-1	tptr = pptr	EMPTY	EMPTY
104	424	1	0	0	-1	typestr = tok2str ( ppptype2str ,  " unknown ctrl-proto (0x%04x) "  , proto )	tok2str	EMPTY
104	425	3	-1	0	-1	nd _ print ( ( ndo  strlit  typestr ) ) ;	EMPTY	EMPTY
104	427	1	0	0	-1	if ( length < numconst )	EMPTY	EMPTY
104	428	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
104	429	3	-1	0	-1	nd _ tcheck2 ( * tptr  numconst ) ;	EMPTY	EMPTY
104	431	1	0	0	-1	code = * tptr ++	EMPTY	EMPTY
104	433	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
104	434	2	-1	0	-1	tok2str ( cpcodes  strlit  code )	tok2str	EMPTY
104	435	3	-1	0	-1	code	EMPTY	EMPTY
104	437	1	1	1	-1	length + numconst ) ) ;	EMPTY	EMPTY
104	439	1	0	0	0	if ( ! ndo -> ndo _ vflag )	ndo _ vflag	EMPTY
104	440	3	-1	0	-1	return	EMPTY	EMPTY
104	442	1	1	0	1	if ( length <= 4 )	EMPTY	EMPTY
104	443	3	-1	1	-1	return	EMPTY	EMPTY
104	445	1	0	0	0	nd _ tcheck2 ( * tptr  numconst ) ;	EMPTY	EMPTY
104	446	2	-1	0	-1	len = extract _ 16bits ( tptr )	len extract _ 16bits	EMPTY
104	447	3	-1	0	-1	tptr += 2	EMPTY	EMPTY
104	449	1	0	0	0	nd _ print ( ( ndo  strlit  len  len - numconst ) ) ;	len len	EMPTY
104	451	1	0	0	0	if ( ndo -> ndo _ vflag > 1 )	ndo _ vflag	EMPTY
104	452	3	-1	0	-1	print _ unknown _ data ( ndo , pptr - 2 ,  " \n\t "  , 6 )	EMPTY	EMPTY
104	455	1	1	0	1	switch ( code ) {	EMPTY	EMPTY
104	456	2	-1	0	-1	case cpcodes _ vext :	EMPTY	EMPTY
104	457	2	-1	0	-1	if ( length < 11 )	EMPTY	EMPTY
104	458	2	-1	0	-1	break	EMPTY	EMPTY
104	459	2	-1	0	-1	nd _ tcheck2 ( * tptr  numconst ) ;	EMPTY	EMPTY
104	460	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 32bits ( tptr ) ) ) ;	EMPTY	EMPTY
104	461	2	-1	0	-1	tptr += 4	EMPTY	EMPTY
104	462	2	-1	0	-1	nd _ tcheck2 ( * tptr  numconst ) ;	EMPTY	EMPTY
104	463	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
104	464	2	-1	0	-1	tok2str ( oui _ values  strlit  extract _ 24bits ( tptr ) )	tok2str	EMPTY
104	465	2	-1	0	-1	extract _ 24bits ( tptr ) ) ) ;	EMPTY	EMPTY
104	467	2	-1	1	-1	break	EMPTY	EMPTY
104	468	2	-1	0	-1	case cpcodes _ conf _ req :	EMPTY	EMPTY
104	469	2	-1	0	-1	case cpcodes _ conf _ ack :	EMPTY	EMPTY
104	470	2	-1	0	-1	case cpcodes _ conf _ nak :	EMPTY	EMPTY
104	471	2	-1	0	-1	case cpcodes _ conf _ rej :	EMPTY	EMPTY
104	472	2	-1	1	-1	x = len - 4	len	EMPTY
104	473	2	-1	0	-1	do {	EMPTY	EMPTY
104	474	2	-1	0	-1	switch ( proto ) {	EMPTY	EMPTY
104	475	2	-1	0	-1	case ppp _ lcp :	EMPTY	EMPTY
104	476	2	-1	0	-1	pfunc = print _ lcp _ config _ options	print _ lcp _ config _ options	EMPTY
104	477	2	-1	0	-1	break	EMPTY	EMPTY
104	478	2	-1	0	-1	case ppp _ ipcp :	EMPTY	EMPTY
104	479	2	-1	0	-1	pfunc = print _ ipcp _ config _ options	print _ ipcp _ config _ options	EMPTY
104	480	2	-1	0	-1	break	EMPTY	EMPTY
104	481	2	-1	0	-1	case ppp _ ipv6cp :	EMPTY	EMPTY
104	482	2	-1	0	-1	pfunc = print _ ip6cp _ config _ options	print _ ip6cp _ config _ options	EMPTY
104	483	2	-1	0	-1	break	EMPTY	EMPTY
104	484	2	-1	0	-1	case ppp _ ccp :	EMPTY	EMPTY
104	485	3	-1	0	-1	pfunc = print _ ccp _ config _ options	print _ ccp _ config _ options	EMPTY
104	486	1	1	0	-1	break	EMPTY	EMPTY
104	487	2	-1	0	-1	case ppp _ bacp :	EMPTY	EMPTY
104	488	2	-1	0	-1	pfunc = print _ bacp _ config _ options	print _ bacp _ config _ options	EMPTY
104	489	2	-1	0	-1	break	EMPTY	EMPTY
104	490	2	-1	0	-1	default :	EMPTY	EMPTY
104	495	2	-1	1	-1	pfunc = null ;	EMPTY	EMPTY
104	496	2	-1	0	-1	break	EMPTY	EMPTY
104	497	3	-1	0	-1	}	EMPTY	EMPTY
104	499	1	0	0	-1	if ( pfunc == null )	EMPTY	EMPTY
104	500	3	-1	0	-1	break ;	EMPTY	EMPTY
104	502	1	0	0	0	if ( ( j = ( * pfunc ) ( ndo , tptr , len ) ) == 0 )	len	EMPTY
104	503	2	-1	0	-1	break	EMPTY	EMPTY
104	504	2	-1	0	-1	x -= j	EMPTY	EMPTY
104	505	2	-1	0	-1	tptr += j	EMPTY	EMPTY
104	506	2	-1	0	-1	}	EMPTY	EMPTY
104	507	3	-1	0	-1	break ;	EMPTY	EMPTY
104	509	1	1	0	-1	case cpcodes _ term _ req :	EMPTY	EMPTY
104	510	2	-1	0	-1	case cpcodes _ term _ ack :	EMPTY	EMPTY
104	512	2	-1	1	-1	break ;	EMPTY	EMPTY
104	513	2	-1	0	-1	case cpcodes _ code _ rej :	EMPTY	EMPTY
104	515	2	-1	1	-1	break ;	EMPTY	EMPTY
104	516	2	-1	0	-1	case cpcodes _ prot _ rej :	EMPTY	EMPTY
104	517	2	-1	0	-1	if ( length < 6 )	EMPTY	EMPTY
104	518	2	-1	0	-1	break	EMPTY	EMPTY
104	519	2	-1	0	-1	nd _ tcheck2 ( * tptr  numconst ) ;	EMPTY	EMPTY
104	520	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
104	521	2	-1	0	-1	tok2str ( ppptype2str  strlit  extract _ 16bits ( tptr ) )	tok2str extract _ 16bits	EMPTY
104	522	2	-1	0	-1	extract _ 16bits ( tptr ) ) ) ;	extract _ 16bits	EMPTY
104	524	2	-1	1	-1	if ( len > 6 ) {	len	EMPTY
104	525	2	-1	0	-1	nd _ print ( ( ndo ,  " \n\t  rejected packet "  ) ) ;	EMPTY	EMPTY
104	526	2	-1	0	-1	print _ unknown _ data ( ndo , tptr + 2 ,  " \n\t     "  , len - 2 ) ;	len	EMPTY
104	527	2	-1	0	-1	}	EMPTY	EMPTY
104	528	2	-1	0	-1	break	EMPTY	EMPTY
104	529	2	-1	0	-1	case cpcodes _ echo _ req :	EMPTY	EMPTY
104	530	2	-1	0	-1	case cpcodes _ echo _ rpl :	EMPTY	EMPTY
104	531	2	-1	0	-1	case cpcodes _ disc _ req :	EMPTY	EMPTY
104	532	2	-1	0	-1	if ( length < 8 )	EMPTY	EMPTY
104	533	2	-1	0	-1	break	EMPTY	EMPTY
104	534	2	-1	0	-1	nd _ tcheck2 ( * tptr  numconst ) ;	EMPTY	EMPTY
104	535	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 32bits ( tptr ) ) ) ;	EMPTY	EMPTY
104	537	2	-1	1	-1	if ( len > 8 ) {	len	EMPTY
104	538	2	-1	0	-1	nd _ print ( ( ndo ,  " \n\t  -----trailing data----- "  ) ) ;	EMPTY	EMPTY
104	539	2	-1	0	-1	nd _ tcheck2 ( tptr [ 4 ] , len - 8 ) ;	len	EMPTY
104	540	2	-1	0	-1	print _ unknown _ data ( ndo , tptr + 4 ,  " \n\t   "  , len - 8 ) ;	len	EMPTY
104	541	2	-1	0	-1	}	EMPTY	EMPTY
104	542	3	-1	0	-1	break	EMPTY	EMPTY
104	543	1	1	0	-1	case cpcodes _ id :	EMPTY	EMPTY
104	544	2	-1	0	-1	if ( length < 8 )	EMPTY	EMPTY
104	545	2	-1	0	-1	break	EMPTY	EMPTY
104	546	2	-1	0	-1	nd _ tcheck2 ( * tptr  numconst ) ;	EMPTY	EMPTY
104	547	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 32bits ( tptr ) ) ) ;	EMPTY	EMPTY
104	549	2	-1	1	-1	if ( len > 8 ) {	len	EMPTY
104	550	2	-1	0	-1	nd _ print ( ( ndo ,  " \n\t  message\n\t     "  ) ) ;	EMPTY	EMPTY
104	551	2	-1	0	-1	if ( fn _ printn ( ndo , tptr + 4 , len - 4 , ndo -> ndo _ snapend ) )	len	EMPTY
104	552	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
104	553	2	-1	0	-1	}	EMPTY	EMPTY
104	554	2	-1	0	-1	break	EMPTY	EMPTY
104	555	2	-1	0	-1	case cpcodes _ time _ rem :	EMPTY	EMPTY
104	556	2	-1	0	-1	if ( length < 12 )	EMPTY	EMPTY
104	557	2	-1	0	-1	break	EMPTY	EMPTY
104	558	2	-1	0	-1	nd _ tcheck2 ( * tptr  numconst ) ;	EMPTY	EMPTY
104	559	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 32bits ( tptr ) ) ) ;	EMPTY	EMPTY
104	560	2	-1	0	-1	nd _ tcheck2 ( * ( tptr + numconst )  numconst ) ;	EMPTY	EMPTY
104	561	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 32bits ( tptr + numconst ) ) ) ;	EMPTY	EMPTY
104	563	2	-1	1	-1	break	EMPTY	EMPTY
104	564	2	-1	0	-1	default :	EMPTY	EMPTY
104	568	2	-1	1	-1	if ( ndo -> ndo _ vflag <= numconst )	ndo _ vflag	EMPTY
104	569	2	-1	0	-1	print _ unknown _ data ( ndo  pptr - numconst  strlit  length + numconst ) ;	EMPTY	EMPTY
104	570	2	-1	0	-1	break	EMPTY	EMPTY
104	571	2	-1	0	-1	}	EMPTY	EMPTY
104	572	3	-1	0	-1	return ;	EMPTY	EMPTY
104	574	1	0	0	-1	trunc :	EMPTY	EMPTY
104	575	2	-1	0	-1	nd _ print ( ( ndo  strlit  typestr ) ) ;	EMPTY	EMPTY
104	576	3	-1	0	-1	}	EMPTY	EMPTY
104	579	1	0	0	-1	static int	EMPTY	EMPTY
104	580	2	-1	0	-1	print _ lcp _ config _ options ( netdissect _ options * ndo	print _ lcp _ config _ options	EMPTY
104	581	2	-1	0	-1	const u _ char * p  int length )	EMPTY	EMPTY
104	582	2	-1	0	-1	{	EMPTY	EMPTY
104	583	3	-1	0	-1	int len , opt ;	len	EMPTY
104	585	1	0	0	0	if ( length < 2 )	EMPTY	EMPTY
104	586	2	-1	0	-1	return 0	EMPTY	EMPTY
104	587	2	-1	0	-1	nd _ tcheck2 ( * p  numconst ) ;	EMPTY	EMPTY
104	588	2	-1	0	-1	len = p [ 1 ]	len	EMPTY
104	589	2	-1	0	-1	opt = p [ 0 ]	EMPTY	EMPTY
104	590	2	-1	0	-1	if ( length < len )	len	EMPTY
104	591	2	-1	0	-1	return 0	EMPTY	EMPTY
104	592	2	-1	0	-1	if ( len < 2 ) {	len	EMPTY
104	593	2	-1	0	-1	if ( ( opt >= lcpopt _ min ) && ( opt <= lcpopt _ max ) )	EMPTY	EMPTY
104	594	2	-1	0	-1	nd _ print ( ( ndo ,  " \n\t  %s option (0x%02x), length %u (length bogus, should be >= 2) "  ,	EMPTY	EMPTY
104	595	2	-1	0	-1	lcpconfopts [ opt ] , opt , len ) ) ;	len	EMPTY
104	596	2	-1	0	-1	else	EMPTY	EMPTY
104	597	2	-1	0	-1	nd _ print ( ( ndo ,  " \n\tunknown lcp option 0x%02x "  , opt ) ) ;	EMPTY	EMPTY
104	598	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
104	599	2	-1	0	-1	}	EMPTY	EMPTY
104	600	2	-1	0	-1	if ( ( opt >= lcpopt _ min ) && ( opt <= lcpopt _ max ) )	EMPTY	EMPTY
104	601	2	-1	0	-1	nd _ print ( ( ndo ,  " \n\t  %s option (0x%02x), length %u "  , lcpconfopts [ opt ] , opt , len ) ) ;	len	EMPTY
104	602	2	-1	0	-1	else {	EMPTY	EMPTY
104	603	2	-1	0	-1	nd _ print ( ( ndo ,  " \n\tunknown lcp option 0x%02x "  , opt ) ) ;	EMPTY	EMPTY
104	604	2	-1	0	-1	return len ;	len	EMPTY
104	605	3	-1	0	-1	}	EMPTY	EMPTY
104	607	1	0	0	0	switch ( opt ) {	EMPTY	EMPTY
104	608	2	-1	0	-1	case lcpopt _ vext :	EMPTY	EMPTY
104	609	2	-1	0	-1	if ( len < 6 ) {	len	EMPTY
104	610	2	-1	0	-1	nd _ print ( ( ndo ,  "  (length bogus, should be >= 6) "  ) ) ;	EMPTY	EMPTY
104	611	2	-1	0	-1	return len ;	len	EMPTY
104	612	2	-1	0	-1	}	EMPTY	EMPTY
104	613	2	-1	0	-1	nd _ tcheck2 ( * ( p + numconst )  numconst ) ;	EMPTY	EMPTY
104	614	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
104	615	2	-1	0	-1	tok2str ( oui _ values  strlit  extract _ 24bits ( p + numconst ) )	tok2str	EMPTY
104	616	2	-1	0	-1	extract _ 24bits ( p + numconst ) ) ) ;	EMPTY	EMPTY
104	617	2	-1	0	-1	# if numconst	EMPTY	EMPTY
104	618	2	-1	0	-1	nd _ tcheck ( p [ numconst ] ) ;	EMPTY	EMPTY
104	619	2	-1	0	-1	nd _ print ( ( ndo  strlit  p [ numconst ] ) ) ;	EMPTY	EMPTY
104	620	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	621	2	-1	0	-1	for ( i = numconst ; i < len - numconst ; i ++ ) {	len	EMPTY
104	622	2	-1	0	-1	nd _ tcheck ( p [ numconst + i ] ) ;	EMPTY	EMPTY
104	623	2	-1	0	-1	nd _ print ( ( ndo  strlit  p [ numconst + i ] ) ) ;	EMPTY	EMPTY
104	624	2	-1	0	-1	}	EMPTY	EMPTY
104	625	2	-1	0	-1	# endif	EMPTY	EMPTY
104	626	2	-1	0	-1	break	EMPTY	EMPTY
104	627	2	-1	0	-1	case lcpopt _ mru :	EMPTY	EMPTY
104	628	2	-1	0	-1	if ( len != 4 ) {	len	EMPTY
104	629	2	-1	0	-1	nd _ print ( ( ndo ,  "  (length bogus, should be = 4) "  ) ) ;	EMPTY	EMPTY
104	630	2	-1	0	-1	return len ;	len	EMPTY
104	631	2	-1	0	-1	}	EMPTY	EMPTY
104	632	2	-1	0	-1	nd _ tcheck2 ( * ( p + numconst )  numconst ) ;	EMPTY	EMPTY
104	633	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 16bits ( p + numconst ) ) ) ;	extract _ 16bits	EMPTY
104	634	2	-1	0	-1	break	EMPTY	EMPTY
104	635	2	-1	0	-1	case lcpopt _ accm :	EMPTY	EMPTY
104	636	3	-1	0	-1	if ( len != 6 ) {	len	EMPTY
104	637	1	0	0	-1	nd _ print ( ( ndo ,  "  (length bogus, should be = 6) "  ) ) ;	EMPTY	EMPTY
104	638	2	-1	0	-1	return len ;	len	EMPTY
104	639	2	-1	0	-1	}	EMPTY	EMPTY
104	640	2	-1	0	-1	nd _ tcheck2 ( * ( p + numconst )  numconst ) ;	EMPTY	EMPTY
104	641	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 32bits ( p + numconst ) ) ) ;	EMPTY	EMPTY
104	642	2	-1	0	-1	break	EMPTY	EMPTY
104	643	2	-1	0	-1	case lcpopt _ ap :	EMPTY	EMPTY
104	644	2	-1	0	-1	if ( len < 4 ) {	len	EMPTY
104	645	2	-1	0	-1	nd _ print ( ( ndo ,  "  (length bogus, should be >= 4) "  ) ) ;	EMPTY	EMPTY
104	646	2	-1	0	-1	return len ;	len	EMPTY
104	647	2	-1	0	-1	}	EMPTY	EMPTY
104	648	2	-1	0	-1	nd _ tcheck2 ( * ( p + numconst )  numconst ) ;	EMPTY	EMPTY
104	649	3	-1	0	-1	nd _ print ( ( ndo  strlit  tok2str ( ppptype2str  strlit  extract _ 16bits ( p + numconst ) ) ) ) ;	tok2str extract _ 16bits	EMPTY
104	651	1	1	0	1	switch ( extract _ 16bits ( p + numconst ) ) {	extract _ 16bits	EMPTY
104	652	2	-1	0	-1	case ppp _ chap :	EMPTY	EMPTY
104	653	2	-1	0	-1	nd _ tcheck ( p [ numconst ] ) ;	EMPTY	EMPTY
104	654	2	-1	0	-1	nd _ print ( ( ndo  strlit  tok2str ( authalg _ values  strlit  p [ numconst ] ) ) ) ;	tok2str	EMPTY
104	655	2	-1	0	-1	break	EMPTY	EMPTY
104	656	2	-1	1	-1	case ppp _ pap :	EMPTY	EMPTY
104	657	2	-1	0	-1	case ppp _ eap :	EMPTY	EMPTY
104	658	2	-1	0	-1	case ppp _ spap :	EMPTY	EMPTY
104	659	2	-1	0	-1	case ppp _ spap _ old :	EMPTY	EMPTY
104	660	2	-1	0	-1	break ;	EMPTY	EMPTY
104	661	2	-1	0	-1	default :	EMPTY	EMPTY
104	662	2	-1	0	-1	print _ unknown _ data ( ndo , p ,  " \n\t "  , len )	len	EMPTY
104	663	2	-1	0	-1	}	EMPTY	EMPTY
104	664	2	-1	0	-1	break ;	EMPTY	EMPTY
104	665	2	-1	0	-1	case lcpopt _ qp :	EMPTY	EMPTY
104	666	2	-1	0	-1	if ( len < numconst ) {	len	EMPTY
104	667	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	668	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
104	669	2	-1	0	-1	}	EMPTY	EMPTY
104	670	2	-1	0	-1	nd _ tcheck2 ( * ( p + numconst )  numconst ) ;	EMPTY	EMPTY
104	671	2	-1	0	-1	if ( extract _ 16bits ( p + numconst ) == ppp _ lqm )	extract _ 16bits	EMPTY
104	672	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	673	2	-1	0	-1	else	EMPTY	EMPTY
104	674	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	675	2	-1	0	-1	break ;	EMPTY	EMPTY
104	676	2	-1	0	-1	case lcpopt _ mn :	EMPTY	EMPTY
104	677	2	-1	0	-1	if ( len != numconst ) {	len	EMPTY
104	678	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	679	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
104	680	3	-1	0	-1	}	EMPTY	EMPTY
104	681	1	0	0	-1	nd _ tcheck2 ( * ( p + numconst )  numconst ) ;	EMPTY	EMPTY
104	682	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 32bits ( p + numconst ) ) ) ;	EMPTY	EMPTY
104	683	2	-1	0	-1	break ;	EMPTY	EMPTY
104	684	2	-1	0	-1	case lcpopt _ pfc :	EMPTY	EMPTY
104	685	2	-1	0	-1	break ;	EMPTY	EMPTY
104	686	2	-1	0	-1	case lcpopt _ acfc :	EMPTY	EMPTY
104	687	2	-1	0	-1	break ;	EMPTY	EMPTY
104	688	2	-1	0	-1	case lcpopt _ ld :	EMPTY	EMPTY
104	689	2	-1	0	-1	if ( len != numconst ) {	len	EMPTY
104	690	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	691	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
104	692	2	-1	0	-1	}	EMPTY	EMPTY
104	693	2	-1	0	-1	nd _ tcheck2 ( * ( p + numconst )  numconst ) ;	EMPTY	EMPTY
104	694	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 16bits ( p + numconst ) ) ) ;	extract _ 16bits	EMPTY
104	695	2	-1	0	-1	break ;	EMPTY	EMPTY
104	696	2	-1	0	-1	case lcpopt _ cback :	EMPTY	EMPTY
104	697	2	-1	0	-1	if ( len < numconst ) {	len	EMPTY
104	698	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	699	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
104	700	2	-1	0	-1	}	EMPTY	EMPTY
104	701	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	702	2	-1	0	-1	nd _ tcheck ( p [ numconst ] ) ;	EMPTY	EMPTY
104	703	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
104	704	2	-1	0	-1	tok2str ( ppp _ callback _ values  strlit  p [ numconst ] )	tok2str	EMPTY
104	705	2	-1	0	-1	p [ numconst ] ) ) ;	EMPTY	EMPTY
104	706	2	-1	0	-1	break ;	EMPTY	EMPTY
104	707	2	-1	0	-1	case lcpopt _ mlmrru :	EMPTY	EMPTY
104	708	2	-1	0	-1	if ( len != numconst ) {	len	EMPTY
104	709	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	710	3	-1	0	-1	return numconst ;	EMPTY	EMPTY
104	711	1	1	0	-1	}	EMPTY	EMPTY
104	712	2	-1	0	-1	nd _ tcheck2 ( * ( p + numconst )  numconst ) ;	EMPTY	EMPTY
104	713	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 16bits ( p + numconst ) ) ) ;	extract _ 16bits	EMPTY
104	714	2	-1	0	-1	break ;	EMPTY	EMPTY
104	715	2	-1	0	-1	case lcpopt _ mled :	EMPTY	EMPTY
104	716	2	-1	0	-1	if ( len < numconst ) {	len	EMPTY
104	717	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	718	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
104	719	2	-1	0	-1	}	EMPTY	EMPTY
104	720	2	-1	0	-1	nd _ tcheck ( p [ numconst ] ) ;	EMPTY	EMPTY
104	721	2	-1	1	-1	switch ( p [ numconst ] ) {	EMPTY	EMPTY
104	722	2	-1	0	-1	case medclass _ null :	EMPTY	EMPTY
104	723	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	724	2	-1	0	-1	break	EMPTY	EMPTY
104	725	2	-1	0	-1	case medclass _ local :	EMPTY	EMPTY
104	726	2	-1	1	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	727	2	-1	0	-1	break	EMPTY	EMPTY
104	728	2	-1	0	-1	case medclass _ ipv4 :	EMPTY	EMPTY
104	729	2	-1	0	-1	if ( len != 7 ) {	len	EMPTY
104	730	2	-1	0	-1	nd _ print ( ( ndo ,  "  (length bogus, should be = 7) "  ) ) ;	EMPTY	EMPTY
104	731	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
104	732	2	-1	0	-1	}	EMPTY	EMPTY
104	733	2	-1	0	-1	nd _ tcheck2 ( * ( p + numconst )  numconst ) ;	EMPTY	EMPTY
104	734	2	-1	0	-1	nd _ print ( ( ndo  strlit  ipaddr _ string ( ndo  p + numconst ) ) ) ;	EMPTY	EMPTY
104	735	2	-1	0	-1	break	EMPTY	EMPTY
104	736	2	-1	0	-1	case medclass _ mac :	EMPTY	EMPTY
104	737	2	-1	0	-1	if ( len != 9 ) {	len	EMPTY
104	738	2	-1	0	-1	nd _ print ( ( ndo ,  "  (length bogus, should be = 9) "  ) ) ;	EMPTY	EMPTY
104	739	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
104	740	3	-1	0	-1	}	EMPTY	EMPTY
104	741	1	1	0	-1	nd _ tcheck2 ( * ( p + numconst )  numconst ) ;	EMPTY	EMPTY
104	742	2	-1	0	-1	nd _ print ( ( ndo  strlit  etheraddr _ string ( ndo  p + numconst ) ) ) ;	EMPTY	EMPTY
104	743	2	-1	0	-1	break	EMPTY	EMPTY
104	744	2	-1	0	-1	case medclass _ mnb :	EMPTY	EMPTY
104	745	2	-1	1	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	746	2	-1	0	-1	break	EMPTY	EMPTY
104	747	2	-1	0	-1	case medclass _ psndn :	EMPTY	EMPTY
104	748	2	-1	1	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	749	2	-1	0	-1	break	EMPTY	EMPTY
104	750	2	-1	0	-1	default :	EMPTY	EMPTY
104	751	2	-1	0	-1	nd _ print ( ( ndo  strlit  p [ numconst ] ) ) ;	EMPTY	EMPTY
104	752	2	-1	0	-1	break	EMPTY	EMPTY
104	753	2	-1	0	-1	}	EMPTY	EMPTY
104	754	3	-1	0	-1	break ;	EMPTY	EMPTY
104	757	1	1	1	-1	# if numconst	EMPTY	EMPTY
104	758	2	-1	0	-1	case lcpopt _ dep6 :	EMPTY	EMPTY
104	759	2	-1	0	-1	case lcpopt _ fcsalt :	EMPTY	EMPTY
104	760	2	-1	0	-1	case lcpopt _ sdp :	EMPTY	EMPTY
104	761	2	-1	0	-1	case lcpopt _ nummode :	EMPTY	EMPTY
104	762	2	-1	0	-1	case lcpopt _ dep12 :	EMPTY	EMPTY
104	763	2	-1	0	-1	case lcpopt _ dep14 :	EMPTY	EMPTY
104	764	2	-1	0	-1	case lcpopt _ dep15 :	EMPTY	EMPTY
104	765	2	-1	0	-1	case lcpopt _ dep16 :	EMPTY	EMPTY
104	766	2	-1	0	-1	case lcpopt _ mlssnhf :	EMPTY	EMPTY
104	767	2	-1	0	-1	case lcpopt _ prop :	EMPTY	EMPTY
104	768	2	-1	0	-1	case lcpopt _ dceid :	EMPTY	EMPTY
104	769	2	-1	0	-1	case lcpopt _ mpp :	EMPTY	EMPTY
104	770	2	-1	0	-1	case lcpopt _ lcpaopt :	EMPTY	EMPTY
104	771	2	-1	0	-1	case lcpopt _ cobs :	EMPTY	EMPTY
104	772	2	-1	0	-1	case lcpopt _ pe :	EMPTY	EMPTY
104	773	2	-1	0	-1	case lcpopt _ mlhf :	EMPTY	EMPTY
104	774	2	-1	0	-1	case lcpopt _ i18n :	EMPTY	EMPTY
104	775	2	-1	0	-1	case lcpopt _ sdlos :	EMPTY	EMPTY
104	776	2	-1	0	-1	case lcpopt _ pppmux :	EMPTY	EMPTY
104	777	2	-1	0	-1	break ;	EMPTY	EMPTY
104	778	2	-1	0	-1	# endif	EMPTY	EMPTY
104	779	2	-1	0	-1	default :	EMPTY	EMPTY
104	784	2	-1	1	-1	if ( ndo -> ndo _ vflag < numconst )	ndo _ vflag	EMPTY
104	785	2	-1	0	-1	print _ unknown _ data ( ndo  & p [ numconst ]  strlit  len - numconst ) ;	len	EMPTY
104	786	2	-1	0	-1	break	EMPTY	EMPTY
104	787	3	-1	0	-1	}	EMPTY	EMPTY
104	789	1	1	0	1	if ( ndo -> ndo _ vflag > numconst )	ndo _ vflag	EMPTY
104	790	3	-1	1	-1	print _ unknown _ data ( ndo  & p [ numconst ]  strlit  len - numconst ) ;	len	EMPTY
104	792	1	0	0	0	return len	len	EMPTY
104	794	1	0	0	-1	trunc :	EMPTY	EMPTY
104	795	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	796	2	-1	0	-1	return 0	EMPTY	EMPTY
104	797	3	-1	0	-1	}	EMPTY	EMPTY
104	800	1	0	0	-1	static const struct tok ppp _ ml _ flag _ values [ ] = {	ppp _ ml _ flag _ values	EMPTY
104	801	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
104	802	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
104	803	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
104	804	3	-1	0	-1	} ;	EMPTY	EMPTY
104	806	1	0	0	-1	static void	EMPTY	EMPTY
104	807	2	-1	0	-1	handle _ mlppp ( netdissect _ options * ndo	EMPTY	EMPTY
104	808	2	-1	0	-1	const u _ char * p  int length )	EMPTY	EMPTY
104	809	2	-1	0	-1	{	EMPTY	EMPTY
104	810	2	-1	0	-1	if ( ! ndo -> ndo _ eflag )	ndo _ eflag	EMPTY
104	811	3	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	813	1	1	0	1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
104	814	2	-1	1	-1	( extract _ 16bits ( p ) ) & numconst	extract _ 16bits	EMPTY
104	815	2	-1	0	-1	bittok2str ( ppp _ ml _ flag _ values  strlit  * p & numconst )	ppp _ ml _ flag _ values	EMPTY
104	816	2	-1	0	-1	length ) ) ;	EMPTY	EMPTY
104	817	3	-1	0	-1	}	EMPTY	EMPTY
104	820	1	0	0	-1	static void	EMPTY	EMPTY
104	821	2	-1	0	-1	handle _ chap ( netdissect _ options * ndo	handle _ chap	EMPTY
104	822	2	-1	0	-1	const u _ char * p  int length )	EMPTY	EMPTY
104	823	2	-1	0	-1	{	EMPTY	EMPTY
104	824	2	-1	0	-1	u _ int code , len ;	len	EMPTY
104	825	2	-1	0	-1	int val _ size , name _ size , msg _ size ;	EMPTY	EMPTY
104	826	2	-1	0	-1	const u _ char * p0 ;	EMPTY	EMPTY
104	827	3	-1	0	-1	int i ;	EMPTY	EMPTY
104	829	1	0	0	-1	p0 = p	EMPTY	EMPTY
104	830	2	-1	0	-1	if ( length < 1 ) {	EMPTY	EMPTY
104	831	2	-1	0	-1	nd _ print ( ( ndo ,  " [|chap] "  ) ) ;	EMPTY	EMPTY
104	832	2	-1	0	-1	return ;	EMPTY	EMPTY
104	833	2	-1	0	-1	} else if ( length < 4 ) {	EMPTY	EMPTY
104	834	2	-1	0	-1	nd _ tcheck ( * p ) ;	EMPTY	EMPTY
104	835	2	-1	0	-1	nd _ print ( ( ndo ,  " [|chap 0x%02x] "  , * p ) ) ;	EMPTY	EMPTY
104	836	2	-1	0	-1	return ;	EMPTY	EMPTY
104	837	3	-1	0	-1	}	EMPTY	EMPTY
104	839	1	0	0	-1	nd _ tcheck ( * p ) ;	EMPTY	EMPTY
104	840	2	-1	0	-1	code = * p	EMPTY	EMPTY
104	841	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
104	842	2	-1	0	-1	tok2str ( chapcode _ values  strlit  code )	tok2str	EMPTY
104	843	2	-1	0	-1	code ) ) ;	EMPTY	EMPTY
104	844	3	-1	0	-1	p ++	EMPTY	EMPTY
104	846	1	1	0	-1	nd _ tcheck ( * p ) ;	EMPTY	EMPTY
104	847	2	-1	1	-1	nd _ print ( ( ndo  strlit  * p ) ) ;	EMPTY	EMPTY
104	848	3	-1	0	-1	p ++	EMPTY	EMPTY
104	850	1	0	0	0	nd _ tcheck2 ( * p  numconst ) ;	EMPTY	EMPTY
104	851	2	-1	0	-1	len = extract _ 16bits ( p )	len extract _ 16bits	EMPTY
104	852	3	-1	0	-1	p += 2	EMPTY	EMPTY
104	861	1	1	0	-1	switch ( code ) {	EMPTY	EMPTY
104	862	2	-1	0	-1	case chap _ chal :	EMPTY	EMPTY
104	863	2	-1	0	-1	case chap _ resp :	EMPTY	EMPTY
104	864	2	-1	0	-1	if ( length - ( p - p0 ) < 1 )	EMPTY	EMPTY
104	865	2	-1	0	-1	return	EMPTY	EMPTY
104	866	2	-1	0	-1	nd _ tcheck ( * p ) ;	EMPTY	EMPTY
104	867	2	-1	1	-1	val _ size = * p	EMPTY	EMPTY
104	868	2	-1	0	-1	p ++	EMPTY	EMPTY
104	869	2	-1	0	-1	if ( length - ( p - p0 ) < val _ size )	EMPTY	EMPTY
104	870	2	-1	0	-1	return	EMPTY	EMPTY
104	871	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	872	2	-1	0	-1	for ( i = 0 ; i < val _ size ; i ++ ) {	EMPTY	EMPTY
104	873	2	-1	0	-1	nd _ tcheck ( * p ) ;	EMPTY	EMPTY
104	874	2	-1	0	-1	nd _ print ( ( ndo ,  " %02x "  , * p ++ ) ) ;	EMPTY	EMPTY
104	875	2	-1	0	-1	}	EMPTY	EMPTY
104	876	2	-1	0	-1	name _ size = len - ( p - p0 )	len	EMPTY
104	877	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	878	2	-1	0	-1	for ( i = 0 ; i < name _ size ; i ++ ) {	EMPTY	EMPTY
104	879	2	-1	0	-1	nd _ tcheck ( * p ) ;	EMPTY	EMPTY
104	880	2	-1	0	-1	safeputchar ( ndo , * p ++ ) ;	EMPTY	EMPTY
104	881	2	-1	0	-1	}	EMPTY	EMPTY
104	882	2	-1	0	-1	break	EMPTY	EMPTY
104	883	2	-1	0	-1	case chap _ succ :	EMPTY	EMPTY
104	884	2	-1	0	-1	case chap _ fail :	EMPTY	EMPTY
104	885	2	-1	0	-1	msg _ size = len - ( p - p0 )	len	EMPTY
104	886	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	887	2	-1	0	-1	for ( i = 0 ; i < msg _ size ; i ++ ) {	EMPTY	EMPTY
104	888	2	-1	0	-1	nd _ tcheck ( * p ) ;	EMPTY	EMPTY
104	889	2	-1	0	-1	safeputchar ( ndo , * p ++ ) ;	EMPTY	EMPTY
104	890	3	-1	0	-1	}	EMPTY	EMPTY
104	891	1	0	0	-1	break	EMPTY	EMPTY
104	892	2	-1	0	-1	}	EMPTY	EMPTY
104	893	3	-1	0	-1	return ;	EMPTY	EMPTY
104	895	1	0	0	-1	trunc :	EMPTY	EMPTY
104	896	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	897	3	-1	0	-1	}	EMPTY	EMPTY
104	900	1	0	0	-1	static void	EMPTY	EMPTY
104	901	2	-1	0	-1	handle _ pap ( netdissect _ options * ndo	handle _ pap	EMPTY
104	902	2	-1	0	-1	const u _ char * p  int length )	EMPTY	EMPTY
104	903	2	-1	0	-1	{	EMPTY	EMPTY
104	904	2	-1	0	-1	u _ int code , len ;	len	EMPTY
104	905	2	-1	0	-1	int peerid _ len , passwd _ len , msg _ len ;	EMPTY	EMPTY
104	906	2	-1	0	-1	const u _ char * p0 ;	EMPTY	EMPTY
104	907	3	-1	0	-1	int i ;	EMPTY	EMPTY
104	909	1	0	0	-1	p0 = p	EMPTY	EMPTY
104	910	2	-1	0	-1	if ( length < 1 ) {	EMPTY	EMPTY
104	911	2	-1	0	-1	nd _ print ( ( ndo ,  " [|pap] "  ) ) ;	EMPTY	EMPTY
104	912	2	-1	0	-1	return ;	EMPTY	EMPTY
104	913	2	-1	0	-1	} else if ( length < 4 ) {	EMPTY	EMPTY
104	914	2	-1	0	-1	nd _ tcheck ( * p ) ;	EMPTY	EMPTY
104	915	2	-1	0	-1	nd _ print ( ( ndo ,  " [|pap 0x%02x] "  , * p ) ) ;	EMPTY	EMPTY
104	916	2	-1	0	-1	return ;	EMPTY	EMPTY
104	917	3	-1	0	-1	}	EMPTY	EMPTY
104	919	1	0	0	-1	nd _ tcheck ( * p ) ;	EMPTY	EMPTY
104	920	2	-1	0	-1	code = * p	EMPTY	EMPTY
104	921	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
104	922	2	-1	0	-1	tok2str ( papcode _ values  strlit  code )	tok2str	EMPTY
104	923	2	-1	0	-1	code ) ) ;	EMPTY	EMPTY
104	924	3	-1	0	-1	p ++	EMPTY	EMPTY
104	926	1	1	0	-1	nd _ tcheck ( * p ) ;	EMPTY	EMPTY
104	927	2	-1	1	-1	nd _ print ( ( ndo  strlit  * p ) ) ;	EMPTY	EMPTY
104	928	3	-1	0	-1	p ++	EMPTY	EMPTY
104	930	1	0	0	0	nd _ tcheck2 ( * p  numconst ) ;	EMPTY	EMPTY
104	931	2	-1	0	-1	len = extract _ 16bits ( p )	len extract _ 16bits	EMPTY
104	932	3	-1	0	-1	p += 2	EMPTY	EMPTY
104	934	1	0	0	0	if ( ( int ) len > length ) {	len	EMPTY
104	935	2	-1	0	-1	nd _ print ( ( ndo ,  " , length %u > packet size "  , len ) ) ;	len	EMPTY
104	936	2	-1	0	-1	return ;	EMPTY	EMPTY
104	937	2	-1	0	-1	}	EMPTY	EMPTY
104	938	2	-1	0	-1	length = len	len	EMPTY
104	939	2	-1	0	-1	if ( length < ( p - p0 ) ) {	EMPTY	EMPTY
104	940	2	-1	0	-1	nd _ print ( ( ndo ,  " , length %u < pap header length "  , length ) ) ;	EMPTY	EMPTY
104	941	2	-1	0	-1	return ;	EMPTY	EMPTY
104	942	3	-1	0	-1	}	EMPTY	EMPTY
104	944	1	1	0	1	switch ( code ) {	EMPTY	EMPTY
104	945	2	-1	0	-1	case pap _ areq :	EMPTY	EMPTY
104	946	2	-1	0	-1	if ( length - ( p - p0 ) < 1 )	EMPTY	EMPTY
104	947	2	-1	0	-1	return	EMPTY	EMPTY
104	948	2	-1	0	-1	nd _ tcheck ( * p ) ;	EMPTY	EMPTY
104	949	2	-1	1	-1	peerid _ len = * p	EMPTY	EMPTY
104	950	2	-1	0	-1	p ++	EMPTY	EMPTY
104	951	2	-1	0	-1	if ( length - ( p - p0 ) < peerid _ len )	EMPTY	EMPTY
104	952	2	-1	0	-1	return	EMPTY	EMPTY
104	953	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	954	2	-1	0	-1	for ( i = 0 ; i < peerid _ len ; i ++ ) {	EMPTY	EMPTY
104	955	2	-1	0	-1	nd _ tcheck ( * p ) ;	EMPTY	EMPTY
104	956	2	-1	0	-1	safeputchar ( ndo , * p ++ ) ;	EMPTY	EMPTY
104	957	3	-1	0	-1	}	EMPTY	EMPTY
104	959	1	1	0	1	if ( length - ( p - p0 ) < 1 )	EMPTY	EMPTY
104	960	2	-1	0	-1	return	EMPTY	EMPTY
104	961	2	-1	0	-1	nd _ tcheck ( * p ) ;	EMPTY	EMPTY
104	962	2	-1	1	-1	passwd _ len = * p	EMPTY	EMPTY
104	963	2	-1	0	-1	p ++	EMPTY	EMPTY
104	964	2	-1	0	-1	if ( length - ( p - p0 ) < passwd _ len )	EMPTY	EMPTY
104	965	2	-1	0	-1	return	EMPTY	EMPTY
104	966	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	967	2	-1	0	-1	for ( i = 0 ; i < passwd _ len ; i ++ ) {	EMPTY	EMPTY
104	968	2	-1	0	-1	nd _ tcheck ( * p ) ;	EMPTY	EMPTY
104	969	2	-1	0	-1	safeputchar ( ndo , * p ++ ) ;	EMPTY	EMPTY
104	970	2	-1	0	-1	}	EMPTY	EMPTY
104	971	2	-1	0	-1	break	EMPTY	EMPTY
104	972	2	-1	0	-1	case pap _ aack :	EMPTY	EMPTY
104	973	2	-1	0	-1	case pap _ anak :	EMPTY	EMPTY
104	974	2	-1	0	-1	if ( length - ( p - p0 ) < 1 )	EMPTY	EMPTY
104	975	2	-1	0	-1	return	EMPTY	EMPTY
104	976	2	-1	0	-1	nd _ tcheck ( * p ) ;	EMPTY	EMPTY
104	977	2	-1	1	-1	msg _ len = * p	EMPTY	EMPTY
104	978	2	-1	0	-1	p ++	EMPTY	EMPTY
104	979	2	-1	0	-1	if ( length - ( p - p0 ) < msg _ len )	EMPTY	EMPTY
104	980	2	-1	0	-1	return	EMPTY	EMPTY
104	981	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	982	2	-1	0	-1	for ( i = 0 ; i < msg _ len ; i ++ ) {	EMPTY	EMPTY
104	983	2	-1	0	-1	nd _ tcheck ( * p ) ;	EMPTY	EMPTY
104	984	2	-1	0	-1	safeputchar ( ndo , * p ++ ) ;	EMPTY	EMPTY
104	985	2	-1	0	-1	}	EMPTY	EMPTY
104	986	2	-1	0	-1	break	EMPTY	EMPTY
104	987	2	-1	0	-1	}	EMPTY	EMPTY
104	988	3	-1	0	-1	return ;	EMPTY	EMPTY
104	990	1	0	0	-1	trunc :	EMPTY	EMPTY
104	991	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	992	3	-1	0	-1	}	EMPTY	EMPTY
104	995	1	1	0	-1	static void	EMPTY	EMPTY
104	996	2	-1	0	-1	handle _ bap ( netdissect _ options * ndo  _ u _	handle _ bap	EMPTY
104	997	2	-1	0	-1	const u _ char * p  _ u _   int length  _ u _  )	EMPTY	EMPTY
104	998	2	-1	0	-1	{	EMPTY	EMPTY
104	1000	3	-1	1	-1	}	EMPTY	EMPTY
104	1004	1	0	0	-1	static int	EMPTY	EMPTY
104	1005	2	-1	0	-1	print _ ipcp _ config _ options ( netdissect _ options * ndo	print _ ipcp _ config _ options	EMPTY
104	1006	2	-1	0	-1	const u _ char * p  int length )	EMPTY	EMPTY
104	1007	2	-1	0	-1	{	EMPTY	EMPTY
104	1008	2	-1	0	-1	int len , opt ;	len	EMPTY
104	1009	3	-1	0	-1	u _ int compproto , ipcomp _ subopttotallen , ipcomp _ subopt , ipcomp _ suboptlen ;	EMPTY	EMPTY
104	1011	1	0	0	0	if ( length < 2 )	EMPTY	EMPTY
104	1012	2	-1	0	-1	return 0	EMPTY	EMPTY
104	1013	2	-1	0	-1	nd _ tcheck2 ( * p  numconst ) ;	EMPTY	EMPTY
104	1014	2	-1	0	-1	len = p [ 1 ]	len	EMPTY
104	1015	2	-1	0	-1	opt = p [ 0 ]	EMPTY	EMPTY
104	1016	2	-1	0	-1	if ( length < len )	len	EMPTY
104	1017	2	-1	0	-1	return 0	EMPTY	EMPTY
104	1018	2	-1	0	-1	if ( len < 2 ) {	len	EMPTY
104	1019	2	-1	0	-1	nd _ print ( ( ndo ,  " \n\t  %s option (0x%02x), length %u (length bogus, should be >= 2) "  ,	EMPTY	EMPTY
104	1020	2	-1	0	-1	tok2str ( ipcpopt _ values ,  " unknown "  , opt ) ,	tok2str	EMPTY
104	1021	2	-1	0	-1	opt ,	EMPTY	EMPTY
104	1022	2	-1	0	-1	len ) ) ;	len	EMPTY
104	1023	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
104	1024	3	-1	0	-1	}	EMPTY	EMPTY
104	1026	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
104	1027	2	-1	0	-1	tok2str ( ipcpopt _ values  strlit  opt )	tok2str	EMPTY
104	1028	2	-1	0	-1	opt	EMPTY	EMPTY
104	1029	3	-1	0	-1	len ) ) ;	len	EMPTY
104	1031	1	1	0	1	switch ( opt ) {	EMPTY	EMPTY
104	1032	2	-1	1	-1	case ipcpopt _ 2addr :	EMPTY	EMPTY
104	1033	2	-1	0	-1	if ( len != numconst ) {	len	EMPTY
104	1034	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	1035	2	-1	0	-1	return len	len	EMPTY
104	1036	2	-1	0	-1	}	EMPTY	EMPTY
104	1037	2	-1	0	-1	nd _ tcheck2 ( * ( p + numconst )  numconst ) ;	EMPTY	EMPTY
104	1038	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
104	1039	2	-1	0	-1	ipaddr _ string ( ndo  p + numconst )	EMPTY	EMPTY
104	1040	2	-1	0	-1	ipaddr _ string ( ndo  p + numconst ) ) ) ;	EMPTY	EMPTY
104	1041	2	-1	0	-1	break	EMPTY	EMPTY
104	1042	2	-1	0	-1	case ipcpopt _ ipcomp :	EMPTY	EMPTY
104	1043	2	-1	0	-1	if ( len < 4 ) {	len	EMPTY
104	1044	2	-1	0	-1	nd _ print ( ( ndo ,  "  (length bogus, should be >= 4) "  ) ) ;	EMPTY	EMPTY
104	1045	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
104	1046	2	-1	0	-1	}	EMPTY	EMPTY
104	1047	2	-1	0	-1	nd _ tcheck2 ( * ( p + numconst )  numconst ) ;	EMPTY	EMPTY
104	1048	3	-1	0	-1	compproto = extract _ 16bits ( p + 2 )	extract _ 16bits	EMPTY
104	1050	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
104	1051	2	-1	0	-1	tok2str ( ipcpopt _ compproto _ values  strlit  compproto )	tok2str	EMPTY
104	1052	3	-1	0	-1	compproto ) ) ;	EMPTY	EMPTY
104	1054	1	1	0	1	switch ( compproto ) {	EMPTY	EMPTY
104	1055	2	-1	0	-1	case ppp _ vjc :	EMPTY	EMPTY
104	1057	2	-1	1	-1	break ;	EMPTY	EMPTY
104	1058	2	-1	0	-1	case ipcpopt _ ipcomp _ hdrcomp :	EMPTY	EMPTY
104	1059	2	-1	0	-1	if ( len < ipcpopt _ ipcomp _ minlen ) {	len	EMPTY
104	1060	2	-1	0	-1	nd _ print ( ( ndo ,  "  (length bogus, should be >= %u) "  ,	EMPTY	EMPTY
104	1061	2	-1	0	-1	ipcpopt _ ipcomp _ minlen ) ) ;	EMPTY	EMPTY
104	1062	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
104	1063	3	-1	0	-1	}	EMPTY	EMPTY
104	1065	1	0	0	0	nd _ tcheck2 ( * ( p + numconst )  ipcpopt _ ipcomp _ minlen ) ;	EMPTY	EMPTY
104	1066	2	-1	0	-1	nd _ print ( ( ndo  strlit strlit	EMPTY	EMPTY
104	1067	2	-1	0	-1	strlit	EMPTY	EMPTY
104	1068	2	-1	0	-1	extract _ 16bits ( p + numconst )	extract _ 16bits	EMPTY
104	1069	2	-1	0	-1	extract _ 16bits ( p + numconst )	extract _ 16bits	EMPTY
104	1070	2	-1	0	-1	extract _ 16bits ( p + numconst )	extract _ 16bits	EMPTY
104	1071	2	-1	0	-1	extract _ 16bits ( p + numconst )	extract _ 16bits	EMPTY
104	1072	3	-1	0	-1	extract _ 16bits ( p + numconst ) ) ) ;	extract _ 16bits	EMPTY
104	1075	1	1	1	1	if ( len > ipcpopt _ ipcomp _ minlen ) {	len	EMPTY
104	1076	2	-1	0	-1	ipcomp _ subopttotallen = len - ipcpopt _ ipcomp _ minlen ;	len	EMPTY
104	1077	3	-1	0	-1	p += ipcpopt _ ipcomp _ minlen ;	EMPTY	EMPTY
104	1079	1	0	0	0	nd _ print ( ( ndo  strlit  ipcomp _ subopttotallen ) ) ;	EMPTY	EMPTY
104	1081	1	0	0	0	while ( ipcomp _ subopttotallen >= numconst ) {	EMPTY	EMPTY
104	1082	2	-1	0	-1	nd _ tcheck2 ( * p  numconst ) ;	EMPTY	EMPTY
104	1083	2	-1	0	-1	ipcomp _ subopt = * p	EMPTY	EMPTY
104	1084	3	-1	0	-1	ipcomp _ suboptlen = * ( p + 1 )	EMPTY	EMPTY
104	1087	1	1	1	1	if ( ipcomp _ subopt == 0 ||	EMPTY	EMPTY
104	1088	2	-1	0	-1	ipcomp _ suboptlen == 0 )	EMPTY	EMPTY
104	1089	3	-1	0	-1	break	EMPTY	EMPTY
104	1092	1	1	1	1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
104	1093	2	-1	0	-1	tok2str ( ipcpopt _ compproto _ subopt _ values	tok2str	EMPTY
104	1094	2	-1	0	-1	strlit	EMPTY	EMPTY
104	1095	2	-1	0	-1	ipcomp _ subopt )	EMPTY	EMPTY
104	1096	2	-1	0	-1	ipcomp _ subopt	EMPTY	EMPTY
104	1097	3	-1	0	-1	ipcomp _ suboptlen ) ) ;	EMPTY	EMPTY
104	1099	1	0	0	-1	ipcomp _ subopttotallen -= ipcomp _ suboptlen	EMPTY	EMPTY
104	1100	2	-1	0	-1	p += ipcomp _ suboptlen	EMPTY	EMPTY
104	1101	2	-1	0	-1	}	EMPTY	EMPTY
104	1102	2	-1	0	-1	}	EMPTY	EMPTY
104	1103	2	-1	0	-1	break ;	EMPTY	EMPTY
104	1104	2	-1	0	-1	default :	EMPTY	EMPTY
104	1105	2	-1	0	-1	break ;	EMPTY	EMPTY
104	1106	2	-1	0	-1	}	EMPTY	EMPTY
104	1107	3	-1	0	-1	break ;	EMPTY	EMPTY
104	1109	1	1	1	-1	case ipcpopt _ addr :	EMPTY	EMPTY
104	1110	2	-1	0	-1	case ipcpopt _ mobile4 :	EMPTY	EMPTY
104	1111	2	-1	0	-1	case ipcpopt _ pridns :	EMPTY	EMPTY
104	1112	2	-1	0	-1	case ipcpopt _ prinbns :	EMPTY	EMPTY
104	1113	2	-1	0	-1	case ipcpopt _ secdns :	EMPTY	EMPTY
104	1114	2	-1	0	-1	case ipcpopt _ secnbns :	EMPTY	EMPTY
104	1115	2	-1	0	-1	if ( len != numconst ) {	len	EMPTY
104	1116	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	1117	2	-1	0	-1	return 0	EMPTY	EMPTY
104	1118	2	-1	0	-1	}	EMPTY	EMPTY
104	1119	2	-1	0	-1	nd _ tcheck2 ( * ( p + numconst )  numconst ) ;	EMPTY	EMPTY
104	1120	2	-1	0	-1	nd _ print ( ( ndo  strlit  ipaddr _ string ( ndo  p + numconst ) ) ) ;	EMPTY	EMPTY
104	1121	2	-1	0	-1	break	EMPTY	EMPTY
104	1122	2	-1	0	-1	default :	EMPTY	EMPTY
104	1127	2	-1	1	-1	if ( ndo -> ndo _ vflag < numconst )	ndo _ vflag	EMPTY
104	1128	2	-1	0	-1	print _ unknown _ data ( ndo  & p [ numconst ]  strlit  len - numconst ) ;	len	EMPTY
104	1129	2	-1	0	-1	break	EMPTY	EMPTY
104	1130	2	-1	0	-1	}	EMPTY	EMPTY
104	1131	2	-1	0	-1	if ( ndo -> ndo _ vflag > numconst )	ndo _ vflag	EMPTY
104	1132	2	-1	0	-1	print _ unknown _ data ( ndo  & p [ numconst ]  strlit  len - numconst ) ;	len	EMPTY
104	1133	3	-1	0	-1	return len	len	EMPTY
104	1135	1	0	0	-1	trunc :	EMPTY	EMPTY
104	1136	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	1137	2	-1	0	-1	return 0	EMPTY	EMPTY
104	1138	3	-1	0	-1	}	EMPTY	EMPTY
104	1141	1	0	0	-1	static int	EMPTY	EMPTY
104	1142	2	-1	0	-1	print _ ip6cp _ config _ options ( netdissect _ options * ndo	print _ ip6cp _ config _ options	EMPTY
104	1143	2	-1	0	-1	const u _ char * p  int length )	EMPTY	EMPTY
104	1144	2	-1	0	-1	{	EMPTY	EMPTY
104	1145	3	-1	0	-1	int len , opt ;	len	EMPTY
104	1147	1	0	0	0	if ( length < 2 )	EMPTY	EMPTY
104	1148	2	-1	0	-1	return 0	EMPTY	EMPTY
104	1149	2	-1	0	-1	nd _ tcheck2 ( * p  numconst ) ;	EMPTY	EMPTY
104	1150	2	-1	0	-1	len = p [ 1 ]	len	EMPTY
104	1151	2	-1	0	-1	opt = p [ 0 ]	EMPTY	EMPTY
104	1152	2	-1	0	-1	if ( length < len )	len	EMPTY
104	1153	2	-1	0	-1	return 0	EMPTY	EMPTY
104	1154	2	-1	0	-1	if ( len < 2 ) {	len	EMPTY
104	1155	2	-1	0	-1	nd _ print ( ( ndo ,  " \n\t  %s option (0x%02x), length %u (length bogus, should be >= 2) "  ,	EMPTY	EMPTY
104	1156	2	-1	0	-1	tok2str ( ip6cpopt _ values ,  " unknown "  , opt ) ,	tok2str	EMPTY
104	1157	2	-1	0	-1	opt ,	EMPTY	EMPTY
104	1158	2	-1	0	-1	len ) ) ;	len	EMPTY
104	1159	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
104	1160	3	-1	0	-1	}	EMPTY	EMPTY
104	1162	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
104	1163	2	-1	0	-1	tok2str ( ip6cpopt _ values  strlit  opt )	tok2str	EMPTY
104	1164	2	-1	0	-1	opt	EMPTY	EMPTY
104	1165	3	-1	0	-1	len ) ) ;	len	EMPTY
104	1167	1	1	0	1	switch ( opt ) {	EMPTY	EMPTY
104	1168	2	-1	0	-1	case ip6cp _ ifid :	EMPTY	EMPTY
104	1169	2	-1	0	-1	if ( len != 10 ) {	len	EMPTY
104	1170	2	-1	0	-1	nd _ print ( ( ndo ,  "  (length bogus, should be = 10) "  ) ) ;	EMPTY	EMPTY
104	1171	2	-1	0	-1	return len ;	len	EMPTY
104	1172	2	-1	0	-1	}	EMPTY	EMPTY
104	1173	2	-1	0	-1	nd _ tcheck2 ( * ( p + numconst )  numconst ) ;	EMPTY	EMPTY
104	1174	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
104	1175	2	-1	0	-1	extract _ 16bits ( p + numconst )	extract _ 16bits	EMPTY
104	1176	2	-1	0	-1	extract _ 16bits ( p + numconst )	extract _ 16bits	EMPTY
104	1177	2	-1	0	-1	extract _ 16bits ( p + numconst )	extract _ 16bits	EMPTY
104	1178	2	-1	0	-1	extract _ 16bits ( p + numconst ) ) ) ;	extract _ 16bits	EMPTY
104	1179	2	-1	0	-1	break	EMPTY	EMPTY
104	1180	2	-1	0	-1	default :	EMPTY	EMPTY
104	1185	2	-1	1	-1	if ( ndo -> ndo _ vflag < numconst )	ndo _ vflag	EMPTY
104	1186	2	-1	0	-1	print _ unknown _ data ( ndo  & p [ numconst ]  strlit  len - numconst ) ;	len	EMPTY
104	1187	2	-1	0	-1	break	EMPTY	EMPTY
104	1188	2	-1	0	-1	}	EMPTY	EMPTY
104	1189	2	-1	0	-1	if ( ndo -> ndo _ vflag > numconst )	ndo _ vflag	EMPTY
104	1190	3	-1	1	-1	print _ unknown _ data ( ndo  & p [ numconst ]  strlit  len - numconst ) ;	len	EMPTY
104	1192	1	0	0	0	return len	len	EMPTY
104	1194	1	0	0	-1	trunc :	EMPTY	EMPTY
104	1195	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	1196	2	-1	0	-1	return 0	EMPTY	EMPTY
104	1197	3	-1	0	-1	}	EMPTY	EMPTY
104	1201	1	0	0	-1	static int	EMPTY	EMPTY
104	1202	2	-1	0	-1	print _ ccp _ config _ options ( netdissect _ options * ndo	print _ ccp _ config _ options	EMPTY
104	1203	2	-1	0	-1	const u _ char * p  int length )	EMPTY	EMPTY
104	1204	2	-1	0	-1	{	EMPTY	EMPTY
104	1205	3	-1	0	-1	int len , opt ;	len	EMPTY
104	1207	1	0	0	0	if ( length < 2 )	EMPTY	EMPTY
104	1208	2	-1	0	-1	return 0	EMPTY	EMPTY
104	1209	2	-1	0	-1	nd _ tcheck2 ( * p  numconst ) ;	EMPTY	EMPTY
104	1210	2	-1	0	-1	len = p [ 1 ]	len	EMPTY
104	1211	2	-1	0	-1	opt = p [ 0 ]	EMPTY	EMPTY
104	1212	2	-1	0	-1	if ( length < len )	len	EMPTY
104	1213	2	-1	0	-1	return 0	EMPTY	EMPTY
104	1214	2	-1	0	-1	if ( len < 2 ) {	len	EMPTY
104	1215	2	-1	0	-1	nd _ print ( ( ndo ,  " \n\t  %s option (0x%02x), length %u (length bogus, should be >= 2) "  ,	EMPTY	EMPTY
104	1216	2	-1	0	-1	tok2str ( ccpconfopts _ values ,  " unknown "  , opt ) ,	tok2str	EMPTY
104	1217	2	-1	0	-1	opt ,	EMPTY	EMPTY
104	1218	2	-1	0	-1	len ) ) ;	len	EMPTY
104	1219	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
104	1220	3	-1	0	-1	}	EMPTY	EMPTY
104	1222	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
104	1223	2	-1	0	-1	tok2str ( ccpconfopts _ values  strlit  opt )	tok2str	EMPTY
104	1224	2	-1	0	-1	opt	EMPTY	EMPTY
104	1225	3	-1	0	-1	len ) ) ;	len	EMPTY
104	1227	1	0	0	0	switch ( opt ) {	EMPTY	EMPTY
104	1228	2	-1	0	-1	case ccpopt _ bsdcomp :	EMPTY	EMPTY
104	1229	2	-1	0	-1	if ( len < 3 ) {	len	EMPTY
104	1230	2	-1	0	-1	nd _ print ( ( ndo ,  "  (length bogus, should be >= 3) "  ) ) ;	EMPTY	EMPTY
104	1231	2	-1	0	-1	return len ;	len	EMPTY
104	1232	2	-1	0	-1	}	EMPTY	EMPTY
104	1233	2	-1	0	-1	nd _ tcheck2 ( * ( p + numconst )  numconst ) ;	EMPTY	EMPTY
104	1234	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
104	1235	2	-1	0	-1	p [ numconst ] >> numconst  p [ numconst ] & numconst ) ) ;	EMPTY	EMPTY
104	1236	2	-1	0	-1	break	EMPTY	EMPTY
104	1237	2	-1	0	-1	case ccpopt _ mvrca :	EMPTY	EMPTY
104	1238	2	-1	0	-1	if ( len < 4 ) {	len	EMPTY
104	1239	2	-1	0	-1	nd _ print ( ( ndo ,  "  (length bogus, should be >= 4) "  ) ) ;	EMPTY	EMPTY
104	1240	2	-1	0	-1	return len ;	len	EMPTY
104	1241	2	-1	0	-1	}	EMPTY	EMPTY
104	1242	2	-1	0	-1	nd _ tcheck2 ( * ( p + numconst )  numconst ) ;	EMPTY	EMPTY
104	1243	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
104	1244	2	-1	0	-1	( p [ numconst ] & numconst ) >> numconst	EMPTY	EMPTY
104	1245	2	-1	0	-1	( p [ numconst ] & numconst ) ? strlit : strlit	EMPTY	EMPTY
104	1246	2	-1	0	-1	p [ numconst ] & numconst  p [ numconst ] ) ) ;	EMPTY	EMPTY
104	1247	2	-1	0	-1	break	EMPTY	EMPTY
104	1248	2	-1	0	-1	case ccpopt _ deflate :	EMPTY	EMPTY
104	1249	2	-1	0	-1	if ( len < 4 ) {	len	EMPTY
104	1250	2	-1	0	-1	nd _ print ( ( ndo ,  "  (length bogus, should be >= 4) "  ) ) ;	EMPTY	EMPTY
104	1251	2	-1	0	-1	return len ;	len	EMPTY
104	1252	2	-1	0	-1	}	EMPTY	EMPTY
104	1253	2	-1	0	-1	nd _ tcheck2 ( * ( p + numconst )  numconst ) ;	EMPTY	EMPTY
104	1254	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
104	1255	2	-1	0	-1	( p [ numconst ] & numconst ) >> numconst	EMPTY	EMPTY
104	1256	3	-1	0	-1	( ( p [ numconst ] & numconst ) == numconst ) ? strlit : strlit	EMPTY	EMPTY
104	1257	1	0	0	-1	p [ numconst ] & numconst  ( p [ numconst ] & numconst ) >> numconst  p [ numconst ] & numconst ) ) ;	EMPTY	EMPTY
104	1258	3	-1	0	-1	break	EMPTY	EMPTY
104	1261	1	1	1	-1	# if numconst	EMPTY	EMPTY
104	1262	2	-1	0	-1	case ccpopt _ oui :	EMPTY	EMPTY
104	1263	2	-1	0	-1	case ccpopt _ pred1 :	EMPTY	EMPTY
104	1264	2	-1	0	-1	case ccpopt _ pred2 :	EMPTY	EMPTY
104	1265	2	-1	0	-1	case ccpopt _ pjump :	EMPTY	EMPTY
104	1266	2	-1	0	-1	case ccpopt _ hpppc :	EMPTY	EMPTY
104	1267	2	-1	0	-1	case ccpopt _ staclzs :	EMPTY	EMPTY
104	1268	2	-1	0	-1	case ccpopt _ mppc :	EMPTY	EMPTY
104	1269	2	-1	0	-1	case ccpopt _ gfza :	EMPTY	EMPTY
104	1270	2	-1	0	-1	case ccpopt _ v42bis :	EMPTY	EMPTY
104	1271	2	-1	0	-1	case ccpopt _ lzsdcp :	EMPTY	EMPTY
104	1272	2	-1	0	-1	case ccpopt _ dec :	EMPTY	EMPTY
104	1273	2	-1	0	-1	case ccpopt _ resv :	EMPTY	EMPTY
104	1274	2	-1	0	-1	break ;	EMPTY	EMPTY
104	1275	2	-1	0	-1	# endif	EMPTY	EMPTY
104	1276	2	-1	0	-1	default :	EMPTY	EMPTY
104	1281	2	-1	1	-1	if ( ndo -> ndo _ vflag < numconst )	ndo _ vflag	EMPTY
104	1282	2	-1	0	-1	print _ unknown _ data ( ndo  & p [ numconst ]  strlit  len - numconst ) ;	len	EMPTY
104	1283	2	-1	0	-1	break	EMPTY	EMPTY
104	1284	2	-1	0	-1	}	EMPTY	EMPTY
104	1285	2	-1	0	-1	if ( ndo -> ndo _ vflag > numconst )	ndo _ vflag	EMPTY
104	1286	3	-1	1	-1	print _ unknown _ data ( ndo  & p [ numconst ]  strlit  len - numconst ) ;	len	EMPTY
104	1288	1	0	0	0	return len	len	EMPTY
104	1290	1	0	0	-1	trunc :	EMPTY	EMPTY
104	1291	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	1292	2	-1	0	-1	return 0	EMPTY	EMPTY
104	1293	3	-1	0	-1	}	EMPTY	EMPTY
104	1296	1	0	0	-1	static int	EMPTY	EMPTY
104	1297	2	-1	0	-1	print _ bacp _ config _ options ( netdissect _ options * ndo	print _ bacp _ config _ options	EMPTY
104	1298	2	-1	0	-1	const u _ char * p  int length )	EMPTY	EMPTY
104	1299	2	-1	0	-1	{	EMPTY	EMPTY
104	1300	3	-1	0	-1	int len , opt ;	len	EMPTY
104	1302	1	0	0	0	if ( length < 2 )	EMPTY	EMPTY
104	1303	2	-1	0	-1	return 0	EMPTY	EMPTY
104	1304	2	-1	0	-1	nd _ tcheck2 ( * p  numconst ) ;	EMPTY	EMPTY
104	1305	2	-1	0	-1	len = p [ 1 ]	len	EMPTY
104	1306	2	-1	0	-1	opt = p [ 0 ]	EMPTY	EMPTY
104	1307	2	-1	0	-1	if ( length < len )	len	EMPTY
104	1308	2	-1	0	-1	return 0	EMPTY	EMPTY
104	1309	2	-1	0	-1	if ( len < 2 ) {	len	EMPTY
104	1310	2	-1	0	-1	nd _ print ( ( ndo ,  " \n\t  %s option (0x%02x), length %u (length bogus, should be >= 2) "  ,	EMPTY	EMPTY
104	1311	2	-1	0	-1	tok2str ( bacconfopts _ values ,  " unknown "  , opt ) ,	tok2str	EMPTY
104	1312	2	-1	0	-1	opt ,	EMPTY	EMPTY
104	1313	2	-1	0	-1	len ) ) ;	len	EMPTY
104	1314	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
104	1315	3	-1	0	-1	}	EMPTY	EMPTY
104	1317	1	0	0	0	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
104	1318	2	-1	0	-1	tok2str ( bacconfopts _ values  strlit  opt )	tok2str	EMPTY
104	1319	2	-1	0	-1	opt	EMPTY	EMPTY
104	1320	3	-1	0	-1	len ) ) ;	len	EMPTY
104	1322	1	1	0	1	switch ( opt ) {	EMPTY	EMPTY
104	1323	2	-1	0	-1	case bacpopt _ fpeer :	EMPTY	EMPTY
104	1324	2	-1	0	-1	if ( len != 6 ) {	len	EMPTY
104	1325	2	-1	0	-1	nd _ print ( ( ndo ,  "  (length bogus, should be = 6) "  ) ) ;	EMPTY	EMPTY
104	1326	2	-1	0	-1	return len ;	len	EMPTY
104	1327	2	-1	0	-1	}	EMPTY	EMPTY
104	1328	2	-1	0	-1	nd _ tcheck2 ( * ( p + numconst )  numconst ) ;	EMPTY	EMPTY
104	1329	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ 32bits ( p + numconst ) ) ) ;	EMPTY	EMPTY
104	1330	2	-1	0	-1	break	EMPTY	EMPTY
104	1331	2	-1	0	-1	default :	EMPTY	EMPTY
104	1336	2	-1	1	-1	if ( ndo -> ndo _ vflag < numconst )	ndo _ vflag	EMPTY
104	1337	2	-1	0	-1	print _ unknown _ data ( ndo  & p [ numconst ]  strlit  len - numconst ) ;	len	EMPTY
104	1338	2	-1	0	-1	break	EMPTY	EMPTY
104	1339	2	-1	0	-1	}	EMPTY	EMPTY
104	1340	2	-1	0	-1	if ( ndo -> ndo _ vflag > numconst )	ndo _ vflag	EMPTY
104	1341	3	-1	1	-1	print _ unknown _ data ( ndo  & p [ numconst ]  strlit  len - numconst ) ;	len	EMPTY
104	1343	1	0	0	0	return len	len	EMPTY
104	1345	1	0	0	-1	trunc :	EMPTY	EMPTY
104	1346	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	1347	2	-1	0	-1	return 0	EMPTY	EMPTY
104	1348	3	-1	0	-1	}	EMPTY	EMPTY
104	1350	1	0	0	-1	static void	EMPTY	EMPTY
104	1351	2	-1	0	-1	ppp _ hdlc ( netdissect _ options * ndo	EMPTY	EMPTY
104	1352	2	-1	0	-1	const u _ char * p  int length )	EMPTY	EMPTY
104	1353	2	-1	0	-1	{	EMPTY	EMPTY
104	1354	2	-1	0	-1	u _ char * b  * t  c ;	EMPTY	EMPTY
104	1355	2	-1	0	-1	const u _ char * s ;	s	EMPTY
104	1356	2	-1	0	-1	int i  proto ;	EMPTY	EMPTY
104	1357	3	-1	0	-1	const void * se ;	EMPTY	EMPTY
104	1359	1	0	0	0	if ( length <= numconst )	EMPTY	EMPTY
104	1360	3	-1	0	-1	return ;	EMPTY	EMPTY
104	1362	1	0	0	-1	b = ( u _ char * ) malloc ( length ) ;	EMPTY	malloc
104	1363	2	-1	0	-1	if ( b == null )	EMPTY	EMPTY
104	1364	3	-1	0	-1	return ;	EMPTY	EMPTY
104	1371	1	0	0	-1	for ( s = p , t = b , i = length ; i > 0 && nd _ ttest ( * s ) ; i -- ) {	s s	EMPTY
104	1372	2	-1	0	-1	c = * s ++ ;	s	EMPTY
104	1373	2	-1	0	-1	if ( c == 0x7d ) {	EMPTY	EMPTY
104	1374	2	-1	0	-1	if ( i <= 1 || ! nd _ ttest ( * s ) )	s	EMPTY
104	1375	2	-1	0	-1	break ;	EMPTY	EMPTY
104	1376	2	-1	0	-1	i -- ;	EMPTY	EMPTY
104	1377	2	-1	0	-1	c = * s ++ ^ 0x20 ;	s	EMPTY
104	1378	2	-1	0	-1	}	EMPTY	EMPTY
104	1379	2	-1	0	-1	* t ++ = c ;	EMPTY	EMPTY
104	1380	3	-1	0	-1	}	EMPTY	EMPTY
104	1382	1	0	0	-1	se = ndo -> ndo _ snapend	EMPTY	EMPTY
104	1383	2	-1	0	-1	ndo -> ndo _ snapend = t	EMPTY	EMPTY
104	1384	3	-1	0	-1	length = t - b	EMPTY	EMPTY
104	1387	1	1	1	1	if ( length < 1 )	EMPTY	EMPTY
104	1388	2	-1	0	-1	goto trunc	EMPTY	EMPTY
104	1389	3	-1	1	-1	proto = * b	EMPTY	EMPTY
104	1391	1	1	0	1	switch ( proto ) {	EMPTY	EMPTY
104	1392	2	-1	0	-1	case ppp _ ip :	EMPTY	EMPTY
104	1393	2	-1	0	-1	ip _ print ( ndo , b + 1 , length - 1 )	EMPTY	EMPTY
104	1394	2	-1	0	-1	goto cleanup	EMPTY	EMPTY
104	1395	2	-1	0	-1	case ppp _ ipv6 :	EMPTY	EMPTY
104	1396	2	-1	0	-1	ip6 _ print ( ndo , b + 1 , length - 1 )	EMPTY	EMPTY
104	1397	2	-1	0	-1	goto cleanup	EMPTY	EMPTY
104	1398	2	-1	1	-1	default :	EMPTY	EMPTY
104	1399	2	-1	0	-1	break ;	EMPTY	EMPTY
104	1400	3	-1	0	-1	}	EMPTY	EMPTY
104	1402	1	1	0	1	if ( length < numconst )	EMPTY	EMPTY
104	1403	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
104	1404	3	-1	1	-1	proto = extract _ 16bits ( b ) ;	extract _ 16bits	EMPTY
104	1406	1	1	0	1	switch ( proto ) {	EMPTY	EMPTY
104	1407	2	-1	0	-1	case ( ppp _ address << numconst | ppp _ control ) :	EMPTY	EMPTY
104	1408	2	-1	0	-1	if ( length < numconst )	EMPTY	EMPTY
104	1409	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
104	1410	2	-1	0	-1	proto = extract _ 16bits ( b + 2 )	extract _ 16bits	EMPTY
104	1411	2	-1	0	-1	handle _ ppp ( ndo , proto , b + 4 , length - 4 )	handle _ ppp	EMPTY
104	1412	2	-1	0	-1	break	EMPTY	EMPTY
104	1413	2	-1	1	-1	default :	EMPTY	EMPTY
104	1414	2	-1	0	-1	handle _ ppp ( ndo  proto  b + numconst  length - numconst ) ;	handle _ ppp	EMPTY
104	1415	2	-1	0	-1	break	EMPTY	EMPTY
104	1416	3	-1	0	-1	}	EMPTY	EMPTY
104	1418	1	0	0	-1	cleanup :	EMPTY	EMPTY
104	1419	2	-1	0	-1	ndo -> ndo _ snapend = se ;	EMPTY	EMPTY
104	1420	2	-1	0	-1	free ( b ) ;	EMPTY	free
104	1421	3	-1	0	-1	return ;	EMPTY	EMPTY
104	1423	1	0	0	-1	trunc :	EMPTY	EMPTY
104	1424	2	-1	0	-1	ndo -> ndo _ snapend = se ;	EMPTY	EMPTY
104	1425	2	-1	0	-1	free ( b ) ;	EMPTY	free
104	1426	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	1427	3	-1	0	-1	}	EMPTY	EMPTY
104	1431	1	0	0	-1	static void	EMPTY	EMPTY
104	1432	2	-1	0	-1	handle _ ppp ( netdissect _ options * ndo	handle _ ppp	EMPTY
104	1433	2	-1	0	-1	u _ int proto  const u _ char * p  int length )	EMPTY	EMPTY
104	1434	2	-1	0	-1	{	EMPTY	EMPTY
104	1435	2	-1	0	-1	if ( ( proto & numconst ) == numconst ) {	EMPTY	EMPTY
104	1436	2	-1	0	-1	ppp _ hdlc ( ndo , p - 1 , length )	EMPTY	EMPTY
104	1437	2	-1	0	-1	return	EMPTY	EMPTY
104	1438	3	-1	0	-1	}	EMPTY	EMPTY
104	1440	1	1	0	1	switch ( proto ) {	EMPTY	EMPTY
104	1441	2	-1	1	-1	case ppp _ lcp :	EMPTY	EMPTY
104	1442	2	-1	0	-1	case ppp _ ipcp :	EMPTY	EMPTY
104	1443	2	-1	0	-1	case ppp _ osicp :	EMPTY	EMPTY
104	1444	2	-1	0	-1	case ppp _ mplscp :	EMPTY	EMPTY
104	1445	2	-1	0	-1	case ppp _ ipv6cp :	EMPTY	EMPTY
104	1446	2	-1	0	-1	case ppp _ ccp :	EMPTY	EMPTY
104	1447	2	-1	0	-1	case ppp _ bacp :	EMPTY	EMPTY
104	1448	2	-1	0	-1	handle _ ctrl _ proto ( ndo  proto  p  length ) ;	handle _ ctrl _ proto	EMPTY
104	1449	2	-1	0	-1	break	EMPTY	EMPTY
104	1450	2	-1	0	-1	case ppp _ ml :	EMPTY	EMPTY
104	1451	2	-1	0	-1	handle _ mlppp ( ndo , p , length )	EMPTY	EMPTY
104	1452	2	-1	0	-1	break	EMPTY	EMPTY
104	1453	2	-1	0	-1	case ppp _ chap :	EMPTY	EMPTY
104	1454	2	-1	0	-1	handle _ chap ( ndo , p , length )	handle _ chap	EMPTY
104	1455	2	-1	0	-1	break	EMPTY	EMPTY
104	1456	2	-1	0	-1	case ppp _ pap :	EMPTY	EMPTY
104	1457	2	-1	0	-1	handle _ pap ( ndo , p , length )	handle _ pap	EMPTY
104	1458	2	-1	0	-1	break	EMPTY	EMPTY
104	1459	2	-1	1	-1	case ppp _ bap :	EMPTY	EMPTY
104	1460	2	-1	0	-1	handle _ bap ( ndo  p  length ) ;	handle _ bap	EMPTY
104	1461	2	-1	0	-1	break	EMPTY	EMPTY
104	1462	2	-1	1	-1	case ethertype _ ip :	EMPTY	EMPTY
104	1463	2	-1	0	-1	case ppp _ vjnc :	EMPTY	EMPTY
104	1464	2	-1	0	-1	case ppp _ ip :	EMPTY	EMPTY
104	1465	2	-1	0	-1	ip _ print ( ndo  p  length ) ;	EMPTY	EMPTY
104	1466	2	-1	0	-1	break	EMPTY	EMPTY
104	1467	2	-1	1	-1	case ethertype _ ipv6 :	EMPTY	EMPTY
104	1468	2	-1	0	-1	case ppp _ ipv6 :	EMPTY	EMPTY
104	1469	3	-1	0	-1	ip6 _ print ( ndo  p  length ) ;	EMPTY	EMPTY
104	1470	1	1	0	-1	break	EMPTY	EMPTY
104	1471	2	-1	1	-1	case ethertype _ ipx :	EMPTY	EMPTY
104	1472	2	-1	0	-1	case ppp _ ipx :	EMPTY	EMPTY
104	1473	2	-1	0	-1	ipx _ print ( ndo  p  length ) ;	EMPTY	EMPTY
104	1474	2	-1	0	-1	break	EMPTY	EMPTY
104	1475	2	-1	0	-1	case ppp _ osi :	EMPTY	EMPTY
104	1476	2	-1	0	-1	isoclns _ print ( ndo , p , length , length )	EMPTY	EMPTY
104	1477	2	-1	0	-1	break	EMPTY	EMPTY
104	1478	2	-1	0	-1	case ppp _ mpls _ ucast :	EMPTY	EMPTY
104	1479	2	-1	0	-1	case ppp _ mpls _ mcast :	EMPTY	EMPTY
104	1480	2	-1	0	-1	mpls _ print ( ndo , p , length )	EMPTY	EMPTY
104	1481	2	-1	0	-1	break	EMPTY	EMPTY
104	1482	2	-1	0	-1	case ppp _ comp :	EMPTY	EMPTY
104	1483	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	1484	2	-1	0	-1	break	EMPTY	EMPTY
104	1485	2	-1	0	-1	default :	EMPTY	EMPTY
104	1486	2	-1	0	-1	nd _ print ( ( ndo  strlit  tok2str ( ppptype2str  strlit  proto ) ) ) ;	tok2str	EMPTY
104	1487	2	-1	0	-1	print _ unknown _ data ( ndo , p ,  " \n\t "  , length )	EMPTY	EMPTY
104	1488	2	-1	0	-1	break	EMPTY	EMPTY
104	1489	2	-1	0	-1	}	EMPTY	EMPTY
104	1490	3	-1	0	-1	}	EMPTY	EMPTY
104	1493	1	0	0	-1	u _ int	EMPTY	EMPTY
104	1494	2	-1	0	-1	ppp _ print ( netdissect _ options * ndo	ppp _ print	EMPTY
104	1495	2	-1	0	-1	register const u _ char * p  u _ int length )	EMPTY	EMPTY
104	1496	2	-1	0	-1	{	EMPTY	EMPTY
104	1497	2	-1	0	-1	u _ int proto , ppp _ header ;	EMPTY	EMPTY
104	1498	2	-1	0	-1	u _ int olen = length ;	olen	EMPTY
104	1499	3	-1	0	-1	u _ int hdr _ len = 0 ;	hdr _ len	EMPTY
104	1505	1	0	0	-1	if ( length < 2 )	EMPTY	EMPTY
104	1506	2	-1	0	-1	goto trunc	EMPTY	EMPTY
104	1507	2	-1	0	-1	nd _ tcheck2 ( * p  numconst ) ;	EMPTY	EMPTY
104	1508	3	-1	0	-1	ppp _ header = extract _ 16bits ( p )	extract _ 16bits	EMPTY
104	1510	1	1	0	1	switch ( ppp _ header ) {	EMPTY	EMPTY
104	1511	2	-1	0	-1	case ( ppp _ withdirection _ in << numconst | ppp _ control ) :	EMPTY	EMPTY
104	1512	2	-1	0	-1	if ( ndo -> ndo _ eflag ) nd _ print ( ( ndo  strlit ) ) ;	ndo _ eflag	EMPTY
104	1513	2	-1	0	-1	p += 2	EMPTY	EMPTY
104	1514	2	-1	0	-1	length -= 2	EMPTY	EMPTY
104	1515	2	-1	0	-1	hdr _ len += 2	hdr _ len	EMPTY
104	1516	2	-1	0	-1	break	EMPTY	EMPTY
104	1517	2	-1	0	-1	case ( ppp _ withdirection _ out << numconst | ppp _ control ) :	EMPTY	EMPTY
104	1518	2	-1	0	-1	if ( ndo -> ndo _ eflag ) nd _ print ( ( ndo  strlit ) ) ;	ndo _ eflag	EMPTY
104	1519	2	-1	0	-1	p += 2	EMPTY	EMPTY
104	1520	2	-1	0	-1	length -= 2	EMPTY	EMPTY
104	1521	2	-1	0	-1	hdr _ len += 2	hdr _ len	EMPTY
104	1522	2	-1	0	-1	break	EMPTY	EMPTY
104	1523	2	-1	0	-1	case ( ppp _ address << 8 | ppp _ control ) :	EMPTY	EMPTY
104	1524	2	-1	1	-1	p += 2	EMPTY	EMPTY
104	1525	2	-1	0	-1	length -= 2	EMPTY	EMPTY
104	1526	2	-1	0	-1	hdr _ len += 2	hdr _ len	EMPTY
104	1527	3	-1	0	-1	break	EMPTY	EMPTY
104	1529	1	0	0	-1	default :	EMPTY	EMPTY
104	1530	2	-1	0	-1	break	EMPTY	EMPTY
104	1531	3	-1	0	-1	}	EMPTY	EMPTY
104	1533	1	1	0	1	if ( length < numconst )	EMPTY	EMPTY
104	1534	2	-1	0	-1	goto trunc ;	EMPTY	EMPTY
104	1535	2	-1	0	-1	nd _ tcheck ( * p ) ;	EMPTY	EMPTY
104	1536	2	-1	0	-1	if ( * p % numconst ) {	EMPTY	EMPTY
104	1537	2	-1	1	-1	proto = * p ;	EMPTY	EMPTY
104	1538	2	-1	0	-1	p ++	EMPTY	EMPTY
104	1539	2	-1	0	-1	length --	EMPTY	EMPTY
104	1540	2	-1	0	-1	hdr _ len ++	hdr _ len	EMPTY
104	1541	2	-1	0	-1	} else {	EMPTY	EMPTY
104	1542	2	-1	0	-1	nd _ tcheck2 ( * p  numconst ) ;	EMPTY	EMPTY
104	1543	2	-1	0	-1	proto = extract _ 16bits ( p ) ;	extract _ 16bits	EMPTY
104	1544	2	-1	0	-1	p += numconst ;	EMPTY	EMPTY
104	1545	2	-1	0	-1	length -= numconst ;	EMPTY	EMPTY
104	1546	2	-1	0	-1	hdr _ len += numconst ;	hdr _ len	EMPTY
104	1547	3	-1	0	-1	}	EMPTY	EMPTY
104	1549	1	0	0	0	if ( ndo -> ndo _ eflag )	ndo _ eflag	EMPTY
104	1550	2	-1	0	-1	nd _ print ( ( ndo  strlit	EMPTY	EMPTY
104	1551	2	-1	0	-1	tok2str ( ppptype2str  strlit  proto )	tok2str	EMPTY
104	1552	2	-1	0	-1	proto	EMPTY	EMPTY
104	1553	3	-1	0	-1	olen ) ) ;	olen	EMPTY
104	1555	1	0	0	0	handle _ ppp ( ndo  proto  p  length ) ;	handle _ ppp	EMPTY
104	1556	2	-1	0	-1	return ( hdr _ len ) ;	hdr _ len	EMPTY
104	1557	2	-1	0	-1	trunc :	EMPTY	EMPTY
104	1558	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	1559	2	-1	0	-1	return ( numconst ) ;	EMPTY	EMPTY
104	1560	3	-1	0	-1	}	EMPTY	EMPTY
104	1564	1	0	0	-1	u _ int	EMPTY	EMPTY
104	1565	2	-1	0	-1	ppp _ if _ print ( netdissect _ options * ndo	ppp _ if _ print	EMPTY
104	1566	2	-1	0	-1	const struct pcap _ pkthdr * h  register const u _ char * p )	pcap _ pkthdr	EMPTY
104	1567	2	-1	0	-1	{	EMPTY	EMPTY
104	1568	2	-1	0	-1	register u _ int length = h -> len ;	len	EMPTY
104	1569	3	-1	0	-1	register u _ int caplen = h -> caplen ;	caplen caplen	EMPTY
104	1571	1	0	0	0	if ( caplen < ppp _ hdrlen ) {	caplen	EMPTY
104	1572	2	-1	0	-1	nd _ print ( ( ndo ,  " [|ppp] "  ) ) ;	EMPTY	EMPTY
104	1573	2	-1	0	-1	return ( caplen ) ;	caplen	EMPTY
104	1574	3	-1	0	-1	}	EMPTY	EMPTY
104	1576	1	1	0	-1	# if numconst	EMPTY	EMPTY
104	1613	2	-1	1	-1	if ( ndo -> ndo _ eflag )	ndo _ eflag	EMPTY
104	1614	2	-1	0	-1	nd _ print ( ( ndo  strlit  p [ numconst ] ? 'o' : 'i'  length  p [ numconst ] ) ) ;	EMPTY	EMPTY
104	1615	3	-1	0	-1	# endif	EMPTY	EMPTY
104	1617	1	0	0	0	ppp _ print ( ndo , p , length )	ppp _ print	EMPTY
104	1619	1	0	0	0	return ( 0 )	EMPTY	EMPTY
104	1620	3	-1	0	-1	}	EMPTY	EMPTY
104	1631	1	0	0	-1	u _ int	EMPTY	EMPTY
104	1632	2	-1	0	-1	ppp _ hdlc _ if _ print ( netdissect _ options * ndo	ppp _ hdlc _ if _ print	EMPTY
104	1633	2	-1	0	-1	const struct pcap _ pkthdr * h  register const u _ char * p )	pcap _ pkthdr	EMPTY
104	1634	2	-1	0	-1	{	EMPTY	EMPTY
104	1635	2	-1	0	-1	register u _ int length = h -> len ;	len	EMPTY
104	1636	2	-1	0	-1	register u _ int caplen = h -> caplen ;	caplen caplen	EMPTY
104	1637	2	-1	0	-1	u _ int proto ;	EMPTY	EMPTY
104	1638	3	-1	0	-1	u _ int hdrlen = 0 ;	EMPTY	EMPTY
104	1640	1	0	0	0	if ( caplen < 2 ) {	caplen	EMPTY
104	1641	2	-1	0	-1	nd _ print ( ( ndo ,  " [|ppp] "  ) ) ;	EMPTY	EMPTY
104	1642	2	-1	0	-1	return ( caplen ) ;	caplen	EMPTY
104	1643	3	-1	0	-1	}	EMPTY	EMPTY
104	1645	1	0	0	0	switch ( p [ numconst ] ) {	EMPTY	EMPTY
104	1647	1	0	0	-1	case ppp _ address :	EMPTY	EMPTY
104	1648	2	-1	0	-1	if ( caplen < 4 ) {	caplen	EMPTY
104	1649	2	-1	0	-1	nd _ print ( ( ndo ,  " [|ppp] "  ) ) ;	EMPTY	EMPTY
104	1650	2	-1	0	-1	return ( caplen ) ;	caplen	EMPTY
104	1651	3	-1	0	-1	}	EMPTY	EMPTY
104	1653	1	0	0	0	if ( ndo -> ndo _ eflag )	ndo _ eflag	EMPTY
104	1654	2	-1	0	-1	nd _ print ( ( ndo  strlit  p [ numconst ]  p [ numconst ]  length ) ) ;	EMPTY	EMPTY
104	1655	2	-1	0	-1	p += 2	EMPTY	EMPTY
104	1656	2	-1	0	-1	length -= 2	EMPTY	EMPTY
104	1657	3	-1	0	-1	hdrlen += 2	EMPTY	EMPTY
104	1659	1	0	0	-1	proto = extract _ 16bits ( p )	extract _ 16bits	EMPTY
104	1660	2	-1	0	-1	p += 2	EMPTY	EMPTY
104	1661	2	-1	0	-1	length -= 2	EMPTY	EMPTY
104	1662	2	-1	0	-1	hdrlen += 2	EMPTY	EMPTY
104	1663	3	-1	0	-1	nd _ print ( ( ndo  strlit  tok2str ( ppptype2str  strlit  proto ) ) ) ;	tok2str	EMPTY
104	1665	1	0	0	0	handle _ ppp ( ndo , proto , p , length )	handle _ ppp	EMPTY
104	1666	3	-1	0	-1	break	EMPTY	EMPTY
104	1668	1	0	0	-1	case chdlc _ unicast :	EMPTY	EMPTY
104	1669	2	-1	0	-1	case chdlc _ bcast :	EMPTY	EMPTY
104	1670	3	-1	0	-1	return ( chdlc _ if _ print ( ndo , h , p ) )	EMPTY	EMPTY
104	1672	1	0	0	-1	default :	EMPTY	EMPTY
104	1673	2	-1	0	-1	if ( ndo -> ndo _ eflag )	ndo _ eflag	EMPTY
104	1674	2	-1	0	-1	nd _ print ( ( ndo  strlit  p [ numconst ]  p [ numconst ]  length ) ) ;	EMPTY	EMPTY
104	1675	2	-1	0	-1	p += 2	EMPTY	EMPTY
104	1676	3	-1	0	-1	hdrlen += 2	EMPTY	EMPTY
104	1683	1	1	1	1	nd _ print ( ( ndo  strlit  p [ numconst ]  p [ numconst ] ) ) ;	EMPTY	EMPTY
104	1684	2	-1	0	-1	break	EMPTY	EMPTY
104	1685	3	-1	0	-1	}	EMPTY	EMPTY
104	1687	1	0	0	0	return ( hdrlen ) ;	EMPTY	EMPTY
104	1688	3	-1	0	-1	}	EMPTY	EMPTY
104	1690	1	0	0	-1	# define ppp _ bsdi _ hdrlen numconst	EMPTY	EMPTY
104	1693	1	0	0	-1	u _ int	EMPTY	EMPTY
104	1694	2	-1	0	-1	ppp _ bsdos _ if _ print ( netdissect _ options * ndo  _ u _	ppp _ bsdos _ if _ print	EMPTY
104	1695	2	-1	0	-1	const struct pcap _ pkthdr * h  _ u _   register const u _ char * p  _ u _  )	pcap _ pkthdr	EMPTY
104	1696	2	-1	0	-1	{	EMPTY	EMPTY
104	1697	2	-1	0	-1	register int hdrlength ;	EMPTY	EMPTY
104	1698	2	-1	0	-1	# ifdef  _  _ bsdi _  _	EMPTY	EMPTY
104	1699	2	-1	0	-1	register u _ int length = h -> len ;	len	EMPTY
104	1700	2	-1	0	-1	register u _ int caplen = h -> caplen ;	caplen caplen	EMPTY
104	1701	2	-1	0	-1	uint16 _ t ptype ;	EMPTY	EMPTY
104	1702	2	-1	0	-1	const u _ char * q ;	EMPTY	EMPTY
104	1703	3	-1	0	-1	int i ;	EMPTY	EMPTY
104	1705	1	0	0	-1	if ( caplen < ppp _ bsdi _ hdrlen ) {	caplen	EMPTY
104	1706	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	1707	2	-1	0	-1	return ( caplen )	caplen	EMPTY
104	1708	3	-1	0	-1	}	EMPTY	EMPTY
104	1710	1	0	0	-1	hdrlength = numconst ;	EMPTY	EMPTY
104	1712	1	0	0	-1	# if numconst	EMPTY	EMPTY
104	1713	2	-1	0	-1	if ( p [ numconst ] == ppp _ address && p [ numconst ] == ppp _ control ) {	EMPTY	EMPTY
104	1714	2	-1	0	-1	if ( ndo -> ndo _ eflag )	ndo _ eflag	EMPTY
104	1715	2	-1	0	-1	nd _ print ( ( ndo  strlit  p [ numconst ]  p [ numconst ] ) ) ;	EMPTY	EMPTY
104	1716	2	-1	0	-1	p += numconst ;	EMPTY	EMPTY
104	1717	2	-1	0	-1	hdrlength = numconst ;	EMPTY	EMPTY
104	1718	3	-1	0	-1	}	EMPTY	EMPTY
104	1720	1	1	0	-1	if ( ndo -> ndo _ eflag )	ndo _ eflag	EMPTY
104	1721	2	-1	0	-1	nd _ print ( ( ndo  strlit  length ) ) ;	EMPTY	EMPTY
104	1723	2	-1	1	-1	if ( * p & numconst ) {	EMPTY	EMPTY
104	1725	2	-1	1	-1	ptype = * p ;	EMPTY	EMPTY
104	1726	2	-1	0	-1	if ( ndo -> ndo _ eflag )	ndo _ eflag	EMPTY
104	1727	2	-1	0	-1	nd _ print ( ( ndo  strlit  ptype ) ) ;	EMPTY	EMPTY
104	1728	2	-1	0	-1	p ++ ;	EMPTY	EMPTY
104	1729	2	-1	0	-1	hdrlength += numconst ;	EMPTY	EMPTY
104	1730	2	-1	0	-1	} else {	EMPTY	EMPTY
104	1732	2	-1	1	-1	ptype = extract _ 16bits ( p ) ;	extract _ 16bits	EMPTY
104	1733	2	-1	0	-1	if ( ndo -> ndo _ eflag )	ndo _ eflag	EMPTY
104	1734	2	-1	0	-1	nd _ print ( ( ndo  strlit  ptype ) ) ;	EMPTY	EMPTY
104	1735	2	-1	0	-1	p += numconst ;	EMPTY	EMPTY
104	1736	2	-1	0	-1	hdrlength += numconst ;	EMPTY	EMPTY
104	1737	2	-1	0	-1	}	EMPTY	EMPTY
104	1738	2	-1	0	-1	# else	EMPTY	EMPTY
104	1739	2	-1	1	-1	ptype = numconst ;	EMPTY	EMPTY
104	1740	2	-1	0	-1	if ( ndo -> ndo _ eflag )	ndo _ eflag	EMPTY
104	1741	2	-1	0	-1	nd _ print ( ( ndo  strlit  p [ slc _ dir ] ? 'o' : 'i' ) ) ;	EMPTY	EMPTY
104	1742	2	-1	0	-1	if ( p [ slc _ llhl ] ) {	EMPTY	EMPTY
104	1744	3	-1	1	-1	struct ppp _ header * ph ;	EMPTY	EMPTY
104	1746	1	0	0	-1	q = p + slc _ bpfhdrlen ;	EMPTY	EMPTY
104	1747	2	-1	0	-1	ph = ( struct ppp _ header * ) q ;	EMPTY	EMPTY
104	1748	2	-1	0	-1	if ( ph -> phdr _ addr == ppp _ address	EMPTY	EMPTY
104	1749	2	-1	0	-1	&& ph -> phdr _ ctl == ppp _ control ) {	EMPTY	EMPTY
104	1750	2	-1	0	-1	if ( ndo -> ndo _ eflag )	ndo _ eflag	EMPTY
104	1751	2	-1	0	-1	nd _ print ( ( ndo  strlit  q [ numconst ]  q [ numconst ] ) ) ;	EMPTY	EMPTY
104	1752	2	-1	0	-1	ptype = extract _ 16bits ( & ph -> phdr _ type ) ;	extract _ 16bits	EMPTY
104	1753	2	-1	0	-1	if ( ndo -> ndo _ eflag && ( ptype == ppp _ vjc || ptype == ppp _ vjnc ) ) {	ndo _ eflag	EMPTY
104	1754	2	-1	0	-1	nd _ print ( ( ndo  strlit  tok2str ( ppptype2str	tok2str	EMPTY
104	1755	2	-1	0	-1	strlit  ptype ) ) ) ;	EMPTY	EMPTY
104	1756	2	-1	0	-1	}	EMPTY	EMPTY
104	1757	2	-1	0	-1	} else {	EMPTY	EMPTY
104	1758	2	-1	0	-1	if ( ndo -> ndo _ eflag ) {	ndo _ eflag	EMPTY
104	1759	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	1760	2	-1	0	-1	for ( i = numconst ; i < p [ slc _ llhl ] ; i ++ )	EMPTY	EMPTY
104	1761	2	-1	0	-1	nd _ print ( ( ndo  strlit  q [ i ] ) ) ;	EMPTY	EMPTY
104	1762	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	1763	2	-1	0	-1	}	EMPTY	EMPTY
104	1764	2	-1	0	-1	}	EMPTY	EMPTY
104	1765	2	-1	0	-1	}	EMPTY	EMPTY
104	1766	2	-1	0	-1	if ( ndo -> ndo _ eflag )	ndo _ eflag	EMPTY
104	1767	2	-1	0	-1	nd _ print ( ( ndo  strlit  length ) ) ;	EMPTY	EMPTY
104	1768	2	-1	0	-1	if ( p [ slc _ chl ] ) {	EMPTY	EMPTY
104	1769	3	-1	0	-1	q = p + slc _ bpfhdrlen + p [ slc _ llhl ] ;	EMPTY	EMPTY
104	1771	1	0	0	-1	switch ( ptype ) {	EMPTY	EMPTY
104	1772	2	-1	0	-1	case ppp _ vjc :	EMPTY	EMPTY
104	1773	2	-1	0	-1	ptype = vjc _ print ( ndo  q  ptype ) ;	EMPTY	EMPTY
104	1774	2	-1	0	-1	hdrlength = ppp _ bsdi _ hdrlen ;	EMPTY	EMPTY
104	1775	2	-1	0	-1	p += hdrlength ;	EMPTY	EMPTY
104	1776	2	-1	0	-1	switch ( ptype ) {	EMPTY	EMPTY
104	1777	2	-1	0	-1	case ppp _ ip :	EMPTY	EMPTY
104	1778	2	-1	0	-1	ip _ print ( ndo  p  length ) ;	EMPTY	EMPTY
104	1779	2	-1	0	-1	break ;	EMPTY	EMPTY
104	1780	2	-1	0	-1	case ppp _ ipv6 :	EMPTY	EMPTY
104	1781	2	-1	0	-1	ip6 _ print ( ndo  p  length ) ;	EMPTY	EMPTY
104	1782	2	-1	0	-1	break ;	EMPTY	EMPTY
104	1783	2	-1	0	-1	case ppp _ mpls _ ucast :	EMPTY	EMPTY
104	1784	2	-1	0	-1	case ppp _ mpls _ mcast :	EMPTY	EMPTY
104	1785	2	-1	0	-1	mpls _ print ( ndo  p  length ) ;	EMPTY	EMPTY
104	1786	2	-1	0	-1	break ;	EMPTY	EMPTY
104	1787	2	-1	0	-1	}	EMPTY	EMPTY
104	1788	2	-1	0	-1	goto printx ;	EMPTY	EMPTY
104	1789	2	-1	0	-1	case ppp _ vjnc :	EMPTY	EMPTY
104	1790	2	-1	0	-1	ptype = vjc _ print ( ndo  q  ptype ) ;	EMPTY	EMPTY
104	1791	2	-1	0	-1	hdrlength = ppp _ bsdi _ hdrlen ;	EMPTY	EMPTY
104	1792	2	-1	0	-1	p += hdrlength ;	EMPTY	EMPTY
104	1793	2	-1	0	-1	switch ( ptype ) {	EMPTY	EMPTY
104	1794	2	-1	0	-1	case ppp _ ip :	EMPTY	EMPTY
104	1795	2	-1	0	-1	ip _ print ( ndo  p  length ) ;	EMPTY	EMPTY
104	1796	2	-1	0	-1	break ;	EMPTY	EMPTY
104	1797	2	-1	0	-1	case ppp _ ipv6 :	EMPTY	EMPTY
104	1798	2	-1	0	-1	ip6 _ print ( ndo  p  length ) ;	EMPTY	EMPTY
104	1799	2	-1	0	-1	break ;	EMPTY	EMPTY
104	1800	3	-1	0	-1	case ppp _ mpls _ ucast :	EMPTY	EMPTY
104	1801	1	0	0	-1	case ppp _ mpls _ mcast :	EMPTY	EMPTY
104	1802	2	-1	0	-1	mpls _ print ( ndo  p  length ) ;	EMPTY	EMPTY
104	1803	2	-1	0	-1	break ;	EMPTY	EMPTY
104	1804	2	-1	0	-1	}	EMPTY	EMPTY
104	1805	2	-1	0	-1	goto printx ;	EMPTY	EMPTY
104	1806	2	-1	0	-1	default :	EMPTY	EMPTY
104	1807	2	-1	0	-1	if ( ndo -> ndo _ eflag ) {	ndo _ eflag	EMPTY
104	1808	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	1809	2	-1	0	-1	for ( i = numconst ; i < p [ slc _ llhl ] ; i ++ )	EMPTY	EMPTY
104	1810	2	-1	0	-1	nd _ print ( ( ndo  strlit  q [ i ] ) ) ;	EMPTY	EMPTY
104	1811	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
104	1812	2	-1	0	-1	}	EMPTY	EMPTY
104	1813	2	-1	0	-1	break ;	EMPTY	EMPTY
104	1814	2	-1	0	-1	}	EMPTY	EMPTY
104	1815	3	-1	0	-1	}	EMPTY	EMPTY
104	1817	1	0	0	-1	hdrlength = ppp _ bsdi _ hdrlen ;	EMPTY	EMPTY
104	1818	3	-1	0	-1	# endif	EMPTY	EMPTY
104	1820	1	0	0	-1	length -= hdrlength ;	EMPTY	EMPTY
104	1821	3	-1	0	-1	p += hdrlength ;	EMPTY	EMPTY
104	1823	1	0	0	-1	switch ( ptype ) {	EMPTY	EMPTY
104	1824	2	-1	0	-1	case ppp _ ip :	EMPTY	EMPTY
104	1825	2	-1	0	-1	ip _ print ( p  length ) ;	EMPTY	EMPTY
104	1826	2	-1	0	-1	break ;	EMPTY	EMPTY
104	1827	2	-1	0	-1	case ppp _ ipv6 :	EMPTY	EMPTY
104	1828	2	-1	0	-1	ip6 _ print ( ndo  p  length ) ;	EMPTY	EMPTY
104	1829	2	-1	0	-1	break ;	EMPTY	EMPTY
104	1830	2	-1	0	-1	case ppp _ mpls _ ucast :	EMPTY	EMPTY
104	1831	2	-1	0	-1	case ppp _ mpls _ mcast :	EMPTY	EMPTY
104	1832	2	-1	0	-1	mpls _ print ( ndo  p  length ) ;	EMPTY	EMPTY
104	1833	2	-1	0	-1	break ;	EMPTY	EMPTY
104	1834	2	-1	0	-1	default :	EMPTY	EMPTY
104	1835	2	-1	0	-1	nd _ print ( ( ndo  strlit  tok2str ( ppptype2str  strlit  ptype ) ) ) ;	tok2str	EMPTY
104	1836	3	-1	0	-1	}	EMPTY	EMPTY
104	1838	1	1	0	-1	printx :	EMPTY	EMPTY
104	1839	2	-1	1	-1	# else	EMPTY	EMPTY
104	1840	2	-1	0	-1	hdrlength = 0	EMPTY	EMPTY
104	1841	2	-1	0	-1	# endif	EMPTY	EMPTY
104	1842	2	-1	0	-1	return ( hdrlength )	EMPTY	EMPTY
104	1843	3	-1	0	-1	}	EMPTY	EMPTY
129	45	1	0	0	0	static const char tstr [ ] = strlit	EMPTY	EMPTY
129	46	3	-1	0	-1	static const char cstr [ ] = strlit ;	EMPTY	EMPTY
129	48	1	0	0	-1	# define of _ ver _ 1 _ 0 numconst	EMPTY	EMPTY
129	50	1	0	0	-1	const struct tok onf _ exp _ str [ ] = {	EMPTY	EMPTY
129	51	2	-1	0	-1	{ onf _ exp _ onf  strlit }	EMPTY	EMPTY
129	52	2	-1	0	-1	{ onf _ exp _ bute  strlit }	EMPTY	EMPTY
129	53	2	-1	0	-1	{ onf _ exp _ noviflow  strlit }	EMPTY	EMPTY
129	54	2	-1	0	-1	{ onf _ exp _ l3  strlit }	EMPTY	EMPTY
129	55	2	-1	0	-1	{ onf _ exp _ l4l7  strlit }	EMPTY	EMPTY
129	56	2	-1	0	-1	{ onf _ exp _ wmob  strlit }	EMPTY	EMPTY
129	57	2	-1	0	-1	{ onf _ exp _ fabs  strlit }	EMPTY	EMPTY
129	58	2	-1	0	-1	{ onf _ exp _ otrans  strlit }	EMPTY	EMPTY
129	59	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
129	60	3	-1	0	-1	} ;	EMPTY	EMPTY
129	62	1	0	0	-1	const char *	EMPTY	EMPTY
129	63	2	-1	0	-1	of _ vendor _ name ( const uint32 _ t vendor )	EMPTY	EMPTY
129	64	2	-1	0	-1	{	EMPTY	EMPTY
129	65	2	-1	0	-1	const struct tok * table = ( vendor & 0xff000000 ) == 0 ? oui _ values : onf _ exp _ str ;	EMPTY	EMPTY
129	66	2	-1	0	-1	return tok2str ( table ,  " unknown "  , vendor )	tok2str	EMPTY
129	67	3	-1	0	-1	}	EMPTY	EMPTY
129	69	1	0	0	-1	static void	EMPTY	EMPTY
129	70	2	-1	0	-1	of _ header _ print ( netdissect _ options * ndo  const uint8 _ t version  const uint8 _ t type	ndo	EMPTY
129	71	2	-1	0	-1	const uint16 _ t length  const uint32 _ t xid )	EMPTY	EMPTY
129	72	2	-1	0	-1	{	EMPTY	EMPTY
129	73	2	-1	0	-1	nd _ print ( ( ndo  strlit	ndo	EMPTY
129	74	2	-1	0	-1	version  type  length  xid ) ) ;	EMPTY	EMPTY
129	75	3	-1	0	-1	}	EMPTY	EMPTY
129	78	1	0	0	-1	static const u _ char *	EMPTY	EMPTY
129	79	2	-1	0	-1	of _ header _ body _ print ( netdissect _ options * ndo  const u _ char * cp  const u _ char * ep )	of _ header _ body _ print ndo	EMPTY
129	80	2	-1	0	-1	{	EMPTY	EMPTY
129	81	2	-1	0	-1	uint8 _ t version , type ;	EMPTY	EMPTY
129	82	2	-1	0	-1	uint16 _ t length ;	EMPTY	EMPTY
129	83	3	-1	0	-1	uint32 _ t xid ;	EMPTY	EMPTY
129	85	1	0	0	0	if ( ep < cp + of _ header _ len )	EMPTY	EMPTY
129	86	3	-1	0	-1	goto corrupt	EMPTY	EMPTY
129	88	1	0	0	-1	nd _ tcheck2 ( * cp  numconst ) ;	EMPTY	EMPTY
129	89	2	-1	0	-1	version = * cp	EMPTY	EMPTY
129	90	3	-1	0	-1	cp += 1	EMPTY	EMPTY
129	92	1	0	0	-1	nd _ tcheck2 ( * cp  numconst ) ;	EMPTY	EMPTY
129	93	2	-1	0	-1	type = * cp	EMPTY	EMPTY
129	94	3	-1	0	-1	cp += 1	EMPTY	EMPTY
129	96	1	0	0	-1	nd _ tcheck2 ( * cp  numconst ) ;	EMPTY	EMPTY
129	97	2	-1	0	-1	length = extract _ 16bits ( cp )	extract _ 16bits	EMPTY
129	98	3	-1	0	-1	cp += 2	EMPTY	EMPTY
129	100	1	0	0	-1	nd _ tcheck2 ( * cp  numconst ) ;	EMPTY	EMPTY
129	101	2	-1	0	-1	xid = extract _ 32bits ( cp )	EMPTY	EMPTY
129	102	3	-1	0	-1	cp += 4	EMPTY	EMPTY
129	108	1	0	0	-1	if ( length < of _ header _ len ) {	EMPTY	EMPTY
129	109	2	-1	0	-1	of _ header _ print ( ndo , version , type , length , xid ) ;	ndo	EMPTY
129	110	2	-1	0	-1	goto corrupt ;	EMPTY	EMPTY
129	111	3	-1	0	-1	}	EMPTY	EMPTY
129	114	1	0	0	-1	switch ( version ) {	EMPTY	EMPTY
129	115	2	-1	0	-1	case of _ ver _ 1 _ 0 :	EMPTY	EMPTY
129	116	2	-1	0	-1	return of10 _ header _ body _ print ( ndo , cp , ep , type , length , xid )	of10 _ header _ body _ print ndo	EMPTY
129	117	2	-1	0	-1	default :	EMPTY	EMPTY
129	118	2	-1	0	-1	of _ header _ print ( ndo , version , type , length , xid )	ndo	EMPTY
129	119	2	-1	0	-1	nd _ tcheck2 ( * cp  length - of _ header _ len ) ;	EMPTY	EMPTY
129	120	2	-1	0	-1	return cp + length - of _ header _ len ;	EMPTY	EMPTY
129	121	3	-1	0	-1	}	EMPTY	EMPTY
129	123	1	1	1	1	corrupt :	EMPTY	EMPTY
129	124	2	-1	0	-1	nd _ print ( ( ndo  strlit  cstr ) ) ;	ndo	EMPTY
129	125	2	-1	0	-1	nd _ tcheck2 ( * cp  ep - cp ) ;	EMPTY	EMPTY
129	126	2	-1	0	-1	return ep	EMPTY	EMPTY
129	127	2	-1	0	-1	trunc :	EMPTY	EMPTY
129	128	2	-1	0	-1	nd _ print ( ( ndo  strlit  tstr ) ) ;	ndo	EMPTY
129	129	2	-1	0	-1	return ep	EMPTY	EMPTY
129	130	3	-1	0	-1	}	EMPTY	EMPTY
129	134	1	0	0	-1	void	EMPTY	EMPTY
129	135	2	-1	0	-1	openflow _ print ( netdissect _ options * ndo  const u _ char * cp  const u _ int len )	openflow _ print ndo len	EMPTY
129	136	2	-1	0	-1	{	EMPTY	EMPTY
129	137	3	-1	0	-1	const u _ char * ep = cp + len ;	len	EMPTY
129	139	1	0	0	0	nd _ print ( ( ndo  strlit ) ) ;	ndo	EMPTY
129	140	2	-1	0	-1	while ( cp < ep )	EMPTY	EMPTY
129	141	2	-1	0	-1	cp = of _ header _ body _ print ( ndo , cp , ep )	of _ header _ body _ print ndo	EMPTY
129	142	3	-1	0	-1	}	EMPTY	EMPTY
147	45	1	0	0	0	static const char tstr [ ] = strlit	EMPTY	EMPTY
147	46	3	-1	0	-1	static const char cstr [ ] = strlit ;	EMPTY	EMPTY
147	48	1	0	0	-1	# define loopback _ reply numconst	EMPTY	EMPTY
147	49	3	-1	0	-1	# define loopback _ fwddata numconst	EMPTY	EMPTY
147	51	1	0	0	-1	static const struct tok fcode _ str [ ] = {	EMPTY	EMPTY
147	52	2	-1	0	-1	{ loopback _ reply  strlit }	EMPTY	EMPTY
147	53	2	-1	0	-1	{ loopback _ fwddata  strlit }	EMPTY	EMPTY
147	54	2	-1	0	-1	{ numconst  null }	EMPTY	EMPTY
147	55	3	-1	0	-1	} ;	EMPTY	EMPTY
147	57	1	0	0	-1	static void	EMPTY	EMPTY
147	58	2	-1	0	-1	loopback _ message _ print ( netdissect _ options * ndo  const u _ char * cp  const u _ int len )	len	EMPTY
147	59	2	-1	0	-1	{	EMPTY	EMPTY
147	60	2	-1	0	-1	const u _ char * ep = cp + len ;	len	EMPTY
147	61	3	-1	0	-1	uint16 _ t function ;	EMPTY	EMPTY
147	63	1	0	0	0	if ( len < 2 )	len	EMPTY
147	64	3	-1	0	-1	goto corrupt	EMPTY	EMPTY
147	66	1	0	0	-1	nd _ tcheck2 ( * cp  numconst ) ;	EMPTY	EMPTY
147	67	2	-1	0	-1	function = extract _ le _ 16bits ( cp ) ;	EMPTY	EMPTY
147	68	2	-1	0	-1	cp += 2	EMPTY	EMPTY
147	69	3	-1	0	-1	nd _ print ( ( ndo  strlit  tok2str ( fcode _ str  strlit  function ) ) ) ;	tok2str	EMPTY
147	71	1	1	0	1	switch ( function ) {	EMPTY	EMPTY
147	72	2	-1	0	-1	case loopback _ reply :	EMPTY	EMPTY
147	73	2	-1	0	-1	if ( len < 4 )	len	EMPTY
147	74	2	-1	0	-1	goto corrupt	EMPTY	EMPTY
147	76	2	-1	1	-1	nd _ tcheck2 ( * cp  numconst ) ;	EMPTY	EMPTY
147	77	2	-1	0	-1	nd _ print ( ( ndo  strlit  extract _ le _ 16bits ( cp ) ) ) ;	EMPTY	EMPTY
147	78	2	-1	0	-1	cp += 2	EMPTY	EMPTY
147	80	2	-1	1	-1	nd _ print ( ( ndo  strlit  len - numconst ) ) ;	len	EMPTY
147	81	2	-1	0	-1	nd _ tcheck2 ( * cp  len - numconst ) ;	len	EMPTY
147	82	2	-1	0	-1	break	EMPTY	EMPTY
147	83	2	-1	0	-1	case loopback _ fwddata :	EMPTY	EMPTY
147	84	2	-1	0	-1	if ( len < 8 )	len	EMPTY
147	85	2	-1	0	-1	goto corrupt	EMPTY	EMPTY
147	87	2	-1	1	-1	nd _ tcheck2 ( * cp  ether _ addr _ len ) ;	EMPTY	EMPTY
147	88	2	-1	0	-1	nd _ print ( ( ndo  strlit  etheraddr _ string ( ndo  cp ) ) ) ;	EMPTY	EMPTY
147	89	2	-1	0	-1	cp += ether _ addr _ len ;	EMPTY	EMPTY
147	91	2	-1	1	-1	nd _ print ( ( ndo  strlit  len - numconst ) ) ;	len	EMPTY
147	92	2	-1	0	-1	nd _ tcheck2 ( * cp  len - numconst ) ;	len	EMPTY
147	93	2	-1	0	-1	break	EMPTY	EMPTY
147	94	2	-1	0	-1	default :	EMPTY	EMPTY
147	95	2	-1	0	-1	nd _ tcheck2 ( * cp  len - numconst ) ;	len	EMPTY
147	96	2	-1	0	-1	break	EMPTY	EMPTY
147	97	2	-1	0	-1	}	EMPTY	EMPTY
147	98	3	-1	0	-1	return ;	EMPTY	EMPTY
147	100	1	0	0	-1	corrupt :	EMPTY	EMPTY
147	101	2	-1	0	-1	nd _ print ( ( ndo  strlit  cstr ) ) ;	EMPTY	EMPTY
147	102	2	-1	0	-1	nd _ tcheck2 ( * cp  ep - cp ) ;	EMPTY	EMPTY
147	103	2	-1	0	-1	return ;	EMPTY	EMPTY
147	104	2	-1	0	-1	trunc :	EMPTY	EMPTY
147	105	2	-1	0	-1	nd _ print ( ( ndo  strlit  tstr ) ) ;	EMPTY	EMPTY
147	106	3	-1	0	-1	}	EMPTY	EMPTY
147	108	1	0	0	-1	void	EMPTY	EMPTY
147	109	2	-1	0	-1	loopback _ print ( netdissect _ options * ndo  const u _ char * cp  const u _ int len )	len	EMPTY
147	110	2	-1	0	-1	{	EMPTY	EMPTY
147	111	2	-1	0	-1	const u _ char * ep = cp + len ;	len	EMPTY
147	112	3	-1	0	-1	uint16 _ t skipcount ;	EMPTY	EMPTY
147	114	1	0	0	0	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
147	115	2	-1	0	-1	if ( len < numconst )	len	EMPTY
147	116	3	-1	0	-1	goto corrupt ;	EMPTY	EMPTY
147	118	1	0	0	-1	nd _ tcheck2 ( * cp  numconst ) ;	EMPTY	EMPTY
147	119	2	-1	0	-1	skipcount = extract _ le _ 16bits ( cp ) ;	EMPTY	EMPTY
147	120	2	-1	0	-1	cp += 2	EMPTY	EMPTY
147	121	2	-1	0	-1	nd _ print ( ( ndo  strlit  skipcount ) ) ;	EMPTY	EMPTY
147	122	2	-1	0	-1	if ( skipcount % numconst )	EMPTY	EMPTY
147	123	2	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
147	124	2	-1	0	-1	if ( skipcount > len - 2 )	len	EMPTY
147	125	2	-1	0	-1	goto corrupt	EMPTY	EMPTY
147	126	2	-1	0	-1	loopback _ message _ print ( ndo , cp + skipcount , len - 2 - skipcount )	len	EMPTY
147	127	3	-1	0	-1	return	EMPTY	EMPTY
147	129	1	0	0	-1	corrupt :	EMPTY	EMPTY
147	130	2	-1	0	-1	nd _ print ( ( ndo  strlit  cstr ) ) ;	EMPTY	EMPTY
147	131	2	-1	0	-1	nd _ tcheck2 ( * cp  ep - cp ) ;	EMPTY	EMPTY
147	132	2	-1	0	-1	return	EMPTY	EMPTY
147	133	2	-1	0	-1	trunc :	EMPTY	EMPTY
147	134	2	-1	0	-1	nd _ print ( ( ndo  strlit  tstr ) ) ;	EMPTY	EMPTY
147	135	3	-1	0	-1	}	EMPTY	EMPTY
153	52	1	0	0	-1	struct mobile _ ip {	EMPTY	EMPTY
153	53	2	-1	0	-1	uint16 _ t proto ;	EMPTY	EMPTY
153	54	2	-1	0	-1	uint16 _ t hcheck ;	EMPTY	EMPTY
153	55	2	-1	0	-1	uint32 _ t odst ;	EMPTY	EMPTY
153	56	2	-1	0	-1	uint32 _ t osrc ;	EMPTY	EMPTY
153	57	3	-1	0	-1	} ;	EMPTY	EMPTY
153	59	1	1	1	-1	# define osrc _ pres numconst	EMPTY	EMPTY
153	64	1	1	0	-1	void	EMPTY	EMPTY
153	65	2	-1	0	-1	mobile _ print ( netdissect _ options * ndo  const u _ char * bp  u _ int length )	mobile _ print	EMPTY
153	66	2	-1	0	-1	{	EMPTY	EMPTY
153	67	2	-1	0	-1	const struct mobile _ ip * mob ;	EMPTY	EMPTY
153	68	2	-1	0	-1	struct cksum _ vec vec [ 1 ] ;	EMPTY	EMPTY
153	69	2	-1	0	-1	u _ short proto , crc ;	EMPTY	EMPTY
153	70	3	-1	1	-1	u _ char osp = 0 ;	osp	EMPTY
153	72	1	0	0	-1	mob = ( const struct mobile _ ip * ) bp	EMPTY	EMPTY
153	74	1	0	0	0	if ( length < mobile _ size || ! nd _ ttest ( * mob ) ) {	EMPTY	EMPTY
153	75	2	-1	0	-1	nd _ print ( ( ndo ,  " [|mobile] "  ) ) ;	EMPTY	EMPTY
153	76	2	-1	0	-1	return ;	EMPTY	EMPTY
153	77	2	-1	0	-1	}	EMPTY	EMPTY
153	78	3	-1	0	-1	nd _ print ( ( ndo  strlit ) ) ;	EMPTY	EMPTY
153	80	1	0	0	-1	proto = extract _ 16bits ( & mob -> proto )	extract _ 16bits	EMPTY
153	81	2	-1	0	-1	crc = extract _ 16bits ( & mob -> hcheck )	extract _ 16bits	EMPTY
153	82	2	-1	0	-1	if ( proto & osrc _ pres ) {	EMPTY	EMPTY
153	83	2	-1	0	-1	osp = 1 ;	osp	EMPTY
153	84	3	-1	0	-1	}	EMPTY	EMPTY
153	86	1	0	0	0	if ( osp ) {	osp	EMPTY
153	87	2	-1	0	-1	nd _ print ( ( ndo ,  " [s]  "  ) ) ;	EMPTY	EMPTY
153	88	2	-1	0	-1	if ( ndo -> ndo _ vflag )	ndo _ vflag	EMPTY
153	89	2	-1	0	-1	nd _ print ( ( ndo ,  " %s  "  , ipaddr _ string ( ndo , & mob -> osrc ) ) ) ;	EMPTY	EMPTY
153	90	2	-1	0	-1	} else {	EMPTY	EMPTY
153	91	2	-1	0	-1	nd _ print ( ( ndo ,  " []  "  ) ) ;	EMPTY	EMPTY
153	92	2	-1	0	-1	}	EMPTY	EMPTY
153	93	2	-1	0	-1	if ( ndo -> ndo _ vflag ) {	ndo _ vflag	EMPTY
153	94	2	-1	0	-1	nd _ print ( ( ndo ,  " > %s  "  , ipaddr _ string ( ndo , & mob -> odst ) ) ) ;	EMPTY	EMPTY
153	95	2	-1	0	-1	nd _ print ( ( ndo ,  " (oproto=%d) "  , proto >> 8 ) ) ;	EMPTY	EMPTY
153	96	2	-1	0	-1	}	EMPTY	EMPTY
153	97	2	-1	0	-1	vec [ 0 ] . ptr = ( const uint8 _ t * ) ( void * ) mob	EMPTY	EMPTY
153	98	2	-1	0	-1	vec [ 0 ] . len = osp ? 12 : 8	len osp	EMPTY
153	99	2	-1	0	-1	if ( in _ cksum ( vec , 1 ) != 0 ) {	EMPTY	EMPTY
153	100	2	-1	0	-1	nd _ print ( ( ndo ,  "  (bad checksum %d) "  , crc ) ) ;	EMPTY	EMPTY
153	101	2	-1	0	-1	}	EMPTY	EMPTY
153	102	3	-1	0	-1	}	EMPTY	EMPTY
167	80	1	0	0	-1	struct hnamemem {	EMPTY	EMPTY
167	81	2	-1	0	-1	uint32 _ t addr ;	addr	EMPTY
167	82	2	-1	0	-1	const char * name ;	name	EMPTY
167	83	2	-1	0	-1	struct hnamemem * nxt ;	EMPTY	EMPTY
167	84	3	-1	0	-1	} ;	EMPTY	EMPTY
167	86	1	0	0	0	static struct hnamemem hnametable [ hashnamesize ]	EMPTY	EMPTY
167	87	2	-1	0	-1	static struct hnamemem tporttable [ hashnamesize ]	EMPTY	EMPTY
167	88	2	-1	0	-1	static struct hnamemem uporttable [ hashnamesize ]	EMPTY	EMPTY
167	89	2	-1	0	-1	static struct hnamemem eprototable [ hashnamesize ]	EMPTY	EMPTY
167	90	2	-1	0	-1	static struct hnamemem dnaddrtable [ hashnamesize ]	EMPTY	EMPTY
167	91	3	-1	0	-1	static struct hnamemem ipxsaptable [ hashnamesize ] ;	EMPTY	EMPTY
167	93	1	1	0	-1	# if defined ( inet6 ) && defined ( win32 )	EMPTY	EMPTY
167	101	2	-1	1	-1	static struct hostent *	EMPTY	EMPTY
167	102	2	-1	0	-1	win32 _ gethostbyaddr ( const char * addr  int len  int type )	addr len	EMPTY
167	103	2	-1	0	-1	{	EMPTY	EMPTY
167	104	2	-1	0	-1	static struct hostent host ;	EMPTY	EMPTY
167	105	2	-1	0	-1	static char hostbuf [ ni _ maxhost ] ;	EMPTY	EMPTY
167	106	2	-1	0	-1	char hname [ ni _ maxhost ] ;	EMPTY	EMPTY
167	107	3	-1	0	-1	struct sockaddr _ in6 addr6 ;	EMPTY	EMPTY
167	109	1	1	0	-1	host . h _ name = hostbuf ;	EMPTY	EMPTY
167	110	2	-1	0	-1	switch ( type ) {	EMPTY	EMPTY
167	111	2	-1	0	-1	case af _ inet :	EMPTY	EMPTY
167	112	2	-1	0	-1	return gethostbyaddr ( addr  len  type ) ;	addr len	gethostbyaddr
167	113	2	-1	0	-1	break ;	EMPTY	EMPTY
167	114	2	-1	0	-1	case af _ inet6 :	EMPTY	EMPTY
167	115	2	-1	0	-1	memset ( & addr6  numconst  sizeof ( addr6 ) ) ;	EMPTY	EMPTY
167	116	2	-1	0	-1	addr6 . sin6 _ family = af _ inet6 ;	EMPTY	EMPTY
167	117	2	-1	0	-1	memcpy ( & addr6 . sin6 _ addr  addr  len ) ;	addr len	memcpy
167	118	2	-1	0	-1	if ( getnameinfo ( ( struct sockaddr * ) & addr6  sizeof ( addr6 )	EMPTY	EMPTY
167	119	2	-1	0	-1	hname  sizeof ( hname )  null  numconst  numconst ) ) {	EMPTY	EMPTY
167	120	2	-1	0	-1	return null ;	EMPTY	EMPTY
167	121	2	-1	0	-1	} else {	EMPTY	EMPTY
167	122	2	-1	0	-1	strcpy ( host . h _ name  hname ) ;	EMPTY	EMPTY
167	123	2	-1	0	-1	return & host ;	EMPTY	EMPTY
167	124	2	-1	0	-1	}	EMPTY	EMPTY
167	125	2	-1	0	-1	break ;	EMPTY	EMPTY
167	126	2	-1	0	-1	default :	EMPTY	EMPTY
167	127	2	-1	0	-1	return null ;	EMPTY	EMPTY
167	128	2	-1	0	-1	}	EMPTY	EMPTY
167	129	2	-1	0	-1	}	EMPTY	EMPTY
167	130	2	-1	0	-1	# define gethostbyaddr win32 _ gethostbyaddr	EMPTY	gethostbyaddr
167	131	3	-1	1	-1	# endif	EMPTY	EMPTY
167	133	1	0	0	0	# ifdef inet6	EMPTY	EMPTY
167	134	2	-1	0	-1	struct h6namemem {	EMPTY	EMPTY
167	135	2	-1	0	-1	struct in6 _ addr addr ;	addr	EMPTY
167	136	2	-1	0	-1	char * name ;	name	EMPTY
167	137	2	-1	0	-1	struct h6namemem * nxt ;	EMPTY	EMPTY
167	138	3	-1	0	-1	} ;	EMPTY	EMPTY
167	140	1	1	0	-1	static struct h6namemem h6nametable [ hashnamesize ] ;	EMPTY	EMPTY
167	141	3	-1	1	-1	# endif	EMPTY	EMPTY
167	143	1	1	0	-1	struct enamemem {	EMPTY	EMPTY
167	144	2	-1	0	-1	u _ short e _ addr0 ;	EMPTY	EMPTY
167	145	2	-1	0	-1	u _ short e _ addr1 ;	EMPTY	EMPTY
167	146	2	-1	0	-1	u _ short e _ addr2 ;	EMPTY	EMPTY
167	147	2	-1	0	-1	const char * e _ name ;	EMPTY	EMPTY
167	148	2	-1	1	-1	u _ char * e _ nsap ;	e _ nsap	EMPTY
167	149	2	-1	1	-1	# define e _ bs e _ nsap	e _ nsap	EMPTY
167	150	2	-1	0	-1	struct enamemem * e _ nxt ;	e _ nxt	EMPTY
167	151	3	-1	0	-1	} ;	EMPTY	EMPTY
167	153	1	0	0	0	static struct enamemem enametable [ hashnamesize ]	EMPTY	EMPTY
167	154	2	-1	0	-1	static struct enamemem nsaptable [ hashnamesize ]	EMPTY	EMPTY
167	155	3	-1	0	-1	static struct enamemem bytestringtable [ hashnamesize ] ;	EMPTY	EMPTY
167	157	1	0	0	-1	struct protoidmem {	EMPTY	EMPTY
167	158	2	-1	0	-1	uint32 _ t p _ oui ;	EMPTY	EMPTY
167	159	2	-1	0	-1	u _ short p _ proto ;	EMPTY	EMPTY
167	160	2	-1	0	-1	const char * p _ name ;	EMPTY	EMPTY
167	161	2	-1	0	-1	struct protoidmem * p _ nxt ;	EMPTY	EMPTY
167	162	3	-1	0	-1	} ;	EMPTY	EMPTY
167	164	1	0	0	-1	static struct protoidmem protoidtable [ hashnamesize ] ;	EMPTY	EMPTY
167	169	1	0	0	-1	const char *	EMPTY	EMPTY
167	170	2	-1	0	-1	intoa ( uint32 _ t addr )	intoa addr	EMPTY
167	171	2	-1	0	-1	{	EMPTY	EMPTY
167	172	2	-1	0	-1	register char * cp ;	cp	EMPTY
167	173	2	-1	0	-1	register u _ int byte ;	EMPTY	EMPTY
167	174	2	-1	0	-1	register int n ;	EMPTY	EMPTY
167	175	3	-1	0	-1	static char buf [ sizeof (  " .xxx.xxx.xxx.xxx "  ) ] ;	EMPTY	EMPTY
167	177	1	0	0	-1	ntohl ( addr ) ;	addr	EMPTY
167	178	2	-1	0	-1	cp = buf + sizeof ( buf )	cp	EMPTY
167	179	3	-1	0	-1	* -- cp = '\0'	cp	EMPTY
167	181	1	0	0	-1	n = 4	EMPTY	EMPTY
167	182	2	-1	0	-1	do {	EMPTY	EMPTY
167	183	2	-1	0	-1	byte = addr & 0xff ;	addr	EMPTY
167	184	2	-1	0	-1	* -- cp = byte % 10 + '0' ;	cp	EMPTY
167	185	2	-1	0	-1	byte /= 10 ;	EMPTY	EMPTY
167	186	2	-1	0	-1	if ( byte > 0 ) {	EMPTY	EMPTY
167	187	2	-1	0	-1	* -- cp = byte % 10 + '0' ;	cp	EMPTY
167	188	2	-1	0	-1	byte /= 10 ;	EMPTY	EMPTY
167	189	2	-1	0	-1	if ( byte > 0 )	EMPTY	EMPTY
167	190	2	-1	0	-1	* -- cp = byte + '0' ;	cp	EMPTY
167	191	2	-1	0	-1	}	EMPTY	EMPTY
167	192	2	-1	0	-1	* -- cp = '.' ;	cp	EMPTY
167	193	2	-1	0	-1	addr >>= 8 ;	addr	EMPTY
167	194	3	-1	0	-1	} while ( -- n > 0 )	EMPTY	EMPTY
167	196	1	0	0	0	return cp + 1	cp	EMPTY
167	197	3	-1	0	-1	}	EMPTY	EMPTY
167	199	1	0	0	0	static uint32 _ t f _ netmask	EMPTY	EMPTY
167	200	3	-1	0	-1	static uint32 _ t f _ localnet ;	EMPTY	EMPTY
167	221	1	1	0	-1	const char *	EMPTY	EMPTY
167	222	2	-1	0	-1	getname ( netdissect _ options * ndo  const u _ char * ap )	getname	EMPTY
167	223	2	-1	0	-1	{	EMPTY	EMPTY
167	224	2	-1	0	-1	register struct hostent * hp ;	EMPTY	EMPTY
167	225	2	-1	0	-1	uint32 _ t addr ;	addr	EMPTY
167	226	3	-1	1	-1	static struct hnamemem * p ;	p	EMPTY
167	228	1	0	0	0	memcpy ( & addr , ap , sizeof ( addr ) )	addr addr	memcpy
167	229	2	-1	0	-1	p = & hnametable [ addr & ( hashnamesize - 1 ) ]	p addr	EMPTY
167	230	2	-1	0	-1	for ( ; p -> nxt ; p = p -> nxt ) {	p p p	EMPTY
167	231	2	-1	0	-1	if ( p -> addr == addr )	p addr addr	EMPTY
167	232	2	-1	0	-1	return ( p -> name ) ;	p name	EMPTY
167	233	2	-1	0	-1	}	EMPTY	EMPTY
167	234	2	-1	0	-1	p -> addr = addr	p addr addr	EMPTY
167	235	3	-1	0	-1	p -> nxt = newhnamemem ( )	p newhnamemem	EMPTY
167	244	1	0	0	-1	if ( ! ndo -> ndo _ nflag &&	ndo _ nflag	EMPTY
167	245	2	-1	0	-1	( addr & f _ netmask ) == f _ localnet ) {	addr	EMPTY
167	246	2	-1	0	-1	hp = gethostbyaddr ( ( char * ) & addr , 4 , af _ inet )	addr	gethostbyaddr
167	247	2	-1	0	-1	if ( hp ) {	EMPTY	EMPTY
167	248	3	-1	0	-1	char * dotp ;	EMPTY	EMPTY
167	250	1	1	0	-1	p -> name = strdup ( hp -> h _ name )	p name	strdup
167	251	2	-1	0	-1	if ( ndo -> ndo _ nflag ) {	ndo _ nflag	EMPTY
167	253	2	-1	1	-1	dotp = strchr ( p -> name , '.' )	p name	strchr
167	254	2	-1	0	-1	if ( dotp )	EMPTY	EMPTY
167	255	2	-1	0	-1	* dotp = '\0'	EMPTY	EMPTY
167	256	2	-1	0	-1	}	EMPTY	EMPTY
167	257	2	-1	0	-1	return ( p -> name ) ;	p name	EMPTY
167	258	2	-1	0	-1	}	EMPTY	EMPTY
167	259	2	-1	0	-1	}	EMPTY	EMPTY
167	260	2	-1	0	-1	p -> name = strdup ( intoa ( addr ) ) ;	p name intoa addr	strdup
167	261	2	-1	0	-1	return ( p -> name ) ;	p name	EMPTY
167	262	3	-1	0	-1	}	EMPTY	EMPTY
167	264	1	0	0	-1	# ifdef inet6	EMPTY	EMPTY
167	269	1	1	0	-1	const char *	EMPTY	EMPTY
167	270	2	-1	0	-1	getname6 ( netdissect _ options * ndo  const u _ char * ap )	getname6	EMPTY
167	271	2	-1	0	-1	{	EMPTY	EMPTY
167	272	2	-1	0	-1	register struct hostent * hp ;	EMPTY	EMPTY
167	273	2	-1	0	-1	union {	EMPTY	EMPTY
167	274	2	-1	0	-1	struct in6 _ addr addr ;	addr	EMPTY
167	275	2	-1	0	-1	struct for _ hash _ addr {	EMPTY	EMPTY
167	276	2	-1	0	-1	char fill [ 14 ] ;	EMPTY	EMPTY
167	277	2	-1	0	-1	uint16 _ t d ;	EMPTY	EMPTY
167	278	2	-1	0	-1	} addra ;	EMPTY	EMPTY
167	279	2	-1	0	-1	} addr ;	addr	EMPTY
167	280	2	-1	1	-1	static struct h6namemem * p ;	p	EMPTY
167	281	2	-1	0	-1	register const char * cp ;	cp	EMPTY
167	282	3	-1	0	-1	char ntop _ buf [ inet6 _ addrstrlen ] ;	EMPTY	EMPTY
167	284	1	0	0	0	memcpy ( & addr , ap , sizeof ( addr ) )	addr addr	memcpy
167	285	2	-1	0	-1	p = & h6nametable [ addr . addra . d & ( hashnamesize - 1 ) ]	p addr	EMPTY
167	286	2	-1	0	-1	for ( ; p -> nxt ; p = p -> nxt ) {	p p p	EMPTY
167	287	2	-1	0	-1	if ( memcmp ( & p -> addr , & addr , sizeof ( addr ) ) == 0 )	p addr addr addr	memcmp
167	288	2	-1	0	-1	return ( p -> name ) ;	p name	EMPTY
167	289	2	-1	0	-1	}	EMPTY	EMPTY
167	290	2	-1	0	-1	p -> addr = addr . addr	p addr addr addr	EMPTY
167	291	3	-1	0	-1	p -> nxt = newh6namemem ( )	p newh6namemem	EMPTY
167	296	1	0	0	-1	if ( ! ndo -> ndo _ nflag ) {	ndo _ nflag	EMPTY
167	297	2	-1	0	-1	hp = gethostbyaddr ( ( char * ) & addr , sizeof ( addr ) , af _ inet6 )	addr addr	gethostbyaddr
167	298	2	-1	0	-1	if ( hp ) {	EMPTY	EMPTY
167	299	3	-1	0	-1	char * dotp ;	EMPTY	EMPTY
167	301	1	1	0	-1	p -> name = strdup ( hp -> h _ name )	p name	strdup
167	302	2	-1	0	-1	if ( ndo -> ndo _ nflag ) {	ndo _ nflag	EMPTY
167	304	2	-1	1	-1	dotp = strchr ( p -> name , '.' )	p name	strchr
167	305	2	-1	0	-1	if ( dotp )	EMPTY	EMPTY
167	306	2	-1	0	-1	* dotp = '\0'	EMPTY	EMPTY
167	307	2	-1	0	-1	}	EMPTY	EMPTY
167	308	2	-1	0	-1	return ( p -> name ) ;	p name	EMPTY
167	309	2	-1	0	-1	}	EMPTY	EMPTY
167	310	2	-1	0	-1	}	EMPTY	EMPTY
167	311	2	-1	0	-1	cp = inet _ ntop ( af _ inet6  & addr  ntop _ buf  sizeof ( ntop _ buf ) ) ;	cp addr	inet _ ntop
167	312	2	-1	0	-1	p -> name = strdup ( cp ) ;	p name cp	strdup
167	313	2	-1	0	-1	return ( p -> name ) ;	p name	EMPTY
167	314	2	-1	0	-1	}	EMPTY	EMPTY
167	315	3	-1	1	-1	# endif	EMPTY	EMPTY
167	317	1	0	0	-1	static const char hex [ ] = strlit ;	EMPTY	EMPTY
167	322	1	1	1	-1	static inline struct enamemem *	EMPTY	EMPTY
167	323	2	-1	0	-1	lookup _ emem ( const u _ char * ep )	EMPTY	EMPTY
167	324	2	-1	0	-1	{	EMPTY	EMPTY
167	325	2	-1	0	-1	register u _ int i , j , k ;	EMPTY	EMPTY
167	326	3	-1	0	-1	struct enamemem * tp ;	EMPTY	EMPTY
167	328	1	0	0	-1	k = ( ep [ 0 ] << 8 ) | ep [ 1 ]	EMPTY	EMPTY
167	329	2	-1	0	-1	j = ( ep [ 2 ] << 8 ) | ep [ 3 ]	EMPTY	EMPTY
167	330	3	-1	0	-1	i = ( ep [ 4 ] << 8 ) | ep [ 5 ]	EMPTY	EMPTY
167	332	1	0	0	-1	tp = & enametable [ ( i ^ j ) & ( hashnamesize - 1 ) ]	EMPTY	EMPTY
167	333	2	-1	0	-1	while ( tp -> e _ nxt )	e _ nxt	EMPTY
167	334	2	-1	0	-1	if ( tp -> e _ addr0 == i &&	EMPTY	EMPTY
167	335	2	-1	0	-1	tp -> e _ addr1 == j &&	EMPTY	EMPTY
167	336	2	-1	0	-1	tp -> e _ addr2 == k )	EMPTY	EMPTY
167	337	2	-1	0	-1	return tp ;	EMPTY	EMPTY
167	338	2	-1	0	-1	else	EMPTY	EMPTY
167	339	2	-1	0	-1	tp = tp -> e _ nxt	e _ nxt	EMPTY
167	340	2	-1	0	-1	tp -> e _ addr0 = i	EMPTY	EMPTY
167	341	2	-1	0	-1	tp -> e _ addr1 = j	EMPTY	EMPTY
167	342	2	-1	0	-1	tp -> e _ addr2 = k	EMPTY	EMPTY
167	343	2	-1	0	-1	tp -> e _ nxt = ( struct enamemem * ) calloc ( 1 , sizeof ( * tp ) )	e _ nxt	calloc
167	344	2	-1	0	-1	if ( tp -> e _ nxt == null )	e _ nxt	EMPTY
167	345	3	-1	0	-1	error (  " lookup _ emem: calloc "  )	EMPTY	EMPTY
167	347	1	0	0	0	return tp	EMPTY	EMPTY
167	348	3	-1	0	-1	}	EMPTY	EMPTY
167	355	1	1	1	-1	static inline struct enamemem *	EMPTY	EMPTY
167	356	2	-1	0	-1	lookup _ bytestring ( register const u _ char * bs  const unsigned int nlen )	EMPTY	EMPTY
167	357	2	-1	0	-1	{	EMPTY	EMPTY
167	358	2	-1	0	-1	struct enamemem * tp ;	EMPTY	EMPTY
167	359	3	-1	0	-1	register u _ int i , j , k ;	EMPTY	EMPTY
167	361	1	0	0	0	if ( nlen >= 6 ) {	EMPTY	EMPTY
167	362	2	-1	0	-1	k = ( bs [ 0 ] << 8 ) | bs [ 1 ] ;	EMPTY	EMPTY
167	363	2	-1	0	-1	j = ( bs [ 2 ] << 8 ) | bs [ 3 ] ;	EMPTY	EMPTY
167	364	2	-1	0	-1	i = ( bs [ 4 ] << 8 ) | bs [ 5 ] ;	EMPTY	EMPTY
167	365	2	-1	0	-1	} else if ( nlen >= 4 ) {	EMPTY	EMPTY
167	366	2	-1	0	-1	k = ( bs [ 0 ] << 8 ) | bs [ 1 ] ;	EMPTY	EMPTY
167	367	2	-1	0	-1	j = ( bs [ 2 ] << 8 ) | bs [ 3 ] ;	EMPTY	EMPTY
167	368	2	-1	0	-1	i = 0 ;	EMPTY	EMPTY
167	369	2	-1	0	-1	} else	EMPTY	EMPTY
167	370	3	-1	0	-1	i = j = k = 0	EMPTY	EMPTY
167	372	1	0	0	-1	tp = & bytestringtable [ ( i ^ j ) & ( hashnamesize - 1 ) ]	EMPTY	EMPTY
167	373	2	-1	0	-1	while ( tp -> e _ nxt )	e _ nxt	EMPTY
167	374	2	-1	0	-1	if ( tp -> e _ addr0 == i &&	EMPTY	EMPTY
167	375	2	-1	0	-1	tp -> e _ addr1 == j &&	EMPTY	EMPTY
167	376	2	-1	0	-1	tp -> e _ addr2 == k &&	EMPTY	EMPTY
167	377	2	-1	0	-1	memcmp ( ( const char * ) bs , ( const char * ) ( tp -> e _ bs ) , nlen ) == 0 )	EMPTY	memcmp
167	378	2	-1	0	-1	return tp ;	EMPTY	EMPTY
167	379	2	-1	0	-1	else	EMPTY	EMPTY
167	380	3	-1	0	-1	tp = tp -> e _ nxt	e _ nxt	EMPTY
167	382	1	0	0	-1	tp -> e _ addr0 = i	EMPTY	EMPTY
167	383	2	-1	0	-1	tp -> e _ addr1 = j	EMPTY	EMPTY
167	384	3	-1	0	-1	tp -> e _ addr2 = k	EMPTY	EMPTY
167	386	1	0	0	-1	tp -> e _ bs = ( u _ char * ) calloc ( 1 , nlen + 1 )	EMPTY	calloc
167	387	2	-1	0	-1	if ( tp -> e _ bs == null )	EMPTY	EMPTY
167	388	3	-1	0	-1	error (  " lookup _ bytestring: calloc "  )	EMPTY	EMPTY
167	390	1	0	0	0	memcpy ( tp -> e _ bs , bs , nlen )	EMPTY	memcpy
167	391	2	-1	0	-1	tp -> e _ nxt = ( struct enamemem * ) calloc ( 1 , sizeof ( * tp ) )	e _ nxt	calloc
167	392	2	-1	0	-1	if ( tp -> e _ nxt == null )	e _ nxt	EMPTY
167	393	3	-1	0	-1	error (  " lookup _ bytestring: calloc "  )	EMPTY	EMPTY
167	395	1	0	0	0	return tp	EMPTY	EMPTY
167	396	3	-1	0	-1	}	EMPTY	EMPTY
167	400	1	1	1	-1	static inline struct enamemem *	EMPTY	EMPTY
167	401	2	-1	0	-1	lookup _ nsap ( register const u _ char * nsap )	EMPTY	EMPTY
167	402	2	-1	0	-1	{	EMPTY	EMPTY
167	403	2	-1	0	-1	register u _ int i , j , k ;	EMPTY	EMPTY
167	404	2	-1	0	-1	unsigned int nlen = * nsap ;	EMPTY	EMPTY
167	405	2	-1	0	-1	struct enamemem * tp ;	EMPTY	EMPTY
167	406	3	-1	0	-1	const u _ char * ensap = nsap + nlen - 6 ;	EMPTY	EMPTY
167	408	1	0	0	0	if ( nlen > 6 ) {	EMPTY	EMPTY
167	409	2	-1	0	-1	k = ( ensap [ 0 ] << 8 ) | ensap [ 1 ] ;	EMPTY	EMPTY
167	410	2	-1	0	-1	j = ( ensap [ 2 ] << 8 ) | ensap [ 3 ] ;	EMPTY	EMPTY
167	411	2	-1	0	-1	i = ( ensap [ 4 ] << 8 ) | ensap [ 5 ] ;	EMPTY	EMPTY
167	412	2	-1	0	-1	}	EMPTY	EMPTY
167	413	2	-1	0	-1	else	EMPTY	EMPTY
167	414	3	-1	0	-1	i = j = k = 0	EMPTY	EMPTY
167	416	1	0	0	-1	tp = & nsaptable [ ( i ^ j ) & ( hashnamesize - 1 ) ]	EMPTY	EMPTY
167	417	2	-1	0	-1	while ( tp -> e _ nxt )	e _ nxt	EMPTY
167	418	2	-1	0	-1	if ( tp -> e _ addr0 == i &&	EMPTY	EMPTY
167	419	2	-1	0	-1	tp -> e _ addr1 == j &&	EMPTY	EMPTY
167	420	2	-1	0	-1	tp -> e _ addr2 == k &&	EMPTY	EMPTY
167	421	2	-1	0	-1	tp -> e _ nsap [ 0 ] == nlen &&	e _ nsap	EMPTY
167	422	2	-1	0	-1	memcmp ( ( const char * ) & ( nsap [ 1 ] ) ,	EMPTY	memcmp
167	423	2	-1	0	-1	( char * ) & ( tp -> e _ nsap [ 1 ] ) , nlen ) == 0 )	e _ nsap	EMPTY
167	424	2	-1	0	-1	return tp ;	EMPTY	EMPTY
167	425	2	-1	0	-1	else	EMPTY	EMPTY
167	426	2	-1	0	-1	tp = tp -> e _ nxt	e _ nxt	EMPTY
167	427	2	-1	0	-1	tp -> e _ addr0 = i	EMPTY	EMPTY
167	428	2	-1	0	-1	tp -> e _ addr1 = j	EMPTY	EMPTY
167	429	2	-1	0	-1	tp -> e _ addr2 = k	EMPTY	EMPTY
167	430	2	-1	0	-1	tp -> e _ nsap = ( u _ char * ) malloc ( nlen + 1 )	e _ nsap	malloc
167	431	2	-1	0	-1	if ( tp -> e _ nsap == null )	e _ nsap	EMPTY
167	432	2	-1	0	-1	error (  " lookup _ nsap: malloc "  )	EMPTY	EMPTY
167	433	2	-1	0	-1	memcpy ( ( char * ) tp -> e _ nsap , ( const char * ) nsap , nlen + 1 )	e _ nsap	memcpy
167	434	2	-1	0	-1	tp -> e _ nxt = ( struct enamemem * ) calloc ( 1 , sizeof ( * tp ) )	e _ nxt	calloc
167	435	2	-1	0	-1	if ( tp -> e _ nxt == null )	e _ nxt	EMPTY
167	436	3	-1	0	-1	error (  " lookup _ nsap: calloc "  )	EMPTY	EMPTY
167	438	1	0	0	0	return tp	EMPTY	EMPTY
167	439	3	-1	0	-1	}	EMPTY	EMPTY
167	443	1	1	1	-1	static inline struct protoidmem *	EMPTY	EMPTY
167	444	2	-1	0	-1	lookup _ protoid ( const u _ char * pi )	EMPTY	EMPTY
167	445	2	-1	0	-1	{	EMPTY	EMPTY
167	446	2	-1	0	-1	register u _ int i , j ;	EMPTY	EMPTY
167	447	3	-1	0	-1	struct protoidmem * tp ;	EMPTY	EMPTY
167	450	1	1	1	-1	i = ( ( ( pi [ 0 ] << 8 ) + pi [ 1 ] ) << 8 ) + pi [ 2 ]	EMPTY	EMPTY
167	451	3	-1	0	-1	j = ( pi [ 3 ] << 8 ) + pi [ 4 ]	EMPTY	EMPTY
167	454	1	1	1	-1	tp = & protoidtable [ ( i ^ j ) & ( hashnamesize - 1 ) ]	EMPTY	EMPTY
167	455	2	-1	0	-1	while ( tp -> p _ nxt )	EMPTY	EMPTY
167	456	2	-1	0	-1	if ( tp -> p _ oui == i && tp -> p _ proto == j )	EMPTY	EMPTY
167	457	2	-1	0	-1	return tp ;	EMPTY	EMPTY
167	458	2	-1	0	-1	else	EMPTY	EMPTY
167	459	2	-1	0	-1	tp = tp -> p _ nxt	EMPTY	EMPTY
167	460	2	-1	0	-1	tp -> p _ oui = i	EMPTY	EMPTY
167	461	2	-1	0	-1	tp -> p _ proto = j	EMPTY	EMPTY
167	462	2	-1	0	-1	tp -> p _ nxt = ( struct protoidmem * ) calloc ( 1 , sizeof ( * tp ) )	EMPTY	calloc
167	463	2	-1	0	-1	if ( tp -> p _ nxt == null )	EMPTY	EMPTY
167	464	3	-1	0	-1	error (  " lookup _ protoid: calloc "  )	EMPTY	EMPTY
167	466	1	0	0	0	return tp	EMPTY	EMPTY
167	467	3	-1	0	-1	}	EMPTY	EMPTY
167	469	1	0	0	-1	const char *	EMPTY	EMPTY
167	470	2	-1	0	-1	etheraddr _ string ( netdissect _ options * ndo  register const u _ char * ep )	EMPTY	EMPTY
167	471	2	-1	0	-1	{	EMPTY	EMPTY
167	472	2	-1	0	-1	register int i ;	EMPTY	EMPTY
167	473	2	-1	0	-1	register char * cp ;	cp	EMPTY
167	474	2	-1	0	-1	register struct enamemem * tp ;	EMPTY	EMPTY
167	475	2	-1	0	-1	int oui ;	EMPTY	EMPTY
167	476	3	-1	0	-1	char buf [ bufsize ] ;	EMPTY	EMPTY
167	478	1	0	0	-1	tp = lookup _ emem ( ep ) ;	EMPTY	EMPTY
167	479	2	-1	0	-1	if ( tp -> e _ name )	EMPTY	EMPTY
167	480	2	-1	0	-1	return ( tp -> e _ name ) ;	EMPTY	EMPTY
167	481	2	-1	0	-1	# ifdef use _ ether _ ntohost	EMPTY	EMPTY
167	482	2	-1	0	-1	if ( ! ndo -> ndo _ nflag ) {	ndo _ nflag	EMPTY
167	483	3	-1	0	-1	char buf2 [ bufsize ] ;	EMPTY	EMPTY
167	491	1	1	1	-1	if ( ether _ ntohost ( buf2  ( struct ether _ addr * ) ep ) == numconst ) {	EMPTY	EMPTY
167	492	2	-1	0	-1	tp -> e _ name = strdup ( buf2 ) ;	EMPTY	strdup
167	493	2	-1	0	-1	return ( tp -> e _ name ) ;	EMPTY	EMPTY
167	494	2	-1	0	-1	}	EMPTY	EMPTY
167	495	2	-1	0	-1	}	EMPTY	EMPTY
167	496	2	-1	0	-1	# endif	EMPTY	EMPTY
167	497	2	-1	0	-1	cp = buf ;	cp	EMPTY
167	498	3	-1	0	-1	oui = extract _ 24bits ( ep ) ;	EMPTY	EMPTY
167	501	1	0	0	0	for ( i = numconst ; -- i >= numconst ; ) {	EMPTY	EMPTY
167	505	1	0	0	-1	}	EMPTY	EMPTY
167	507	1	0	0	0	if ( ! ndo -> ndo _ nflag ) {	ndo _ nflag	EMPTY
167	508	2	-1	0	-1	snprintf ( cp  bufsize - ( numconst + numconst * numconst )  strlit	cp	EMPTY
167	509	2	-1	0	-1	tok2str ( oui _ values  strlit  oui ) ) ;	tok2str	EMPTY
167	510	3	-1	0	-1	} else	EMPTY	EMPTY
167	512	1	0	0	-1	tp -> e _ name = strdup ( buf ) ;	EMPTY	strdup
167	513	2	-1	0	-1	return ( tp -> e _ name ) ;	EMPTY	EMPTY
167	514	3	-1	0	-1	}	EMPTY	EMPTY
167	516	1	0	0	-1	const char *	EMPTY	EMPTY
167	517	2	-1	0	-1	le64addr _ string ( const u _ char * ep )	EMPTY	EMPTY
167	518	2	-1	0	-1	{	EMPTY	EMPTY
167	519	2	-1	0	-1	const unsigned int len = numconst ;	len	EMPTY
167	520	2	-1	0	-1	register u _ int i ;	EMPTY	EMPTY
167	521	2	-1	0	-1	register char * cp ;	cp	EMPTY
167	522	2	-1	0	-1	register struct enamemem * tp ;	EMPTY	EMPTY
167	523	3	-1	0	-1	char buf [ bufsize ] ;	EMPTY	EMPTY
167	525	1	0	0	-1	tp = lookup _ bytestring ( ep  len ) ;	len	EMPTY
167	526	2	-1	0	-1	if ( tp -> e _ name )	EMPTY	EMPTY
167	527	3	-1	0	-1	return ( tp -> e _ name ) ;	EMPTY	EMPTY
167	529	1	0	0	-1	cp = buf ;	cp	EMPTY
167	530	3	-1	0	-1	for ( i = len ; i > numconst ; -- i ) {	len	EMPTY
167	534	1	0	0	-1	}	EMPTY	EMPTY
167	535	3	-1	0	-1	cp -- ;	cp	EMPTY
167	539	1	0	0	-1	tp -> e _ name = strdup ( buf ) ;	EMPTY	strdup
167	541	1	0	0	0	return ( tp -> e _ name ) ;	EMPTY	EMPTY
167	542	3	-1	0	-1	}	EMPTY	EMPTY
167	544	1	0	0	-1	const char *	EMPTY	EMPTY
167	545	2	-1	0	-1	linkaddr _ string ( netdissect _ options * ndo  const u _ char * ep  const unsigned int type  const unsigned int len )	len	EMPTY
167	546	2	-1	0	-1	{	EMPTY	EMPTY
167	547	2	-1	0	-1	register u _ int i ;	EMPTY	EMPTY
167	548	2	-1	0	-1	register char * cp ;	cp	EMPTY
167	549	3	-1	0	-1	register struct enamemem * tp ;	EMPTY	EMPTY
167	551	1	0	0	0	if ( len == numconst )	len	EMPTY
167	552	3	-1	0	-1	return ( strlit ) ;	EMPTY	EMPTY
167	554	1	0	0	0	if ( type == linkaddr _ ether && len == ether _ addr _ len )	len	EMPTY
167	555	3	-1	0	-1	return ( etheraddr _ string ( ndo  ep ) ) ;	EMPTY	EMPTY
167	557	1	0	0	0	if ( type == linkaddr _ frelay )	EMPTY	EMPTY
167	558	3	-1	0	-1	return ( q922 _ string ( ndo  ep  len ) ) ;	len	EMPTY
167	560	1	0	0	-1	tp = lookup _ bytestring ( ep  len ) ;	len	EMPTY
167	561	2	-1	0	-1	if ( tp -> e _ name )	EMPTY	EMPTY
167	562	3	-1	0	-1	return ( tp -> e _ name ) ;	EMPTY	EMPTY
167	564	1	0	0	-1	tp -> e _ name = cp = ( char * ) malloc ( len * numconst ) ;	cp len	malloc
167	565	2	-1	0	-1	if ( tp -> e _ name == null )	EMPTY	EMPTY
167	566	3	-1	0	-1	error ( strlit ) ;	EMPTY	EMPTY
167	569	1	0	0	0	for ( i = len - numconst ; i > numconst ; -- i ) {	len	EMPTY
167	573	1	0	0	-1	}	EMPTY	EMPTY
167	575	1	0	0	0	return ( tp -> e _ name ) ;	EMPTY	EMPTY
167	576	3	-1	0	-1	}	EMPTY	EMPTY
167	578	1	0	0	-1	const char *	EMPTY	EMPTY
167	579	2	-1	0	-1	etherproto _ string ( u _ short port )	EMPTY	EMPTY
167	580	2	-1	0	-1	{	EMPTY	EMPTY
167	581	2	-1	0	-1	register char * cp ;	cp	EMPTY
167	582	2	-1	0	-1	register struct hnamemem * tp ;	EMPTY	EMPTY
167	583	2	-1	0	-1	register uint32 _ t i = port ;	EMPTY	EMPTY
167	584	3	-1	0	-1	char buf [ sizeof ( strlit ) ] ;	EMPTY	EMPTY
167	586	1	0	0	0	for ( tp = & eprototable [ i & ( hashnamesize - numconst ) ] ; tp -> nxt ; tp = tp -> nxt )	EMPTY	EMPTY
167	587	2	-1	0	-1	if ( tp -> addr == i )	addr	EMPTY
167	588	3	-1	0	-1	return ( tp -> name ) ;	name	EMPTY
167	590	1	0	0	-1	tp -> addr = i ;	addr	EMPTY
167	591	3	-1	0	-1	tp -> nxt = newhnamemem ( ) ;	newhnamemem	EMPTY
167	593	1	0	0	-1	cp = buf ;	cp	EMPTY
167	594	3	-1	0	-1	ntohs ( port ) ;	EMPTY	EMPTY
167	600	1	0	0	-1	tp -> name = strdup ( buf ) ;	name	strdup
167	601	2	-1	0	-1	return ( tp -> name ) ;	name	EMPTY
167	602	3	-1	0	-1	}	EMPTY	EMPTY
167	604	1	0	0	-1	const char *	EMPTY	EMPTY
167	605	2	-1	0	-1	protoid _ string ( register const u _ char * pi )	EMPTY	EMPTY
167	606	2	-1	0	-1	{	EMPTY	EMPTY
167	607	2	-1	0	-1	register u _ int i  j ;	EMPTY	EMPTY
167	608	2	-1	0	-1	register char * cp ;	cp	EMPTY
167	609	2	-1	0	-1	register struct protoidmem * tp ;	EMPTY	EMPTY
167	610	3	-1	0	-1	char buf [ sizeof ( strlit ) ] ;	EMPTY	EMPTY
167	612	1	0	0	-1	tp = lookup _ protoid ( pi ) ;	EMPTY	EMPTY
167	613	2	-1	0	-1	if ( tp -> p _ name )	EMPTY	EMPTY
167	614	3	-1	0	-1	return tp -> p _ name ;	EMPTY	EMPTY
167	616	1	0	0	-1	cp = buf ;	cp	EMPTY
167	617	3	-1	0	-1	if ( ( j = * pi >> numconst ) != numconst )	EMPTY	EMPTY
167	620	1	0	0	0	for ( i = numconst ; ( int ) -- i >= numconst ; ) {	EMPTY	EMPTY
167	622	1	0	0	0	if ( ( j = * pi >> numconst ) != numconst )	EMPTY	EMPTY
167	625	1	0	0	-1	}	EMPTY	EMPTY
167	627	1	0	0	-1	tp -> p _ name = strdup ( buf ) ;	EMPTY	strdup
167	628	2	-1	0	-1	return ( tp -> p _ name ) ;	EMPTY	EMPTY
167	629	3	-1	0	-1	}	EMPTY	EMPTY
167	631	1	0	0	0	# define isonsap _ max _ length numconst	EMPTY	EMPTY
167	632	2	-1	0	-1	const char *	EMPTY	EMPTY
167	633	2	-1	0	-1	isonsap _ string ( const u _ char * nsap  register u _ int nsap _ length )	EMPTY	EMPTY
167	634	2	-1	0	-1	{	EMPTY	EMPTY
167	635	2	-1	0	-1	register u _ int nsap _ idx ;	EMPTY	EMPTY
167	636	2	-1	0	-1	register char * cp ;	cp	EMPTY
167	637	3	-1	0	-1	register struct enamemem * tp ;	EMPTY	EMPTY
167	639	1	0	0	0	if ( nsap _ length < numconst || nsap _ length > isonsap _ max _ length )	EMPTY	EMPTY
167	640	3	-1	0	-1	return ( strlit ) ;	EMPTY	EMPTY
167	642	1	0	0	-1	tp = lookup _ nsap ( nsap ) ;	EMPTY	EMPTY
167	643	2	-1	0	-1	if ( tp -> e _ name )	EMPTY	EMPTY
167	644	3	-1	0	-1	return tp -> e _ name ;	EMPTY	EMPTY
167	646	1	0	0	-1	tp -> e _ name = cp = ( char * ) malloc ( sizeof ( strlit ) ) ;	cp	malloc
167	647	2	-1	0	-1	if ( cp == null )	cp	EMPTY
167	648	3	-1	0	-1	error ( strlit ) ;	EMPTY	EMPTY
167	650	1	0	0	0	for ( nsap _ idx = numconst ; nsap _ idx < nsap _ length ; nsap _ idx ++ ) {	EMPTY	EMPTY
167	653	1	0	0	0	if ( ( ( nsap _ idx & numconst ) == numconst ) &&	EMPTY	EMPTY
167	654	3	-1	0	-1	( nsap _ idx + numconst < nsap _ length ) ) {	EMPTY	EMPTY
167	656	1	0	0	-1	}	EMPTY	EMPTY
167	657	3	-1	0	-1	}	EMPTY	EMPTY
167	659	1	0	0	0	return ( tp -> e _ name ) ;	EMPTY	EMPTY
167	660	3	-1	0	-1	}	EMPTY	EMPTY
167	662	1	0	0	-1	const char *	EMPTY	EMPTY
167	663	2	-1	0	-1	tcpport _ string ( u _ short port )	EMPTY	EMPTY
167	664	2	-1	0	-1	{	EMPTY	EMPTY
167	665	2	-1	0	-1	register struct hnamemem * tp ;	EMPTY	EMPTY
167	666	2	-1	0	-1	register uint32 _ t i = port ;	EMPTY	EMPTY
167	667	3	-1	0	-1	char buf [ sizeof ( strlit ) ] ;	EMPTY	EMPTY
167	669	1	0	0	0	for ( tp = & tporttable [ i & ( hashnamesize - numconst ) ] ; tp -> nxt ; tp = tp -> nxt )	EMPTY	EMPTY
167	670	2	-1	0	-1	if ( tp -> addr == i )	addr	EMPTY
167	671	3	-1	0	-1	return ( tp -> name ) ;	name	EMPTY
167	673	1	0	0	-1	tp -> addr = i ;	addr	EMPTY
167	674	3	-1	0	-1	tp -> nxt = newhnamemem ( ) ;	newhnamemem	EMPTY
167	676	1	0	0	-1	( void ) snprintf ( buf  sizeof ( buf )  strlit  i ) ;	EMPTY	EMPTY
167	677	2	-1	0	-1	tp -> name = strdup ( buf ) ;	name	strdup
167	678	2	-1	0	-1	return ( tp -> name ) ;	name	EMPTY
167	679	3	-1	0	-1	}	EMPTY	EMPTY
167	681	1	0	0	-1	const char *	EMPTY	EMPTY
167	682	2	-1	0	-1	udpport _ string ( register u _ short port )	EMPTY	EMPTY
167	683	2	-1	0	-1	{	EMPTY	EMPTY
167	684	2	-1	0	-1	register struct hnamemem * tp ;	EMPTY	EMPTY
167	685	2	-1	0	-1	register uint32 _ t i = port ;	EMPTY	EMPTY
167	686	3	-1	0	-1	char buf [ sizeof ( strlit ) ] ;	EMPTY	EMPTY
167	688	1	0	0	0	for ( tp = & uporttable [ i & ( hashnamesize - numconst ) ] ; tp -> nxt ; tp = tp -> nxt )	EMPTY	EMPTY
167	689	2	-1	0	-1	if ( tp -> addr == i )	addr	EMPTY
167	690	3	-1	0	-1	return ( tp -> name ) ;	name	EMPTY
167	692	1	0	0	-1	tp -> addr = i ;	addr	EMPTY
167	693	3	-1	0	-1	tp -> nxt = newhnamemem ( ) ;	newhnamemem	EMPTY
167	695	1	0	0	-1	( void ) snprintf ( buf  sizeof ( buf )  strlit  i ) ;	EMPTY	EMPTY
167	696	2	-1	0	-1	tp -> name = strdup ( buf ) ;	name	strdup
167	697	2	-1	0	-1	return ( tp -> name ) ;	name	EMPTY
167	698	3	-1	0	-1	}	EMPTY	EMPTY
167	700	1	0	0	-1	const char *	EMPTY	EMPTY
167	701	2	-1	0	-1	ipxsap _ string ( u _ short port )	EMPTY	EMPTY
167	702	2	-1	0	-1	{	EMPTY	EMPTY
167	703	2	-1	0	-1	register char * cp ;	cp	EMPTY
167	704	2	-1	0	-1	register struct hnamemem * tp ;	EMPTY	EMPTY
167	705	2	-1	0	-1	register uint32 _ t i = port ;	EMPTY	EMPTY
167	706	3	-1	0	-1	char buf [ sizeof ( strlit ) ] ;	EMPTY	EMPTY
167	708	1	0	0	0	for ( tp = & ipxsaptable [ i & ( hashnamesize - numconst ) ] ; tp -> nxt ; tp = tp -> nxt )	EMPTY	EMPTY
167	709	2	-1	0	-1	if ( tp -> addr == i )	addr	EMPTY
167	710	3	-1	0	-1	return ( tp -> name ) ;	name	EMPTY
167	712	1	0	0	-1	tp -> addr = i ;	addr	EMPTY
167	713	3	-1	0	-1	tp -> nxt = newhnamemem ( ) ;	newhnamemem	EMPTY
167	715	1	0	0	-1	cp = buf ;	cp	EMPTY
167	716	3	-1	0	-1	ntohs ( port ) ;	EMPTY	EMPTY
167	722	1	0	0	-1	tp -> name = strdup ( buf ) ;	name	strdup
167	723	2	-1	0	-1	return ( tp -> name ) ;	name	EMPTY
167	724	3	-1	0	-1	}	EMPTY	EMPTY
167	726	1	0	0	-1	static void	EMPTY	EMPTY
167	727	2	-1	0	-1	init _ servarray ( netdissect _ options * ndo )	EMPTY	EMPTY
167	728	2	-1	0	-1	{	EMPTY	EMPTY
167	729	2	-1	0	-1	struct servent * sv ;	EMPTY	EMPTY
167	730	2	-1	0	-1	register struct hnamemem * table ;	EMPTY	EMPTY
167	731	2	-1	0	-1	register int i ;	EMPTY	EMPTY
167	732	3	-1	0	-1	char buf [ sizeof ( strlit ) ] ;	EMPTY	EMPTY
167	734	1	0	0	0	while ( ( sv = getservent ( ) ) != null ) {	EMPTY	getservent
167	735	2	-1	0	-1	int port = ntohs ( sv -> s _ port ) ;	EMPTY	EMPTY
167	736	2	-1	0	-1	i = port & ( hashnamesize - numconst ) ;	EMPTY	EMPTY
167	737	2	-1	0	-1	if ( strcmp ( sv -> s _ proto  strlit ) == numconst )	EMPTY	strcmp
167	738	2	-1	0	-1	table = & tporttable [ i ] ;	EMPTY	EMPTY
167	739	2	-1	0	-1	if ( strcmp ( sv -> s _ proto  strlit ) == numconst )	EMPTY	strcmp
167	740	2	-1	0	-1	table = & uporttable [ i ] ;	EMPTY	EMPTY
167	741	2	-1	0	-1	else	EMPTY	EMPTY
167	742	3	-1	0	-1	continue ;	EMPTY	EMPTY
167	744	1	0	0	0	while ( table -> name )	name	EMPTY
167	745	2	-1	0	-1	table = table -> nxt ;	EMPTY	EMPTY
167	746	2	-1	0	-1	if ( ndo -> ndo _ nflag ) {	ndo _ nflag	EMPTY
167	747	2	-1	0	-1	( void ) snprintf ( buf  sizeof ( buf )  strlit  port ) ;	EMPTY	EMPTY
167	748	2	-1	0	-1	table -> name = strdup ( buf ) ;	name	strdup
167	749	2	-1	0	-1	} else	EMPTY	EMPTY
167	750	2	-1	0	-1	table -> name = strdup ( sv -> s _ name ) ;	name	strdup
167	751	2	-1	0	-1	table -> addr = port ;	addr	EMPTY
167	752	2	-1	0	-1	table -> nxt = newhnamemem ( ) ;	newhnamemem	EMPTY
167	753	2	-1	0	-1	}	EMPTY	EMPTY
167	754	2	-1	0	-1	endservent ( ) ;	EMPTY	endservent
167	755	3	-1	0	-1	}	EMPTY	EMPTY
167	758	1	1	1	-1	# if defined ( win32 ) && ! defined ( use _ static _ libpcap )	EMPTY	EMPTY
167	759	2	-1	0	-1	extern  _  _ declspec ( dllimport )	EMPTY	EMPTY
167	760	2	-1	0	-1	# else	EMPTY	EMPTY
167	761	2	-1	0	-1	extern	EMPTY	EMPTY
167	762	2	-1	0	-1	# endif	EMPTY	EMPTY
167	763	2	-1	0	-1	struct eproto {	EMPTY	EMPTY
167	764	2	-1	0	-1	const char * s ;	s	EMPTY
167	765	2	-1	0	-1	u _ short p ;	p	EMPTY
167	766	3	-1	0	-1	} eproto _ db [ ] ;	EMPTY	EMPTY
167	768	1	0	0	-1	static void	EMPTY	EMPTY
167	769	2	-1	0	-1	init _ eprotoarray ( void )	EMPTY	EMPTY
167	770	2	-1	0	-1	{	EMPTY	EMPTY
167	771	2	-1	0	-1	register int i ;	EMPTY	EMPTY
167	772	3	-1	0	-1	register struct hnamemem * table ;	EMPTY	EMPTY
167	774	1	0	0	0	for ( i = 0 ; eproto _ db [ i ] . s ; i ++ ) {	s	EMPTY
167	775	2	-1	0	-1	int j = htons ( eproto _ db [ i ] . p ) & ( hashnamesize - 1 ) ;	p	EMPTY
167	776	2	-1	0	-1	table = & eprototable [ j ] ;	EMPTY	EMPTY
167	777	2	-1	0	-1	while ( table -> name )	name	EMPTY
167	778	2	-1	0	-1	table = table -> nxt ;	EMPTY	EMPTY
167	779	2	-1	0	-1	table -> name = eproto _ db [ i ] . s ;	name s	EMPTY
167	780	2	-1	0	-1	table -> addr = htons ( eproto _ db [ i ] . p ) ;	addr p	EMPTY
167	781	2	-1	0	-1	table -> nxt = newhnamemem ( ) ;	newhnamemem	EMPTY
167	782	2	-1	0	-1	}	EMPTY	EMPTY
167	783	3	-1	0	-1	}	EMPTY	EMPTY
167	785	1	0	0	0	struct protoidlist {	EMPTY	EMPTY
167	786	2	-1	0	-1	const u _ char protoid [ numconst ] ;	EMPTY	EMPTY
167	787	2	-1	0	-1	const char * name ;	name	EMPTY
167	788	2	-1	0	-1	} protoidlist [ ] = {	EMPTY	EMPTY
167	789	2	-1	0	-1	{ { numconst  numconst  numconst  numconst  numconst }  strlit }	EMPTY	EMPTY
167	790	2	-1	0	-1	{ { numconst  numconst  numconst  numconst  numconst }  strlit }	EMPTY	EMPTY
167	791	2	-1	0	-1	{ { numconst  numconst  numconst  numconst  numconst }  strlit }	EMPTY	EMPTY
167	792	2	-1	0	-1	{ { numconst  numconst  numconst  numconst  numconst }  strlit }	EMPTY	EMPTY
167	793	2	-1	0	-1	{ { numconst  numconst  numconst  numconst  numconst }  strlit }	EMPTY	EMPTY
167	794	2	-1	0	-1	{ { numconst  numconst  numconst  numconst  numconst }  null }	EMPTY	EMPTY
167	795	3	-1	0	-1	} ;	EMPTY	EMPTY
167	801	1	0	0	-1	static void	EMPTY	EMPTY
167	802	2	-1	0	-1	init _ protoidarray ( void )	init _ protoidarray	EMPTY
167	803	2	-1	0	-1	{	EMPTY	EMPTY
167	804	2	-1	0	-1	register int i ;	EMPTY	EMPTY
167	805	2	-1	0	-1	register struct protoidmem * tp ;	EMPTY	EMPTY
167	806	2	-1	0	-1	const struct protoidlist * pl ;	EMPTY	EMPTY
167	807	3	-1	0	-1	u _ char protoid [ 5 ] ;	EMPTY	EMPTY
167	809	1	0	0	-1	protoid [ 0 ] = 0	EMPTY	EMPTY
167	810	2	-1	0	-1	protoid [ 1 ] = 0	EMPTY	EMPTY
167	811	2	-1	0	-1	protoid [ 2 ] = 0	EMPTY	EMPTY
167	812	2	-1	0	-1	for ( i = 0 ; eproto _ db [ i ] . s ; i ++ ) {	s	EMPTY
167	813	3	-1	0	-1	u _ short etype = htons ( eproto _ db [ i ] . p ) ;	p	EMPTY
167	815	1	0	0	0	memcpy ( ( char * ) & protoid [ 3 ] , ( char * ) & etype , 2 ) ;	EMPTY	memcpy
167	816	2	-1	0	-1	tp = lookup _ protoid ( protoid ) ;	EMPTY	EMPTY
167	817	2	-1	0	-1	tp -> p _ name = strdup ( eproto _ db [ i ] . s ) ;	s	strdup
167	818	3	-1	0	-1	}	EMPTY	EMPTY
167	820	1	1	0	-1	for ( pl = protoidlist ; pl -> name != null ; ++ pl ) {	name	EMPTY
167	821	2	-1	0	-1	tp = lookup _ protoid ( pl -> protoid )	EMPTY	EMPTY
167	823	2	-1	1	-1	if ( tp -> p _ name != null )	EMPTY	EMPTY
167	824	3	-1	0	-1	continue	EMPTY	EMPTY
167	826	1	0	0	-1	tp -> p _ name = pl -> name	name	EMPTY
167	827	2	-1	0	-1	}	EMPTY	EMPTY
167	828	3	-1	0	-1	}	EMPTY	EMPTY
167	830	1	0	0	0	struct etherlist {	EMPTY	EMPTY
167	831	2	-1	0	-1	const u _ char addr [ numconst ] ;	addr	EMPTY
167	832	2	-1	0	-1	const char * name ;	name	EMPTY
167	833	2	-1	0	-1	} etherlist [ ] = {	EMPTY	EMPTY
167	834	2	-1	0	-1	{ { numconst  numconst  numconst  numconst  numconst  numconst }  strlit }	EMPTY	EMPTY
167	835	2	-1	0	-1	{ { numconst  numconst  numconst  numconst  numconst  numconst }  null }	EMPTY	EMPTY
167	836	3	-1	0	-1	} ;	EMPTY	EMPTY
167	852	1	0	0	-1	static void	EMPTY	EMPTY
167	853	2	-1	0	-1	init _ etherarray ( void )	init _ etherarray	EMPTY
167	854	2	-1	0	-1	{	EMPTY	EMPTY
167	855	2	-1	0	-1	register const struct etherlist * el ;	EMPTY	EMPTY
167	856	2	-1	0	-1	register struct enamemem * tp ;	EMPTY	EMPTY
167	857	2	-1	0	-1	# ifdef use _ ether _ ntohost	EMPTY	EMPTY
167	858	2	-1	0	-1	char name [ numconst ] ;	name	EMPTY
167	859	2	-1	0	-1	# else	EMPTY	EMPTY
167	860	2	-1	0	-1	register struct pcap _ etherent * ep ;	pcap _ etherent	EMPTY
167	861	3	-1	0	-1	register file * fp ;	EMPTY	EMPTY
167	864	1	1	1	-1	fp = fopen ( pcap _ ethers _ file ,  " r "  )	EMPTY	fopen
167	865	2	-1	0	-1	if ( fp != null ) {	EMPTY	EMPTY
167	866	2	-1	0	-1	while ( ( ep = pcap _ next _ etherent ( fp ) ) != null ) {	EMPTY	EMPTY
167	867	2	-1	0	-1	tp = lookup _ emem ( ep -> addr ) ;	addr	EMPTY
167	868	2	-1	0	-1	tp -> e _ name = strdup ( ep -> name ) ;	name	strdup
167	869	2	-1	0	-1	}	EMPTY	EMPTY
167	870	2	-1	0	-1	( void ) fclose ( fp ) ;	EMPTY	fclose
167	871	2	-1	0	-1	}	EMPTY	EMPTY
167	872	3	-1	0	-1	# endif	EMPTY	EMPTY
167	875	1	1	0	-1	for ( el = etherlist ; el -> name != null ; ++ el ) {	name	EMPTY
167	876	2	-1	0	-1	tp = lookup _ emem ( el -> addr )	addr	EMPTY
167	878	2	-1	1	-1	if ( tp -> e _ name != null )	EMPTY	EMPTY
167	879	3	-1	0	-1	continue	EMPTY	EMPTY
167	881	1	1	0	-1	# ifdef use _ ether _ ntohost	EMPTY	EMPTY
167	890	2	-1	1	-1	if ( ether _ ntohost ( name  ( struct ether _ addr * ) el -> addr ) == numconst ) {	name addr	EMPTY
167	891	2	-1	0	-1	tp -> e _ name = strdup ( name ) ;	name	strdup
167	892	2	-1	0	-1	continue ;	EMPTY	EMPTY
167	893	2	-1	0	-1	}	EMPTY	EMPTY
167	894	2	-1	0	-1	# endif	EMPTY	EMPTY
167	895	2	-1	0	-1	tp -> e _ name = el -> name	name	EMPTY
167	896	2	-1	0	-1	}	EMPTY	EMPTY
167	897	3	-1	0	-1	}	EMPTY	EMPTY
167	899	1	0	0	-1	static const struct tok ipxsap _ db [ ] = {	EMPTY	EMPTY
167	900	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	901	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	902	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	903	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	904	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	905	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	906	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	907	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	908	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	909	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	910	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	911	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	912	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	913	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	914	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	915	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	916	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	917	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	918	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	919	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	920	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	921	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	922	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	923	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	924	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	925	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	926	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	927	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	928	3	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	929	1	0	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	930	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	931	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	932	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	933	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	934	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	935	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	936	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	937	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	938	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	939	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	940	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	941	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	942	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	943	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	944	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	945	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	946	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	947	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	948	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	949	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	950	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	951	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	952	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	953	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	954	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	955	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	956	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	957	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	958	3	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	959	1	0	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	960	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	961	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	962	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	963	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	964	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	965	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	966	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	967	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	968	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	969	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	970	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	971	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	972	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	973	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	974	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	975	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	976	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	977	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	978	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	979	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	980	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	981	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	982	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	983	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	984	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	985	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	986	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	987	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	988	3	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	989	1	0	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	990	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	991	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	992	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	993	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	994	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	995	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	996	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	997	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	998	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	999	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1000	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1001	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1002	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1003	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1004	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1005	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1006	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1007	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1008	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1009	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1010	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1011	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1012	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1013	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1014	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1015	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1016	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1017	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1018	3	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1019	1	0	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1020	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1021	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1022	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1023	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1024	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1025	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1026	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1027	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1028	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1029	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1030	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1031	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1032	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1033	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1034	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1035	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1036	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1037	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1038	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1039	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1040	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1041	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1042	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1043	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1044	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1045	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1046	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1047	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1048	3	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1049	1	0	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1050	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1051	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1052	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1053	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1054	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1055	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1056	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1057	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1058	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1059	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1060	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1061	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1062	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1063	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1064	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1065	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1066	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1067	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1068	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1069	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1070	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1071	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1072	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1073	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1074	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1075	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1076	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1077	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1078	3	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1079	1	0	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1080	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1081	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1082	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1083	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1084	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1085	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1086	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1087	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1088	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1089	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1090	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1091	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1092	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1093	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1094	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1095	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1096	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1097	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1098	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1099	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1100	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1101	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1102	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1103	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1104	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1105	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1106	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1107	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1108	3	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1109	1	0	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1110	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1111	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1112	2	-1	0	-1	{ numconst  strlit }	EMPTY	EMPTY
167	1113	2	-1	0	-1	{ numconst  ( char * ) numconst }	EMPTY	EMPTY
167	1114	3	-1	0	-1	} ;	EMPTY	EMPTY
167	1116	1	0	0	-1	static void	EMPTY	EMPTY
167	1117	2	-1	0	-1	init _ ipxsaparray ( void )	EMPTY	EMPTY
167	1118	2	-1	0	-1	{	EMPTY	EMPTY
167	1119	2	-1	0	-1	register int i ;	EMPTY	EMPTY
167	1120	3	-1	0	-1	register struct hnamemem * table ;	EMPTY	EMPTY
167	1122	1	0	0	0	for ( i = numconst ; ipxsap _ db [ i ] . s != null ; i ++ ) {	s	EMPTY
167	1123	2	-1	0	-1	int j = htons ( ipxsap _ db [ i ] . v ) & ( hashnamesize - numconst ) ;	v	EMPTY
167	1124	2	-1	0	-1	table = & ipxsaptable [ j ] ;	EMPTY	EMPTY
167	1125	2	-1	0	-1	while ( table -> name )	name	EMPTY
167	1126	2	-1	0	-1	table = table -> nxt ;	EMPTY	EMPTY
167	1127	2	-1	0	-1	table -> name = ipxsap _ db [ i ] . s ;	name s	EMPTY
167	1128	2	-1	0	-1	table -> addr = htons ( ipxsap _ db [ i ] . v ) ;	addr v	EMPTY
167	1129	2	-1	0	-1	table -> nxt = newhnamemem ( ) ;	newhnamemem	EMPTY
167	1130	2	-1	0	-1	}	EMPTY	EMPTY
167	1131	3	-1	0	-1	}	EMPTY	EMPTY
167	1139	1	1	0	-1	void	EMPTY	EMPTY
167	1140	2	-1	0	-1	init _ addrtoname ( netdissect _ options * ndo  uint32 _ t localnet  uint32 _ t mask )	init _ addrtoname	EMPTY
167	1141	2	-1	0	-1	{	EMPTY	EMPTY
167	1142	2	-1	0	-1	if ( ndo -> ndo _ fflag ) {	ndo _ fflag	EMPTY
167	1143	2	-1	0	-1	f _ localnet = localnet ;	EMPTY	EMPTY
167	1144	2	-1	0	-1	f _ netmask = mask ;	EMPTY	EMPTY
167	1145	2	-1	0	-1	}	EMPTY	EMPTY
167	1146	2	-1	0	-1	if ( ndo -> ndo _ nflag )	ndo _ nflag	EMPTY
167	1150	3	-1	1	-1	return ;	EMPTY	EMPTY
167	1152	1	0	0	0	init _ etherarray ( )	init _ etherarray	EMPTY
167	1153	2	-1	0	-1	init _ servarray ( ndo )	EMPTY	EMPTY
167	1154	2	-1	0	-1	init _ eprotoarray ( )	EMPTY	EMPTY
167	1155	2	-1	0	-1	init _ protoidarray ( )	init _ protoidarray	EMPTY
167	1156	2	-1	0	-1	init _ ipxsaparray ( )	EMPTY	EMPTY
167	1157	3	-1	0	-1	}	EMPTY	EMPTY
167	1159	1	0	0	-1	const char *	EMPTY	EMPTY
167	1160	2	-1	0	-1	dnaddr _ string ( netdissect _ options * ndo  u _ short dnaddr )	EMPTY	EMPTY
167	1161	2	-1	0	-1	{	EMPTY	EMPTY
167	1162	3	-1	0	-1	register struct hnamemem * tp ;	EMPTY	EMPTY
167	1164	1	0	0	0	for ( tp = & dnaddrtable [ dnaddr & ( hashnamesize - numconst ) ] ; tp -> nxt != numconst ;	EMPTY	EMPTY
167	1165	2	-1	0	-1	tp = tp -> nxt )	EMPTY	EMPTY
167	1166	2	-1	0	-1	if ( tp -> addr == dnaddr )	addr	EMPTY
167	1167	3	-1	0	-1	return ( tp -> name ) ;	name	EMPTY
167	1169	1	0	0	-1	tp -> addr = dnaddr ;	addr	EMPTY
167	1170	2	-1	0	-1	tp -> nxt = newhnamemem ( ) ;	newhnamemem	EMPTY
167	1171	2	-1	0	-1	if ( ndo -> ndo _ nflag )	ndo _ nflag	EMPTY
167	1172	2	-1	0	-1	tp -> name = dnnum _ string ( dnaddr ) ;	name	EMPTY
167	1173	2	-1	0	-1	else	EMPTY	EMPTY
167	1174	3	-1	0	-1	tp -> name = dnname _ string ( dnaddr ) ;	name	EMPTY
167	1176	1	0	0	0	return ( tp -> name ) ;	name	EMPTY
167	1177	3	-1	0	-1	}	EMPTY	EMPTY
167	1180	1	0	0	-1	struct hnamemem *	EMPTY	EMPTY
167	1181	2	-1	0	-1	newhnamemem ( void )	newhnamemem	EMPTY
167	1182	2	-1	0	-1	{	EMPTY	EMPTY
167	1183	2	-1	0	-1	register struct hnamemem * p ;	p	EMPTY
167	1184	2	-1	0	-1	static struct hnamemem * ptr = null ;	EMPTY	EMPTY
167	1185	3	-1	0	-1	static u _ int num = 0 ;	EMPTY	EMPTY
167	1187	1	0	0	0	if ( num <= 0 ) {	EMPTY	EMPTY
167	1188	2	-1	0	-1	num = 64 ;	EMPTY	EMPTY
167	1189	2	-1	0	-1	ptr = ( struct hnamemem * ) calloc ( num , sizeof ( * ptr ) ) ;	EMPTY	calloc
167	1190	2	-1	0	-1	if ( ptr == null )	EMPTY	EMPTY
167	1191	2	-1	0	-1	error (  " newhnamemem: calloc "  ) ;	EMPTY	EMPTY
167	1192	2	-1	0	-1	}	EMPTY	EMPTY
167	1193	2	-1	0	-1	-- num	EMPTY	EMPTY
167	1194	2	-1	0	-1	p = ptr ++	p	EMPTY
167	1195	2	-1	0	-1	return ( p )	p	EMPTY
167	1196	3	-1	0	-1	}	EMPTY	EMPTY
167	1198	1	0	0	-1	# ifdef inet6	EMPTY	EMPTY
167	1200	1	0	0	-1	struct h6namemem *	EMPTY	EMPTY
167	1201	2	-1	0	-1	newh6namemem ( void )	newh6namemem	EMPTY
167	1202	2	-1	0	-1	{	EMPTY	EMPTY
167	1203	2	-1	0	-1	register struct h6namemem * p ;	p	EMPTY
167	1204	2	-1	0	-1	static struct h6namemem * ptr = null ;	EMPTY	EMPTY
167	1205	3	-1	0	-1	static u _ int num = 0 ;	EMPTY	EMPTY
167	1207	1	1	0	1	if ( num <= 0 ) {	EMPTY	EMPTY
167	1208	2	-1	0	-1	num = 64 ;	EMPTY	EMPTY
167	1209	2	-1	0	-1	ptr = ( struct h6namemem * ) calloc ( num , sizeof ( * ptr ) ) ;	EMPTY	calloc
167	1210	2	-1	0	-1	if ( ptr == null )	EMPTY	EMPTY
167	1211	2	-1	0	-1	error (  " newh6namemem: calloc "  ) ;	EMPTY	EMPTY
167	1212	2	-1	0	-1	}	EMPTY	EMPTY
167	1213	2	-1	0	-1	-- num	EMPTY	EMPTY
167	1214	2	-1	0	-1	p = ptr ++	p	EMPTY
167	1215	2	-1	0	-1	return ( p )	p	EMPTY
167	1216	2	-1	0	-1	}	EMPTY	EMPTY
167	1217	3	-1	1	-1	# endif	EMPTY	EMPTY
167	1220	1	0	0	-1	const char *	EMPTY	EMPTY
167	1221	2	-1	0	-1	ieee8021q _ tci _ string ( const uint16 _ t tci )	ieee8021q _ tci _ string	EMPTY
167	1222	2	-1	0	-1	{	EMPTY	EMPTY
167	1223	2	-1	0	-1	static char buf [ 128 ] ;	EMPTY	EMPTY
167	1224	2	-1	0	-1	snprintf ( buf  sizeof ( buf )  strlit	EMPTY	EMPTY
167	1225	2	-1	0	-1	tci & numconst	EMPTY	EMPTY
167	1226	2	-1	0	-1	tci >> numconst	EMPTY	EMPTY
167	1227	2	-1	0	-1	( tci & numconst ) ? strlit : strlit ) ;	EMPTY	EMPTY
167	1228	2	-1	0	-1	return buf	EMPTY	EMPTY
167	1229	3	-1	0	-1	}	EMPTY	EMPTY
172	68	1	1	1	1	int dflag ;	dflag	EMPTY
172	69	2	-1	1	-1	unsigned int iflag ;	iflag	EMPTY
172	70	2	-1	0	-1	# ifdef android	EMPTY	EMPTY
172	71	2	-1	0	-1	int jflag = numconst ;	EMPTY	EMPTY
172	72	2	-1	0	-1	# else	EMPTY	EMPTY
172	73	2	-1	1	-1	int jflag ;	EMPTY	EMPTY
172	74	2	-1	0	-1	# endif	EMPTY	EMPTY
172	75	2	-1	1	-1	int kflag ;	kflag	EMPTY
172	76	2	-1	1	-1	int lflag ;	lflag	EMPTY
172	77	2	-1	1	-1	int nflag ;	nflag	EMPTY
172	78	2	-1	1	-1	char * pflag ;	pflag	EMPTY
172	79	2	-1	1	-1	char * pflag ;	pflag	EMPTY
172	80	2	-1	1	-1	int rflag ;	rflag	EMPTY
172	81	2	-1	1	-1	char * sflag ;	sflag	EMPTY
172	82	2	-1	1	-1	int tflag ;	tflag	EMPTY
172	83	2	-1	1	-1	int uflag ;	uflag	EMPTY
172	84	2	-1	1	-1	int vflag ;	vflag	EMPTY
172	85	2	-1	0	-1	# ifndef android	EMPTY	EMPTY
172	86	2	-1	1	-1	int xflag ;	EMPTY	EMPTY
172	87	2	-1	0	-1	# endif	EMPTY	EMPTY
172	88	2	-1	1	-1	int zflag ;	zflag	EMPTY
172	89	2	-1	1	-1	int dflag ;	dflag	EMPTY
172	90	2	-1	1	-1	int iflag ;	iflag	EMPTY
172	91	2	-1	1	-1	int oflag ;	oflag	EMPTY
172	92	2	-1	0	-1	# ifndef android	EMPTY	EMPTY
172	93	2	-1	1	-1	int sflag ;	EMPTY	EMPTY
172	94	2	-1	1	-1	int tflag = - numconst ;	EMPTY	EMPTY
172	95	2	-1	0	-1	u _ int rtableid ;	EMPTY	EMPTY
172	96	3	-1	1	-1	# endif	EMPTY	EMPTY
172	98	1	0	0	0	int timeout = - numconst	EMPTY	EMPTY
172	99	2	-1	0	-1	int family = af _ unspec	EMPTY	EMPTY
172	100	2	-1	0	-1	char * portlist [ port _ max + numconst ]	EMPTY	EMPTY
172	101	3	-1	0	-1	char * unix _ dg _ tmp _ socket ;	EMPTY	EMPTY
172	103	1	0	0	0	void atelnet ( int  unsigned char *  unsigned int )	atelnet	EMPTY
172	104	2	-1	0	-1	void build _ ports ( char * )	build _ ports	EMPTY
172	105	2	-1	0	-1	void help ( void )	EMPTY	EMPTY
172	106	2	-1	0	-1	int local _ listen ( char *  char *  struct addrinfo )	local _ listen	EMPTY
172	107	2	-1	0	-1	void readwrite ( int )	readwrite	EMPTY
172	108	2	-1	0	-1	int remote _ connect ( const char *  const char *  struct addrinfo )	remote _ connect	EMPTY
172	109	2	-1	0	-1	int timeout _ connect ( int  const struct sockaddr *  socklen _ t ) ;	EMPTY	EMPTY
172	110	2	-1	0	-1	# ifndef android	EMPTY	EMPTY
172	111	2	-1	0	-1	int socks _ connect ( const char *  const char *  struct addrinfo	EMPTY	EMPTY
172	112	2	-1	0	-1	const char *  const char *  struct addrinfo  int  const char * ) ;	EMPTY	EMPTY
172	113	2	-1	0	-1	# endif	EMPTY	EMPTY
172	114	2	-1	0	-1	int udptest ( int )	udptest	EMPTY
172	115	2	-1	0	-1	int unix _ bind ( char * )	unix _ bind	EMPTY
172	116	2	-1	0	-1	int unix _ connect ( char * )	unix _ connect	EMPTY
172	117	2	-1	0	-1	int unix _ listen ( char * )	unix _ listen	EMPTY
172	118	2	-1	0	-1	void set _ common _ sockopts ( int )	EMPTY	EMPTY
172	119	2	-1	0	-1	int map _ tos ( char *  int * )	EMPTY	EMPTY
172	120	3	-1	0	-1	void usage ( int ) ;	EMPTY	EMPTY
172	122	1	0	0	-1	int	EMPTY	EMPTY
172	123	2	-1	0	-1	main ( int argc  char * argv [ ] )	EMPTY	EMPTY
172	124	2	-1	0	-1	{	EMPTY	EMPTY
172	125	2	-1	0	-1	int ch , s , ret , socksv ;	EMPTY	EMPTY
172	126	2	-1	0	-1	char * host , * uport ;	EMPTY	EMPTY
172	127	2	-1	0	-1	struct addrinfo hints ;	EMPTY	EMPTY
172	128	2	-1	0	-1	struct servent * sv ;	EMPTY	EMPTY
172	129	2	-1	0	-1	socklen _ t len ;	EMPTY	EMPTY
172	130	2	-1	0	-1	struct sockaddr _ storage cliaddr ;	EMPTY	EMPTY
172	131	2	-1	0	-1	char * proxy ;	EMPTY	EMPTY
172	132	2	-1	0	-1	const char * errstr , * proxyhost =  "  "  , * proxyport = null ;	EMPTY	EMPTY
172	133	2	-1	0	-1	struct addrinfo proxyhints ;	EMPTY	EMPTY
172	134	3	-1	0	-1	char unix _ dg _ tmp _ socket _ buf [ unix _ dg _ tmp _ socket _ size ] ;	EMPTY	EMPTY
172	136	1	0	0	-1	ret = 1	EMPTY	EMPTY
172	137	2	-1	0	-1	s = 0	EMPTY	EMPTY
172	138	2	-1	0	-1	socksv = 5	EMPTY	EMPTY
172	139	2	-1	0	-1	host = null ;	EMPTY	EMPTY
172	140	2	-1	0	-1	uport = null ;	EMPTY	EMPTY
172	141	3	-1	0	-1	sv = null ;	EMPTY	EMPTY
172	143	1	1	0	1	while ( ( ch = getopt ( argc  argv	EMPTY	getopt
172	144	2	-1	0	-1	strlit ) ) != - numconst ) {	EMPTY	EMPTY
172	145	2	-1	0	-1	switch ( ch ) {	EMPTY	EMPTY
172	146	2	-1	0	-1	case '4' :	EMPTY	EMPTY
172	147	2	-1	0	-1	family = af _ inet ;	EMPTY	EMPTY
172	148	2	-1	0	-1	break	EMPTY	EMPTY
172	149	2	-1	0	-1	case '6' :	EMPTY	EMPTY
172	150	2	-1	0	-1	family = af _ inet6 ;	EMPTY	EMPTY
172	151	2	-1	0	-1	break	EMPTY	EMPTY
172	152	2	-1	0	-1	case 'u' :	EMPTY	EMPTY
172	153	2	-1	0	-1	family = af _ unix ;	EMPTY	EMPTY
172	154	2	-1	0	-1	break	EMPTY	EMPTY
172	155	2	-1	0	-1	case 'x' :	EMPTY	EMPTY
172	156	2	-1	0	-1	if ( strcasecmp ( optarg  strlit ) == numconst )	EMPTY	strcasecmp optarg
172	157	2	-1	0	-1	socksv = - numconst ;	EMPTY	EMPTY
172	158	2	-1	0	-1	else if ( strcmp ( optarg  strlit ) == numconst )	EMPTY	strcmp optarg
172	159	2	-1	0	-1	socksv = numconst ;	EMPTY	EMPTY
172	160	2	-1	0	-1	else if ( strcmp ( optarg  strlit ) == numconst )	EMPTY	strcmp optarg
172	161	2	-1	1	-1	socksv = numconst ;	EMPTY	EMPTY
172	162	2	-1	0	-1	else	EMPTY	EMPTY
172	163	2	-1	0	-1	errx ( numconst  strlit ) ;	EMPTY	errx
172	164	2	-1	0	-1	break	EMPTY	EMPTY
172	165	2	-1	0	-1	case 'd' :	EMPTY	EMPTY
172	166	2	-1	0	-1	dflag = 1	dflag	EMPTY
172	167	2	-1	0	-1	break	EMPTY	EMPTY
172	168	2	-1	0	-1	case 'h' :	EMPTY	EMPTY
172	169	2	-1	0	-1	help ( )	EMPTY	EMPTY
172	170	2	-1	0	-1	break	EMPTY	EMPTY
172	171	2	-1	0	-1	case 'i' :	EMPTY	EMPTY
172	172	3	-1	0	-1	# ifdef android	EMPTY	EMPTY
172	173	1	1	0	-1	iflag = atoi ( optarg )	iflag	atoi optarg
172	174	2	-1	0	-1	# else	EMPTY	EMPTY
172	175	2	-1	0	-1	iflag = strtonum ( optarg  numconst  uint _ max  & errstr ) ;	iflag	optarg
172	176	2	-1	0	-1	if ( errstr )	EMPTY	EMPTY
172	177	2	-1	0	-1	errx ( numconst  strlit  errstr  optarg ) ;	EMPTY	errx optarg
172	178	2	-1	1	-1	# endif	EMPTY	EMPTY
172	179	2	-1	0	-1	break	EMPTY	EMPTY
172	180	2	-1	0	-1	# ifndef android	EMPTY	EMPTY
172	181	2	-1	0	-1	case 'j' :	EMPTY	EMPTY
172	182	2	-1	0	-1	jflag = numconst ;	EMPTY	EMPTY
172	183	2	-1	0	-1	break ;	EMPTY	EMPTY
172	184	2	-1	1	-1	# endif	EMPTY	EMPTY
172	185	2	-1	0	-1	case 'k' :	EMPTY	EMPTY
172	186	2	-1	0	-1	kflag = 1	kflag	EMPTY
172	187	2	-1	0	-1	break	EMPTY	EMPTY
172	188	2	-1	0	-1	case 'l' :	EMPTY	EMPTY
172	189	2	-1	0	-1	lflag = 1	lflag	EMPTY
172	190	2	-1	0	-1	break	EMPTY	EMPTY
172	191	2	-1	0	-1	case 'n' :	EMPTY	EMPTY
172	192	2	-1	0	-1	nflag = 1	nflag	EMPTY
172	193	2	-1	0	-1	break	EMPTY	EMPTY
172	194	2	-1	0	-1	case 'p' :	EMPTY	EMPTY
172	195	2	-1	0	-1	pflag = optarg	pflag	optarg
172	196	2	-1	0	-1	break	EMPTY	EMPTY
172	197	2	-1	0	-1	case 'p' :	EMPTY	EMPTY
172	198	2	-1	0	-1	pflag = optarg	pflag	optarg
172	199	2	-1	0	-1	break	EMPTY	EMPTY
172	200	2	-1	0	-1	case 'r' :	EMPTY	EMPTY
172	201	2	-1	0	-1	rflag = 1	rflag	EMPTY
172	202	3	-1	0	-1	break	EMPTY	EMPTY
172	203	1	1	0	-1	case 's' :	EMPTY	EMPTY
172	204	2	-1	0	-1	sflag = optarg	sflag	optarg
172	205	2	-1	0	-1	break	EMPTY	EMPTY
172	206	2	-1	0	-1	case 't' :	EMPTY	EMPTY
172	207	2	-1	0	-1	tflag = 1	tflag	EMPTY
172	208	2	-1	0	-1	break	EMPTY	EMPTY
172	209	2	-1	0	-1	case 'u' :	EMPTY	EMPTY
172	210	2	-1	0	-1	uflag = 1	uflag	EMPTY
172	211	2	-1	0	-1	break	EMPTY	EMPTY
172	212	2	-1	0	-1	# ifndef android	EMPTY	EMPTY
172	213	2	-1	0	-1	case 'v' :	EMPTY	EMPTY
172	214	2	-1	0	-1	rtableid = ( unsigned int ) strtonum ( optarg  numconst	EMPTY	optarg
172	215	2	-1	0	-1	rt _ tableid _ max  & errstr ) ;	EMPTY	EMPTY
172	216	2	-1	0	-1	if ( errstr )	EMPTY	EMPTY
172	217	2	-1	0	-1	errx ( numconst  strlit  errstr  optarg ) ;	EMPTY	errx optarg
172	218	2	-1	0	-1	break ;	EMPTY	EMPTY
172	219	2	-1	1	-1	# endif	EMPTY	EMPTY
172	220	2	-1	0	-1	case 'v' :	EMPTY	EMPTY
172	221	2	-1	0	-1	vflag = 1	vflag	EMPTY
172	222	2	-1	0	-1	break	EMPTY	EMPTY
172	223	2	-1	0	-1	case 'w' :	EMPTY	EMPTY
172	224	2	-1	0	-1	# ifdef android	EMPTY	EMPTY
172	225	2	-1	0	-1	timeout = atoi ( optarg )	EMPTY	atoi optarg
172	226	2	-1	0	-1	# else	EMPTY	EMPTY
172	227	2	-1	0	-1	timeout = strtonum ( optarg  numconst  int _ max / numconst  & errstr ) ;	EMPTY	optarg
172	228	2	-1	0	-1	if ( errstr )	EMPTY	EMPTY
172	229	2	-1	0	-1	errx ( numconst  strlit  errstr  optarg ) ;	EMPTY	errx optarg
172	230	2	-1	0	-1	# endif	EMPTY	EMPTY
172	231	2	-1	0	-1	timeout *= 1000	EMPTY	EMPTY
172	232	3	-1	0	-1	break	EMPTY	EMPTY
172	233	1	1	0	-1	# ifndef android	EMPTY	EMPTY
172	234	2	-1	0	-1	case 'x' :	EMPTY	EMPTY
172	235	2	-1	0	-1	xflag = numconst ;	EMPTY	EMPTY
172	236	2	-1	0	-1	if ( ( proxy = strdup ( optarg ) ) == null )	EMPTY	strdup optarg
172	237	2	-1	0	-1	err ( numconst  null ) ;	EMPTY	err
172	238	2	-1	0	-1	break ;	EMPTY	EMPTY
172	239	2	-1	1	-1	# endif	EMPTY	EMPTY
172	240	2	-1	0	-1	case 'z' :	EMPTY	EMPTY
172	241	2	-1	0	-1	zflag = 1	zflag	EMPTY
172	242	2	-1	0	-1	break	EMPTY	EMPTY
172	243	2	-1	0	-1	case 'd' :	EMPTY	EMPTY
172	244	2	-1	0	-1	dflag = 1	dflag	EMPTY
172	245	2	-1	0	-1	break	EMPTY	EMPTY
172	246	2	-1	0	-1	case 'i' :	EMPTY	EMPTY
172	247	2	-1	0	-1	# ifdef android	EMPTY	EMPTY
172	248	2	-1	0	-1	iflag = atoi ( optarg )	iflag	atoi optarg
172	249	2	-1	0	-1	# else	EMPTY	EMPTY
172	250	2	-1	0	-1	iflag = strtonum ( optarg  numconst  numconst << numconst  & errstr ) ;	iflag	optarg
172	251	2	-1	0	-1	if ( errstr != null )	EMPTY	EMPTY
172	252	2	-1	0	-1	errx ( numconst  strlit	EMPTY	errx
172	253	2	-1	0	-1	errstr  optarg ) ;	EMPTY	optarg
172	254	2	-1	0	-1	# endif	EMPTY	EMPTY
172	255	2	-1	0	-1	break	EMPTY	EMPTY
172	256	2	-1	0	-1	case 'o' :	EMPTY	EMPTY
172	257	2	-1	0	-1	# ifdef android	EMPTY	EMPTY
172	258	2	-1	0	-1	oflag = atoi ( optarg )	oflag	atoi optarg
172	259	2	-1	0	-1	# else	EMPTY	EMPTY
172	260	2	-1	0	-1	oflag = strtonum ( optarg  numconst  numconst << numconst  & errstr ) ;	oflag	optarg
172	261	2	-1	0	-1	if ( errstr != null )	EMPTY	EMPTY
172	262	3	-1	0	-1	errx ( numconst  strlit	EMPTY	errx
172	263	1	1	0	-1	errstr  optarg ) ;	EMPTY	optarg
172	264	2	-1	0	-1	# endif	EMPTY	EMPTY
172	265	2	-1	0	-1	break	EMPTY	EMPTY
172	266	2	-1	0	-1	# ifndef android	EMPTY	EMPTY
172	267	2	-1	0	-1	case 's' :	EMPTY	EMPTY
172	268	2	-1	0	-1	sflag = numconst ;	EMPTY	EMPTY
172	269	2	-1	0	-1	break ;	EMPTY	EMPTY
172	270	2	-1	0	-1	case 't' :	EMPTY	EMPTY
172	271	2	-1	0	-1	errstr = null ;	EMPTY	EMPTY
172	272	2	-1	0	-1	errno = numconst ;	EMPTY	EMPTY
172	273	2	-1	0	-1	if ( map _ tos ( optarg  & tflag ) )	EMPTY	optarg
172	274	2	-1	0	-1	break ;	EMPTY	EMPTY
172	275	2	-1	0	-1	if ( strlen ( optarg ) > numconst && optarg [ numconst ] == '0' &&	EMPTY	strlen optarg optarg
172	276	2	-1	0	-1	optarg [ numconst ] == 'x' )	EMPTY	optarg
172	277	2	-1	0	-1	tflag = ( int ) strtol ( optarg  null  numconst ) ;	EMPTY	optarg
172	278	2	-1	0	-1	else	EMPTY	EMPTY
172	279	2	-1	0	-1	tflag = ( int ) strtonum ( optarg  numconst  numconst	EMPTY	optarg
172	280	2	-1	0	-1	& errstr ) ;	EMPTY	EMPTY
172	281	2	-1	0	-1	if ( tflag < numconst || tflag > numconst || errstr || errno )	EMPTY	EMPTY
172	282	2	-1	0	-1	errx ( numconst  strlit  optarg ) ;	EMPTY	errx optarg
172	283	2	-1	0	-1	break ;	EMPTY	EMPTY
172	284	2	-1	1	-1	# endif	EMPTY	EMPTY
172	285	2	-1	0	-1	default :	EMPTY	EMPTY
172	286	2	-1	0	-1	usage ( 1 )	EMPTY	EMPTY
172	287	2	-1	0	-1	}	EMPTY	EMPTY
172	288	2	-1	0	-1	}	EMPTY	EMPTY
172	289	2	-1	0	-1	argc -= optind ;	EMPTY	optind
172	290	3	-1	0	-1	argv += optind ;	EMPTY	optind
172	293	1	0	0	-1	if ( argv [ 0 ] && ! argv [ 1 ] && family == af _ unix ) {	EMPTY	EMPTY
172	294	2	-1	0	-1	host = argv [ 0 ] ;	EMPTY	EMPTY
172	295	2	-1	0	-1	uport = null ;	EMPTY	EMPTY
172	296	2	-1	0	-1	} else if ( argv [ 0 ] && ! argv [ 1 ] ) {	EMPTY	EMPTY
172	297	2	-1	0	-1	if ( ! lflag )	lflag	EMPTY
172	298	2	-1	0	-1	usage ( 1 ) ;	EMPTY	EMPTY
172	299	2	-1	0	-1	uport = argv [ 0 ] ;	EMPTY	EMPTY
172	300	2	-1	0	-1	host = null ;	EMPTY	EMPTY
172	301	2	-1	0	-1	} else if ( argv [ 0 ] && argv [ 1 ] ) {	EMPTY	EMPTY
172	302	2	-1	0	-1	host = argv [ 0 ] ;	EMPTY	EMPTY
172	303	2	-1	0	-1	uport = argv [ 1 ] ;	EMPTY	EMPTY
172	304	2	-1	0	-1	} else	EMPTY	EMPTY
172	305	3	-1	0	-1	usage ( 1 )	EMPTY	EMPTY
172	307	1	0	0	0	if ( lflag && sflag )	lflag sflag	EMPTY
172	308	2	-1	0	-1	errx ( 1 ,  " cannot use -s and -l "  )	EMPTY	errx
172	309	2	-1	0	-1	if ( lflag && pflag )	lflag pflag	EMPTY
172	310	2	-1	0	-1	errx ( 1 ,  " cannot use -p and -l "  )	EMPTY	errx
172	311	2	-1	0	-1	if ( lflag && zflag )	lflag zflag	EMPTY
172	312	2	-1	0	-1	errx ( 1 ,  " cannot use -z and -l "  )	EMPTY	errx
172	313	2	-1	0	-1	if ( ! lflag && kflag )	lflag kflag	EMPTY
172	314	3	-1	0	-1	errx ( 1 ,  " must use -l with -k "  )	EMPTY	errx
172	317	1	0	0	-1	if ( ( family == af _ unix ) && uflag && ! lflag ) {	uflag lflag	EMPTY
172	318	2	-1	0	-1	if ( sflag ) {	sflag	EMPTY
172	319	2	-1	0	-1	unix _ dg _ tmp _ socket = sflag ;	sflag	EMPTY
172	320	2	-1	0	-1	} else {	EMPTY	EMPTY
172	321	2	-1	0	-1	strlcpy ( unix _ dg _ tmp _ socket _ buf ,  " /tmp/nc.xxxxxxxxxx "  ,	EMPTY	strlcpy
172	322	2	-1	0	-1	unix _ dg _ tmp _ socket _ size ) ;	EMPTY	EMPTY
172	323	2	-1	0	-1	if ( mktemp ( unix _ dg _ tmp _ socket _ buf ) == null )	EMPTY	mktemp
172	324	2	-1	0	-1	err ( 1 ,  " mktemp "  ) ;	EMPTY	err
172	325	2	-1	0	-1	unix _ dg _ tmp _ socket = unix _ dg _ tmp _ socket _ buf ;	EMPTY	EMPTY
172	326	2	-1	0	-1	}	EMPTY	EMPTY
172	327	3	-1	0	-1	}	EMPTY	EMPTY
172	330	1	0	0	-1	if ( family != af _ unix ) {	EMPTY	EMPTY
172	331	2	-1	0	-1	memset ( & hints , 0 , sizeof ( struct addrinfo ) ) ;	EMPTY	memset
172	332	2	-1	0	-1	hints . ai _ family = family ;	EMPTY	EMPTY
172	333	2	-1	0	-1	hints . ai _ socktype = uflag ? sock _ dgram : sock _ stream ;	uflag	EMPTY
172	334	2	-1	0	-1	hints . ai _ protocol = uflag ? ipproto _ udp : ipproto _ tcp ;	uflag	ipproto _ udp ipproto _ tcp
172	335	2	-1	0	-1	if ( nflag )	nflag	EMPTY
172	336	2	-1	0	-1	hints . ai _ flags |= ai _ numerichost ;	EMPTY	EMPTY
172	337	3	-1	0	-1	}	EMPTY	EMPTY
172	339	1	0	0	-1	# ifndef android	EMPTY	EMPTY
172	340	2	-1	0	-1	if ( xflag ) {	EMPTY	EMPTY
172	341	2	-1	0	-1	if ( uflag )	uflag	EMPTY
172	342	3	-1	0	-1	errx ( numconst  strlit ) ;	EMPTY	errx
172	344	1	0	0	-1	if ( lflag )	lflag	EMPTY
172	345	3	-1	0	-1	errx ( numconst  strlit ) ;	EMPTY	errx
172	347	1	0	0	-1	if ( family == af _ unix )	EMPTY	EMPTY
172	348	3	-1	0	-1	errx ( numconst  strlit ) ;	EMPTY	errx
172	351	1	1	1	-1	if ( family == af _ inet6 )	EMPTY	EMPTY
172	352	3	-1	0	-1	errx ( numconst  strlit ) ;	EMPTY	errx
172	354	1	0	0	-1	if ( sflag )	sflag	EMPTY
172	355	3	-1	0	-1	errx ( numconst  strlit ) ;	EMPTY	errx
172	357	1	0	0	-1	proxyhost = strsep ( & proxy  strlit ) ;	EMPTY	EMPTY
172	358	3	-1	0	-1	proxyport = proxy ;	EMPTY	EMPTY
172	360	1	1	0	-1	memset ( & proxyhints  numconst  sizeof ( struct addrinfo ) ) ;	EMPTY	memset
172	361	2	-1	0	-1	proxyhints . ai _ family = family ;	EMPTY	EMPTY
172	362	2	-1	0	-1	proxyhints . ai _ socktype = sock _ stream ;	EMPTY	EMPTY
172	363	2	-1	0	-1	proxyhints . ai _ protocol = ipproto _ tcp ;	EMPTY	ipproto _ tcp
172	364	2	-1	0	-1	if ( nflag )	nflag	EMPTY
172	365	2	-1	0	-1	proxyhints . ai _ flags |= ai _ numerichost ;	EMPTY	EMPTY
172	366	2	-1	0	-1	}	EMPTY	EMPTY
172	367	3	-1	1	-1	# endif	EMPTY	EMPTY
172	369	1	0	0	0	if ( lflag ) {	lflag	EMPTY
172	370	2	-1	0	-1	int connfd ;	EMPTY	EMPTY
172	371	3	-1	0	-1	ret = 0	EMPTY	EMPTY
172	373	1	0	0	0	if ( family == af _ unix ) {	EMPTY	EMPTY
172	374	2	-1	0	-1	if ( uflag )	uflag	EMPTY
172	375	2	-1	0	-1	s = unix _ bind ( host ) ;	unix _ bind	EMPTY
172	376	2	-1	0	-1	else	EMPTY	EMPTY
172	377	2	-1	0	-1	s = unix _ listen ( host ) ;	unix _ listen	EMPTY
172	378	3	-1	0	-1	}	EMPTY	EMPTY
172	381	1	1	1	1	for ( ; ; ) {	EMPTY	EMPTY
172	382	2	-1	0	-1	if ( family != af _ unix )	EMPTY	EMPTY
172	383	2	-1	0	-1	s = local _ listen ( host , uport , hints )	local _ listen	EMPTY
172	384	2	-1	0	-1	if ( s < 0 )	EMPTY	EMPTY
172	385	2	-1	0	-1	err ( 1 , null )	EMPTY	err
172	391	2	-1	1	-1	if ( uflag ) {	uflag	EMPTY
172	392	2	-1	0	-1	int rv , plen ;	EMPTY	EMPTY
172	393	2	-1	0	-1	char buf [ 16384 ] ;	EMPTY	EMPTY
172	394	3	-1	0	-1	struct sockaddr _ storage z ;	EMPTY	EMPTY
172	396	1	0	0	-1	len = sizeof ( z ) ;	EMPTY	EMPTY
172	397	2	-1	0	-1	plen = jflag ? 16384 : 2048 ;	EMPTY	EMPTY
172	398	2	-1	0	-1	rv = recvfrom ( s , buf , plen , msg _ peek ,	EMPTY	recvfrom
172	399	2	-1	0	-1	( struct sockaddr * ) & z , & len ) ;	EMPTY	EMPTY
172	400	2	-1	0	-1	if ( rv < 0 )	EMPTY	EMPTY
172	401	3	-1	0	-1	err ( 1 ,  " recvfrom "  ) ;	EMPTY	err
172	403	1	0	0	-1	rv = connect ( s , ( struct sockaddr * ) & z , len ) ;	EMPTY	connect
172	404	2	-1	0	-1	if ( rv < 0 )	EMPTY	EMPTY
172	405	3	-1	0	-1	err ( 1 ,  " connect "  ) ;	EMPTY	err
172	407	1	0	0	0	readwrite ( s ) ;	readwrite	EMPTY
172	408	2	-1	0	-1	} else {	EMPTY	EMPTY
172	409	2	-1	0	-1	len = sizeof ( cliaddr ) ;	EMPTY	EMPTY
172	410	2	-1	0	-1	connfd = accept ( s , ( struct sockaddr * ) & cliaddr ,	EMPTY	accept
172	411	2	-1	0	-1	& len ) ;	EMPTY	EMPTY
172	412	2	-1	0	-1	readwrite ( connfd ) ;	readwrite	EMPTY
172	413	2	-1	0	-1	close ( connfd ) ;	EMPTY	close
172	414	3	-1	0	-1	}	EMPTY	EMPTY
172	416	1	0	0	0	if ( family != af _ unix )	EMPTY	EMPTY
172	417	2	-1	0	-1	close ( s ) ;	EMPTY	close
172	418	2	-1	0	-1	else if ( uflag ) {	uflag	EMPTY
172	419	2	-1	0	-1	if ( connect ( s , null , 0 ) < 0 )	EMPTY	connect
172	420	2	-1	0	-1	err ( 1 ,  " connect "  ) ;	EMPTY	err
172	421	3	-1	0	-1	}	EMPTY	EMPTY
172	423	1	0	0	0	if ( ! kflag )	kflag	EMPTY
172	424	2	-1	0	-1	break	EMPTY	EMPTY
172	425	2	-1	0	-1	}	EMPTY	EMPTY
172	426	2	-1	0	-1	if ( family == af _ unix ) {	EMPTY	EMPTY
172	427	3	-1	0	-1	ret = numconst ;	EMPTY	EMPTY
172	429	1	0	0	0	if ( ( s = unix _ connect ( host ) ) > numconst && ! zflag ) {	unix _ connect zflag	EMPTY
172	430	2	-1	0	-1	readwrite ( s ) ;	readwrite	EMPTY
172	431	2	-1	0	-1	close ( s ) ;	EMPTY	close
172	432	2	-1	0	-1	}	EMPTY	EMPTY
172	433	3	-1	0	-1	ret = numconst ;	EMPTY	EMPTY
172	435	1	0	0	0	if ( uflag )	uflag	EMPTY
172	436	2	-1	0	-1	unlink ( unix _ dg _ tmp _ socket ) ;	EMPTY	unlink
172	437	3	-1	0	-1	exit ( ret ) ;	EMPTY	exit
172	439	1	0	0	-1	} else {	EMPTY	EMPTY
172	440	3	-1	0	-1	int i = numconst ;	EMPTY	EMPTY
172	443	1	1	1	1	build _ ports ( uport )	build _ ports	EMPTY
172	446	1	1	1	1	for ( i = numconst ; portlist [ i ] != null ; i ++ ) {	EMPTY	EMPTY
172	447	2	-1	0	-1	if ( s )	EMPTY	EMPTY
172	448	3	-1	0	-1	close ( s )	EMPTY	close
172	450	1	1	0	-1	# ifndef android	EMPTY	EMPTY
172	451	2	-1	0	-1	if ( xflag )	EMPTY	EMPTY
172	452	2	-1	0	-1	s = socks _ connect ( host  portlist [ i ]  hints	EMPTY	EMPTY
172	453	2	-1	0	-1	proxyhost  proxyport  proxyhints  socksv	EMPTY	EMPTY
172	454	2	-1	0	-1	pflag ) ;	pflag	EMPTY
172	455	2	-1	0	-1	else	EMPTY	EMPTY
172	456	2	-1	1	-1	# endif	EMPTY	EMPTY
172	457	3	-1	0	-1	s = remote _ connect ( host , portlist [ i ] , hints )	remote _ connect	EMPTY
172	459	1	0	0	0	if ( s < 0 )	EMPTY	EMPTY
172	460	3	-1	0	-1	continue	EMPTY	EMPTY
172	462	1	1	0	-1	ret = 0	EMPTY	EMPTY
172	463	2	-1	0	-1	if ( vflag || zflag ) {	vflag zflag	EMPTY
172	465	2	-1	1	-1	if ( uflag ) {	uflag	EMPTY
172	466	2	-1	0	-1	if ( udptest ( s ) == - 1 ) {	udptest	EMPTY
172	467	2	-1	0	-1	ret = 1 ;	EMPTY	EMPTY
172	468	2	-1	0	-1	continue ;	EMPTY	EMPTY
172	469	2	-1	0	-1	}	EMPTY	EMPTY
172	470	3	-1	0	-1	}	EMPTY	EMPTY
172	473	1	1	1	1	if ( nflag )	nflag	EMPTY
172	474	2	-1	0	-1	sv = null ;	EMPTY	EMPTY
172	475	2	-1	0	-1	else {	EMPTY	EMPTY
172	476	2	-1	0	-1	sv = getservbyport (	EMPTY	getservbyport
172	477	2	-1	0	-1	ntohs ( atoi ( portlist [ i ] ) ) ,	EMPTY	atoi
172	478	2	-1	0	-1	uflag ?  " udp "  :  " tcp "  ) ;	uflag	EMPTY
172	479	3	-1	0	-1	}	EMPTY	EMPTY
172	481	1	0	0	0	fprintf ( stderr ,	EMPTY	fprintf stderr
172	482	2	-1	0	-1	" connection to %s %s port [%s/%s]  "	EMPTY	EMPTY
172	483	2	-1	0	-1	" succeeded!\n "  , host , portlist [ i ] ,	EMPTY	EMPTY
172	484	2	-1	0	-1	uflag ?  " udp "  :  " tcp "  ,	uflag	EMPTY
172	485	2	-1	0	-1	sv ? sv -> s _ name :  " * "  )	EMPTY	EMPTY
172	486	2	-1	0	-1	}	EMPTY	EMPTY
172	487	2	-1	0	-1	if ( ! zflag )	zflag	EMPTY
172	488	2	-1	0	-1	readwrite ( s ) ;	readwrite	EMPTY
172	489	2	-1	0	-1	}	EMPTY	EMPTY
172	490	3	-1	0	-1	}	EMPTY	EMPTY
172	492	1	0	0	0	if ( s )	EMPTY	EMPTY
172	493	3	-1	0	-1	close ( s ) ;	EMPTY	close
172	495	1	0	0	0	exit ( ret ) ;	EMPTY	exit
172	496	3	-1	0	-1	}	EMPTY	EMPTY
172	502	1	0	0	-1	int	EMPTY	EMPTY
172	503	2	-1	0	-1	unix _ bind ( char * path )	unix _ bind	EMPTY
172	504	2	-1	0	-1	{	EMPTY	EMPTY
172	505	2	-1	0	-1	struct sockaddr _ un sun ;	EMPTY	EMPTY
172	506	3	-1	0	-1	int s ;	EMPTY	EMPTY
172	509	1	0	0	-1	if ( ( s = socket ( af _ unix , uflag ? sock _ dgram : sock _ stream ,	uflag	socket
172	510	2	-1	0	-1	0 ) ) < 0 )	EMPTY	EMPTY
172	511	3	-1	0	-1	return ( - 1 )	EMPTY	EMPTY
172	513	1	0	0	0	memset ( & sun , 0 , sizeof ( struct sockaddr _ un ) )	EMPTY	memset
172	514	3	-1	0	-1	sun . sun _ family = af _ unix ;	EMPTY	EMPTY
172	516	1	0	0	0	if ( strlcpy ( sun . sun _ path , path , sizeof ( sun . sun _ path ) ) >=	EMPTY	strlcpy
172	517	2	-1	0	-1	sizeof ( sun . sun _ path ) ) {	EMPTY	EMPTY
172	518	2	-1	0	-1	close ( s ) ;	EMPTY	close
172	519	2	-1	0	-1	errno = enametoolong ;	EMPTY	EMPTY
172	520	2	-1	0	-1	return ( - 1 ) ;	EMPTY	EMPTY
172	521	3	-1	0	-1	}	EMPTY	EMPTY
172	523	1	0	0	0	if ( bind ( s , ( struct sockaddr * ) & sun , sun _ len ( & sun ) ) < 0 ) {	EMPTY	bind
172	524	2	-1	0	-1	close ( s ) ;	EMPTY	close
172	525	2	-1	0	-1	return ( - 1 ) ;	EMPTY	EMPTY
172	526	2	-1	0	-1	}	EMPTY	EMPTY
172	527	2	-1	0	-1	return ( s )	EMPTY	EMPTY
172	528	3	-1	0	-1	}	EMPTY	EMPTY
172	534	1	0	0	-1	int	EMPTY	EMPTY
172	535	2	-1	0	-1	unix _ connect ( char * path )	unix _ connect	EMPTY
172	536	2	-1	0	-1	{	EMPTY	EMPTY
172	537	2	-1	0	-1	struct sockaddr _ un sun ;	EMPTY	EMPTY
172	538	3	-1	0	-1	int s ;	EMPTY	EMPTY
172	540	1	0	0	0	if ( uflag ) {	uflag	EMPTY
172	541	2	-1	0	-1	if ( ( s = unix _ bind ( unix _ dg _ tmp _ socket ) ) < 0 )	unix _ bind	EMPTY
172	542	2	-1	0	-1	return ( - 1 ) ;	EMPTY	EMPTY
172	543	2	-1	0	-1	} else {	EMPTY	EMPTY
172	544	2	-1	0	-1	if ( ( s = socket ( af _ unix , sock _ stream , 0 ) ) < 0 )	EMPTY	socket
172	545	2	-1	0	-1	return ( - 1 ) ;	EMPTY	EMPTY
172	546	2	-1	0	-1	}	EMPTY	EMPTY
172	547	3	-1	0	-1	( void ) fcntl ( s , f _ setfd , 1 )	EMPTY	fcntl
172	549	1	0	0	0	memset ( & sun , 0 , sizeof ( struct sockaddr _ un ) )	EMPTY	memset
172	550	3	-1	0	-1	sun . sun _ family = af _ unix ;	EMPTY	EMPTY
172	552	1	0	0	0	if ( strlcpy ( sun . sun _ path , path , sizeof ( sun . sun _ path ) ) >=	EMPTY	strlcpy
172	553	2	-1	0	-1	sizeof ( sun . sun _ path ) ) {	EMPTY	EMPTY
172	554	2	-1	0	-1	close ( s ) ;	EMPTY	close
172	555	2	-1	0	-1	errno = enametoolong ;	EMPTY	EMPTY
172	556	2	-1	0	-1	return ( - 1 ) ;	EMPTY	EMPTY
172	557	2	-1	0	-1	}	EMPTY	EMPTY
172	558	2	-1	0	-1	if ( connect ( s , ( struct sockaddr * ) & sun , sun _ len ( & sun ) ) < 0 ) {	EMPTY	connect
172	559	2	-1	0	-1	close ( s ) ;	EMPTY	close
172	560	2	-1	0	-1	return ( - 1 ) ;	EMPTY	EMPTY
172	561	2	-1	0	-1	}	EMPTY	EMPTY
172	562	3	-1	0	-1	return ( s )	EMPTY	EMPTY
172	564	1	0	0	-1	}	EMPTY	EMPTY
172	570	1	0	0	-1	int	EMPTY	EMPTY
172	571	2	-1	0	-1	unix _ listen ( char * path )	unix _ listen	EMPTY
172	572	2	-1	0	-1	{	EMPTY	EMPTY
172	573	2	-1	0	-1	int s ;	EMPTY	EMPTY
172	574	2	-1	0	-1	if ( ( s = unix _ bind ( path ) ) < 0 )	unix _ bind	EMPTY
172	575	3	-1	0	-1	return ( - 1 )	EMPTY	EMPTY
172	577	1	0	0	0	if ( listen ( s , 5 ) < 0 ) {	EMPTY	listen
172	578	2	-1	0	-1	close ( s ) ;	EMPTY	close
172	579	2	-1	0	-1	return ( - 1 ) ;	EMPTY	EMPTY
172	580	2	-1	0	-1	}	EMPTY	EMPTY
172	581	2	-1	0	-1	return ( s )	EMPTY	EMPTY
172	582	3	-1	0	-1	}	EMPTY	EMPTY
172	589	1	0	0	-1	int	EMPTY	EMPTY
172	590	2	-1	0	-1	remote _ connect ( const char * host  const char * port  struct addrinfo hints )	remote _ connect	EMPTY
172	591	2	-1	0	-1	{	EMPTY	EMPTY
172	592	2	-1	0	-1	struct addrinfo * res , * res0 ;	EMPTY	EMPTY
172	593	3	-1	0	-1	int s , error , on = 1 ;	EMPTY	EMPTY
172	595	1	0	0	0	if ( ( error = getaddrinfo ( host , port , & hints , & res ) ) )	EMPTY	getaddrinfo
172	596	3	-1	0	-1	errx ( 1 ,  " getaddrinfo: %s "  , gai _ strerror ( error ) )	EMPTY	errx gai _ strerror
172	598	1	0	0	-1	res0 = res	EMPTY	EMPTY
172	599	2	-1	0	-1	do {	EMPTY	EMPTY
172	600	2	-1	0	-1	if ( ( s = socket ( res0 -> ai _ family , res0 -> ai _ socktype ,	EMPTY	socket
172	601	2	-1	0	-1	res0 -> ai _ protocol ) ) < 0 )	EMPTY	EMPTY
172	602	3	-1	0	-1	continue	EMPTY	EMPTY
172	604	1	1	0	-1	# ifndef android	EMPTY	EMPTY
172	605	2	-1	0	-1	if ( rtableid ) {	EMPTY	EMPTY
172	606	2	-1	0	-1	if ( setsockopt ( s  sol _ socket  so _ rtable  & rtableid	EMPTY	setsockopt
172	607	2	-1	0	-1	sizeof ( rtableid ) ) == - numconst )	EMPTY	EMPTY
172	608	2	-1	0	-1	err ( numconst  strlit ) ;	EMPTY	err
172	609	2	-1	0	-1	}	EMPTY	EMPTY
172	610	3	-1	1	-1	# endif	EMPTY	EMPTY
172	613	1	1	1	1	if ( sflag || pflag ) {	sflag pflag	EMPTY
172	614	3	-1	0	-1	struct addrinfo ahints , * ares ;	EMPTY	EMPTY
172	616	1	1	0	-1	# ifndef android	EMPTY	EMPTY
172	618	2	-1	1	-1	setsockopt ( s  sol _ socket  so _ bindany  & on  sizeof ( on ) ) ;	EMPTY	setsockopt
172	619	2	-1	0	-1	# endif	EMPTY	EMPTY
172	620	2	-1	0	-1	memset ( & ahints , 0 , sizeof ( struct addrinfo ) )	EMPTY	memset
172	621	2	-1	0	-1	ahints . ai _ family = res0 -> ai _ family	EMPTY	EMPTY
172	622	2	-1	0	-1	ahints . ai _ socktype = uflag ? sock _ dgram : sock _ stream ;	uflag	EMPTY
172	623	2	-1	0	-1	ahints . ai _ protocol = uflag ? ipproto _ udp : ipproto _ tcp ;	uflag	ipproto _ udp ipproto _ tcp
172	624	2	-1	0	-1	ahints . ai _ flags = ai _ passive ;	EMPTY	EMPTY
172	625	2	-1	0	-1	if ( ( error = getaddrinfo ( sflag , pflag , & ahints , & ares ) ) )	sflag pflag	getaddrinfo
172	626	3	-1	0	-1	errx ( 1 ,  " getaddrinfo: %s "  , gai _ strerror ( error ) )	EMPTY	errx gai _ strerror
172	628	1	0	0	0	if ( bind ( s , ( struct sockaddr * ) ares -> ai _ addr ,	EMPTY	bind
172	629	2	-1	0	-1	ares -> ai _ addrlen ) < 0 )	EMPTY	EMPTY
172	630	2	-1	0	-1	errx ( 1 ,  " bind failed: %s "  , strerror ( errno ) )	EMPTY	errx strerror
172	631	2	-1	0	-1	freeaddrinfo ( ares )	EMPTY	freeaddrinfo
172	632	3	-1	0	-1	}	EMPTY	EMPTY
172	634	1	0	0	0	set _ common _ sockopts ( s ) ;	EMPTY	EMPTY
172	636	1	0	0	0	if ( timeout _ connect ( s  res0 -> ai _ addr  res0 -> ai _ addrlen ) == numconst )	EMPTY	EMPTY
172	637	2	-1	0	-1	break ;	EMPTY	EMPTY
172	638	2	-1	0	-1	if ( vflag )	vflag	EMPTY
172	639	2	-1	0	-1	warn ( strlit  host  port	EMPTY	warn
172	640	3	-1	0	-1	uflag ? strlit : strlit ) ;	uflag	EMPTY
172	642	1	0	0	0	close ( s ) ;	EMPTY	close
172	643	2	-1	0	-1	s = - numconst ;	EMPTY	EMPTY
172	644	3	-1	0	-1	} while ( ( res0 = res0 -> ai _ next ) != null ) ;	EMPTY	EMPTY
172	646	1	0	0	0	freeaddrinfo ( res ) ;	EMPTY	freeaddrinfo
172	648	1	0	0	0	return ( s ) ;	EMPTY	EMPTY
172	649	3	-1	0	-1	}	EMPTY	EMPTY
172	651	1	0	0	-1	int	EMPTY	EMPTY
172	652	2	-1	0	-1	timeout _ connect ( int s  const struct sockaddr * name  socklen _ t namelen )	EMPTY	EMPTY
172	653	2	-1	0	-1	{	EMPTY	EMPTY
172	654	2	-1	0	-1	struct pollfd pfd ;	EMPTY	EMPTY
172	655	2	-1	0	-1	socklen _ t optlen ;	EMPTY	EMPTY
172	656	2	-1	0	-1	int flags  optval ;	EMPTY	EMPTY
172	657	3	-1	0	-1	int ret ;	EMPTY	EMPTY
172	659	1	0	0	0	if ( timeout != - numconst ) {	EMPTY	EMPTY
172	660	2	-1	0	-1	flags = fcntl ( s  f _ getfl  numconst ) ;	EMPTY	fcntl
172	661	2	-1	0	-1	if ( fcntl ( s  f _ setfl  flags | o _ nonblock ) == - numconst )	EMPTY	fcntl
172	662	2	-1	0	-1	err ( numconst  strlit ) ;	EMPTY	err
172	663	3	-1	0	-1	}	EMPTY	EMPTY
172	665	1	0	0	0	if ( ( ret = connect ( s  name  namelen ) ) != numconst && errno == einprogress ) {	EMPTY	connect
172	666	2	-1	0	-1	pfd . fd = s ;	EMPTY	EMPTY
172	667	2	-1	0	-1	pfd . events = pollout ;	EMPTY	EMPTY
172	668	2	-1	0	-1	if ( ( ret = poll ( & pfd  numconst  timeout ) ) == numconst ) {	EMPTY	poll
172	669	2	-1	0	-1	optlen = sizeof ( optval ) ;	EMPTY	EMPTY
172	670	2	-1	0	-1	if ( ( ret = getsockopt ( s  sol _ socket  so _ error	EMPTY	getsockopt
172	671	2	-1	0	-1	& optval  & optlen ) ) == numconst ) {	EMPTY	EMPTY
172	672	2	-1	0	-1	errno = optval ;	EMPTY	EMPTY
172	673	2	-1	0	-1	ret = optval == numconst ? numconst : - numconst ;	EMPTY	EMPTY
172	674	2	-1	0	-1	}	EMPTY	EMPTY
172	675	2	-1	0	-1	if ( ret == numconst ) {	EMPTY	EMPTY
172	676	2	-1	0	-1	errno = etimedout ;	EMPTY	EMPTY
172	677	2	-1	0	-1	ret = - numconst ;	EMPTY	EMPTY
172	678	2	-1	0	-1	} else	EMPTY	EMPTY
172	679	2	-1	0	-1	err ( numconst  strlit ) ;	EMPTY	err
172	680	3	-1	0	-1	}	EMPTY	EMPTY
172	682	1	0	0	0	if ( timeout != - numconst && fcntl ( s  f _ setfl  flags ) == - numconst )	EMPTY	fcntl
172	683	3	-1	0	-1	err ( numconst  strlit ) ;	EMPTY	err
172	685	1	0	0	0	return ( ret ) ;	EMPTY	EMPTY
172	686	3	-1	0	-1	}	EMPTY	EMPTY
172	693	1	0	0	-1	int	EMPTY	EMPTY
172	694	2	-1	0	-1	local _ listen ( char * host  char * port  struct addrinfo hints )	local _ listen	EMPTY
172	695	2	-1	0	-1	{	EMPTY	EMPTY
172	696	2	-1	0	-1	struct addrinfo * res , * res0 ;	EMPTY	EMPTY
172	697	2	-1	0	-1	int s , ret , x = 1 ;	EMPTY	EMPTY
172	698	3	-1	0	-1	int error ;	EMPTY	EMPTY
172	701	1	1	1	-1	hints . ai _ flags |= ai _ passive ;	EMPTY	EMPTY
172	707	1	0	0	-1	if ( host == null && hints . ai _ family == af _ unspec )	EMPTY	EMPTY
172	708	3	-1	0	-1	hints . ai _ family = af _ inet ;	EMPTY	EMPTY
172	710	1	0	0	0	if ( ( error = getaddrinfo ( host , port , & hints , & res ) ) )	EMPTY	getaddrinfo
172	711	3	-1	0	-1	errx ( 1 ,  " getaddrinfo: %s "  , gai _ strerror ( error ) )	EMPTY	errx gai _ strerror
172	713	1	0	0	-1	res0 = res	EMPTY	EMPTY
172	714	2	-1	0	-1	do {	EMPTY	EMPTY
172	715	2	-1	0	-1	if ( ( s = socket ( res0 -> ai _ family , res0 -> ai _ socktype ,	EMPTY	socket
172	716	2	-1	0	-1	res0 -> ai _ protocol ) ) < 0 )	EMPTY	EMPTY
172	717	3	-1	0	-1	continue	EMPTY	EMPTY
172	719	1	1	0	-1	# ifndef android	EMPTY	EMPTY
172	720	2	-1	0	-1	if ( rtableid ) {	EMPTY	EMPTY
172	721	2	-1	0	-1	if ( setsockopt ( s  ipproto _ ip  so _ rtable  & rtableid	EMPTY	setsockopt
172	722	2	-1	0	-1	sizeof ( rtableid ) ) == - numconst )	EMPTY	EMPTY
172	723	2	-1	0	-1	err ( numconst  strlit ) ;	EMPTY	err
172	724	2	-1	0	-1	}	EMPTY	EMPTY
172	725	3	-1	1	-1	# endif	EMPTY	EMPTY
172	727	1	0	0	-1	# ifdef android	EMPTY	EMPTY
172	728	2	-1	0	-1	ret = setsockopt ( s , sol _ socket , so _ reuseaddr , & x , sizeof ( x ) )	EMPTY	setsockopt
172	729	2	-1	0	-1	# else	EMPTY	EMPTY
172	730	2	-1	0	-1	ret = setsockopt ( s  sol _ socket  so _ reuseport  & x  sizeof ( x ) ) ;	EMPTY	setsockopt
172	731	2	-1	0	-1	# endif	EMPTY	EMPTY
172	732	2	-1	0	-1	if ( ret == - 1 )	EMPTY	EMPTY
172	733	3	-1	0	-1	err ( 1 , null )	EMPTY	err
172	735	1	0	0	0	set _ common _ sockopts ( s )	EMPTY	EMPTY
172	737	1	0	0	0	if ( bind ( s , ( struct sockaddr * ) res0 -> ai _ addr ,	EMPTY	bind
172	738	2	-1	0	-1	res0 -> ai _ addrlen ) == 0 )	EMPTY	EMPTY
172	739	3	-1	0	-1	break	EMPTY	EMPTY
172	741	1	0	0	0	close ( s )	EMPTY	close
172	742	2	-1	0	-1	s = - 1	EMPTY	EMPTY
172	743	3	-1	0	-1	} while ( ( res0 = res0 -> ai _ next ) != null ) ;	EMPTY	EMPTY
172	745	1	0	0	0	if ( ! uflag && s != - numconst ) {	uflag	EMPTY
172	746	2	-1	0	-1	if ( listen ( s  numconst ) < numconst )	EMPTY	listen
172	747	2	-1	0	-1	err ( numconst  strlit ) ;	EMPTY	err
172	748	3	-1	0	-1	}	EMPTY	EMPTY
172	750	1	0	0	0	freeaddrinfo ( res ) ;	EMPTY	freeaddrinfo
172	752	1	0	0	0	return ( s ) ;	EMPTY	EMPTY
172	753	3	-1	0	-1	}	EMPTY	EMPTY
172	759	1	0	0	-1	void	EMPTY	EMPTY
172	760	2	-1	0	-1	readwrite ( int nfd )	readwrite	EMPTY
172	761	2	-1	0	-1	{	EMPTY	EMPTY
172	762	2	-1	0	-1	struct pollfd pfd [ 2 ] ;	EMPTY	EMPTY
172	763	2	-1	0	-1	unsigned char buf [ 16384 ] ;	EMPTY	EMPTY
172	764	2	-1	0	-1	int n , wfd = fileno ( stdin ) ;	EMPTY	fileno stdin
172	765	2	-1	0	-1	int lfd = fileno ( stdout ) ;	EMPTY	fileno stdout
172	766	3	-1	0	-1	int plen ;	EMPTY	EMPTY
172	768	1	0	0	-1	plen = jflag ? 16384 : 2048	EMPTY	EMPTY
172	771	1	1	1	-1	pfd [ 0 ] . fd = nfd	EMPTY	EMPTY
172	772	3	-1	0	-1	pfd [ numconst ] . events = pollin ;	EMPTY	EMPTY
172	775	1	1	1	-1	pfd [ 1 ] . fd = wfd	EMPTY	EMPTY
172	776	3	-1	0	-1	pfd [ numconst ] . events = pollin ;	EMPTY	EMPTY
172	778	1	0	0	0	while ( pfd [ 0 ] . fd != - 1 ) {	EMPTY	EMPTY
172	779	2	-1	0	-1	if ( iflag )	iflag	EMPTY
172	780	3	-1	0	-1	sleep ( iflag ) ;	iflag	sleep
172	782	1	0	0	0	if ( ( n = poll ( pfd , 2 - dflag , timeout ) ) < 0 ) {	dflag	poll
172	783	2	-1	0	-1	close ( nfd ) ;	EMPTY	close
172	784	2	-1	0	-1	err ( 1 ,  " polling error "  ) ;	EMPTY	err
172	785	3	-1	0	-1	}	EMPTY	EMPTY
172	787	1	0	0	0	if ( n == 0 )	EMPTY	EMPTY
172	788	3	-1	0	-1	return ;	EMPTY	EMPTY
172	790	1	0	0	0	if ( pfd [ 0 ] . revents & pollin ) {	EMPTY	EMPTY
172	791	2	-1	0	-1	if ( ( n = read ( nfd , buf , plen ) ) < 0 )	EMPTY	read
172	792	2	-1	0	-1	return ;	EMPTY	EMPTY
172	793	2	-1	0	-1	else if ( n == 0 ) {	EMPTY	EMPTY
172	794	2	-1	0	-1	shutdown ( nfd , shut _ rd ) ;	EMPTY	shutdown shut _ rd
172	795	2	-1	0	-1	pfd [ 0 ] . fd = - 1 ;	EMPTY	EMPTY
172	796	2	-1	0	-1	pfd [ 0 ] . events = 0 ;	EMPTY	EMPTY
172	797	2	-1	0	-1	} else {	EMPTY	EMPTY
172	798	2	-1	0	-1	if ( tflag )	tflag	EMPTY
172	799	2	-1	0	-1	atelnet ( nfd , buf , n ) ;	atelnet	EMPTY
172	800	2	-1	0	-1	if ( atomicio ( vwrite , lfd , buf , n ) != n )	atomicio	EMPTY
172	801	2	-1	0	-1	return ;	EMPTY	EMPTY
172	802	2	-1	0	-1	}	EMPTY	EMPTY
172	803	3	-1	0	-1	}	EMPTY	EMPTY
172	805	1	0	0	0	if ( ! dflag && pfd [ 1 ] . revents & pollin ) {	dflag	EMPTY
172	806	2	-1	0	-1	if ( ( n = read ( wfd , buf , plen ) ) < 0 )	EMPTY	read
172	807	2	-1	0	-1	return ;	EMPTY	EMPTY
172	808	2	-1	0	-1	else if ( n == 0 ) {	EMPTY	EMPTY
172	809	2	-1	0	-1	shutdown ( nfd , shut _ wr ) ;	EMPTY	shutdown shut _ wr
172	810	2	-1	0	-1	pfd [ 1 ] . fd = - 1 ;	EMPTY	EMPTY
172	811	2	-1	0	-1	pfd [ 1 ] . events = 0 ;	EMPTY	EMPTY
172	812	2	-1	0	-1	} else {	EMPTY	EMPTY
172	813	2	-1	0	-1	if ( atomicio ( vwrite , nfd , buf , n ) != n )	atomicio	EMPTY
172	814	2	-1	0	-1	return ;	EMPTY	EMPTY
172	815	2	-1	0	-1	}	EMPTY	EMPTY
172	816	2	-1	0	-1	}	EMPTY	EMPTY
172	817	2	-1	0	-1	}	EMPTY	EMPTY
172	818	3	-1	0	-1	}	EMPTY	EMPTY
172	821	1	0	0	-1	void	EMPTY	EMPTY
172	822	2	-1	0	-1	atelnet ( int nfd  unsigned char * buf  unsigned int size )	atelnet	EMPTY
172	823	2	-1	0	-1	{	EMPTY	EMPTY
172	824	2	-1	0	-1	unsigned char * p , * end ;	EMPTY	EMPTY
172	825	3	-1	0	-1	unsigned char obuf [ 4 ] ;	EMPTY	EMPTY
172	827	1	0	0	0	if ( size < 3 )	EMPTY	EMPTY
172	828	2	-1	0	-1	return	EMPTY	EMPTY
172	829	3	-1	0	-1	end = buf + size - 2	EMPTY	EMPTY
172	831	1	0	0	0	for ( p = buf ; p < end ; p ++ ) {	EMPTY	EMPTY
172	832	2	-1	0	-1	if ( * p != iac )	EMPTY	EMPTY
172	833	3	-1	0	-1	continue ;	EMPTY	EMPTY
172	835	1	0	0	-1	obuf [ 0 ] = iac ;	EMPTY	EMPTY
172	836	2	-1	0	-1	p ++ ;	EMPTY	EMPTY
172	837	2	-1	0	-1	if ( ( * p == will ) || ( * p == wont ) )	EMPTY	EMPTY
172	838	2	-1	0	-1	obuf [ 1 ] = dont ;	EMPTY	EMPTY
172	839	2	-1	0	-1	else if ( ( * p == do ) || ( * p == dont ) )	EMPTY	EMPTY
172	840	2	-1	0	-1	obuf [ 1 ] = wont ;	EMPTY	EMPTY
172	841	2	-1	0	-1	else	EMPTY	EMPTY
172	842	3	-1	0	-1	continue ;	EMPTY	EMPTY
172	844	1	0	0	-1	p ++ ;	EMPTY	EMPTY
172	845	2	-1	0	-1	obuf [ 2 ] = * p ;	EMPTY	EMPTY
172	846	2	-1	0	-1	if ( atomicio ( vwrite , nfd , obuf , 3 ) != 3 )	atomicio	EMPTY
172	847	2	-1	0	-1	warn (  " write error! "  ) ;	EMPTY	warn
172	848	2	-1	0	-1	}	EMPTY	EMPTY
172	849	3	-1	0	-1	}	EMPTY	EMPTY
172	856	1	0	0	-1	void	EMPTY	EMPTY
172	857	2	-1	0	-1	build _ ports ( char * p )	build _ ports	EMPTY
172	858	2	-1	0	-1	{	EMPTY	EMPTY
172	859	2	-1	0	-1	const char * errstr ;	EMPTY	EMPTY
172	860	2	-1	0	-1	char * n ;	EMPTY	EMPTY
172	861	2	-1	0	-1	int hi , lo , cp ;	EMPTY	EMPTY
172	862	3	-1	0	-1	int x = 0 ;	EMPTY	EMPTY
172	864	1	0	0	0	if ( ( n = strchr ( p  '-' ) ) != null ) {	EMPTY	strchr
172	865	2	-1	0	-1	if ( lflag )	lflag	EMPTY
172	866	3	-1	0	-1	errx ( 1 ,  " cannot use -l with multiple ports! "  )	EMPTY	errx
172	868	1	0	0	-1	* n = '\0'	EMPTY	EMPTY
172	869	3	-1	0	-1	n ++	EMPTY	EMPTY
172	872	1	1	1	-1	# ifdef android	EMPTY	EMPTY
172	873	2	-1	0	-1	hi = atoi ( n )	EMPTY	atoi
172	874	2	-1	0	-1	# else	EMPTY	EMPTY
172	875	2	-1	0	-1	hi = strtonum ( n  numconst  port _ max  & errstr ) ;	EMPTY	EMPTY
172	876	2	-1	0	-1	if ( errstr )	EMPTY	EMPTY
172	877	2	-1	0	-1	errx ( numconst  strlit  errstr  n ) ;	EMPTY	errx
172	878	2	-1	0	-1	# endif	EMPTY	EMPTY
172	879	2	-1	0	-1	# ifdef android	EMPTY	EMPTY
172	880	2	-1	0	-1	lo = atoi ( p )	EMPTY	atoi
172	881	2	-1	0	-1	# else	EMPTY	EMPTY
172	882	2	-1	0	-1	lo = strtonum ( p  numconst  port _ max  & errstr ) ;	EMPTY	EMPTY
172	883	2	-1	0	-1	if ( errstr )	EMPTY	EMPTY
172	884	2	-1	0	-1	errx ( numconst  strlit  errstr  p ) ;	EMPTY	errx
172	885	3	-1	0	-1	# endif	EMPTY	EMPTY
172	887	1	0	0	0	if ( lo > hi ) {	EMPTY	EMPTY
172	888	2	-1	0	-1	cp = hi ;	EMPTY	EMPTY
172	889	2	-1	0	-1	hi = lo ;	EMPTY	EMPTY
172	890	2	-1	0	-1	lo = cp ;	EMPTY	EMPTY
172	891	3	-1	0	-1	}	EMPTY	EMPTY
172	894	1	1	1	1	for ( cp = lo ; cp <= hi ; cp ++ ) {	EMPTY	EMPTY
172	895	2	-1	0	-1	portlist [ x ] = calloc ( 1 , port _ max _ len ) ;	EMPTY	calloc
172	896	2	-1	0	-1	if ( portlist [ x ] == null )	EMPTY	EMPTY
172	897	2	-1	0	-1	err ( 1 , null ) ;	EMPTY	err
172	898	2	-1	0	-1	snprintf ( portlist [ x ] , port _ max _ len ,  " %d "  , cp ) ;	EMPTY	EMPTY
172	899	2	-1	0	-1	x ++ ;	EMPTY	EMPTY
172	900	3	-1	0	-1	}	EMPTY	EMPTY
172	903	1	1	1	1	if ( rflag ) {	rflag	EMPTY
172	904	2	-1	0	-1	int y ;	EMPTY	EMPTY
172	905	3	-1	0	-1	char * c ;	EMPTY	EMPTY
172	907	1	0	0	0	for ( x = 0 ; x <= ( hi - lo ) ; x ++ ) {	EMPTY	EMPTY
172	908	2	-1	0	-1	y = ( arc4random ( ) & 0xffff ) % ( hi - lo ) ;	EMPTY	arc4random
172	909	2	-1	0	-1	c = portlist [ x ] ;	EMPTY	EMPTY
172	910	2	-1	0	-1	portlist [ x ] = portlist [ y ] ;	EMPTY	EMPTY
172	911	2	-1	0	-1	portlist [ y ] = c ;	EMPTY	EMPTY
172	912	2	-1	0	-1	}	EMPTY	EMPTY
172	913	2	-1	0	-1	}	EMPTY	EMPTY
172	914	2	-1	0	-1	} else {	EMPTY	EMPTY
172	915	2	-1	0	-1	# ifdef android	EMPTY	EMPTY
172	916	2	-1	0	-1	hi = atoi ( p ) ;	EMPTY	atoi
172	917	2	-1	0	-1	# else	EMPTY	EMPTY
172	918	2	-1	0	-1	hi = strtonum ( p  numconst  port _ max  & errstr ) ;	EMPTY	EMPTY
172	919	2	-1	0	-1	if ( errstr )	EMPTY	EMPTY
172	920	2	-1	0	-1	errx ( numconst  strlit  errstr  p ) ;	EMPTY	errx
172	921	2	-1	0	-1	# endif	EMPTY	EMPTY
172	922	2	-1	0	-1	portlist [ numconst ] = strdup ( p ) ;	EMPTY	strdup
172	923	2	-1	0	-1	if ( portlist [ numconst ] == null )	EMPTY	EMPTY
172	924	2	-1	0	-1	err ( numconst  null ) ;	EMPTY	err
172	925	2	-1	0	-1	}	EMPTY	EMPTY
172	926	3	-1	0	-1	}	EMPTY	EMPTY
172	934	1	0	0	-1	int	EMPTY	EMPTY
172	935	2	-1	0	-1	udptest ( int s )	udptest	EMPTY
172	936	2	-1	0	-1	{	EMPTY	EMPTY
172	937	3	-1	0	-1	int i , ret ;	EMPTY	EMPTY
172	939	1	0	0	0	for ( i = 0 ; i <= 3 ; i ++ ) {	EMPTY	EMPTY
172	940	2	-1	0	-1	if ( write ( s ,  " x "  , 1 ) == 1 )	EMPTY	write
172	941	2	-1	0	-1	ret = 1 ;	EMPTY	EMPTY
172	942	2	-1	0	-1	else	EMPTY	EMPTY
172	943	2	-1	0	-1	ret = - 1 ;	EMPTY	EMPTY
172	944	2	-1	0	-1	}	EMPTY	EMPTY
172	945	2	-1	0	-1	return ( ret )	EMPTY	EMPTY
172	946	3	-1	0	-1	}	EMPTY	EMPTY
172	948	1	0	0	-1	void	EMPTY	EMPTY
172	949	2	-1	0	-1	set _ common _ sockopts ( int s )	EMPTY	EMPTY
172	950	2	-1	0	-1	{	EMPTY	EMPTY
172	951	3	-1	0	-1	int x = 1 ;	EMPTY	EMPTY
172	953	1	0	0	-1	# ifndef android	EMPTY	EMPTY
172	954	2	-1	0	-1	if ( sflag ) {	EMPTY	EMPTY
172	955	2	-1	0	-1	if ( setsockopt ( s  ipproto _ tcp  tcp _ md5sig	EMPTY	setsockopt ipproto _ tcp
172	956	2	-1	0	-1	& x  sizeof ( x ) ) == - numconst )	EMPTY	EMPTY
172	957	2	-1	0	-1	err ( numconst  null ) ;	EMPTY	err
172	958	2	-1	0	-1	}	EMPTY	EMPTY
172	959	2	-1	0	-1	# endif	EMPTY	EMPTY
172	960	2	-1	0	-1	if ( dflag ) {	dflag	EMPTY
172	961	2	-1	0	-1	if ( setsockopt ( s , sol _ socket , so _ debug ,	EMPTY	setsockopt
172	962	2	-1	0	-1	& x , sizeof ( x ) ) == - 1 )	EMPTY	EMPTY
172	963	2	-1	0	-1	err ( 1 , null ) ;	EMPTY	err
172	964	2	-1	0	-1	}	EMPTY	EMPTY
172	965	2	-1	0	-1	# ifndef android	EMPTY	EMPTY
172	966	2	-1	0	-1	if ( jflag ) {	EMPTY	EMPTY
172	967	2	-1	0	-1	if ( setsockopt ( s  sol _ socket  so _ jumbo	EMPTY	setsockopt
172	968	2	-1	0	-1	& x  sizeof ( x ) ) == - numconst )	EMPTY	EMPTY
172	969	2	-1	0	-1	err ( numconst  null ) ;	EMPTY	err
172	970	2	-1	0	-1	}	EMPTY	EMPTY
172	971	2	-1	0	-1	if ( tflag != - numconst ) {	EMPTY	EMPTY
172	972	2	-1	0	-1	if ( setsockopt ( s  ipproto _ ip  ip _ tos	EMPTY	setsockopt
172	973	2	-1	0	-1	& tflag  sizeof ( tflag ) ) == - numconst )	EMPTY	EMPTY
172	974	2	-1	0	-1	err ( numconst  strlit ) ;	EMPTY	err
172	975	2	-1	0	-1	}	EMPTY	EMPTY
172	976	2	-1	0	-1	# endif	EMPTY	EMPTY
172	977	2	-1	0	-1	if ( iflag ) {	iflag	EMPTY
172	978	2	-1	0	-1	if ( setsockopt ( s , sol _ socket , so _ rcvbuf ,	EMPTY	setsockopt
172	979	2	-1	0	-1	& iflag , sizeof ( iflag ) ) == - 1 )	iflag iflag	EMPTY
172	980	2	-1	0	-1	err ( 1 ,  " set tcp receive buffer size "  ) ;	EMPTY	err
172	981	2	-1	0	-1	}	EMPTY	EMPTY
172	982	3	-1	0	-1	if ( oflag ) {	oflag	EMPTY
172	983	1	0	0	-1	if ( setsockopt ( s , sol _ socket , so _ sndbuf ,	EMPTY	setsockopt
172	984	2	-1	0	-1	& oflag , sizeof ( oflag ) ) == - 1 )	oflag oflag	EMPTY
172	985	2	-1	0	-1	err ( 1 ,  " set tcp send buffer size "  ) ;	EMPTY	err
172	986	2	-1	0	-1	}	EMPTY	EMPTY
172	987	3	-1	0	-1	}	EMPTY	EMPTY
172	989	1	1	0	-1	# ifndef android	EMPTY	EMPTY
172	990	2	-1	0	-1	int	EMPTY	EMPTY
172	991	2	-1	0	-1	map _ tos ( char * s  int * val )	EMPTY	EMPTY
172	992	2	-1	0	-1	{	EMPTY	EMPTY
172	994	2	-1	1	-1	const struct toskeywords {	EMPTY	EMPTY
172	995	2	-1	0	-1	const char * keyword ;	EMPTY	EMPTY
172	996	2	-1	0	-1	int val ;	EMPTY	EMPTY
172	997	2	-1	0	-1	} * t  toskeywords [ ] = {	EMPTY	EMPTY
172	998	2	-1	0	-1	{ strlit  iptos _ dscp _ af11 }	EMPTY	EMPTY
172	999	2	-1	0	-1	{ strlit  iptos _ dscp _ af12 }	EMPTY	EMPTY
172	1000	2	-1	0	-1	{ strlit  iptos _ dscp _ af13 }	EMPTY	EMPTY
172	1001	2	-1	0	-1	{ strlit  iptos _ dscp _ af21 }	EMPTY	EMPTY
172	1002	2	-1	0	-1	{ strlit  iptos _ dscp _ af22 }	EMPTY	EMPTY
172	1003	2	-1	0	-1	{ strlit  iptos _ dscp _ af23 }	EMPTY	EMPTY
172	1004	2	-1	0	-1	{ strlit  iptos _ dscp _ af31 }	EMPTY	EMPTY
172	1005	2	-1	0	-1	{ strlit  iptos _ dscp _ af32 }	EMPTY	EMPTY
172	1006	2	-1	0	-1	{ strlit  iptos _ dscp _ af33 }	EMPTY	EMPTY
172	1007	2	-1	0	-1	{ strlit  iptos _ dscp _ af41 }	EMPTY	EMPTY
172	1008	2	-1	0	-1	{ strlit  iptos _ dscp _ af42 }	EMPTY	EMPTY
172	1009	2	-1	0	-1	{ strlit  iptos _ dscp _ af43 }	EMPTY	EMPTY
172	1010	2	-1	0	-1	{ strlit  iptos _ prec _ critic _ ecp }	EMPTY	EMPTY
172	1011	2	-1	0	-1	{ strlit  iptos _ dscp _ cs0 }	EMPTY	EMPTY
172	1012	2	-1	0	-1	{ strlit  iptos _ dscp _ cs1 }	EMPTY	EMPTY
172	1013	2	-1	0	-1	{ strlit  iptos _ dscp _ cs2 }	EMPTY	EMPTY
172	1014	2	-1	0	-1	{ strlit  iptos _ dscp _ cs3 }	EMPTY	EMPTY
172	1015	2	-1	0	-1	{ strlit  iptos _ dscp _ cs4 }	EMPTY	EMPTY
172	1016	2	-1	0	-1	{ strlit  iptos _ dscp _ cs5 }	EMPTY	EMPTY
172	1017	2	-1	0	-1	{ strlit  iptos _ dscp _ cs6 }	EMPTY	EMPTY
172	1018	2	-1	0	-1	{ strlit  iptos _ dscp _ cs7 }	EMPTY	EMPTY
172	1019	3	-1	0	-1	{ strlit  iptos _ dscp _ ef }	EMPTY	EMPTY
172	1020	1	0	0	-1	{ strlit  iptos _ prec _ internetcontrol }	EMPTY	EMPTY
172	1021	2	-1	0	-1	{ strlit  iptos _ lowdelay }	EMPTY	EMPTY
172	1022	2	-1	0	-1	{ strlit  iptos _ prec _ netcontrol }	EMPTY	EMPTY
172	1023	2	-1	0	-1	{ strlit  iptos _ reliability }	EMPTY	EMPTY
172	1024	2	-1	0	-1	{ strlit  iptos _ throughput }	EMPTY	EMPTY
172	1025	2	-1	0	-1	{ null  - numconst }	EMPTY	EMPTY
172	1026	3	-1	0	-1	} ;	EMPTY	EMPTY
172	1028	1	0	0	-1	for ( t = toskeywords ; t -> keyword != null ; t ++ ) {	EMPTY	EMPTY
172	1029	3	-1	0	-1	if ( strcmp ( s  t -> keyword ) == numconst ) {	EMPTY	strcmp
172	1031	1	0	0	-1	return ( numconst ) ;	EMPTY	EMPTY
172	1032	2	-1	0	-1	}	EMPTY	EMPTY
172	1033	3	-1	0	-1	}	EMPTY	EMPTY
172	1035	1	0	0	-1	return ( numconst ) ;	EMPTY	EMPTY
172	1036	2	-1	0	-1	}	EMPTY	EMPTY
172	1037	3	-1	0	-1	# endif	EMPTY	EMPTY
172	1039	1	0	0	-1	void	EMPTY	EMPTY
172	1040	2	-1	0	-1	help ( void )	EMPTY	EMPTY
172	1041	2	-1	0	-1	{	EMPTY	EMPTY
172	1042	2	-1	0	-1	usage ( 0 )	EMPTY	EMPTY
172	1043	2	-1	0	-1	fprintf ( stderr ,  " \tcommand summary:\n\ 	\t-4	EMPTY
172	1044	2	-1	0	-1	\\ t - numconst use ipv4 \\ n \\	EMPTY	EMPTY
172	1045	2	-1	0	-1	\\ t - numconst use ipv6 \\ n \\	EMPTY	EMPTY
172	1046	2	-1	0	-1	\\ t - d enable the debug socket option \\ n \\	EMPTY	socket
172	1047	2	-1	0	-1	\\ t - d detach from stdin \\ n \\	EMPTY	stdin
172	1048	2	-1	0	-1	\\ t - h this help text \\ n \\	EMPTY	EMPTY
172	1049	2	-1	0	-1	\\ t - i length tcp receive buffer length \\ n \\	EMPTY	EMPTY
172	1050	2	-1	0	-1	\\ t - i secs \\ t delay interval for lines sent  ports scanned \\ n \\	EMPTY	EMPTY
172	1051	2	-1	0	-1	\\ t - k keep inbound sockets open for multiple connects \\ n \\	EMPTY	EMPTY
172	1052	2	-1	0	-1	\\ t - l listen mode  for inbound connects \\ n \\	EMPTY	EMPTY
172	1053	2	-1	0	-1	\\ t - n suppress name / port resolutions \\ n \\	EMPTY	EMPTY
172	1054	2	-1	0	-1	\\ t - o length tcp send buffer length \\ n \\	EMPTY	EMPTY
172	1055	2	-1	0	-1	\\ t - p proxyuser \\ tusername for proxy authentication \\ n \\	EMPTY	EMPTY
172	1056	2	-1	0	-1	\\ t - p port \\ t specify local port for remote connects \\ n \\	EMPTY	EMPTY
172	1057	2	-1	0	-1	\\ t - r randomize remote ports \\ n \\	EMPTY	EMPTY
172	1058	2	-1	0	-1	\\ t - s enable the tcp md5 signature option \\ n \\	EMPTY	EMPTY
172	1059	2	-1	0	-1	\\ t - s addr \\ t local source address \\ n \\	EMPTY	EMPTY
172	1060	2	-1	0	-1	\\ t - t toskeyword \\ tset ip type of service \\ n \\	EMPTY	EMPTY
172	1061	2	-1	0	-1	\\ t - t answer telnet negotiation \\ n \\	EMPTY	EMPTY
172	1062	2	-1	0	-1	\\ t - u use unix domain socket \\ n \\	EMPTY	socket
172	1063	2	-1	0	-1	\\ t - u udp mode \\ n \\	EMPTY	EMPTY
172	1064	2	-1	0	-1	\\ t - v rtable specify alternate routing table \\ n \\	EMPTY	EMPTY
172	1065	2	-1	0	-1	\\ t - v verbose \\ n \\	EMPTY	EMPTY
172	1066	2	-1	0	-1	\\ t - w secs \\ t timeout for connects and final net reads \\ n \\	EMPTY	EMPTY
172	1067	2	-1	0	-1	\\ t - x proto proxy protocol : \\ strlit	EMPTY	EMPTY
172	1068	3	-1	0	-1	\\ t - x addr [ : port ] \\ tspecify proxy address and port \\ n \\	EMPTY	EMPTY
172	1069	1	0	0	-1	\\ t - z zero - i / o mode [ used for scanning ] \\ n port	EMPTY	EMPTY
172	1070	2	-1	0	-1	port numbers can be individual or ranges : lo - hi [ inclusive ] \\ n \);	EMPTY	EMPTY
172	1071	2	-1	0	-1	exit ( 1 )	EMPTY	exit
172	1072	3	-1	0	-1	}	EMPTY	EMPTY
172	1074	1	0	0	-1	void	EMPTY	EMPTY
172	1075	2	-1	0	-1	usage ( int ret )	EMPTY	EMPTY
172	1076	2	-1	0	-1	{	EMPTY	EMPTY
172	1077	2	-1	0	-1	fprintf ( stderr ,	EMPTY	fprintf stderr
172	1078	2	-1	0	-1	" usage: nc [-46ddhklnrstuuvz] [-i length] [-i interval] [-o length]\n "	EMPTY	EMPTY
172	1079	2	-1	0	-1	" \t  [-p proxy _ username] [-p source _ port] [-s source] [-t tos]\n "	EMPTY	EMPTY
172	1080	2	-1	0	-1	" \t  [-v rtable] [-w timeout] [-x proxy _ protocol]\n "	EMPTY	EMPTY
172	1081	2	-1	0	-1	" \t  [-x proxy _ address[:port]] [destination] [port]\n "  )	EMPTY	EMPTY
172	1082	2	-1	0	-1	if ( ret )	EMPTY	EMPTY
172	1083	2	-1	0	-1	exit ( 1 )	EMPTY	exit
172	1084	3	-1	0	-1	}	EMPTY	EMPTY
179	24	1	0	0	-1	void pngapi	EMPTY	EMPTY
179	25	2	-1	0	-1	png _ set _ bkgd ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
179	26	2	-1	0	-1	png _ const _ color _ 16p background )	background	EMPTY
179	27	2	-1	0	-1	{	EMPTY	EMPTY
179	28	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
179	30	1	0	0	0	if ( png _ ptr == null || info _ ptr == null || background == null )	png _ ptr info _ ptr background	EMPTY
179	31	3	-1	0	-1	return	EMPTY	EMPTY
179	33	1	0	0	-1	info _ ptr -> background = * background	info _ ptr background background	EMPTY
179	34	2	-1	0	-1	info _ ptr -> valid |= png _ info _ bkgd ;	info _ ptr valid	EMPTY
179	35	2	-1	0	-1	}	EMPTY	EMPTY
179	36	3	-1	0	-1	# endif	EMPTY	EMPTY
179	38	1	0	0	0	# ifdef png _ chrm _ supported	EMPTY	EMPTY
179	39	2	-1	0	-1	void pngfapi	EMPTY	EMPTY
179	40	2	-1	0	-1	png _ set _ chrm _ fixed ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
179	41	2	-1	0	-1	png _ fixed _ point white _ x  png _ fixed _ point white _ y  png _ fixed _ point red _ x	png _ fixed _ point png _ fixed _ point png _ fixed _ point	EMPTY
179	42	2	-1	0	-1	png _ fixed _ point red _ y  png _ fixed _ point green _ x  png _ fixed _ point green _ y	png _ fixed _ point png _ fixed _ point png _ fixed _ point	EMPTY
179	43	2	-1	0	-1	png _ fixed _ point blue _ x  png _ fixed _ point blue _ y )	png _ fixed _ point png _ fixed _ point	EMPTY
179	44	2	-1	0	-1	{	EMPTY	EMPTY
179	45	3	-1	0	-1	png _ xy xy ;	png _ xy xy	EMPTY
179	47	1	0	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
179	49	1	0	0	0	if ( png _ ptr == null || info _ ptr == null )	png _ ptr info _ ptr	EMPTY
179	50	3	-1	0	-1	return	EMPTY	EMPTY
179	52	1	0	0	-1	xy . redx = red _ x	xy	EMPTY
179	53	2	-1	0	-1	xy . redy = red _ y	xy	EMPTY
179	54	2	-1	0	-1	xy . greenx = green _ x	xy	EMPTY
179	55	2	-1	0	-1	xy . greeny = green _ y	xy	EMPTY
179	56	2	-1	0	-1	xy . bluex = blue _ x	xy	EMPTY
179	57	2	-1	0	-1	xy . bluey = blue _ y	xy	EMPTY
179	58	2	-1	0	-1	xy . whitex = white _ x	xy	EMPTY
179	59	3	-1	0	-1	xy . whitey = white _ y	xy	EMPTY
179	61	1	1	0	1	if ( png _ colorspace _ set _ chromaticities ( png _ ptr  & info _ ptr -> colorspace  & xy	png _ colorspace _ set _ chromaticities png _ ptr info _ ptr colorspace xy	EMPTY
179	62	2	-1	1	-1	numconst ) != numconst )	EMPTY	EMPTY
179	63	3	-1	0	-1	info _ ptr -> colorspace . flags |= png _ colorspace _ from _ chrm ;	info _ ptr colorspace flags	EMPTY
179	65	1	0	0	0	png _ colorspace _ sync _ info ( png _ ptr , info _ ptr )	png _ ptr info _ ptr	EMPTY
179	66	3	-1	0	-1	}	EMPTY	EMPTY
179	68	1	0	0	-1	void pngfapi	EMPTY	EMPTY
179	69	2	-1	0	-1	png _ set _ chrm _ xyz _ fixed ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
179	70	2	-1	0	-1	png _ fixed _ point int _ red _ x  png _ fixed _ point int _ red _ y	png _ fixed _ point png _ fixed _ point	EMPTY
179	71	2	-1	0	-1	png _ fixed _ point int _ red _ z  png _ fixed _ point int _ green _ x	png _ fixed _ point png _ fixed _ point	EMPTY
179	72	2	-1	0	-1	png _ fixed _ point int _ green _ y  png _ fixed _ point int _ green _ z	png _ fixed _ point png _ fixed _ point	EMPTY
179	73	2	-1	0	-1	png _ fixed _ point int _ blue _ x  png _ fixed _ point int _ blue _ y	png _ fixed _ point png _ fixed _ point	EMPTY
179	74	2	-1	0	-1	png _ fixed _ point int _ blue _ z )	png _ fixed _ point	EMPTY
179	75	2	-1	0	-1	{	EMPTY	EMPTY
179	76	3	-1	0	-1	png _ xyz xyz ;	png _ xyz	EMPTY
179	78	1	0	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
179	80	1	0	0	0	if ( png _ ptr == null || info _ ptr == null )	png _ ptr info _ ptr	EMPTY
179	81	3	-1	0	-1	return ;	EMPTY	EMPTY
179	83	1	0	0	-1	xyz . red _ x = int _ red _ x ;	EMPTY	EMPTY
179	84	2	-1	0	-1	xyz . red _ y = int _ red _ y ;	EMPTY	EMPTY
179	85	2	-1	0	-1	xyz . red _ z = int _ red _ z ;	EMPTY	EMPTY
179	86	2	-1	0	-1	xyz . green _ x = int _ green _ x ;	EMPTY	EMPTY
179	87	2	-1	0	-1	xyz . green _ y = int _ green _ y ;	EMPTY	EMPTY
179	88	2	-1	0	-1	xyz . green _ z = int _ green _ z ;	EMPTY	EMPTY
179	89	2	-1	0	-1	xyz . blue _ x = int _ blue _ x ;	EMPTY	EMPTY
179	90	2	-1	0	-1	xyz . blue _ y = int _ blue _ y ;	EMPTY	EMPTY
179	91	3	-1	0	-1	xyz . blue _ z = int _ blue _ z ;	EMPTY	EMPTY
179	93	1	0	0	0	if ( png _ colorspace _ set _ endpoints ( png _ ptr  & info _ ptr -> colorspace	png _ ptr info _ ptr colorspace	EMPTY
179	94	2	-1	0	-1	& xyz  numconst ) != numconst )	EMPTY	EMPTY
179	95	3	-1	0	-1	info _ ptr -> colorspace . flags |= png _ colorspace _ from _ chrm ;	info _ ptr colorspace flags	EMPTY
179	97	1	0	0	0	png _ colorspace _ sync _ info ( png _ ptr  info _ ptr ) ;	png _ ptr info _ ptr	EMPTY
179	98	3	-1	0	-1	}	EMPTY	EMPTY
179	100	1	0	0	0	# ifdef png _ floating _ point _ supported	EMPTY	EMPTY
179	101	2	-1	0	-1	void pngapi	EMPTY	EMPTY
179	102	2	-1	0	-1	png _ set _ chrm ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
179	103	2	-1	0	-1	double white _ x  double white _ y  double red _ x  double red _ y	EMPTY	EMPTY
179	104	2	-1	0	-1	double green _ x  double green _ y  double blue _ x  double blue _ y )	EMPTY	EMPTY
179	105	2	-1	0	-1	{	EMPTY	EMPTY
179	106	2	-1	0	-1	png _ set _ chrm _ fixed ( png _ ptr  info _ ptr	png _ ptr info _ ptr	EMPTY
179	107	2	-1	0	-1	png _ fixed ( png _ ptr  white _ x  strlit )	png _ ptr	EMPTY
179	108	2	-1	0	-1	png _ fixed ( png _ ptr  white _ y  strlit )	png _ ptr	EMPTY
179	109	2	-1	0	-1	png _ fixed ( png _ ptr  red _ x  strlit )	png _ ptr	EMPTY
179	110	2	-1	0	-1	png _ fixed ( png _ ptr  red _ y  strlit )	png _ ptr	EMPTY
179	111	2	-1	0	-1	png _ fixed ( png _ ptr  green _ x  strlit )	png _ ptr	EMPTY
179	112	2	-1	0	-1	png _ fixed ( png _ ptr  green _ y  strlit )	png _ ptr	EMPTY
179	113	2	-1	0	-1	png _ fixed ( png _ ptr  blue _ x  strlit )	png _ ptr	EMPTY
179	114	2	-1	0	-1	png _ fixed ( png _ ptr  blue _ y  strlit ) ) ;	png _ ptr	EMPTY
179	115	3	-1	0	-1	}	EMPTY	EMPTY
179	117	1	1	0	-1	void pngapi	EMPTY	EMPTY
179	118	2	-1	0	-1	png _ set _ chrm _ xyz ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr  double red _ x	png _ ptr info _ ptr	EMPTY
179	119	2	-1	0	-1	double red _ y  double red _ z  double green _ x  double green _ y  double green _ z	EMPTY	EMPTY
179	120	2	-1	0	-1	double blue _ x  double blue _ y  double blue _ z )	EMPTY	EMPTY
179	121	2	-1	0	-1	{	EMPTY	EMPTY
179	122	2	-1	0	-1	png _ set _ chrm _ xyz _ fixed ( png _ ptr  info _ ptr	png _ ptr info _ ptr	EMPTY
179	123	2	-1	0	-1	png _ fixed ( png _ ptr  red _ x  strlit )	png _ ptr	EMPTY
179	124	2	-1	0	-1	png _ fixed ( png _ ptr  red _ y  strlit )	png _ ptr	EMPTY
179	125	2	-1	0	-1	png _ fixed ( png _ ptr  red _ z  strlit )	png _ ptr	EMPTY
179	126	2	-1	0	-1	png _ fixed ( png _ ptr  green _ x  strlit )	png _ ptr	EMPTY
179	127	2	-1	0	-1	png _ fixed ( png _ ptr  green _ y  strlit )	png _ ptr	EMPTY
179	128	2	-1	0	-1	png _ fixed ( png _ ptr  green _ z  strlit )	png _ ptr	EMPTY
179	129	2	-1	0	-1	png _ fixed ( png _ ptr  blue _ x  strlit )	png _ ptr	EMPTY
179	130	2	-1	0	-1	png _ fixed ( png _ ptr  blue _ y  strlit )	png _ ptr	EMPTY
179	131	2	-1	0	-1	png _ fixed ( png _ ptr  blue _ z  strlit ) ) ;	png _ ptr	EMPTY
179	132	2	-1	0	-1	}	EMPTY	EMPTY
179	133	3	-1	1	-1	# endif	EMPTY	EMPTY
179	135	1	1	1	-1	# endif	EMPTY	EMPTY
179	137	1	0	0	0	# ifdef png _ gama _ supported	EMPTY	EMPTY
179	138	2	-1	0	-1	void pngfapi	EMPTY	EMPTY
179	139	2	-1	0	-1	png _ set _ gama _ fixed ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
179	140	2	-1	0	-1	png _ fixed _ point file _ gamma )	png _ fixed _ point	EMPTY
179	141	2	-1	0	-1	{	EMPTY	EMPTY
179	142	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
179	144	1	0	0	0	if ( png _ ptr == null || info _ ptr == null )	png _ ptr info _ ptr	EMPTY
179	145	3	-1	0	-1	return	EMPTY	EMPTY
179	147	1	0	0	0	png _ colorspace _ set _ gamma ( png _ ptr , & info _ ptr -> colorspace , file _ gamma )	png _ ptr info _ ptr colorspace	EMPTY
179	148	2	-1	0	-1	png _ colorspace _ sync _ info ( png _ ptr , info _ ptr )	png _ ptr info _ ptr	EMPTY
179	149	3	-1	0	-1	}	EMPTY	EMPTY
179	151	1	0	0	0	# ifdef png _ floating _ point _ supported	EMPTY	EMPTY
179	152	2	-1	0	-1	void pngapi	EMPTY	EMPTY
179	153	2	-1	0	-1	png _ set _ gama ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr  double file _ gamma )	png _ ptr info _ ptr	EMPTY
179	154	2	-1	0	-1	{	EMPTY	EMPTY
179	155	2	-1	0	-1	png _ set _ gama _ fixed ( png _ ptr , info _ ptr , png _ fixed ( png _ ptr , file _ gamma ,	png _ ptr info _ ptr png _ ptr	EMPTY
179	156	2	-1	0	-1	" png _ set _ gama "  ) )	EMPTY	EMPTY
179	157	2	-1	0	-1	}	EMPTY	EMPTY
179	158	2	-1	0	-1	# endif	EMPTY	EMPTY
179	159	3	-1	0	-1	# endif	EMPTY	EMPTY
179	161	1	0	0	0	# ifdef png _ hist _ supported	EMPTY	EMPTY
179	162	2	-1	0	-1	void pngapi	EMPTY	EMPTY
179	163	2	-1	0	-1	png _ set _ hist ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
179	164	2	-1	0	-1	png _ const _ uint _ 16p hist )	hist	EMPTY
179	165	2	-1	0	-1	{	EMPTY	EMPTY
179	166	3	-1	0	-1	int i ;	EMPTY	EMPTY
179	168	1	0	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
179	170	1	0	0	0	if ( png _ ptr == null || info _ ptr == null )	png _ ptr info _ ptr	EMPTY
179	171	3	-1	0	-1	return	EMPTY	EMPTY
179	173	1	0	0	0	if ( info _ ptr -> num _ palette == 0 || info _ ptr -> num _ palette	info _ ptr num _ palette info _ ptr num _ palette	EMPTY
179	174	2	-1	0	-1	> png _ max _ palette _ length )	EMPTY	EMPTY
179	175	2	-1	0	-1	{	EMPTY	EMPTY
179	176	2	-1	0	-1	png _ warning ( png _ ptr ,	png _ ptr	EMPTY
179	177	3	-1	0	-1	" invalid palette size, hist allocation skipped "  ) ;	palette	EMPTY
179	179	1	0	0	0	return ;	EMPTY	EMPTY
179	180	3	-1	0	-1	}	EMPTY	EMPTY
179	182	1	0	0	0	png _ free _ data ( png _ ptr , info _ ptr , png _ free _ hist , 0 )	png _ free _ data png _ ptr info _ ptr	EMPTY
179	187	1	1	1	-1	info _ ptr -> hist = png _ voidcast ( png _ uint _ 16p  png _ malloc _ warn ( png _ ptr	info _ ptr hist png _ malloc _ warn png _ ptr	EMPTY
179	188	3	-1	0	-1	png _ max _ palette _ length * ( sizeof ( png _ uint _ 16 ) ) ) ) ;	EMPTY	EMPTY
179	190	1	0	0	0	if ( info _ ptr -> hist == null )	info _ ptr hist	EMPTY
179	191	2	-1	0	-1	{	EMPTY	EMPTY
179	192	3	-1	0	-1	png _ warning ( png _ ptr ,  " insufficient memory for hist chunk data "  ) ;	png _ ptr memory	EMPTY
179	194	1	0	0	0	return ;	EMPTY	EMPTY
179	195	3	-1	0	-1	}	EMPTY	EMPTY
179	197	1	0	0	-1	info _ ptr -> free _ me |= png _ free _ hist ;	info _ ptr free _ me	EMPTY
179	199	1	0	0	0	for ( i = 0 ; i < info _ ptr -> num _ palette ; i ++ )	info _ ptr num _ palette	EMPTY
179	200	3	-1	0	-1	info _ ptr -> hist [ i ] = hist [ i ]	info _ ptr hist hist	EMPTY
179	202	1	0	0	-1	info _ ptr -> valid |= png _ info _ hist ;	info _ ptr valid	EMPTY
179	203	2	-1	0	-1	}	EMPTY	EMPTY
179	204	3	-1	0	-1	# endif	EMPTY	EMPTY
179	206	1	0	0	-1	void pngapi	EMPTY	EMPTY
179	207	2	-1	0	-1	png _ set _ ihdr ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
179	208	2	-1	0	-1	png _ uint _ 32 width  png _ uint _ 32 height  int bit _ depth	width height bit _ depth	EMPTY
179	209	2	-1	0	-1	int color _ type  int interlace _ type  int compression _ type	color _ type interlace _ type compression _ type	EMPTY
179	210	2	-1	0	-1	int filter _ type )	filter _ type	EMPTY
179	211	2	-1	0	-1	{	EMPTY	EMPTY
179	212	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
179	214	1	0	0	0	if ( png _ ptr == null || info _ ptr == null )	png _ ptr info _ ptr	EMPTY
179	215	3	-1	0	-1	return ;	EMPTY	EMPTY
179	217	1	0	0	-1	info _ ptr -> width = width ;	info _ ptr width width	EMPTY
179	218	2	-1	0	-1	info _ ptr -> height = height ;	info _ ptr height height	EMPTY
179	219	2	-1	0	-1	info _ ptr -> bit _ depth = ( png _ byte ) bit _ depth ;	info _ ptr bit _ depth bit _ depth	EMPTY
179	220	2	-1	0	-1	info _ ptr -> color _ type = ( png _ byte ) color _ type ;	info _ ptr color _ type color _ type	EMPTY
179	221	2	-1	0	-1	info _ ptr -> compression _ type = ( png _ byte ) compression _ type ;	info _ ptr compression _ type compression _ type	EMPTY
179	222	2	-1	0	-1	info _ ptr -> filter _ type = ( png _ byte ) filter _ type ;	info _ ptr filter _ type filter _ type	EMPTY
179	223	3	-1	0	-1	info _ ptr -> interlace _ type = ( png _ byte ) interlace _ type ;	info _ ptr interlace _ type interlace _ type	EMPTY
179	225	1	0	0	0	png _ check _ ihdr ( png _ ptr  info _ ptr -> width  info _ ptr -> height	png _ check _ ihdr png _ ptr info _ ptr width info _ ptr height	EMPTY
179	226	2	-1	0	-1	info _ ptr -> bit _ depth  info _ ptr -> color _ type  info _ ptr -> interlace _ type	info _ ptr bit _ depth info _ ptr color _ type info _ ptr interlace _ type	EMPTY
179	227	3	-1	0	-1	info _ ptr -> compression _ type  info _ ptr -> filter _ type ) ;	info _ ptr compression _ type info _ ptr filter _ type	EMPTY
179	229	1	0	0	0	if ( info _ ptr -> color _ type == png _ color _ type _ palette )	info _ ptr color _ type	EMPTY
179	230	3	-1	0	-1	info _ ptr -> channels = numconst ;	info _ ptr channels	EMPTY
179	232	1	0	0	0	if ( ( info _ ptr -> color _ type & png _ color _ mask _ color ) != numconst )	info _ ptr color _ type	EMPTY
179	233	3	-1	0	-1	info _ ptr -> channels = numconst ;	info _ ptr channels	EMPTY
179	235	1	0	0	-1	else	EMPTY	EMPTY
179	236	3	-1	0	-1	info _ ptr -> channels = numconst ;	info _ ptr channels	EMPTY
179	238	1	0	0	0	if ( ( info _ ptr -> color _ type & png _ color _ mask _ alpha ) != numconst )	info _ ptr color _ type	EMPTY
179	239	3	-1	0	-1	info _ ptr -> channels ++ ;	info _ ptr channels	EMPTY
179	241	1	0	0	-1	info _ ptr -> pixel _ depth = ( png _ byte ) ( info _ ptr -> channels * info _ ptr -> bit _ depth ) ;	info _ ptr pixel _ depth info _ ptr channels info _ ptr bit _ depth	EMPTY
179	243	1	0	0	-1	info _ ptr -> rowbytes = png _ rowbytes ( info _ ptr -> pixel _ depth  width ) ;	info _ ptr rowbytes info _ ptr pixel _ depth width	EMPTY
179	244	3	-1	0	-1	}	EMPTY	EMPTY
179	246	1	0	0	0	# ifdef png _ offs _ supported	EMPTY	EMPTY
179	247	2	-1	0	-1	void pngapi	EMPTY	EMPTY
179	248	2	-1	0	-1	png _ set _ offs ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
179	249	2	-1	0	-1	png _ int _ 32 offset _ x  png _ int _ 32 offset _ y  int unit _ type )	EMPTY	EMPTY
179	250	2	-1	0	-1	{	EMPTY	EMPTY
179	251	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
179	253	1	0	0	0	if ( png _ ptr == null || info _ ptr == null )	png _ ptr info _ ptr	EMPTY
179	254	3	-1	0	-1	return ;	EMPTY	EMPTY
179	256	1	0	0	-1	info _ ptr -> x _ offset = offset _ x ;	info _ ptr x _ offset	EMPTY
179	257	2	-1	0	-1	info _ ptr -> y _ offset = offset _ y ;	info _ ptr y _ offset	EMPTY
179	258	2	-1	0	-1	info _ ptr -> offset _ unit _ type = ( png _ byte ) unit _ type ;	info _ ptr offset _ unit _ type	EMPTY
179	259	2	-1	0	-1	info _ ptr -> valid |= png _ info _ offs ;	info _ ptr valid	EMPTY
179	260	2	-1	0	-1	}	EMPTY	EMPTY
179	261	3	-1	0	-1	# endif	EMPTY	EMPTY
179	263	1	0	0	0	# ifdef png _ pcal _ supported	EMPTY	EMPTY
179	264	2	-1	0	-1	void pngapi	EMPTY	EMPTY
179	265	2	-1	0	-1	png _ set _ pcal ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
179	266	2	-1	0	-1	png _ const _ charp purpose  png _ int _ 32 x0  png _ int _ 32 x1  int type	EMPTY	EMPTY
179	267	2	-1	0	-1	int nparams  png _ const _ charp units  png _ charpp params )	EMPTY	EMPTY
179	268	2	-1	0	-1	{	EMPTY	EMPTY
179	269	2	-1	0	-1	png _ size _ t length ;	png _ size _ t length	EMPTY
179	270	3	-1	0	-1	int i ;	EMPTY	EMPTY
179	272	1	0	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
179	274	1	0	0	0	if ( png _ ptr == null || info _ ptr == null || purpose == null || units == null	png _ ptr info _ ptr	EMPTY
179	275	2	-1	0	-1	|| ( nparams > numconst && params == null ) )	EMPTY	EMPTY
179	276	3	-1	0	-1	return ;	EMPTY	EMPTY
179	278	1	0	0	-1	length = strlen ( purpose ) + numconst ;	length	EMPTY
179	279	2	-1	0	-1	png _ debug1 ( numconst  strlit	EMPTY	EMPTY
179	280	3	-1	0	-1	( unsigned long ) length ) ;	length	EMPTY
179	285	1	1	1	1	if ( type < 0 || type > 3 )	EMPTY	EMPTY
179	286	3	-1	0	-1	png _ error ( png _ ptr ,  " invalid pcal equation type "  )	png _ error png _ ptr	EMPTY
179	288	1	0	0	0	if ( nparams < 0 || nparams > 255 )	EMPTY	EMPTY
179	289	3	-1	0	-1	png _ error ( png _ ptr ,  " invalid pcal parameter count "  )	png _ error png _ ptr	EMPTY
179	292	1	1	1	1	for ( i = 0 ; i < nparams ; ++ i )	EMPTY	EMPTY
179	293	2	-1	0	-1	{	EMPTY	EMPTY
179	294	2	-1	0	-1	if ( params [ i ] == null ||	EMPTY	EMPTY
179	295	2	-1	0	-1	! png _ check _ fp _ string ( params [ i ] , strlen ( params [ i ] ) ) )	png _ check _ fp _ string	EMPTY
179	296	2	-1	0	-1	png _ error ( png _ ptr ,  " invalid format for pcal parameter "  ) ;	png _ error png _ ptr format	EMPTY
179	297	3	-1	0	-1	}	EMPTY	EMPTY
179	299	1	0	0	-1	info _ ptr -> pcal _ purpose = png _ voidcast ( png _ charp	info _ ptr pcal _ purpose	EMPTY
179	300	3	-1	0	-1	png _ malloc _ warn ( png _ ptr  length ) ) ;	png _ malloc _ warn png _ ptr length	EMPTY
179	302	1	0	0	0	if ( info _ ptr -> pcal _ purpose == null )	info _ ptr pcal _ purpose	EMPTY
179	303	2	-1	0	-1	{	EMPTY	EMPTY
179	304	3	-1	0	-1	png _ warning ( png _ ptr ,  " insufficient memory for pcal purpose "  ) ;	png _ ptr memory	EMPTY
179	306	1	0	0	0	return ;	EMPTY	EMPTY
179	307	3	-1	0	-1	}	EMPTY	EMPTY
179	309	1	0	0	0	memcpy ( info _ ptr -> pcal _ purpose  purpose  length ) ;	info _ ptr pcal _ purpose length	EMPTY
179	311	1	0	0	-1	png _ debug ( numconst  strlit ) ;	EMPTY	EMPTY
179	312	2	-1	0	-1	info _ ptr -> pcal _ x0 = x0	info _ ptr pcal _ x0	EMPTY
179	313	2	-1	0	-1	info _ ptr -> pcal _ x1 = x1	info _ ptr pcal _ x1	EMPTY
179	314	2	-1	0	-1	info _ ptr -> pcal _ type = ( png _ byte ) type	info _ ptr pcal _ type	EMPTY
179	315	3	-1	0	-1	info _ ptr -> pcal _ nparams = ( png _ byte ) nparams	info _ ptr pcal _ nparams	EMPTY
179	317	1	0	0	-1	length = strlen ( units ) + 1	length	EMPTY
179	318	2	-1	0	-1	png _ debug1 ( numconst  strlit	EMPTY	EMPTY
179	319	3	-1	0	-1	( unsigned long ) length ) ;	length	EMPTY
179	321	1	0	0	-1	info _ ptr -> pcal _ units = png _ voidcast ( png _ charp	info _ ptr pcal _ units	EMPTY
179	322	3	-1	0	-1	png _ malloc _ warn ( png _ ptr  length ) ) ;	png _ malloc _ warn png _ ptr length	EMPTY
179	324	1	0	0	0	if ( info _ ptr -> pcal _ units == null )	info _ ptr pcal _ units	EMPTY
179	325	2	-1	0	-1	{	EMPTY	EMPTY
179	326	3	-1	0	-1	png _ warning ( png _ ptr ,  " insufficient memory for pcal units "  ) ;	png _ ptr memory	EMPTY
179	328	1	0	0	0	return ;	EMPTY	EMPTY
179	329	3	-1	0	-1	}	EMPTY	EMPTY
179	331	1	0	0	0	memcpy ( info _ ptr -> pcal _ units  units  length ) ;	info _ ptr pcal _ units length	EMPTY
179	333	1	0	0	-1	info _ ptr -> pcal _ params = png _ voidcast ( png _ charpp  png _ malloc _ warn ( png _ ptr	info _ ptr pcal _ params png _ malloc _ warn png _ ptr	EMPTY
179	334	3	-1	0	-1	( png _ size _ t ) ( ( nparams + numconst ) * ( sizeof ( png _ charp ) ) ) ) ) ;	png _ size _ t	EMPTY
179	336	1	0	0	0	if ( info _ ptr -> pcal _ params == null )	info _ ptr pcal _ params	EMPTY
179	337	2	-1	0	-1	{	EMPTY	EMPTY
179	338	3	-1	0	-1	png _ warning ( png _ ptr ,  " insufficient memory for pcal params "  ) ;	png _ ptr memory	EMPTY
179	340	1	0	0	0	return ;	EMPTY	EMPTY
179	341	3	-1	0	-1	}	EMPTY	EMPTY
179	343	1	0	0	0	memset ( info _ ptr -> pcal _ params  numconst  ( nparams + numconst ) * ( sizeof ( png _ charp ) ) ) ;	info _ ptr pcal _ params	EMPTY
179	345	1	0	0	0	for ( i = 0 ; i < nparams ; i ++ )	EMPTY	EMPTY
179	346	2	-1	0	-1	{	EMPTY	EMPTY
179	347	2	-1	0	-1	length = strlen ( params [ i ] ) + 1 ;	length	EMPTY
179	348	2	-1	0	-1	png _ debug2 ( 3 ,  " allocating parameter %d for info (%lu bytes) "  , i ,	EMPTY	EMPTY
179	349	3	-1	0	-1	( unsigned long ) length ) ;	length	EMPTY
179	351	1	0	0	-1	info _ ptr -> pcal _ params [ i ] = ( png _ charp ) png _ malloc _ warn ( png _ ptr , length ) ;	info _ ptr pcal _ params png _ malloc _ warn png _ ptr length	EMPTY
179	353	1	0	0	0	if ( info _ ptr -> pcal _ params [ i ] == null )	info _ ptr pcal _ params	EMPTY
179	354	2	-1	0	-1	{	EMPTY	EMPTY
179	355	3	-1	0	-1	png _ warning ( png _ ptr ,  " insufficient memory for pcal parameter "  ) ;	png _ ptr memory	EMPTY
179	357	1	0	0	0	return ;	EMPTY	EMPTY
179	358	3	-1	0	-1	}	EMPTY	EMPTY
179	360	1	0	0	0	memcpy ( info _ ptr -> pcal _ params [ i ] , params [ i ] , length ) ;	info _ ptr pcal _ params length	EMPTY
179	361	3	-1	0	-1	}	EMPTY	EMPTY
179	363	1	0	0	-1	info _ ptr -> valid |= png _ info _ pcal ;	info _ ptr valid	EMPTY
179	364	2	-1	0	-1	info _ ptr -> free _ me |= png _ free _ pcal ;	info _ ptr free _ me	EMPTY
179	365	2	-1	0	-1	}	EMPTY	EMPTY
179	366	3	-1	0	-1	# endif	EMPTY	EMPTY
179	368	1	0	0	0	# ifdef png _ scal _ supported	EMPTY	EMPTY
179	369	2	-1	0	-1	void pngapi	EMPTY	EMPTY
179	370	2	-1	0	-1	png _ set _ scal _ s ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
179	371	2	-1	0	-1	int unit  png _ const _ charp swidth  png _ const _ charp sheight )	unit swidth	EMPTY
179	372	2	-1	0	-1	{	EMPTY	EMPTY
179	373	3	-1	0	-1	png _ size _ t lengthw = numconst  lengthh = numconst ;	png _ size _ t	EMPTY
179	375	1	0	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
179	377	1	0	0	0	if ( png _ ptr == null || info _ ptr == null )	png _ ptr info _ ptr	EMPTY
179	378	3	-1	0	-1	return ;	EMPTY	EMPTY
179	383	1	1	1	1	if ( unit != 1 && unit != 2 )	unit unit	EMPTY
179	384	3	-1	0	-1	png _ error ( png _ ptr ,  " invalid scal unit "  )	png _ error png _ ptr	EMPTY
179	386	1	1	0	1	if ( swidth == null || ( lengthw = strlen ( swidth ) ) == numconst ||	swidth swidth	EMPTY
179	387	2	-1	1	-1	swidth [ numconst ] == numconst || ! png _ check _ fp _ string ( swidth  lengthw ) )	swidth png _ check _ fp _ string swidth	EMPTY
179	388	3	-1	0	-1	png _ error ( png _ ptr  strlit ) ;	png _ error png _ ptr	EMPTY
179	390	1	1	0	1	if ( sheight == null || ( lengthh = strlen ( sheight ) ) == numconst ||	EMPTY	EMPTY
179	391	2	-1	1	-1	sheight [ numconst ] == numconst || ! png _ check _ fp _ string ( sheight  lengthh ) )	png _ check _ fp _ string	EMPTY
179	392	3	-1	0	-1	png _ error ( png _ ptr  strlit ) ;	png _ error png _ ptr	EMPTY
179	394	1	0	0	-1	info _ ptr -> scal _ unit = ( png _ byte ) unit	info _ ptr scal _ unit unit	EMPTY
179	396	1	0	0	-1	++ lengthw	EMPTY	EMPTY
179	398	1	0	0	-1	png _ debug1 ( numconst  strlit  ( unsigned int ) lengthw ) ;	EMPTY	EMPTY
179	400	1	0	0	-1	info _ ptr -> scal _ s _ width = png _ voidcast ( png _ charp	info _ ptr scal _ s _ width	EMPTY
179	401	3	-1	0	-1	png _ malloc _ warn ( png _ ptr  lengthw ) ) ;	png _ malloc _ warn png _ ptr	EMPTY
179	403	1	0	0	0	if ( info _ ptr -> scal _ s _ width == null )	info _ ptr scal _ s _ width	EMPTY
179	404	2	-1	0	-1	{	EMPTY	EMPTY
179	405	3	-1	0	-1	png _ warning ( png _ ptr ,  " memory allocation failed while processing scal "  ) ;	png _ ptr	EMPTY
179	407	1	0	0	0	return ;	EMPTY	EMPTY
179	408	3	-1	0	-1	}	EMPTY	EMPTY
179	410	1	0	0	0	memcpy ( info _ ptr -> scal _ s _ width  swidth  lengthw ) ;	info _ ptr scal _ s _ width swidth	EMPTY
179	412	1	0	0	-1	++ lengthh	EMPTY	EMPTY
179	414	1	0	0	-1	png _ debug1 ( numconst  strlit  ( unsigned int ) lengthh ) ;	EMPTY	EMPTY
179	416	1	0	0	-1	info _ ptr -> scal _ s _ height = png _ voidcast ( png _ charp	info _ ptr scal _ s _ height	EMPTY
179	417	3	-1	0	-1	png _ malloc _ warn ( png _ ptr  lengthh ) ) ;	png _ malloc _ warn png _ ptr	EMPTY
179	419	1	0	0	0	if ( info _ ptr -> scal _ s _ height == null )	info _ ptr scal _ s _ height	EMPTY
179	420	2	-1	0	-1	{	EMPTY	EMPTY
179	421	2	-1	0	-1	png _ free ( png _ ptr , info _ ptr -> scal _ s _ width ) ;	png _ free png _ ptr info _ ptr scal _ s _ width	EMPTY
179	422	3	-1	0	-1	info _ ptr -> scal _ s _ width = null ;	info _ ptr scal _ s _ width	EMPTY
179	424	1	0	0	-1	png _ warning ( png _ ptr ,  " memory allocation failed while processing scal "  ) ;	png _ ptr	EMPTY
179	426	1	0	0	0	return ;	EMPTY	EMPTY
179	427	3	-1	0	-1	}	EMPTY	EMPTY
179	429	1	0	0	0	memcpy ( info _ ptr -> scal _ s _ height  sheight  lengthh ) ;	info _ ptr scal _ s _ height	EMPTY
179	431	1	0	0	-1	info _ ptr -> valid |= png _ info _ scal ;	info _ ptr valid	EMPTY
179	432	2	-1	0	-1	info _ ptr -> free _ me |= png _ free _ scal ;	info _ ptr free _ me	EMPTY
179	433	3	-1	0	-1	}	EMPTY	EMPTY
179	435	1	0	0	0	# ifdef png _ floating _ point _ supported	EMPTY	EMPTY
179	436	2	-1	0	-1	void pngapi	EMPTY	EMPTY
179	437	2	-1	0	-1	png _ set _ scal ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr  int unit	png _ ptr info _ ptr unit	EMPTY
179	438	2	-1	0	-1	double width  double height )	width height	EMPTY
179	439	2	-1	0	-1	{	EMPTY	EMPTY
179	440	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
179	443	1	1	1	1	if ( width <= numconst )	width	EMPTY
179	444	3	-1	0	-1	png _ warning ( png _ ptr  strlit ) ;	png _ ptr	EMPTY
179	446	1	0	0	0	if ( height <= numconst )	height	EMPTY
179	447	3	-1	0	-1	png _ warning ( png _ ptr  strlit ) ;	png _ ptr	EMPTY
179	449	1	1	0	-1	else	EMPTY	EMPTY
179	450	2	-1	0	-1	{	EMPTY	EMPTY
179	452	2	-1	1	-1	char swidth [ png _ scal _ max _ digits + 1 ] ;	swidth	EMPTY
179	453	3	-1	0	-1	char sheight [ png _ scal _ max _ digits + 1 ] ;	EMPTY	EMPTY
179	455	1	0	0	0	png _ ascii _ from _ fp ( png _ ptr , swidth , ( sizeof swidth ) , width ,	png _ ptr swidth swidth width	EMPTY
179	456	2	-1	0	-1	png _ scal _ precision )	EMPTY	EMPTY
179	457	2	-1	0	-1	png _ ascii _ from _ fp ( png _ ptr , sheight , ( sizeof sheight ) , height ,	png _ ptr height	EMPTY
179	458	3	-1	0	-1	png _ scal _ precision )	EMPTY	EMPTY
179	460	1	0	0	0	png _ set _ scal _ s ( png _ ptr , info _ ptr , unit , swidth , sheight )	png _ ptr info _ ptr unit swidth	EMPTY
179	461	2	-1	0	-1	}	EMPTY	EMPTY
179	462	2	-1	0	-1	}	EMPTY	EMPTY
179	463	3	-1	0	-1	# endif	EMPTY	EMPTY
179	465	1	0	0	0	# ifdef png _ fixed _ point _ supported	EMPTY	EMPTY
179	466	2	-1	0	-1	void pngapi	EMPTY	EMPTY
179	467	2	-1	0	-1	png _ set _ scal _ fixed ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr  int unit	png _ ptr info _ ptr unit	EMPTY
179	468	2	-1	0	-1	png _ fixed _ point width  png _ fixed _ point height )	png _ fixed _ point width png _ fixed _ point height	EMPTY
179	469	2	-1	0	-1	{	EMPTY	EMPTY
179	470	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
179	473	1	1	1	1	if ( width <= numconst )	width	EMPTY
179	474	3	-1	0	-1	png _ warning ( png _ ptr  strlit ) ;	png _ ptr	EMPTY
179	476	1	0	0	0	if ( height <= numconst )	height	EMPTY
179	477	3	-1	0	-1	png _ warning ( png _ ptr  strlit ) ;	png _ ptr	EMPTY
179	479	1	1	0	-1	else	EMPTY	EMPTY
179	480	2	-1	0	-1	{	EMPTY	EMPTY
179	482	2	-1	1	-1	char swidth [ png _ scal _ max _ digits + 1 ] ;	swidth	EMPTY
179	483	3	-1	0	-1	char sheight [ png _ scal _ max _ digits + 1 ] ;	EMPTY	EMPTY
179	485	1	0	0	0	png _ ascii _ from _ fixed ( png _ ptr , swidth , ( sizeof swidth ) , width )	png _ ptr swidth swidth width	EMPTY
179	486	3	-1	0	-1	png _ ascii _ from _ fixed ( png _ ptr , sheight , ( sizeof sheight ) , height )	png _ ptr height	EMPTY
179	488	1	0	0	0	png _ set _ scal _ s ( png _ ptr , info _ ptr , unit , swidth , sheight )	png _ ptr info _ ptr unit swidth	EMPTY
179	489	2	-1	0	-1	}	EMPTY	EMPTY
179	490	2	-1	0	-1	}	EMPTY	EMPTY
179	491	2	-1	0	-1	# endif	EMPTY	EMPTY
179	492	3	-1	0	-1	# endif	EMPTY	EMPTY
179	494	1	0	0	0	# ifdef png _ phys _ supported	EMPTY	EMPTY
179	495	2	-1	0	-1	void pngapi	EMPTY	EMPTY
179	496	2	-1	0	-1	png _ set _ phys ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
179	497	2	-1	0	-1	png _ uint _ 32 res _ x  png _ uint _ 32 res _ y  int unit _ type )	EMPTY	EMPTY
179	498	2	-1	0	-1	{	EMPTY	EMPTY
179	499	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
179	501	1	0	0	0	if ( png _ ptr == null || info _ ptr == null )	png _ ptr info _ ptr	EMPTY
179	502	3	-1	0	-1	return ;	EMPTY	EMPTY
179	504	1	0	0	-1	info _ ptr -> x _ pixels _ per _ unit = res _ x ;	info _ ptr x _ pixels _ per _ unit	EMPTY
179	505	2	-1	0	-1	info _ ptr -> y _ pixels _ per _ unit = res _ y ;	info _ ptr y _ pixels _ per _ unit	EMPTY
179	506	2	-1	0	-1	info _ ptr -> phys _ unit _ type = ( png _ byte ) unit _ type ;	info _ ptr phys _ unit _ type	EMPTY
179	507	2	-1	0	-1	info _ ptr -> valid |= png _ info _ phys ;	info _ ptr valid	EMPTY
179	508	2	-1	0	-1	}	EMPTY	EMPTY
179	509	3	-1	0	-1	# endif	EMPTY	EMPTY
179	511	1	0	0	-1	void pngapi	EMPTY	EMPTY
179	512	2	-1	0	-1	png _ set _ plte ( png _ structrp png _ ptr  png _ inforp info _ ptr	png _ structrp png _ ptr info _ ptr	EMPTY
179	513	2	-1	0	-1	png _ const _ colorp palette  int num _ palette )	palette num _ palette	EMPTY
179	514	3	-1	0	-1	{	EMPTY	EMPTY
179	516	1	0	0	0	png _ uint _ 32 max _ palette _ length ;	EMPTY	EMPTY
179	518	1	0	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
179	520	1	0	0	0	if ( png _ ptr == null || info _ ptr == null )	png _ ptr info _ ptr	EMPTY
179	521	3	-1	0	-1	return ;	EMPTY	EMPTY
179	523	1	0	0	-1	max _ palette _ length = ( info _ ptr -> color _ type == png _ color _ type _ palette ) ?	info _ ptr color _ type	EMPTY
179	524	3	-1	0	-1	( numconst << info _ ptr -> bit _ depth ) : png _ max _ palette _ length ;	info _ ptr bit _ depth	EMPTY
179	526	1	0	0	0	if ( num _ palette < numconst || num _ palette > ( int ) max _ palette _ length )	num _ palette num _ palette	EMPTY
179	527	2	-1	0	-1	{	EMPTY	EMPTY
179	528	2	-1	0	-1	if ( info _ ptr -> color _ type == png _ color _ type _ palette )	info _ ptr color _ type	EMPTY
179	529	3	-1	0	-1	png _ error ( png _ ptr  strlit ) ;	png _ error png _ ptr	EMPTY
179	531	1	0	0	-1	else	EMPTY	EMPTY
179	532	2	-1	0	-1	{	EMPTY	EMPTY
179	533	3	-1	0	-1	png _ warning ( png _ ptr  strlit ) ;	png _ ptr	EMPTY
179	535	1	0	0	0	return ;	EMPTY	EMPTY
179	536	2	-1	0	-1	}	EMPTY	EMPTY
179	537	3	-1	0	-1	}	EMPTY	EMPTY
179	539	1	0	0	0	if ( ( num _ palette > numconst && palette == null ) ||	num _ palette palette	EMPTY
179	540	2	-1	0	-1	( num _ palette == numconst	num _ palette	EMPTY
179	541	2	-1	0	-1	# ifdef png _ mng _ features _ supported	EMPTY	EMPTY
179	542	2	-1	0	-1	&& ( png _ ptr -> mng _ features _ permitted & png _ flag _ mng _ empty _ plte ) == numconst	png _ ptr mng _ features _ permitted	EMPTY
179	543	2	-1	0	-1	# endif	EMPTY	EMPTY
179	544	2	-1	0	-1	) )	EMPTY	EMPTY
179	545	2	-1	0	-1	{	EMPTY	EMPTY
179	546	2	-1	0	-1	png _ error ( png _ ptr  strlit ) ;	png _ error png _ ptr	EMPTY
179	547	3	-1	0	-1	}	EMPTY	EMPTY
179	556	1	1	1	1	png _ free _ data ( png _ ptr , info _ ptr , png _ free _ plte , 0 )	png _ free _ data png _ ptr info _ ptr	EMPTY
179	562	1	1	1	-1	png _ ptr -> palette = png _ voidcast ( png _ colorp  png _ calloc ( png _ ptr	png _ ptr palette png _ calloc png _ ptr	EMPTY
179	563	3	-1	0	-1	png _ max _ palette _ length * ( sizeof ( png _ color ) ) ) ) ;	png _ color	EMPTY
179	565	1	0	0	0	if ( num _ palette > numconst )	num _ palette	EMPTY
179	566	2	-1	0	-1	memcpy ( png _ ptr -> palette  palette  num _ palette * ( sizeof ( png _ color ) ) ) ;	png _ ptr palette palette num _ palette png _ color	EMPTY
179	567	2	-1	0	-1	info _ ptr -> palette = png _ ptr -> palette	info _ ptr palette png _ ptr palette	EMPTY
179	568	3	-1	0	-1	info _ ptr -> num _ palette = png _ ptr -> num _ palette = ( png _ uint _ 16 ) num _ palette	info _ ptr num _ palette png _ ptr num _ palette num _ palette	EMPTY
179	570	1	0	0	-1	info _ ptr -> free _ me |= png _ free _ plte ;	info _ ptr free _ me	EMPTY
179	572	1	0	0	-1	info _ ptr -> valid |= png _ info _ plte ;	info _ ptr valid	EMPTY
179	573	3	-1	0	-1	}	EMPTY	EMPTY
179	575	1	0	0	0	# ifdef png _ sbit _ supported	EMPTY	EMPTY
179	576	2	-1	0	-1	void pngapi	EMPTY	EMPTY
179	577	2	-1	0	-1	png _ set _ sbit ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
179	578	2	-1	0	-1	png _ const _ color _ 8p sig _ bit )	sig _ bit	EMPTY
179	579	2	-1	0	-1	{	EMPTY	EMPTY
179	580	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
179	582	1	0	0	0	if ( png _ ptr == null || info _ ptr == null || sig _ bit == null )	png _ ptr info _ ptr sig _ bit	EMPTY
179	583	3	-1	0	-1	return ;	EMPTY	EMPTY
179	585	1	0	0	-1	info _ ptr -> sig _ bit = * sig _ bit ;	info _ ptr sig _ bit sig _ bit	EMPTY
179	586	2	-1	0	-1	info _ ptr -> valid |= png _ info _ sbit ;	info _ ptr valid	EMPTY
179	587	2	-1	0	-1	}	EMPTY	EMPTY
179	588	3	-1	0	-1	# endif	EMPTY	EMPTY
179	590	1	0	0	0	# ifdef png _ srgb _ supported	EMPTY	EMPTY
179	591	2	-1	0	-1	void pngapi	EMPTY	EMPTY
179	592	2	-1	0	-1	png _ set _ srgb ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr  int srgb _ intent )	png _ ptr info _ ptr	EMPTY
179	593	2	-1	0	-1	{	EMPTY	EMPTY
179	594	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
179	596	1	0	0	0	if ( png _ ptr == null || info _ ptr == null )	png _ ptr info _ ptr	EMPTY
179	597	3	-1	0	-1	return ;	EMPTY	EMPTY
179	599	1	0	0	-1	( void ) png _ colorspace _ set _ srgb ( png _ ptr  & info _ ptr -> colorspace  srgb _ intent ) ;	png _ ptr info _ ptr colorspace	EMPTY
179	600	2	-1	0	-1	png _ colorspace _ sync _ info ( png _ ptr  info _ ptr ) ;	png _ ptr info _ ptr	EMPTY
179	601	3	-1	0	-1	}	EMPTY	EMPTY
179	603	1	0	0	-1	void pngapi	EMPTY	EMPTY
179	604	2	-1	0	-1	png _ set _ srgb _ gama _ and _ chrm ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
179	605	2	-1	0	-1	int srgb _ intent )	EMPTY	EMPTY
179	606	2	-1	0	-1	{	EMPTY	EMPTY
179	607	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
179	609	1	0	0	0	if ( png _ ptr == null || info _ ptr == null )	png _ ptr info _ ptr	EMPTY
179	610	3	-1	0	-1	return ;	EMPTY	EMPTY
179	612	1	1	0	1	if ( png _ colorspace _ set _ srgb ( png _ ptr  & info _ ptr -> colorspace	png _ ptr info _ ptr colorspace	EMPTY
179	613	2	-1	0	-1	srgb _ intent ) != numconst )	EMPTY	EMPTY
179	614	2	-1	0	-1	{	EMPTY	EMPTY
179	616	2	-1	1	-1	info _ ptr -> colorspace . flags |=	info _ ptr colorspace flags	EMPTY
179	617	2	-1	0	-1	png _ colorspace _ from _ gama | png _ colorspace _ from _ chrm ;	EMPTY	EMPTY
179	618	3	-1	0	-1	}	EMPTY	EMPTY
179	620	1	1	0	1	png _ colorspace _ sync _ info ( png _ ptr  info _ ptr ) ;	png _ ptr info _ ptr	EMPTY
179	621	2	-1	0	-1	}	EMPTY	EMPTY
179	622	3	-1	1	-1	# endif	EMPTY	EMPTY
179	625	1	0	0	0	# ifdef png _ iccp _ supported	EMPTY	EMPTY
179	626	2	-1	0	-1	void pngapi	EMPTY	EMPTY
179	627	2	-1	0	-1	png _ set _ iccp ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
179	628	2	-1	0	-1	png _ const _ charp name  int compression _ type	name compression _ type	EMPTY
179	629	2	-1	0	-1	png _ const _ bytep profile  png _ uint _ 32 proflen )	EMPTY	EMPTY
179	630	2	-1	0	-1	{	EMPTY	EMPTY
179	631	2	-1	0	-1	png _ charp new _ iccp _ name ;	EMPTY	EMPTY
179	632	2	-1	0	-1	png _ bytep new _ iccp _ profile ;	EMPTY	EMPTY
179	633	3	-1	0	-1	png _ size _ t length ;	png _ size _ t length	EMPTY
179	635	1	0	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
179	637	1	0	0	0	if ( png _ ptr == null || info _ ptr == null || name == null || profile == null )	png _ ptr info _ ptr name	EMPTY
179	638	3	-1	0	-1	return	EMPTY	EMPTY
179	640	1	0	0	0	if ( compression _ type != png _ compression _ type _ base )	compression _ type	EMPTY
179	641	3	-1	0	-1	png _ app _ error ( png _ ptr ,  " invalid iccp compression method "  )	png _ ptr compression	EMPTY
179	649	1	1	1	-1	{	EMPTY	EMPTY
179	650	2	-1	0	-1	int result = png _ colorspace _ set _ icc ( png _ ptr , & info _ ptr -> colorspace , name ,	png _ ptr info _ ptr colorspace name	EMPTY
179	651	3	-1	0	-1	proflen , profile , info _ ptr -> color _ type ) ;	info _ ptr color _ type	EMPTY
179	653	1	0	0	0	png _ colorspace _ sync _ info ( png _ ptr , info _ ptr )	png _ ptr info _ ptr	EMPTY
179	656	1	1	1	1	if ( result == 0 )	EMPTY	EMPTY
179	657	3	-1	0	-1	return	EMPTY	EMPTY
179	660	1	1	1	-1	info _ ptr -> colorspace . flags |=	info _ ptr colorspace flags	EMPTY
179	661	2	-1	0	-1	png _ colorspace _ from _ gama | png _ colorspace _ from _ chrm ;	EMPTY	EMPTY
179	662	3	-1	0	-1	}	EMPTY	EMPTY
179	664	1	0	0	-1	length = strlen ( name ) + numconst ;	length name	EMPTY
179	665	3	-1	0	-1	new _ iccp _ name = png _ voidcast ( png _ charp  png _ malloc _ warn ( png _ ptr  length ) ) ;	png _ malloc _ warn png _ ptr length	EMPTY
179	667	1	0	0	0	if ( new _ iccp _ name == null )	EMPTY	EMPTY
179	668	2	-1	0	-1	{	EMPTY	EMPTY
179	669	3	-1	0	-1	png _ benign _ error ( png _ ptr  strlit ) ;	png _ benign _ error png _ ptr	EMPTY
179	671	1	0	0	0	return ;	EMPTY	EMPTY
179	672	3	-1	0	-1	}	EMPTY	EMPTY
179	674	1	0	0	0	memcpy ( new _ iccp _ name  name  length ) ;	name length	EMPTY
179	675	2	-1	0	-1	new _ iccp _ profile = png _ voidcast ( png _ bytep	EMPTY	EMPTY
179	676	3	-1	0	-1	png _ malloc _ warn ( png _ ptr  proflen ) ) ;	png _ malloc _ warn png _ ptr	EMPTY
179	678	1	0	0	0	if ( new _ iccp _ profile == null )	EMPTY	EMPTY
179	679	2	-1	0	-1	{	EMPTY	EMPTY
179	680	2	-1	0	-1	png _ free ( png _ ptr  new _ iccp _ name ) ;	png _ free png _ ptr	EMPTY
179	681	2	-1	0	-1	png _ benign _ error ( png _ ptr	png _ benign _ error png _ ptr	EMPTY
179	682	3	-1	0	-1	strlit ) ;	EMPTY	EMPTY
179	684	1	0	0	0	return ;	EMPTY	EMPTY
179	685	3	-1	0	-1	}	EMPTY	EMPTY
179	687	1	0	0	0	memcpy ( new _ iccp _ profile  profile  proflen ) ;	EMPTY	EMPTY
179	689	1	0	0	0	png _ free _ data ( png _ ptr  info _ ptr  png _ free _ iccp  numconst ) ;	png _ free _ data png _ ptr info _ ptr	EMPTY
179	691	1	0	0	-1	info _ ptr -> iccp _ proflen = proflen ;	info _ ptr iccp _ proflen	EMPTY
179	692	2	-1	0	-1	info _ ptr -> iccp _ name = new _ iccp _ name ;	info _ ptr iccp _ name	EMPTY
179	693	2	-1	0	-1	info _ ptr -> iccp _ profile = new _ iccp _ profile ;	info _ ptr iccp _ profile	EMPTY
179	694	2	-1	0	-1	info _ ptr -> free _ me |= png _ free _ iccp ;	info _ ptr free _ me	EMPTY
179	695	2	-1	0	-1	info _ ptr -> valid |= png _ info _ iccp ;	info _ ptr valid	EMPTY
179	696	2	-1	0	-1	}	EMPTY	EMPTY
179	697	3	-1	0	-1	# endif	EMPTY	EMPTY
179	699	1	0	0	0	# ifdef png _ text _ supported	EMPTY	EMPTY
179	700	2	-1	0	-1	void pngapi	EMPTY	EMPTY
179	701	2	-1	0	-1	png _ set _ text ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
179	702	2	-1	0	-1	png _ const _ textp text _ ptr  int num _ text )	text _ ptr num _ text	EMPTY
179	703	2	-1	0	-1	{	EMPTY	EMPTY
179	704	2	-1	0	-1	int ret ;	EMPTY	EMPTY
179	705	3	-1	0	-1	ret = png _ set _ text _ 2 ( png _ ptr  info _ ptr  text _ ptr  num _ text ) ;	png _ set _ text _ 2 png _ ptr info _ ptr text _ ptr num _ text	EMPTY
179	707	1	0	0	0	if ( ret != numconst )	EMPTY	EMPTY
179	708	2	-1	0	-1	png _ error ( png _ ptr  strlit ) ;	png _ error png _ ptr	EMPTY
179	709	3	-1	0	-1	}	EMPTY	EMPTY
179	711	1	0	0	-1	int	EMPTY	EMPTY
179	712	2	-1	0	-1	png _ set _ text _ 2 ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ set _ text _ 2 png _ ptr info _ ptr	EMPTY
179	713	2	-1	0	-1	png _ const _ textp text _ ptr  int num _ text )	text _ ptr num _ text	EMPTY
179	714	2	-1	0	-1	{	EMPTY	EMPTY
179	715	3	-1	0	-1	int i ;	EMPTY	EMPTY
179	717	1	0	0	-1	png _ debug1 ( numconst  strlit  png _ ptr == null ? numconst :	png _ ptr	EMPTY
179	718	3	-1	0	-1	( unsigned long ) png _ ptr -> chunk _ name ) ;	png _ ptr chunk _ name	EMPTY
179	720	1	0	0	0	if ( png _ ptr == null || info _ ptr == null || num _ text <= 0 || text _ ptr == null )	png _ ptr info _ ptr num _ text text _ ptr	EMPTY
179	721	3	-1	0	-1	return ( 0 )	EMPTY	EMPTY
179	728	1	1	1	1	if ( num _ text > info _ ptr -> max _ text - info _ ptr -> num _ text )	num _ text info _ ptr max _ text info _ ptr num _ text	EMPTY
179	729	2	-1	0	-1	{	EMPTY	EMPTY
179	730	2	-1	0	-1	int old _ num _ text = info _ ptr -> num _ text ;	info _ ptr num _ text	EMPTY
179	731	2	-1	0	-1	int max _ text ;	max _ text	EMPTY
179	732	3	-1	0	-1	png _ textp new _ text = null ;	EMPTY	EMPTY
179	735	1	1	1	-1	max _ text = old _ num _ text	max _ text	EMPTY
179	736	2	-1	0	-1	if ( num _ text <= int _ max - max _ text )	num _ text max _ text	EMPTY
179	737	2	-1	0	-1	{	EMPTY	EMPTY
179	738	3	-1	0	-1	max _ text += num _ text	max _ text num _ text	EMPTY
179	741	1	1	1	1	if ( max _ text < int _ max - numconst )	max _ text	EMPTY
179	742	3	-1	0	-1	max _ text = ( max _ text + numconst ) & ~ numconst ;	max _ text max _ text	EMPTY
179	744	1	0	0	-1	else	EMPTY	EMPTY
179	745	3	-1	0	-1	max _ text = int _ max ;	max _ text	EMPTY
179	750	1	1	1	-1	new _ text = png _ voidcast ( png _ textp  png _ realloc _ array ( png _ ptr	png _ realloc _ array png _ ptr	EMPTY
179	751	2	-1	0	-1	info _ ptr -> text  old _ num _ text  max _ text - old _ num _ text	info _ ptr text max _ text	EMPTY
179	752	2	-1	0	-1	sizeof * new _ text ) ) ;	EMPTY	EMPTY
179	753	3	-1	0	-1	}	EMPTY	EMPTY
179	755	1	0	0	0	if ( new _ text == null )	EMPTY	EMPTY
179	756	2	-1	0	-1	{	EMPTY	EMPTY
179	757	2	-1	0	-1	png _ chunk _ report ( png _ ptr  strlit	png _ ptr	EMPTY
179	758	3	-1	0	-1	png _ chunk _ write _ error ) ;	EMPTY	EMPTY
179	760	1	0	0	0	return numconst ;	EMPTY	EMPTY
179	761	3	-1	0	-1	}	EMPTY	EMPTY
179	763	1	0	0	0	png _ free ( png _ ptr  info _ ptr -> text ) ;	png _ free png _ ptr info _ ptr text	EMPTY
179	765	1	0	0	-1	info _ ptr -> text = new _ text ;	info _ ptr text	EMPTY
179	766	2	-1	0	-1	info _ ptr -> free _ me |= png _ free _ text ;	info _ ptr free _ me	EMPTY
179	767	3	-1	0	-1	info _ ptr -> max _ text = max _ text ;	info _ ptr max _ text max _ text	EMPTY
179	770	1	1	1	-1	png _ debug1 ( numconst  strlit  max _ text ) ;	max _ text	EMPTY
179	771	3	-1	0	-1	}	EMPTY	EMPTY
179	773	1	0	0	0	for ( i = numconst ; i < num _ text ; i ++ )	num _ text	EMPTY
179	774	2	-1	0	-1	{	EMPTY	EMPTY
179	775	2	-1	0	-1	size _ t text _ length  key _ len ;	text _ length	EMPTY
179	776	2	-1	0	-1	size _ t lang _ len  lang _ key _ len ;	EMPTY	EMPTY
179	777	3	-1	0	-1	png _ textp textp = & ( info _ ptr -> text [ info _ ptr -> num _ text ] ) ;	info _ ptr text info _ ptr num _ text	EMPTY
179	779	1	0	0	0	if ( text _ ptr [ i ] . key == null )	text _ ptr key	EMPTY
179	780	3	-1	0	-1	continue ;	EMPTY	EMPTY
179	782	1	0	0	0	if ( text _ ptr [ i ] . compression < png _ text _ compression _ none ||	text _ ptr compression	EMPTY
179	783	2	-1	0	-1	text _ ptr [ i ] . compression >= png _ text _ compression _ last )	text _ ptr compression	EMPTY
179	784	2	-1	0	-1	{	EMPTY	EMPTY
179	785	2	-1	0	-1	png _ chunk _ report ( png _ ptr  strlit	png _ ptr	EMPTY
179	786	2	-1	0	-1	png _ chunk _ write _ error ) ;	EMPTY	EMPTY
179	787	2	-1	0	-1	continue ;	EMPTY	EMPTY
179	788	3	-1	0	-1	}	EMPTY	EMPTY
179	790	1	0	0	-1	key _ len = strlen ( text _ ptr [ i ] . key ) ;	text _ ptr key	EMPTY
179	792	1	0	0	0	if ( text _ ptr [ i ] . compression <= numconst )	text _ ptr compression	EMPTY
179	793	2	-1	0	-1	{	EMPTY	EMPTY
179	794	2	-1	0	-1	lang _ len = numconst ;	EMPTY	EMPTY
179	795	2	-1	0	-1	lang _ key _ len = numconst ;	EMPTY	EMPTY
179	796	3	-1	0	-1	}	EMPTY	EMPTY
179	798	1	0	0	-1	else	EMPTY	EMPTY
179	799	2	-1	0	-1	# ifdef png _ itxt _ supported	EMPTY	EMPTY
179	800	3	-1	0	-1	{	EMPTY	EMPTY
179	803	1	1	1	1	if ( text _ ptr [ i ] . lang != null )	text _ ptr lang	EMPTY
179	804	3	-1	0	-1	lang _ len = strlen ( text _ ptr [ i ] . lang ) ;	text _ ptr lang	EMPTY
179	806	1	0	0	-1	else	EMPTY	EMPTY
179	807	3	-1	0	-1	lang _ len = 0	EMPTY	EMPTY
179	809	1	0	0	0	if ( text _ ptr [ i ] . lang _ key != null )	text _ ptr lang _ key	EMPTY
179	810	3	-1	0	-1	lang _ key _ len = strlen ( text _ ptr [ i ] . lang _ key ) ;	text _ ptr lang _ key	EMPTY
179	812	1	1	0	-1	else	EMPTY	EMPTY
179	813	2	-1	0	-1	lang _ key _ len = 0	EMPTY	EMPTY
179	814	2	-1	0	-1	}	EMPTY	EMPTY
179	815	2	-1	1	-1	# else	EMPTY	EMPTY
179	816	2	-1	0	-1	{	EMPTY	EMPTY
179	817	2	-1	0	-1	png _ chunk _ report ( png _ ptr  strlit	png _ ptr	EMPTY
179	818	2	-1	0	-1	png _ chunk _ write _ error ) ;	EMPTY	EMPTY
179	819	2	-1	0	-1	continue ;	EMPTY	EMPTY
179	820	2	-1	0	-1	}	EMPTY	EMPTY
179	821	3	-1	0	-1	# endif	EMPTY	EMPTY
179	823	1	0	0	0	if ( text _ ptr [ i ] . text == null || text _ ptr [ i ] . text [ 0 ] == '\0' )	text _ ptr text text _ ptr text	EMPTY
179	824	2	-1	0	-1	{	EMPTY	EMPTY
179	825	2	-1	0	-1	text _ length = 0 ;	text _ length	EMPTY
179	826	2	-1	0	-1	# ifdef png _ itxt _ supported	EMPTY	EMPTY
179	827	2	-1	0	-1	if ( text _ ptr [ i ] . compression > 0 )	text _ ptr compression	EMPTY
179	828	3	-1	0	-1	textp -> compression = png _ itxt _ compression _ none ;	compression	EMPTY
179	830	1	0	0	-1	else	EMPTY	EMPTY
179	831	2	-1	0	-1	# endif	EMPTY	EMPTY
179	832	2	-1	0	-1	textp -> compression = png _ text _ compression _ none ;	compression	EMPTY
179	833	3	-1	0	-1	}	EMPTY	EMPTY
179	835	1	0	0	-1	else	EMPTY	EMPTY
179	836	2	-1	0	-1	{	EMPTY	EMPTY
179	837	2	-1	0	-1	text _ length = strlen ( text _ ptr [ i ] . text ) ;	text _ length text _ ptr text	EMPTY
179	838	2	-1	0	-1	textp -> compression = text _ ptr [ i ] . compression ;	compression text _ ptr compression	EMPTY
179	839	3	-1	0	-1	}	EMPTY	EMPTY
179	841	1	0	0	-1	textp -> key = png _ voidcast ( png _ charp  png _ malloc _ base ( png _ ptr	key png _ malloc _ base png _ ptr	EMPTY
179	842	3	-1	0	-1	key _ len + text _ length + lang _ len + lang _ key _ len + numconst ) ) ;	text _ length	EMPTY
179	844	1	0	0	0	if ( textp -> key == null )	key	EMPTY
179	845	2	-1	0	-1	{	EMPTY	EMPTY
179	846	2	-1	0	-1	png _ chunk _ report ( png _ ptr ,  " text chunk: out of memory "  ,	png _ ptr	EMPTY
179	847	3	-1	0	-1	png _ chunk _ write _ error ) ;	EMPTY	EMPTY
179	849	1	0	0	0	return 1 ;	EMPTY	EMPTY
179	850	3	-1	0	-1	}	EMPTY	EMPTY
179	852	1	0	0	-1	png _ debug2 ( numconst  strlit	EMPTY	EMPTY
179	853	2	-1	0	-1	( unsigned long ) ( png _ uint _ 32 )	EMPTY	EMPTY
179	854	2	-1	0	-1	( key _ len + lang _ len + lang _ key _ len + text _ length + numconst )	text _ length	EMPTY
179	855	3	-1	0	-1	textp -> key ) ;	key	EMPTY
179	857	1	0	0	0	memcpy ( textp -> key  text _ ptr [ i ] . key  key _ len ) ;	key text _ ptr key	EMPTY
179	858	3	-1	0	-1	* ( textp -> key + key _ len ) = '\0'	key	EMPTY
179	860	1	0	0	0	if ( text _ ptr [ i ] . compression > 0 )	text _ ptr compression	EMPTY
179	861	2	-1	0	-1	{	EMPTY	EMPTY
179	862	2	-1	0	-1	textp -> lang = textp -> key + key _ len + 1 ;	lang key	EMPTY
179	863	2	-1	0	-1	memcpy ( textp -> lang , text _ ptr [ i ] . lang , lang _ len ) ;	lang text _ ptr lang	EMPTY
179	864	2	-1	0	-1	* ( textp -> lang + lang _ len ) = '\0' ;	lang	EMPTY
179	865	2	-1	0	-1	textp -> lang _ key = textp -> lang + lang _ len + 1 ;	lang _ key lang	EMPTY
179	866	2	-1	0	-1	memcpy ( textp -> lang _ key , text _ ptr [ i ] . lang _ key , lang _ key _ len ) ;	lang _ key text _ ptr lang _ key	EMPTY
179	867	2	-1	0	-1	* ( textp -> lang _ key + lang _ key _ len ) = '\0' ;	lang _ key	EMPTY
179	868	2	-1	0	-1	textp -> text = textp -> lang _ key + lang _ key _ len + 1 ;	text lang _ key	EMPTY
179	869	3	-1	0	-1	}	EMPTY	EMPTY
179	871	1	0	0	-1	else	EMPTY	EMPTY
179	872	2	-1	0	-1	{	EMPTY	EMPTY
179	873	2	-1	0	-1	textp -> lang = null ;	lang	EMPTY
179	874	2	-1	0	-1	textp -> lang _ key = null ;	lang _ key	EMPTY
179	875	2	-1	0	-1	textp -> text = textp -> key + key _ len + 1 ;	text key	EMPTY
179	876	3	-1	0	-1	}	EMPTY	EMPTY
179	878	1	0	0	0	if ( text _ length != numconst )	text _ length	EMPTY
179	879	3	-1	0	-1	memcpy ( textp -> text  text _ ptr [ i ] . text  text _ length ) ;	text text _ ptr text text _ length	EMPTY
179	881	1	0	0	-1	* ( textp -> text + text _ length ) = '\0'	text text _ length	EMPTY
179	883	1	0	0	-1	# ifdef png _ itxt _ supported	EMPTY	EMPTY
179	884	2	-1	0	-1	if ( textp -> compression > 0 )	compression	EMPTY
179	885	2	-1	0	-1	{	EMPTY	EMPTY
179	886	2	-1	0	-1	textp -> text _ length = 0 ;	text _ length	EMPTY
179	887	2	-1	0	-1	textp -> itxt _ length = text _ length ;	itxt _ length text _ length	EMPTY
179	888	3	-1	0	-1	}	EMPTY	EMPTY
179	890	1	0	0	-1	else	EMPTY	EMPTY
179	891	2	-1	0	-1	# endif	EMPTY	EMPTY
179	892	2	-1	0	-1	{	EMPTY	EMPTY
179	893	2	-1	0	-1	textp -> text _ length = text _ length ;	text _ length text _ length	EMPTY
179	894	2	-1	0	-1	textp -> itxt _ length = 0 ;	itxt _ length	EMPTY
179	895	3	-1	0	-1	}	EMPTY	EMPTY
179	897	1	0	0	-1	info _ ptr -> num _ text ++	info _ ptr num _ text	EMPTY
179	898	2	-1	0	-1	png _ debug1 ( numconst  strlit  info _ ptr -> num _ text ) ;	info _ ptr num _ text	EMPTY
179	899	3	-1	0	-1	}	EMPTY	EMPTY
179	901	1	0	0	0	return ( numconst ) ;	EMPTY	EMPTY
179	902	2	-1	0	-1	}	EMPTY	EMPTY
179	903	3	-1	0	-1	# endif	EMPTY	EMPTY
179	905	1	0	0	0	# ifdef png _ time _ supported	EMPTY	EMPTY
179	906	2	-1	0	-1	void pngapi	EMPTY	EMPTY
179	907	2	-1	0	-1	png _ set _ time ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
179	908	2	-1	0	-1	png _ const _ timep mod _ time )	mod _ time	EMPTY
179	909	2	-1	0	-1	{	EMPTY	EMPTY
179	910	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
179	912	1	0	0	0	if ( png _ ptr == null || info _ ptr == null || mod _ time == null ||	png _ ptr info _ ptr mod _ time	EMPTY
179	913	2	-1	0	-1	( png _ ptr -> mode & png _ wrote _ time ) != numconst )	png _ ptr mode	EMPTY
179	914	3	-1	0	-1	return ;	EMPTY	EMPTY
179	916	1	0	0	0	if ( mod _ time -> month == numconst || mod _ time -> month > numconst ||	mod _ time month mod _ time month	EMPTY
179	917	2	-1	0	-1	mod _ time -> day == numconst || mod _ time -> day > numconst ||	mod _ time day mod _ time day	EMPTY
179	918	2	-1	0	-1	mod _ time -> hour > numconst || mod _ time -> minute > numconst ||	mod _ time hour mod _ time minute	EMPTY
179	919	2	-1	0	-1	mod _ time -> second > numconst )	mod _ time second	EMPTY
179	920	2	-1	0	-1	{	EMPTY	EMPTY
179	921	3	-1	0	-1	png _ warning ( png _ ptr  strlit ) ;	png _ ptr	EMPTY
179	923	1	0	0	0	return ;	EMPTY	EMPTY
179	924	3	-1	0	-1	}	EMPTY	EMPTY
179	926	1	0	0	-1	info _ ptr -> mod _ time = * mod _ time ;	info _ ptr mod _ time mod _ time	EMPTY
179	927	2	-1	0	-1	info _ ptr -> valid |= png _ info _ time ;	info _ ptr valid	EMPTY
179	928	2	-1	0	-1	}	EMPTY	EMPTY
179	929	3	-1	0	-1	# endif	EMPTY	EMPTY
179	931	1	0	0	0	# ifdef png _ trns _ supported	EMPTY	EMPTY
179	932	2	-1	0	-1	void pngapi	EMPTY	EMPTY
179	933	2	-1	0	-1	png _ set _ trns ( png _ structrp png _ ptr  png _ inforp info _ ptr	png _ structrp png _ ptr info _ ptr	EMPTY
179	934	2	-1	0	-1	png _ const _ bytep trans _ alpha  int num _ trans  png _ const _ color _ 16p trans _ color )	trans _ alpha num _ trans trans _ color	EMPTY
179	935	2	-1	0	-1	{	EMPTY	EMPTY
179	936	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
179	938	1	0	0	0	if ( png _ ptr == null || info _ ptr == null )	png _ ptr info _ ptr	EMPTY
179	940	1	0	0	0	return ;	EMPTY	EMPTY
179	942	1	0	0	0	if ( trans _ alpha != null )	trans _ alpha	EMPTY
179	943	3	-1	0	-1	{	EMPTY	EMPTY
179	953	1	1	1	1	png _ free _ data ( png _ ptr , info _ ptr , png _ free _ trns , 0 )	png _ free _ data png _ ptr info _ ptr	EMPTY
179	956	1	1	1	-1	png _ ptr -> trans _ alpha = info _ ptr -> trans _ alpha = png _ voidcast ( png _ bytep	png _ ptr trans _ alpha info _ ptr trans _ alpha	EMPTY
179	957	3	-1	0	-1	png _ malloc ( png _ ptr  png _ max _ palette _ length ) ) ;	png _ ptr	EMPTY
179	959	1	0	0	0	if ( num _ trans > numconst && num _ trans <= png _ max _ palette _ length )	num _ trans num _ trans	EMPTY
179	960	2	-1	0	-1	memcpy ( info _ ptr -> trans _ alpha  trans _ alpha  ( png _ size _ t ) num _ trans ) ;	info _ ptr trans _ alpha trans _ alpha png _ size _ t num _ trans	EMPTY
179	961	3	-1	0	-1	}	EMPTY	EMPTY
179	963	1	0	0	0	if ( trans _ color != null )	trans _ color	EMPTY
179	964	2	-1	0	-1	{	EMPTY	EMPTY
179	965	2	-1	0	-1	# ifdef png _ warnings _ supported	EMPTY	EMPTY
179	966	2	-1	0	-1	if ( info _ ptr -> bit _ depth < numconst )	info _ ptr bit _ depth	EMPTY
179	967	2	-1	0	-1	{	EMPTY	EMPTY
179	968	3	-1	0	-1	int sample _ max = ( numconst << info _ ptr -> bit _ depth ) - numconst ;	info _ ptr bit _ depth	EMPTY
179	970	1	0	0	-1	if ( ( info _ ptr -> color _ type == png _ color _ type _ gray &&	info _ ptr color _ type	EMPTY
179	971	2	-1	0	-1	trans _ color -> gray > sample _ max ) ||	trans _ color gray	EMPTY
179	972	2	-1	0	-1	( info _ ptr -> color _ type == png _ color _ type _ rgb &&	info _ ptr color _ type	EMPTY
179	973	2	-1	0	-1	( trans _ color -> red > sample _ max ||	trans _ color red	EMPTY
179	974	2	-1	0	-1	trans _ color -> green > sample _ max ||	trans _ color green	EMPTY
179	975	2	-1	0	-1	trans _ color -> blue > sample _ max ) ) )	trans _ color	EMPTY
179	976	2	-1	0	-1	png _ warning ( png _ ptr	png _ ptr	EMPTY
179	977	2	-1	0	-1	strlit ) ;	EMPTY	EMPTY
179	978	2	-1	0	-1	}	EMPTY	EMPTY
179	979	3	-1	0	-1	# endif	EMPTY	EMPTY
179	981	1	0	0	-1	info _ ptr -> trans _ color = * trans _ color ;	info _ ptr trans _ color trans _ color	EMPTY
179	983	1	0	0	0	if ( num _ trans == numconst )	num _ trans	EMPTY
179	984	2	-1	0	-1	num _ trans = numconst ;	num _ trans	EMPTY
179	985	3	-1	0	-1	}	EMPTY	EMPTY
179	987	1	0	0	-1	info _ ptr -> num _ trans = ( png _ uint _ 16 ) num _ trans ;	info _ ptr num _ trans num _ trans	EMPTY
179	989	1	0	0	0	if ( num _ trans != numconst )	num _ trans	EMPTY
179	990	2	-1	0	-1	{	EMPTY	EMPTY
179	991	2	-1	0	-1	info _ ptr -> valid |= png _ info _ trns ;	info _ ptr valid	EMPTY
179	992	2	-1	0	-1	info _ ptr -> free _ me |= png _ free _ trns ;	info _ ptr free _ me	EMPTY
179	993	2	-1	0	-1	}	EMPTY	EMPTY
179	994	2	-1	0	-1	}	EMPTY	EMPTY
179	995	3	-1	0	-1	# endif	EMPTY	EMPTY
179	997	1	1	0	1	# ifdef png _ splt _ supported	EMPTY	EMPTY
179	998	2	-1	0	-1	void pngapi	EMPTY	EMPTY
179	999	2	-1	0	-1	png _ set _ splt ( png _ const _ structrp png _ ptr	png _ ptr	EMPTY
179	1000	2	-1	0	-1	png _ inforp info _ ptr  png _ const _ splt _ tp entries  int nentries )	info _ ptr entries nentries	EMPTY
179	1009	2	-1	1	-1	{	EMPTY	EMPTY
179	1010	3	-1	0	-1	png _ splt _ tp np ;	EMPTY	EMPTY
179	1012	1	0	0	0	if ( png _ ptr == null || info _ ptr == null || nentries <= 0 || entries == null )	png _ ptr info _ ptr nentries entries	EMPTY
179	1013	3	-1	0	-1	return	EMPTY	EMPTY
179	1018	1	1	1	-1	np = png _ voidcast ( png _ splt _ tp  png _ realloc _ array ( png _ ptr	png _ realloc _ array png _ ptr	EMPTY
179	1019	2	-1	0	-1	info _ ptr -> splt _ palettes  info _ ptr -> splt _ palettes _ num  nentries	info _ ptr splt _ palettes info _ ptr splt _ palettes _ num nentries	EMPTY
179	1020	3	-1	0	-1	sizeof * np ) ) ;	EMPTY	EMPTY
179	1022	1	1	0	1	if ( np == null )	EMPTY	EMPTY
179	1023	2	-1	0	-1	{	EMPTY	EMPTY
179	1025	3	-1	1	-1	png _ chunk _ report ( png _ ptr ,  " too many splt chunks "  , png _ chunk _ write _ error )	png _ ptr	EMPTY
179	1027	1	0	0	0	return	EMPTY	EMPTY
179	1028	3	-1	0	-1	}	EMPTY	EMPTY
179	1030	1	0	0	0	png _ free ( png _ ptr  info _ ptr -> splt _ palettes ) ;	png _ free png _ ptr info _ ptr splt _ palettes	EMPTY
179	1031	2	-1	0	-1	info _ ptr -> splt _ palettes = np ;	info _ ptr splt _ palettes	EMPTY
179	1032	3	-1	0	-1	info _ ptr -> free _ me |= png _ free _ splt ;	info _ ptr free _ me	EMPTY
179	1034	1	0	0	-1	np += info _ ptr -> splt _ palettes _ num ;	info _ ptr splt _ palettes _ num	EMPTY
179	1036	1	0	0	-1	do	EMPTY	EMPTY
179	1037	2	-1	0	-1	{	EMPTY	EMPTY
179	1038	3	-1	0	-1	png _ size _ t length ;	png _ size _ t length	EMPTY
179	1041	1	1	1	1	if ( entries -> name == null || entries -> entries == null )	entries name entries entries	EMPTY
179	1042	2	-1	0	-1	{	EMPTY	EMPTY
179	1044	2	-1	1	-1	png _ app _ error ( png _ ptr ,  " png _ set _ splt: invalid splt "  )	png _ ptr	EMPTY
179	1046	2	-1	1	-1	continue	EMPTY	EMPTY
179	1047	3	-1	0	-1	}	EMPTY	EMPTY
179	1049	1	0	0	-1	np -> depth = entries -> depth ;	depth entries depth	EMPTY
179	1054	1	1	1	-1	length = strlen ( entries -> name ) + 1	length entries name	EMPTY
179	1055	3	-1	0	-1	np -> name = png _ voidcast ( png _ charp  png _ malloc _ base ( png _ ptr  length ) ) ;	name png _ malloc _ base png _ ptr length	EMPTY
179	1057	1	0	0	0	if ( np -> name == null )	name	EMPTY
179	1058	3	-1	0	-1	break	EMPTY	EMPTY
179	1060	1	0	0	0	memcpy ( np -> name  entries -> name  length ) ;	name entries name length	EMPTY
179	1066	1	1	1	-1	np -> entries = png _ voidcast ( png _ splt _ entryp  png _ malloc _ array ( png _ ptr	entries png _ malloc _ array png _ ptr	EMPTY
179	1067	3	-1	0	-1	entries -> nentries  sizeof ( png _ splt _ entry ) ) ) ;	entries nentries png _ splt _ entry	EMPTY
179	1069	1	0	0	0	if ( np -> entries == null )	entries	EMPTY
179	1070	2	-1	0	-1	{	EMPTY	EMPTY
179	1071	2	-1	0	-1	png _ free ( png _ ptr , np -> name ) ;	png _ free png _ ptr name	EMPTY
179	1072	2	-1	0	-1	np -> name = null ;	name	EMPTY
179	1073	2	-1	0	-1	break ;	EMPTY	EMPTY
179	1074	3	-1	0	-1	}	EMPTY	EMPTY
179	1076	1	1	0	-1	np -> nentries = entries -> nentries	nentries entries nentries	EMPTY
179	1080	2	-1	1	-1	memcpy ( np -> entries  entries -> entries	entries entries entries	EMPTY
179	1081	3	-1	0	-1	entries -> nentries * sizeof ( png _ splt _ entry ) ) ;	entries nentries png _ splt _ entry	EMPTY
179	1086	1	1	1	-1	info _ ptr -> valid |= png _ info _ splt ;	info _ ptr valid	EMPTY
179	1087	2	-1	0	-1	++ ( info _ ptr -> splt _ palettes _ num )	info _ ptr splt _ palettes _ num	EMPTY
179	1088	2	-1	0	-1	++ np	EMPTY	EMPTY
179	1089	2	-1	0	-1	}	EMPTY	EMPTY
179	1090	3	-1	0	-1	while ( ++ entries  -- nentries ) ;	entries nentries	EMPTY
179	1092	1	1	0	1	if ( nentries > numconst )	nentries	EMPTY
179	1093	2	-1	0	-1	png _ chunk _ report ( png _ ptr  strlit  png _ chunk _ write _ error ) ;	png _ ptr	EMPTY
179	1094	2	-1	0	-1	}	EMPTY	EMPTY
179	1095	3	-1	1	-1	# endif	EMPTY	EMPTY
179	1097	1	0	0	0	# ifdef png _ store _ unknown _ chunks _ supported	EMPTY	EMPTY
179	1098	2	-1	0	-1	static png _ byte	EMPTY	EMPTY
179	1099	2	-1	0	-1	check _ location ( png _ const _ structrp png _ ptr  int location )	png _ ptr location	EMPTY
179	1100	2	-1	0	-1	{	EMPTY	EMPTY
179	1101	3	-1	0	-1	location &= ( png _ have _ ihdr | png _ have _ plte | png _ after _ idat )	location	EMPTY
179	1107	1	1	1	1	if ( location == numconst && ( png _ ptr -> mode & png _ is _ read _ struct ) == numconst )	location png _ ptr mode	EMPTY
179	1108	2	-1	0	-1	{	EMPTY	EMPTY
179	1110	2	-1	1	-1	png _ app _ warning ( png _ ptr ,	png _ app _ warning png _ ptr	EMPTY
179	1111	2	-1	0	-1	" png _ set _ unknown _ chunks now expects a valid location "  )	a valid	EMPTY
179	1113	2	-1	1	-1	location = ( png _ byte ) ( png _ ptr -> mode &	location png _ ptr mode	EMPTY
179	1114	2	-1	0	-1	( png _ have _ ihdr | png _ have _ plte | png _ after _ idat ) )	EMPTY	EMPTY
179	1115	3	-1	0	-1	}	EMPTY	EMPTY
179	1120	1	1	1	1	if ( location == 0 )	location	EMPTY
179	1121	3	-1	0	-1	png _ error ( png _ ptr ,  " invalid location in png _ set _ unknown _ chunks "  )	png _ error png _ ptr location	EMPTY
179	1126	1	1	1	1	while ( location != ( location & - location ) )	location location location	EMPTY
179	1127	3	-1	0	-1	location &= ~ ( location & - location )	location location location	EMPTY
179	1132	1	1	1	1	return ( png _ byte ) location	location	EMPTY
179	1133	3	-1	0	-1	}	EMPTY	EMPTY
179	1135	1	0	0	-1	void pngapi	EMPTY	EMPTY
179	1136	2	-1	0	-1	png _ set _ unknown _ chunks ( png _ const _ structrp png _ ptr	png _ ptr	EMPTY
179	1137	2	-1	0	-1	png _ inforp info _ ptr  png _ const _ unknown _ chunkp unknowns  int num _ unknowns )	info _ ptr	EMPTY
179	1138	2	-1	0	-1	{	EMPTY	EMPTY
179	1139	3	-1	0	-1	png _ unknown _ chunkp np ;	EMPTY	EMPTY
179	1141	1	0	0	0	if ( png _ ptr == null || info _ ptr == null || num _ unknowns <= numconst ||	png _ ptr info _ ptr	EMPTY
179	1142	2	-1	0	-1	unknowns == null )	EMPTY	EMPTY
179	1143	3	-1	0	-1	return ;	EMPTY	EMPTY
179	1151	1	1	1	-1	# if ! defined ( png _ read _ unknown _ chunks _ supported ) && defined	EMPTY	EMPTY
179	1152	2	-1	0	-1	defined ( png _ read _ supported )	EMPTY	EMPTY
179	1153	2	-1	0	-1	if ( ( png _ ptr -> mode & png _ is _ read _ struct ) != numconst )	png _ ptr mode	EMPTY
179	1154	2	-1	0	-1	{	EMPTY	EMPTY
179	1155	3	-1	0	-1	png _ app _ error ( png _ ptr  strlit ) ;	png _ ptr	EMPTY
179	1157	1	0	0	-1	return ;	EMPTY	EMPTY
179	1158	2	-1	0	-1	}	EMPTY	EMPTY
179	1159	2	-1	0	-1	# endif	EMPTY	EMPTY
179	1160	2	-1	0	-1	# if ! defined ( png _ write _ unknown _ chunks _ supported ) && defined	EMPTY	EMPTY
179	1161	2	-1	0	-1	defined ( png _ write _ supported )	EMPTY	EMPTY
179	1162	2	-1	0	-1	if ( ( png _ ptr -> mode & png _ is _ read _ struct ) == numconst )	png _ ptr mode	EMPTY
179	1163	2	-1	0	-1	{	EMPTY	EMPTY
179	1164	3	-1	0	-1	png _ app _ error ( png _ ptr  strlit ) ;	png _ ptr	EMPTY
179	1166	1	0	0	-1	return ;	EMPTY	EMPTY
179	1167	2	-1	0	-1	}	EMPTY	EMPTY
179	1168	3	-1	0	-1	# endif	EMPTY	EMPTY
179	1175	1	1	1	-1	np = png _ voidcast ( png _ unknown _ chunkp  png _ realloc _ array ( png _ ptr	png _ realloc _ array png _ ptr	EMPTY
179	1176	2	-1	0	-1	info _ ptr -> unknown _ chunks  info _ ptr -> unknown _ chunks _ num  num _ unknowns	info _ ptr unknown _ chunks info _ ptr unknown _ chunks _ num	EMPTY
179	1177	3	-1	0	-1	sizeof * np ) ) ;	EMPTY	EMPTY
179	1179	1	0	0	0	if ( np == null )	EMPTY	EMPTY
179	1180	2	-1	0	-1	{	EMPTY	EMPTY
179	1181	2	-1	0	-1	png _ chunk _ report ( png _ ptr ,  " too many unknown chunks "  ,	png _ ptr	EMPTY
179	1182	3	-1	0	-1	png _ chunk _ write _ error ) ;	EMPTY	EMPTY
179	1184	1	0	0	0	return ;	EMPTY	EMPTY
179	1185	3	-1	0	-1	}	EMPTY	EMPTY
179	1187	1	1	0	1	png _ free ( png _ ptr , info _ ptr -> unknown _ chunks )	png _ free png _ ptr info _ ptr unknown _ chunks	EMPTY
179	1188	2	-1	1	-1	info _ ptr -> unknown _ chunks = np	info _ ptr unknown _ chunks	EMPTY
179	1189	3	-1	0	-1	info _ ptr -> free _ me |= png _ free _ unkn ;	info _ ptr free _ me	EMPTY
179	1191	1	0	0	-1	np += info _ ptr -> unknown _ chunks _ num	info _ ptr unknown _ chunks _ num	EMPTY
179	1196	1	1	1	1	for ( ; num _ unknowns > numconst ; -- num _ unknowns  ++ unknowns )	EMPTY	EMPTY
179	1197	2	-1	0	-1	{	EMPTY	EMPTY
179	1198	2	-1	0	-1	memcpy ( np -> name  unknowns -> name  ( sizeof np -> name ) ) ;	name name name	EMPTY
179	1199	2	-1	0	-1	np -> name [ ( sizeof np -> name ) - 1 ] = '\0'	name name	EMPTY
179	1200	3	-1	0	-1	np -> location = check _ location ( png _ ptr , unknowns -> location )	location png _ ptr location	EMPTY
179	1202	1	0	0	0	if ( unknowns -> size == numconst )	size	EMPTY
179	1203	2	-1	0	-1	{	EMPTY	EMPTY
179	1204	2	-1	0	-1	np -> data = null ;	data	EMPTY
179	1205	2	-1	0	-1	np -> size = 0	size	EMPTY
179	1206	3	-1	0	-1	}	EMPTY	EMPTY
179	1208	1	0	0	-1	else	EMPTY	EMPTY
179	1209	2	-1	0	-1	{	EMPTY	EMPTY
179	1210	2	-1	0	-1	np -> data = png _ voidcast ( png _ bytep	data	EMPTY
179	1211	3	-1	0	-1	png _ malloc _ base ( png _ ptr  unknowns -> size ) ) ;	png _ malloc _ base png _ ptr size	EMPTY
179	1213	1	1	0	1	if ( np -> data == null )	data	EMPTY
179	1214	2	-1	0	-1	{	EMPTY	EMPTY
179	1215	2	-1	0	-1	png _ chunk _ report ( png _ ptr ,  " unknown chunk: out of memory "  ,	png _ ptr	EMPTY
179	1216	2	-1	0	-1	png _ chunk _ write _ error )	EMPTY	EMPTY
179	1218	2	-1	1	-1	continue	EMPTY	EMPTY
179	1219	3	-1	0	-1	}	EMPTY	EMPTY
179	1221	1	0	0	0	memcpy ( np -> data  unknowns -> data  unknowns -> size ) ;	data data size	EMPTY
179	1222	2	-1	0	-1	np -> size = unknowns -> size ;	size size	EMPTY
179	1223	3	-1	0	-1	}	EMPTY	EMPTY
179	1229	1	1	1	-1	++ np	EMPTY	EMPTY
179	1230	2	-1	0	-1	++ ( info _ ptr -> unknown _ chunks _ num )	info _ ptr unknown _ chunks _ num	EMPTY
179	1231	2	-1	0	-1	}	EMPTY	EMPTY
179	1232	3	-1	0	-1	}	EMPTY	EMPTY
179	1234	1	1	0	-1	void pngapi	EMPTY	EMPTY
179	1235	2	-1	0	-1	png _ set _ unknown _ chunk _ location ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ ptr info _ ptr	EMPTY
179	1236	2	-1	0	-1	int chunk  int location )	location	EMPTY
179	1237	2	-1	0	-1	{	EMPTY	EMPTY
179	1243	2	-1	1	-1	if ( png _ ptr != null && info _ ptr != null && chunk >= numconst &&	png _ ptr info _ ptr	EMPTY
179	1244	2	-1	0	-1	chunk < info _ ptr -> unknown _ chunks _ num )	info _ ptr unknown _ chunks _ num	EMPTY
179	1245	2	-1	0	-1	{	EMPTY	EMPTY
179	1246	2	-1	0	-1	if ( ( location & ( png _ have _ ihdr | png _ have _ plte | png _ after _ idat ) ) == numconst )	location	EMPTY
179	1247	2	-1	0	-1	{	EMPTY	EMPTY
179	1248	2	-1	0	-1	png _ app _ error ( png _ ptr ,  " invalid unknown chunk location "  )	png _ ptr	EMPTY
179	1250	2	-1	1	-1	if ( ( location & png _ have _ idat ) != numconst )	location	EMPTY
179	1251	3	-1	0	-1	location = png _ after _ idat ;	location	EMPTY
179	1253	1	1	0	-1	else	EMPTY	EMPTY
179	1254	2	-1	1	-1	location = png _ have _ ihdr ;	location	EMPTY
179	1255	3	-1	0	-1	}	EMPTY	EMPTY
179	1257	1	1	0	-1	info _ ptr -> unknown _ chunks [ chunk ] . location =	info _ ptr unknown _ chunks location	EMPTY
179	1258	2	-1	0	-1	check _ location ( png _ ptr  location ) ;	png _ ptr location	EMPTY
179	1259	2	-1	0	-1	}	EMPTY	EMPTY
179	1260	2	-1	0	-1	}	EMPTY	EMPTY
179	1261	3	-1	1	-1	# endif	EMPTY	EMPTY
179	1263	1	0	0	0	# ifdef png _ mng _ features _ supported	EMPTY	EMPTY
179	1264	2	-1	0	-1	png _ uint _ 32 pngapi	EMPTY	EMPTY
179	1265	2	-1	0	-1	png _ permit _ mng _ features ( png _ structrp png _ ptr  png _ uint _ 32 mng _ features )	png _ structrp png _ ptr	EMPTY
179	1266	2	-1	0	-1	{	EMPTY	EMPTY
179	1267	3	-1	0	-1	png _ debug ( numconst  strlit ) ;	EMPTY	EMPTY
179	1269	1	0	0	0	if ( png _ ptr == null )	png _ ptr	EMPTY
179	1270	3	-1	0	-1	return 0	EMPTY	EMPTY
179	1272	1	0	0	-1	png _ ptr -> mng _ features _ permitted = mng _ features & png _ all _ mng _ features ;	png _ ptr mng _ features _ permitted	EMPTY
179	1274	1	0	0	0	return png _ ptr -> mng _ features _ permitted	png _ ptr mng _ features _ permitted	EMPTY
179	1275	2	-1	0	-1	}	EMPTY	EMPTY
179	1276	3	-1	0	-1	# endif	EMPTY	EMPTY
179	1278	1	0	0	0	# ifdef png _ handle _ as _ unknown _ supported	EMPTY	EMPTY
179	1279	2	-1	0	-1	static unsigned int	EMPTY	EMPTY
179	1280	2	-1	0	-1	add _ one _ chunk ( png _ bytep list  unsigned int count  png _ const _ bytep add  int keep )	keep	EMPTY
179	1281	2	-1	0	-1	{	EMPTY	EMPTY
179	1282	3	-1	0	-1	unsigned int i ;	EMPTY	EMPTY
179	1287	1	1	1	1	for ( i = 0 ; i < count ; ++ i , list += 5 )	EMPTY	EMPTY
179	1288	2	-1	0	-1	{	EMPTY	EMPTY
179	1289	2	-1	0	-1	if ( memcmp ( list , add , 4 ) == 0 )	EMPTY	EMPTY
179	1290	2	-1	0	-1	{	EMPTY	EMPTY
179	1291	3	-1	0	-1	list [ 4 ] = ( png _ byte ) keep ;	keep	EMPTY
179	1293	1	0	0	0	return count ;	EMPTY	EMPTY
179	1294	2	-1	0	-1	}	EMPTY	EMPTY
179	1295	3	-1	0	-1	}	EMPTY	EMPTY
179	1297	1	0	0	0	if ( keep != png _ handle _ chunk _ as _ default )	keep	EMPTY
179	1298	2	-1	0	-1	{	EMPTY	EMPTY
179	1299	2	-1	0	-1	++ count ;	EMPTY	EMPTY
179	1300	2	-1	0	-1	memcpy ( list , add , 4 ) ;	EMPTY	EMPTY
179	1301	2	-1	0	-1	list [ 4 ] = ( png _ byte ) keep ;	keep	EMPTY
179	1302	3	-1	0	-1	}	EMPTY	EMPTY
179	1304	1	0	0	0	return count	EMPTY	EMPTY
179	1305	3	-1	0	-1	}	EMPTY	EMPTY
179	1307	1	0	0	-1	void pngapi	EMPTY	EMPTY
179	1308	2	-1	0	-1	png _ set _ keep _ unknown _ chunks ( png _ structrp png _ ptr  int keep	png _ set _ keep _ unknown _ chunks png _ structrp png _ ptr keep	EMPTY
179	1309	2	-1	0	-1	png _ const _ bytep chunk _ list  int num _ chunks _ in )	chunk _ list	EMPTY
179	1310	2	-1	0	-1	{	EMPTY	EMPTY
179	1311	2	-1	0	-1	png _ bytep new _ list ;	EMPTY	EMPTY
179	1312	3	-1	0	-1	unsigned int num _ chunks  old _ num _ chunks ;	num _ chunks	EMPTY
179	1314	1	0	0	0	if ( png _ ptr == null )	png _ ptr	EMPTY
179	1315	3	-1	0	-1	return ;	EMPTY	EMPTY
179	1317	1	0	0	0	if ( keep < numconst || keep >= png _ handle _ chunk _ last )	keep keep	EMPTY
179	1318	2	-1	0	-1	{	EMPTY	EMPTY
179	1319	3	-1	0	-1	png _ app _ error ( png _ ptr  strlit ) ;	png _ ptr	EMPTY
179	1321	1	0	0	0	return ;	EMPTY	EMPTY
179	1322	3	-1	0	-1	}	EMPTY	EMPTY
179	1324	1	0	0	0	if ( num _ chunks _ in <= numconst )	EMPTY	EMPTY
179	1325	2	-1	0	-1	{	EMPTY	EMPTY
179	1326	3	-1	0	-1	png _ ptr -> unknown _ default = keep ;	png _ ptr unknown _ default keep	EMPTY
179	1329	1	1	1	1	if ( num _ chunks _ in == 0 )	EMPTY	EMPTY
179	1330	2	-1	0	-1	return	EMPTY	EMPTY
179	1331	3	-1	0	-1	}	EMPTY	EMPTY
179	1333	1	1	0	1	if ( num _ chunks _ in < numconst )	EMPTY	EMPTY
179	1334	2	-1	0	-1	{	EMPTY	EMPTY
179	1338	2	-1	1	-1	static png _ const png _ byte chunks _ to _ ignore [ ] = {	chunks _ to _ ignore	EMPTY
179	1339	2	-1	1	-1	numconst  numconst  numconst  numconst  '\\0'	EMPTY	EMPTY
179	1340	2	-1	1	-1	numconst  numconst  numconst  numconst  '\\0'	EMPTY	EMPTY
179	1341	2	-1	1	-1	numconst  numconst  numconst  numconst  '\\0'	EMPTY	EMPTY
179	1342	2	-1	1	-1	numconst  numconst  numconst  numconst  '\\0'	EMPTY	EMPTY
179	1343	2	-1	1	-1	numconst  numconst  numconst  numconst  '\\0'	EMPTY	EMPTY
179	1344	2	-1	1	-1	numconst  numconst  numconst  numconst  '\\0'	EMPTY	EMPTY
179	1345	2	-1	1	-1	numconst  numconst  numconst  numconst  '\\0'	EMPTY	EMPTY
179	1346	2	-1	1	-1	numconst  numconst  numconst  numconst  '\\0'	EMPTY	EMPTY
179	1347	2	-1	1	-1	numconst  numconst  numconst  numconst  '\\0'	EMPTY	EMPTY
179	1348	2	-1	1	-1	numconst  numconst  numconst  numconst  '\\0'	EMPTY	EMPTY
179	1349	2	-1	1	-1	numconst  numconst  numconst  numconst  '\\0'	EMPTY	EMPTY
179	1350	2	-1	1	-1	numconst  numconst  numconst  numconst  '\\0'	EMPTY	EMPTY
179	1351	2	-1	1	-1	numconst  numconst  numconst  numconst  '\\0'	EMPTY	EMPTY
179	1352	2	-1	1	-1	numconst  numconst  numconst  numconst  '\\0'	EMPTY	EMPTY
179	1353	2	-1	1	-1	numconst  numconst  numconst  numconst  '\\0'	EMPTY	EMPTY
179	1354	2	-1	1	-1	numconst  numconst  numconst  numconst  '\\0'	EMPTY	EMPTY
179	1355	2	-1	1	-1	numconst  numconst  numconst  numconst  '\\0'	EMPTY	EMPTY
179	1356	3	-1	0	-1	} ;	EMPTY	EMPTY
179	1358	1	1	0	-1	chunk _ list = chunks _ to _ ignore	chunk _ list chunks _ to _ ignore	EMPTY
179	1359	2	-1	1	-1	num _ chunks = ( unsigned int ) ( sizeof chunks _ to _ ignore ) / numconst ;	num _ chunks chunks _ to _ ignore	EMPTY
179	1360	3	-1	0	-1	}	EMPTY	EMPTY
179	1362	1	1	1	-1	else	EMPTY	EMPTY
179	1363	2	-1	0	-1	{	EMPTY	EMPTY
179	1364	2	-1	0	-1	if ( chunk _ list == null )	chunk _ list	EMPTY
179	1365	2	-1	0	-1	{	EMPTY	EMPTY
179	1369	3	-1	1	-1	png _ app _ error ( png _ ptr ,  " png _ set _ keep _ unknown _ chunks: no chunk list "  )	png _ ptr	EMPTY
179	1371	1	0	0	0	return	EMPTY	EMPTY
179	1372	3	-1	0	-1	}	EMPTY	EMPTY
179	1374	1	0	0	-1	num _ chunks = num _ chunks _ in ;	num _ chunks	EMPTY
179	1375	3	-1	0	-1	}	EMPTY	EMPTY
179	1377	1	0	0	-1	old _ num _ chunks = png _ ptr -> num _ chunk _ list ;	png _ ptr num _ chunk _ list	EMPTY
179	1378	2	-1	0	-1	if ( png _ ptr -> chunk _ list == null )	png _ ptr chunk _ list	EMPTY
179	1379	3	-1	0	-1	old _ num _ chunks = numconst ;	EMPTY	EMPTY
179	1383	1	1	1	1	if ( num _ chunks + old _ num _ chunks > uint _ max / 5 )	num _ chunks	EMPTY
179	1384	2	-1	0	-1	{	EMPTY	EMPTY
179	1385	3	-1	0	-1	png _ app _ error ( png _ ptr ,  " png _ set _ keep _ unknown _ chunks: too many chunks "  ) ;	png _ ptr	EMPTY
179	1387	1	0	0	0	return ;	EMPTY	EMPTY
179	1388	3	-1	0	-1	}	EMPTY	EMPTY
179	1394	1	1	1	1	if ( keep != numconst )	keep	EMPTY
179	1395	2	-1	0	-1	{	EMPTY	EMPTY
179	1396	2	-1	0	-1	new _ list = png _ voidcast ( png _ bytep  png _ malloc ( png _ ptr	png _ ptr	EMPTY
179	1397	3	-1	0	-1	numconst * ( num _ chunks + old _ num _ chunks ) ) ) ;	num _ chunks	EMPTY
179	1399	1	0	0	0	if ( old _ num _ chunks > numconst )	EMPTY	EMPTY
179	1400	2	-1	0	-1	memcpy ( new _ list  png _ ptr -> chunk _ list  numconst * old _ num _ chunks ) ;	png _ ptr chunk _ list	EMPTY
179	1401	3	-1	0	-1	}	EMPTY	EMPTY
179	1403	1	0	0	0	if ( old _ num _ chunks > numconst )	EMPTY	EMPTY
179	1404	3	-1	0	-1	new _ list = png _ ptr -> chunk _ list ;	png _ ptr chunk _ list	EMPTY
179	1406	1	0	0	-1	else	EMPTY	EMPTY
179	1407	3	-1	0	-1	new _ list = null ;	EMPTY	EMPTY
179	1414	1	1	1	1	if ( new _ list != null )	EMPTY	EMPTY
179	1415	2	-1	0	-1	{	EMPTY	EMPTY
179	1416	2	-1	0	-1	png _ const _ bytep inlist ;	EMPTY	EMPTY
179	1417	2	-1	0	-1	png _ bytep outlist ;	EMPTY	EMPTY
179	1418	3	-1	0	-1	unsigned int i ;	EMPTY	EMPTY
179	1420	1	0	0	0	for ( i = 0 ; i < num _ chunks ; ++ i )	num _ chunks	EMPTY
179	1421	2	-1	0	-1	{	EMPTY	EMPTY
179	1422	2	-1	0	-1	old _ num _ chunks = add _ one _ chunk ( new _ list , old _ num _ chunks ,	EMPTY	EMPTY
179	1423	2	-1	0	-1	chunk _ list + 5 * i , keep ) ;	chunk _ list keep	EMPTY
179	1424	3	-1	0	-1	}	EMPTY	EMPTY
179	1427	1	1	1	-1	num _ chunks = 0	num _ chunks	EMPTY
179	1428	2	-1	0	-1	for ( i = 0 , inlist = outlist = new _ list ; i < old _ num _ chunks ; ++ i , inlist += 5 )	EMPTY	EMPTY
179	1429	2	-1	0	-1	{	EMPTY	EMPTY
179	1430	2	-1	0	-1	if ( inlist [ 4 ] )	EMPTY	EMPTY
179	1431	2	-1	0	-1	{	EMPTY	EMPTY
179	1432	2	-1	0	-1	if ( outlist != inlist )	EMPTY	EMPTY
179	1433	2	-1	0	-1	memcpy ( outlist , inlist , 5 ) ;	EMPTY	EMPTY
179	1434	2	-1	0	-1	outlist += 5 ;	EMPTY	EMPTY
179	1435	2	-1	0	-1	++ num _ chunks ;	num _ chunks	EMPTY
179	1436	2	-1	0	-1	}	EMPTY	EMPTY
179	1437	3	-1	0	-1	}	EMPTY	EMPTY
179	1440	1	1	1	1	if ( num _ chunks == 0 )	num _ chunks	EMPTY
179	1441	2	-1	0	-1	{	EMPTY	EMPTY
179	1442	2	-1	0	-1	if ( png _ ptr -> chunk _ list != new _ list )	png _ ptr chunk _ list	EMPTY
179	1443	3	-1	0	-1	png _ free ( png _ ptr , new _ list ) ;	png _ free png _ ptr	EMPTY
179	1445	1	0	0	-1	new _ list = null ;	EMPTY	EMPTY
179	1446	2	-1	0	-1	}	EMPTY	EMPTY
179	1447	3	-1	0	-1	}	EMPTY	EMPTY
179	1449	1	0	0	-1	else	EMPTY	EMPTY
179	1450	3	-1	0	-1	num _ chunks = numconst ;	num _ chunks	EMPTY
179	1452	1	0	0	-1	png _ ptr -> num _ chunk _ list = num _ chunks ;	png _ ptr num _ chunk _ list num _ chunks	EMPTY
179	1454	1	0	0	0	if ( png _ ptr -> chunk _ list != new _ list )	png _ ptr chunk _ list	EMPTY
179	1455	2	-1	0	-1	{	EMPTY	EMPTY
179	1456	2	-1	0	-1	if ( png _ ptr -> chunk _ list != null )	png _ ptr chunk _ list	EMPTY
179	1457	3	-1	0	-1	png _ free ( png _ ptr  png _ ptr -> chunk _ list ) ;	png _ free png _ ptr png _ ptr chunk _ list	EMPTY
179	1459	1	0	0	-1	png _ ptr -> chunk _ list = new _ list ;	png _ ptr chunk _ list	EMPTY
179	1460	2	-1	0	-1	}	EMPTY	EMPTY
179	1461	2	-1	0	-1	}	EMPTY	EMPTY
179	1462	3	-1	0	-1	# endif	EMPTY	EMPTY
179	1464	1	0	0	0	# ifdef png _ read _ user _ chunks _ supported	EMPTY	EMPTY
179	1465	2	-1	0	-1	void pngapi	EMPTY	EMPTY
179	1466	2	-1	0	-1	png _ set _ read _ user _ chunk _ fn ( png _ structrp png _ ptr  png _ voidp user _ chunk _ ptr	png _ set _ read _ user _ chunk _ fn png _ structrp png _ ptr png _ voidp user _ chunk _ ptr	EMPTY
179	1467	2	-1	0	-1	png _ user _ chunk _ ptr read _ user _ chunk _ fn )	read _ user _ chunk _ fn	EMPTY
179	1468	2	-1	0	-1	{	EMPTY	EMPTY
179	1469	3	-1	0	-1	png _ debug ( numconst  strlit ) ;	EMPTY	EMPTY
179	1471	1	0	0	0	if ( png _ ptr == null )	png _ ptr	EMPTY
179	1472	3	-1	0	-1	return ;	EMPTY	EMPTY
179	1474	1	0	0	-1	png _ ptr -> read _ user _ chunk _ fn = read _ user _ chunk _ fn ;	png _ ptr read _ user _ chunk _ fn read _ user _ chunk _ fn	EMPTY
179	1475	2	-1	0	-1	png _ ptr -> user _ chunk _ ptr = user _ chunk _ ptr ;	png _ ptr user _ chunk _ ptr user _ chunk _ ptr	EMPTY
179	1476	2	-1	0	-1	}	EMPTY	EMPTY
179	1477	3	-1	0	-1	# endif	EMPTY	EMPTY
179	1479	1	0	0	0	# ifdef png _ info _ image _ supported	EMPTY	EMPTY
179	1480	2	-1	0	-1	void pngapi	EMPTY	EMPTY
179	1481	2	-1	0	-1	png _ set _ rows ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr	png _ set _ rows png _ ptr info _ ptr	EMPTY
179	1482	2	-1	0	-1	png _ bytepp row _ pointers )	png _ bytepp row _ pointers	EMPTY
179	1483	2	-1	0	-1	{	EMPTY	EMPTY
179	1484	3	-1	0	-1	png _ debug1 ( numconst  strlit  strlit ) ;	EMPTY	EMPTY
179	1486	1	0	0	0	if ( png _ ptr == null || info _ ptr == null )	png _ ptr info _ ptr	EMPTY
179	1487	3	-1	0	-1	return ;	EMPTY	EMPTY
179	1489	1	0	0	0	if ( info _ ptr -> row _ pointers != null &&	info _ ptr row _ pointers	EMPTY
179	1490	2	-1	0	-1	( info _ ptr -> row _ pointers != row _ pointers ) )	info _ ptr row _ pointers row _ pointers	EMPTY
179	1491	3	-1	0	-1	png _ free _ data ( png _ ptr  info _ ptr  png _ free _ rows  numconst ) ;	png _ free _ data png _ ptr info _ ptr	EMPTY
179	1493	1	0	0	-1	info _ ptr -> row _ pointers = row _ pointers ;	info _ ptr row _ pointers row _ pointers	EMPTY
179	1495	1	0	0	0	if ( row _ pointers != null )	row _ pointers	EMPTY
179	1496	2	-1	0	-1	info _ ptr -> valid |= png _ info _ idat ;	info _ ptr valid	EMPTY
179	1497	2	-1	0	-1	}	EMPTY	EMPTY
179	1498	3	-1	0	-1	# endif	EMPTY	EMPTY
179	1500	1	0	0	-1	void pngapi	EMPTY	EMPTY
179	1501	2	-1	0	-1	png _ set _ compression _ buffer _ size ( png _ structrp png _ ptr  png _ size _ t size )	png _ structrp png _ ptr png _ size _ t size	EMPTY
179	1502	2	-1	0	-1	{	EMPTY	EMPTY
179	1503	2	-1	0	-1	if ( png _ ptr == null )	png _ ptr	EMPTY
179	1504	3	-1	0	-1	return ;	EMPTY	EMPTY
179	1506	1	0	0	0	if ( size == numconst || size > png _ uint _ 31 _ max )	size size	EMPTY
179	1507	3	-1	0	-1	png _ error ( png _ ptr  strlit ) ;	png _ error png _ ptr	EMPTY
179	1509	1	0	0	-1	# ifdef png _ sequential _ read _ supported	EMPTY	EMPTY
179	1510	2	-1	0	-1	if ( ( png _ ptr -> mode & png _ is _ read _ struct ) != numconst )	png _ ptr mode	EMPTY
179	1511	2	-1	0	-1	{	EMPTY	EMPTY
179	1512	2	-1	0	-1	png _ ptr -> idat _ read _ size = ( png _ uint _ 32 ) size ;	png _ ptr idat _ read _ size size	EMPTY
179	1513	2	-1	0	-1	return	EMPTY	EMPTY
179	1514	2	-1	0	-1	}	EMPTY	EMPTY
179	1515	3	-1	0	-1	# endif	EMPTY	EMPTY
179	1517	1	0	0	-1	# ifdef png _ write _ supported	EMPTY	EMPTY
179	1518	2	-1	0	-1	if ( ( png _ ptr -> mode & png _ is _ read _ struct ) == numconst )	png _ ptr mode	EMPTY
179	1519	2	-1	0	-1	{	EMPTY	EMPTY
179	1520	2	-1	0	-1	if ( png _ ptr -> zowner != numconst )	png _ ptr zowner	EMPTY
179	1521	2	-1	0	-1	{	EMPTY	EMPTY
179	1522	2	-1	0	-1	png _ warning ( png _ ptr	png _ ptr	EMPTY
179	1523	3	-1	0	-1	strlit ) ;	EMPTY	EMPTY
179	1525	1	0	0	0	return ;	EMPTY	EMPTY
179	1526	3	-1	0	-1	}	EMPTY	EMPTY
179	1528	1	1	0	-1	# ifndef  _  _ coverity _  _	EMPTY	EMPTY
179	1532	2	-1	1	-1	if ( size > zlib _ io _ max )	size	EMPTY
179	1533	2	-1	0	-1	{	EMPTY	EMPTY
179	1534	2	-1	0	-1	png _ warning ( png _ ptr	png _ ptr	EMPTY
179	1535	2	-1	0	-1	strlit ) ;	EMPTY	EMPTY
179	1536	2	-1	1	-1	size = zlib _ io _ max ;	size	EMPTY
179	1537	2	-1	0	-1	}	EMPTY	EMPTY
179	1538	3	-1	0	-1	# endif	EMPTY	EMPTY
179	1540	1	1	0	1	if ( size < numconst )	size	EMPTY
179	1541	2	-1	0	-1	{	EMPTY	EMPTY
179	1545	2	-1	1	-1	png _ warning ( png _ ptr	png _ ptr	EMPTY
179	1546	3	-1	0	-1	strlit ) ;	EMPTY	EMPTY
179	1548	1	0	0	0	return	EMPTY	EMPTY
179	1549	3	-1	0	-1	}	EMPTY	EMPTY
179	1551	1	0	0	0	if ( png _ ptr -> zbuffer _ size != size )	png _ ptr zbuffer _ size size	EMPTY
179	1552	2	-1	0	-1	{	EMPTY	EMPTY
179	1553	2	-1	0	-1	png _ free _ buffer _ list ( png _ ptr  & png _ ptr -> zbuffer _ list ) ;	png _ ptr png _ ptr zbuffer _ list	EMPTY
179	1554	2	-1	0	-1	png _ ptr -> zbuffer _ size = ( uint ) size ;	png _ ptr zbuffer _ size uint size	EMPTY
179	1555	2	-1	0	-1	}	EMPTY	EMPTY
179	1556	2	-1	0	-1	}	EMPTY	EMPTY
179	1557	2	-1	0	-1	# endif	EMPTY	EMPTY
179	1558	3	-1	0	-1	}	EMPTY	EMPTY
179	1560	1	0	0	-1	void pngapi	EMPTY	EMPTY
179	1561	2	-1	0	-1	png _ set _ invalid ( png _ const _ structrp png _ ptr  png _ inforp info _ ptr  int mask )	png _ set _ invalid png _ ptr info _ ptr mask	EMPTY
179	1562	2	-1	0	-1	{	EMPTY	EMPTY
179	1563	2	-1	0	-1	if ( png _ ptr != null && info _ ptr != null )	png _ ptr info _ ptr	EMPTY
179	1564	2	-1	0	-1	info _ ptr -> valid &= ~ mask ;	info _ ptr valid mask	EMPTY
179	1565	3	-1	0	-1	}	EMPTY	EMPTY
179	1568	1	0	0	-1	# ifdef png _ set _ user _ limits _ supported	EMPTY	EMPTY
179	1570	1	1	0	-1	void pngapi	EMPTY	EMPTY
179	1571	2	-1	0	-1	png _ set _ user _ limits ( png _ structrp png _ ptr  png _ uint _ 32 user _ width _ max	png _ set _ user _ limits png _ structrp png _ ptr	EMPTY
179	1572	2	-1	0	-1	png _ uint _ 32 user _ height _ max )	EMPTY	EMPTY
179	1573	2	-1	0	-1	{	EMPTY	EMPTY
179	1578	2	-1	1	-1	if ( png _ ptr == null )	png _ ptr	EMPTY
179	1579	3	-1	0	-1	return	EMPTY	EMPTY
179	1581	1	0	0	-1	png _ ptr -> user _ width _ max = user _ width _ max	png _ ptr	EMPTY
179	1582	2	-1	0	-1	png _ ptr -> user _ height _ max = user _ height _ max	png _ ptr	EMPTY
179	1583	3	-1	0	-1	}	EMPTY	EMPTY
179	1586	1	0	0	-1	void pngapi	EMPTY	EMPTY
179	1587	2	-1	0	-1	png _ set _ chunk _ cache _ max ( png _ structrp png _ ptr  png _ uint _ 32 user _ chunk _ cache _ max )	png _ set _ chunk _ cache _ max png _ structrp png _ ptr user _ chunk _ cache _ max	EMPTY
179	1588	2	-1	0	-1	{	EMPTY	EMPTY
179	1589	2	-1	0	-1	if ( png _ ptr != null )	png _ ptr	EMPTY
179	1590	2	-1	0	-1	png _ ptr -> user _ chunk _ cache _ max = user _ chunk _ cache _ max	png _ ptr user _ chunk _ cache _ max user _ chunk _ cache _ max	EMPTY
179	1591	3	-1	0	-1	}	EMPTY	EMPTY
179	1594	1	1	0	-1	void pngapi	EMPTY	EMPTY
179	1595	2	-1	0	-1	png _ set _ chunk _ malloc _ max ( png _ structrp png _ ptr	png _ set _ chunk _ malloc _ max png _ structrp png _ ptr	EMPTY
179	1596	2	-1	0	-1	png _ alloc _ size _ t user _ chunk _ malloc _ max )	user _ chunk _ malloc _ max	EMPTY
179	1597	2	-1	0	-1	{	EMPTY	EMPTY
179	1598	2	-1	0	-1	if ( png _ ptr != null )	png _ ptr	EMPTY
179	1599	2	-1	0	-1	png _ ptr -> user _ chunk _ malloc _ max = user _ chunk _ malloc _ max	png _ ptr user _ chunk _ malloc _ max user _ chunk _ malloc _ max	EMPTY
179	1600	2	-1	0	-1	}	EMPTY	EMPTY
179	1601	3	-1	1	-1	# endif	EMPTY	EMPTY
179	1604	1	0	0	0	# ifdef png _ benign _ errors _ supported	EMPTY	EMPTY
179	1605	2	-1	0	-1	void pngapi	EMPTY	EMPTY
179	1606	2	-1	0	-1	png _ set _ benign _ errors ( png _ structrp png _ ptr  int allowed )	png _ structrp png _ ptr	EMPTY
179	1607	2	-1	0	-1	{	EMPTY	EMPTY
179	1608	3	-1	0	-1	png _ debug ( numconst  strlit ) ;	EMPTY	EMPTY
179	1616	1	1	1	1	if ( allowed != 0 )	EMPTY	EMPTY
179	1617	2	-1	0	-1	png _ ptr -> flags |= png _ flag _ benign _ errors _ warn |	png _ ptr flags	EMPTY
179	1618	3	-1	0	-1	png _ flag _ app _ warnings _ warn | png _ flag _ app _ errors _ warn ;	EMPTY	EMPTY
179	1620	1	1	0	-1	else	EMPTY	EMPTY
179	1621	2	-1	0	-1	png _ ptr -> flags &= ~ ( png _ flag _ benign _ errors _ warn |	png _ ptr flags	EMPTY
179	1622	2	-1	0	-1	png _ flag _ app _ warnings _ warn | png _ flag _ app _ errors _ warn )	EMPTY	EMPTY
179	1623	2	-1	0	-1	}	EMPTY	EMPTY
179	1624	3	-1	1	-1	# endif	EMPTY	EMPTY
179	1626	1	1	0	-1	# ifdef png _ check _ for _ invalid _ index _ supported	EMPTY	EMPTY
179	1635	2	-1	1	-1	void pngapi	EMPTY	EMPTY
179	1636	2	-1	0	-1	png _ set _ check _ for _ invalid _ index ( png _ structrp png _ ptr  int allowed )	png _ set _ check _ for _ invalid _ index png _ structrp png _ ptr	EMPTY
179	1637	2	-1	0	-1	{	EMPTY	EMPTY
179	1638	3	-1	0	-1	png _ debug ( numconst  strlit ) ;	EMPTY	EMPTY
179	1640	1	0	0	0	if ( allowed > 0 )	EMPTY	EMPTY
179	1641	3	-1	0	-1	png _ ptr -> num _ palette _ max = 0 ;	png _ ptr num _ palette _ max	EMPTY
179	1643	1	0	0	-1	else	EMPTY	EMPTY
179	1644	2	-1	0	-1	png _ ptr -> num _ palette _ max = - 1	png _ ptr num _ palette _ max	EMPTY
179	1645	2	-1	0	-1	}	EMPTY	EMPTY
179	1646	3	-1	0	-1	# endif	EMPTY	EMPTY
179	1648	1	0	0	-1	# if defined ( png _ text _ supported ) || defined ( png _ pcal _ supported ) || defined	EMPTY	EMPTY
179	1649	3	-1	0	-1	defined ( png _ iccp _ supported ) || defined ( png _ splt _ supported )	EMPTY	EMPTY
179	1660	1	0	0	-1	png _ uint _ 32	EMPTY	EMPTY
179	1661	2	-1	0	-1	png _ check _ keyword ( png _ structrp png _ ptr  png _ const _ charp key  png _ bytep new _ key )	png _ check _ keyword png _ structrp png _ ptr key new _ key	EMPTY
179	1662	2	-1	0	-1	{	EMPTY	EMPTY
179	1663	2	-1	0	-1	png _ const _ charp orig _ key = key ;	key	EMPTY
179	1664	2	-1	0	-1	png _ uint _ 32 key _ len = 0 ;	EMPTY	EMPTY
179	1665	2	-1	0	-1	int bad _ character = 0 ;	EMPTY	EMPTY
179	1666	3	-1	0	-1	int space = 1 ;	EMPTY	EMPTY
179	1668	1	0	0	-1	png _ debug ( numconst  strlit ) ;	EMPTY	EMPTY
179	1670	1	0	0	0	if ( key == null )	key	EMPTY
179	1671	2	-1	0	-1	{	EMPTY	EMPTY
179	1672	2	-1	0	-1	* new _ key = 0 ;	new _ key	EMPTY
179	1673	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
179	1674	3	-1	0	-1	}	EMPTY	EMPTY
179	1676	1	0	0	0	while ( * key && key _ len < numconst )	key	EMPTY
179	1677	2	-1	0	-1	{	EMPTY	EMPTY
179	1678	3	-1	0	-1	png _ byte ch = ( png _ byte ) * key ++ ;	key	EMPTY
179	1680	1	0	0	-1	)	EMPTY	EMPTY
179	1683	1	1	0	1	if ( space == numconst )	EMPTY	EMPTY
179	1684	2	-1	0	-1	{	EMPTY	EMPTY
179	1688	3	-1	1	-1	* new _ key ++ = 32 , ++ key _ len , space = 1	new _ key	EMPTY
179	1691	1	1	1	1	if ( ch != 32 )	EMPTY	EMPTY
179	1692	2	-1	0	-1	bad _ character = ch	EMPTY	EMPTY
179	1693	3	-1	0	-1	}	EMPTY	EMPTY
179	1695	1	1	0	1	if ( bad _ character == numconst )	EMPTY	EMPTY
179	1696	2	-1	1	-1	bad _ character = ch ;	EMPTY	EMPTY
179	1697	3	-1	0	-1	}	EMPTY	EMPTY
179	1699	1	0	0	-1	if ( key _ len > numconst && space != numconst )	EMPTY	EMPTY
179	1700	2	-1	0	-1	{	EMPTY	EMPTY
179	1701	2	-1	0	-1	-- key _ len , -- new _ key	new _ key	EMPTY
179	1702	2	-1	0	-1	if ( bad _ character == 0 )	EMPTY	EMPTY
179	1703	2	-1	0	-1	bad _ character = 32	EMPTY	EMPTY
179	1704	3	-1	0	-1	}	EMPTY	EMPTY
179	1707	1	1	1	1	* new _ key = 0	new _ key	EMPTY
179	1709	1	0	0	0	if ( key _ len == 0 )	EMPTY	EMPTY
179	1710	3	-1	0	-1	return 0	EMPTY	EMPTY
179	1712	1	1	0	-1	# ifdef png _ warnings _ supported	EMPTY	EMPTY
179	1714	2	-1	1	-1	if ( * key != numconst )	key	EMPTY
179	1715	3	-1	0	-1	png _ warning ( png _ ptr  strlit ) ;	png _ ptr	EMPTY
179	1717	1	0	0	-1	else if ( bad _ character != numconst )	EMPTY	EMPTY
179	1718	2	-1	0	-1	{	EMPTY	EMPTY
179	1719	3	-1	0	-1	png _ warning _ parameters ( p )	EMPTY	EMPTY
179	1721	1	0	0	-1	png _ warning _ parameter ( p  numconst  orig _ key ) ;	EMPTY	EMPTY
179	1722	3	-1	0	-1	png _ warning _ parameter _ signed ( p  numconst  png _ number _ format _ 02x  bad _ character ) ;	EMPTY	EMPTY
179	1724	1	1	0	-1	png _ formatted _ warning ( png _ ptr  p  strlit ) ;	png _ ptr	EMPTY
179	1725	2	-1	0	-1	}	EMPTY	EMPTY
179	1726	3	-1	1	-1	# endif	EMPTY	EMPTY
179	1728	1	1	0	1	return key _ len	EMPTY	EMPTY
179	1729	2	-1	0	-1	}	EMPTY	EMPTY
179	1730	2	-1	1	-1	# endif	EMPTY	EMPTY
179	1731	3	-1	1	-1	# endif	EMPTY	EMPTY
208	157	1	0	0	-1	static int tls1 _ p _ hash ( uint8 _ t * out  size _ t out _ len  const evp _ md * md	tls1 _ p _ hash out out _ len md	EMPTY
208	158	2	-1	0	-1	const uint8 _ t * secret  size _ t secret _ len	secret	EMPTY
208	159	2	-1	0	-1	const uint8 _ t * seed1  size _ t seed1 _ len	EMPTY	EMPTY
208	160	2	-1	0	-1	const uint8 _ t * seed2  size _ t seed2 _ len	EMPTY	EMPTY
208	161	2	-1	0	-1	const uint8 _ t * seed3  size _ t seed3 _ len ) {	EMPTY	EMPTY
208	162	2	-1	0	-1	hmac _ ctx ctx , ctx _ tmp , ctx _ init ;	ctx	EMPTY
208	163	2	-1	0	-1	uint8 _ t a1 [ evp _ max _ md _ size ] ;	EMPTY	EMPTY
208	164	2	-1	0	-1	unsigned a1 _ len ;	EMPTY	EMPTY
208	165	3	-1	0	-1	int ret = 0 ;	ret	EMPTY
208	167	1	0	0	0	size _ t chunk = evp _ md _ size ( md ) ;	evp _ md _ size md	EMPTY
208	169	1	0	0	0	hmac _ ctx _ init ( & ctx )	hmac _ ctx _ init ctx	EMPTY
208	170	2	-1	0	-1	hmac _ ctx _ init ( & ctx _ tmp )	hmac _ ctx _ init	EMPTY
208	171	2	-1	0	-1	hmac _ ctx _ init ( & ctx _ init )	hmac _ ctx _ init	EMPTY
208	172	2	-1	0	-1	if ( ! hmac _ init _ ex ( & ctx _ init , secret , secret _ len , md , null ) ||	hmac _ init _ ex secret md	EMPTY
208	173	2	-1	0	-1	! hmac _ ctx _ copy _ ex ( & ctx , & ctx _ init ) ||	hmac _ ctx _ copy _ ex ctx	EMPTY
208	174	2	-1	0	-1	! hmac _ update ( & ctx , seed1 , seed1 _ len ) ||	hmac _ update ctx	EMPTY
208	175	2	-1	0	-1	! hmac _ update ( & ctx , seed2 , seed2 _ len ) ||	hmac _ update ctx	EMPTY
208	176	2	-1	0	-1	! hmac _ update ( & ctx , seed3 , seed3 _ len ) ||	hmac _ update ctx	EMPTY
208	177	2	-1	0	-1	! hmac _ final ( & ctx , a1 , & a1 _ len ) ) {	hmac _ final ctx	EMPTY
208	178	2	-1	0	-1	goto err ;	EMPTY	EMPTY
208	179	3	-1	0	-1	}	EMPTY	EMPTY
208	181	1	1	0	1	for ( ; ; ) {	EMPTY	EMPTY
208	182	2	-1	0	-1	unsigned len ;	len	EMPTY
208	183	2	-1	0	-1	uint8 _ t hmac [ evp _ max _ md _ size ] ;	EMPTY	EMPTY
208	184	2	-1	0	-1	if ( ! hmac _ ctx _ copy _ ex ( & ctx  & ctx _ init ) ||	hmac _ ctx _ copy _ ex ctx	EMPTY
208	185	2	-1	0	-1	! hmac _ update ( & ctx  a1  a1 _ len ) ||	hmac _ update ctx	EMPTY
208	187	2	-1	1	-1	( out _ len > chunk && ! hmac _ ctx _ copy _ ex ( & ctx _ tmp  & ctx ) ) ||	out _ len hmac _ ctx _ copy _ ex ctx	EMPTY
208	188	2	-1	0	-1	! hmac _ update ( & ctx  seed1  seed1 _ len ) ||	hmac _ update ctx	EMPTY
208	189	2	-1	0	-1	! hmac _ update ( & ctx  seed2  seed2 _ len ) ||	hmac _ update ctx	EMPTY
208	190	2	-1	0	-1	! hmac _ update ( & ctx  seed3  seed3 _ len ) ||	hmac _ update ctx	EMPTY
208	191	2	-1	0	-1	! hmac _ final ( & ctx  hmac  & len ) ) {	hmac _ final ctx len	EMPTY
208	192	2	-1	0	-1	goto err	EMPTY	EMPTY
208	193	2	-1	0	-1	}	EMPTY	EMPTY
208	194	3	-1	0	-1	assert ( len == chunk ) ;	len	EMPTY
208	197	1	1	1	1	if ( len > out _ len ) {	len out _ len	EMPTY
208	198	2	-1	0	-1	len = out _ len ;	len out _ len	EMPTY
208	199	2	-1	0	-1	}	EMPTY	EMPTY
208	200	2	-1	0	-1	unsigned i ;	i	EMPTY
208	201	2	-1	0	-1	for ( i = 0 ; i < len ; i ++ ) {	i i len i	EMPTY
208	202	2	-1	0	-1	out [ i ] ^= hmac [ i ] ;	out i i	EMPTY
208	203	2	-1	0	-1	}	EMPTY	EMPTY
208	204	2	-1	0	-1	out += len	out len	EMPTY
208	205	3	-1	0	-1	out _ len -= len	out _ len len	EMPTY
208	207	1	0	0	0	if ( out _ len == 0 ) {	out _ len	EMPTY
208	208	2	-1	0	-1	break ;	EMPTY	EMPTY
208	209	3	-1	0	-1	}	EMPTY	EMPTY
208	212	1	1	1	1	if ( ! hmac _ final ( & ctx _ tmp , a1 , & a1 _ len ) ) {	hmac _ final	EMPTY
208	213	2	-1	0	-1	goto err ;	EMPTY	EMPTY
208	214	2	-1	0	-1	}	EMPTY	EMPTY
208	215	3	-1	0	-1	}	EMPTY	EMPTY
208	217	1	0	0	-1	ret = numconst ;	ret	EMPTY
208	219	1	0	0	-1	err :	EMPTY	EMPTY
208	220	2	-1	0	-1	hmac _ ctx _ cleanup ( & ctx ) ;	hmac _ ctx _ cleanup ctx	EMPTY
208	221	2	-1	0	-1	hmac _ ctx _ cleanup ( & ctx _ tmp ) ;	hmac _ ctx _ cleanup	EMPTY
208	222	2	-1	0	-1	hmac _ ctx _ cleanup ( & ctx _ init ) ;	hmac _ ctx _ cleanup	EMPTY
208	223	2	-1	0	-1	openssl _ cleanse ( a1  sizeof ( a1 ) ) ;	openssl _ cleanse	EMPTY
208	224	2	-1	0	-1	return ret ;	ret	EMPTY
208	225	3	-1	0	-1	}	EMPTY	EMPTY
208	227	1	0	0	-1	int tls1 _ prf ( ssl * ssl  uint8 _ t * out  size _ t out _ len  const uint8 _ t * secret	tls1 _ prf ssl out out _ len secret	EMPTY
208	228	2	-1	0	-1	size _ t secret _ len  const char * label  size _ t label _ len	EMPTY	EMPTY
208	229	2	-1	0	-1	const uint8 _ t * seed1  size _ t seed1 _ len	EMPTY	EMPTY
208	230	3	-1	0	-1	const uint8 _ t * seed2  size _ t seed2 _ len ) {	EMPTY	EMPTY
208	232	1	0	0	0	if ( out _ len == numconst ) {	out _ len	EMPTY
208	233	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
208	234	3	-1	0	-1	}	EMPTY	EMPTY
208	236	1	0	0	0	memset ( out  numconst  out _ len ) ;	out out _ len	EMPTY
208	238	1	1	0	1	uint32 _ t algorithm _ prf = ssl _ get _ algorithm _ prf ( ssl ) ;	algorithm _ prf ssl	EMPTY
208	239	2	-1	0	-1	if ( algorithm _ prf == ssl _ handshake _ mac _ default ) {	algorithm _ prf	EMPTY
208	242	2	-1	1	-1	size _ t secret _ half = secret _ len - ( secret _ len / 2 ) ;	secret _ half	EMPTY
208	243	2	-1	0	-1	if ( ! tls1 _ p _ hash ( out , out _ len , evp _ md5 ( ) , secret , secret _ half ,	tls1 _ p _ hash out out _ len secret secret _ half	EMPTY
208	244	2	-1	0	-1	( const uint8 _ t * ) label , label _ len , seed1 , seed1 _ len , seed2 ,	EMPTY	EMPTY
208	245	2	-1	0	-1	seed2 _ len ) ) {	EMPTY	EMPTY
208	246	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
208	247	3	-1	0	-1	}	EMPTY	EMPTY
208	250	1	1	1	-1	secret = secret + ( secret _ len - secret _ half )	secret secret secret _ half	EMPTY
208	251	2	-1	0	-1	secret _ len = secret _ half	secret _ half	EMPTY
208	252	3	-1	0	-1	}	EMPTY	EMPTY
208	254	1	0	0	0	if ( ! tls1 _ p _ hash ( out  out _ len  ssl _ get _ handshake _ digest ( algorithm _ prf )	tls1 _ p _ hash out out _ len ssl _ get _ handshake _ digest algorithm _ prf	EMPTY
208	255	2	-1	0	-1	secret  secret _ len  ( const uint8 _ t * ) label  label _ len	secret	EMPTY
208	256	2	-1	0	-1	seed1  seed1 _ len  seed2  seed2 _ len ) ) {	EMPTY	EMPTY
208	257	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
208	258	3	-1	0	-1	}	EMPTY	EMPTY
208	260	1	0	0	0	return numconst ;	EMPTY	EMPTY
208	261	3	-1	0	-1	}	EMPTY	EMPTY
208	263	1	0	0	-1	static int tls1 _ generate _ key _ block ( ssl * ssl  uint8 _ t * out  size _ t out _ len ) {	ssl out out _ len	EMPTY
208	264	2	-1	0	-1	return ssl -> enc _ method -> prf (	ssl enc _ method	EMPTY
208	265	2	-1	0	-1	ssl  out  out _ len  ssl -> session -> master _ key	ssl out out _ len ssl session	EMPTY
208	266	2	-1	0	-1	ssl -> session -> master _ key _ length  tls _ md _ key _ expansion _ const	ssl session	EMPTY
208	267	2	-1	0	-1	tls _ md _ key _ expansion _ const _ size  ssl -> s3 -> server _ random  ssl3 _ random _ size	ssl s3	EMPTY
208	268	2	-1	0	-1	ssl -> s3 -> client _ random  ssl3 _ random _ size ) ;	ssl s3 client _ random	EMPTY
208	269	3	-1	0	-1	}	EMPTY	EMPTY
208	271	1	1	0	-1	int tls1 _ change _ cipher _ state ( ssl * ssl  int which ) {	ssl	EMPTY
208	274	2	-1	1	-1	const char is _ read = ( which & ssl3 _ cc _ read ) != 0 ;	is _ read	EMPTY
208	278	2	-1	1	-1	const char use _ client _ keys = which == ssl3 _ change _ cipher _ client _ write ||	use _ client _ keys	EMPTY
208	279	2	-1	0	-1	which == ssl3 _ change _ cipher _ server _ read ;	EMPTY	EMPTY
208	280	2	-1	0	-1	const uint8 _ t * client _ write _ mac _ secret , * server _ write _ mac _ secret , * mac _ secret ;	EMPTY	EMPTY
208	281	2	-1	0	-1	const uint8 _ t * client _ write _ key , * server _ write _ key , * key ;	key	EMPTY
208	282	2	-1	0	-1	const uint8 _ t * client _ write _ iv , * server _ write _ iv , * iv ;	iv	EMPTY
208	283	2	-1	0	-1	const evp _ aead * aead = ssl -> s3 -> tmp . new _ aead ;	aead ssl s3 tmp	EMPTY
208	284	2	-1	0	-1	size _ t key _ len , iv _ len , mac _ secret _ len ;	key _ len iv _ len	EMPTY
208	285	3	-1	0	-1	const uint8 _ t * key _ data ;	EMPTY	EMPTY
208	288	1	1	1	1	if ( is _ read ) {	is _ read	EMPTY
208	289	2	-1	0	-1	if ( ssl _ is _ dtls ( ssl ) ) {	ssl	EMPTY
208	290	2	-1	0	-1	ssl -> d1 -> r _ epoch ++ ;	ssl d1 r _ epoch	EMPTY
208	291	2	-1	0	-1	memset ( & ssl -> d1 -> bitmap , 0 , sizeof ( ssl -> d1 -> bitmap ) ) ;	ssl d1 bitmap ssl d1 bitmap	EMPTY
208	292	2	-1	0	-1	}	EMPTY	EMPTY
208	293	2	-1	0	-1	memset ( ssl -> s3 -> read _ sequence , 0 , sizeof ( ssl -> s3 -> read _ sequence ) ) ;	ssl s3 ssl s3	EMPTY
208	294	2	-1	0	-1	} else {	EMPTY	EMPTY
208	295	2	-1	0	-1	if ( ssl _ is _ dtls ( ssl ) ) {	ssl	EMPTY
208	296	2	-1	0	-1	ssl -> d1 -> w _ epoch ++ ;	ssl d1	EMPTY
208	297	2	-1	0	-1	memcpy ( ssl -> d1 -> last _ write _ sequence , ssl -> s3 -> write _ sequence ,	ssl d1 last _ write _ sequence ssl s3	EMPTY
208	298	2	-1	0	-1	sizeof ( ssl -> s3 -> write _ sequence ) ) ;	ssl s3	EMPTY
208	299	2	-1	0	-1	}	EMPTY	EMPTY
208	300	2	-1	0	-1	memset ( ssl -> s3 -> write _ sequence , 0 , sizeof ( ssl -> s3 -> write _ sequence ) ) ;	ssl s3 ssl s3	EMPTY
208	301	3	-1	0	-1	}	EMPTY	EMPTY
208	303	1	0	0	-1	mac _ secret _ len = ssl -> s3 -> tmp . new _ mac _ secret _ len	ssl s3 tmp	EMPTY
208	304	3	-1	0	-1	iv _ len = ssl -> s3 -> tmp . new _ fixed _ iv _ len	iv _ len ssl s3 tmp	EMPTY
208	306	1	0	0	0	if ( aead == null ) {	aead	EMPTY
208	307	2	-1	0	-1	openssl _ put _ error ( ssl , err _ r _ internal _ error ) ;	EMPTY	EMPTY
208	308	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
208	309	3	-1	0	-1	}	EMPTY	EMPTY
208	311	1	1	0	-1	key _ len = evp _ aead _ key _ length ( aead )	key _ len evp _ aead _ key _ length aead	EMPTY
208	312	2	-1	0	-1	if ( mac _ secret _ len > numconst ) {	EMPTY	EMPTY
208	316	2	-1	1	-1	if ( key _ len < mac _ secret _ len + iv _ len ) {	key _ len iv _ len	EMPTY
208	317	2	-1	0	-1	openssl _ put _ error ( ssl , err _ r _ internal _ error ) ;	EMPTY	EMPTY
208	318	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
208	319	2	-1	0	-1	}	EMPTY	EMPTY
208	320	2	-1	0	-1	key _ len -= mac _ secret _ len + iv _ len	key _ len iv _ len	EMPTY
208	321	3	-1	0	-1	}	EMPTY	EMPTY
208	323	1	0	0	-1	key _ data = ssl -> s3 -> tmp . key _ block ;	ssl s3 tmp	EMPTY
208	324	2	-1	0	-1	client _ write _ mac _ secret = key _ data ;	EMPTY	EMPTY
208	325	2	-1	0	-1	key _ data += mac _ secret _ len ;	EMPTY	EMPTY
208	326	2	-1	0	-1	server _ write _ mac _ secret = key _ data ;	EMPTY	EMPTY
208	327	2	-1	0	-1	key _ data += mac _ secret _ len ;	EMPTY	EMPTY
208	328	2	-1	0	-1	client _ write _ key = key _ data ;	EMPTY	EMPTY
208	329	2	-1	0	-1	key _ data += key _ len ;	key _ len	EMPTY
208	330	2	-1	0	-1	server _ write _ key = key _ data ;	EMPTY	EMPTY
208	331	2	-1	0	-1	key _ data += key _ len ;	key _ len	EMPTY
208	332	2	-1	0	-1	client _ write _ iv = key _ data ;	EMPTY	EMPTY
208	333	2	-1	0	-1	key _ data += iv _ len ;	iv _ len	EMPTY
208	334	2	-1	0	-1	server _ write _ iv = key _ data ;	EMPTY	EMPTY
208	335	3	-1	0	-1	key _ data += iv _ len ;	iv _ len	EMPTY
208	337	1	0	0	0	if ( use _ client _ keys ) {	use _ client _ keys	EMPTY
208	338	2	-1	0	-1	mac _ secret = client _ write _ mac _ secret ;	EMPTY	EMPTY
208	339	2	-1	0	-1	key = client _ write _ key ;	key	EMPTY
208	340	2	-1	0	-1	iv = client _ write _ iv ;	iv	EMPTY
208	341	2	-1	0	-1	} else {	EMPTY	EMPTY
208	342	2	-1	0	-1	mac _ secret = server _ write _ mac _ secret ;	EMPTY	EMPTY
208	343	2	-1	0	-1	key = server _ write _ key ;	key	EMPTY
208	344	2	-1	0	-1	iv = server _ write _ iv ;	iv	EMPTY
208	345	3	-1	0	-1	}	EMPTY	EMPTY
208	347	1	0	0	0	if ( key _ data - ssl -> s3 -> tmp . key _ block != ssl -> s3 -> tmp . key _ block _ length ) {	ssl s3 tmp ssl s3 tmp	EMPTY
208	348	2	-1	0	-1	openssl _ put _ error ( ssl  err _ r _ internal _ error ) ;	EMPTY	EMPTY
208	349	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
208	350	3	-1	0	-1	}	EMPTY	EMPTY
208	352	1	0	0	0	if ( is _ read ) {	is _ read	EMPTY
208	353	2	-1	0	-1	ssl _ aead _ ctx _ free ( ssl -> aead _ read _ ctx ) ;	ssl _ aead _ ctx _ free ssl	EMPTY
208	354	2	-1	0	-1	ssl -> aead _ read _ ctx = ssl _ aead _ ctx _ new (	ssl ssl _ aead _ ctx _ new	EMPTY
208	355	2	-1	0	-1	evp _ aead _ open  ssl3 _ version _ from _ wire ( ssl  ssl -> version )	ssl3 _ version _ from _ wire ssl ssl version	EMPTY
208	356	2	-1	0	-1	ssl -> s3 -> tmp . new _ cipher  key  key _ len  mac _ secret  mac _ secret _ len  iv	ssl s3 tmp new _ cipher key key _ len iv	EMPTY
208	357	2	-1	0	-1	iv _ len ) ;	iv _ len	EMPTY
208	358	2	-1	0	-1	return ssl -> aead _ read _ ctx != null ;	ssl	EMPTY
208	359	3	-1	0	-1	}	EMPTY	EMPTY
208	361	1	0	0	0	ssl _ aead _ ctx _ free ( ssl -> aead _ write _ ctx ) ;	ssl _ aead _ ctx _ free ssl	EMPTY
208	362	2	-1	0	-1	ssl -> aead _ write _ ctx = ssl _ aead _ ctx _ new (	ssl ssl _ aead _ ctx _ new	EMPTY
208	363	2	-1	0	-1	evp _ aead _ seal  ssl3 _ version _ from _ wire ( ssl  ssl -> version )	ssl3 _ version _ from _ wire ssl ssl version	EMPTY
208	364	2	-1	0	-1	ssl -> s3 -> tmp . new _ cipher  key  key _ len  mac _ secret  mac _ secret _ len  iv	ssl s3 tmp new _ cipher key key _ len iv	EMPTY
208	365	2	-1	0	-1	iv _ len ) ;	iv _ len	EMPTY
208	366	2	-1	0	-1	return ssl -> aead _ write _ ctx != null ;	ssl	EMPTY
208	367	3	-1	0	-1	}	EMPTY	EMPTY
208	369	1	0	0	-1	int tls1 _ setup _ key _ block ( ssl * ssl ) {	ssl	EMPTY
208	370	2	-1	0	-1	uint8 _ t * p ;	p	EMPTY
208	371	2	-1	0	-1	const evp _ aead * aead = null ;	aead	EMPTY
208	372	2	-1	0	-1	int ret = numconst ;	ret	EMPTY
208	373	2	-1	0	-1	size _ t mac _ secret _ len  fixed _ iv _ len  variable _ iv _ len  key _ len ;	key _ len	EMPTY
208	374	3	-1	0	-1	size _ t key _ block _ len ;	EMPTY	EMPTY
208	376	1	0	0	0	if ( ssl -> s3 -> tmp . key _ block _ length != numconst ) {	ssl s3 tmp	EMPTY
208	377	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
208	378	3	-1	0	-1	}	EMPTY	EMPTY
208	380	1	0	0	0	if ( ssl -> session -> cipher == null ) {	ssl session cipher	EMPTY
208	381	2	-1	0	-1	goto cipher _ unavailable _ err ;	EMPTY	EMPTY
208	382	3	-1	0	-1	}	EMPTY	EMPTY
208	384	1	1	0	1	if ( ! ssl _ cipher _ get _ evp _ aead ( & aead  & mac _ secret _ len  & fixed _ iv _ len	ssl _ cipher _ get _ evp _ aead aead	EMPTY
208	385	2	-1	0	-1	ssl -> session -> cipher	ssl session cipher	EMPTY
208	386	2	-1	0	-1	ssl3 _ version _ from _ wire ( ssl  ssl -> version ) ) ) {	ssl3 _ version _ from _ wire ssl ssl version	EMPTY
208	387	2	-1	0	-1	goto cipher _ unavailable _ err ;	EMPTY	EMPTY
208	388	2	-1	0	-1	}	EMPTY	EMPTY
208	389	2	-1	0	-1	key _ len = evp _ aead _ key _ length ( aead ) ;	key _ len evp _ aead _ key _ length aead	EMPTY
208	390	2	-1	0	-1	variable _ iv _ len = evp _ aead _ nonce _ length ( aead ) ;	evp _ aead _ nonce _ length aead	EMPTY
208	391	2	-1	0	-1	if ( mac _ secret _ len > numconst ) {	EMPTY	EMPTY
208	395	2	-1	1	-1	if ( key _ len < mac _ secret _ len + fixed _ iv _ len ) {	key _ len	EMPTY
208	396	2	-1	0	-1	openssl _ put _ error ( ssl , err _ r _ internal _ error ) ;	EMPTY	EMPTY
208	397	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
208	398	2	-1	0	-1	}	EMPTY	EMPTY
208	399	2	-1	0	-1	key _ len -= mac _ secret _ len + fixed _ iv _ len	key _ len	EMPTY
208	400	2	-1	0	-1	}	EMPTY	EMPTY
208	402	2	-1	1	-1	if ( variable _ iv _ len < fixed _ iv _ len ) {	EMPTY	EMPTY
208	403	2	-1	0	-1	openssl _ put _ error ( ssl , err _ r _ internal _ error ) ;	EMPTY	EMPTY
208	404	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
208	405	2	-1	0	-1	}	EMPTY	EMPTY
208	406	2	-1	0	-1	variable _ iv _ len -= fixed _ iv _ len	EMPTY	EMPTY
208	407	3	-1	0	-1	}	EMPTY	EMPTY
208	409	1	0	0	-1	assert ( mac _ secret _ len < numconst ) ;	EMPTY	EMPTY
208	410	2	-1	0	-1	assert ( fixed _ iv _ len < numconst ) ;	EMPTY	EMPTY
208	411	3	-1	0	-1	assert ( variable _ iv _ len < numconst ) ;	EMPTY	EMPTY
208	413	1	0	0	-1	ssl -> s3 -> tmp . new _ aead = aead ;	ssl s3 tmp aead	EMPTY
208	414	2	-1	0	-1	ssl -> s3 -> tmp . new _ mac _ secret _ len = ( uint8 _ t ) mac _ secret _ len ;	ssl s3 tmp	EMPTY
208	415	2	-1	0	-1	ssl -> s3 -> tmp . new _ fixed _ iv _ len = ( uint8 _ t ) fixed _ iv _ len ;	ssl s3 tmp	EMPTY
208	416	3	-1	0	-1	ssl -> s3 -> tmp . new _ variable _ iv _ len = ( uint8 _ t ) variable _ iv _ len ;	ssl s3 tmp	EMPTY
208	418	1	0	0	-1	key _ block _ len = key _ len + mac _ secret _ len + fixed _ iv _ len ;	key _ len	EMPTY
208	419	3	-1	0	-1	key _ block _ len *= numconst ;	EMPTY	EMPTY
208	421	1	0	0	0	ssl3 _ cleanup _ key _ block ( ssl ) ;	ssl	EMPTY
208	423	1	0	0	-1	p = ( uint8 _ t * ) openssl _ malloc ( key _ block _ len ) ;	p	EMPTY
208	424	2	-1	0	-1	if ( p == null ) {	p	EMPTY
208	425	2	-1	0	-1	openssl _ put _ error ( ssl  err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
208	426	2	-1	0	-1	goto err ;	EMPTY	EMPTY
208	427	3	-1	0	-1	}	EMPTY	EMPTY
208	429	1	0	0	-1	ssl -> s3 -> tmp . key _ block _ length = key _ block _ len ;	ssl s3 tmp	EMPTY
208	430	3	-1	0	-1	ssl -> s3 -> tmp . key _ block = p ;	ssl s3 tmp p	EMPTY
208	432	1	0	0	0	if ( ! tls1 _ generate _ key _ block ( ssl  p  key _ block _ len ) ) {	ssl p	EMPTY
208	433	2	-1	0	-1	goto err ;	EMPTY	EMPTY
208	434	3	-1	0	-1	}	EMPTY	EMPTY
208	436	1	0	0	-1	ret = numconst ;	ret	EMPTY
208	438	1	0	0	-1	err :	EMPTY	EMPTY
208	439	3	-1	0	-1	return ret ;	ret	EMPTY
208	441	1	0	0	-1	cipher _ unavailable _ err :	EMPTY	EMPTY
208	442	2	-1	0	-1	openssl _ put _ error ( ssl  ssl _ r _ cipher _ or _ hash _ unavailable ) ;	EMPTY	EMPTY
208	443	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
208	444	3	-1	0	-1	}	EMPTY	EMPTY
208	446	1	0	0	-1	int tls1 _ cert _ verify _ mac ( ssl * ssl  int md _ nid  uint8 _ t * out ) {	ssl out	EMPTY
208	447	2	-1	0	-1	const evp _ md _ ctx * ctx _ template ;	EMPTY	EMPTY
208	448	2	-1	0	-1	if ( md _ nid == nid _ md5 ) {	EMPTY	EMPTY
208	449	2	-1	0	-1	ctx _ template = & ssl -> s3 -> handshake _ md5 ;	ssl s3 handshake _ md5	EMPTY
208	450	2	-1	0	-1	if ( md _ nid == evp _ md _ ctx _ type ( & ssl -> s3 -> handshake _ hash ) ) {	evp _ md _ ctx _ type ssl s3 handshake _ hash	EMPTY
208	451	2	-1	0	-1	ctx _ template = & ssl -> s3 -> handshake _ hash ;	ssl s3 handshake _ hash	EMPTY
208	452	2	-1	0	-1	} else {	EMPTY	EMPTY
208	453	2	-1	0	-1	openssl _ put _ error ( ssl  ssl _ r _ no _ required _ digest ) ;	EMPTY	EMPTY
208	454	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
208	455	3	-1	0	-1	}	EMPTY	EMPTY
208	457	1	0	0	0	evp _ md _ ctx ctx ;	ctx	EMPTY
208	458	2	-1	0	-1	evp _ md _ ctx _ init ( & ctx ) ;	evp _ md _ ctx _ init ctx	EMPTY
208	459	2	-1	0	-1	if ( ! evp _ md _ ctx _ copy _ ex ( & ctx  ctx _ template ) ) {	evp _ md _ ctx _ copy _ ex ctx	EMPTY
208	460	2	-1	0	-1	evp _ md _ ctx _ cleanup ( & ctx ) ;	evp _ md _ ctx _ cleanup ctx	EMPTY
208	461	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
208	462	2	-1	0	-1	}	EMPTY	EMPTY
208	463	2	-1	0	-1	unsigned ret ;	ret	EMPTY
208	464	2	-1	0	-1	evp _ digestfinal _ ex ( & ctx  out  & ret ) ;	evp _ digestfinal _ ex ctx out ret	EMPTY
208	465	2	-1	0	-1	evp _ md _ ctx _ cleanup ( & ctx ) ;	evp _ md _ ctx _ cleanup ctx	EMPTY
208	466	2	-1	0	-1	return ret ;	ret	EMPTY
208	467	3	-1	0	-1	}	EMPTY	EMPTY
208	469	1	0	0	-1	static int append _ digest ( const evp _ md _ ctx * ctx  uint8 _ t * out  size _ t * out _ len	ctx out out _ len	EMPTY
208	470	2	-1	0	-1	size _ t max _ out ) {	max _ out	EMPTY
208	471	2	-1	0	-1	int ret = numconst ;	ret	EMPTY
208	472	2	-1	0	-1	evp _ md _ ctx ctx _ copy ;	EMPTY	EMPTY
208	473	3	-1	0	-1	evp _ md _ ctx _ init ( & ctx _ copy ) ;	evp _ md _ ctx _ init	EMPTY
208	475	1	0	0	0	if ( evp _ md _ ctx _ size ( ctx ) > max _ out ) {	evp _ md _ ctx _ size ctx max _ out	EMPTY
208	476	2	-1	0	-1	openssl _ put _ error ( ssl  ssl _ r _ buffer _ too _ small ) ;	EMPTY	EMPTY
208	477	2	-1	0	-1	goto err ;	EMPTY	EMPTY
208	478	2	-1	0	-1	}	EMPTY	EMPTY
208	479	2	-1	0	-1	unsigned len ;	len	EMPTY
208	480	2	-1	0	-1	if ( ! evp _ md _ ctx _ copy _ ex ( & ctx _ copy  ctx ) ||	evp _ md _ ctx _ copy _ ex ctx	EMPTY
208	481	2	-1	0	-1	! evp _ digestfinal _ ex ( & ctx _ copy  out  & len ) ) {	evp _ digestfinal _ ex out len	EMPTY
208	482	2	-1	0	-1	goto err ;	EMPTY	EMPTY
208	483	2	-1	0	-1	}	EMPTY	EMPTY
208	484	3	-1	0	-1	assert ( len == evp _ md _ ctx _ size ( ctx ) ) ;	len evp _ md _ ctx _ size ctx	EMPTY
208	487	1	0	0	-1	ret = numconst ;	ret	EMPTY
208	489	1	0	0	-1	err :	EMPTY	EMPTY
208	490	2	-1	0	-1	evp _ md _ ctx _ cleanup ( & ctx _ copy ) ;	evp _ md _ ctx _ cleanup	EMPTY
208	491	2	-1	0	-1	return ret ;	ret	EMPTY
208	492	3	-1	0	-1	}	EMPTY	EMPTY
208	499	1	0	0	-1	int tls1 _ handshake _ digest ( ssl * ssl  uint8 _ t * out  size _ t out _ len ) {	tls1 _ handshake _ digest ssl out out _ len	EMPTY
208	500	2	-1	0	-1	size _ t md5 _ len = 0 ;	EMPTY	EMPTY
208	501	2	-1	0	-1	if ( evp _ md _ ctx _ md ( & ssl -> s3 -> handshake _ md5 ) != null &&	evp _ md _ ctx _ md ssl s3 handshake _ md5	EMPTY
208	502	2	-1	0	-1	! append _ digest ( & ssl -> s3 -> handshake _ md5 , out , & md5 _ len , out _ len ) ) {	ssl s3 handshake _ md5 out out _ len	EMPTY
208	503	2	-1	0	-1	return - 1 ;	EMPTY	EMPTY
208	504	3	-1	0	-1	}	EMPTY	EMPTY
208	506	1	0	0	0	size _ t len ;	len	EMPTY
208	507	2	-1	0	-1	if ( ! append _ digest ( & ssl -> s3 -> handshake _ hash , out + md5 _ len , & len ,	ssl s3 handshake _ hash out len	EMPTY
208	508	2	-1	0	-1	out _ len - md5 _ len ) ) {	out _ len	EMPTY
208	509	2	-1	0	-1	return - 1 ;	EMPTY	EMPTY
208	510	3	-1	0	-1	}	EMPTY	EMPTY
208	512	1	0	0	0	return ( int ) ( md5 _ len + len )	len	EMPTY
208	513	3	-1	0	-1	}	EMPTY	EMPTY
208	515	1	0	0	-1	int tls1 _ final _ finish _ mac ( ssl * ssl  const char * str  int slen  uint8 _ t * out ) {	ssl str slen out	EMPTY
208	516	2	-1	0	-1	uint8 _ t buf [ 2 * evp _ max _ md _ size ] ;	buf	EMPTY
208	517	2	-1	0	-1	int err = 0 ;	EMPTY	EMPTY
208	518	3	-1	0	-1	int digests _ len ;	EMPTY	EMPTY
208	522	1	1	1	-1	assert ( ssl -> s3 -> handshake _ buffer == null ) ;	ssl s3 handshake _ buffer	EMPTY
208	524	1	0	0	-1	digests _ len = tls1 _ handshake _ digest ( ssl , buf , sizeof ( buf ) )	tls1 _ handshake _ digest ssl buf buf	EMPTY
208	525	2	-1	0	-1	if ( digests _ len < 0 ) {	EMPTY	EMPTY
208	526	2	-1	0	-1	err = 1 ;	EMPTY	EMPTY
208	527	2	-1	0	-1	digests _ len = 0 ;	EMPTY	EMPTY
208	528	3	-1	0	-1	}	EMPTY	EMPTY
208	530	1	0	0	0	if ( ! ssl -> enc _ method -> prf ( ssl , out , 12 , ssl -> session -> master _ key ,	ssl enc _ method ssl out ssl session	EMPTY
208	531	2	-1	0	-1	ssl -> session -> master _ key _ length , str , slen , buf ,	ssl session str slen buf	EMPTY
208	532	2	-1	0	-1	digests _ len , null , 0 ) ) {	EMPTY	EMPTY
208	533	2	-1	0	-1	err = 1 ;	EMPTY	EMPTY
208	534	3	-1	0	-1	}	EMPTY	EMPTY
208	536	1	0	0	0	if ( err ) {	EMPTY	EMPTY
208	537	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
208	538	2	-1	0	-1	} else {	EMPTY	EMPTY
208	539	2	-1	0	-1	return 12 ;	EMPTY	EMPTY
208	540	2	-1	0	-1	}	EMPTY	EMPTY
208	541	3	-1	0	-1	}	EMPTY	EMPTY
208	543	1	0	0	-1	int tls1 _ generate _ master _ secret ( ssl * ssl  uint8 _ t * out	ssl out	EMPTY
208	544	2	-1	0	-1	const uint8 _ t * premaster	EMPTY	EMPTY
208	545	2	-1	0	-1	size _ t premaster _ len ) {	EMPTY	EMPTY
208	546	2	-1	0	-1	if ( ssl -> s3 -> tmp . extended _ master _ secret ) {	ssl s3 tmp extended _ master _ secret	EMPTY
208	547	2	-1	0	-1	uint8 _ t digests [ numconst * evp _ max _ md _ size ] ;	EMPTY	EMPTY
208	548	2	-1	0	-1	int digests _ len = tls1 _ handshake _ digest ( ssl  digests  sizeof ( digests ) ) ;	tls1 _ handshake _ digest ssl	EMPTY
208	549	2	-1	0	-1	if ( digests _ len == - numconst ) {	EMPTY	EMPTY
208	550	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
208	551	3	-1	0	-1	}	EMPTY	EMPTY
208	553	1	0	0	0	if ( ! ssl -> enc _ method -> prf ( ssl  out  ssl3 _ master _ secret _ size  premaster	ssl enc _ method ssl out	EMPTY
208	554	2	-1	0	-1	premaster _ len	EMPTY	EMPTY
208	555	2	-1	0	-1	tls _ md _ extended _ master _ secret _ const	EMPTY	EMPTY
208	556	2	-1	0	-1	tls _ md _ extended _ master _ secret _ const _ size  digests	EMPTY	EMPTY
208	557	2	-1	0	-1	digests _ len  null  numconst ) ) {	EMPTY	EMPTY
208	558	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
208	559	2	-1	0	-1	}	EMPTY	EMPTY
208	560	2	-1	0	-1	}	EMPTY	EMPTY
208	561	2	-1	0	-1	if ( ! ssl -> enc _ method -> prf ( ssl  out  ssl3 _ master _ secret _ size  premaster	ssl enc _ method ssl out	EMPTY
208	562	2	-1	0	-1	premaster _ len  tls _ md _ master _ secret _ const	EMPTY	EMPTY
208	563	2	-1	0	-1	tls _ md _ master _ secret _ const _ size	EMPTY	EMPTY
208	564	2	-1	0	-1	ssl -> s3 -> client _ random  ssl3 _ random _ size	ssl s3 client _ random	EMPTY
208	565	2	-1	0	-1	ssl -> s3 -> server _ random  ssl3 _ random _ size ) ) {	ssl s3	EMPTY
208	566	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
208	567	2	-1	0	-1	}	EMPTY	EMPTY
208	568	3	-1	0	-1	}	EMPTY	EMPTY
208	570	1	0	0	0	return ssl3 _ master _ secret _ size ;	EMPTY	EMPTY
208	571	3	-1	0	-1	}	EMPTY	EMPTY
208	573	1	0	0	-1	int tls1 _ export _ keying _ material ( ssl * ssl  uint8 _ t * out  size _ t out _ len	ssl out out _ len	EMPTY
208	574	2	-1	0	-1	const char * label  size _ t label _ len	EMPTY	EMPTY
208	575	2	-1	0	-1	const uint8 _ t * context  size _ t context _ len	EMPTY	EMPTY
208	576	2	-1	0	-1	int use _ context ) {	EMPTY	EMPTY
208	577	2	-1	0	-1	if ( ! ssl -> s3 -> have _ version || ssl -> version == ssl3 _ version ) {	ssl s3 have _ version ssl version	EMPTY
208	578	2	-1	0	-1	openssl _ put _ error ( ssl  err _ r _ should _ not _ have _ been _ called ) ;	EMPTY	EMPTY
208	579	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
208	580	3	-1	0	-1	}	EMPTY	EMPTY
208	582	1	0	0	0	size _ t seed _ len = numconst * ssl3 _ random _ size ;	EMPTY	EMPTY
208	583	2	-1	0	-1	if ( use _ context ) {	EMPTY	EMPTY
208	584	2	-1	0	-1	if ( context _ len >= numconst << numconst ) {	EMPTY	EMPTY
208	585	2	-1	0	-1	openssl _ put _ error ( ssl  err _ r _ overflow ) ;	EMPTY	EMPTY
208	586	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
208	587	2	-1	0	-1	}	EMPTY	EMPTY
208	588	2	-1	0	-1	seed _ len += numconst + context _ len ;	EMPTY	EMPTY
208	589	2	-1	0	-1	}	EMPTY	EMPTY
208	590	2	-1	0	-1	uint8 _ t * seed = openssl _ malloc ( seed _ len ) ;	EMPTY	EMPTY
208	591	2	-1	0	-1	if ( seed == null ) {	EMPTY	EMPTY
208	592	2	-1	0	-1	openssl _ put _ error ( ssl  err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
208	593	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
208	594	3	-1	0	-1	}	EMPTY	EMPTY
208	596	1	0	0	0	memcpy ( seed  ssl -> s3 -> client _ random  ssl3 _ random _ size ) ;	ssl s3 client _ random	EMPTY
208	597	2	-1	0	-1	memcpy ( seed + ssl3 _ random _ size  ssl -> s3 -> server _ random  ssl3 _ random _ size ) ;	ssl s3	EMPTY
208	598	2	-1	0	-1	if ( use _ context ) {	EMPTY	EMPTY
208	599	2	-1	0	-1	seed [ numconst * ssl3 _ random _ size ] = ( uint8 _ t ) ( context _ len >> numconst ) ;	EMPTY	EMPTY
208	600	2	-1	0	-1	seed [ numconst * ssl3 _ random _ size + numconst ] = ( uint8 _ t ) context _ len ;	EMPTY	EMPTY
208	601	2	-1	0	-1	memcpy ( seed + numconst * ssl3 _ random _ size + numconst  context  context _ len ) ;	EMPTY	EMPTY
208	602	3	-1	0	-1	}	EMPTY	EMPTY
208	604	1	0	0	0	int ret = ssl -> enc _ method -> prf ( ssl  out  out _ len  ssl -> session -> master _ key	ret ssl enc _ method ssl out out _ len ssl session	EMPTY
208	605	2	-1	0	-1	ssl -> session -> master _ key _ length  label	ssl session	EMPTY
208	606	2	-1	0	-1	label _ len  seed  seed _ len  null  numconst ) ;	EMPTY	EMPTY
208	607	2	-1	0	-1	openssl _ free ( seed ) ;	EMPTY	EMPTY
208	608	2	-1	0	-1	return ret ;	ret	EMPTY
208	609	3	-1	0	-1	}	EMPTY	EMPTY
208	611	1	0	0	-1	int tls1 _ alert _ code ( int code ) {	EMPTY	EMPTY
208	612	2	-1	0	-1	switch ( code ) {	EMPTY	EMPTY
208	613	2	-1	0	-1	case ssl _ ad _ close _ notify :	EMPTY	EMPTY
208	614	3	-1	0	-1	return ssl3 _ ad _ close _ notify ;	EMPTY	EMPTY
208	616	1	0	0	-1	case ssl _ ad _ unexpected _ message :	EMPTY	EMPTY
208	617	3	-1	0	-1	return ssl3 _ ad _ unexpected _ message ;	EMPTY	EMPTY
208	619	1	0	0	-1	case ssl _ ad _ bad _ record _ mac :	EMPTY	EMPTY
208	620	3	-1	0	-1	return ssl3 _ ad _ bad _ record _ mac ;	EMPTY	EMPTY
208	622	1	0	0	-1	case ssl _ ad _ decryption _ failed :	EMPTY	EMPTY
208	623	3	-1	0	-1	return tls1 _ ad _ decryption _ failed ;	EMPTY	EMPTY
208	625	1	0	0	-1	case ssl _ ad _ record _ overflow :	EMPTY	EMPTY
208	626	3	-1	0	-1	return tls1 _ ad _ record _ overflow ;	EMPTY	EMPTY
208	628	1	0	0	-1	case ssl _ ad _ decompression _ failure :	EMPTY	EMPTY
208	629	3	-1	0	-1	return ssl3 _ ad _ decompression _ failure ;	EMPTY	EMPTY
208	631	1	0	0	-1	case ssl _ ad _ handshake _ failure :	EMPTY	EMPTY
208	632	3	-1	0	-1	return ssl3 _ ad _ handshake _ failure ;	EMPTY	EMPTY
208	634	1	0	0	-1	case ssl _ ad _ no _ certificate :	EMPTY	EMPTY
208	635	3	-1	0	-1	return - numconst ;	EMPTY	EMPTY
208	637	1	0	0	-1	case ssl _ ad _ bad _ certificate :	EMPTY	EMPTY
208	638	3	-1	0	-1	return ssl3 _ ad _ bad _ certificate ;	EMPTY	EMPTY
208	640	1	0	0	-1	case ssl _ ad _ unsupported _ certificate :	EMPTY	EMPTY
208	641	3	-1	0	-1	return ssl3 _ ad _ unsupported _ certificate ;	EMPTY	EMPTY
208	643	1	0	0	-1	case ssl _ ad _ certificate _ revoked :	EMPTY	EMPTY
208	644	3	-1	0	-1	return ssl3 _ ad _ certificate _ revoked ;	EMPTY	EMPTY
208	646	1	0	0	-1	case ssl _ ad _ certificate _ expired :	EMPTY	EMPTY
208	647	3	-1	0	-1	return ssl3 _ ad _ certificate _ expired ;	EMPTY	EMPTY
208	649	1	0	0	-1	case ssl _ ad _ certificate _ unknown :	EMPTY	EMPTY
208	650	3	-1	0	-1	return ssl3 _ ad _ certificate _ unknown ;	EMPTY	EMPTY
208	652	1	0	0	-1	case ssl _ ad _ illegal _ parameter :	EMPTY	EMPTY
208	653	3	-1	0	-1	return ssl3 _ ad _ illegal _ parameter ;	EMPTY	EMPTY
208	655	1	0	0	-1	case ssl _ ad _ unknown _ ca :	EMPTY	EMPTY
208	656	3	-1	0	-1	return tls1 _ ad _ unknown _ ca ;	EMPTY	EMPTY
208	658	1	0	0	-1	case ssl _ ad _ access _ denied :	EMPTY	EMPTY
208	659	3	-1	0	-1	return tls1 _ ad _ access _ denied ;	EMPTY	EMPTY
208	661	1	0	0	-1	case ssl _ ad _ decode _ error :	EMPTY	EMPTY
208	662	3	-1	0	-1	return tls1 _ ad _ decode _ error ;	EMPTY	EMPTY
208	664	1	0	0	-1	case ssl _ ad _ decrypt _ error :	EMPTY	EMPTY
208	665	2	-1	0	-1	return tls1 _ ad _ decrypt _ error ;	EMPTY	EMPTY
208	666	2	-1	0	-1	case ssl _ ad _ export _ restriction :	EMPTY	EMPTY
208	667	3	-1	0	-1	return tls1 _ ad _ export _ restriction ;	EMPTY	EMPTY
208	669	1	0	0	-1	case ssl _ ad _ protocol _ version :	EMPTY	EMPTY
208	670	3	-1	0	-1	return tls1 _ ad _ protocol _ version ;	EMPTY	EMPTY
208	672	1	0	0	-1	case ssl _ ad _ insufficient _ security :	EMPTY	EMPTY
208	673	3	-1	0	-1	return tls1 _ ad _ insufficient _ security ;	EMPTY	EMPTY
208	675	1	0	0	-1	case ssl _ ad _ internal _ error :	EMPTY	EMPTY
208	676	3	-1	0	-1	return tls1 _ ad _ internal _ error ;	EMPTY	EMPTY
208	678	1	0	0	-1	case ssl _ ad _ user _ cancelled :	EMPTY	EMPTY
208	679	3	-1	0	-1	return tls1 _ ad _ user _ cancelled ;	EMPTY	EMPTY
208	681	1	0	0	-1	case ssl _ ad _ no _ renegotiation :	EMPTY	EMPTY
208	682	3	-1	0	-1	return tls1 _ ad _ no _ renegotiation ;	EMPTY	EMPTY
208	684	1	0	0	-1	case ssl _ ad _ unsupported _ extension :	EMPTY	EMPTY
208	685	3	-1	0	-1	return tls1 _ ad _ unsupported _ extension ;	EMPTY	EMPTY
208	687	1	0	0	-1	case ssl _ ad _ certificate _ unobtainable :	EMPTY	EMPTY
208	688	3	-1	0	-1	return tls1 _ ad _ certificate _ unobtainable ;	EMPTY	EMPTY
208	690	1	0	0	-1	case ssl _ ad _ unrecognized _ name :	EMPTY	EMPTY
208	691	3	-1	0	-1	return tls1 _ ad _ unrecognized _ name ;	EMPTY	EMPTY
208	693	1	0	0	-1	case ssl _ ad _ bad _ certificate _ status _ response :	EMPTY	EMPTY
208	694	3	-1	0	-1	return tls1 _ ad _ bad _ certificate _ status _ response ;	EMPTY	EMPTY
208	696	1	0	0	-1	case ssl _ ad _ bad _ certificate _ hash _ value :	EMPTY	EMPTY
208	697	3	-1	0	-1	return tls1 _ ad _ bad _ certificate _ hash _ value ;	EMPTY	EMPTY
208	699	1	0	0	-1	case ssl _ ad _ unknown _ psk _ identity :	EMPTY	EMPTY
208	700	3	-1	0	-1	return tls1 _ ad _ unknown _ psk _ identity ;	EMPTY	EMPTY
208	702	1	0	0	-1	case ssl _ ad _ inappropriate _ fallback :	EMPTY	EMPTY
208	703	3	-1	0	-1	return ssl3 _ ad _ inappropriate _ fallback ;	EMPTY	EMPTY
208	705	1	0	0	-1	default :	EMPTY	EMPTY
208	706	2	-1	0	-1	return - numconst ;	EMPTY	EMPTY
208	707	2	-1	0	-1	}	EMPTY	EMPTY
208	708	3	-1	0	-1	}	EMPTY	EMPTY
214	138	1	0	0	-1	static const unsigned int kminmtu = numconst - numconst ;	kminmtu	EMPTY
214	142	1	0	0	-1	static const unsigned int kdefaultmtu = numconst - numconst ;	kdefaultmtu	EMPTY
214	146	1	0	0	-1	static const unsigned int khandshakebuffersize = numconst ;	khandshakebuffersize	EMPTY
214	148	1	0	0	-1	static hm _ fragment * dtls1 _ hm _ fragment _ new ( size _ t frag _ len  int reassembly ) {	hm _ fragment frag _ len	EMPTY
214	149	2	-1	0	-1	hm _ fragment * frag = openssl _ malloc ( sizeof ( hm _ fragment ) ) ;	hm _ fragment frag hm _ fragment	EMPTY
214	150	2	-1	0	-1	if ( frag == null ) {	frag	EMPTY
214	151	2	-1	0	-1	openssl _ put _ error ( ssl , err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
214	152	2	-1	0	-1	return null ;	EMPTY	EMPTY
214	153	2	-1	0	-1	}	EMPTY	EMPTY
214	154	3	-1	0	-1	memset ( frag  numconst  sizeof ( hm _ fragment ) ) ;	frag hm _ fragment	EMPTY
214	158	1	1	1	1	if ( frag _ len > numconst ) {	frag _ len	EMPTY
214	159	2	-1	0	-1	frag -> fragment = openssl _ malloc ( frag _ len )	frag frag _ len	EMPTY
214	160	2	-1	0	-1	if ( frag -> fragment == null ) {	frag	EMPTY
214	161	2	-1	0	-1	openssl _ put _ error ( ssl , err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
214	162	2	-1	0	-1	goto err ;	EMPTY	EMPTY
214	163	3	-1	0	-1	}	EMPTY	EMPTY
214	165	1	1	0	1	if ( reassembly ) {	EMPTY	EMPTY
214	167	2	-1	1	-1	if ( frag _ len + 7 < frag _ len ) {	frag _ len frag _ len	EMPTY
214	168	2	-1	0	-1	openssl _ put _ error ( ssl , err _ r _ overflow ) ;	EMPTY	EMPTY
214	169	2	-1	0	-1	goto err ;	EMPTY	EMPTY
214	170	2	-1	0	-1	}	EMPTY	EMPTY
214	171	2	-1	0	-1	size _ t bitmask _ len = ( frag _ len + 7 ) / 8 ;	frag _ len	EMPTY
214	172	2	-1	0	-1	frag -> reassembly = openssl _ malloc ( bitmask _ len )	frag	EMPTY
214	173	2	-1	0	-1	if ( frag -> reassembly == null ) {	frag	EMPTY
214	174	2	-1	0	-1	openssl _ put _ error ( ssl , err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
214	175	2	-1	0	-1	goto err ;	EMPTY	EMPTY
214	176	2	-1	0	-1	}	EMPTY	EMPTY
214	177	2	-1	0	-1	memset ( frag -> reassembly  numconst  bitmask _ len ) ;	frag	EMPTY
214	178	2	-1	0	-1	}	EMPTY	EMPTY
214	179	3	-1	0	-1	}	EMPTY	EMPTY
214	181	1	0	0	0	return frag ;	frag	EMPTY
214	183	1	0	0	-1	err :	EMPTY	EMPTY
214	184	2	-1	0	-1	dtls1 _ hm _ fragment _ free ( frag ) ;	frag	EMPTY
214	185	2	-1	0	-1	return null ;	EMPTY	EMPTY
214	186	3	-1	0	-1	}	EMPTY	EMPTY
214	188	1	0	0	-1	void dtls1 _ hm _ fragment _ free ( hm _ fragment * frag ) {	hm _ fragment frag	EMPTY
214	189	2	-1	0	-1	if ( frag == null ) {	frag	EMPTY
214	190	2	-1	0	-1	return ;	EMPTY	EMPTY
214	191	2	-1	0	-1	}	EMPTY	EMPTY
214	192	2	-1	0	-1	openssl _ free ( frag -> fragment ) ;	frag	EMPTY
214	193	2	-1	0	-1	openssl _ free ( frag -> reassembly ) ;	frag	EMPTY
214	194	2	-1	0	-1	openssl _ free ( frag ) ;	frag	EMPTY
214	195	3	-1	0	-1	}	EMPTY	EMPTY
214	197	1	0	0	-1	# if ! defined ( inline )	EMPTY	EMPTY
214	198	2	-1	0	-1	# define inline  _  _ inline	EMPTY	EMPTY
214	199	3	-1	0	-1	# endif	EMPTY	EMPTY
214	203	1	0	0	-1	static inline uint8 _ t bit _ range ( size _ t start  size _ t end ) {	bit _ range start end	EMPTY
214	204	2	-1	0	-1	return ( uint8 _ t ) ( ~ ( ( 1u << start ) - 1 ) & ( ( 1u << end ) - 1 ) )	start end	EMPTY
214	205	3	-1	0	-1	}	EMPTY	EMPTY
214	211	1	0	0	-1	static void dtls1 _ hm _ fragment _ mark ( hm _ fragment * frag  size _ t start	dtls1 _ hm _ fragment _ mark hm _ fragment frag start	EMPTY
214	212	2	-1	0	-1	size _ t end ) {	end	EMPTY
214	213	2	-1	0	-1	size _ t i ;	i	EMPTY
214	214	3	-1	0	-1	size _ t msg _ len = frag -> msg _ header . msg _ len ;	msg _ len frag msg _ len	EMPTY
214	216	1	1	0	1	if ( frag -> reassembly == null || start > end || end > msg _ len ) {	frag start end end msg _ len	EMPTY
214	217	2	-1	0	-1	assert ( 0 ) ;	EMPTY	EMPTY
214	218	2	-1	0	-1	return ;	EMPTY	EMPTY
214	219	2	-1	0	-1	}	EMPTY	EMPTY
214	221	3	-1	1	-1	assert ( msg _ len > numconst ) ;	msg _ len	EMPTY
214	223	1	0	0	0	if ( ( start >> 3 ) == ( end >> 3 ) ) {	start end	EMPTY
214	224	2	-1	0	-1	frag -> reassembly [ start >> 3 ] |= bit _ range ( start & 7 , end & 7 ) ;	frag start bit _ range start end	EMPTY
214	225	2	-1	0	-1	} else {	EMPTY	EMPTY
214	226	2	-1	0	-1	frag -> reassembly [ start >> 3 ] |= bit _ range ( start & 7 , 8 ) ;	frag start bit _ range start	EMPTY
214	227	2	-1	0	-1	for ( i = ( start >> 3 ) + 1 ; i < ( end >> 3 ) ; i ++ ) {	i start i end i	EMPTY
214	228	2	-1	0	-1	frag -> reassembly [ i ] = 0xff ;	frag i	EMPTY
214	229	2	-1	0	-1	}	EMPTY	EMPTY
214	230	2	-1	0	-1	if ( ( end & 7 ) != 0 ) {	end	EMPTY
214	231	2	-1	0	-1	frag -> reassembly [ end >> 3 ] |= bit _ range ( 0 , end & 7 ) ;	frag end bit _ range end	EMPTY
214	232	2	-1	0	-1	}	EMPTY	EMPTY
214	233	3	-1	0	-1	}	EMPTY	EMPTY
214	236	1	1	1	1	for ( i = 0 ; i < ( msg _ len >> 3 ) ; i ++ ) {	i i msg _ len i	EMPTY
214	237	2	-1	0	-1	if ( frag -> reassembly [ i ] != 0xff ) {	frag i	EMPTY
214	238	2	-1	0	-1	return ;	EMPTY	EMPTY
214	239	2	-1	0	-1	}	EMPTY	EMPTY
214	240	2	-1	0	-1	}	EMPTY	EMPTY
214	241	2	-1	0	-1	if ( ( msg _ len & 7 ) != 0 &&	msg _ len	EMPTY
214	242	2	-1	0	-1	frag -> reassembly [ msg _ len >> 3 ] != bit _ range ( 0 , msg _ len & 7 ) ) {	frag msg _ len bit _ range msg _ len	EMPTY
214	243	2	-1	0	-1	return ;	EMPTY	EMPTY
214	244	3	-1	0	-1	}	EMPTY	EMPTY
214	246	1	0	0	0	openssl _ free ( frag -> reassembly ) ;	frag	EMPTY
214	247	2	-1	0	-1	frag -> reassembly = null ;	frag	EMPTY
214	248	3	-1	0	-1	}	EMPTY	EMPTY
214	250	1	1	0	-1	static void dtls1 _ update _ mtu ( ssl * ssl ) {	ssl	EMPTY
214	252	2	-1	1	-1	if ( ssl -> d1 -> mtu < dtls1 _ min _ mtu ( ) &&	ssl d1 mtu	EMPTY
214	253	2	-1	0	-1	! ( ssl _ get _ options ( ssl ) & ssl _ op _ no _ query _ mtu ) ) {	ssl _ get _ options ssl	EMPTY
214	254	2	-1	0	-1	long mtu = bio _ ctrl ( ssl _ get _ wbio ( ssl ) , bio _ ctrl _ dgram _ query _ mtu , 0 , null ) ;	mtu bio _ ctrl ssl _ get _ wbio ssl	EMPTY
214	255	2	-1	0	-1	if ( mtu >= 0 && mtu <= ( 1 << 30 ) && ( unsigned ) mtu >= dtls1 _ min _ mtu ( ) ) {	mtu mtu mtu	EMPTY
214	256	2	-1	0	-1	ssl -> d1 -> mtu = ( unsigned ) mtu ;	ssl d1 mtu mtu	EMPTY
214	257	2	-1	0	-1	} else {	EMPTY	EMPTY
214	258	2	-1	0	-1	ssl -> d1 -> mtu = kdefaultmtu ;	ssl d1 mtu kdefaultmtu	EMPTY
214	259	2	-1	0	-1	bio _ ctrl ( ssl _ get _ wbio ( ssl ) , bio _ ctrl _ dgram _ set _ mtu , ssl -> d1 -> mtu , null ) ;	bio _ ctrl ssl _ get _ wbio ssl ssl d1 mtu	EMPTY
214	260	2	-1	0	-1	}	EMPTY	EMPTY
214	261	3	-1	0	-1	}	EMPTY	EMPTY
214	264	1	1	1	-1	assert ( ssl -> d1 -> mtu >= dtls1 _ min _ mtu ( ) ) ;	ssl d1 mtu	EMPTY
214	265	3	-1	0	-1	}	EMPTY	EMPTY
214	270	1	0	0	-1	static size _ t dtls1 _ max _ record _ size ( ssl * ssl ) {	dtls1 _ max _ record _ size ssl	EMPTY
214	271	3	-1	0	-1	size _ t ret = ssl -> d1 -> mtu ;	ret ssl d1 mtu	EMPTY
214	273	1	0	0	0	size _ t overhead = ssl _ max _ seal _ overhead ( ssl ) ;	ssl _ max _ seal _ overhead ssl	EMPTY
214	274	2	-1	0	-1	if ( ret <= overhead ) {	ret	EMPTY
214	275	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
214	276	2	-1	0	-1	}	EMPTY	EMPTY
214	277	3	-1	0	-1	ret -= overhead	ret	EMPTY
214	279	1	0	0	0	size _ t pending = bio _ wpending ( ssl _ get _ wbio ( ssl ) ) ;	bio _ wpending ssl _ get _ wbio ssl	EMPTY
214	280	2	-1	0	-1	if ( ret <= pending ) {	ret	EMPTY
214	281	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
214	282	2	-1	0	-1	}	EMPTY	EMPTY
214	283	3	-1	0	-1	ret -= pending	ret	EMPTY
214	285	1	0	0	0	return ret	ret	EMPTY
214	286	3	-1	0	-1	}	EMPTY	EMPTY
214	288	1	0	0	-1	static int dtls1 _ write _ change _ cipher _ spec ( ssl * ssl	ssl	EMPTY
214	289	2	-1	0	-1	enum dtls1 _ use _ epoch _ t use _ epoch ) {	EMPTY	EMPTY
214	290	3	-1	0	-1	dtls1 _ update _ mtu ( ssl )	ssl	EMPTY
214	294	1	1	1	1	if ( dtls1 _ max _ record _ size ( ssl ) == 0 ) {	dtls1 _ max _ record _ size ssl	EMPTY
214	295	2	-1	0	-1	ssl -> rwstate = ssl _ writing ;	ssl rwstate	EMPTY
214	296	2	-1	0	-1	int ret = bio _ flush ( ssl _ get _ wbio ( ssl ) ) ;	ret bio _ flush ssl _ get _ wbio ssl	EMPTY
214	297	2	-1	0	-1	if ( ret <= 0 ) {	ret	EMPTY
214	298	2	-1	0	-1	return ret ;	ret	EMPTY
214	299	2	-1	0	-1	}	EMPTY	EMPTY
214	300	2	-1	0	-1	ssl -> rwstate = ssl _ nothing ;	ssl rwstate	EMPTY
214	301	3	-1	0	-1	}	EMPTY	EMPTY
214	303	1	0	0	0	static const uint8 _ t kchangecipherspec [ 1 ] = { ssl3 _ mt _ ccs } ;	EMPTY	EMPTY
214	304	2	-1	0	-1	int ret =	ret	EMPTY
214	305	2	-1	0	-1	dtls1 _ write _ bytes ( ssl , ssl3 _ rt _ change _ cipher _ spec , kchangecipherspec ,	ssl	EMPTY
214	306	2	-1	0	-1	sizeof ( kchangecipherspec ) , use _ epoch ) ;	EMPTY	EMPTY
214	307	2	-1	0	-1	if ( ret <= 0 ) {	ret	EMPTY
214	308	2	-1	0	-1	return ret ;	ret	EMPTY
214	309	3	-1	0	-1	}	EMPTY	EMPTY
214	311	1	0	0	0	if ( ssl -> msg _ callback != null ) {	ssl msg _ callback	EMPTY
214	312	2	-1	0	-1	ssl -> version  ssl3 _ rt _ change _ cipher _ spec	ssl version	EMPTY
214	313	2	-1	0	-1	kchangecipherspec  sizeof ( kchangecipherspec )  ssl	ssl	EMPTY
214	314	2	-1	0	-1	ssl -> msg _ callback _ arg ) ;	ssl	EMPTY
214	315	3	-1	0	-1	}	EMPTY	EMPTY
214	317	1	0	0	0	return numconst ;	EMPTY	EMPTY
214	318	3	-1	0	-1	}	EMPTY	EMPTY
214	320	1	0	0	-1	int dtls1 _ do _ handshake _ write ( ssl * ssl  enum dtls1 _ use _ epoch _ t use _ epoch ) {	ssl	EMPTY
214	321	3	-1	0	-1	dtls1 _ update _ mtu ( ssl ) ;	ssl	EMPTY
214	323	1	1	0	1	int ret = - numconst ;	ret	EMPTY
214	324	2	-1	0	-1	cbb cbb ;	cbb	EMPTY
214	325	2	-1	0	-1	cbb _ zero ( & cbb ) ;	cbb _ zero cbb	EMPTY
214	328	2	-1	1	-1	uint8 _ t * buf = openssl _ malloc ( ssl -> d1 -> mtu ) ;	buf ssl d1 mtu	EMPTY
214	329	2	-1	0	-1	if ( buf == null ) {	buf	EMPTY
214	330	2	-1	0	-1	goto err ;	EMPTY	EMPTY
214	331	3	-1	0	-1	}	EMPTY	EMPTY
214	335	1	1	1	1	if ( ssl -> init _ off == 0 ) {	ssl init _ off	EMPTY
214	336	2	-1	0	-1	ssl -> init _ off += dtls1 _ hm _ header _ length ;	ssl init _ off	EMPTY
214	337	2	-1	0	-1	ssl -> init _ num -= dtls1 _ hm _ header _ length ;	ssl init _ num	EMPTY
214	338	2	-1	0	-1	}	EMPTY	EMPTY
214	339	3	-1	0	-1	assert ( ssl -> init _ off >= dtls1 _ hm _ header _ length ) ;	ssl init _ off	EMPTY
214	341	1	1	0	-1	do {	EMPTY	EMPTY
214	344	2	-1	1	-1	if ( dtls1 _ max _ record _ size ( ssl ) < dtls1 _ hm _ header _ length + 1 ) {	dtls1 _ max _ record _ size ssl	EMPTY
214	345	2	-1	0	-1	ssl -> rwstate = ssl _ writing ;	ssl rwstate	EMPTY
214	346	2	-1	0	-1	int flush _ ret = bio _ flush ( ssl _ get _ wbio ( ssl ) ) ;	bio _ flush ssl _ get _ wbio ssl	EMPTY
214	347	2	-1	0	-1	if ( flush _ ret <= 0 ) {	EMPTY	EMPTY
214	348	2	-1	0	-1	ret = flush _ ret ;	ret	EMPTY
214	349	2	-1	0	-1	goto err ;	EMPTY	EMPTY
214	350	2	-1	0	-1	}	EMPTY	EMPTY
214	351	2	-1	0	-1	ssl -> rwstate = ssl _ nothing ;	ssl rwstate	EMPTY
214	352	2	-1	0	-1	assert ( bio _ wpending ( ssl _ get _ wbio ( ssl ) ) == 0 ) ;	bio _ wpending ssl _ get _ wbio ssl	EMPTY
214	353	3	-1	0	-1	}	EMPTY	EMPTY
214	355	1	1	0	1	size _ t todo = dtls1 _ max _ record _ size ( ssl ) ;	dtls1 _ max _ record _ size ssl	EMPTY
214	356	2	-1	0	-1	if ( todo < dtls1 _ hm _ header _ length + numconst ) {	EMPTY	EMPTY
214	359	2	-1	1	-1	openssl _ put _ error ( ssl  ssl _ r _ mtu _ too _ small ) ;	EMPTY	EMPTY
214	360	2	-1	0	-1	goto err	EMPTY	EMPTY
214	361	2	-1	0	-1	}	EMPTY	EMPTY
214	362	3	-1	0	-1	todo -= dtls1 _ hm _ header _ length ;	EMPTY	EMPTY
214	364	1	0	0	0	if ( todo > ( size _ t ) ssl -> init _ num ) {	ssl init _ num	EMPTY
214	365	2	-1	0	-1	todo = ssl -> init _ num ;	ssl init _ num	EMPTY
214	366	2	-1	0	-1	}	EMPTY	EMPTY
214	367	2	-1	0	-1	if ( todo >= ( numconst << numconst ) ) {	EMPTY	EMPTY
214	368	2	-1	0	-1	todo = ( numconst << numconst ) - numconst ;	EMPTY	EMPTY
214	369	3	-1	0	-1	}	EMPTY	EMPTY
214	371	1	0	0	0	size _ t len ;	len	EMPTY
214	372	2	-1	0	-1	if ( ! cbb _ init _ fixed ( & cbb  buf  ssl -> d1 -> mtu ) ||	cbb _ init _ fixed cbb buf ssl d1 mtu	EMPTY
214	373	2	-1	0	-1	! cbb _ add _ u8 ( & cbb  ssl -> d1 -> w _ msg _ hdr . type ) ||	cbb _ add _ u8 cbb ssl d1 type	EMPTY
214	374	2	-1	0	-1	! cbb _ add _ u24 ( & cbb  ssl -> d1 -> w _ msg _ hdr . msg _ len ) ||	cbb _ add _ u24 cbb ssl d1 msg _ len	EMPTY
214	375	2	-1	0	-1	! cbb _ add _ u16 ( & cbb  ssl -> d1 -> w _ msg _ hdr . seq ) ||	cbb _ add _ u16 cbb ssl d1 seq	EMPTY
214	376	2	-1	0	-1	! cbb _ add _ u24 ( & cbb  ssl -> init _ off - dtls1 _ hm _ header _ length ) ||	cbb _ add _ u24 cbb ssl init _ off	EMPTY
214	377	2	-1	0	-1	! cbb _ add _ u24 ( & cbb  todo ) ||	cbb _ add _ u24 cbb	EMPTY
214	378	2	-1	0	-1	! cbb _ add _ bytes (	cbb _ add _ bytes	EMPTY
214	379	2	-1	0	-1	& cbb  ( const uint8 _ t * ) ssl -> init _ buf -> data + ssl -> init _ off  todo ) ||	cbb ssl init _ buf data ssl init _ off	EMPTY
214	380	2	-1	0	-1	! cbb _ finish ( & cbb  null  & len ) ) {	cbb _ finish cbb len	EMPTY
214	381	2	-1	0	-1	openssl _ put _ error ( ssl  err _ r _ internal _ error ) ;	EMPTY	EMPTY
214	382	2	-1	0	-1	goto err ;	EMPTY	EMPTY
214	383	3	-1	0	-1	}	EMPTY	EMPTY
214	385	1	0	0	0	int write _ ret = dtls1 _ write _ bytes ( ssl  ssl3 _ rt _ handshake  buf  len	ssl buf len	EMPTY
214	386	2	-1	0	-1	use _ epoch ) ;	EMPTY	EMPTY
214	387	2	-1	0	-1	if ( write _ ret <= numconst ) {	EMPTY	EMPTY
214	388	2	-1	0	-1	ret = write _ ret ;	ret	EMPTY
214	389	2	-1	0	-1	goto err ;	EMPTY	EMPTY
214	390	2	-1	0	-1	}	EMPTY	EMPTY
214	391	2	-1	0	-1	ssl -> init _ off += todo ;	ssl init _ off	EMPTY
214	392	2	-1	0	-1	ssl -> init _ num -= todo ;	ssl init _ num	EMPTY
214	393	3	-1	0	-1	}	EMPTY	EMPTY
214	395	1	1	0	1	if ( ssl -> msg _ callback != null ) {	ssl msg _ callback	EMPTY
214	396	2	-1	0	-1	ssl -> msg _ callback (	ssl msg _ callback	EMPTY
214	397	2	-1	1	-1	numconst  ssl -> version  ssl3 _ rt _ handshake  ssl -> init _ buf -> data	ssl version ssl init _ buf data	EMPTY
214	398	2	-1	0	-1	( size _ t ) ( ssl -> init _ off + ssl -> init _ num )  ssl  ssl -> msg _ callback _ arg ) ;	ssl init _ off ssl init _ num ssl ssl	EMPTY
214	399	3	-1	0	-1	}	EMPTY	EMPTY
214	401	1	0	0	-1	ssl -> init _ off = numconst ;	ssl init _ off	EMPTY
214	402	3	-1	0	-1	ssl -> init _ num = numconst ;	ssl init _ num	EMPTY
214	404	1	0	0	-1	ret = numconst ;	ret	EMPTY
214	406	1	0	0	-1	err :	EMPTY	EMPTY
214	407	2	-1	0	-1	cbb _ cleanup ( & cbb ) ;	cbb _ cleanup cbb	EMPTY
214	408	2	-1	0	-1	openssl _ free ( buf ) ;	buf	EMPTY
214	409	2	-1	0	-1	return ret ;	ret	EMPTY
214	410	3	-1	0	-1	}	EMPTY	EMPTY
214	414	1	0	0	-1	static int dtls1 _ is _ next _ message _ complete ( ssl * ssl ) {	dtls1 _ is _ next _ message _ complete ssl	EMPTY
214	415	2	-1	0	-1	pitem * item = pqueue _ peek ( ssl -> d1 -> buffered _ messages ) ;	item pqueue _ peek ssl d1 buffered _ messages	EMPTY
214	416	2	-1	0	-1	if ( item == null ) {	item	EMPTY
214	417	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
214	418	3	-1	0	-1	}	EMPTY	EMPTY
214	420	1	0	0	0	hm _ fragment * frag = ( hm _ fragment * ) item -> data ;	hm _ fragment frag hm _ fragment item data	EMPTY
214	421	3	-1	0	-1	assert ( ssl -> d1 -> handshake _ read _ seq <= frag -> msg _ header . seq ) ;	ssl d1 frag seq	EMPTY
214	423	1	0	0	0	return ssl -> d1 -> handshake _ read _ seq == frag -> msg _ header . seq &&	ssl d1 frag seq	EMPTY
214	424	2	-1	0	-1	frag -> reassembly == null ;	frag	EMPTY
214	425	3	-1	0	-1	}	EMPTY	EMPTY
214	432	1	0	0	-1	static int dtls1 _ discard _ fragment _ body ( ssl * ssl  size _ t frag _ len ) {	dtls1 _ discard _ fragment _ body ssl frag _ len	EMPTY
214	433	2	-1	0	-1	uint8 _ t discard [ 256 ] ;	EMPTY	EMPTY
214	434	2	-1	0	-1	while ( frag _ len > 0 ) {	frag _ len	EMPTY
214	435	2	-1	0	-1	size _ t chunk = frag _ len < sizeof ( discard ) ? frag _ len : sizeof ( discard ) ;	frag _ len frag _ len	EMPTY
214	436	2	-1	0	-1	int ret = dtls1 _ read _ bytes ( ssl , ssl3 _ rt _ handshake , discard , chunk , 0 ) ;	ret ssl	EMPTY
214	437	2	-1	0	-1	if ( ret != ( int ) chunk ) {	ret	EMPTY
214	438	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
214	439	2	-1	0	-1	}	EMPTY	EMPTY
214	440	2	-1	0	-1	frag _ len -= chunk ;	frag _ len	EMPTY
214	441	2	-1	0	-1	}	EMPTY	EMPTY
214	442	2	-1	0	-1	return 1	EMPTY	EMPTY
214	443	3	-1	0	-1	}	EMPTY	EMPTY
214	449	1	0	0	-1	static hm _ fragment * dtls1 _ get _ buffered _ message (	hm _ fragment dtls1 _ get _ buffered _ message	EMPTY
214	450	2	-1	0	-1	ssl * ssl  const struct hm _ header _ st * msg _ hdr ) {	ssl hm _ header _ st msg _ hdr	EMPTY
214	451	2	-1	0	-1	uint8 _ t seq64be [ 8 ] ;	seq64be	EMPTY
214	452	2	-1	0	-1	memset ( seq64be  numconst  sizeof ( seq64be ) ) ;	seq64be seq64be	EMPTY
214	453	2	-1	0	-1	seq64be [ 6 ] = ( uint8 _ t ) ( msg _ hdr -> seq >> 8 )	seq64be msg _ hdr seq	EMPTY
214	454	2	-1	0	-1	seq64be [ 7 ] = ( uint8 _ t ) msg _ hdr -> seq	seq64be msg _ hdr seq	EMPTY
214	455	3	-1	0	-1	pitem * item = pqueue _ find ( ssl -> d1 -> buffered _ messages , seq64be ) ;	item pqueue _ find ssl d1 buffered _ messages seq64be	EMPTY
214	457	1	1	0	1	hm _ fragment * frag ;	hm _ fragment frag	EMPTY
214	458	2	-1	0	-1	if ( item == null ) {	item	EMPTY
214	460	2	-1	1	-1	frag = dtls1 _ hm _ fragment _ new ( msg _ hdr -> msg _ len	frag msg _ hdr msg _ len	EMPTY
214	461	2	-1	0	-1	;	EMPTY	EMPTY
214	462	2	-1	0	-1	if ( frag == null ) {	frag	EMPTY
214	463	2	-1	0	-1	return null ;	EMPTY	EMPTY
214	464	2	-1	0	-1	}	EMPTY	EMPTY
214	465	2	-1	0	-1	memcpy ( & frag -> msg _ header  msg _ hdr  sizeof ( * msg _ hdr ) ) ;	frag msg _ hdr msg _ hdr	EMPTY
214	466	2	-1	0	-1	item = pitem _ new ( seq64be , frag )	item pitem _ new seq64be frag	EMPTY
214	467	2	-1	0	-1	if ( item == null ) {	item	EMPTY
214	468	2	-1	0	-1	dtls1 _ hm _ fragment _ free ( frag ) ;	frag	EMPTY
214	469	2	-1	0	-1	return null ;	EMPTY	EMPTY
214	470	2	-1	0	-1	}	EMPTY	EMPTY
214	471	2	-1	0	-1	item = pqueue _ insert ( ssl -> d1 -> buffered _ messages , item )	item pqueue _ insert ssl d1 buffered _ messages item	EMPTY
214	474	2	-1	1	-1	assert ( item != null ) ;	item	EMPTY
214	475	2	-1	0	-1	}	EMPTY	EMPTY
214	476	2	-1	0	-1	frag = item -> data ;	frag item data	EMPTY
214	477	2	-1	0	-1	assert ( frag -> msg _ header . seq == msg _ hdr -> seq ) ;	frag seq msg _ hdr seq	EMPTY
214	478	2	-1	0	-1	if ( frag -> msg _ header . type != msg _ hdr -> type ||	frag type msg _ hdr type	EMPTY
214	479	2	-1	0	-1	frag -> msg _ header . msg _ len != msg _ hdr -> msg _ len ) {	frag msg _ len msg _ hdr msg _ len	EMPTY
214	482	2	-1	1	-1	openssl _ put _ error ( ssl  ssl _ r _ fragment _ mismatch ) ;	EMPTY	EMPTY
214	483	2	-1	0	-1	ssl3 _ send _ alert ( ssl , ssl3 _ al _ fatal , ssl _ ad _ illegal _ parameter )	ssl	EMPTY
214	484	2	-1	0	-1	return null ;	EMPTY	EMPTY
214	485	2	-1	0	-1	}	EMPTY	EMPTY
214	486	2	-1	0	-1	}	EMPTY	EMPTY
214	487	2	-1	0	-1	return frag ;	frag	EMPTY
214	488	3	-1	0	-1	}	EMPTY	EMPTY
214	493	1	0	0	-1	static size _ t dtls1 _ max _ handshake _ message _ len ( const ssl * ssl ) {	dtls1 _ max _ handshake _ message _ len ssl	EMPTY
214	494	2	-1	0	-1	size _ t max _ len = dtls1 _ hm _ header _ length + ssl3 _ rt _ max _ encrypted _ length ;	max _ len	EMPTY
214	495	2	-1	0	-1	if ( max _ len < ssl -> max _ cert _ list ) {	max _ len ssl max _ cert _ list	EMPTY
214	496	2	-1	0	-1	return ssl -> max _ cert _ list ;	ssl max _ cert _ list	EMPTY
214	497	2	-1	0	-1	}	EMPTY	EMPTY
214	498	2	-1	0	-1	return max _ len	max _ len	EMPTY
214	499	3	-1	0	-1	}	EMPTY	EMPTY
214	503	1	1	0	-1	static int dtls1 _ process _ fragment ( ssl * ssl ) {	dtls1 _ process _ fragment ssl	EMPTY
214	505	2	-1	1	-1	uint8 _ t header [ dtls1 _ hm _ header _ length ] ;	header	EMPTY
214	506	2	-1	0	-1	int ret = dtls1 _ read _ bytes ( ssl , ssl3 _ rt _ handshake , header ,	ret ssl header	EMPTY
214	507	2	-1	0	-1	dtls1 _ hm _ header _ length , 0 ) ;	EMPTY	EMPTY
214	508	2	-1	0	-1	if ( ret <= 0 ) {	ret	EMPTY
214	509	2	-1	0	-1	return ret ;	ret	EMPTY
214	510	2	-1	0	-1	}	EMPTY	EMPTY
214	511	2	-1	0	-1	if ( ret != dtls1 _ hm _ header _ length ) {	ret	EMPTY
214	512	2	-1	0	-1	openssl _ put _ error ( ssl , ssl _ r _ unexpected _ message ) ;	EMPTY	EMPTY
214	513	2	-1	0	-1	ssl3 _ send _ alert ( ssl , ssl3 _ al _ fatal , ssl _ ad _ unexpected _ message ) ;	ssl	EMPTY
214	514	2	-1	0	-1	return - 1 ;	EMPTY	EMPTY
214	515	3	-1	0	-1	}	EMPTY	EMPTY
214	518	1	1	1	1	struct hm _ header _ st msg _ hdr ;	hm _ header _ st msg _ hdr	EMPTY
214	519	3	-1	0	-1	dtls1 _ get _ message _ header ( header , & msg _ hdr )	header msg _ hdr	EMPTY
214	523	1	1	1	1	const size _ t frag _ off = msg _ hdr . frag _ off ;	frag _ off msg _ hdr frag _ off	EMPTY
214	524	2	-1	0	-1	const size _ t frag _ len = msg _ hdr . frag _ len ;	frag _ len msg _ hdr frag _ len	EMPTY
214	525	2	-1	0	-1	const size _ t msg _ len = msg _ hdr . msg _ len ;	msg _ len msg _ hdr msg _ len	EMPTY
214	526	2	-1	0	-1	if ( frag _ off > msg _ len || frag _ off + frag _ len < frag _ off ||	frag _ off msg _ len frag _ off frag _ len frag _ off	EMPTY
214	527	2	-1	0	-1	frag _ off + frag _ len > msg _ len ||	frag _ off frag _ len msg _ len	EMPTY
214	528	2	-1	0	-1	msg _ len > dtls1 _ max _ handshake _ message _ len ( ssl ) ||	msg _ len dtls1 _ max _ handshake _ message _ len ssl	EMPTY
214	529	2	-1	0	-1	frag _ len > ssl -> s3 -> rrec . length ) {	frag _ len ssl s3 rrec length	EMPTY
214	530	2	-1	0	-1	openssl _ put _ error ( ssl , ssl _ r _ excessive _ message _ size ) ;	EMPTY	EMPTY
214	531	2	-1	0	-1	ssl3 _ send _ alert ( ssl , ssl3 _ al _ fatal , ssl _ ad _ illegal _ parameter ) ;	ssl	EMPTY
214	532	2	-1	0	-1	return - 1 ;	EMPTY	EMPTY
214	533	3	-1	0	-1	}	EMPTY	EMPTY
214	535	1	1	0	1	if ( msg _ hdr . seq < ssl -> d1 -> handshake _ read _ seq ||	msg _ hdr seq ssl d1	EMPTY
214	536	2	-1	0	-1	msg _ hdr . seq > ( unsigned ) ssl -> d1 -> handshake _ read _ seq +	msg _ hdr seq ssl d1	EMPTY
214	537	2	-1	0	-1	khandshakebuffersize ) {	khandshakebuffersize	EMPTY
214	539	2	-1	1	-1	if ( ! dtls1 _ discard _ fragment _ body ( ssl , frag _ len ) ) {	dtls1 _ discard _ fragment _ body ssl frag _ len	EMPTY
214	540	2	-1	0	-1	return - 1 ;	EMPTY	EMPTY
214	541	2	-1	0	-1	}	EMPTY	EMPTY
214	542	2	-1	0	-1	return 1	EMPTY	EMPTY
214	543	3	-1	0	-1	}	EMPTY	EMPTY
214	545	1	0	0	0	hm _ fragment * frag = dtls1 _ get _ buffered _ message ( ssl  & msg _ hdr ) ;	hm _ fragment frag dtls1 _ get _ buffered _ message ssl msg _ hdr	EMPTY
214	546	2	-1	0	-1	if ( frag == null ) {	frag	EMPTY
214	547	2	-1	0	-1	return - numconst ;	EMPTY	EMPTY
214	548	2	-1	0	-1	}	EMPTY	EMPTY
214	549	3	-1	0	-1	assert ( frag -> msg _ header . msg _ len == msg _ len ) ;	frag msg _ len msg _ len	EMPTY
214	551	1	1	0	1	if ( frag -> reassembly == null ) {	frag	EMPTY
214	553	2	-1	1	-1	if ( ! dtls1 _ discard _ fragment _ body ( ssl , frag _ len ) ) {	dtls1 _ discard _ fragment _ body ssl frag _ len	EMPTY
214	554	2	-1	0	-1	return - 1 ;	EMPTY	EMPTY
214	555	2	-1	0	-1	}	EMPTY	EMPTY
214	556	2	-1	0	-1	return 1	EMPTY	EMPTY
214	557	2	-1	0	-1	}	EMPTY	EMPTY
214	558	3	-1	0	-1	assert ( msg _ len > numconst ) ;	msg _ len	EMPTY
214	561	1	1	1	-1	ret = dtls1 _ read _ bytes ( ssl , ssl3 _ rt _ handshake , frag -> fragment + frag _ off ,	ret ssl frag frag _ off	EMPTY
214	562	2	-1	0	-1	frag _ len , 0 )	frag _ len	EMPTY
214	563	2	-1	0	-1	if ( ret != ( int ) frag _ len ) {	ret frag _ len	EMPTY
214	564	2	-1	0	-1	openssl _ put _ error ( ssl , err _ r _ internal _ error ) ;	EMPTY	EMPTY
214	565	2	-1	0	-1	ssl3 _ send _ alert ( ssl , ssl3 _ al _ fatal , ssl _ ad _ internal _ error ) ;	ssl	EMPTY
214	566	2	-1	0	-1	return - 1 ;	EMPTY	EMPTY
214	567	2	-1	0	-1	}	EMPTY	EMPTY
214	568	3	-1	0	-1	dtls1 _ hm _ fragment _ mark ( frag , frag _ off , frag _ off + frag _ len )	dtls1 _ hm _ fragment _ mark frag frag _ off frag _ off frag _ len	EMPTY
214	570	1	0	0	0	return 1	EMPTY	EMPTY
214	571	3	-1	0	-1	}	EMPTY	EMPTY
214	576	1	0	0	-1	long dtls1 _ get _ message ( ssl * ssl  int st1  int stn  int msg _ type  long max	dtls1 _ get _ message ssl st1 stn msg _ type max	EMPTY
214	577	2	-1	0	-1	enum ssl _ hash _ message _ t hash _ message  int * ok ) {	ok	EMPTY
214	578	2	-1	0	-1	pitem * item = null ;	item	EMPTY
214	579	2	-1	0	-1	hm _ fragment * frag = null ;	hm _ fragment frag	EMPTY
214	580	3	-1	0	-1	int al ;	EMPTY	EMPTY
214	584	1	1	1	1	if ( ssl -> s3 -> tmp . reuse _ message ) {	ssl s3 tmp	EMPTY
214	588	2	-1	1	-1	assert ( hash _ message == ssl _ hash _ message ) ;	EMPTY	EMPTY
214	589	2	-1	0	-1	ssl -> s3 -> tmp . reuse _ message = 0	ssl s3 tmp	EMPTY
214	590	2	-1	0	-1	if ( msg _ type >= 0 && ssl -> s3 -> tmp . message _ type != msg _ type ) {	msg _ type ssl s3 tmp msg _ type	EMPTY
214	591	2	-1	0	-1	al = ssl _ ad _ unexpected _ message ;	EMPTY	EMPTY
214	592	2	-1	0	-1	openssl _ put _ error ( ssl , ssl _ r _ unexpected _ message ) ;	EMPTY	EMPTY
214	593	2	-1	0	-1	goto f _ err ;	EMPTY	EMPTY
214	594	2	-1	0	-1	}	EMPTY	EMPTY
214	595	2	-1	0	-1	* ok = 1	ok	EMPTY
214	596	2	-1	0	-1	ssl -> init _ msg = ( uint8 _ t * ) ssl -> init _ buf -> data + dtls1 _ hm _ header _ length ;	ssl init _ msg ssl init _ buf data	EMPTY
214	597	2	-1	0	-1	ssl -> init _ num = ( int ) ssl -> s3 -> tmp . message _ size	ssl init _ num ssl s3 tmp	EMPTY
214	598	2	-1	0	-1	return ssl -> init _ num	ssl init _ num	EMPTY
214	599	3	-1	0	-1	}	EMPTY	EMPTY
214	602	1	1	1	1	while ( ! dtls1 _ is _ next _ message _ complete ( ssl ) ) {	dtls1 _ is _ next _ message _ complete ssl	EMPTY
214	603	2	-1	0	-1	int ret = dtls1 _ process _ fragment ( ssl ) ;	ret dtls1 _ process _ fragment ssl	EMPTY
214	604	2	-1	0	-1	if ( ret <= 0 ) {	ret	EMPTY
214	605	2	-1	0	-1	* ok = 0 ;	ok	EMPTY
214	606	2	-1	0	-1	return ret ;	ret	EMPTY
214	607	2	-1	0	-1	}	EMPTY	EMPTY
214	608	3	-1	0	-1	}	EMPTY	EMPTY
214	611	1	1	1	-1	item = pqueue _ pop ( ssl -> d1 -> buffered _ messages )	item pqueue _ pop ssl d1 buffered _ messages	EMPTY
214	612	2	-1	0	-1	assert ( item != null ) ;	item	EMPTY
214	613	2	-1	0	-1	frag = ( hm _ fragment * ) item -> data	frag hm _ fragment item data	EMPTY
214	614	2	-1	0	-1	assert ( ssl -> d1 -> handshake _ read _ seq == frag -> msg _ header . seq ) ;	ssl d1 frag seq	EMPTY
214	615	3	-1	0	-1	assert ( frag -> reassembly == null ) ;	frag	EMPTY
214	617	1	0	0	0	if ( frag -> msg _ header . msg _ len > ( size _ t ) max ) {	frag msg _ len max	EMPTY
214	618	2	-1	0	-1	openssl _ put _ error ( ssl , ssl _ r _ excessive _ message _ size ) ;	EMPTY	EMPTY
214	619	2	-1	0	-1	goto err ;	EMPTY	EMPTY
214	620	3	-1	0	-1	}	EMPTY	EMPTY
214	623	1	1	1	1	size _ t len ;	len	EMPTY
214	624	2	-1	0	-1	cbb cbb ;	cbb	EMPTY
214	625	2	-1	0	-1	cbb _ zero ( & cbb )	cbb _ zero cbb	EMPTY
214	626	2	-1	0	-1	if ( ! buf _ mem _ grow ( ssl -> init _ buf  ( size _ t ) frag -> msg _ header . msg _ len +	buf _ mem _ grow ssl init _ buf frag msg _ len	EMPTY
214	627	2	-1	0	-1	dtls1 _ hm _ header _ length ) ||	EMPTY	EMPTY
214	628	2	-1	0	-1	! cbb _ init _ fixed ( & cbb  ( uint8 _ t * ) ssl -> init _ buf -> data	cbb _ init _ fixed cbb ssl init _ buf data	EMPTY
214	629	2	-1	0	-1	ssl -> init _ buf -> max ) ||	ssl init _ buf max	EMPTY
214	630	2	-1	0	-1	! cbb _ add _ u8 ( & cbb  frag -> msg _ header . type ) ||	cbb _ add _ u8 cbb frag type	EMPTY
214	631	2	-1	0	-1	! cbb _ add _ u24 ( & cbb  frag -> msg _ header . msg _ len ) ||	cbb _ add _ u24 cbb frag msg _ len	EMPTY
214	632	2	-1	0	-1	! cbb _ add _ u16 ( & cbb  frag -> msg _ header . seq ) ||	cbb _ add _ u16 cbb frag seq	EMPTY
214	633	2	-1	1	-1	! cbb _ add _ u24 ( & cbb  numconst ) ||	cbb _ add _ u24 cbb	EMPTY
214	634	2	-1	0	-1	! cbb _ add _ u24 ( & cbb  frag -> msg _ header . msg _ len ) ||	cbb _ add _ u24 cbb frag msg _ len	EMPTY
214	635	2	-1	0	-1	! cbb _ add _ bytes ( & cbb  frag -> fragment  frag -> msg _ header . msg _ len ) ||	cbb _ add _ bytes cbb frag frag msg _ len	EMPTY
214	636	2	-1	0	-1	! cbb _ finish ( & cbb  null  & len ) ) {	cbb _ finish cbb len	EMPTY
214	637	2	-1	0	-1	cbb _ cleanup ( & cbb )	cbb _ cleanup cbb	EMPTY
214	638	2	-1	0	-1	openssl _ put _ error ( ssl  err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
214	639	2	-1	0	-1	goto err	EMPTY	EMPTY
214	640	2	-1	0	-1	}	EMPTY	EMPTY
214	641	3	-1	0	-1	assert ( len == ( size _ t ) frag -> msg _ header . msg _ len + dtls1 _ hm _ header _ length ) ;	len frag msg _ len	EMPTY
214	643	1	0	0	-1	ssl -> d1 -> handshake _ read _ seq ++	ssl d1	EMPTY
214	647	1	1	1	-1	ssl -> s3 -> tmp . message _ type = frag -> msg _ header . type	ssl s3 tmp frag type	EMPTY
214	648	2	-1	0	-1	ssl -> s3 -> tmp . message _ size = frag -> msg _ header . msg _ len	ssl s3 tmp frag msg _ len	EMPTY
214	649	2	-1	0	-1	ssl -> init _ msg = ( uint8 _ t * ) ssl -> init _ buf -> data + dtls1 _ hm _ header _ length ;	ssl init _ msg ssl init _ buf data	EMPTY
214	650	3	-1	0	-1	ssl -> init _ num = frag -> msg _ header . msg _ len	ssl init _ num frag msg _ len	EMPTY
214	652	1	0	0	0	if ( msg _ type >= 0 && ssl -> s3 -> tmp . message _ type != msg _ type ) {	msg _ type ssl s3 tmp msg _ type	EMPTY
214	653	2	-1	0	-1	al = ssl _ ad _ unexpected _ message ;	EMPTY	EMPTY
214	654	2	-1	0	-1	openssl _ put _ error ( ssl , ssl _ r _ unexpected _ message ) ;	EMPTY	EMPTY
214	655	2	-1	0	-1	goto f _ err ;	EMPTY	EMPTY
214	656	2	-1	0	-1	}	EMPTY	EMPTY
214	657	2	-1	0	-1	if ( hash _ message == ssl _ hash _ message && ! ssl3 _ hash _ current _ message ( ssl ) ) {	ssl3 _ hash _ current _ message ssl	EMPTY
214	658	2	-1	0	-1	goto err ;	EMPTY	EMPTY
214	659	2	-1	0	-1	}	EMPTY	EMPTY
214	660	2	-1	0	-1	if ( ssl -> msg _ callback ) {	ssl msg _ callback	EMPTY
214	661	2	-1	0	-1	ssl -> msg _ callback ( 0 , ssl -> version , ssl3 _ rt _ handshake , ssl -> init _ buf -> data ,	ssl msg _ callback ssl version ssl init _ buf data	EMPTY
214	662	2	-1	0	-1	ssl -> init _ num + dtls1 _ hm _ header _ length , ssl ,	ssl init _ num ssl	EMPTY
214	663	2	-1	0	-1	ssl -> msg _ callback _ arg ) ;	ssl	EMPTY
214	664	3	-1	0	-1	}	EMPTY	EMPTY
214	666	1	0	0	0	pitem _ free ( item )	pitem _ free item	EMPTY
214	667	3	-1	0	-1	dtls1 _ hm _ fragment _ free ( frag )	frag	EMPTY
214	669	1	0	0	-1	ssl -> state = stn	ssl state stn	EMPTY
214	670	2	-1	0	-1	* ok = 1	ok	EMPTY
214	671	3	-1	0	-1	return ssl -> init _ num	ssl init _ num	EMPTY
214	673	1	0	0	-1	f _ err :	EMPTY	EMPTY
214	674	2	-1	0	-1	ssl3 _ send _ alert ( ssl , ssl3 _ al _ fatal , al )	ssl	EMPTY
214	675	2	-1	0	-1	err :	EMPTY	EMPTY
214	676	2	-1	0	-1	pitem _ free ( item )	pitem _ free item	EMPTY
214	677	2	-1	0	-1	dtls1 _ hm _ fragment _ free ( frag )	frag	EMPTY
214	678	2	-1	0	-1	* ok = 0	ok	EMPTY
214	679	2	-1	0	-1	return - 1	EMPTY	EMPTY
214	680	3	-1	0	-1	}	EMPTY	EMPTY
214	682	1	0	0	-1	int dtls1 _ read _ failed ( ssl * ssl  int code ) {	ssl	EMPTY
214	683	2	-1	0	-1	if ( code > numconst ) {	EMPTY	EMPTY
214	684	2	-1	0	-1	assert ( numconst ) ;	EMPTY	EMPTY
214	685	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
214	686	3	-1	0	-1	}	EMPTY	EMPTY
214	688	1	1	0	1	if ( ! dtls1 _ is _ timer _ expired ( ssl ) ) {	ssl	EMPTY
214	691	2	-1	1	-1	return code	EMPTY	EMPTY
214	692	3	-1	0	-1	}	EMPTY	EMPTY
214	694	1	1	0	1	if ( ! ssl _ in _ init ( ssl ) ) {	ssl _ in _ init ssl	EMPTY
214	696	2	-1	1	-1	bio _ set _ flags ( ssl _ get _ rbio ( ssl ) , bio _ flags _ read )	bio _ set _ flags ssl _ get _ rbio ssl	EMPTY
214	697	2	-1	0	-1	return code	EMPTY	EMPTY
214	698	3	-1	0	-1	}	EMPTY	EMPTY
214	700	1	0	0	0	return dtlsv1 _ handle _ timeout ( ssl ) ;	dtlsv1 _ handle _ timeout ssl	EMPTY
214	701	3	-1	0	-1	}	EMPTY	EMPTY
214	703	1	0	0	-1	static uint16 _ t dtls1 _ get _ queue _ priority ( uint16 _ t seq  int is _ ccs ) {	seq	EMPTY
214	704	3	-1	0	-1	assert ( seq * numconst >= seq ) ;	seq seq	EMPTY
214	714	1	1	1	1	return seq * 2 - is _ ccs	seq	EMPTY
214	715	3	-1	0	-1	}	EMPTY	EMPTY
214	717	1	1	0	-1	static int dtls1 _ retransmit _ message ( ssl * ssl  hm _ fragment * frag ) {	ssl hm _ fragment frag	EMPTY
214	720	2	-1	1	-1	assert ( ssl -> d1 -> w _ epoch == numconst || ssl -> d1 -> w _ epoch == numconst ) ;	ssl d1 ssl d1	EMPTY
214	721	2	-1	0	-1	assert ( frag -> msg _ header . epoch <= ssl -> d1 -> w _ epoch ) ;	frag epoch ssl d1	EMPTY
214	722	2	-1	0	-1	enum dtls1 _ use _ epoch _ t use _ epoch = dtls1 _ use _ current _ epoch ;	EMPTY	EMPTY
214	723	2	-1	0	-1	if ( ssl -> d1 -> w _ epoch == 1 && frag -> msg _ header . epoch == 0 ) {	ssl d1 frag epoch	EMPTY
214	724	2	-1	0	-1	use _ epoch = dtls1 _ use _ previous _ epoch ;	EMPTY	EMPTY
214	725	3	-1	0	-1	}	EMPTY	EMPTY
214	728	1	1	1	1	int ret ;	ret	EMPTY
214	729	2	-1	0	-1	if ( frag -> msg _ header . is _ ccs ) {	frag	EMPTY
214	730	2	-1	0	-1	ret = dtls1 _ write _ change _ cipher _ spec ( ssl , use _ epoch )	ret ssl	EMPTY
214	731	2	-1	0	-1	} else {	EMPTY	EMPTY
214	734	2	-1	1	-1	memcpy ( ssl -> init _ buf -> data  frag -> fragment	ssl init _ buf data frag	EMPTY
214	735	2	-1	0	-1	frag -> msg _ header . msg _ len + dtls1 _ hm _ header _ length ) ;	frag msg _ len	EMPTY
214	736	3	-1	0	-1	ssl -> init _ num = frag -> msg _ header . msg _ len + dtls1 _ hm _ header _ length ;	ssl init _ num frag msg _ len	EMPTY
214	738	1	0	0	0	dtls1 _ set _ message _ header ( ssl , frag -> msg _ header . type ,	dtls1 _ set _ message _ header ssl frag type	EMPTY
214	739	2	-1	0	-1	frag -> msg _ header . msg _ len , frag -> msg _ header . seq ,	frag msg _ len frag seq	EMPTY
214	740	2	-1	0	-1	0 , frag -> msg _ header . frag _ len )	frag frag _ len	EMPTY
214	741	2	-1	0	-1	ret = dtls1 _ do _ handshake _ write ( ssl , use _ epoch )	ret ssl	EMPTY
214	742	3	-1	0	-1	}	EMPTY	EMPTY
214	745	1	1	1	-1	( void ) bio _ flush ( ssl _ get _ wbio ( ssl ) )	bio _ flush ssl _ get _ wbio ssl	EMPTY
214	746	2	-1	0	-1	return ret	ret	EMPTY
214	747	3	-1	0	-1	}	EMPTY	EMPTY
214	750	1	0	0	-1	int dtls1 _ retransmit _ buffered _ messages ( ssl * ssl ) {	ssl	EMPTY
214	751	2	-1	0	-1	pqueue sent = ssl -> d1 -> sent _ messages ;	sent ssl d1 sent _ messages	EMPTY
214	752	2	-1	0	-1	piterator iter = pqueue _ iterator ( sent ) ;	iter pqueue _ iterator sent	EMPTY
214	753	3	-1	0	-1	pitem * item ;	item	EMPTY
214	755	1	0	0	0	for ( item = pqueue _ next ( & iter ) ; item != null ; item = pqueue _ next ( & iter ) ) {	item pqueue _ next iter item item pqueue _ next iter	EMPTY
214	756	2	-1	0	-1	hm _ fragment * frag = ( hm _ fragment * ) item -> data ;	hm _ fragment frag hm _ fragment item data	EMPTY
214	757	2	-1	0	-1	if ( dtls1 _ retransmit _ message ( ssl  frag ) <= numconst ) {	ssl frag	EMPTY
214	758	2	-1	0	-1	return - numconst ;	EMPTY	EMPTY
214	759	2	-1	0	-1	}	EMPTY	EMPTY
214	760	3	-1	0	-1	}	EMPTY	EMPTY
214	762	1	0	0	0	return numconst ;	EMPTY	EMPTY
214	763	3	-1	0	-1	}	EMPTY	EMPTY
214	768	1	0	0	-1	static int dtls1 _ buffer _ change _ cipher _ spec ( ssl * ssl  uint16 _ t seq ) {	dtls1 _ buffer _ change _ cipher _ spec ssl seq	EMPTY
214	769	2	-1	0	-1	hm _ fragment * frag = dtls1 _ hm _ fragment _ new ( numconst	hm _ fragment frag	EMPTY
214	770	2	-1	0	-1	;	EMPTY	EMPTY
214	771	2	-1	0	-1	if ( frag == null ) {	frag	EMPTY
214	772	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
214	773	2	-1	0	-1	}	EMPTY	EMPTY
214	774	2	-1	0	-1	frag -> msg _ header . is _ ccs = 1	frag	EMPTY
214	775	3	-1	0	-1	frag -> msg _ header . epoch = ssl -> d1 -> w _ epoch	frag epoch ssl d1	EMPTY
214	777	1	0	0	-1	;	EMPTY	EMPTY
214	778	2	-1	0	-1	uint8 _ t seq64be [ 8 ] ;	seq64be	EMPTY
214	779	2	-1	0	-1	memset ( seq64be  numconst  sizeof ( seq64be ) ) ;	seq64be seq64be	EMPTY
214	780	2	-1	0	-1	seq64be [ 6 ] = ( uint8 _ t ) ( priority >> 8 )	seq64be priority	EMPTY
214	781	3	-1	0	-1	seq64be [ 7 ] = ( uint8 _ t ) priority	seq64be priority	EMPTY
214	783	1	0	0	0	pitem * item = pitem _ new ( seq64be , frag ) ;	item pitem _ new seq64be frag	EMPTY
214	784	2	-1	0	-1	if ( item == null ) {	item	EMPTY
214	785	2	-1	0	-1	dtls1 _ hm _ fragment _ free ( frag ) ;	frag	EMPTY
214	786	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
214	787	3	-1	0	-1	}	EMPTY	EMPTY
214	789	1	0	0	0	pqueue _ insert ( ssl -> d1 -> sent _ messages , item )	pqueue _ insert ssl d1 sent _ messages item	EMPTY
214	790	2	-1	0	-1	return 1	EMPTY	EMPTY
214	791	3	-1	0	-1	}	EMPTY	EMPTY
214	793	1	1	0	-1	int dtls1 _ buffer _ message ( ssl * ssl ) {	ssl	EMPTY
214	796	3	-1	1	-1	assert ( ssl -> init _ off == numconst ) ;	ssl init _ off	EMPTY
214	798	1	0	0	0	hm _ fragment * frag = dtls1 _ hm _ fragment _ new ( ssl -> init _ num , 0 ) ;	hm _ fragment frag ssl init _ num	EMPTY
214	799	2	-1	0	-1	if ( ! frag ) {	frag	EMPTY
214	800	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
214	801	3	-1	0	-1	}	EMPTY	EMPTY
214	803	1	0	0	0	memcpy ( frag -> fragment  ssl -> init _ buf -> data  ssl -> init _ num ) ;	frag ssl init _ buf data ssl init _ num	EMPTY
214	805	1	0	0	-1	assert ( ssl -> d1 -> w _ msg _ hdr . msg _ len + dtls1 _ hm _ header _ length ==	ssl d1 msg _ len	EMPTY
214	806	3	-1	0	-1	( unsigned int ) ssl -> init _ num ) ;	ssl init _ num	EMPTY
214	808	1	0	0	-1	frag -> msg _ header . msg _ len = ssl -> d1 -> w _ msg _ hdr . msg _ len	frag msg _ len ssl d1 msg _ len	EMPTY
214	809	2	-1	0	-1	frag -> msg _ header . seq = ssl -> d1 -> w _ msg _ hdr . seq	frag seq ssl d1 seq	EMPTY
214	810	2	-1	0	-1	frag -> msg _ header . type = ssl -> d1 -> w _ msg _ hdr . type	frag type ssl d1 type	EMPTY
214	811	2	-1	0	-1	frag -> msg _ header . frag _ off = 0	frag frag _ off	EMPTY
214	812	2	-1	0	-1	frag -> msg _ header . frag _ len = ssl -> d1 -> w _ msg _ hdr . msg _ len	frag frag _ len ssl d1 msg _ len	EMPTY
214	813	2	-1	0	-1	frag -> msg _ header . is _ ccs = 0	frag	EMPTY
214	814	3	-1	0	-1	frag -> msg _ header . epoch = ssl -> d1 -> w _ epoch	frag epoch ssl d1	EMPTY
214	816	1	0	0	0	uint16 _ t priority = dtls1 _ get _ queue _ priority ( frag -> msg _ header . seq	priority frag seq	EMPTY
214	817	2	-1	0	-1	;	EMPTY	EMPTY
214	818	2	-1	0	-1	uint8 _ t seq64be [ 8 ] ;	seq64be	EMPTY
214	819	2	-1	0	-1	memset ( seq64be  numconst  sizeof ( seq64be ) ) ;	seq64be seq64be	EMPTY
214	820	2	-1	0	-1	seq64be [ 6 ] = ( uint8 _ t ) ( priority >> 8 )	seq64be priority	EMPTY
214	821	3	-1	0	-1	seq64be [ 7 ] = ( uint8 _ t ) priority	seq64be priority	EMPTY
214	823	1	0	0	0	pitem * item = pitem _ new ( seq64be , frag ) ;	item pitem _ new seq64be frag	EMPTY
214	824	2	-1	0	-1	if ( item == null ) {	item	EMPTY
214	825	2	-1	0	-1	dtls1 _ hm _ fragment _ free ( frag ) ;	frag	EMPTY
214	826	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
214	827	3	-1	0	-1	}	EMPTY	EMPTY
214	829	1	0	0	0	pqueue _ insert ( ssl -> d1 -> sent _ messages , item )	pqueue _ insert ssl d1 sent _ messages item	EMPTY
214	830	2	-1	0	-1	return 1	EMPTY	EMPTY
214	831	3	-1	0	-1	}	EMPTY	EMPTY
214	833	1	1	0	-1	int dtls1 _ send _ change _ cipher _ spec ( ssl * ssl  int a  int b ) {	ssl a b	EMPTY
214	834	2	-1	0	-1	if ( ssl -> state == a ) {	ssl state a	EMPTY
214	836	2	-1	1	-1	ssl -> d1 -> handshake _ write _ seq = ssl -> d1 -> next _ handshake _ write _ seq	ssl d1 handshake _ write _ seq ssl d1	EMPTY
214	837	2	-1	0	-1	dtls1 _ buffer _ change _ cipher _ spec ( ssl , ssl -> d1 -> handshake _ write _ seq )	dtls1 _ buffer _ change _ cipher _ spec ssl ssl d1 handshake _ write _ seq	EMPTY
214	838	2	-1	0	-1	ssl -> state = b	ssl state b	EMPTY
214	839	3	-1	0	-1	}	EMPTY	EMPTY
214	841	1	0	0	0	return dtls1 _ write _ change _ cipher _ spec ( ssl  dtls1 _ use _ current _ epoch ) ;	ssl	EMPTY
214	842	3	-1	0	-1	}	EMPTY	EMPTY
214	845	1	0	0	-1	void dtls1 _ clear _ record _ buffer ( ssl * ssl ) {	dtls1 _ clear _ record _ buffer ssl	EMPTY
214	846	3	-1	0	-1	pitem * item ;	item	EMPTY
214	848	1	0	0	0	for ( item = pqueue _ pop ( ssl -> d1 -> sent _ messages ) ; item != null ;	item pqueue _ pop ssl d1 sent _ messages item	EMPTY
214	849	2	-1	0	-1	item = pqueue _ pop ( ssl -> d1 -> sent _ messages ) ) {	item pqueue _ pop ssl d1 sent _ messages	EMPTY
214	850	2	-1	0	-1	dtls1 _ hm _ fragment _ free ( ( hm _ fragment * ) item -> data ) ;	hm _ fragment item data	EMPTY
214	851	2	-1	0	-1	pitem _ free ( item ) ;	pitem _ free item	EMPTY
214	852	2	-1	0	-1	}	EMPTY	EMPTY
214	853	3	-1	0	-1	}	EMPTY	EMPTY
214	856	1	0	0	-1	void dtls1 _ set _ message _ header ( ssl * ssl  uint8 _ t mt  unsigned long len	dtls1 _ set _ message _ header ssl mt len	EMPTY
214	857	2	-1	0	-1	unsigned short seq _ num  unsigned long frag _ off	frag _ off	EMPTY
214	858	2	-1	0	-1	unsigned long frag _ len ) {	frag _ len	EMPTY
214	859	3	-1	0	-1	struct hm _ header _ st * msg _ hdr = & ssl -> d1 -> w _ msg _ hdr ;	hm _ header _ st msg _ hdr ssl d1	EMPTY
214	861	1	0	0	-1	msg _ hdr -> type = mt	msg _ hdr type mt	EMPTY
214	862	2	-1	0	-1	msg _ hdr -> msg _ len = len	msg _ hdr msg _ len len	EMPTY
214	863	2	-1	0	-1	msg _ hdr -> seq = seq _ num	msg _ hdr seq	EMPTY
214	864	2	-1	0	-1	msg _ hdr -> frag _ off = frag _ off	msg _ hdr frag _ off frag _ off	EMPTY
214	865	2	-1	0	-1	msg _ hdr -> frag _ len = frag _ len	msg _ hdr frag _ len frag _ len	EMPTY
214	866	3	-1	0	-1	}	EMPTY	EMPTY
214	868	1	0	0	-1	unsigned int dtls1 _ min _ mtu ( void ) {	EMPTY	EMPTY
214	869	2	-1	0	-1	return kminmtu	kminmtu	EMPTY
214	870	3	-1	0	-1	}	EMPTY	EMPTY
214	872	1	0	0	-1	void dtls1 _ get _ message _ header ( uint8 _ t * data	data	EMPTY
214	873	2	-1	0	-1	struct hm _ header _ st * msg _ hdr ) {	hm _ header _ st msg _ hdr	EMPTY
214	874	2	-1	0	-1	memset ( msg _ hdr  numconst  sizeof ( struct hm _ header _ st ) ) ;	msg _ hdr hm _ header _ st	EMPTY
214	875	2	-1	0	-1	msg _ hdr -> type = * ( data ++ )	msg _ hdr type data	EMPTY
214	876	3	-1	0	-1	n2l3 ( data  msg _ hdr -> msg _ len ) ;	data msg _ hdr msg _ len	EMPTY
214	878	1	0	0	-1	n2s ( data  msg _ hdr -> seq ) ;	data msg _ hdr seq	EMPTY
214	879	2	-1	0	-1	n2l3 ( data  msg _ hdr -> frag _ off ) ;	data msg _ hdr frag _ off	EMPTY
214	880	2	-1	0	-1	n2l3 ( data  msg _ hdr -> frag _ len ) ;	data msg _ hdr frag _ len	EMPTY
214	881	3	-1	0	-1	}	EMPTY	EMPTY
252	77	1	0	0	-1	static int closesocket ( int sock ) {	sock	EMPTY
252	78	2	-1	0	-1	return close ( sock )	sock	EMPTY
252	79	2	-1	0	-1	}	EMPTY	EMPTY
252	80	3	-1	0	-1	# endif	EMPTY	EMPTY
252	82	1	0	0	-1	static int sock _ new ( bio * bio ) {	bio	EMPTY
252	83	2	-1	0	-1	bio -> init = 0	bio init	EMPTY
252	84	2	-1	0	-1	bio -> num = 0	bio num	EMPTY
252	85	2	-1	0	-1	bio -> ptr = null ;	bio ptr	EMPTY
252	86	2	-1	0	-1	bio -> flags = 0	bio flags	EMPTY
252	87	2	-1	0	-1	return 1	EMPTY	EMPTY
252	88	3	-1	0	-1	}	EMPTY	EMPTY
252	90	1	0	0	-1	static int sock _ free ( bio * bio ) {	bio	EMPTY
252	91	2	-1	0	-1	if ( bio == null ) {	bio	EMPTY
252	92	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
252	93	3	-1	0	-1	}	EMPTY	EMPTY
252	95	1	0	0	0	if ( bio -> shutdown ) {	bio shutdown	EMPTY
252	96	2	-1	0	-1	if ( bio -> init ) {	bio init	EMPTY
252	97	2	-1	0	-1	closesocket ( bio -> num ) ;	bio num	EMPTY
252	98	2	-1	0	-1	}	EMPTY	EMPTY
252	99	2	-1	0	-1	bio -> init = 0 ;	bio init	EMPTY
252	100	2	-1	0	-1	bio -> flags = 0 ;	bio flags	EMPTY
252	101	2	-1	0	-1	}	EMPTY	EMPTY
252	102	2	-1	0	-1	return 1	EMPTY	EMPTY
252	103	3	-1	0	-1	}	EMPTY	EMPTY
252	105	1	0	0	-1	static int sock _ read ( bio * b  char * out  int outl ) {	b out	EMPTY
252	106	3	-1	0	-1	int ret = 0 ;	EMPTY	EMPTY
252	108	1	0	0	0	if ( out == null ) {	out	EMPTY
252	109	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
252	110	3	-1	0	-1	}	EMPTY	EMPTY
252	112	1	0	0	0	bio _ clear _ socket _ error ( )	bio _ clear _ socket _ error	EMPTY
252	113	2	-1	0	-1	ret = recv ( b -> num , out , outl , 0 )	b num out	EMPTY
252	114	2	-1	0	-1	bio _ clear _ retry _ flags ( b )	bio _ clear _ retry _ flags b	EMPTY
252	115	2	-1	0	-1	if ( ret <= 0 ) {	EMPTY	EMPTY
252	116	2	-1	0	-1	if ( bio _ fd _ should _ retry ( ret ) ) {	bio _ fd _ should _ retry	EMPTY
252	117	2	-1	0	-1	bio _ set _ retry _ read ( b ) ;	bio _ set _ retry _ read b	EMPTY
252	118	2	-1	0	-1	}	EMPTY	EMPTY
252	119	2	-1	0	-1	}	EMPTY	EMPTY
252	120	2	-1	0	-1	return ret	EMPTY	EMPTY
252	121	3	-1	0	-1	}	EMPTY	EMPTY
252	123	1	0	0	-1	static int sock _ write ( bio * b  const char * in  int inl ) {	b	EMPTY
252	124	3	-1	0	-1	int ret ;	EMPTY	EMPTY
252	126	1	0	0	0	bio _ clear _ socket _ error ( )	bio _ clear _ socket _ error	EMPTY
252	127	2	-1	0	-1	ret = send ( b -> num , in , inl , 0 )	b num	EMPTY
252	128	2	-1	0	-1	bio _ clear _ retry _ flags ( b )	bio _ clear _ retry _ flags b	EMPTY
252	129	2	-1	0	-1	if ( ret <= 0 ) {	EMPTY	EMPTY
252	130	2	-1	0	-1	if ( bio _ fd _ should _ retry ( ret ) ) {	bio _ fd _ should _ retry	EMPTY
252	131	2	-1	0	-1	bio _ set _ retry _ write ( b ) ;	bio _ set _ retry _ write b	EMPTY
252	132	2	-1	0	-1	}	EMPTY	EMPTY
252	133	2	-1	0	-1	}	EMPTY	EMPTY
252	134	2	-1	0	-1	return ret	EMPTY	EMPTY
252	135	3	-1	0	-1	}	EMPTY	EMPTY
252	137	1	0	0	-1	static int sock _ puts ( bio * bp  const char * str ) {	bp str	EMPTY
252	138	2	-1	0	-1	return sock _ write ( bp , str , strlen ( str ) )	bp str str	EMPTY
252	139	3	-1	0	-1	}	EMPTY	EMPTY
252	141	1	0	0	-1	static long sock _ ctrl ( bio * b  int cmd  long num  void * ptr ) {	b cmd num ptr	EMPTY
252	142	2	-1	0	-1	long ret = 1 ;	EMPTY	EMPTY
252	143	3	-1	0	-1	int * ip ;	EMPTY	EMPTY
252	145	1	0	0	0	switch ( cmd ) {	cmd	EMPTY
252	146	2	-1	0	-1	case bio _ c _ set _ fd :	EMPTY	EMPTY
252	147	2	-1	0	-1	sock _ free ( b ) ;	b	EMPTY
252	148	2	-1	0	-1	b -> num = * ( ( int * ) ptr ) ;	b num ptr	EMPTY
252	149	2	-1	0	-1	b -> shutdown = ( int ) num ;	b shutdown num	EMPTY
252	150	2	-1	0	-1	b -> init = 1 ;	b init	EMPTY
252	151	2	-1	0	-1	break ;	EMPTY	EMPTY
252	152	2	-1	0	-1	case bio _ c _ get _ fd :	EMPTY	EMPTY
252	153	2	-1	0	-1	if ( b -> init ) {	b init	EMPTY
252	154	2	-1	0	-1	ip = ( int * ) ptr ;	ptr	EMPTY
252	155	2	-1	0	-1	if ( ip != null ) {	EMPTY	EMPTY
252	156	2	-1	0	-1	* ip = b -> num ;	b num	EMPTY
252	157	2	-1	0	-1	}	EMPTY	EMPTY
252	158	2	-1	0	-1	ret = b -> num ;	b num	EMPTY
252	159	2	-1	0	-1	} else {	EMPTY	EMPTY
252	160	2	-1	0	-1	ret = - 1 ;	EMPTY	EMPTY
252	161	2	-1	0	-1	}	EMPTY	EMPTY
252	162	2	-1	0	-1	break ;	EMPTY	EMPTY
252	163	2	-1	0	-1	case bio _ ctrl _ get _ close :	EMPTY	EMPTY
252	164	2	-1	0	-1	ret = b -> shutdown ;	b shutdown	EMPTY
252	165	2	-1	0	-1	break ;	EMPTY	EMPTY
252	166	2	-1	0	-1	case bio _ ctrl _ set _ close :	EMPTY	EMPTY
252	167	2	-1	0	-1	b -> shutdown = ( int ) num ;	b shutdown num	EMPTY
252	168	2	-1	0	-1	break ;	EMPTY	EMPTY
252	169	2	-1	0	-1	case bio _ ctrl _ flush :	EMPTY	EMPTY
252	170	2	-1	0	-1	ret = 1 ;	EMPTY	EMPTY
252	171	2	-1	0	-1	break ;	EMPTY	EMPTY
252	172	2	-1	0	-1	default :	EMPTY	EMPTY
252	173	2	-1	0	-1	ret = 0 ;	EMPTY	EMPTY
252	174	3	-1	0	-1	break ;	EMPTY	EMPTY
252	175	1	0	0	-1	}	EMPTY	EMPTY
252	176	2	-1	0	-1	return ret	EMPTY	EMPTY
252	177	3	-1	0	-1	}	EMPTY	EMPTY
252	179	1	1	0	-1	static const bio _ method methods _ sockp = {	EMPTY	EMPTY
252	180	2	-1	0	-1	bio _ type _ socket  strlit  sock _ write  sock _ read  sock _ puts	EMPTY	EMPTY
252	181	2	-1	1	-1	null  sock _ ctrl  sock _ new  sock _ free  null	EMPTY	EMPTY
252	182	3	-1	0	-1	} ;	EMPTY	EMPTY
252	184	1	0	0	0	return & methods _ sockp	EMPTY	EMPTY
252	186	1	0	0	-1	bio * bio _ new _ socket ( int fd  int close _ flag ) {	bio _ new _ socket fd close _ flag	EMPTY
252	187	3	-1	0	-1	bio * ret ;	EMPTY	EMPTY
252	189	1	0	0	-1	ret = bio _ new ( bio _ s _ socket ( ) )	bio _ new	EMPTY
252	190	2	-1	0	-1	if ( ret == null ) {	EMPTY	EMPTY
252	191	2	-1	0	-1	return null ;	EMPTY	EMPTY
252	192	2	-1	0	-1	}	EMPTY	EMPTY
252	193	2	-1	0	-1	bio _ set _ fd ( ret , fd , close _ flag )	bio _ set _ fd fd close _ flag	EMPTY
252	194	2	-1	0	-1	return ret	EMPTY	EMPTY
252	195	3	-1	0	-1	}	EMPTY	EMPTY
255	64	1	1	0	-1	struct hexdump _ ctx {	hexdump _ ctx	EMPTY
255	65	2	-1	0	-1	bio * bio ;	bio	EMPTY
255	66	2	-1	0	-1	char right _ chars [ numconst ] ;	right _ chars	EMPTY
255	67	2	-1	1	-1	unsigned used ;	used	EMPTY
255	68	2	-1	1	-1	size _ t n ;	n	EMPTY
255	69	2	-1	0	-1	unsigned indent ;	indent	EMPTY
255	70	3	-1	0	-1	} ;	EMPTY	EMPTY
255	72	1	0	0	-1	static void hexbyte ( char * out  uint8 _ t b ) {	out b	EMPTY
255	73	2	-1	0	-1	static const char hextable [ ] =  " 0123456789abcdef "  ;	EMPTY	EMPTY
255	74	2	-1	0	-1	out [ 0 ] = hextable [ b >> 4 ]	out b	EMPTY
255	75	2	-1	0	-1	out [ 1 ] = hextable [ b & 0x0f ]	out b	EMPTY
255	76	3	-1	0	-1	}	EMPTY	EMPTY
255	78	1	0	0	-1	static char to _ char ( uint8 _ t b ) {	b	EMPTY
255	79	2	-1	0	-1	if ( b < 32 || b > 126 ) {	b b	EMPTY
255	80	2	-1	0	-1	return '.' ;	EMPTY	EMPTY
255	81	2	-1	0	-1	}	EMPTY	EMPTY
255	82	2	-1	0	-1	return b	b	EMPTY
255	83	3	-1	0	-1	}	EMPTY	EMPTY
255	87	1	0	0	-1	static int hexdump _ write ( struct hexdump _ ctx * ctx  const uint8 _ t * data	hexdump _ write hexdump _ ctx ctx data	EMPTY
255	88	2	-1	0	-1	size _ t len ) {	len	EMPTY
255	89	2	-1	0	-1	size _ t i ;	i	EMPTY
255	90	2	-1	0	-1	char buf [ 10 ] ;	buf	EMPTY
255	91	3	-1	0	-1	unsigned l ;	EMPTY	EMPTY
255	98	1	1	1	1	for ( i = numconst ; i < len ; i ++ ) {	i i len i	EMPTY
255	99	2	-1	0	-1	if ( ctx -> used == numconst ) {	ctx used	EMPTY
255	101	3	-1	1	-1	bio _ indent ( ctx -> bio , ctx -> indent , uint _ max )	bio _ indent ctx bio ctx indent	EMPTY
255	103	1	0	0	0	hexbyte ( & buf [ 0 ] , ctx -> n >> 24 )	buf ctx n	EMPTY
255	104	2	-1	0	-1	hexbyte ( & buf [ 2 ] , ctx -> n >> 16 )	buf ctx n	EMPTY
255	105	2	-1	0	-1	hexbyte ( & buf [ 4 ] , ctx -> n >> 8 )	buf ctx n	EMPTY
255	106	2	-1	0	-1	hexbyte ( & buf [ 6 ] , ctx -> n )	buf ctx n	EMPTY
255	107	2	-1	0	-1	buf [ 8 ] = buf [ 9 ] = ' '	buf buf	EMPTY
255	108	2	-1	0	-1	if ( bio _ write ( ctx -> bio , buf , 10 ) < 0 ) {	bio _ write ctx bio buf	EMPTY
255	109	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
255	110	2	-1	0	-1	}	EMPTY	EMPTY
255	111	3	-1	0	-1	}	EMPTY	EMPTY
255	113	1	1	0	1	hexbyte ( buf  data [ i ] ) ;	buf data i	EMPTY
255	114	2	-1	0	-1	buf [ numconst ] = ' ' ;	buf	EMPTY
255	115	2	-1	0	-1	l = numconst ;	EMPTY	EMPTY
255	116	2	-1	0	-1	if ( ctx -> used == numconst ) {	ctx used	EMPTY
255	118	2	-1	1	-1	buf [ 3 ] = ' '	buf	EMPTY
255	119	2	-1	0	-1	l = 4	EMPTY	EMPTY
255	120	2	-1	0	-1	if ( ctx -> used == numconst ) {	ctx used	EMPTY
255	123	2	-1	1	-1	buf [ 3 ] = ' '	buf	EMPTY
255	124	2	-1	0	-1	buf [ 4 ] = '|'	buf	EMPTY
255	125	2	-1	0	-1	l = 5	EMPTY	EMPTY
255	126	3	-1	0	-1	}	EMPTY	EMPTY
255	128	1	0	0	0	if ( bio _ write ( ctx -> bio  buf  l ) < numconst ) {	bio _ write ctx bio buf	EMPTY
255	129	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
255	130	2	-1	0	-1	}	EMPTY	EMPTY
255	131	2	-1	0	-1	ctx -> right _ chars [ ctx -> used ] = to _ char ( data [ i ] ) ;	ctx right _ chars ctx used data i	EMPTY
255	132	2	-1	0	-1	ctx -> used ++ ;	ctx used	EMPTY
255	133	2	-1	0	-1	ctx -> n ++ ;	ctx n	EMPTY
255	134	2	-1	0	-1	if ( ctx -> used == numconst ) {	ctx used	EMPTY
255	135	2	-1	0	-1	ctx -> right _ chars [ numconst ] = '|' ;	ctx right _ chars	EMPTY
255	136	2	-1	0	-1	ctx -> right _ chars [ numconst ] = '\\n' ;	ctx right _ chars	EMPTY
255	137	2	-1	0	-1	if ( bio _ write ( ctx -> bio  ctx -> right _ chars  sizeof ( ctx -> right _ chars ) ) < numconst ) {	bio _ write ctx bio ctx right _ chars ctx right _ chars	EMPTY
255	138	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
255	139	2	-1	0	-1	}	EMPTY	EMPTY
255	140	2	-1	0	-1	ctx -> used = numconst ;	ctx used	EMPTY
255	141	2	-1	0	-1	}	EMPTY	EMPTY
255	142	3	-1	0	-1	}	EMPTY	EMPTY
255	144	1	0	0	0	return numconst ;	EMPTY	EMPTY
255	145	3	-1	0	-1	}	EMPTY	EMPTY
255	148	1	1	0	-1	static int finish ( struct hexdump _ ctx * ctx ) {	finish hexdump _ ctx ctx	EMPTY
255	150	2	-1	1	-1	const unsigned n _ bytes = ctx -> used ;	n _ bytes ctx used	EMPTY
255	151	2	-1	0	-1	unsigned l ;	EMPTY	EMPTY
255	152	3	-1	0	-1	char buf [ 5 ] ;	buf	EMPTY
255	154	1	0	0	0	if ( n _ bytes == 0 ) {	n _ bytes	EMPTY
255	155	2	-1	0	-1	return 1 ;	EMPTY	EMPTY
255	156	3	-1	0	-1	}	EMPTY	EMPTY
255	158	1	0	0	0	memset ( buf  ' '  numconst ) ;	buf	EMPTY
255	159	3	-1	0	-1	buf [ 4 ] = '|'	buf	EMPTY
255	161	1	0	0	0	for ( ; ctx -> used < 16 ; ctx -> used ++ ) {	ctx used ctx used	EMPTY
255	162	2	-1	0	-1	l = 3 ;	EMPTY	EMPTY
255	163	2	-1	0	-1	if ( ctx -> used == 7 ) {	ctx used	EMPTY
255	164	2	-1	0	-1	l = 4 ;	EMPTY	EMPTY
255	165	2	-1	0	-1	} else if ( ctx -> used == 15 ) {	ctx used	EMPTY
255	166	2	-1	0	-1	l = 5 ;	EMPTY	EMPTY
255	167	2	-1	0	-1	}	EMPTY	EMPTY
255	168	2	-1	0	-1	if ( bio _ write ( ctx -> bio , buf , l ) < 0 ) {	bio _ write ctx bio buf	EMPTY
255	169	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
255	170	2	-1	0	-1	}	EMPTY	EMPTY
255	171	3	-1	0	-1	}	EMPTY	EMPTY
255	173	1	0	0	-1	ctx -> right _ chars [ n _ bytes ] = '|'	ctx right _ chars n _ bytes	EMPTY
255	174	2	-1	0	-1	ctx -> right _ chars [ n _ bytes + 1 ] = '\n'	ctx right _ chars n _ bytes	EMPTY
255	175	2	-1	0	-1	if ( bio _ write ( ctx -> bio , ctx -> right _ chars , n _ bytes + 2 ) < 0 ) {	bio _ write ctx bio ctx right _ chars n _ bytes	EMPTY
255	176	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
255	177	2	-1	0	-1	}	EMPTY	EMPTY
255	178	2	-1	0	-1	return 1	EMPTY	EMPTY
255	179	3	-1	0	-1	}	EMPTY	EMPTY
255	181	1	0	0	-1	int bio _ hexdump ( bio * bio  const uint8 _ t * data  size _ t len  unsigned indent ) {	bio _ hexdump bio data len indent	EMPTY
255	182	2	-1	0	-1	struct hexdump _ ctx ctx ;	hexdump _ ctx ctx	EMPTY
255	183	2	-1	0	-1	memset ( & ctx  numconst  sizeof ( ctx ) ) ;	ctx ctx	EMPTY
255	184	2	-1	0	-1	ctx . bio = bio ;	ctx bio bio	EMPTY
255	185	3	-1	0	-1	ctx . indent = indent ;	ctx indent indent	EMPTY
255	187	1	0	0	0	if ( ! hexdump _ write ( & ctx  data  len ) || ! finish ( & ctx ) ) {	hexdump _ write ctx data len finish ctx	EMPTY
255	188	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
255	189	3	-1	0	-1	}	EMPTY	EMPTY
255	191	1	0	0	0	return numconst ;	EMPTY	EMPTY
255	192	3	-1	0	-1	}	EMPTY	EMPTY
261	65	1	0	0	-1	uint8 _ t * hmac ( const evp _ md * evp _ md  const void * key  size _ t key _ len	hmac evp _ md key key _ len	EMPTY
261	66	2	-1	0	-1	const uint8 _ t * data  size _ t data _ len  uint8 _ t * out	data out	EMPTY
261	67	2	-1	0	-1	unsigned int * out _ len ) {	EMPTY	EMPTY
261	68	2	-1	0	-1	hmac _ ctx ctx ;	ctx	EMPTY
261	69	3	-1	0	-1	static uint8 _ t static _ out _ buffer [ evp _ max _ md _ size ] ;	EMPTY	EMPTY
261	74	1	1	1	1	if ( out == null ) {	out	EMPTY
261	75	2	-1	0	-1	out = static _ out _ buffer ;	out	EMPTY
261	76	3	-1	0	-1	}	EMPTY	EMPTY
261	78	1	0	0	0	hmac _ ctx _ init ( & ctx )	hmac _ ctx _ init ctx	EMPTY
261	79	2	-1	0	-1	if ( ! hmac _ init _ ex ( & ctx , key , key _ len , evp _ md , null ) ||	hmac _ init _ ex ctx key key _ len evp _ md	EMPTY
261	80	2	-1	0	-1	! hmac _ update ( & ctx , data , data _ len ) ||	hmac _ update ctx data	EMPTY
261	81	2	-1	0	-1	! hmac _ final ( & ctx , out , out _ len ) ) {	hmac _ final ctx out	EMPTY
261	82	2	-1	0	-1	out = null ;	out	EMPTY
261	83	3	-1	0	-1	}	EMPTY	EMPTY
261	85	1	0	0	0	hmac _ ctx _ cleanup ( & ctx )	hmac _ ctx _ cleanup ctx	EMPTY
261	86	2	-1	0	-1	return out	out	EMPTY
261	87	3	-1	0	-1	}	EMPTY	EMPTY
261	89	1	0	0	-1	void hmac _ ctx _ init ( hmac _ ctx * ctx ) {	hmac _ ctx _ init ctx	EMPTY
261	90	2	-1	0	-1	ctx -> md = null ;	ctx md	EMPTY
261	91	2	-1	0	-1	evp _ md _ ctx _ init ( & ctx -> i _ ctx ) ;	evp _ md _ ctx _ init ctx	EMPTY
261	92	2	-1	0	-1	evp _ md _ ctx _ init ( & ctx -> o _ ctx ) ;	evp _ md _ ctx _ init ctx	EMPTY
261	93	2	-1	0	-1	evp _ md _ ctx _ init ( & ctx -> md _ ctx ) ;	evp _ md _ ctx _ init ctx	EMPTY
261	94	3	-1	0	-1	}	EMPTY	EMPTY
261	96	1	0	0	-1	void hmac _ ctx _ cleanup ( hmac _ ctx * ctx ) {	hmac _ ctx _ cleanup ctx	EMPTY
261	97	2	-1	0	-1	evp _ md _ ctx _ cleanup ( & ctx -> i _ ctx ) ;	evp _ md _ ctx _ cleanup ctx	EMPTY
261	98	2	-1	0	-1	evp _ md _ ctx _ cleanup ( & ctx -> o _ ctx ) ;	evp _ md _ ctx _ cleanup ctx	EMPTY
261	99	2	-1	0	-1	evp _ md _ ctx _ cleanup ( & ctx -> md _ ctx ) ;	evp _ md _ ctx _ cleanup ctx	EMPTY
261	100	2	-1	0	-1	openssl _ cleanse ( ctx  sizeof ( hmac _ ctx ) ) ;	openssl _ cleanse ctx	EMPTY
261	101	3	-1	0	-1	}	EMPTY	EMPTY
261	103	1	0	0	-1	int hmac _ init _ ex ( hmac _ ctx * ctx  const void * key  size _ t key _ len	hmac _ init _ ex ctx key key _ len	EMPTY
261	104	2	-1	0	-1	const evp _ md * md  engine * impl ) {	md	EMPTY
261	105	2	-1	0	-1	if ( md == null ) {	md	EMPTY
261	106	2	-1	0	-1	md = ctx -> md ;	md ctx md	EMPTY
261	107	3	-1	0	-1	}	EMPTY	EMPTY
261	116	1	1	1	1	if ( md != ctx -> md || key != null ) {	md ctx md key	EMPTY
261	117	2	-1	0	-1	size _ t i ;	EMPTY	EMPTY
261	118	2	-1	0	-1	uint8 _ t pad [ hmac _ max _ md _ cblock ] ;	EMPTY	EMPTY
261	119	2	-1	0	-1	uint8 _ t key _ block [ hmac _ max _ md _ cblock ] ;	EMPTY	EMPTY
261	120	3	-1	0	-1	unsigned key _ block _ len ;	EMPTY	EMPTY
261	122	1	1	0	1	size _ t block _ size = evp _ md _ block _ size ( md ) ;	evp _ md _ block _ size md	EMPTY
261	123	2	-1	0	-1	assert ( block _ size <= sizeof ( key _ block ) ) ;	EMPTY	EMPTY
261	124	2	-1	0	-1	if ( block _ size < key _ len ) {	key _ len	EMPTY
261	126	2	-1	1	-1	if ( ! evp _ digestinit _ ex ( & ctx -> md _ ctx , md , impl ) ||	evp _ digestinit _ ex ctx md	EMPTY
261	127	2	-1	0	-1	! evp _ digestupdate ( & ctx -> md _ ctx , key , key _ len ) ||	evp _ digestupdate ctx key key _ len	EMPTY
261	128	2	-1	0	-1	! evp _ digestfinal _ ex ( & ctx -> md _ ctx , key _ block , & key _ block _ len ) ) {	evp _ digestfinal _ ex ctx	EMPTY
261	129	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
261	130	2	-1	0	-1	}	EMPTY	EMPTY
261	131	2	-1	0	-1	}	EMPTY	EMPTY
261	132	2	-1	0	-1	assert ( key _ len <= sizeof ( key _ block ) ) ;	key _ len	EMPTY
261	133	2	-1	0	-1	memcpy ( key _ block  key  key _ len ) ;	key key _ len	EMPTY
261	134	2	-1	0	-1	key _ block _ len = ( unsigned ) key _ len ;	key _ len	EMPTY
261	135	2	-1	0	-1	}	EMPTY	EMPTY
261	137	2	-1	1	-1	if ( key _ block _ len != hmac _ max _ md _ cblock ) {	EMPTY	EMPTY
261	138	2	-1	0	-1	memset ( & key _ block [ key _ block _ len ] , 0 , sizeof ( key _ block ) - key _ block _ len ) ;	EMPTY	EMPTY
261	139	3	-1	0	-1	}	EMPTY	EMPTY
261	141	1	0	0	0	for ( i = 0 ; i < hmac _ max _ md _ cblock ; i ++ ) {	EMPTY	EMPTY
261	142	2	-1	0	-1	pad [ i ] = 0x36 ^ key _ block [ i ] ;	EMPTY	EMPTY
261	143	2	-1	0	-1	}	EMPTY	EMPTY
261	144	2	-1	0	-1	if ( ! evp _ digestinit _ ex ( & ctx -> i _ ctx , md , impl ) ||	evp _ digestinit _ ex ctx md	EMPTY
261	145	2	-1	0	-1	! evp _ digestupdate ( & ctx -> i _ ctx , pad , evp _ md _ block _ size ( md ) ) ) {	evp _ digestupdate ctx evp _ md _ block _ size md	EMPTY
261	146	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
261	147	3	-1	0	-1	}	EMPTY	EMPTY
261	149	1	0	0	0	for ( i = 0 ; i < hmac _ max _ md _ cblock ; i ++ ) {	EMPTY	EMPTY
261	150	2	-1	0	-1	pad [ i ] = 0x5c ^ key _ block [ i ] ;	EMPTY	EMPTY
261	151	2	-1	0	-1	}	EMPTY	EMPTY
261	152	2	-1	0	-1	if ( ! evp _ digestinit _ ex ( & ctx -> o _ ctx , md , impl ) ||	evp _ digestinit _ ex ctx md	EMPTY
261	153	2	-1	0	-1	! evp _ digestupdate ( & ctx -> o _ ctx , pad , evp _ md _ block _ size ( md ) ) ) {	evp _ digestupdate ctx evp _ md _ block _ size md	EMPTY
261	154	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
261	155	3	-1	0	-1	}	EMPTY	EMPTY
261	157	1	0	0	-1	ctx -> md = md	ctx md md	EMPTY
261	158	3	-1	0	-1	}	EMPTY	EMPTY
261	160	1	0	0	0	if ( ! evp _ md _ ctx _ copy _ ex ( & ctx -> md _ ctx  & ctx -> i _ ctx ) ) {	evp _ md _ ctx _ copy _ ex ctx ctx	EMPTY
261	161	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
261	162	3	-1	0	-1	}	EMPTY	EMPTY
261	164	1	0	0	0	return numconst ;	EMPTY	EMPTY
261	165	3	-1	0	-1	}	EMPTY	EMPTY
261	167	1	0	0	-1	int hmac _ update ( hmac _ ctx * ctx  const uint8 _ t * data  size _ t data _ len ) {	hmac _ update ctx data	EMPTY
261	168	2	-1	0	-1	return evp _ digestupdate ( & ctx -> md _ ctx  data  data _ len ) ;	evp _ digestupdate ctx data	EMPTY
261	169	3	-1	0	-1	}	EMPTY	EMPTY
261	171	1	0	0	-1	int hmac _ final ( hmac _ ctx * ctx  uint8 _ t * out  unsigned int * out _ len ) {	hmac _ final ctx out	EMPTY
261	172	2	-1	0	-1	unsigned int i ;	EMPTY	EMPTY
261	173	3	-1	0	-1	uint8 _ t buf [ evp _ max _ md _ size ] ;	EMPTY	EMPTY
261	177	1	1	1	1	if ( ! evp _ digestfinal _ ex ( & ctx -> md _ ctx , buf , & i ) ||	evp _ digestfinal _ ex ctx	EMPTY
261	178	2	-1	0	-1	! evp _ md _ ctx _ copy _ ex ( & ctx -> md _ ctx , & ctx -> o _ ctx ) ||	evp _ md _ ctx _ copy _ ex ctx ctx	EMPTY
261	179	2	-1	0	-1	! evp _ digestupdate ( & ctx -> md _ ctx , buf , i ) ||	evp _ digestupdate ctx	EMPTY
261	180	2	-1	0	-1	! evp _ digestfinal _ ex ( & ctx -> md _ ctx , out , out _ len ) ) {	evp _ digestfinal _ ex ctx out	EMPTY
261	181	2	-1	0	-1	* out _ len = 0 ;	EMPTY	EMPTY
261	182	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
261	183	3	-1	0	-1	}	EMPTY	EMPTY
261	185	1	0	0	0	return 1	EMPTY	EMPTY
261	186	3	-1	0	-1	}	EMPTY	EMPTY
261	188	1	0	0	-1	size _ t hmac _ size ( const hmac _ ctx * ctx ) {	hmac _ size ctx	EMPTY
261	189	2	-1	0	-1	return evp _ md _ size ( ctx -> md ) ;	evp _ md _ size ctx md	EMPTY
261	190	3	-1	0	-1	}	EMPTY	EMPTY
261	192	1	0	0	-1	int hmac _ ctx _ copy _ ex ( hmac _ ctx * dest  const hmac _ ctx * src ) {	hmac _ ctx _ copy _ ex dest src	EMPTY
261	193	2	-1	0	-1	if ( ! evp _ md _ ctx _ copy _ ex ( & dest -> i _ ctx  & src -> i _ ctx ) ||	evp _ md _ ctx _ copy _ ex dest src	EMPTY
261	194	2	-1	0	-1	! evp _ md _ ctx _ copy _ ex ( & dest -> o _ ctx  & src -> o _ ctx ) ||	evp _ md _ ctx _ copy _ ex dest src	EMPTY
261	195	2	-1	0	-1	! evp _ md _ ctx _ copy _ ex ( & dest -> md _ ctx  & src -> md _ ctx ) ) {	evp _ md _ ctx _ copy _ ex dest src	EMPTY
261	196	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
261	197	3	-1	0	-1	}	EMPTY	EMPTY
261	199	1	0	0	-1	dest -> md = src -> md ;	dest md src md	EMPTY
261	200	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
261	201	3	-1	0	-1	}	EMPTY	EMPTY
261	203	1	0	0	-1	int hmac _ init ( hmac _ ctx * ctx  const void * key  int key _ len  const evp _ md * md ) {	ctx key key _ len md	EMPTY
261	204	2	-1	0	-1	if ( key && md ) {	key md	EMPTY
261	205	2	-1	0	-1	hmac _ ctx _ init ( ctx ) ;	hmac _ ctx _ init ctx	EMPTY
261	206	2	-1	0	-1	}	EMPTY	EMPTY
261	207	2	-1	0	-1	return hmac _ init _ ex ( ctx  key  key _ len  md  null ) ;	hmac _ init _ ex ctx key key _ len md	EMPTY
261	208	3	-1	0	-1	}	EMPTY	EMPTY
261	210	1	0	0	-1	int hmac _ ctx _ copy ( hmac _ ctx * dest  const hmac _ ctx * src ) {	hmac _ ctx _ copy dest src	EMPTY
261	211	2	-1	0	-1	hmac _ ctx _ init ( dest ) ;	hmac _ ctx _ init dest	EMPTY
261	212	2	-1	0	-1	return hmac _ ctx _ copy _ ex ( dest  src ) ;	hmac _ ctx _ copy _ ex dest src	EMPTY
261	213	3	-1	0	-1	}	EMPTY	EMPTY
283	63	1	0	0	-1	int pkcs5 _ pbkdf2 _ hmac ( const char * password  size _ t password _ len	pkcs5 _ pbkdf2 _ hmac password password _ len	EMPTY
283	64	2	-1	0	-1	const uint8 _ t * salt  size _ t salt _ len  unsigned iterations	EMPTY	EMPTY
283	65	2	-1	0	-1	const evp _ md * digest  size _ t key _ len  uint8 _ t * out _ key ) {	digest key _ len	EMPTY
283	66	2	-1	0	-1	uint8 _ t digest _ tmp [ evp _ max _ md _ size ] , * p , itmp [ 4 ] ;	EMPTY	EMPTY
283	67	2	-1	0	-1	size _ t cplen , mdlen , tkeylen , k ;	EMPTY	EMPTY
283	68	2	-1	0	-1	unsigned j ;	EMPTY	EMPTY
283	69	2	-1	0	-1	uint32 _ t i = 1 ;	EMPTY	EMPTY
283	70	3	-1	0	-1	hmac _ ctx hctx _ tpl , hctx ;	EMPTY	EMPTY
283	72	1	1	0	-1	mdlen = evp _ md _ size ( digest )	evp _ md _ size digest	EMPTY
283	73	2	-1	0	-1	hmac _ ctx _ init ( & hctx _ tpl )	hmac _ ctx _ init	EMPTY
283	74	2	-1	0	-1	p = out _ key	EMPTY	EMPTY
283	75	2	-1	0	-1	tkeylen = key _ len	key _ len	EMPTY
283	76	2	-1	0	-1	if ( ! hmac _ init _ ex ( & hctx _ tpl , password , password _ len , digest , null ) ) {	hmac _ init _ ex password password _ len digest	EMPTY
283	77	2	-1	0	-1	hmac _ ctx _ cleanup ( & hctx _ tpl ) ;	hmac _ ctx _ cleanup	EMPTY
283	78	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
283	79	2	-1	0	-1	}	EMPTY	EMPTY
283	80	2	-1	0	-1	while ( tkeylen ) {	EMPTY	EMPTY
283	81	2	-1	0	-1	if ( tkeylen > mdlen ) {	EMPTY	EMPTY
283	82	2	-1	0	-1	cplen = mdlen ;	EMPTY	EMPTY
283	83	2	-1	0	-1	} else {	EMPTY	EMPTY
283	84	2	-1	0	-1	cplen = tkeylen ;	EMPTY	EMPTY
283	85	2	-1	0	-1	}	EMPTY	EMPTY
283	88	2	-1	1	-1	itmp [ 0 ] = ( uint8 _ t ) ( ( i >> 24 ) & 0xff )	EMPTY	EMPTY
283	89	2	-1	0	-1	itmp [ 1 ] = ( uint8 _ t ) ( ( i >> 16 ) & 0xff )	EMPTY	EMPTY
283	90	2	-1	0	-1	itmp [ 2 ] = ( uint8 _ t ) ( ( i >> 8 ) & 0xff )	EMPTY	EMPTY
283	91	2	-1	0	-1	itmp [ 3 ] = ( uint8 _ t ) ( i & 0xff )	EMPTY	EMPTY
283	92	2	-1	0	-1	if ( ! hmac _ ctx _ copy ( & hctx , & hctx _ tpl ) ) {	hmac _ ctx _ copy	EMPTY
283	93	2	-1	0	-1	hmac _ ctx _ cleanup ( & hctx _ tpl ) ;	hmac _ ctx _ cleanup	EMPTY
283	94	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
283	95	2	-1	0	-1	}	EMPTY	EMPTY
283	96	2	-1	0	-1	if ( ! hmac _ update ( & hctx , salt , salt _ len ) ||	hmac _ update	EMPTY
283	97	2	-1	0	-1	! hmac _ update ( & hctx , itmp , 4 ) ||	hmac _ update	EMPTY
283	98	2	-1	0	-1	! hmac _ final ( & hctx , digest _ tmp , null ) ) {	hmac _ final	EMPTY
283	99	2	-1	0	-1	hmac _ ctx _ cleanup ( & hctx _ tpl ) ;	hmac _ ctx _ cleanup	EMPTY
283	100	2	-1	0	-1	hmac _ ctx _ cleanup ( & hctx ) ;	hmac _ ctx _ cleanup	EMPTY
283	101	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
283	102	2	-1	0	-1	}	EMPTY	EMPTY
283	103	3	-1	0	-1	hmac _ ctx _ cleanup ( & hctx )	hmac _ ctx _ cleanup	EMPTY
283	104	1	0	0	-1	memcpy ( p  digest _ tmp  cplen ) ;	EMPTY	EMPTY
283	105	2	-1	0	-1	for ( j = 1 ; j < iterations ; j ++ ) {	EMPTY	EMPTY
283	106	2	-1	0	-1	if ( ! hmac _ ctx _ copy ( & hctx , & hctx _ tpl ) ) {	hmac _ ctx _ copy	EMPTY
283	107	2	-1	0	-1	hmac _ ctx _ cleanup ( & hctx _ tpl ) ;	hmac _ ctx _ cleanup	EMPTY
283	108	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
283	109	2	-1	0	-1	}	EMPTY	EMPTY
283	110	2	-1	0	-1	if ( ! hmac _ update ( & hctx , digest _ tmp , mdlen ) ||	hmac _ update	EMPTY
283	111	2	-1	0	-1	! hmac _ final ( & hctx , digest _ tmp , null ) ) {	hmac _ final	EMPTY
283	112	2	-1	0	-1	hmac _ ctx _ cleanup ( & hctx _ tpl ) ;	hmac _ ctx _ cleanup	EMPTY
283	113	2	-1	0	-1	hmac _ ctx _ cleanup ( & hctx ) ;	hmac _ ctx _ cleanup	EMPTY
283	114	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
283	115	2	-1	0	-1	}	EMPTY	EMPTY
283	116	2	-1	0	-1	hmac _ ctx _ cleanup ( & hctx ) ;	hmac _ ctx _ cleanup	EMPTY
283	117	2	-1	0	-1	for ( k = 0 ; k < cplen ; k ++ ) {	EMPTY	EMPTY
283	118	2	-1	0	-1	p [ k ] ^= digest _ tmp [ k ] ;	EMPTY	EMPTY
283	119	2	-1	0	-1	}	EMPTY	EMPTY
283	120	2	-1	0	-1	}	EMPTY	EMPTY
283	121	2	-1	0	-1	tkeylen -= cplen	EMPTY	EMPTY
283	122	2	-1	0	-1	i ++	EMPTY	EMPTY
283	123	2	-1	0	-1	p += cplen	EMPTY	EMPTY
283	124	2	-1	0	-1	}	EMPTY	EMPTY
283	125	3	-1	0	-1	hmac _ ctx _ cleanup ( & hctx _ tpl ) ;	hmac _ ctx _ cleanup	EMPTY
283	138	1	1	1	-1	if ( iterations == 0 ) {	EMPTY	EMPTY
283	139	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
283	140	3	-1	0	-1	}	EMPTY	EMPTY
283	142	1	0	0	0	return 1	EMPTY	EMPTY
283	143	3	-1	0	-1	}	EMPTY	EMPTY
283	145	1	0	0	-1	int pkcs5 _ pbkdf2 _ hmac _ sha1 ( const char * password  size _ t password _ len	pkcs5 _ pbkdf2 _ hmac _ sha1 password password _ len	EMPTY
283	146	2	-1	0	-1	const uint8 _ t * salt  size _ t salt _ len	EMPTY	EMPTY
283	147	2	-1	0	-1	unsigned iterations  size _ t key _ len	key _ len	EMPTY
283	148	2	-1	0	-1	uint8 _ t * out _ key ) {	EMPTY	EMPTY
283	149	2	-1	0	-1	return pkcs5 _ pbkdf2 _ hmac ( password  password _ len  salt  salt _ len  iterations	pkcs5 _ pbkdf2 _ hmac password password _ len	EMPTY
283	150	2	-1	0	-1	evp _ sha1 ( )  key _ len  out _ key ) ;	key _ len	EMPTY
283	151	3	-1	0	-1	}	EMPTY	EMPTY
292	73	1	0	0	-1	int rsa _ padding _ add _ pkcs1 _ type _ 1 ( uint8 _ t * to  unsigned to _ len	to	EMPTY
292	74	2	-1	0	-1	const uint8 _ t * from  unsigned from _ len ) {	from	EMPTY
292	75	2	-1	0	-1	unsigned j ;	EMPTY	EMPTY
292	76	3	-1	0	-1	uint8 _ t * p ;	p	EMPTY
292	78	1	0	0	0	if ( to _ len < rsa _ pkcs1 _ padding _ size ) {	EMPTY	EMPTY
292	79	2	-1	0	-1	openssl _ put _ error ( rsa , rsa _ r _ key _ size _ too _ small ) ;	EMPTY	EMPTY
292	80	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
292	81	3	-1	0	-1	}	EMPTY	EMPTY
292	83	1	0	0	0	if ( from _ len > to _ len - rsa _ pkcs1 _ padding _ size ) {	EMPTY	EMPTY
292	84	2	-1	0	-1	openssl _ put _ error ( rsa , rsa _ r _ data _ too _ large _ for _ key _ size ) ;	EMPTY	EMPTY
292	85	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
292	86	3	-1	0	-1	}	EMPTY	EMPTY
292	88	1	0	0	-1	p = ( uint8 _ t * ) to	p to	EMPTY
292	90	1	1	0	-1	* ( p ++ ) = 0	p	EMPTY
292	91	3	-1	1	-1	* ( p ++ ) = 1	p	EMPTY
292	94	1	1	1	-1	j = to _ len - 3 - from _ len	EMPTY	EMPTY
292	95	2	-1	0	-1	memset ( p  numconst  j ) ;	p	EMPTY
292	96	2	-1	0	-1	p += j	p	EMPTY
292	97	2	-1	0	-1	* ( p ++ ) = 0	p	EMPTY
292	98	2	-1	0	-1	memcpy ( p  from  ( unsigned int ) from _ len ) ;	p from	EMPTY
292	99	2	-1	0	-1	return 1	EMPTY	EMPTY
292	100	3	-1	0	-1	}	EMPTY	EMPTY
292	102	1	0	0	-1	int rsa _ padding _ check _ pkcs1 _ type _ 1 ( uint8 _ t * to  unsigned to _ len	to	EMPTY
292	103	2	-1	0	-1	const uint8 _ t * from  unsigned from _ len ) {	from	EMPTY
292	104	2	-1	0	-1	unsigned i  j ;	i	EMPTY
292	105	3	-1	0	-1	const uint8 _ t * p ;	p	EMPTY
292	107	1	0	0	0	if ( from _ len < numconst ) {	EMPTY	EMPTY
292	108	2	-1	0	-1	openssl _ put _ error ( rsa  rsa _ r _ data _ too _ small ) ;	EMPTY	EMPTY
292	109	2	-1	0	-1	return - numconst ;	EMPTY	EMPTY
292	110	3	-1	0	-1	}	EMPTY	EMPTY
292	112	1	0	0	-1	p = from ;	p from	EMPTY
292	113	2	-1	0	-1	if ( ( * ( p ++ ) != numconst ) || ( * ( p ++ ) != numconst ) ) {	p p	EMPTY
292	114	2	-1	0	-1	openssl _ put _ error ( rsa  rsa _ r _ block _ type _ is _ not _ 01 ) ;	EMPTY	EMPTY
292	115	2	-1	0	-1	return - numconst ;	EMPTY	EMPTY
292	116	3	-1	0	-1	}	EMPTY	EMPTY
292	119	1	1	1	-1	j = from _ len - 2	EMPTY	EMPTY
292	120	2	-1	0	-1	for ( i = numconst ; i < j ; i ++ ) {	i i i	EMPTY
292	122	2	-1	1	-1	if ( * p != 0xff ) {	p	EMPTY
292	123	2	-1	0	-1	if ( * p == 0 ) {	p	EMPTY
292	124	2	-1	0	-1	p ++ ;	p	EMPTY
292	125	2	-1	0	-1	break ;	EMPTY	EMPTY
292	126	2	-1	0	-1	} else {	EMPTY	EMPTY
292	127	2	-1	0	-1	openssl _ put _ error ( rsa , rsa _ r _ bad _ fixed _ header _ decrypt ) ;	EMPTY	EMPTY
292	128	2	-1	0	-1	return - 1 ;	EMPTY	EMPTY
292	129	2	-1	0	-1	}	EMPTY	EMPTY
292	130	2	-1	0	-1	}	EMPTY	EMPTY
292	131	2	-1	0	-1	p ++	p	EMPTY
292	132	3	-1	0	-1	}	EMPTY	EMPTY
292	134	1	0	0	0	if ( i == j ) {	i	EMPTY
292	135	2	-1	0	-1	openssl _ put _ error ( rsa  rsa _ r _ null _ before _ block _ missing ) ;	EMPTY	EMPTY
292	136	2	-1	0	-1	return - numconst ;	EMPTY	EMPTY
292	137	3	-1	0	-1	}	EMPTY	EMPTY
292	139	1	1	0	1	if ( i < numconst ) {	i	EMPTY
292	140	2	-1	0	-1	openssl _ put _ error ( rsa  rsa _ r _ bad _ pad _ byte _ count ) ;	EMPTY	EMPTY
292	141	2	-1	0	-1	return - numconst ;	EMPTY	EMPTY
292	142	2	-1	0	-1	}	EMPTY	EMPTY
292	143	2	-1	1	-1	i ++ ;	i	EMPTY
292	144	2	-1	0	-1	j -= i	i	EMPTY
292	145	2	-1	0	-1	if ( j > to _ len ) {	EMPTY	EMPTY
292	146	2	-1	0	-1	openssl _ put _ error ( rsa , rsa _ r _ data _ too _ large ) ;	EMPTY	EMPTY
292	147	2	-1	0	-1	return - 1 ;	EMPTY	EMPTY
292	148	2	-1	0	-1	}	EMPTY	EMPTY
292	149	3	-1	0	-1	memcpy ( to  p  j ) ;	to p	EMPTY
292	151	1	0	0	0	return j	EMPTY	EMPTY
292	152	3	-1	0	-1	}	EMPTY	EMPTY
292	154	1	0	0	-1	int rsa _ padding _ add _ pkcs1 _ type _ 2 ( uint8 _ t * to  unsigned to _ len	to	EMPTY
292	155	2	-1	0	-1	const uint8 _ t * from  unsigned from _ len ) {	from	EMPTY
292	156	2	-1	0	-1	unsigned i  j ;	i	EMPTY
292	157	3	-1	0	-1	uint8 _ t * p ;	p	EMPTY
292	159	1	0	0	0	if ( to _ len < rsa _ pkcs1 _ padding _ size ) {	EMPTY	EMPTY
292	160	2	-1	0	-1	openssl _ put _ error ( rsa  rsa _ r _ key _ size _ too _ small ) ;	EMPTY	EMPTY
292	161	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
292	162	3	-1	0	-1	}	EMPTY	EMPTY
292	164	1	0	0	0	if ( from _ len > to _ len - rsa _ pkcs1 _ padding _ size ) {	EMPTY	EMPTY
292	165	2	-1	0	-1	openssl _ put _ error ( rsa  rsa _ r _ data _ too _ large _ for _ key _ size ) ;	EMPTY	EMPTY
292	166	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
292	167	3	-1	0	-1	}	EMPTY	EMPTY
292	169	1	0	0	-1	p = ( unsigned char * ) to ;	p to	EMPTY
292	175	1	1	1	-1	j = to _ len - 3 - from _ len	EMPTY	EMPTY
292	177	1	0	0	0	if ( ! rand _ bytes ( p , j ) ) {	rand _ bytes p	EMPTY
292	178	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
292	179	3	-1	0	-1	}	EMPTY	EMPTY
292	181	1	0	0	0	for ( i = 0 ; i < j ; i ++ ) {	i i i	EMPTY
292	182	2	-1	0	-1	while ( * p == 0 ) {	p	EMPTY
292	183	2	-1	0	-1	if ( ! rand _ bytes ( p , 1 ) ) {	rand _ bytes p	EMPTY
292	184	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
292	185	2	-1	0	-1	}	EMPTY	EMPTY
292	186	2	-1	0	-1	}	EMPTY	EMPTY
292	187	2	-1	0	-1	p ++ ;	p	EMPTY
292	188	3	-1	0	-1	}	EMPTY	EMPTY
292	190	1	0	0	-1	* ( p ++ ) = 0	p	EMPTY
292	192	1	0	0	0	memcpy ( p  from  ( unsigned int ) from _ len ) ;	p from	EMPTY
292	193	2	-1	0	-1	return 1	EMPTY	EMPTY
292	194	3	-1	0	-1	}	EMPTY	EMPTY
292	196	1	0	0	-1	int rsa _ padding _ check _ pkcs1 _ type _ 2 ( uint8 _ t * to  unsigned to _ len	to	EMPTY
292	197	2	-1	0	-1	const uint8 _ t * from  unsigned from _ len ) {	from	EMPTY
292	198	2	-1	0	-1	if ( from _ len == numconst ) {	EMPTY	EMPTY
292	199	2	-1	0	-1	openssl _ put _ error ( rsa  rsa _ r _ empty _ public _ key ) ;	EMPTY	EMPTY
292	200	2	-1	0	-1	return - numconst ;	EMPTY	EMPTY
292	201	3	-1	0	-1	}	EMPTY	EMPTY
292	205	1	1	1	1	if ( from _ len < rsa _ pkcs1 _ padding _ size ) {	EMPTY	EMPTY
292	208	2	-1	1	-1	openssl _ put _ error ( rsa  rsa _ r _ key _ size _ too _ small ) ;	EMPTY	EMPTY
292	209	2	-1	0	-1	return - 1	EMPTY	EMPTY
292	210	3	-1	0	-1	}	EMPTY	EMPTY
292	212	1	0	0	0	unsigned first _ byte _ is _ zero = constant _ time _ eq ( from [ numconst ]  numconst ) ;	constant _ time _ eq from	EMPTY
292	213	3	-1	0	-1	unsigned second _ byte _ is _ two = constant _ time _ eq ( from [ numconst ]  numconst ) ;	constant _ time _ eq from	EMPTY
292	215	1	0	0	0	unsigned i  zero _ index = numconst  looking _ for _ index = ~ numconst ;	i	EMPTY
292	216	2	-1	0	-1	for ( i = numconst ; i < from _ len ; i ++ ) {	i i i	EMPTY
292	217	2	-1	0	-1	unsigned equals0 = constant _ time _ is _ zero ( from [ i ] ) ;	constant _ time _ is _ zero from i	EMPTY
292	218	2	-1	0	-1	zero _ index = constant _ time _ select ( looking _ for _ index & equals0  ( unsigned ) i	constant _ time _ select i	EMPTY
292	219	2	-1	0	-1	zero _ index ) ;	EMPTY	EMPTY
292	220	2	-1	0	-1	looking _ for _ index = constant _ time _ select ( equals0  numconst  looking _ for _ index ) ;	constant _ time _ select	EMPTY
292	221	3	-1	0	-1	}	EMPTY	EMPTY
292	224	1	1	1	1	unsigned valid _ index = first _ byte _ is _ zero ;	valid _ index	EMPTY
292	225	3	-1	0	-1	valid _ index &= second _ byte _ is _ two	valid _ index	EMPTY
292	228	1	1	1	-1	valid _ index &= ~ looking _ for _ index	valid _ index	EMPTY
292	231	1	1	1	-1	valid _ index &= constant _ time _ ge ( zero _ index , 2 + 8 )	valid _ index constant _ time _ ge	EMPTY
292	234	1	1	1	-1	zero _ index ++	EMPTY	EMPTY
292	240	1	1	1	1	if ( ! valid _ index ) {	valid _ index	EMPTY
292	241	2	-1	0	-1	openssl _ put _ error ( rsa , rsa _ r _ pkcs _ decoding _ error ) ;	EMPTY	EMPTY
292	242	2	-1	0	-1	return - 1 ;	EMPTY	EMPTY
292	243	3	-1	0	-1	}	EMPTY	EMPTY
292	245	1	1	0	1	const unsigned msg _ len = from _ len - zero _ index ;	msg _ len	EMPTY
292	246	2	-1	0	-1	if ( msg _ len > to _ len ) {	msg _ len	EMPTY
292	249	2	-1	1	-1	openssl _ put _ error ( rsa  rsa _ r _ pkcs _ decoding _ error ) ;	EMPTY	EMPTY
292	250	2	-1	0	-1	return - 1	EMPTY	EMPTY
292	251	3	-1	0	-1	}	EMPTY	EMPTY
292	253	1	0	0	0	if ( msg _ len > int _ max ) {	msg _ len	EMPTY
292	254	2	-1	0	-1	openssl _ put _ error ( rsa  err _ r _ overflow ) ;	EMPTY	EMPTY
292	255	2	-1	0	-1	return - numconst ;	EMPTY	EMPTY
292	256	3	-1	0	-1	}	EMPTY	EMPTY
292	258	1	0	0	0	memcpy ( to  & from [ zero _ index ]  msg _ len ) ;	to from msg _ len	EMPTY
292	259	2	-1	0	-1	return ( int ) msg _ len ;	msg _ len	EMPTY
292	260	3	-1	0	-1	}	EMPTY	EMPTY
292	262	1	0	0	-1	int rsa _ padding _ add _ none ( uint8 _ t * to  unsigned to _ len  const uint8 _ t * from	to from	EMPTY
292	263	2	-1	0	-1	unsigned from _ len ) {	EMPTY	EMPTY
292	264	2	-1	0	-1	if ( from _ len > to _ len ) {	EMPTY	EMPTY
292	265	2	-1	0	-1	openssl _ put _ error ( rsa  rsa _ r _ data _ too _ large _ for _ key _ size ) ;	EMPTY	EMPTY
292	266	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
292	267	3	-1	0	-1	}	EMPTY	EMPTY
292	269	1	0	0	0	if ( from _ len < to _ len ) {	EMPTY	EMPTY
292	270	2	-1	0	-1	openssl _ put _ error ( rsa  rsa _ r _ data _ too _ small _ for _ key _ size ) ;	EMPTY	EMPTY
292	271	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
292	272	3	-1	0	-1	}	EMPTY	EMPTY
292	274	1	0	0	0	memcpy ( to  from  ( unsigned int ) from _ len ) ;	to from	EMPTY
292	275	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
292	276	3	-1	0	-1	}	EMPTY	EMPTY
292	278	1	0	0	-1	int pkcs1 _ mgf1 ( uint8 _ t * mask  unsigned len  const uint8 _ t * seed	mask len	EMPTY
292	279	2	-1	0	-1	unsigned seedlen  const evp _ md * dgst ) {	EMPTY	EMPTY
292	280	2	-1	0	-1	unsigned outlen = numconst ;	EMPTY	EMPTY
292	281	2	-1	0	-1	uint32 _ t i ;	i	EMPTY
292	282	2	-1	0	-1	uint8 _ t cnt [ numconst ] ;	EMPTY	EMPTY
292	283	2	-1	0	-1	evp _ md _ ctx c ;	c	EMPTY
292	284	2	-1	0	-1	uint8 _ t md [ evp _ max _ md _ size ] ;	md	EMPTY
292	285	2	-1	0	-1	unsigned mdlen ;	EMPTY	EMPTY
292	286	3	-1	0	-1	int ret = - numconst ;	ret	EMPTY
292	288	1	0	0	0	evp _ md _ ctx _ init ( & c ) ;	evp _ md _ ctx _ init c	EMPTY
292	289	3	-1	0	-1	mdlen = evp _ md _ size ( dgst ) ;	evp _ md _ size	EMPTY
292	291	1	0	0	0	for ( i = numconst ; outlen < len ; i ++ ) {	i len i	EMPTY
292	292	2	-1	0	-1	cnt [ numconst ] = ( uint8 _ t ) ( ( i >> numconst ) & numconst ) ;	i	EMPTY
292	293	2	-1	0	-1	cnt [ numconst ] = ( uint8 _ t ) ( ( i >> numconst ) & numconst ) ;	i	EMPTY
292	294	2	-1	0	-1	cnt [ numconst ] = ( uint8 _ t ) ( ( i >> numconst ) ) & numconst ;	i	EMPTY
292	295	2	-1	0	-1	cnt [ numconst ] = ( uint8 _ t ) ( i & numconst ) ;	i	EMPTY
292	296	2	-1	0	-1	if ( ! evp _ digestinit _ ex ( & c  dgst  null ) ||	evp _ digestinit _ ex c	EMPTY
292	297	2	-1	0	-1	! evp _ digestupdate ( & c  seed  seedlen ) ||	evp _ digestupdate c	EMPTY
292	298	2	-1	0	-1	! evp _ digestupdate ( & c  cnt  numconst ) ) {	evp _ digestupdate c	EMPTY
292	299	2	-1	0	-1	goto err ;	EMPTY	EMPTY
292	300	3	-1	0	-1	}	EMPTY	EMPTY
292	302	1	0	0	0	if ( outlen + mdlen <= len ) {	len	EMPTY
292	303	2	-1	0	-1	if ( ! evp _ digestfinal _ ex ( & c  mask + outlen  null ) ) {	evp _ digestfinal _ ex c mask	EMPTY
292	304	2	-1	0	-1	goto err ;	EMPTY	EMPTY
292	305	2	-1	0	-1	}	EMPTY	EMPTY
292	306	2	-1	0	-1	outlen += mdlen ;	EMPTY	EMPTY
292	307	2	-1	0	-1	}	EMPTY	EMPTY
292	308	2	-1	0	-1	if ( ! evp _ digestfinal _ ex ( & c  md  null ) ) {	evp _ digestfinal _ ex c md	EMPTY
292	309	2	-1	0	-1	goto err ;	EMPTY	EMPTY
292	310	2	-1	0	-1	}	EMPTY	EMPTY
292	311	2	-1	0	-1	memcpy ( mask + outlen  md  len - outlen ) ;	mask md len	EMPTY
292	312	2	-1	0	-1	outlen = len ;	len	EMPTY
292	313	2	-1	0	-1	}	EMPTY	EMPTY
292	314	2	-1	0	-1	}	EMPTY	EMPTY
292	315	3	-1	0	-1	ret = numconst ;	ret	EMPTY
292	317	1	0	0	-1	err :	EMPTY	EMPTY
292	318	2	-1	0	-1	evp _ md _ ctx _ cleanup ( & c ) ;	evp _ md _ ctx _ cleanup c	EMPTY
292	319	2	-1	0	-1	return ret ;	ret	EMPTY
292	320	3	-1	0	-1	}	EMPTY	EMPTY
292	322	1	0	0	-1	int rsa _ padding _ add _ pkcs1 _ oaep _ mgf1 ( uint8 _ t * to  unsigned to _ len	to	EMPTY
292	323	2	-1	0	-1	const uint8 _ t * from  unsigned from _ len	from	EMPTY
292	324	2	-1	0	-1	const uint8 _ t * param  unsigned param _ len	EMPTY	EMPTY
292	325	2	-1	0	-1	const evp _ md * md  const evp _ md * mgf1md ) {	md	EMPTY
292	326	2	-1	0	-1	unsigned i  emlen  mdlen ;	i	EMPTY
292	327	2	-1	0	-1	uint8 _ t * db  * seed ;	EMPTY	EMPTY
292	328	2	-1	0	-1	uint8 _ t * dbmask = null  seedmask [ evp _ max _ md _ size ] ;	EMPTY	EMPTY
292	329	3	-1	0	-1	int ret = numconst ;	ret	EMPTY
292	331	1	0	0	0	if ( md == null ) {	md	EMPTY
292	332	2	-1	0	-1	md = evp _ sha1 ( ) ;	md	EMPTY
292	333	2	-1	0	-1	}	EMPTY	EMPTY
292	334	2	-1	0	-1	if ( mgf1md == null ) {	EMPTY	EMPTY
292	335	2	-1	0	-1	mgf1md = md ;	md	EMPTY
292	336	3	-1	0	-1	}	EMPTY	EMPTY
292	338	1	0	0	-1	mdlen = evp _ md _ size ( md ) ;	evp _ md _ size md	EMPTY
292	340	1	0	0	0	if ( to _ len < numconst * mdlen + numconst ) {	EMPTY	EMPTY
292	341	2	-1	0	-1	openssl _ put _ error ( rsa  rsa _ r _ key _ size _ too _ small ) ;	EMPTY	EMPTY
292	342	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
292	343	3	-1	0	-1	}	EMPTY	EMPTY
292	345	1	0	0	-1	emlen = to _ len - numconst ;	EMPTY	EMPTY
292	346	2	-1	0	-1	if ( from _ len > emlen - numconst * mdlen - numconst ) {	EMPTY	EMPTY
292	347	2	-1	0	-1	openssl _ put _ error ( rsa  rsa _ r _ data _ too _ large _ for _ key _ size ) ;	EMPTY	EMPTY
292	348	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
292	349	3	-1	0	-1	}	EMPTY	EMPTY
292	351	1	0	0	0	if ( emlen < numconst * mdlen + numconst ) {	EMPTY	EMPTY
292	352	2	-1	0	-1	openssl _ put _ error ( rsa  rsa _ r _ key _ size _ too _ small ) ;	EMPTY	EMPTY
292	353	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
292	354	3	-1	0	-1	}	EMPTY	EMPTY
292	356	1	0	0	-1	to [ numconst ] = numconst ;	to	EMPTY
292	357	2	-1	0	-1	seed = to + numconst ;	to	EMPTY
292	358	3	-1	0	-1	db = to + mdlen + numconst ;	to	EMPTY
292	360	1	0	0	0	if ( ! evp _ digest ( ( void * ) param  param _ len  db  null  md  null ) ) {	evp _ digest md	EMPTY
292	361	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
292	362	2	-1	0	-1	}	EMPTY	EMPTY
292	363	2	-1	0	-1	memset ( db + mdlen  numconst  emlen - from _ len - numconst * mdlen - numconst ) ;	EMPTY	EMPTY
292	364	2	-1	0	-1	db [ emlen - from _ len - mdlen - numconst ] = numconst ;	EMPTY	EMPTY
292	365	2	-1	0	-1	memcpy ( db + emlen - from _ len - mdlen  from  from _ len ) ;	from	EMPTY
292	366	2	-1	0	-1	if ( ! rand _ bytes ( seed  mdlen ) ) {	rand _ bytes	EMPTY
292	367	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
292	368	3	-1	0	-1	}	EMPTY	EMPTY
292	370	1	0	0	-1	dbmask = openssl _ malloc ( emlen - mdlen ) ;	EMPTY	EMPTY
292	371	2	-1	0	-1	if ( dbmask == null ) {	EMPTY	EMPTY
292	372	2	-1	0	-1	openssl _ put _ error ( rsa  err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
292	373	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
292	374	3	-1	0	-1	}	EMPTY	EMPTY
292	376	1	0	0	0	if ( pkcs1 _ mgf1 ( dbmask  emlen - mdlen  seed  mdlen  mgf1md ) < numconst ) {	EMPTY	EMPTY
292	377	2	-1	0	-1	goto out ;	out	EMPTY
292	378	2	-1	0	-1	}	EMPTY	EMPTY
292	379	2	-1	0	-1	for ( i = numconst ; i < emlen - mdlen ; i ++ ) {	i i i	EMPTY
292	380	2	-1	0	-1	db [ i ] ^= dbmask [ i ] ;	i i	EMPTY
292	381	3	-1	0	-1	}	EMPTY	EMPTY
292	383	1	0	0	0	if ( pkcs1 _ mgf1 ( seedmask  mdlen  db  emlen - mdlen  mgf1md ) < numconst ) {	EMPTY	EMPTY
292	384	2	-1	0	-1	goto out ;	out	EMPTY
292	385	2	-1	0	-1	}	EMPTY	EMPTY
292	386	2	-1	0	-1	for ( i = numconst ; i < mdlen ; i ++ ) {	i i i	EMPTY
292	387	2	-1	0	-1	seed [ i ] ^= seedmask [ i ] ;	i i	EMPTY
292	388	2	-1	0	-1	}	EMPTY	EMPTY
292	389	3	-1	0	-1	ret = numconst ;	ret	EMPTY
292	391	1	0	0	-1	out :	out	EMPTY
292	392	2	-1	0	-1	openssl _ free ( dbmask ) ;	EMPTY	EMPTY
292	393	2	-1	0	-1	return ret ;	ret	EMPTY
292	394	3	-1	0	-1	}	EMPTY	EMPTY
292	396	1	0	0	-1	int rsa _ padding _ check _ pkcs1 _ oaep _ mgf1 ( uint8 _ t * to  unsigned to _ len	to	EMPTY
292	397	2	-1	0	-1	const uint8 _ t * from  unsigned from _ len	from	EMPTY
292	398	2	-1	0	-1	const uint8 _ t * param  unsigned param _ len	EMPTY	EMPTY
292	399	2	-1	0	-1	const evp _ md * md  const evp _ md * mgf1md ) {	md	EMPTY
292	400	2	-1	0	-1	unsigned i  dblen  mlen = - numconst  mdlen  bad  looking _ for _ one _ byte  one _ index = numconst ;	i	EMPTY
292	401	2	-1	0	-1	const uint8 _ t * maskeddb  * maskedseed ;	EMPTY	EMPTY
292	402	3	-1	0	-1	uint8 _ t * db = null  seed [ evp _ max _ md _ size ]  phash [ evp _ max _ md _ size ] ;	EMPTY	EMPTY
292	404	1	0	0	0	if ( md == null ) {	md	EMPTY
292	405	2	-1	0	-1	md = evp _ sha1 ( ) ;	md	EMPTY
292	406	2	-1	0	-1	}	EMPTY	EMPTY
292	407	2	-1	0	-1	if ( mgf1md == null ) {	EMPTY	EMPTY
292	408	2	-1	0	-1	mgf1md = md ;	md	EMPTY
292	409	3	-1	0	-1	}	EMPTY	EMPTY
292	411	1	0	0	-1	mdlen = evp _ md _ size ( md ) ;	evp _ md _ size md	EMPTY
292	416	1	1	1	1	if ( from _ len < numconst + numconst * mdlen + numconst ) {	EMPTY	EMPTY
292	419	2	-1	1	-1	goto decoding _ err	EMPTY	EMPTY
292	420	3	-1	0	-1	}	EMPTY	EMPTY
292	422	1	0	0	-1	dblen = from _ len - mdlen - numconst ;	EMPTY	EMPTY
292	423	2	-1	0	-1	db = openssl _ malloc ( dblen ) ;	EMPTY	EMPTY
292	424	2	-1	0	-1	if ( db == null ) {	EMPTY	EMPTY
292	425	2	-1	0	-1	openssl _ put _ error ( rsa  err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
292	426	2	-1	0	-1	goto err ;	EMPTY	EMPTY
292	427	3	-1	0	-1	}	EMPTY	EMPTY
292	429	1	0	0	-1	maskedseed = from + numconst ;	from	EMPTY
292	430	3	-1	0	-1	maskeddb = from + numconst + mdlen ;	from	EMPTY
292	432	1	0	0	0	if ( pkcs1 _ mgf1 ( seed  mdlen  maskeddb  dblen  mgf1md ) ) {	EMPTY	EMPTY
292	433	2	-1	0	-1	goto err ;	EMPTY	EMPTY
292	434	2	-1	0	-1	}	EMPTY	EMPTY
292	435	2	-1	0	-1	for ( i = numconst ; i < mdlen ; i ++ ) {	i i i	EMPTY
292	436	2	-1	0	-1	seed [ i ] ^= maskedseed [ i ] ;	i i	EMPTY
292	437	3	-1	0	-1	}	EMPTY	EMPTY
292	439	1	0	0	0	if ( pkcs1 _ mgf1 ( db  dblen  seed  mdlen  mgf1md ) ) {	EMPTY	EMPTY
292	440	2	-1	0	-1	goto err ;	EMPTY	EMPTY
292	441	2	-1	0	-1	}	EMPTY	EMPTY
292	442	2	-1	0	-1	for ( i = numconst ; i < dblen ; i ++ ) {	i i i	EMPTY
292	443	2	-1	0	-1	db [ i ] ^= maskeddb [ i ] ;	i i	EMPTY
292	444	3	-1	0	-1	}	EMPTY	EMPTY
292	446	1	0	0	0	if ( ! evp _ digest ( ( void * ) param  param _ len  phash  null  md  null ) ) {	evp _ digest md	EMPTY
292	447	2	-1	0	-1	goto err ;	EMPTY	EMPTY
292	448	3	-1	0	-1	}	EMPTY	EMPTY
292	450	1	0	0	-1	bad = ~ constant _ time _ is _ zero ( crypto _ memcmp ( db  phash  mdlen ) ) ;	constant _ time _ is _ zero crypto _ memcmp	EMPTY
292	451	3	-1	0	-1	bad |= ~ constant _ time _ is _ zero ( from [ numconst ] ) ;	constant _ time _ is _ zero from	EMPTY
292	453	1	0	0	-1	looking _ for _ one _ byte = ~ numconst ;	EMPTY	EMPTY
292	454	2	-1	0	-1	for ( i = mdlen ; i < dblen ; i ++ ) {	i i i	EMPTY
292	455	2	-1	0	-1	unsigned equals1 = constant _ time _ eq ( db [ i ]  numconst ) ;	constant _ time _ eq i	EMPTY
292	456	2	-1	0	-1	unsigned equals0 = constant _ time _ eq ( db [ i ]  numconst ) ;	constant _ time _ eq i	EMPTY
292	457	2	-1	0	-1	one _ index = constant _ time _ select ( looking _ for _ one _ byte & equals1  i	constant _ time _ select i	EMPTY
292	458	2	-1	0	-1	one _ index ) ;	EMPTY	EMPTY
292	459	2	-1	0	-1	looking _ for _ one _ byte =	EMPTY	EMPTY
292	460	2	-1	0	-1	constant _ time _ select ( equals1  numconst  looking _ for _ one _ byte ) ;	constant _ time _ select	EMPTY
292	461	2	-1	0	-1	bad |= looking _ for _ one _ byte & ~ equals0 ;	EMPTY	EMPTY
292	462	3	-1	0	-1	}	EMPTY	EMPTY
292	464	1	0	0	-1	bad |= looking _ for _ one _ byte ;	EMPTY	EMPTY
292	466	1	0	0	0	if ( bad ) {	EMPTY	EMPTY
292	467	2	-1	0	-1	goto decoding _ err ;	EMPTY	EMPTY
292	468	3	-1	0	-1	}	EMPTY	EMPTY
292	470	1	0	0	-1	one _ index ++ ;	EMPTY	EMPTY
292	471	2	-1	0	-1	mlen = dblen - one _ index ;	EMPTY	EMPTY
292	472	2	-1	0	-1	if ( to _ len < mlen ) {	EMPTY	EMPTY
292	473	2	-1	0	-1	openssl _ put _ error ( rsa  rsa _ r _ data _ too _ large ) ;	EMPTY	EMPTY
292	474	2	-1	0	-1	mlen = - numconst ;	EMPTY	EMPTY
292	475	2	-1	0	-1	}	EMPTY	EMPTY
292	476	2	-1	0	-1	memcpy ( to  db + one _ index  mlen ) ;	to	EMPTY
292	477	3	-1	0	-1	}	EMPTY	EMPTY
292	479	1	0	0	0	openssl _ free ( db ) ;	EMPTY	EMPTY
292	480	3	-1	0	-1	return mlen ;	EMPTY	EMPTY
292	482	1	1	0	-1	decoding _ err :	EMPTY	EMPTY
292	485	2	-1	1	-1	openssl _ put _ error ( rsa  rsa _ r _ oaep _ decoding _ error ) ;	EMPTY	EMPTY
292	486	2	-1	0	-1	err :	EMPTY	EMPTY
292	487	2	-1	0	-1	openssl _ free ( db )	EMPTY	EMPTY
292	488	2	-1	0	-1	return - 1	EMPTY	EMPTY
292	489	3	-1	0	-1	}	EMPTY	EMPTY
292	491	1	0	0	-1	static const unsigned char zeroes [ ] = { numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst } ;	EMPTY	EMPTY
292	493	1	0	0	-1	int rsa _ verify _ pkcs1 _ pss _ mgf1 ( rsa * rsa  const uint8 _ t * mhash	rsa _ verify _ pkcs1 _ pss _ mgf1 rsa mhash	EMPTY
292	494	2	-1	0	-1	const evp _ md * hash  const evp _ md * mgf1hash	EMPTY	EMPTY
292	495	2	-1	0	-1	const uint8 _ t * em  int slen ) {	em	EMPTY
292	496	2	-1	0	-1	int i ;	i	EMPTY
292	497	2	-1	0	-1	int ret = numconst ;	ret	EMPTY
292	498	2	-1	0	-1	int maskeddblen  msbits  emlen ;	EMPTY	EMPTY
292	499	2	-1	0	-1	size _ t hlen ;	EMPTY	EMPTY
292	500	2	-1	0	-1	const uint8 _ t * h ;	EMPTY	EMPTY
292	501	2	-1	0	-1	uint8 _ t * db = null ;	EMPTY	EMPTY
292	502	2	-1	0	-1	evp _ md _ ctx ctx ;	ctx	EMPTY
292	503	2	-1	0	-1	uint8 _ t h _  [ evp _ max _ md _ size ] ;	EMPTY	EMPTY
292	504	3	-1	0	-1	evp _ md _ ctx _ init ( & ctx ) ;	evp _ md _ ctx _ init ctx	EMPTY
292	506	1	0	0	0	if ( mgf1hash == null ) {	EMPTY	EMPTY
292	507	2	-1	0	-1	mgf1hash = hash ;	EMPTY	EMPTY
292	508	3	-1	0	-1	}	EMPTY	EMPTY
292	510	1	0	0	-1	hlen = evp _ md _ size ( hash ) ;	evp _ md _ size	EMPTY
292	516	1	1	1	1	if ( slen == - 1 ) {	EMPTY	EMPTY
292	517	2	-1	0	-1	slen = hlen ;	EMPTY	EMPTY
292	518	2	-1	0	-1	} else if ( slen == - 2 ) {	EMPTY	EMPTY
292	519	2	-1	0	-1	slen = - 2 ;	EMPTY	EMPTY
292	520	2	-1	0	-1	} else if ( slen < - 2 ) {	EMPTY	EMPTY
292	521	2	-1	0	-1	openssl _ put _ error ( rsa , rsa _ r _ slen _ check _ failed ) ;	EMPTY	EMPTY
292	522	2	-1	0	-1	goto err ;	EMPTY	EMPTY
292	523	3	-1	0	-1	}	EMPTY	EMPTY
292	525	1	1	0	-1	msbits = ( bn _ num _ bits ( rsa -> n ) - 1 ) & 0x7	bn _ num _ bits rsa n	EMPTY
292	526	2	-1	0	-1	emlen = rsa _ size ( rsa )	rsa _ size rsa	EMPTY
292	527	2	-1	0	-1	if ( em [ 0 ] & ( 0xff << msbits ) ) {	em	EMPTY
292	528	2	-1	0	-1	openssl _ put _ error ( rsa , rsa _ r _ first _ octet _ invalid ) ;	EMPTY	EMPTY
292	529	2	-1	0	-1	goto err ;	EMPTY	EMPTY
292	530	2	-1	0	-1	}	EMPTY	EMPTY
292	531	2	-1	0	-1	if ( msbits == 0 ) {	EMPTY	EMPTY
292	532	2	-1	0	-1	em ++ ;	em	EMPTY
292	533	2	-1	0	-1	emlen -- ;	EMPTY	EMPTY
292	534	2	-1	0	-1	}	EMPTY	EMPTY
292	535	2	-1	0	-1	if ( emlen < ( ( int ) hlen + slen + numconst ) ) {	EMPTY	EMPTY
292	537	2	-1	1	-1	openssl _ put _ error ( rsa  rsa _ r _ data _ too _ large ) ;	EMPTY	EMPTY
292	538	2	-1	0	-1	goto err	EMPTY	EMPTY
292	539	2	-1	0	-1	}	EMPTY	EMPTY
292	540	2	-1	0	-1	if ( em [ emlen - numconst ] != numconst ) {	em	EMPTY
292	541	2	-1	0	-1	openssl _ put _ error ( rsa  rsa _ r _ last _ octet _ invalid ) ;	EMPTY	EMPTY
292	542	2	-1	0	-1	goto err ;	EMPTY	EMPTY
292	543	2	-1	0	-1	}	EMPTY	EMPTY
292	544	2	-1	0	-1	maskeddblen = emlen - hlen - numconst ;	EMPTY	EMPTY
292	545	2	-1	0	-1	h = em + maskeddblen ;	em	EMPTY
292	546	2	-1	0	-1	db = openssl _ malloc ( maskeddblen ) ;	EMPTY	EMPTY
292	547	2	-1	0	-1	if ( ! db ) {	EMPTY	EMPTY
292	548	2	-1	0	-1	openssl _ put _ error ( rsa  err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
292	549	2	-1	0	-1	goto err ;	EMPTY	EMPTY
292	550	2	-1	0	-1	}	EMPTY	EMPTY
292	551	2	-1	0	-1	if ( pkcs1 _ mgf1 ( db  maskeddblen  h  hlen  mgf1hash ) < numconst ) {	EMPTY	EMPTY
292	552	2	-1	0	-1	goto err ;	EMPTY	EMPTY
292	553	2	-1	0	-1	}	EMPTY	EMPTY
292	554	2	-1	0	-1	for ( i = numconst ; i < maskeddblen ; i ++ ) {	i i i	EMPTY
292	555	3	-1	0	-1	db [ i ] ^= em [ i ] ;	i em i	EMPTY
292	556	1	0	0	-1	}	EMPTY	EMPTY
292	557	2	-1	0	-1	if ( msbits ) {	EMPTY	EMPTY
292	558	2	-1	0	-1	db [ numconst ] &= numconst >> ( numconst - msbits ) ;	EMPTY	EMPTY
292	559	2	-1	0	-1	}	EMPTY	EMPTY
292	560	2	-1	0	-1	for ( i = numconst ; db [ i ] == numconst && i < ( maskeddblen - numconst ) ; i ++ ) {	i i i i	EMPTY
292	561	2	-1	0	-1	;	EMPTY	EMPTY
292	562	2	-1	0	-1	}	EMPTY	EMPTY
292	563	2	-1	0	-1	if ( db [ i ++ ] != numconst ) {	i	EMPTY
292	564	2	-1	0	-1	openssl _ put _ error ( rsa  rsa _ r _ slen _ recovery _ failed ) ;	EMPTY	EMPTY
292	565	2	-1	0	-1	goto err ;	EMPTY	EMPTY
292	566	2	-1	0	-1	}	EMPTY	EMPTY
292	567	2	-1	0	-1	if ( slen >= numconst && ( maskeddblen - i ) != slen ) {	i	EMPTY
292	568	2	-1	0	-1	openssl _ put _ error ( rsa  rsa _ r _ slen _ check _ failed ) ;	EMPTY	EMPTY
292	569	2	-1	0	-1	goto err ;	EMPTY	EMPTY
292	570	2	-1	0	-1	}	EMPTY	EMPTY
292	571	2	-1	0	-1	if ( ! evp _ digestinit _ ex ( & ctx  hash  null ) ||	evp _ digestinit _ ex ctx	EMPTY
292	572	2	-1	0	-1	! evp _ digestupdate ( & ctx  zeroes  sizeof zeroes ) ||	evp _ digestupdate ctx	EMPTY
292	573	2	-1	0	-1	! evp _ digestupdate ( & ctx  mhash  hlen ) ) {	evp _ digestupdate ctx mhash	EMPTY
292	574	2	-1	0	-1	goto err ;	EMPTY	EMPTY
292	575	2	-1	0	-1	}	EMPTY	EMPTY
292	576	2	-1	0	-1	if ( maskeddblen - i ) {	i	EMPTY
292	577	2	-1	0	-1	if ( ! evp _ digestupdate ( & ctx  db + i  maskeddblen - i ) ) {	evp _ digestupdate ctx i i	EMPTY
292	578	2	-1	0	-1	goto err ;	EMPTY	EMPTY
292	579	2	-1	0	-1	}	EMPTY	EMPTY
292	580	2	-1	0	-1	}	EMPTY	EMPTY
292	581	2	-1	0	-1	if ( ! evp _ digestfinal _ ex ( & ctx  h _   null ) ) {	evp _ digestfinal _ ex ctx	EMPTY
292	582	2	-1	0	-1	goto err ;	EMPTY	EMPTY
292	583	2	-1	0	-1	}	EMPTY	EMPTY
292	584	2	-1	0	-1	if ( memcmp ( h _   h  hlen ) ) {	EMPTY	EMPTY
292	585	3	-1	0	-1	openssl _ put _ error ( rsa  rsa _ r _ bad _ signature ) ;	EMPTY	EMPTY
292	586	1	0	0	-1	ret = numconst ;	ret	EMPTY
292	587	2	-1	0	-1	}	EMPTY	EMPTY
292	588	2	-1	0	-1	ret = numconst ;	ret	EMPTY
292	589	3	-1	0	-1	}	EMPTY	EMPTY
292	591	1	0	0	-1	err :	EMPTY	EMPTY
292	592	2	-1	0	-1	openssl _ free ( db ) ;	EMPTY	EMPTY
292	593	3	-1	0	-1	evp _ md _ ctx _ cleanup ( & ctx ) ;	evp _ md _ ctx _ cleanup ctx	EMPTY
292	595	1	0	0	0	return ret ;	ret	EMPTY
292	596	3	-1	0	-1	}	EMPTY	EMPTY
292	598	1	0	0	-1	int rsa _ padding _ add _ pkcs1 _ pss _ mgf1 ( rsa * rsa  unsigned char * em	rsa _ padding _ add _ pkcs1 _ pss _ mgf1 rsa em	EMPTY
292	599	2	-1	0	-1	const unsigned char * mhash	mhash	EMPTY
292	600	2	-1	0	-1	const evp _ md * hash  const evp _ md * mgf1hash	EMPTY	EMPTY
292	601	2	-1	0	-1	int slen ) {	EMPTY	EMPTY
292	602	2	-1	0	-1	int i ;	i	EMPTY
292	603	2	-1	0	-1	int ret = numconst ;	ret	EMPTY
292	604	2	-1	0	-1	size _ t maskeddblen  msbits  emlen ;	EMPTY	EMPTY
292	605	2	-1	0	-1	size _ t hlen ;	EMPTY	EMPTY
292	606	2	-1	0	-1	unsigned char * h  * salt = null  * p ;	p	EMPTY
292	607	3	-1	0	-1	evp _ md _ ctx ctx ;	ctx	EMPTY
292	609	1	0	0	0	if ( mgf1hash == null ) {	EMPTY	EMPTY
292	610	2	-1	0	-1	mgf1hash = hash ;	EMPTY	EMPTY
292	611	3	-1	0	-1	}	EMPTY	EMPTY
292	613	1	0	0	-1	hlen = evp _ md _ size ( hash ) ;	evp _ md _ size	EMPTY
292	619	1	1	1	1	if ( slen == - 1 ) {	EMPTY	EMPTY
292	620	2	-1	0	-1	slen = hlen ;	EMPTY	EMPTY
292	621	2	-1	0	-1	} else if ( slen == - 2 ) {	EMPTY	EMPTY
292	622	2	-1	0	-1	slen = - 2 ;	EMPTY	EMPTY
292	623	2	-1	0	-1	} else if ( slen < - 2 ) {	EMPTY	EMPTY
292	624	2	-1	0	-1	openssl _ put _ error ( rsa , rsa _ r _ slen _ check _ failed ) ;	EMPTY	EMPTY
292	625	2	-1	0	-1	goto err ;	EMPTY	EMPTY
292	626	3	-1	0	-1	}	EMPTY	EMPTY
292	628	1	0	0	0	if ( bn _ is _ zero ( rsa -> n ) ) {	bn _ is _ zero rsa n	EMPTY
292	629	2	-1	0	-1	openssl _ put _ error ( rsa , rsa _ r _ empty _ public _ key ) ;	EMPTY	EMPTY
292	630	2	-1	0	-1	goto err ;	EMPTY	EMPTY
292	631	3	-1	0	-1	}	EMPTY	EMPTY
292	633	1	0	0	-1	msbits = ( bn _ num _ bits ( rsa -> n ) - 1 ) & 0x7	bn _ num _ bits rsa n	EMPTY
292	634	2	-1	0	-1	emlen = rsa _ size ( rsa )	rsa _ size rsa	EMPTY
292	635	2	-1	0	-1	if ( msbits == 0 ) {	EMPTY	EMPTY
292	636	2	-1	0	-1	assert ( emlen >= 1 ) ;	EMPTY	EMPTY
292	637	2	-1	0	-1	* em ++ = 0 ;	em	EMPTY
292	638	2	-1	0	-1	emlen -- ;	EMPTY	EMPTY
292	639	2	-1	0	-1	}	EMPTY	EMPTY
292	640	2	-1	0	-1	if ( slen == - 2 ) {	EMPTY	EMPTY
292	641	2	-1	0	-1	if ( emlen < hlen + 2 ) {	EMPTY	EMPTY
292	642	2	-1	0	-1	openssl _ put _ error ( rsa , rsa _ r _ data _ too _ large _ for _ key _ size ) ;	EMPTY	EMPTY
292	643	2	-1	0	-1	goto err ;	EMPTY	EMPTY
292	644	2	-1	0	-1	}	EMPTY	EMPTY
292	645	2	-1	0	-1	slen = emlen - hlen - 2 ;	EMPTY	EMPTY
292	646	2	-1	0	-1	} else if ( emlen < hlen + slen + 2 ) {	EMPTY	EMPTY
292	647	2	-1	0	-1	openssl _ put _ error ( rsa , rsa _ r _ data _ too _ large _ for _ key _ size ) ;	EMPTY	EMPTY
292	648	2	-1	0	-1	goto err ;	EMPTY	EMPTY
292	649	2	-1	0	-1	}	EMPTY	EMPTY
292	650	2	-1	0	-1	if ( slen > 0 ) {	EMPTY	EMPTY
292	651	2	-1	0	-1	salt = openssl _ malloc ( slen ) ;	EMPTY	EMPTY
292	652	2	-1	0	-1	if ( ! salt ) {	EMPTY	EMPTY
292	653	2	-1	0	-1	openssl _ put _ error ( rsa , err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
292	654	2	-1	0	-1	goto err ;	EMPTY	EMPTY
292	655	2	-1	0	-1	}	EMPTY	EMPTY
292	656	2	-1	0	-1	if ( ! rand _ bytes ( salt , slen ) ) {	rand _ bytes	EMPTY
292	657	2	-1	0	-1	goto err ;	EMPTY	EMPTY
292	658	2	-1	0	-1	}	EMPTY	EMPTY
292	659	2	-1	0	-1	}	EMPTY	EMPTY
292	660	2	-1	0	-1	maskeddblen = emlen - hlen - 1	EMPTY	EMPTY
292	661	2	-1	0	-1	h = em + maskeddblen	em	EMPTY
292	662	3	-1	0	-1	evp _ md _ ctx _ init ( & ctx )	evp _ md _ ctx _ init ctx	EMPTY
292	663	1	0	0	-1	if ( ! evp _ digestinit _ ex ( & ctx , hash , null ) ||	evp _ digestinit _ ex ctx	EMPTY
292	664	2	-1	0	-1	! evp _ digestupdate ( & ctx , zeroes , sizeof zeroes ) ||	evp _ digestupdate ctx	EMPTY
292	665	2	-1	0	-1	! evp _ digestupdate ( & ctx , mhash , hlen ) ) {	evp _ digestupdate ctx mhash	EMPTY
292	666	2	-1	0	-1	goto err ;	EMPTY	EMPTY
292	667	2	-1	0	-1	}	EMPTY	EMPTY
292	668	2	-1	0	-1	if ( slen && ! evp _ digestupdate ( & ctx , salt , slen ) ) {	evp _ digestupdate ctx	EMPTY
292	669	2	-1	0	-1	goto err ;	EMPTY	EMPTY
292	670	2	-1	0	-1	}	EMPTY	EMPTY
292	671	2	-1	0	-1	if ( ! evp _ digestfinal _ ex ( & ctx , h , null ) ) {	evp _ digestfinal _ ex ctx	EMPTY
292	672	2	-1	0	-1	goto err ;	EMPTY	EMPTY
292	673	2	-1	0	-1	}	EMPTY	EMPTY
292	674	3	-1	0	-1	evp _ md _ ctx _ cleanup ( & ctx )	evp _ md _ ctx _ cleanup ctx	EMPTY
292	677	1	1	1	1	if ( pkcs1 _ mgf1 ( em , maskeddblen , h , hlen , mgf1hash ) ) {	em	EMPTY
292	678	2	-1	0	-1	goto err ;	EMPTY	EMPTY
292	679	3	-1	0	-1	}	EMPTY	EMPTY
292	681	1	0	0	-1	p = em	p em	EMPTY
292	686	1	1	1	-1	p += emlen - slen - hlen - 2	p	EMPTY
292	687	2	-1	0	-1	* p ++ ^= 0x1	p	EMPTY
292	688	2	-1	0	-1	if ( slen > 0 ) {	EMPTY	EMPTY
292	689	2	-1	0	-1	for ( i = 0 ; i < slen ; i ++ ) {	i i i	EMPTY
292	690	2	-1	0	-1	* p ++ ^= salt [ i ] ;	p i	EMPTY
292	691	2	-1	0	-1	}	EMPTY	EMPTY
292	692	2	-1	0	-1	}	EMPTY	EMPTY
292	693	2	-1	0	-1	if ( msbits ) {	EMPTY	EMPTY
292	694	2	-1	0	-1	em [ 0 ] &= 0xff >> ( 8 - msbits ) ;	em	EMPTY
292	695	3	-1	0	-1	}	EMPTY	EMPTY
292	699	1	1	1	-1	em [ emlen - 1 ] = 0xbc	em	EMPTY
292	701	1	0	0	-1	ret = 1	ret	EMPTY
292	703	1	0	0	-1	err :	EMPTY	EMPTY
292	704	3	-1	0	-1	openssl _ free ( salt )	EMPTY	EMPTY
292	706	1	0	0	0	return ret	ret	EMPTY
292	707	3	-1	0	-1	}	EMPTY	EMPTY
299	64	1	1	0	-1	static int dh _ cb ( int operation  asn1 _ value * * pval  const asn1 _ item * it	dh _ cb operation asn1 _ value pval it	EMPTY
299	65	2	-1	0	-1	void * exarg ) {	EMPTY	EMPTY
299	66	2	-1	1	-1	if ( operation == asn1 _ op _ new _ pre ) {	operation	EMPTY
299	67	2	-1	0	-1	* pval = ( asn1 _ value * ) dh _ new ( ) ;	pval asn1 _ value dh _ new	EMPTY
299	68	2	-1	0	-1	if ( * pval ) {	pval	EMPTY
299	69	2	-1	0	-1	return 2 ;	EMPTY	EMPTY
299	70	2	-1	0	-1	}	EMPTY	EMPTY
299	71	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
299	72	2	-1	0	-1	} else if ( operation == asn1 _ op _ free _ pre ) {	operation	EMPTY
299	73	2	-1	0	-1	dh _ free ( ( dh * ) * pval ) ;	dh _ free pval	EMPTY
299	74	2	-1	0	-1	* pval = null ;	pval	EMPTY
299	75	2	-1	0	-1	return 2 ;	EMPTY	EMPTY
299	76	2	-1	0	-1	}	EMPTY	EMPTY
299	77	2	-1	0	-1	return 1	EMPTY	EMPTY
299	78	3	-1	0	-1	}	EMPTY	EMPTY
299	80	1	0	0	-1	asn1 _ sequence _ cb ( dhparams  dh _ cb ) = {	dh _ cb	EMPTY
299	81	2	-1	0	-1	asn1 _ simple ( dh  p  bignum )  asn1 _ simple ( dh  g  bignum )	p	EMPTY
299	82	3	-1	0	-1	asn1 _ opt ( dh  priv _ length  zlong ) } asn1 _ sequence _ end _ cb ( dh  dhparams ) ;	priv _ length	EMPTY
299	84	1	0	0	-1	implement _ asn1 _ encode _ functions _ const _ fname ( dh  dhparams  dhparams )	EMPTY	EMPTY
302	65	1	0	0	-1	bignum * bn _ mod _ sqrt ( bignum * in  const bignum * a  const bignum * p  bn _ ctx * ctx ) {	bn _ mod _ sqrt in a p ctx	EMPTY
302	66	2	-1	0	-1	bignum * ret = in ;	ret in	EMPTY
302	67	2	-1	0	-1	int err = 1 ;	EMPTY	EMPTY
302	68	2	-1	0	-1	int r ;	r	EMPTY
302	69	2	-1	0	-1	bignum * a , * b , * q , * t , * x , * y ;	b	EMPTY
302	70	3	-1	0	-1	int e , i , j ;	EMPTY	EMPTY
302	72	1	0	0	0	if ( ! bn _ is _ odd ( p ) || bn _ abs _ is _ word ( p , 1 ) ) {	bn _ is _ odd p bn _ abs _ is _ word p	EMPTY
302	73	2	-1	0	-1	if ( bn _ abs _ is _ word ( p , 2 ) ) {	bn _ abs _ is _ word p	EMPTY
302	74	2	-1	0	-1	if ( ret == null ) {	ret	EMPTY
302	75	2	-1	0	-1	ret = bn _ new ( ) ;	ret bn _ new	EMPTY
302	76	2	-1	0	-1	}	EMPTY	EMPTY
302	77	2	-1	0	-1	if ( ret == null ) {	ret	EMPTY
302	78	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	79	2	-1	0	-1	}	EMPTY	EMPTY
302	80	2	-1	0	-1	if ( ! bn _ set _ word ( ret , bn _ is _ bit _ set ( a , 0 ) ) ) {	bn _ set _ word ret bn _ is _ bit _ set a	EMPTY
302	81	2	-1	0	-1	if ( ret != in ) {	ret in	EMPTY
302	82	2	-1	0	-1	bn _ free ( ret ) ;	bn _ free ret	EMPTY
302	83	2	-1	0	-1	}	EMPTY	EMPTY
302	84	2	-1	0	-1	return null ;	EMPTY	EMPTY
302	85	2	-1	0	-1	}	EMPTY	EMPTY
302	86	2	-1	0	-1	return ret ;	ret	EMPTY
302	87	3	-1	0	-1	}	EMPTY	EMPTY
302	89	1	0	0	0	openssl _ put _ error ( bn , bn _ r _ p _ is _ not _ prime ) ;	EMPTY	EMPTY
302	90	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
302	91	3	-1	0	-1	}	EMPTY	EMPTY
302	93	1	0	0	0	if ( bn _ is _ zero ( a ) || bn _ is _ one ( a ) ) {	bn _ is _ zero a bn _ is _ one a	EMPTY
302	94	2	-1	0	-1	if ( ret == null ) {	ret	EMPTY
302	95	2	-1	0	-1	ret = bn _ new ( ) ;	ret bn _ new	EMPTY
302	96	2	-1	0	-1	}	EMPTY	EMPTY
302	97	2	-1	0	-1	if ( ret == null ) {	ret	EMPTY
302	98	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	99	2	-1	0	-1	}	EMPTY	EMPTY
302	100	2	-1	0	-1	if ( ! bn _ set _ word ( ret , bn _ is _ one ( a ) ) ) {	bn _ set _ word ret bn _ is _ one a	EMPTY
302	101	2	-1	0	-1	if ( ret != in ) {	ret in	EMPTY
302	102	2	-1	0	-1	bn _ free ( ret ) ;	bn _ free ret	EMPTY
302	103	2	-1	0	-1	}	EMPTY	EMPTY
302	104	2	-1	0	-1	return null ;	EMPTY	EMPTY
302	105	2	-1	0	-1	}	EMPTY	EMPTY
302	106	2	-1	0	-1	return ret ;	ret	EMPTY
302	107	3	-1	0	-1	}	EMPTY	EMPTY
302	109	1	0	0	0	bn _ ctx _ start ( ctx )	bn _ ctx _ start ctx	EMPTY
302	110	2	-1	0	-1	a = bn _ ctx _ get ( ctx )	bn _ ctx _ get ctx	EMPTY
302	111	2	-1	0	-1	b = bn _ ctx _ get ( ctx )	b bn _ ctx _ get ctx	EMPTY
302	112	2	-1	0	-1	q = bn _ ctx _ get ( ctx )	bn _ ctx _ get ctx	EMPTY
302	113	2	-1	0	-1	t = bn _ ctx _ get ( ctx )	bn _ ctx _ get ctx	EMPTY
302	114	2	-1	0	-1	x = bn _ ctx _ get ( ctx )	bn _ ctx _ get ctx	EMPTY
302	115	2	-1	0	-1	y = bn _ ctx _ get ( ctx )	bn _ ctx _ get ctx	EMPTY
302	116	2	-1	0	-1	if ( y == null ) {	EMPTY	EMPTY
302	117	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	118	3	-1	0	-1	}	EMPTY	EMPTY
302	120	1	0	0	0	if ( ret == null ) {	ret	EMPTY
302	121	2	-1	0	-1	ret = bn _ new ( ) ;	ret bn _ new	EMPTY
302	122	2	-1	0	-1	}	EMPTY	EMPTY
302	123	2	-1	0	-1	if ( ret == null ) {	ret	EMPTY
302	124	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	125	3	-1	0	-1	}	EMPTY	EMPTY
302	128	1	1	1	1	if ( ! bn _ nnmod ( a , a , p , ctx ) ) {	bn _ nnmod a p ctx	EMPTY
302	129	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	130	3	-1	0	-1	}	EMPTY	EMPTY
302	133	1	1	1	-1	e = 1	EMPTY	EMPTY
302	134	2	-1	0	-1	while ( ! bn _ is _ bit _ set ( p , e ) ) {	bn _ is _ bit _ set p	EMPTY
302	135	2	-1	0	-1	e ++ ;	EMPTY	EMPTY
302	136	3	-1	0	-1	}	EMPTY	EMPTY
302	139	1	1	1	1	if ( e == numconst ) {	EMPTY	EMPTY
302	147	2	-1	1	-1	if ( ! bn _ rshift ( q , p , 2 ) ) {	bn _ rshift p	EMPTY
302	148	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	149	2	-1	0	-1	}	EMPTY	EMPTY
302	150	2	-1	0	-1	q -> neg = 0	neg	EMPTY
302	151	2	-1	0	-1	if ( ! bn _ add _ word ( q , 1 ) ||	bn _ add _ word	EMPTY
302	152	2	-1	0	-1	! bn _ mod _ exp ( ret , a , q , p , ctx ) ) {	bn _ mod _ exp ret p ctx	EMPTY
302	153	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	154	2	-1	0	-1	}	EMPTY	EMPTY
302	155	2	-1	0	-1	err = 0	EMPTY	EMPTY
302	156	2	-1	0	-1	goto vrfy	EMPTY	EMPTY
302	157	3	-1	0	-1	}	EMPTY	EMPTY
302	159	1	0	0	0	if ( e == numconst ) {	EMPTY	EMPTY
302	188	1	1	1	1	if ( ! bn _ mod _ lshift1 _ quick ( t , a , p ) ) {	bn _ mod _ lshift1 _ quick p	EMPTY
302	189	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	190	3	-1	0	-1	}	EMPTY	EMPTY
302	193	1	1	1	1	if ( ! bn _ rshift ( q , p , 3 ) ) {	bn _ rshift p	EMPTY
302	194	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	195	2	-1	0	-1	}	EMPTY	EMPTY
302	196	2	-1	0	-1	q -> neg = 0	neg	EMPTY
302	197	2	-1	0	-1	if ( ! bn _ mod _ exp ( b , t , q , p , ctx ) ) {	bn _ mod _ exp b p ctx	EMPTY
302	198	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	199	3	-1	0	-1	}	EMPTY	EMPTY
302	202	1	1	1	1	if ( ! bn _ mod _ sqr ( y , b , p , ctx ) ) {	bn _ mod _ sqr b p ctx	EMPTY
302	203	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	204	3	-1	0	-1	}	EMPTY	EMPTY
302	207	1	1	1	1	if ( ! bn _ mod _ mul ( t , t , y , p , ctx ) ||	bn _ mod _ mul p ctx	EMPTY
302	208	2	-1	0	-1	! bn _ sub _ word ( t , 1 ) ) {	bn _ sub _ word	EMPTY
302	209	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	210	3	-1	0	-1	}	EMPTY	EMPTY
302	213	1	1	1	1	if ( ! bn _ mod _ mul ( x , a , b , p , ctx ) ||	bn _ mod _ mul b p ctx	EMPTY
302	214	2	-1	0	-1	! bn _ mod _ mul ( x , x , t , p , ctx ) ) {	bn _ mod _ mul p ctx	EMPTY
302	215	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	216	3	-1	0	-1	}	EMPTY	EMPTY
302	218	1	0	0	0	if ( ! bn _ copy ( ret , x ) ) {	bn _ copy ret	EMPTY
302	219	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	220	2	-1	0	-1	}	EMPTY	EMPTY
302	221	2	-1	0	-1	err = 0	EMPTY	EMPTY
302	222	2	-1	0	-1	goto vrfy	EMPTY	EMPTY
302	223	3	-1	0	-1	}	EMPTY	EMPTY
302	227	1	1	1	1	if ( ! bn _ copy ( q  p ) ) {	bn _ copy p	EMPTY
302	228	2	-1	1	-1	goto end	EMPTY	EMPTY
302	229	2	-1	0	-1	}	EMPTY	EMPTY
302	230	2	-1	0	-1	q -> neg = numconst ;	neg	EMPTY
302	231	2	-1	0	-1	i = numconst ;	EMPTY	EMPTY
302	232	2	-1	0	-1	do {	EMPTY	EMPTY
302	236	2	-1	1	-1	if ( i < numconst ) {	EMPTY	EMPTY
302	237	2	-1	0	-1	if ( ! bn _ set _ word ( y , i ) ) {	bn _ set _ word	EMPTY
302	238	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	239	2	-1	0	-1	}	EMPTY	EMPTY
302	240	2	-1	0	-1	}	EMPTY	EMPTY
302	241	2	-1	0	-1	if ( ! bn _ pseudo _ rand ( y , bn _ num _ bits ( p ) , 0 , 0 ) ) {	bn _ pseudo _ rand bn _ num _ bits p	EMPTY
302	242	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	243	2	-1	0	-1	}	EMPTY	EMPTY
302	244	2	-1	0	-1	if ( bn _ ucmp ( y , p ) >= 0 ) {	bn _ ucmp p	EMPTY
302	245	2	-1	0	-1	if ( ! ( p -> neg ? bn _ add : bn _ sub ) ( y , y , p ) ) {	p neg bn _ add bn _ sub p	EMPTY
302	246	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	247	2	-1	0	-1	}	EMPTY	EMPTY
302	248	2	-1	0	-1	}	EMPTY	EMPTY
302	250	2	-1	1	-1	if ( bn _ is _ zero ( y ) ) {	bn _ is _ zero	EMPTY
302	251	2	-1	0	-1	if ( ! bn _ set _ word ( y , i ) ) {	bn _ set _ word	EMPTY
302	252	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	253	2	-1	0	-1	}	EMPTY	EMPTY
302	254	2	-1	0	-1	}	EMPTY	EMPTY
302	255	3	-1	0	-1	}	EMPTY	EMPTY
302	257	1	1	0	-1	r = bn _ kronecker ( y  q  ctx ) ;	r bn _ kronecker ctx	EMPTY
302	258	2	-1	0	-1	if ( r < - 1 ) {	r	EMPTY
302	259	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	260	2	-1	0	-1	}	EMPTY	EMPTY
302	261	2	-1	0	-1	if ( r == numconst ) {	r	EMPTY
302	263	2	-1	1	-1	openssl _ put _ error ( bn  bn _ r _ p _ is _ not _ prime ) ;	EMPTY	EMPTY
302	264	2	-1	0	-1	goto end	EMPTY	EMPTY
302	265	2	-1	0	-1	}	EMPTY	EMPTY
302	266	3	-1	0	-1	}	EMPTY	EMPTY
302	268	1	1	0	1	if ( r != - numconst ) {	r	EMPTY
302	274	2	-1	1	-1	openssl _ put _ error ( bn  bn _ r _ too _ many _ iterations ) ;	EMPTY	EMPTY
302	275	2	-1	0	-1	goto end	EMPTY	EMPTY
302	276	3	-1	0	-1	}	EMPTY	EMPTY
302	279	1	1	1	1	if ( ! bn _ rshift ( q , q , e ) ) {	bn _ rshift	EMPTY
302	280	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	281	3	-1	0	-1	}	EMPTY	EMPTY
302	285	1	1	1	1	if ( ! bn _ mod _ exp ( y , y , q , p , ctx ) ) {	bn _ mod _ exp p ctx	EMPTY
302	286	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	287	2	-1	0	-1	}	EMPTY	EMPTY
302	288	2	-1	0	-1	if ( bn _ is _ one ( y ) ) {	bn _ is _ one	EMPTY
302	289	2	-1	0	-1	openssl _ put _ error ( bn , bn _ r _ p _ is _ not _ prime ) ;	EMPTY	EMPTY
302	290	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	291	3	-1	0	-1	}	EMPTY	EMPTY
302	312	1	1	1	1	if ( ! bn _ rshift1 ( t , q ) ) {	bn _ rshift1	EMPTY
302	313	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	314	3	-1	0	-1	}	EMPTY	EMPTY
302	317	1	1	1	1	if ( bn _ is _ zero ( t ) )	bn _ is _ zero	EMPTY
302	318	2	-1	0	-1	{	EMPTY	EMPTY
302	319	2	-1	0	-1	if ( ! bn _ nnmod ( t , a , p , ctx ) ) {	bn _ nnmod p ctx	EMPTY
302	320	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	321	2	-1	0	-1	}	EMPTY	EMPTY
302	322	2	-1	0	-1	if ( bn _ is _ zero ( t ) ) {	bn _ is _ zero	EMPTY
302	324	2	-1	1	-1	bn _ zero ( ret )	bn _ zero ret	EMPTY
302	325	2	-1	0	-1	err = 0	EMPTY	EMPTY
302	326	2	-1	0	-1	goto end	EMPTY	EMPTY
302	327	2	-1	0	-1	if ( ! bn _ one ( x ) ) {	bn _ one	EMPTY
302	328	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	329	2	-1	0	-1	}	EMPTY	EMPTY
302	330	2	-1	0	-1	}	EMPTY	EMPTY
302	331	2	-1	0	-1	if ( ! bn _ mod _ exp ( x  a  t  p  ctx ) ) {	bn _ mod _ exp p ctx	EMPTY
302	332	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	333	2	-1	0	-1	}	EMPTY	EMPTY
302	334	2	-1	0	-1	if ( bn _ is _ zero ( x ) ) {	bn _ is _ zero	EMPTY
302	336	2	-1	1	-1	bn _ zero ( ret )	bn _ zero ret	EMPTY
302	337	2	-1	0	-1	err = 0	EMPTY	EMPTY
302	338	2	-1	0	-1	goto end	EMPTY	EMPTY
302	339	2	-1	0	-1	}	EMPTY	EMPTY
302	340	3	-1	0	-1	}	EMPTY	EMPTY
302	343	1	1	1	1	if ( ! bn _ mod _ sqr ( b , x , p , ctx ) ||	bn _ mod _ sqr b p ctx	EMPTY
302	344	2	-1	0	-1	! bn _ mod _ mul ( b , b , a , p , ctx ) ) {	bn _ mod _ mul b b p ctx	EMPTY
302	345	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	346	3	-1	0	-1	}	EMPTY	EMPTY
302	349	1	1	1	1	if ( ! bn _ mod _ mul ( x , x , a , p , ctx ) ) {	bn _ mod _ mul p ctx	EMPTY
302	350	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	351	3	-1	0	-1	}	EMPTY	EMPTY
302	353	1	0	0	0	while ( numconst ) {	EMPTY	EMPTY
302	363	1	1	1	1	if ( bn _ is _ one ( b ) ) {	bn _ is _ one b	EMPTY
302	364	2	-1	0	-1	if ( ! bn _ copy ( ret , x ) ) {	bn _ copy ret	EMPTY
302	365	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	366	2	-1	0	-1	}	EMPTY	EMPTY
302	367	2	-1	0	-1	err = 0 ;	EMPTY	EMPTY
302	368	2	-1	0	-1	goto vrfy ;	EMPTY	EMPTY
302	369	3	-1	0	-1	}	EMPTY	EMPTY
302	373	1	1	1	-1	i = 1	EMPTY	EMPTY
302	374	2	-1	0	-1	if ( ! bn _ mod _ sqr ( t , b , p , ctx ) ) {	bn _ mod _ sqr b p ctx	EMPTY
302	375	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	376	2	-1	0	-1	}	EMPTY	EMPTY
302	377	2	-1	0	-1	while ( ! bn _ is _ one ( t ) ) {	bn _ is _ one	EMPTY
302	378	2	-1	0	-1	i ++ ;	EMPTY	EMPTY
302	379	2	-1	0	-1	if ( i == e ) {	EMPTY	EMPTY
302	380	2	-1	0	-1	openssl _ put _ error ( bn , bn _ r _ not _ a _ square ) ;	EMPTY	EMPTY
302	381	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	382	2	-1	0	-1	}	EMPTY	EMPTY
302	383	2	-1	0	-1	if ( ! bn _ mod _ mul ( t , t , t , p , ctx ) ) {	bn _ mod _ mul p ctx	EMPTY
302	384	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	385	2	-1	0	-1	}	EMPTY	EMPTY
302	386	3	-1	0	-1	}	EMPTY	EMPTY
302	390	1	1	1	1	if ( ! bn _ copy ( t , y ) ) {	bn _ copy	EMPTY
302	391	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	392	2	-1	0	-1	}	EMPTY	EMPTY
302	393	2	-1	0	-1	for ( j = e - i - 1 ; j > 0 ; j -- ) {	EMPTY	EMPTY
302	394	2	-1	0	-1	if ( ! bn _ mod _ sqr ( t , t , p , ctx ) ) {	bn _ mod _ sqr p ctx	EMPTY
302	395	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	396	2	-1	0	-1	}	EMPTY	EMPTY
302	397	2	-1	0	-1	}	EMPTY	EMPTY
302	398	2	-1	0	-1	if ( ! bn _ mod _ mul ( y , t , t , p , ctx ) ||	bn _ mod _ mul p ctx	EMPTY
302	399	2	-1	0	-1	! bn _ mod _ mul ( x , x , t , p , ctx ) ||	bn _ mod _ mul p ctx	EMPTY
302	400	2	-1	0	-1	! bn _ mod _ mul ( b , b , y , p , ctx ) ) {	bn _ mod _ mul b b p ctx	EMPTY
302	401	2	-1	0	-1	goto end ;	EMPTY	EMPTY
302	402	2	-1	0	-1	}	EMPTY	EMPTY
302	403	2	-1	0	-1	e = i	EMPTY	EMPTY
302	404	3	-1	0	-1	}	EMPTY	EMPTY
302	406	1	0	0	-1	vrfy :	EMPTY	EMPTY
302	407	3	-1	0	-1	if ( ! err ) {	EMPTY	EMPTY
302	411	1	1	1	1	if ( ! bn _ mod _ sqr ( x , ret , p , ctx ) ) {	bn _ mod _ sqr ret p ctx	EMPTY
302	412	2	-1	0	-1	err = 1 ;	EMPTY	EMPTY
302	413	3	-1	0	-1	}	EMPTY	EMPTY
302	415	1	0	0	0	if ( ! err && 0 != bn _ cmp ( x , a ) ) {	bn _ cmp	EMPTY
302	416	2	-1	0	-1	openssl _ put _ error ( bn , bn _ r _ not _ a _ square ) ;	EMPTY	EMPTY
302	417	2	-1	0	-1	err = 1 ;	EMPTY	EMPTY
302	418	2	-1	0	-1	}	EMPTY	EMPTY
302	419	3	-1	0	-1	}	EMPTY	EMPTY
302	421	1	0	0	-1	end :	EMPTY	EMPTY
302	422	2	-1	0	-1	if ( err ) {	EMPTY	EMPTY
302	423	2	-1	0	-1	if ( ret != in ) {	ret in	EMPTY
302	424	2	-1	0	-1	bn _ clear _ free ( ret ) ;	bn _ clear _ free ret	EMPTY
302	425	2	-1	0	-1	}	EMPTY	EMPTY
302	426	2	-1	0	-1	ret = null ;	ret	EMPTY
302	427	2	-1	0	-1	}	EMPTY	EMPTY
302	428	2	-1	0	-1	bn _ ctx _ end ( ctx ) ;	bn _ ctx _ end ctx	EMPTY
302	429	2	-1	0	-1	return ret ;	ret	EMPTY
302	430	3	-1	0	-1	}	EMPTY	EMPTY
302	432	1	0	0	-1	int bn _ sqrt ( bignum * out _ sqrt  const bignum * in  bn _ ctx * ctx ) {	bn _ sqrt out _ sqrt in ctx	EMPTY
302	433	2	-1	0	-1	bignum * estimate  * tmp  * delta  * last _ delta  * tmp2 ;	EMPTY	EMPTY
302	434	3	-1	0	-1	int ok = numconst  last _ delta _ valid = numconst ;	EMPTY	EMPTY
302	436	1	0	0	0	if ( in -> neg ) {	in neg	EMPTY
302	437	2	-1	0	-1	openssl _ put _ error ( bn  bn _ r _ negative _ number ) ;	EMPTY	EMPTY
302	438	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
302	439	2	-1	0	-1	}	EMPTY	EMPTY
302	440	2	-1	0	-1	if ( bn _ is _ zero ( in ) ) {	bn _ is _ zero in	EMPTY
302	441	2	-1	0	-1	bn _ zero ( out _ sqrt ) ;	bn _ zero out _ sqrt	EMPTY
302	442	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
302	443	3	-1	0	-1	}	EMPTY	EMPTY
302	445	1	0	0	0	bn _ ctx _ start ( ctx ) ;	bn _ ctx _ start ctx	EMPTY
302	446	2	-1	0	-1	if ( out _ sqrt == in ) {	out _ sqrt in	EMPTY
302	447	2	-1	0	-1	estimate = bn _ ctx _ get ( ctx ) ;	bn _ ctx _ get ctx	EMPTY
302	448	2	-1	0	-1	} else {	EMPTY	EMPTY
302	449	2	-1	0	-1	estimate = out _ sqrt ;	out _ sqrt	EMPTY
302	450	2	-1	0	-1	}	EMPTY	EMPTY
302	451	2	-1	0	-1	tmp = bn _ ctx _ get ( ctx ) ;	bn _ ctx _ get ctx	EMPTY
302	452	2	-1	0	-1	last _ delta = bn _ ctx _ get ( ctx ) ;	bn _ ctx _ get ctx	EMPTY
302	453	2	-1	0	-1	delta = bn _ ctx _ get ( ctx ) ;	bn _ ctx _ get ctx	EMPTY
302	454	2	-1	0	-1	if ( estimate == null || tmp == null || last _ delta == null || delta == null ) {	EMPTY	EMPTY
302	455	2	-1	0	-1	openssl _ put _ error ( bn  err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
302	456	2	-1	0	-1	goto err ;	EMPTY	EMPTY
302	457	3	-1	0	-1	}	EMPTY	EMPTY
302	460	1	1	1	1	bn _ lshift ( estimate , bn _ value _ one ( ) , bn _ num _ bits ( in ) / 2 )	bn _ lshift bn _ value _ one bn _ num _ bits in	EMPTY
302	464	1	1	1	1	for ( ; ; ) {	EMPTY	EMPTY
302	466	2	-1	1	-1	if ( ! bn _ div ( tmp  null  in  estimate  ctx ) ||	bn _ div in ctx	EMPTY
302	467	2	-1	0	-1	! bn _ add ( tmp  tmp  estimate ) ||	bn _ add	EMPTY
302	468	2	-1	0	-1	! bn _ rshift1 ( estimate  tmp ) ||	bn _ rshift1	EMPTY
302	470	2	-1	1	-1	! bn _ sqr ( tmp  estimate  ctx ) ||	bn _ sqr ctx	EMPTY
302	472	2	-1	1	-1	! bn _ sub ( delta  in  tmp ) ) {	bn _ sub in	EMPTY
302	473	2	-1	0	-1	openssl _ put _ error ( bn  err _ r _ bn _ lib ) ;	EMPTY	EMPTY
302	474	2	-1	0	-1	goto err	EMPTY	EMPTY
302	475	3	-1	0	-1	}	EMPTY	EMPTY
302	477	1	1	0	-1	delta -> neg = 0	neg	EMPTY
302	481	2	-1	1	-1	if ( last _ delta _ valid && bn _ cmp ( delta , last _ delta ) >= 0 ) {	bn _ cmp	EMPTY
302	482	2	-1	0	-1	break ;	EMPTY	EMPTY
302	483	3	-1	0	-1	}	EMPTY	EMPTY
302	485	1	0	0	-1	last _ delta _ valid = 1	EMPTY	EMPTY
302	487	1	0	0	-1	tmp2 = last _ delta	EMPTY	EMPTY
302	488	2	-1	0	-1	last _ delta = delta	EMPTY	EMPTY
302	489	2	-1	0	-1	delta = tmp2	EMPTY	EMPTY
302	490	3	-1	0	-1	}	EMPTY	EMPTY
302	492	1	0	0	0	if ( bn _ cmp ( tmp  in ) != numconst ) {	bn _ cmp in	EMPTY
302	493	2	-1	0	-1	openssl _ put _ error ( bn  bn _ r _ not _ a _ square ) ;	EMPTY	EMPTY
302	494	2	-1	0	-1	goto err ;	EMPTY	EMPTY
302	495	3	-1	0	-1	}	EMPTY	EMPTY
302	497	1	0	0	-1	ok = numconst ;	EMPTY	EMPTY
302	499	1	0	0	-1	err :	EMPTY	EMPTY
302	500	2	-1	0	-1	if ( ok && out _ sqrt == in && ! bn _ copy ( out _ sqrt  estimate ) ) {	out _ sqrt in bn _ copy out _ sqrt	EMPTY
302	501	2	-1	0	-1	ok = numconst ;	EMPTY	EMPTY
302	502	2	-1	0	-1	}	EMPTY	EMPTY
302	503	2	-1	0	-1	bn _ ctx _ end ( ctx ) ;	bn _ ctx _ end ctx	EMPTY
302	504	2	-1	0	-1	return ok ;	EMPTY	EMPTY
302	505	3	-1	0	-1	}	EMPTY	EMPTY
312	68	1	1	0	-1	bignum * bn _ new ( void ) {	bn _ new	EMPTY
312	69	3	-1	1	-1	bignum * bn = openssl _ malloc ( sizeof ( bignum ) ) ;	bn	EMPTY
312	71	1	0	0	0	if ( bn == null ) {	bn	EMPTY
312	72	2	-1	0	-1	openssl _ put _ error ( bn , err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
312	73	2	-1	0	-1	return null ;	EMPTY	EMPTY
312	74	3	-1	0	-1	}	EMPTY	EMPTY
312	76	1	0	0	0	memset ( bn  numconst  sizeof ( bignum ) ) ;	bn	EMPTY
312	77	3	-1	0	-1	bn -> flags = bn _ flg _ malloced ;	bn flags	EMPTY
312	79	1	0	0	0	return bn	bn	EMPTY
312	80	3	-1	0	-1	}	EMPTY	EMPTY
312	82	1	0	0	-1	void bn _ init ( bignum * bn ) {	bn _ init bn	EMPTY
312	83	2	-1	0	-1	memset ( bn  numconst  sizeof ( bignum ) ) ;	bn	EMPTY
312	84	3	-1	0	-1	}	EMPTY	EMPTY
312	86	1	0	0	-1	void bn _ free ( bignum * bn ) {	bn _ free bn	EMPTY
312	87	2	-1	0	-1	if ( bn == null ) {	bn	EMPTY
312	88	2	-1	0	-1	return ;	EMPTY	EMPTY
312	89	3	-1	0	-1	}	EMPTY	EMPTY
312	91	1	0	0	0	if ( ( bn -> flags & bn _ flg _ static _ data ) == 0 ) {	bn flags	EMPTY
312	92	2	-1	0	-1	openssl _ free ( bn -> d ) ;	bn	EMPTY
312	93	3	-1	0	-1	}	EMPTY	EMPTY
312	95	1	0	0	0	if ( bn -> flags & bn _ flg _ malloced ) {	bn flags	EMPTY
312	96	2	-1	0	-1	openssl _ free ( bn ) ;	bn	EMPTY
312	97	2	-1	0	-1	} else {	EMPTY	EMPTY
312	98	2	-1	0	-1	bn -> d = null ;	bn	EMPTY
312	99	2	-1	0	-1	}	EMPTY	EMPTY
312	100	3	-1	0	-1	}	EMPTY	EMPTY
312	102	1	0	0	-1	void bn _ clear _ free ( bignum * bn ) {	bn _ clear _ free bn	EMPTY
312	103	3	-1	0	-1	char should _ free ;	EMPTY	EMPTY
312	105	1	0	0	0	if ( bn == null ) {	bn	EMPTY
312	106	2	-1	0	-1	return ;	EMPTY	EMPTY
312	107	3	-1	0	-1	}	EMPTY	EMPTY
312	109	1	0	0	0	if ( bn -> d != null ) {	bn	EMPTY
312	110	2	-1	0	-1	openssl _ cleanse ( bn -> d , bn -> dmax * sizeof ( bn -> d [ 0 ] ) ) ;	openssl _ cleanse bn bn dmax bn	EMPTY
312	111	2	-1	0	-1	if ( ( bn -> flags & bn _ flg _ static _ data ) == 0 ) {	bn flags	EMPTY
312	112	2	-1	0	-1	openssl _ free ( bn -> d ) ;	bn	EMPTY
312	113	2	-1	0	-1	}	EMPTY	EMPTY
312	114	3	-1	0	-1	}	EMPTY	EMPTY
312	116	1	0	0	-1	should _ free = ( bn -> flags & bn _ flg _ malloced ) != 0	bn flags	EMPTY
312	117	2	-1	0	-1	openssl _ cleanse ( bn , sizeof ( bignum ) )	openssl _ cleanse bn	EMPTY
312	118	2	-1	0	-1	if ( should _ free ) {	EMPTY	EMPTY
312	119	2	-1	0	-1	openssl _ free ( bn ) ;	bn	EMPTY
312	120	2	-1	0	-1	}	EMPTY	EMPTY
312	121	3	-1	0	-1	}	EMPTY	EMPTY
312	123	1	0	0	-1	bignum * bn _ dup ( const bignum * src ) {	bn _ dup src	EMPTY
312	124	3	-1	0	-1	bignum * copy ;	EMPTY	EMPTY
312	126	1	0	0	0	if ( src == null ) {	src	EMPTY
312	127	2	-1	0	-1	return null ;	EMPTY	EMPTY
312	128	3	-1	0	-1	}	EMPTY	EMPTY
312	130	1	0	0	-1	copy = bn _ new ( )	bn _ new	EMPTY
312	131	2	-1	0	-1	if ( copy == null ) {	EMPTY	EMPTY
312	132	2	-1	0	-1	return null ;	EMPTY	EMPTY
312	133	3	-1	0	-1	}	EMPTY	EMPTY
312	135	1	0	0	0	if ( ! bn _ copy ( copy , src ) ) {	bn _ copy src	EMPTY
312	136	2	-1	0	-1	bn _ free ( copy ) ;	bn _ free	EMPTY
312	137	2	-1	0	-1	return null ;	EMPTY	EMPTY
312	138	3	-1	0	-1	}	EMPTY	EMPTY
312	140	1	0	0	0	return copy	EMPTY	EMPTY
312	141	3	-1	0	-1	}	EMPTY	EMPTY
312	143	1	0	0	-1	bignum * bn _ copy ( bignum * dest  const bignum * src ) {	bn _ copy dest src	EMPTY
312	144	2	-1	0	-1	if ( src == dest ) {	src dest	EMPTY
312	145	2	-1	0	-1	return dest ;	dest	EMPTY
312	146	3	-1	0	-1	}	EMPTY	EMPTY
312	148	1	0	0	0	if ( bn _ wexpand ( dest , src -> top ) == null ) {	bn _ wexpand dest src top	EMPTY
312	149	2	-1	0	-1	return null ;	EMPTY	EMPTY
312	150	3	-1	0	-1	}	EMPTY	EMPTY
312	152	1	0	0	0	memcpy ( dest -> d  src -> d  sizeof ( src -> d [ numconst ] ) * src -> top ) ;	dest src src src top	EMPTY
312	154	1	0	0	-1	dest -> top = src -> top	dest top src top	EMPTY
312	155	2	-1	0	-1	dest -> neg = src -> neg	dest neg src neg	EMPTY
312	156	2	-1	0	-1	return dest	dest	EMPTY
312	157	3	-1	0	-1	}	EMPTY	EMPTY
312	159	1	0	0	-1	void bn _ clear ( bignum * bn ) {	bn _ clear bn	EMPTY
312	160	2	-1	0	-1	if ( bn -> d != null ) {	bn	EMPTY
312	161	2	-1	0	-1	memset ( bn -> d , 0 , bn -> dmax * sizeof ( bn -> d [ 0 ] ) ) ;	bn bn dmax bn	EMPTY
312	162	3	-1	0	-1	}	EMPTY	EMPTY
312	164	1	0	0	-1	bn -> top = 0	bn top	EMPTY
312	165	2	-1	0	-1	bn -> neg = 0	bn neg	EMPTY
312	166	3	-1	0	-1	}	EMPTY	EMPTY
312	168	1	0	0	-1	const bignum * bn _ value _ one ( void ) {	bn _ value _ one	EMPTY
312	169	2	-1	0	-1	static const bn _ ulong konelimbs [ 1 ] = { 1 } ;	EMPTY	EMPTY
312	170	3	-1	0	-1	static const bignum kone = static _ bignum ( konelimbs ) ;	EMPTY	EMPTY
312	172	1	0	0	0	return & kone	EMPTY	EMPTY
312	173	3	-1	0	-1	}	EMPTY	EMPTY
312	175	1	0	0	-1	void bn _ with _ flags ( bignum * out  const bignum * in  int flags ) {	bn _ with _ flags out in flags	EMPTY
312	176	2	-1	0	-1	memcpy ( out  in  sizeof ( bignum ) ) ;	out in	EMPTY
312	177	2	-1	0	-1	out -> flags &= ~ bn _ flg _ malloced ;	out flags	EMPTY
312	178	2	-1	0	-1	out -> flags |= bn _ flg _ static _ data | flags	out flags flags	EMPTY
312	179	3	-1	0	-1	}	EMPTY	EMPTY
312	183	1	1	0	-1	unsigned bn _ num _ bits _ word ( bn _ ulong l ) {	bn _ num _ bits _ word l	EMPTY
312	184	2	-1	1	-1	static const unsigned char bits [ 256 ] = {	bits	EMPTY
312	185	2	-1	0	-1	0 , 1 , 2 , 2 , 3 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 4 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 ,	EMPTY	EMPTY
312	186	2	-1	0	-1	5 , 5 , 5 , 5 , 5 , 5 , 5 , 5 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 ,	EMPTY	EMPTY
312	187	2	-1	0	-1	6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 6 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 ,	EMPTY	EMPTY
312	188	2	-1	0	-1	7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 ,	EMPTY	EMPTY
312	189	2	-1	0	-1	7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 ,	EMPTY	EMPTY
312	190	2	-1	0	-1	7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 ,	EMPTY	EMPTY
312	191	2	-1	0	-1	8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 ,	EMPTY	EMPTY
312	192	2	-1	0	-1	8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 ,	EMPTY	EMPTY
312	193	2	-1	0	-1	8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 ,	EMPTY	EMPTY
312	194	2	-1	0	-1	8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 ,	EMPTY	EMPTY
312	195	3	-1	0	-1	8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 , 8 } ;	EMPTY	EMPTY
312	197	1	0	0	-1	# if defined ( openssl _ 64 _ bit )	EMPTY	EMPTY
312	198	2	-1	0	-1	if ( l & numconst ) {	l	EMPTY
312	199	2	-1	0	-1	if ( l & numconst ) {	l	EMPTY
312	200	2	-1	0	-1	if ( l & numconst ) {	l	EMPTY
312	201	2	-1	0	-1	return ( bits [ ( int ) ( l >> numconst ) ] + numconst ) ;	bits l	EMPTY
312	202	2	-1	0	-1	} else {	EMPTY	EMPTY
312	203	2	-1	0	-1	return ( bits [ ( int ) ( l >> numconst ) ] + numconst ) ;	bits l	EMPTY
312	204	2	-1	0	-1	}	EMPTY	EMPTY
312	205	2	-1	0	-1	} else {	EMPTY	EMPTY
312	206	2	-1	0	-1	if ( l & numconst ) {	l	EMPTY
312	207	2	-1	0	-1	return ( bits [ ( int ) ( l >> numconst ) ] + numconst ) ;	bits l	EMPTY
312	208	2	-1	0	-1	} else {	EMPTY	EMPTY
312	209	2	-1	0	-1	return ( bits [ ( int ) ( l >> numconst ) ] + numconst ) ;	bits l	EMPTY
312	210	2	-1	0	-1	}	EMPTY	EMPTY
312	211	2	-1	0	-1	}	EMPTY	EMPTY
312	212	2	-1	0	-1	} else	EMPTY	EMPTY
312	213	2	-1	0	-1	# endif	EMPTY	EMPTY
312	214	2	-1	0	-1	{	EMPTY	EMPTY
312	215	2	-1	0	-1	if ( l & 0xffff0000l ) {	l	EMPTY
312	216	2	-1	0	-1	if ( l & 0xff000000l ) {	l	EMPTY
312	217	2	-1	0	-1	return ( bits [ ( int ) ( l >> 24l ) ] + 24 ) ;	bits l	EMPTY
312	218	2	-1	0	-1	} else {	EMPTY	EMPTY
312	219	2	-1	0	-1	return ( bits [ ( int ) ( l >> 16l ) ] + 16 ) ;	bits l	EMPTY
312	220	2	-1	0	-1	}	EMPTY	EMPTY
312	221	2	-1	0	-1	} else {	EMPTY	EMPTY
312	222	2	-1	0	-1	if ( l & 0xff00l ) {	l	EMPTY
312	223	2	-1	0	-1	return ( bits [ ( int ) ( l >> 8 ) ] + 8 ) ;	bits l	EMPTY
312	224	2	-1	0	-1	} else {	EMPTY	EMPTY
312	225	2	-1	0	-1	return ( bits [ ( int ) ( l ) ] ) ;	bits l	EMPTY
312	226	3	-1	0	-1	}	EMPTY	EMPTY
312	227	1	0	0	-1	}	EMPTY	EMPTY
312	228	2	-1	0	-1	}	EMPTY	EMPTY
312	229	3	-1	0	-1	}	EMPTY	EMPTY
312	231	1	0	0	-1	unsigned bn _ num _ bits ( const bignum * bn ) {	bn _ num _ bits bn	EMPTY
312	232	3	-1	0	-1	const int max = bn -> top - 1 ;	bn top	EMPTY
312	234	1	0	0	0	if ( bn _ is _ zero ( bn ) ) {	bn _ is _ zero bn	EMPTY
312	235	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
312	236	3	-1	0	-1	}	EMPTY	EMPTY
312	238	1	0	0	0	return max * bn _ bits2 + bn _ num _ bits _ word ( bn -> d [ max ] )	bn _ num _ bits _ word bn	EMPTY
312	239	3	-1	0	-1	}	EMPTY	EMPTY
312	241	1	0	0	-1	unsigned bn _ num _ bytes ( const bignum * bn ) {	bn _ num _ bytes bn	EMPTY
312	242	2	-1	0	-1	return ( bn _ num _ bits ( bn ) + 7 ) / 8	bn _ num _ bits bn	EMPTY
312	243	3	-1	0	-1	}	EMPTY	EMPTY
312	245	1	0	0	-1	void bn _ zero ( bignum * bn ) {	bn _ zero bn	EMPTY
312	246	2	-1	0	-1	bn -> top = bn -> neg = 0	bn top bn neg	EMPTY
312	247	3	-1	0	-1	}	EMPTY	EMPTY
312	249	1	0	0	-1	int bn _ one ( bignum * bn ) {	bn _ one bn	EMPTY
312	250	2	-1	0	-1	return bn _ set _ word ( bn , 1 )	bn _ set _ word bn	EMPTY
312	251	3	-1	0	-1	}	EMPTY	EMPTY
312	253	1	0	0	-1	int bn _ set _ word ( bignum * bn  bn _ ulong value ) {	bn _ set _ word bn value	EMPTY
312	254	2	-1	0	-1	if ( value == 0 ) {	value	EMPTY
312	255	2	-1	0	-1	bn _ zero ( bn ) ;	bn _ zero bn	EMPTY
312	256	2	-1	0	-1	return 1 ;	EMPTY	EMPTY
312	257	3	-1	0	-1	}	EMPTY	EMPTY
312	259	1	0	0	0	if ( bn _ wexpand ( bn , 1 ) == null ) {	bn _ wexpand bn	EMPTY
312	260	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
312	261	3	-1	0	-1	}	EMPTY	EMPTY
312	263	1	0	0	-1	bn -> neg = 0	bn neg	EMPTY
312	264	2	-1	0	-1	bn -> d [ 0 ] = value	bn value	EMPTY
312	265	2	-1	0	-1	bn -> top = 1	bn top	EMPTY
312	266	2	-1	0	-1	return 1	EMPTY	EMPTY
312	267	3	-1	0	-1	}	EMPTY	EMPTY
312	269	1	0	0	-1	int bn _ is _ negative ( const bignum * bn ) {	bn _ is _ negative bn	EMPTY
312	270	2	-1	0	-1	return bn -> neg != 0	bn neg	EMPTY
312	271	3	-1	0	-1	}	EMPTY	EMPTY
312	273	1	0	0	-1	void bn _ set _ negative ( bignum * bn  int sign ) {	bn _ set _ negative bn sign	EMPTY
312	274	2	-1	0	-1	if ( sign && ! bn _ is _ zero ( bn ) ) {	sign bn _ is _ zero bn	EMPTY
312	275	2	-1	0	-1	bn -> neg = 1 ;	bn neg	EMPTY
312	276	2	-1	0	-1	} else {	EMPTY	EMPTY
312	277	2	-1	0	-1	bn -> neg = 0 ;	bn neg	EMPTY
312	278	2	-1	0	-1	}	EMPTY	EMPTY
312	279	3	-1	0	-1	}	EMPTY	EMPTY
312	281	1	0	0	-1	bignum * bn _ wexpand ( bignum * bn  size _ t words ) {	bn _ wexpand bn words	EMPTY
312	282	3	-1	0	-1	bn _ ulong * a ;	a	EMPTY
312	284	1	0	0	0	if ( words <= ( size _ t ) bn -> dmax ) {	words bn dmax	EMPTY
312	285	2	-1	0	-1	return bn ;	bn	EMPTY
312	286	3	-1	0	-1	}	EMPTY	EMPTY
312	288	1	0	0	0	if ( words > ( int _ max / ( 4 * bn _ bits2 ) ) ) {	words	EMPTY
312	289	2	-1	0	-1	openssl _ put _ error ( bn , bn _ r _ bignum _ too _ long ) ;	EMPTY	EMPTY
312	290	2	-1	0	-1	return null ;	EMPTY	EMPTY
312	291	3	-1	0	-1	}	EMPTY	EMPTY
312	293	1	0	0	0	if ( bn -> flags & bn _ flg _ static _ data ) {	bn flags	EMPTY
312	294	2	-1	0	-1	openssl _ put _ error ( bn , bn _ r _ expand _ on _ static _ bignum _ data ) ;	EMPTY	EMPTY
312	295	2	-1	0	-1	return null ;	EMPTY	EMPTY
312	296	3	-1	0	-1	}	EMPTY	EMPTY
312	298	1	0	0	-1	a = ( bn _ ulong * ) openssl _ malloc ( sizeof ( bn _ ulong ) * words )	a words	EMPTY
312	299	2	-1	0	-1	if ( a == null ) {	a	EMPTY
312	300	2	-1	0	-1	openssl _ put _ error ( bn , err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
312	301	2	-1	0	-1	return null ;	EMPTY	EMPTY
312	302	3	-1	0	-1	}	EMPTY	EMPTY
312	304	1	0	0	0	memcpy ( a  bn -> d  sizeof ( bn _ ulong ) * bn -> top ) ;	a bn bn top	EMPTY
312	306	1	0	0	0	openssl _ free ( bn -> d ) ;	bn	EMPTY
312	307	2	-1	0	-1	bn -> d = a	bn a	EMPTY
312	308	3	-1	0	-1	bn -> dmax = ( int ) words	bn dmax words	EMPTY
312	310	1	0	0	0	return bn	bn	EMPTY
312	311	3	-1	0	-1	}	EMPTY	EMPTY
312	313	1	0	0	-1	bignum * bn _ expand ( bignum * bn  size _ t bits ) {	bn _ expand bn bits	EMPTY
312	314	2	-1	0	-1	if ( bits + bn _ bits2 - 1 < bits ) {	bits bits	EMPTY
312	315	2	-1	0	-1	openssl _ put _ error ( bn , bn _ r _ bignum _ too _ long ) ;	EMPTY	EMPTY
312	316	2	-1	0	-1	return null ;	EMPTY	EMPTY
312	317	2	-1	0	-1	}	EMPTY	EMPTY
312	318	2	-1	0	-1	return bn _ wexpand ( bn , ( bits + bn _ bits2 - 1 ) / bn _ bits2 )	bn _ wexpand bn bits	EMPTY
312	319	3	-1	0	-1	}	EMPTY	EMPTY
312	321	1	0	0	-1	void bn _ correct _ top ( bignum * bn ) {	bn _ correct _ top bn	EMPTY
312	322	2	-1	0	-1	bn _ ulong * ftl ;	EMPTY	EMPTY
312	323	3	-1	0	-1	int tmp _ top = bn -> top ;	bn top	EMPTY
312	325	1	0	0	0	if ( tmp _ top > 0 ) {	EMPTY	EMPTY
312	326	2	-1	0	-1	for ( ftl = & ( bn -> d [ tmp _ top - 1 ] ) ; tmp _ top > 0 ; tmp _ top -- ) {	bn	EMPTY
312	327	2	-1	0	-1	if ( * ( ftl -- ) ) {	EMPTY	EMPTY
312	328	2	-1	0	-1	break ;	EMPTY	EMPTY
312	329	2	-1	0	-1	}	EMPTY	EMPTY
312	330	2	-1	0	-1	}	EMPTY	EMPTY
312	331	2	-1	0	-1	bn -> top = tmp _ top ;	bn top	EMPTY
312	332	2	-1	0	-1	}	EMPTY	EMPTY
312	333	3	-1	0	-1	}	EMPTY	EMPTY
312	335	1	0	0	-1	int bn _ get _ flags ( const bignum * bn  int flags ) {	bn _ get _ flags bn flags	EMPTY
312	336	2	-1	0	-1	return bn -> flags & flags	bn flags flags	EMPTY
312	337	3	-1	0	-1	}	EMPTY	EMPTY
312	339	1	0	0	-1	void bn _ set _ flags ( bignum * bn  int flags ) {	bn _ set _ flags bn flags	EMPTY
312	340	2	-1	0	-1	bn -> flags |= flags	bn flags flags	EMPTY
312	341	3	-1	0	-1	}	EMPTY	EMPTY
315	115	1	0	0	-1	static bignum * euclid ( bignum * a  bignum * b ) {	a b	EMPTY
315	116	2	-1	0	-1	bignum * t ;	EMPTY	EMPTY
315	117	3	-1	0	-1	int shifts = 0 ;	EMPTY	EMPTY
315	120	1	1	1	1	while ( ! bn _ is _ zero ( b ) ) {	bn _ is _ zero b	EMPTY
315	123	1	1	1	1	if ( bn _ is _ odd ( a ) ) {	bn _ is _ odd a	EMPTY
315	124	2	-1	0	-1	if ( bn _ is _ odd ( b ) ) {	bn _ is _ odd b	EMPTY
315	125	2	-1	0	-1	if ( ! bn _ sub ( a , a , b ) ) {	bn _ sub a a b	EMPTY
315	126	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	127	2	-1	0	-1	}	EMPTY	EMPTY
315	128	2	-1	0	-1	if ( ! bn _ rshift1 ( a , a ) ) {	bn _ rshift1 a a	EMPTY
315	129	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	130	2	-1	0	-1	}	EMPTY	EMPTY
315	131	2	-1	0	-1	if ( bn _ cmp ( a , b ) < 0 ) {	bn _ cmp a b	EMPTY
315	132	2	-1	0	-1	t = a ;	a	EMPTY
315	133	2	-1	0	-1	a = b ;	a b	EMPTY
315	134	2	-1	0	-1	b = t ;	b	EMPTY
315	135	2	-1	0	-1	}	EMPTY	EMPTY
315	136	2	-1	0	-1	}	EMPTY	EMPTY
315	138	2	-1	1	-1	if ( ! bn _ rshift1 ( b , b ) ) {	bn _ rshift1 b b	EMPTY
315	139	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	140	2	-1	0	-1	}	EMPTY	EMPTY
315	141	2	-1	0	-1	if ( bn _ cmp ( a , b ) < 0 ) {	bn _ cmp a b	EMPTY
315	142	2	-1	0	-1	t = a ;	a	EMPTY
315	143	2	-1	0	-1	a = b ;	a b	EMPTY
315	144	2	-1	0	-1	b = t ;	b	EMPTY
315	145	2	-1	0	-1	}	EMPTY	EMPTY
315	146	2	-1	0	-1	}	EMPTY	EMPTY
315	147	2	-1	0	-1	}	EMPTY	EMPTY
315	149	2	-1	1	-1	if ( bn _ is _ odd ( b ) ) {	bn _ is _ odd b	EMPTY
315	150	2	-1	0	-1	if ( ! bn _ rshift1 ( a , a ) ) {	bn _ rshift1 a a	EMPTY
315	151	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	152	2	-1	0	-1	}	EMPTY	EMPTY
315	153	2	-1	0	-1	if ( bn _ cmp ( a , b ) < 0 ) {	bn _ cmp a b	EMPTY
315	154	3	-1	0	-1	t = a ;	a	EMPTY
315	155	1	1	0	-1	a = b ;	a b	EMPTY
315	156	2	-1	0	-1	b = t ;	b	EMPTY
315	157	2	-1	0	-1	}	EMPTY	EMPTY
315	158	2	-1	0	-1	}	EMPTY	EMPTY
315	160	2	-1	1	-1	if ( ! bn _ rshift1 ( a , a ) ) {	bn _ rshift1 a a	EMPTY
315	161	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	162	2	-1	0	-1	}	EMPTY	EMPTY
315	163	2	-1	0	-1	if ( ! bn _ rshift1 ( b , b ) ) {	bn _ rshift1 b b	EMPTY
315	164	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	165	2	-1	0	-1	}	EMPTY	EMPTY
315	166	2	-1	0	-1	shifts ++	EMPTY	EMPTY
315	167	2	-1	0	-1	}	EMPTY	EMPTY
315	168	2	-1	0	-1	}	EMPTY	EMPTY
315	170	3	-1	1	-1	}	EMPTY	EMPTY
315	172	1	0	0	0	if ( shifts ) {	EMPTY	EMPTY
315	173	2	-1	0	-1	if ( ! bn _ lshift ( a  a  shifts ) ) {	bn _ lshift a a	EMPTY
315	174	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	175	2	-1	0	-1	}	EMPTY	EMPTY
315	176	3	-1	0	-1	}	EMPTY	EMPTY
315	178	1	0	0	0	return a ;	a	EMPTY
315	180	1	0	0	-1	err :	EMPTY	EMPTY
315	181	2	-1	0	-1	return null ;	EMPTY	EMPTY
315	182	3	-1	0	-1	}	EMPTY	EMPTY
315	184	1	0	0	-1	int bn _ gcd ( bignum * r  const bignum * in _ a  const bignum * in _ b  bn _ ctx * ctx ) {	bn _ gcd r ctx	EMPTY
315	185	2	-1	0	-1	bignum * a  * b  * t ;	a b	EMPTY
315	186	3	-1	0	-1	int ret = numconst ;	ret	EMPTY
315	188	1	0	0	0	bn _ ctx _ start ( ctx ) ;	bn _ ctx _ start ctx	EMPTY
315	189	2	-1	0	-1	a = bn _ ctx _ get ( ctx ) ;	a bn _ ctx _ get ctx	EMPTY
315	190	3	-1	0	-1	b = bn _ ctx _ get ( ctx ) ;	b bn _ ctx _ get ctx	EMPTY
315	192	1	0	0	0	if ( a == null || b == null ) {	a b	EMPTY
315	193	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	194	2	-1	0	-1	}	EMPTY	EMPTY
315	195	2	-1	0	-1	if ( bn _ copy ( a  in _ a ) == null ) {	bn _ copy a	EMPTY
315	196	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	197	2	-1	0	-1	}	EMPTY	EMPTY
315	198	2	-1	0	-1	if ( bn _ copy ( b  in _ b ) == null ) {	bn _ copy b	EMPTY
315	199	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	200	3	-1	0	-1	}	EMPTY	EMPTY
315	202	1	0	0	-1	a -> neg = numconst ;	a neg	EMPTY
315	203	3	-1	0	-1	b -> neg = numconst ;	b neg	EMPTY
315	205	1	0	0	0	if ( bn _ cmp ( a  b ) < numconst ) {	bn _ cmp a b	EMPTY
315	206	2	-1	0	-1	t = a ;	a	EMPTY
315	207	2	-1	0	-1	a = b ;	a b	EMPTY
315	208	2	-1	0	-1	b = t ;	b	EMPTY
315	209	2	-1	0	-1	}	EMPTY	EMPTY
315	210	2	-1	0	-1	t = euclid ( a  b ) ;	a b	EMPTY
315	211	2	-1	0	-1	if ( t == null ) {	EMPTY	EMPTY
315	212	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	213	3	-1	0	-1	}	EMPTY	EMPTY
315	215	1	0	0	0	if ( bn _ copy ( r  t ) == null ) {	bn _ copy r	EMPTY
315	216	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	217	2	-1	0	-1	}	EMPTY	EMPTY
315	218	3	-1	0	-1	ret = numconst ;	ret	EMPTY
315	220	1	0	0	-1	err :	EMPTY	EMPTY
315	221	2	-1	0	-1	bn _ ctx _ end ( ctx ) ;	bn _ ctx _ end ctx	EMPTY
315	222	2	-1	0	-1	return ret ;	ret	EMPTY
315	223	3	-1	0	-1	}	EMPTY	EMPTY
315	226	1	0	0	-1	static bignum * bn _ mod _ inverse _ no _ branch ( bignum * out  int * out _ no _ inverse	bn _ mod _ inverse _ no _ branch out out _ no _ inverse	EMPTY
315	227	2	-1	0	-1	const bignum * a  const bignum * n	a n	EMPTY
315	228	3	-1	0	-1	bn _ ctx * ctx ) ;	ctx	EMPTY
315	230	1	0	0	-1	bignum * bn _ mod _ inverse _ ex ( bignum * out  int * out _ no _ inverse  const bignum * a	bn _ mod _ inverse _ ex out out _ no _ inverse a	EMPTY
315	231	2	-1	0	-1	const bignum * n  bn _ ctx * ctx ) {	n ctx	EMPTY
315	232	2	-1	0	-1	bignum * a , * b , * x , * y , * m , * d , * t , * r = null ;	EMPTY	EMPTY
315	233	2	-1	0	-1	bignum * ret = null ;	ret	EMPTY
315	234	3	-1	0	-1	int sign ;	sign	EMPTY
315	236	1	0	0	0	if ( ( a -> flags & bn _ flg _ consttime ) != 0 ||	a flags	EMPTY
315	237	2	-1	0	-1	( n -> flags & bn _ flg _ consttime ) != 0 ) {	n flags	EMPTY
315	238	2	-1	0	-1	return bn _ mod _ inverse _ no _ branch ( out , out _ no _ inverse , a , n , ctx ) ;	bn _ mod _ inverse _ no _ branch out out _ no _ inverse a n ctx	EMPTY
315	239	3	-1	0	-1	}	EMPTY	EMPTY
315	241	1	0	0	-1	* out _ no _ inverse = 0	out _ no _ inverse	EMPTY
315	243	1	0	0	0	bn _ ctx _ start ( ctx )	bn _ ctx _ start ctx	EMPTY
315	244	2	-1	0	-1	a = bn _ ctx _ get ( ctx )	bn _ ctx _ get ctx	EMPTY
315	245	2	-1	0	-1	b = bn _ ctx _ get ( ctx )	bn _ ctx _ get ctx	EMPTY
315	246	2	-1	0	-1	x = bn _ ctx _ get ( ctx )	bn _ ctx _ get ctx	EMPTY
315	247	2	-1	0	-1	d = bn _ ctx _ get ( ctx )	bn _ ctx _ get ctx	EMPTY
315	248	2	-1	0	-1	m = bn _ ctx _ get ( ctx )	bn _ ctx _ get ctx	EMPTY
315	249	2	-1	0	-1	y = bn _ ctx _ get ( ctx )	bn _ ctx _ get ctx	EMPTY
315	250	2	-1	0	-1	t = bn _ ctx _ get ( ctx )	bn _ ctx _ get ctx	EMPTY
315	251	2	-1	0	-1	if ( t == null ) {	EMPTY	EMPTY
315	252	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	253	3	-1	0	-1	}	EMPTY	EMPTY
315	255	1	0	0	0	if ( out == null ) {	out	EMPTY
315	256	2	-1	0	-1	r = bn _ new ( ) ;	bn _ new	EMPTY
315	257	2	-1	0	-1	} else {	EMPTY	EMPTY
315	258	2	-1	0	-1	r = out ;	out	EMPTY
315	259	2	-1	0	-1	}	EMPTY	EMPTY
315	260	2	-1	0	-1	if ( r == null ) {	EMPTY	EMPTY
315	261	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	262	3	-1	0	-1	}	EMPTY	EMPTY
315	264	1	0	0	0	bn _ zero ( y )	bn _ zero	EMPTY
315	265	2	-1	0	-1	if ( ! bn _ one ( x ) || bn _ copy ( b , a ) == null || bn _ copy ( a , n ) == null ) {	bn _ one bn _ copy a bn _ copy n	EMPTY
315	266	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	267	2	-1	0	-1	}	EMPTY	EMPTY
315	268	2	-1	0	-1	a -> neg = 0	neg	EMPTY
315	269	2	-1	0	-1	if ( b -> neg || ( bn _ ucmp ( b , a ) >= 0 ) ) {	neg bn _ ucmp	EMPTY
315	270	2	-1	0	-1	if ( ! bn _ nnmod ( b , b , a , ctx ) ) {	bn _ nnmod ctx	EMPTY
315	271	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	272	2	-1	0	-1	}	EMPTY	EMPTY
315	273	2	-1	0	-1	}	EMPTY	EMPTY
315	274	3	-1	0	-1	sign = - 1	sign	EMPTY
315	282	1	1	1	1	if ( bn _ is _ odd ( n ) && ( bn _ num _ bits ( n ) <= ( bn _ bits2 <= numconst ? numconst : numconst ) ) ) {	bn _ is _ odd n bn _ num _ bits n	EMPTY
315	287	3	-1	1	-1	int shift ;	shift	EMPTY
315	289	1	0	0	0	while ( ! bn _ is _ zero ( b ) ) {	bn _ is _ zero	EMPTY
315	298	1	1	1	-1	shift = 0	shift	EMPTY
315	299	2	-1	0	-1	while ( ! bn _ is _ bit _ set ( b  shift ) ) {	bn _ is _ bit _ set shift	EMPTY
315	301	3	-1	1	-1	shift ++	shift	EMPTY
315	303	1	1	0	1	if ( bn _ is _ odd ( x ) ) {	bn _ is _ odd	EMPTY
315	304	2	-1	0	-1	if ( ! bn _ uadd ( x , x , n ) ) {	bn _ uadd n	EMPTY
315	305	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	306	2	-1	0	-1	}	EMPTY	EMPTY
315	307	2	-1	0	-1	}	EMPTY	EMPTY
315	309	2	-1	1	-1	if ( ! bn _ rshift1 ( x , x ) ) {	bn _ rshift1	EMPTY
315	310	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	311	2	-1	0	-1	}	EMPTY	EMPTY
315	312	2	-1	0	-1	}	EMPTY	EMPTY
315	313	2	-1	0	-1	if ( shift > numconst ) {	shift	EMPTY
315	314	2	-1	0	-1	if ( ! bn _ rshift ( b  b  shift ) ) {	bn _ rshift shift	EMPTY
315	315	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	316	2	-1	0	-1	}	EMPTY	EMPTY
315	317	3	-1	0	-1	}	EMPTY	EMPTY
315	320	1	1	1	-1	shift = 0	shift	EMPTY
315	321	2	-1	0	-1	while ( ! bn _ is _ bit _ set ( a  shift ) ) {	bn _ is _ bit _ set shift	EMPTY
315	323	3	-1	1	-1	shift ++	shift	EMPTY
315	325	1	1	0	1	if ( bn _ is _ odd ( y ) ) {	bn _ is _ odd	EMPTY
315	326	2	-1	0	-1	if ( ! bn _ uadd ( y , y , n ) ) {	bn _ uadd n	EMPTY
315	327	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	328	2	-1	0	-1	}	EMPTY	EMPTY
315	329	2	-1	0	-1	}	EMPTY	EMPTY
315	331	2	-1	1	-1	if ( ! bn _ rshift1 ( y , y ) ) {	bn _ rshift1	EMPTY
315	332	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	333	2	-1	0	-1	}	EMPTY	EMPTY
315	334	2	-1	0	-1	}	EMPTY	EMPTY
315	335	2	-1	0	-1	if ( shift > numconst ) {	shift	EMPTY
315	336	2	-1	0	-1	if ( ! bn _ rshift ( a  a  shift ) ) {	bn _ rshift shift	EMPTY
315	337	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	338	2	-1	0	-1	}	EMPTY	EMPTY
315	339	3	-1	0	-1	}	EMPTY	EMPTY
315	351	1	1	1	-1	if ( bn _ ucmp ( b  a ) >= numconst ) {	bn _ ucmp	EMPTY
315	353	2	-1	1	-1	if ( ! bn _ uadd ( x , x , y ) ) {	bn _ uadd	EMPTY
315	354	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	355	2	-1	0	-1	}	EMPTY	EMPTY
315	358	2	-1	1	-1	if ( ! bn _ usub ( b , b , a ) ) {	bn _ usub	EMPTY
315	359	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	360	2	-1	0	-1	}	EMPTY	EMPTY
315	361	2	-1	0	-1	}	EMPTY	EMPTY
315	363	2	-1	1	-1	if ( ! bn _ uadd ( y , y , x ) ) {	bn _ uadd	EMPTY
315	364	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	365	2	-1	0	-1	}	EMPTY	EMPTY
315	367	2	-1	1	-1	if ( ! bn _ usub ( a , a , b ) ) {	bn _ usub	EMPTY
315	368	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	369	2	-1	0	-1	}	EMPTY	EMPTY
315	370	2	-1	0	-1	}	EMPTY	EMPTY
315	371	2	-1	0	-1	}	EMPTY	EMPTY
315	372	3	-1	0	-1	}	EMPTY	EMPTY
315	375	1	1	1	1	while ( ! bn _ is _ zero ( b ) ) {	bn _ is _ zero	EMPTY
315	376	3	-1	0	-1	bignum * tmp ;	EMPTY	EMPTY
315	384	1	1	1	1	if ( bn _ num _ bits ( a ) == bn _ num _ bits ( b ) ) {	bn _ num _ bits bn _ num _ bits	EMPTY
315	385	2	-1	0	-1	if ( ! bn _ one ( d ) ) {	bn _ one	EMPTY
315	386	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	387	2	-1	0	-1	}	EMPTY	EMPTY
315	388	2	-1	0	-1	if ( ! bn _ sub ( m , a , b ) ) {	bn _ sub	EMPTY
315	389	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	390	2	-1	0	-1	}	EMPTY	EMPTY
315	391	2	-1	0	-1	if ( bn _ num _ bits ( a ) == bn _ num _ bits ( b ) + numconst ) {	bn _ num _ bits bn _ num _ bits	EMPTY
315	393	2	-1	1	-1	if ( ! bn _ lshift1 ( t , b ) ) {	bn _ lshift1	EMPTY
315	394	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	395	2	-1	0	-1	}	EMPTY	EMPTY
315	396	2	-1	0	-1	if ( bn _ ucmp ( a  t ) < numconst ) {	bn _ ucmp	EMPTY
315	398	2	-1	1	-1	if ( ! bn _ one ( d ) ) {	bn _ one	EMPTY
315	399	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	400	2	-1	0	-1	}	EMPTY	EMPTY
315	401	2	-1	0	-1	if ( ! bn _ sub ( m , a , b ) ) {	bn _ sub	EMPTY
315	402	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	403	2	-1	0	-1	}	EMPTY	EMPTY
315	404	2	-1	0	-1	}	EMPTY	EMPTY
315	406	2	-1	1	-1	if ( ! bn _ sub ( m , a , t ) ) {	bn _ sub	EMPTY
315	407	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	408	2	-1	0	-1	}	EMPTY	EMPTY
315	409	2	-1	0	-1	if ( ! bn _ add ( d  t  b ) ) {	bn _ add	EMPTY
315	410	2	-1	1	-1	goto err	EMPTY	EMPTY
315	411	2	-1	0	-1	}	EMPTY	EMPTY
315	412	2	-1	0	-1	if ( bn _ ucmp ( a  d ) < numconst ) {	bn _ ucmp	EMPTY
315	414	2	-1	1	-1	if ( ! bn _ set _ word ( d , 2 ) ) {	bn _ set _ word	EMPTY
315	415	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	416	2	-1	0	-1	}	EMPTY	EMPTY
315	418	3	-1	1	-1	}	EMPTY	EMPTY
315	420	1	1	1	-1	if ( ! bn _ set _ word ( d , 3 ) ) {	bn _ set _ word	EMPTY
315	421	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	422	2	-1	0	-1	}	EMPTY	EMPTY
315	424	2	-1	1	-1	if ( ! bn _ sub ( m , m , b ) ) {	bn _ sub	EMPTY
315	425	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	426	2	-1	0	-1	}	EMPTY	EMPTY
315	427	2	-1	0	-1	}	EMPTY	EMPTY
315	428	2	-1	0	-1	}	EMPTY	EMPTY
315	429	2	-1	0	-1	}	EMPTY	EMPTY
315	430	2	-1	0	-1	if ( ! bn _ div ( d  m  a  b  ctx ) ) {	bn _ div ctx	EMPTY
315	431	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	432	2	-1	0	-1	}	EMPTY	EMPTY
315	433	3	-1	0	-1	}	EMPTY	EMPTY
315	440	1	1	1	-1	tmp = a	EMPTY	EMPTY
315	443	1	1	1	-1	a = b	EMPTY	EMPTY
315	444	3	-1	0	-1	b = m	EMPTY	EMPTY
315	466	1	1	1	1	if ( bn _ is _ one ( d ) ) {	bn _ is _ one	EMPTY
315	467	2	-1	0	-1	if ( ! bn _ add ( tmp , x , y ) ) {	bn _ add	EMPTY
315	468	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	469	2	-1	0	-1	}	EMPTY	EMPTY
315	470	2	-1	0	-1	} else {	EMPTY	EMPTY
315	471	2	-1	0	-1	if ( bn _ is _ word ( d , 2 ) ) {	bn _ is _ word	EMPTY
315	472	2	-1	0	-1	if ( ! bn _ lshift1 ( tmp , x ) ) {	bn _ lshift1	EMPTY
315	473	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	474	2	-1	0	-1	}	EMPTY	EMPTY
315	475	2	-1	0	-1	} else if ( bn _ is _ word ( d , 4 ) ) {	bn _ is _ word	EMPTY
315	476	2	-1	0	-1	if ( ! bn _ lshift ( tmp , x , 2 ) ) {	bn _ lshift	EMPTY
315	477	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	478	2	-1	0	-1	}	EMPTY	EMPTY
315	479	2	-1	0	-1	} else if ( d -> top == 1 ) {	top	EMPTY
315	480	2	-1	0	-1	if ( ! bn _ copy ( tmp , x ) ) {	bn _ copy	EMPTY
315	481	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	482	2	-1	0	-1	}	EMPTY	EMPTY
315	483	2	-1	0	-1	if ( ! bn _ mul _ word ( tmp , d -> d [ 0 ] ) ) {	bn _ mul _ word	EMPTY
315	484	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	485	2	-1	0	-1	}	EMPTY	EMPTY
315	486	2	-1	0	-1	} else {	EMPTY	EMPTY
315	487	2	-1	0	-1	if ( ! bn _ mul ( tmp , d , x , ctx ) ) {	bn _ mul ctx	EMPTY
315	488	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	489	2	-1	0	-1	}	EMPTY	EMPTY
315	490	2	-1	0	-1	}	EMPTY	EMPTY
315	491	2	-1	0	-1	if ( ! bn _ add ( tmp , tmp , y ) ) {	bn _ add	EMPTY
315	492	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	493	2	-1	0	-1	}	EMPTY	EMPTY
315	494	3	-1	0	-1	}	EMPTY	EMPTY
315	496	1	1	1	-1	m = y	EMPTY	EMPTY
315	497	2	-1	0	-1	y = x	EMPTY	EMPTY
315	498	2	-1	0	-1	x = tmp	EMPTY	EMPTY
315	499	2	-1	0	-1	sign = - sign	sign sign	EMPTY
315	500	2	-1	0	-1	}	EMPTY	EMPTY
315	501	3	-1	0	-1	}	EMPTY	EMPTY
315	509	1	1	1	1	if ( sign < 0 ) {	sign	EMPTY
315	510	2	-1	0	-1	if ( ! bn _ sub ( y , n , y ) ) {	bn _ sub n	EMPTY
315	511	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	512	2	-1	0	-1	}	EMPTY	EMPTY
315	513	3	-1	0	-1	}	EMPTY	EMPTY
315	516	1	1	1	1	if ( bn _ is _ one ( a ) ) {	bn _ is _ one	EMPTY
315	518	2	-1	1	-1	if ( ! y -> neg && bn _ ucmp ( y , n ) < 0 ) {	neg bn _ ucmp n	EMPTY
315	519	2	-1	0	-1	if ( ! bn _ copy ( r , y ) ) {	bn _ copy	EMPTY
315	520	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	521	2	-1	0	-1	}	EMPTY	EMPTY
315	522	2	-1	0	-1	} else {	EMPTY	EMPTY
315	523	2	-1	0	-1	if ( ! bn _ nnmod ( r , y , n , ctx ) ) {	bn _ nnmod n ctx	EMPTY
315	524	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	525	2	-1	0	-1	}	EMPTY	EMPTY
315	526	2	-1	0	-1	}	EMPTY	EMPTY
315	527	3	-1	0	-1	}	EMPTY	EMPTY
315	529	1	0	0	0	openssl _ put _ error ( bn  bn _ r _ no _ inverse ) ;	EMPTY	EMPTY
315	530	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	531	2	-1	0	-1	}	EMPTY	EMPTY
315	532	3	-1	0	-1	ret = r ;	ret	EMPTY
315	534	1	0	0	-1	err :	EMPTY	EMPTY
315	535	2	-1	0	-1	if ( ret == null && out == null ) {	ret out	EMPTY
315	536	2	-1	0	-1	bn _ free ( r ) ;	bn _ free	EMPTY
315	537	2	-1	0	-1	}	EMPTY	EMPTY
315	538	2	-1	0	-1	bn _ ctx _ end ( ctx ) ;	bn _ ctx _ end ctx	EMPTY
315	539	2	-1	0	-1	return ret ;	ret	EMPTY
315	540	3	-1	0	-1	}	EMPTY	EMPTY
315	542	1	0	0	-1	bignum * bn _ mod _ inverse ( bignum * out  const bignum * a  const bignum * n	bn _ mod _ inverse out a n	EMPTY
315	543	2	-1	0	-1	bn _ ctx * ctx ) {	ctx	EMPTY
315	544	2	-1	0	-1	int no _ inverse ;	EMPTY	EMPTY
315	545	2	-1	0	-1	return bn _ mod _ inverse _ ex ( out  & no _ inverse  a  n  ctx ) ;	bn _ mod _ inverse _ ex out a n ctx	EMPTY
315	546	3	-1	0	-1	}	EMPTY	EMPTY
315	550	1	0	0	-1	static bignum * bn _ mod _ inverse _ no _ branch ( bignum * out  int * out _ no _ inverse	bn _ mod _ inverse _ no _ branch out out _ no _ inverse	EMPTY
315	551	2	-1	0	-1	const bignum * a  const bignum * n	a n	EMPTY
315	552	2	-1	0	-1	bn _ ctx * ctx ) {	ctx	EMPTY
315	553	2	-1	0	-1	bignum * a , * b , * x , * y , * m , * d , * t , * r = null ;	EMPTY	EMPTY
315	554	2	-1	0	-1	bignum local _ a , local _ b ;	EMPTY	EMPTY
315	555	2	-1	0	-1	bignum * pa , * pb ;	EMPTY	EMPTY
315	556	2	-1	0	-1	bignum * ret = null ;	ret	EMPTY
315	557	3	-1	0	-1	int sign ;	sign	EMPTY
315	559	1	0	0	-1	* out _ no _ inverse = 0	out _ no _ inverse	EMPTY
315	561	1	0	0	0	bn _ ctx _ start ( ctx )	bn _ ctx _ start ctx	EMPTY
315	562	2	-1	0	-1	a = bn _ ctx _ get ( ctx )	bn _ ctx _ get ctx	EMPTY
315	563	2	-1	0	-1	b = bn _ ctx _ get ( ctx )	bn _ ctx _ get ctx	EMPTY
315	564	2	-1	0	-1	x = bn _ ctx _ get ( ctx )	bn _ ctx _ get ctx	EMPTY
315	565	2	-1	0	-1	d = bn _ ctx _ get ( ctx )	bn _ ctx _ get ctx	EMPTY
315	566	2	-1	0	-1	m = bn _ ctx _ get ( ctx )	bn _ ctx _ get ctx	EMPTY
315	567	2	-1	0	-1	y = bn _ ctx _ get ( ctx )	bn _ ctx _ get ctx	EMPTY
315	568	2	-1	0	-1	t = bn _ ctx _ get ( ctx )	bn _ ctx _ get ctx	EMPTY
315	569	2	-1	0	-1	if ( t == null ) {	EMPTY	EMPTY
315	570	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	571	3	-1	0	-1	}	EMPTY	EMPTY
315	573	1	0	0	0	if ( out == null ) {	out	EMPTY
315	574	2	-1	0	-1	r = bn _ new ( ) ;	bn _ new	EMPTY
315	575	2	-1	0	-1	} else {	EMPTY	EMPTY
315	576	2	-1	0	-1	r = out ;	out	EMPTY
315	577	2	-1	0	-1	}	EMPTY	EMPTY
315	578	2	-1	0	-1	if ( r == null ) {	EMPTY	EMPTY
315	579	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	580	3	-1	0	-1	}	EMPTY	EMPTY
315	582	1	0	0	0	bn _ zero ( y )	bn _ zero	EMPTY
315	583	2	-1	0	-1	if ( ! bn _ one ( x ) || bn _ copy ( b , a ) == null || bn _ copy ( a , n ) == null ) {	bn _ one bn _ copy a bn _ copy n	EMPTY
315	584	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	585	2	-1	0	-1	}	EMPTY	EMPTY
315	586	3	-1	0	-1	a -> neg = 0	neg	EMPTY
315	588	1	1	0	1	if ( b -> neg || ( bn _ ucmp ( b  a ) >= numconst ) ) {	neg bn _ ucmp	EMPTY
315	592	2	-1	1	-1	pb = & local _ b	EMPTY	EMPTY
315	593	2	-1	0	-1	bn _ with _ flags ( pb , b , bn _ flg _ consttime )	bn _ with _ flags	EMPTY
315	594	2	-1	0	-1	if ( ! bn _ nnmod ( b , pb , a , ctx ) ) {	bn _ nnmod ctx	EMPTY
315	595	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	596	2	-1	0	-1	}	EMPTY	EMPTY
315	597	2	-1	0	-1	}	EMPTY	EMPTY
315	598	3	-1	0	-1	sign = - numconst ;	sign	EMPTY
315	606	1	1	1	1	while ( ! bn _ is _ zero ( b ) ) {	bn _ is _ zero	EMPTY
315	607	3	-1	0	-1	bignum * tmp ;	EMPTY	EMPTY
315	618	1	1	1	-1	pa = & local _ a	EMPTY	EMPTY
315	619	3	-1	0	-1	bn _ with _ flags ( pa , a , bn _ flg _ consttime )	bn _ with _ flags	EMPTY
315	622	1	1	1	1	if ( ! bn _ div ( d , m , pa , b , ctx ) ) {	bn _ div ctx	EMPTY
315	623	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	624	3	-1	0	-1	}	EMPTY	EMPTY
315	632	1	1	1	-1	tmp = a	EMPTY	EMPTY
315	635	1	1	1	-1	a = b	EMPTY	EMPTY
315	636	3	-1	0	-1	b = m	EMPTY	EMPTY
315	658	1	1	1	1	if ( ! bn _ mul ( tmp , d , x , ctx ) ) {	bn _ mul ctx	EMPTY
315	659	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	660	2	-1	0	-1	}	EMPTY	EMPTY
315	661	2	-1	0	-1	if ( ! bn _ add ( tmp , tmp , y ) ) {	bn _ add	EMPTY
315	662	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	663	3	-1	0	-1	}	EMPTY	EMPTY
315	665	1	1	1	-1	m = y	EMPTY	EMPTY
315	666	2	-1	0	-1	y = x	EMPTY	EMPTY
315	667	2	-1	0	-1	x = tmp	EMPTY	EMPTY
315	668	2	-1	0	-1	sign = - sign	sign sign	EMPTY
315	669	3	-1	0	-1	}	EMPTY	EMPTY
315	679	1	1	1	1	if ( sign < 0 ) {	sign	EMPTY
315	680	2	-1	0	-1	if ( ! bn _ sub ( y , n , y ) ) {	bn _ sub n	EMPTY
315	681	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	682	2	-1	0	-1	}	EMPTY	EMPTY
315	683	3	-1	0	-1	}	EMPTY	EMPTY
315	686	1	1	1	1	if ( bn _ is _ one ( a ) ) {	bn _ is _ one	EMPTY
315	688	2	-1	1	-1	if ( ! y -> neg && bn _ ucmp ( y , n ) < 0 ) {	neg bn _ ucmp n	EMPTY
315	689	2	-1	0	-1	if ( ! bn _ copy ( r , y ) ) {	bn _ copy	EMPTY
315	690	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	691	2	-1	0	-1	}	EMPTY	EMPTY
315	692	2	-1	0	-1	} else {	EMPTY	EMPTY
315	693	2	-1	0	-1	if ( ! bn _ nnmod ( r , y , n , ctx ) ) {	bn _ nnmod n ctx	EMPTY
315	694	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	695	2	-1	0	-1	}	EMPTY	EMPTY
315	696	2	-1	0	-1	}	EMPTY	EMPTY
315	697	3	-1	0	-1	}	EMPTY	EMPTY
315	699	1	0	0	0	openssl _ put _ error ( bn  bn _ r _ no _ inverse ) ;	EMPTY	EMPTY
315	700	2	-1	0	-1	goto err ;	EMPTY	EMPTY
315	701	2	-1	0	-1	}	EMPTY	EMPTY
315	702	3	-1	0	-1	ret = r ;	ret	EMPTY
315	704	1	0	0	-1	err :	EMPTY	EMPTY
315	705	2	-1	0	-1	if ( ret == null && out == null ) {	ret out	EMPTY
315	706	2	-1	0	-1	bn _ free ( r ) ;	bn _ free	EMPTY
315	707	3	-1	0	-1	}	EMPTY	EMPTY
315	709	1	0	0	0	bn _ ctx _ end ( ctx ) ;	bn _ ctx _ end ctx	EMPTY
315	710	2	-1	0	-1	return ret ;	ret	EMPTY
315	711	3	-1	0	-1	}	EMPTY	EMPTY
324	64	1	0	0	-1	asn1 _ sequence ( x509 _ val ) = {	EMPTY	EMPTY
324	65	2	-1	0	-1	asn1 _ simple ( x509 _ val  notbefore  asn1 _ time )	EMPTY	EMPTY
324	66	2	-1	0	-1	asn1 _ simple ( x509 _ val  notafter  asn1 _ time )	EMPTY	EMPTY
324	67	3	-1	0	-1	} asn1 _ sequence _ end ( x509 _ val )	EMPTY	EMPTY
324	69	1	0	0	-1	implement _ asn1 _ functions ( x509 _ val )	EMPTY	EMPTY
384	66	1	0	0	-1	static int asn1 _ print _ info ( bio * bp  int tag  int xclass  int constructed	bp tag xclass	EMPTY
384	67	2	-1	0	-1	int indent )	indent	EMPTY
384	68	2	-1	0	-1	static int asn1 _ parse2 ( bio * bp  const unsigned char * * pp  long length	bp pp length	EMPTY
384	69	2	-1	0	-1	int offset  int depth  int indent  int dump )	indent	EMPTY
384	70	2	-1	0	-1	static int asn1 _ print _ info ( bio * bp  int tag  int xclass  int constructed	bp tag xclass	EMPTY
384	71	2	-1	0	-1	int indent )	indent	EMPTY
384	72	2	-1	0	-1	{	EMPTY	EMPTY
384	73	2	-1	0	-1	static const char fmt [ ] =  " %-18s "  ;	EMPTY	EMPTY
384	74	2	-1	0	-1	char str [ 128 ] ;	str	EMPTY
384	75	3	-1	0	-1	const char * p ;	p	EMPTY
384	77	1	0	0	0	if ( constructed & v _ asn1 _ constructed )	EMPTY	EMPTY
384	78	2	-1	0	-1	p =  " cons:  "  ;	p	EMPTY
384	79	2	-1	0	-1	else	EMPTY	EMPTY
384	80	2	-1	0	-1	p =  " prim:  "	p	EMPTY
384	81	2	-1	0	-1	if ( bio _ write ( bp , p , 6 ) < 6 ) goto err	bio _ write bp p	EMPTY
384	82	3	-1	0	-1	bio _ indent ( bp , indent , 128 )	bio _ indent bp indent	EMPTY
384	84	1	0	0	-1	p = str	p str	EMPTY
384	85	2	-1	0	-1	if ( ( xclass & v _ asn1 _ private ) == v _ asn1 _ private )	xclass	EMPTY
384	86	2	-1	0	-1	bio _ snprintf ( str , sizeof str ,  " priv [ %d ]  "  , tag ) ;	str str tag	EMPTY
384	87	2	-1	0	-1	else if ( ( xclass & v _ asn1 _ context _ specific ) == v _ asn1 _ context _ specific )	xclass	EMPTY
384	88	2	-1	0	-1	bio _ snprintf ( str , sizeof str ,  " cont [ %d ] "  , tag ) ;	str str tag	EMPTY
384	89	2	-1	0	-1	else if ( ( xclass & v _ asn1 _ application ) == v _ asn1 _ application )	xclass	EMPTY
384	90	2	-1	0	-1	bio _ snprintf ( str , sizeof str ,  " appl [ %d ] "  , tag ) ;	str str tag	EMPTY
384	91	2	-1	0	-1	else if ( tag > 30 )	tag	EMPTY
384	92	2	-1	0	-1	bio _ snprintf ( str , sizeof str ,  " <asn1 %d> "  , tag ) ;	str str tag	EMPTY
384	93	2	-1	0	-1	else	EMPTY	EMPTY
384	94	3	-1	0	-1	p = asn1 _ tag2str ( tag )	p tag	EMPTY
384	96	1	0	0	0	if ( bio _ printf ( bp , fmt , p ) <= 0 )	bp p	EMPTY
384	97	2	-1	0	-1	goto err	EMPTY	EMPTY
384	98	2	-1	0	-1	return ( 1 )	EMPTY	EMPTY
384	99	2	-1	0	-1	err :	EMPTY	EMPTY
384	100	2	-1	0	-1	return ( 0 )	EMPTY	EMPTY
384	101	3	-1	0	-1	}	EMPTY	EMPTY
384	103	1	0	0	-1	int asn1 _ parse ( bio * bp  const unsigned char * pp  long len  int indent )	bp pp len indent	EMPTY
384	104	2	-1	0	-1	{	EMPTY	EMPTY
384	105	2	-1	0	-1	return ( asn1 _ parse2 ( bp , & pp , len , 0 , 0 , indent , 0 ) )	bp pp len indent	EMPTY
384	106	3	-1	0	-1	}	EMPTY	EMPTY
384	108	1	0	0	-1	int asn1 _ parse _ dump ( bio * bp  const unsigned char * pp  long len  int indent  int dump )	bp pp len indent	EMPTY
384	109	2	-1	0	-1	{	EMPTY	EMPTY
384	110	2	-1	0	-1	return ( asn1 _ parse2 ( bp , & pp , len , 0 , 0 , indent , dump ) )	bp pp len indent	EMPTY
384	111	3	-1	0	-1	}	EMPTY	EMPTY
384	113	1	0	0	-1	static int asn1 _ parse2 ( bio * bp  const unsigned char * * pp  long length  int offset	bp pp length	EMPTY
384	114	2	-1	0	-1	int depth  int indent  int dump )	indent	EMPTY
384	115	2	-1	0	-1	{	EMPTY	EMPTY
384	116	2	-1	0	-1	const unsigned char * p , * ep , * tot , * op , * opp ;	p	EMPTY
384	117	2	-1	0	-1	long len ;	len	EMPTY
384	118	2	-1	0	-1	int tag , xclass , ret = 0 ;	tag xclass ret	EMPTY
384	119	2	-1	0	-1	int nl , hl , j , r ;	r	EMPTY
384	120	2	-1	0	-1	asn1 _ object * o = null ;	EMPTY	EMPTY
384	121	3	-1	0	-1	asn1 _ octet _ string * os = null ;	EMPTY	EMPTY
384	123	1	0	0	-1	int dump _ indent ;	dump _ indent	EMPTY
384	125	1	1	0	-1	# if numconst	EMPTY	EMPTY
384	126	2	-1	0	-1	dump _ indent = indent ;	dump _ indent indent	EMPTY
384	127	2	-1	0	-1	# else	EMPTY	EMPTY
384	128	2	-1	1	-1	dump _ indent = 6	dump _ indent	EMPTY
384	129	3	-1	0	-1	# endif	EMPTY	EMPTY
384	131	1	0	0	0	if ( depth > asn1 _ parse _ maxdepth )	EMPTY	EMPTY
384	132	2	-1	0	-1	{	EMPTY	EMPTY
384	133	2	-1	0	-1	bio _ puts ( bp ,  " bad recursion depth\n "  ) ;	bio _ puts bp	EMPTY
384	134	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
384	135	3	-1	0	-1	}	EMPTY	EMPTY
384	137	1	1	0	-1	p = * pp	p pp	EMPTY
384	138	2	-1	0	-1	tot = p + length	p length	EMPTY
384	139	2	-1	0	-1	op = p - 1	p	EMPTY
384	140	2	-1	0	-1	while ( ( p < tot ) && ( op < p ) )	p p	EMPTY
384	141	2	-1	0	-1	{	EMPTY	EMPTY
384	142	2	-1	0	-1	op = p	p	EMPTY
384	143	2	-1	0	-1	j = asn1 _ get _ object ( & p , & len , & tag , & xclass , length )	asn1 _ get _ object p len tag xclass length	EMPTY
384	144	2	-1	0	-1	# ifdef lint	EMPTY	EMPTY
384	145	2	-1	0	-1	j = j ;	EMPTY	EMPTY
384	146	2	-1	0	-1	# endif	EMPTY	EMPTY
384	147	2	-1	0	-1	if ( j & 0x80 )	EMPTY	EMPTY
384	148	2	-1	0	-1	{	EMPTY	EMPTY
384	149	2	-1	0	-1	if ( bio _ puts ( bp ,  " error in encoding\n "  ) <= 0 )	bio _ puts bp in	EMPTY
384	150	2	-1	0	-1	goto end ;	EMPTY	EMPTY
384	151	2	-1	0	-1	ret = 0 ;	ret	EMPTY
384	152	2	-1	0	-1	goto end ;	EMPTY	EMPTY
384	153	2	-1	0	-1	}	EMPTY	EMPTY
384	154	2	-1	0	-1	hl = ( p - op )	p	EMPTY
384	155	2	-1	0	-1	length -= hl	length	EMPTY
384	157	2	-1	1	-1	if ( bio _ printf ( bp ,  " %5ld: "  , ( long ) offset + ( long ) ( op - * pp ) )	bp pp	EMPTY
384	158	3	-1	0	-1	<= 0 ) goto end	EMPTY	EMPTY
384	160	1	0	0	0	if ( j != ( v _ asn1 _ constructed | 1 ) )	EMPTY	EMPTY
384	161	2	-1	0	-1	{	EMPTY	EMPTY
384	162	2	-1	0	-1	if ( bio _ printf ( bp ,  " d=%-2d hl=%ld l=%4ld  "  ,	bp	EMPTY
384	163	2	-1	0	-1	depth , ( long ) hl , len ) <= 0 )	len	EMPTY
384	164	2	-1	0	-1	goto end ;	EMPTY	EMPTY
384	165	2	-1	0	-1	}	EMPTY	EMPTY
384	166	2	-1	0	-1	else	EMPTY	EMPTY
384	167	2	-1	0	-1	{	EMPTY	EMPTY
384	168	2	-1	0	-1	if ( bio _ printf ( bp ,  " d=%-2d hl=%ld l=inf   "  ,	bp	EMPTY
384	169	2	-1	0	-1	depth , ( long ) hl ) <= 0 )	EMPTY	EMPTY
384	170	2	-1	0	-1	goto end ;	EMPTY	EMPTY
384	171	2	-1	0	-1	}	EMPTY	EMPTY
384	172	2	-1	0	-1	if ( ! asn1 _ print _ info ( bp , tag , xclass , j , ( indent ) ? depth : 0 ) )	bp tag xclass indent	EMPTY
384	173	2	-1	0	-1	goto end	EMPTY	EMPTY
384	174	2	-1	0	-1	if ( j & v _ asn1 _ constructed )	EMPTY	EMPTY
384	175	2	-1	0	-1	{	EMPTY	EMPTY
384	176	2	-1	0	-1	ep = p + len	p len	EMPTY
384	177	2	-1	0	-1	if ( bio _ puts ( bp ,  " \n "  ) <= 0 ) goto end	bio _ puts bp	EMPTY
384	178	2	-1	0	-1	if ( len > length )	len length	EMPTY
384	179	2	-1	0	-1	{	EMPTY	EMPTY
384	180	2	-1	0	-1	bio _ printf ( bp ,	bp	EMPTY
384	181	2	-1	0	-1	" length is greater than %ld\n "  , length ) ;	length	EMPTY
384	182	2	-1	0	-1	ret = 0 ;	ret	EMPTY
384	183	2	-1	0	-1	goto end ;	EMPTY	EMPTY
384	184	2	-1	0	-1	}	EMPTY	EMPTY
384	185	2	-1	0	-1	if ( ( j == 0x21 ) && ( len == 0 ) )	len	EMPTY
384	186	2	-1	0	-1	{	EMPTY	EMPTY
384	187	2	-1	0	-1	for ( ; ; )	EMPTY	EMPTY
384	188	2	-1	0	-1	{	EMPTY	EMPTY
384	189	3	-1	0	-1	r = asn1 _ parse2 ( bp , & p , ( long ) ( tot - p ) ,	r bp p p	EMPTY
384	190	1	0	0	-1	offset + ( p - * pp ) , depth + 1 ,	p pp	EMPTY
384	191	2	-1	0	-1	indent , dump ) ;	indent	EMPTY
384	192	2	-1	0	-1	if ( r == 0 ) { ret = 0 ; goto end ; }	r ret	EMPTY
384	193	2	-1	0	-1	if ( ( r == 2 ) || ( p >= tot ) ) break ;	r p	EMPTY
384	194	2	-1	0	-1	}	EMPTY	EMPTY
384	195	2	-1	0	-1	}	EMPTY	EMPTY
384	196	2	-1	0	-1	else	EMPTY	EMPTY
384	197	2	-1	0	-1	while ( p < ep )	p	EMPTY
384	198	2	-1	0	-1	{	EMPTY	EMPTY
384	199	2	-1	0	-1	r = asn1 _ parse2 ( bp , & p , ( long ) len ,	r bp p len	EMPTY
384	200	2	-1	0	-1	offset + ( p - * pp ) , depth + 1 ,	p pp	EMPTY
384	201	2	-1	0	-1	indent , dump ) ;	indent	EMPTY
384	202	2	-1	0	-1	if ( r == 0 ) { ret = 0 ; goto end ; }	r ret	EMPTY
384	203	2	-1	0	-1	}	EMPTY	EMPTY
384	204	2	-1	0	-1	}	EMPTY	EMPTY
384	205	2	-1	0	-1	if ( xclass != numconst )	xclass	EMPTY
384	206	2	-1	0	-1	{	EMPTY	EMPTY
384	207	2	-1	0	-1	p += len	p len	EMPTY
384	208	2	-1	0	-1	if ( bio _ puts ( bp ,  " \n "  ) <= 0 ) goto end	bio _ puts bp	EMPTY
384	209	2	-1	0	-1	}	EMPTY	EMPTY
384	210	2	-1	0	-1	else	EMPTY	EMPTY
384	211	2	-1	0	-1	{	EMPTY	EMPTY
384	212	2	-1	0	-1	nl = 0	EMPTY	EMPTY
384	213	2	-1	0	-1	if ( ( tag == v _ asn1 _ printablestring ) ||	tag	EMPTY
384	214	2	-1	0	-1	( tag == v _ asn1 _ t61string ) ||	tag	EMPTY
384	215	2	-1	0	-1	( tag == v _ asn1 _ ia5string ) ||	tag	EMPTY
384	216	2	-1	0	-1	( tag == v _ asn1 _ visiblestring ) ||	tag	EMPTY
384	217	2	-1	0	-1	( tag == v _ asn1 _ numericstring ) ||	tag	EMPTY
384	218	2	-1	0	-1	( tag == v _ asn1 _ utf8string ) ||	tag	EMPTY
384	219	3	-1	0	-1	( tag == v _ asn1 _ utctime ) ||	tag	EMPTY
384	220	1	0	0	-1	( tag == v _ asn1 _ generalizedtime ) )	tag	EMPTY
384	221	2	-1	0	-1	{	EMPTY	EMPTY
384	222	2	-1	0	-1	if ( bio _ puts ( bp ,  " : "  ) <= 0 ) goto end	bio _ puts bp	EMPTY
384	223	2	-1	0	-1	if ( ( len > 0 ) &&	len	EMPTY
384	224	2	-1	0	-1	bio _ write ( bp , ( const char * ) p , ( int ) len )	bio _ write bp p len	EMPTY
384	225	2	-1	0	-1	!= ( int ) len )	len	EMPTY
384	226	2	-1	0	-1	goto end	EMPTY	EMPTY
384	227	2	-1	0	-1	}	EMPTY	EMPTY
384	228	2	-1	0	-1	if ( tag == v _ asn1 _ object )	tag	EMPTY
384	229	2	-1	0	-1	{	EMPTY	EMPTY
384	230	2	-1	0	-1	opp = op	EMPTY	EMPTY
384	231	2	-1	0	-1	if ( d2i _ asn1 _ object ( & o , & opp , len + hl ) != null )	len	EMPTY
384	232	2	-1	0	-1	{	EMPTY	EMPTY
384	233	2	-1	0	-1	if ( bio _ puts ( bp ,  " : "  ) <= 0 ) goto end ;	bio _ puts bp	EMPTY
384	234	2	-1	0	-1	i2a _ asn1 _ object ( bp , o ) ;	bp	EMPTY
384	235	2	-1	0	-1	}	EMPTY	EMPTY
384	236	2	-1	0	-1	else	EMPTY	EMPTY
384	237	2	-1	0	-1	{	EMPTY	EMPTY
384	238	2	-1	0	-1	if ( bio _ puts ( bp ,  " :bad object "  ) <= 0 )	bio _ puts bp	EMPTY
384	239	2	-1	0	-1	goto end ;	EMPTY	EMPTY
384	240	2	-1	0	-1	}	EMPTY	EMPTY
384	241	2	-1	0	-1	}	EMPTY	EMPTY
384	242	2	-1	0	-1	if ( tag == v _ asn1 _ boolean )	tag	EMPTY
384	243	2	-1	0	-1	{	EMPTY	EMPTY
384	244	3	-1	0	-1	int ii ;	EMPTY	EMPTY
384	246	1	1	0	-1	opp = op	EMPTY	EMPTY
384	247	2	-1	0	-1	ii = d2i _ asn1 _ boolean ( null , & opp , len + hl )	len	EMPTY
384	248	2	-1	0	-1	if ( ii < 0 )	EMPTY	EMPTY
384	249	2	-1	0	-1	{	EMPTY	EMPTY
384	250	2	-1	0	-1	if ( bio _ puts ( bp ,  " bad boolean\n "  ) <= 0 )	bio _ puts bp	EMPTY
384	251	2	-1	0	-1	goto end ;	EMPTY	EMPTY
384	252	2	-1	0	-1	}	EMPTY	EMPTY
384	253	2	-1	0	-1	bio _ printf ( bp ,  " :%d "  , ii )	bp	EMPTY
384	254	2	-1	0	-1	}	EMPTY	EMPTY
384	255	2	-1	0	-1	if ( tag == v _ asn1 _ bmpstring )	tag	EMPTY
384	256	2	-1	0	-1	{	EMPTY	EMPTY
384	258	2	-1	1	-1	}	EMPTY	EMPTY
384	259	2	-1	0	-1	if ( tag == v _ asn1 _ octet _ string )	tag	EMPTY
384	260	2	-1	0	-1	{	EMPTY	EMPTY
384	261	3	-1	0	-1	int i  printable = numconst ;	i	EMPTY
384	263	1	1	0	-1	opp = op ;	EMPTY	EMPTY
384	264	2	-1	0	-1	os = d2i _ asn1 _ octet _ string ( null  & opp  len + hl ) ;	len	EMPTY
384	265	2	-1	0	-1	if ( os != null && os -> length > numconst )	length	EMPTY
384	266	2	-1	0	-1	{	EMPTY	EMPTY
384	267	2	-1	0	-1	opp = os -> data ;	data	EMPTY
384	270	2	-1	1	-1	for ( i = 0 ; i < os -> length ; i ++ )	i i length i	EMPTY
384	271	2	-1	0	-1	{	EMPTY	EMPTY
384	272	2	-1	0	-1	if ( ( ( opp [ i ] < ' ' ) &&	i	EMPTY
384	273	2	-1	0	-1	( opp [ i ] != '\n' ) &&	i	EMPTY
384	274	2	-1	0	-1	( opp [ i ] != '\r' ) &&	i	EMPTY
384	275	2	-1	0	-1	( opp [ i ] != '\t' ) ) ||	i	EMPTY
384	276	2	-1	0	-1	( opp [ i ] > '~' ) )	i	EMPTY
384	277	2	-1	0	-1	{	EMPTY	EMPTY
384	278	2	-1	0	-1	printable = 0 ;	EMPTY	EMPTY
384	279	2	-1	0	-1	break ;	EMPTY	EMPTY
384	280	2	-1	0	-1	}	EMPTY	EMPTY
384	281	2	-1	0	-1	}	EMPTY	EMPTY
384	282	2	-1	0	-1	if ( printable )	EMPTY	EMPTY
384	284	2	-1	1	-1	{	EMPTY	EMPTY
384	285	2	-1	0	-1	if ( bio _ puts ( bp ,  " : "  ) <= 0 )	bio _ puts bp	EMPTY
384	286	2	-1	0	-1	goto end	EMPTY	EMPTY
384	287	2	-1	0	-1	if ( bio _ write ( bp , ( const char * ) opp ,	bio _ write bp	EMPTY
384	288	2	-1	0	-1	os -> length ) <= 0 )	length	EMPTY
384	289	2	-1	0	-1	goto end	EMPTY	EMPTY
384	290	2	-1	0	-1	}	EMPTY	EMPTY
384	291	2	-1	0	-1	if ( ! dump )	EMPTY	EMPTY
384	294	2	-1	1	-1	{	EMPTY	EMPTY
384	295	2	-1	0	-1	if ( bio _ puts ( bp ,  " [hex dump]: "  ) <= 0 )	bio _ puts bp	EMPTY
384	296	2	-1	0	-1	goto end	EMPTY	EMPTY
384	297	3	-1	0	-1	for ( i = 0 ; i < os -> length ; i ++ )	i i length i	EMPTY
384	298	1	1	0	-1	{	EMPTY	EMPTY
384	299	2	-1	0	-1	if ( bio _ printf ( bp ,  " %02x "	bp	EMPTY
384	300	2	-1	0	-1	, opp [ i ] ) <= 0 )	i	EMPTY
384	301	2	-1	0	-1	goto end ;	EMPTY	EMPTY
384	302	2	-1	0	-1	}	EMPTY	EMPTY
384	303	2	-1	0	-1	}	EMPTY	EMPTY
384	304	2	-1	0	-1	else	EMPTY	EMPTY
384	306	2	-1	1	-1	{	EMPTY	EMPTY
384	307	2	-1	0	-1	if ( ! nl )	EMPTY	EMPTY
384	308	2	-1	0	-1	{	EMPTY	EMPTY
384	309	2	-1	0	-1	if ( bio _ puts ( bp ,  " \n "  ) <= 0 )	bio _ puts bp	EMPTY
384	310	2	-1	0	-1	goto end ;	EMPTY	EMPTY
384	311	2	-1	0	-1	}	EMPTY	EMPTY
384	312	2	-1	0	-1	if ( ! bio _ hexdump ( bp , opp ,	bio _ hexdump bp	EMPTY
384	313	2	-1	0	-1	( ( dump == - 1 || dump >	EMPTY	EMPTY
384	314	2	-1	0	-1	os -> length ) ? os -> length : dump ) ,	length length	EMPTY
384	315	2	-1	0	-1	dump _ indent ) )	dump _ indent	EMPTY
384	316	2	-1	0	-1	goto end	EMPTY	EMPTY
384	317	2	-1	0	-1	nl = 1	EMPTY	EMPTY
384	318	2	-1	0	-1	}	EMPTY	EMPTY
384	319	2	-1	0	-1	}	EMPTY	EMPTY
384	320	2	-1	0	-1	if ( os != null )	EMPTY	EMPTY
384	321	2	-1	0	-1	{	EMPTY	EMPTY
384	322	2	-1	0	-1	m _ asn1 _ octet _ string _ free ( os ) ;	EMPTY	EMPTY
384	323	2	-1	0	-1	os = null ;	EMPTY	EMPTY
384	324	2	-1	0	-1	}	EMPTY	EMPTY
384	325	2	-1	0	-1	}	EMPTY	EMPTY
384	326	2	-1	0	-1	if ( tag == v _ asn1 _ integer )	tag	EMPTY
384	327	2	-1	0	-1	{	EMPTY	EMPTY
384	328	3	-1	0	-1	asn1 _ integer * bs ;	EMPTY	EMPTY
384	329	1	0	0	-1	int i ;	i	EMPTY
384	331	1	0	0	-1	opp = op ;	EMPTY	EMPTY
384	332	2	-1	0	-1	bs = d2i _ asn1 _ integer ( null  & opp  len + hl ) ;	len	EMPTY
384	333	2	-1	0	-1	if ( bs != null )	EMPTY	EMPTY
384	334	2	-1	0	-1	{	EMPTY	EMPTY
384	335	2	-1	0	-1	if ( bio _ puts ( bp  strlit ) <= numconst ) goto end ;	bio _ puts bp	EMPTY
384	336	2	-1	0	-1	if ( bs -> type == v _ asn1 _ neg _ integer )	type	EMPTY
384	337	2	-1	0	-1	if ( bio _ puts ( bp  strlit ) <= numconst )	bio _ puts bp	EMPTY
384	338	2	-1	0	-1	goto end ;	EMPTY	EMPTY
384	339	2	-1	0	-1	for ( i = numconst ; i < bs -> length ; i ++ )	i i length i	EMPTY
384	340	2	-1	0	-1	{	EMPTY	EMPTY
384	341	2	-1	0	-1	if ( bio _ printf ( bp  strlit	bp	EMPTY
384	342	2	-1	0	-1	bs -> data [ i ] ) <= numconst )	data i	EMPTY
384	343	2	-1	0	-1	goto end ;	EMPTY	EMPTY
384	344	2	-1	0	-1	}	EMPTY	EMPTY
384	345	2	-1	0	-1	if ( bs -> length == numconst )	length	EMPTY
384	346	2	-1	0	-1	{	EMPTY	EMPTY
384	347	2	-1	0	-1	if ( bio _ puts ( bp  strlit ) <= numconst )	bio _ puts bp	EMPTY
384	348	2	-1	0	-1	goto end ;	EMPTY	EMPTY
384	349	2	-1	0	-1	}	EMPTY	EMPTY
384	350	2	-1	0	-1	}	EMPTY	EMPTY
384	351	2	-1	0	-1	else	EMPTY	EMPTY
384	352	2	-1	0	-1	{	EMPTY	EMPTY
384	353	2	-1	0	-1	if ( bio _ puts ( bp  strlit ) <= numconst )	bio _ puts bp	EMPTY
384	354	2	-1	0	-1	goto end ;	EMPTY	EMPTY
384	355	2	-1	0	-1	}	EMPTY	EMPTY
384	356	2	-1	0	-1	m _ asn1 _ integer _ free ( bs ) ;	EMPTY	EMPTY
384	357	2	-1	0	-1	}	EMPTY	EMPTY
384	358	2	-1	0	-1	if ( tag == v _ asn1 _ enumerated )	tag	EMPTY
384	359	2	-1	0	-1	{	EMPTY	EMPTY
384	360	3	-1	0	-1	asn1 _ enumerated * bs ;	EMPTY	EMPTY
384	361	1	0	0	-1	int i ;	i	EMPTY
384	363	1	0	0	-1	opp = op ;	EMPTY	EMPTY
384	364	2	-1	0	-1	bs = d2i _ asn1 _ enumerated ( null  & opp  len + hl ) ;	len	EMPTY
384	365	2	-1	0	-1	if ( bs != null )	EMPTY	EMPTY
384	366	2	-1	0	-1	{	EMPTY	EMPTY
384	367	2	-1	0	-1	if ( bio _ puts ( bp  strlit ) <= numconst ) goto end ;	bio _ puts bp	EMPTY
384	368	2	-1	0	-1	if ( bs -> type == v _ asn1 _ neg _ enumerated )	type	EMPTY
384	369	2	-1	0	-1	if ( bio _ puts ( bp  strlit ) <= numconst )	bio _ puts bp	EMPTY
384	370	2	-1	0	-1	goto end ;	EMPTY	EMPTY
384	371	2	-1	0	-1	for ( i = numconst ; i < bs -> length ; i ++ )	i i length i	EMPTY
384	372	2	-1	0	-1	{	EMPTY	EMPTY
384	373	2	-1	0	-1	if ( bio _ printf ( bp  strlit	bp	EMPTY
384	374	2	-1	0	-1	bs -> data [ i ] ) <= numconst )	data i	EMPTY
384	375	2	-1	0	-1	goto end ;	EMPTY	EMPTY
384	376	2	-1	0	-1	}	EMPTY	EMPTY
384	377	2	-1	0	-1	if ( bs -> length == numconst )	length	EMPTY
384	378	2	-1	0	-1	{	EMPTY	EMPTY
384	379	2	-1	0	-1	if ( bio _ puts ( bp  strlit ) <= numconst )	bio _ puts bp	EMPTY
384	380	2	-1	0	-1	goto end ;	EMPTY	EMPTY
384	381	2	-1	0	-1	}	EMPTY	EMPTY
384	382	2	-1	0	-1	}	EMPTY	EMPTY
384	383	2	-1	0	-1	else	EMPTY	EMPTY
384	384	2	-1	0	-1	{	EMPTY	EMPTY
384	385	2	-1	0	-1	if ( bio _ puts ( bp  strlit ) <= numconst )	bio _ puts bp	EMPTY
384	386	2	-1	0	-1	goto end ;	EMPTY	EMPTY
384	387	2	-1	0	-1	}	EMPTY	EMPTY
384	388	2	-1	0	-1	m _ asn1 _ enumerated _ free ( bs ) ;	EMPTY	EMPTY
384	389	2	-1	0	-1	}	EMPTY	EMPTY
384	390	2	-1	0	-1	if ( len > numconst && dump )	len	EMPTY
384	391	2	-1	0	-1	{	EMPTY	EMPTY
384	392	3	-1	0	-1	if ( ! nl ) {	EMPTY	EMPTY
384	393	1	0	0	-1	{	EMPTY	EMPTY
384	394	2	-1	0	-1	if ( bio _ puts ( bp  strlit ) <= numconst )	bio _ puts bp	EMPTY
384	395	2	-1	0	-1	goto end ;	EMPTY	EMPTY
384	396	2	-1	0	-1	}	EMPTY	EMPTY
384	397	2	-1	0	-1	if ( ! bio _ hexdump ( bp  p	bio _ hexdump bp p	EMPTY
384	398	2	-1	0	-1	( ( dump == - numconst || dump > len ) ? len : dump )	len len	EMPTY
384	399	2	-1	0	-1	dump _ indent ) )	dump _ indent	EMPTY
384	400	2	-1	0	-1	goto end ;	EMPTY	EMPTY
384	401	2	-1	0	-1	nl = numconst ;	EMPTY	EMPTY
384	402	3	-1	0	-1	}	EMPTY	EMPTY
384	404	1	1	0	1	if ( ! nl ) {	EMPTY	EMPTY
384	405	2	-1	0	-1	{	EMPTY	EMPTY
384	406	2	-1	0	-1	if ( bio _ puts ( bp  strlit ) <= numconst ) goto end ;	bio _ puts bp	EMPTY
384	407	2	-1	0	-1	}	EMPTY	EMPTY
384	408	2	-1	0	-1	p += len ;	p len	EMPTY
384	409	2	-1	0	-1	if ( ( tag == v _ asn1 _ eoc ) && ( xclass == numconst ) )	tag xclass	EMPTY
384	410	2	-1	0	-1	{	EMPTY	EMPTY
384	411	2	-1	1	-1	ret = numconst ;	ret	EMPTY
384	412	2	-1	0	-1	goto end	EMPTY	EMPTY
384	413	2	-1	0	-1	}	EMPTY	EMPTY
384	414	2	-1	0	-1	}	EMPTY	EMPTY
384	415	2	-1	0	-1	length -= len ;	length len	EMPTY
384	416	2	-1	0	-1	}	EMPTY	EMPTY
384	417	2	-1	0	-1	ret = numconst ;	ret	EMPTY
384	418	2	-1	0	-1	end :	EMPTY	EMPTY
384	419	2	-1	0	-1	if ( o != null ) asn1 _ object _ free ( o ) ;	EMPTY	EMPTY
384	420	3	-1	0	-1	if ( os != null ) m _ asn1 _ octet _ string _ free ( os ) ;	EMPTY	EMPTY
384	422	1	0	0	0	return ( ret ) ;	ret	EMPTY
384	423	3	-1	0	-1	}	EMPTY	EMPTY
384	425	1	1	0	-1	const char * asn1 _ tag2str ( int tag )	tag	EMPTY
384	426	2	-1	0	-1	{	EMPTY	EMPTY
384	427	2	-1	0	-1	static const char * const tag2str [ ] = {	EMPTY	EMPTY
384	428	2	-1	1	-1	strlit  strlit  strlit  strlit  strlit	EMPTY	EMPTY
384	429	2	-1	1	-1	strlit  strlit  strlit  strlit  strlit	EMPTY	EMPTY
384	430	2	-1	1	-1	strlit  strlit  strlit  strlit	EMPTY	EMPTY
384	431	2	-1	1	-1	strlit  strlit  strlit  strlit	EMPTY	EMPTY
384	432	2	-1	1	-1	strlit  strlit  strlit	EMPTY	EMPTY
384	433	2	-1	1	-1	strlit  strlit  strlit  strlit	EMPTY	EMPTY
384	434	2	-1	1	-1	strlit  strlit  strlit	EMPTY	EMPTY
384	435	2	-1	1	-1	strlit  strlit  strlit	EMPTY	EMPTY
384	436	3	-1	0	-1	} ;	EMPTY	EMPTY
384	438	1	0	0	0	if ( ( tag == v _ asn1 _ neg _ integer ) || ( tag == v _ asn1 _ neg _ enumerated ) )	tag tag	EMPTY
384	439	3	-1	0	-1	tag &= ~ 0x100	tag	EMPTY
384	441	1	0	0	0	if ( tag < 0 || tag > 30 ) return  " (unknown) "	tag tag	EMPTY
384	442	2	-1	0	-1	return tag2str [ tag ]	tag	EMPTY
384	443	3	-1	0	-1	}	EMPTY	EMPTY
391	86	1	0	0	0	struct ndef _ aux _ st	EMPTY	EMPTY
391	87	3	-1	0	-1	{	EMPTY	EMPTY
391	89	1	0	0	-1	asn1 _ value * val ;	asn1 _ value val	EMPTY
391	90	3	-1	0	-1	const asn1 _ item * it ;	it	EMPTY
391	92	1	0	0	-1	bio * ndef _ bio ;	ndef _ bio	EMPTY
391	94	1	0	0	-1	bio * out ;	out	EMPTY
391	96	1	0	0	-1	unsigned char * * boundary ;	boundary	EMPTY
391	98	1	0	0	-1	unsigned char * derbuf ;	derbuf	EMPTY
391	99	3	-1	0	-1	} ndef _ support ;	EMPTY	EMPTY
391	101	1	0	0	0	static int ndef _ prefix ( bio * b  unsigned char * * pbuf  int * plen  void * parg )	b plen parg	EMPTY
391	102	2	-1	0	-1	static int ndef _ prefix _ free ( bio * b  unsigned char * * pbuf  int * plen  void * parg )	b plen parg	EMPTY
391	103	2	-1	0	-1	static int ndef _ suffix ( bio * b  unsigned char * * pbuf  int * plen  void * parg )	b plen parg	EMPTY
391	104	3	-1	0	-1	static int ndef _ suffix _ free ( bio * b  unsigned char * * pbuf  int * plen  void * parg ) ;	b plen parg	EMPTY
391	106	1	0	0	-1	bio * bio _ new _ ndef ( bio * out  asn1 _ value * val  const asn1 _ item * it )	out asn1 _ value val it	EMPTY
391	107	2	-1	0	-1	{	EMPTY	EMPTY
391	108	2	-1	0	-1	ndef _ support * ndef _ aux = null ;	EMPTY	EMPTY
391	109	2	-1	0	-1	bio * asn _ bio = null ;	EMPTY	EMPTY
391	110	2	-1	0	-1	const asn1 _ aux * aux = it -> funcs ;	it funcs	EMPTY
391	111	3	-1	0	-1	asn1 _ stream _ arg sarg ;	asn1 _ stream _ arg	EMPTY
391	113	1	0	0	0	if ( ! aux || ! aux -> asn1 _ cb )	asn1 _ cb	EMPTY
391	114	2	-1	0	-1	{	EMPTY	EMPTY
391	115	2	-1	0	-1	openssl _ put _ error ( asn1 , asn1 _ r _ streaming _ not _ supported ) ;	EMPTY	EMPTY
391	116	2	-1	0	-1	return null ;	EMPTY	EMPTY
391	117	2	-1	0	-1	}	EMPTY	EMPTY
391	118	2	-1	0	-1	ndef _ aux = openssl _ malloc ( sizeof ( ndef _ support ) )	EMPTY	EMPTY
391	119	3	-1	0	-1	asn _ bio = bio _ new ( bio _ f _ asn1 ( ) )	bio _ new	EMPTY
391	123	1	1	1	-1	out = bio _ push ( asn _ bio , out )	out bio _ push out	EMPTY
391	125	1	0	0	0	if ( ! ndef _ aux || ! asn _ bio || ! out )	out	EMPTY
391	126	3	-1	0	-1	goto err	EMPTY	EMPTY
391	128	1	0	0	0	bio _ asn1 _ set _ prefix ( asn _ bio , ndef _ prefix , ndef _ prefix _ free )	EMPTY	EMPTY
391	129	3	-1	0	-1	bio _ asn1 _ set _ suffix ( asn _ bio , ndef _ suffix , ndef _ suffix _ free )	EMPTY	EMPTY
391	135	1	1	1	-1	sarg . out = out	out out	EMPTY
391	136	2	-1	0	-1	sarg . ndef _ bio = null ;	ndef _ bio	EMPTY
391	137	3	-1	0	-1	sarg . boundary = null ;	boundary	EMPTY
391	139	1	0	0	0	if ( aux -> asn1 _ cb ( asn1 _ op _ stream _ pre , & val , it , & sarg ) <= 0 )	asn1 _ cb val it	EMPTY
391	140	3	-1	0	-1	goto err	EMPTY	EMPTY
391	142	1	0	0	-1	ndef _ aux -> val = val	val val	EMPTY
391	143	2	-1	0	-1	ndef _ aux -> it = it	it it	EMPTY
391	144	2	-1	0	-1	ndef _ aux -> ndef _ bio = sarg . ndef _ bio	ndef _ bio ndef _ bio	EMPTY
391	145	2	-1	0	-1	ndef _ aux -> boundary = sarg . boundary	boundary boundary	EMPTY
391	146	3	-1	0	-1	ndef _ aux -> out = out	out out	EMPTY
391	148	1	0	0	0	bio _ ctrl ( asn _ bio , bio _ c _ set _ ex _ arg , 0 , ndef _ aux )	bio _ ctrl	EMPTY
391	150	1	0	0	0	return sarg . ndef _ bio	ndef _ bio	EMPTY
391	152	1	0	0	-1	err :	EMPTY	EMPTY
391	153	2	-1	0	-1	if ( asn _ bio )	EMPTY	EMPTY
391	154	2	-1	0	-1	bio _ free ( asn _ bio )	bio _ free	EMPTY
391	155	2	-1	0	-1	if ( ndef _ aux )	EMPTY	EMPTY
391	156	2	-1	0	-1	openssl _ free ( ndef _ aux )	EMPTY	EMPTY
391	157	2	-1	0	-1	return null ;	EMPTY	EMPTY
391	158	3	-1	0	-1	}	EMPTY	EMPTY
391	160	1	0	0	-1	static int ndef _ prefix ( bio * b  unsigned char * * pbuf  int * plen  void * parg )	b plen parg	EMPTY
391	161	2	-1	0	-1	{	EMPTY	EMPTY
391	162	2	-1	0	-1	ndef _ support * ndef _ aux ;	EMPTY	EMPTY
391	163	2	-1	0	-1	unsigned char * p ;	p	EMPTY
391	164	3	-1	0	-1	int derlen ;	EMPTY	EMPTY
391	166	1	0	0	0	if ( ! parg )	parg	EMPTY
391	167	3	-1	0	-1	return numconst ;	EMPTY	EMPTY
391	169	1	0	0	-1	ndef _ aux = * ( ndef _ support * * ) parg ;	parg	EMPTY
391	171	1	0	0	-1	derlen = asn1 _ item _ ndef _ i2d ( ndef _ aux -> val  null  ndef _ aux -> it ) ;	val it	EMPTY
391	172	2	-1	0	-1	p = openssl _ malloc ( derlen ) ;	p	EMPTY
391	173	2	-1	0	-1	if ( p == null )	p	EMPTY
391	174	3	-1	0	-1	return numconst ;	EMPTY	EMPTY
391	176	1	0	0	-1	ndef _ aux -> derbuf = p ;	derbuf p	EMPTY
391	178	1	0	0	-1	derlen = asn1 _ item _ ndef _ i2d ( ndef _ aux -> val  & p  ndef _ aux -> it ) ;	val p it	EMPTY
391	180	1	0	0	0	if ( ! * ndef _ aux -> boundary )	boundary	EMPTY
391	181	3	-1	0	-1	return numconst ;	EMPTY	EMPTY
391	185	1	0	0	0	return numconst ;	EMPTY	EMPTY
391	186	3	-1	0	-1	}	EMPTY	EMPTY
391	188	1	0	0	-1	static int ndef _ prefix _ free ( bio * b  unsigned char * * pbuf  int * plen  void * parg )	b plen parg	EMPTY
391	189	2	-1	0	-1	{	EMPTY	EMPTY
391	190	3	-1	0	-1	ndef _ support * ndef _ aux ;	EMPTY	EMPTY
391	192	1	0	0	0	if ( ! parg )	parg	EMPTY
391	193	3	-1	0	-1	return numconst ;	EMPTY	EMPTY
391	195	1	0	0	-1	ndef _ aux = * ( ndef _ support * * ) parg ;	parg	EMPTY
391	197	1	0	0	0	if ( ndef _ aux -> derbuf )	derbuf	EMPTY
391	198	3	-1	0	-1	openssl _ free ( ndef _ aux -> derbuf ) ;	derbuf	EMPTY
391	200	1	0	0	-1	ndef _ aux -> derbuf = null ;	derbuf	EMPTY
391	203	1	0	0	0	return numconst ;	EMPTY	EMPTY
391	204	3	-1	0	-1	}	EMPTY	EMPTY
391	206	1	0	0	-1	static int ndef _ suffix _ free ( bio * b  unsigned char * * pbuf  int * plen  void * parg )	b plen parg	EMPTY
391	207	2	-1	0	-1	{	EMPTY	EMPTY
391	208	2	-1	0	-1	ndef _ support * * pndef _ aux = ( ndef _ support * * ) parg ;	parg	EMPTY
391	209	2	-1	0	-1	if ( ! ndef _ prefix _ free ( b  pbuf  plen  parg ) )	b plen parg	EMPTY
391	210	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
391	211	3	-1	0	-1	openssl _ free ( * pndef _ aux ) ;	EMPTY	EMPTY
391	213	1	0	0	0	return numconst ;	EMPTY	EMPTY
391	214	3	-1	0	-1	}	EMPTY	EMPTY
391	216	1	0	0	-1	static int ndef _ suffix ( bio * b  unsigned char * * pbuf  int * plen  void * parg )	b plen parg	EMPTY
391	217	2	-1	0	-1	{	EMPTY	EMPTY
391	218	2	-1	0	-1	ndef _ support * ndef _ aux ;	EMPTY	EMPTY
391	219	2	-1	0	-1	unsigned char * p ;	p	EMPTY
391	220	2	-1	0	-1	int derlen ;	EMPTY	EMPTY
391	221	2	-1	0	-1	const asn1 _ aux * aux ;	EMPTY	EMPTY
391	222	3	-1	0	-1	asn1 _ stream _ arg sarg ;	asn1 _ stream _ arg	EMPTY
391	224	1	0	0	0	if ( ! parg )	parg	EMPTY
391	225	3	-1	0	-1	return numconst ;	EMPTY	EMPTY
391	227	1	0	0	-1	ndef _ aux = * ( ndef _ support * * ) parg ;	parg	EMPTY
391	229	1	0	0	-1	aux = ndef _ aux -> it -> funcs ;	it funcs	EMPTY
391	232	1	1	1	-1	sarg . ndef _ bio = ndef _ aux -> ndef _ bio	ndef _ bio ndef _ bio	EMPTY
391	233	2	-1	0	-1	sarg . out = ndef _ aux -> out	out out	EMPTY
391	234	2	-1	0	-1	sarg . boundary = ndef _ aux -> boundary	boundary boundary	EMPTY
391	235	2	-1	0	-1	if ( aux -> asn1 _ cb ( asn1 _ op _ stream _ post ,	asn1 _ cb	EMPTY
391	236	2	-1	0	-1	& ndef _ aux -> val , ndef _ aux -> it , & sarg ) <= 0 )	val it	EMPTY
391	237	3	-1	0	-1	return 0	EMPTY	EMPTY
391	239	1	0	0	-1	derlen = asn1 _ item _ ndef _ i2d ( ndef _ aux -> val , null , ndef _ aux -> it )	val it	EMPTY
391	240	2	-1	0	-1	p = openssl _ malloc ( derlen )	p	EMPTY
391	241	2	-1	0	-1	if ( p == null )	p	EMPTY
391	242	3	-1	0	-1	return 0	EMPTY	EMPTY
391	244	1	0	0	-1	ndef _ aux -> derbuf = p	derbuf p	EMPTY
391	245	2	-1	0	-1	* pbuf = p	p	EMPTY
391	246	3	-1	0	-1	derlen = asn1 _ item _ ndef _ i2d ( ndef _ aux -> val , & p , ndef _ aux -> it )	val p it	EMPTY
391	248	1	0	0	0	if ( ! * ndef _ aux -> boundary )	boundary	EMPTY
391	249	2	-1	0	-1	return 0	EMPTY	EMPTY
391	250	2	-1	0	-1	* pbuf = * ndef _ aux -> boundary	boundary	EMPTY
391	251	3	-1	0	-1	* plen = derlen - ( * ndef _ aux -> boundary - ndef _ aux -> derbuf )	plen boundary derbuf	EMPTY
391	253	1	0	0	0	return 1	EMPTY	EMPTY
391	254	3	-1	0	-1	}	EMPTY	EMPTY
395	65	1	0	0	-1	static int asn1 _ i2d _ ex _ primitive ( asn1 _ value * * pval  unsigned char * * out	asn1 _ value out	EMPTY
395	66	2	-1	0	-1	const asn1 _ item * it	it	EMPTY
395	67	2	-1	0	-1	int tag  int aclass )	tag	EMPTY
395	68	2	-1	0	-1	static int asn1 _ set _ seq _ out ( stack _ of ( asn1 _ value ) * sk  unsigned char * * out	asn1 _ value sk out	EMPTY
395	69	2	-1	0	-1	int skcontlen  const asn1 _ item * item	item	EMPTY
395	70	2	-1	0	-1	int do _ sort  int iclass )	EMPTY	EMPTY
395	71	2	-1	0	-1	static int asn1 _ template _ ex _ i2d ( asn1 _ value * * pval  unsigned char * * out	asn1 _ value out	EMPTY
395	72	2	-1	0	-1	const asn1 _ template * tt	asn1 _ template tt	EMPTY
395	73	2	-1	0	-1	int tag  int aclass )	tag	EMPTY
395	74	2	-1	0	-1	static int asn1 _ item _ flags _ i2d ( asn1 _ value * val  unsigned char * * out	asn1 _ value out	EMPTY
395	75	3	-1	0	-1	const asn1 _ item * it  int flags ) ;	it flags	EMPTY
395	81	1	1	1	-1	int asn1 _ item _ ndef _ i2d ( asn1 _ value * val  unsigned char * * out	asn1 _ value out	EMPTY
395	82	2	-1	0	-1	const asn1 _ item * it )	it	EMPTY
395	83	2	-1	0	-1	{	EMPTY	EMPTY
395	84	2	-1	0	-1	return asn1 _ item _ flags _ i2d ( val , out , it , asn1 _ tflg _ ndef )	out it	EMPTY
395	85	3	-1	0	-1	}	EMPTY	EMPTY
395	87	1	0	0	-1	int asn1 _ item _ i2d ( asn1 _ value * val  unsigned char * * out  const asn1 _ item * it )	asn1 _ value out it	EMPTY
395	88	2	-1	0	-1	{	EMPTY	EMPTY
395	89	2	-1	0	-1	return asn1 _ item _ flags _ i2d ( val , out , it , 0 )	out it	EMPTY
395	90	3	-1	0	-1	}	EMPTY	EMPTY
395	101	1	1	1	-1	static int asn1 _ item _ flags _ i2d ( asn1 _ value * val  unsigned char * * out	asn1 _ value out	EMPTY
395	102	2	-1	0	-1	const asn1 _ item * it  int flags )	it flags	EMPTY
395	103	2	-1	0	-1	{	EMPTY	EMPTY
395	104	2	-1	0	-1	if ( out && ! * out )	out out	EMPTY
395	105	2	-1	0	-1	{	EMPTY	EMPTY
395	106	2	-1	0	-1	unsigned char * p , * buf ;	p buf	EMPTY
395	107	2	-1	0	-1	int len ;	len	EMPTY
395	108	2	-1	0	-1	len = asn1 _ item _ ex _ i2d ( & val , null , it , - 1 , flags ) ;	len it flags	EMPTY
395	109	2	-1	0	-1	if ( len <= 0 )	len	EMPTY
395	110	2	-1	0	-1	return len ;	len	EMPTY
395	111	2	-1	0	-1	buf = openssl _ malloc ( len ) ;	buf len	EMPTY
395	112	2	-1	0	-1	if ( ! buf )	buf	EMPTY
395	113	2	-1	0	-1	return - 1 ;	EMPTY	EMPTY
395	114	2	-1	0	-1	p = buf ;	p buf	EMPTY
395	115	2	-1	0	-1	asn1 _ item _ ex _ i2d ( & val , & p , it , - 1 , flags ) ;	p it flags	EMPTY
395	116	2	-1	0	-1	* out = buf ;	out buf	EMPTY
395	117	2	-1	0	-1	return len ;	len	EMPTY
395	118	3	-1	0	-1	}	EMPTY	EMPTY
395	120	1	0	0	0	return asn1 _ item _ ex _ i2d ( & val , out , it , - 1 , flags )	out it flags	EMPTY
395	121	3	-1	0	-1	}	EMPTY	EMPTY
395	128	1	1	1	-1	int asn1 _ item _ ex _ i2d ( asn1 _ value * * pval  unsigned char * * out	asn1 _ value out	EMPTY
395	129	2	-1	0	-1	const asn1 _ item * it  int tag  int aclass )	it tag	EMPTY
395	130	2	-1	0	-1	{	EMPTY	EMPTY
395	131	2	-1	0	-1	const asn1 _ template * tt = null ;	asn1 _ template tt	EMPTY
395	132	2	-1	0	-1	unsigned char * p = null ;	p	EMPTY
395	133	2	-1	0	-1	int i , seqcontlen , seqlen , ndef = 1 ;	i	EMPTY
395	134	2	-1	0	-1	const asn1 _ compat _ funcs * cf ;	EMPTY	EMPTY
395	135	2	-1	0	-1	const asn1 _ extern _ funcs * ef ;	EMPTY	EMPTY
395	136	2	-1	0	-1	const asn1 _ aux * aux = it -> funcs ;	it funcs	EMPTY
395	137	3	-1	0	-1	asn1 _ aux _ cb * asn1 _ cb = 0 ;	asn1 _ cb	EMPTY
395	139	1	0	0	0	if ( ( it -> itype != asn1 _ itype _ primitive ) && ! * pval )	it itype	EMPTY
395	140	3	-1	0	-1	return 0	EMPTY	EMPTY
395	142	1	0	0	0	if ( aux && aux -> asn1 _ cb )	asn1 _ cb	EMPTY
395	143	3	-1	0	-1	asn1 _ cb = aux -> asn1 _ cb	asn1 _ cb asn1 _ cb	EMPTY
395	145	1	0	0	0	switch ( it -> itype )	it itype	EMPTY
395	146	3	-1	0	-1	{	EMPTY	EMPTY
395	148	1	0	0	-1	case asn1 _ itype _ primitive :	EMPTY	EMPTY
395	149	2	-1	0	-1	if ( it -> templates )	it templates	EMPTY
395	150	2	-1	0	-1	return asn1 _ template _ ex _ i2d ( pval , out , it -> templates ,	out it templates	EMPTY
395	151	2	-1	0	-1	tag , aclass )	tag	EMPTY
395	152	2	-1	0	-1	return asn1 _ i2d _ ex _ primitive ( pval , out , it , tag , aclass )	out it tag	EMPTY
395	153	3	-1	0	-1	break	EMPTY	EMPTY
395	155	1	0	0	-1	case asn1 _ itype _ mstring :	EMPTY	EMPTY
395	156	3	-1	0	-1	return asn1 _ i2d _ ex _ primitive ( pval , out , it , - 1 , aclass )	out it	EMPTY
395	158	1	1	0	-1	case asn1 _ itype _ choice :	EMPTY	EMPTY
395	159	2	-1	0	-1	if ( asn1 _ cb && ! asn1 _ cb ( asn1 _ op _ i2d _ pre , pval , it , null ) )	asn1 _ cb asn1 _ cb it	EMPTY
395	160	2	-1	0	-1	return 0	EMPTY	EMPTY
395	161	2	-1	0	-1	i = asn1 _ get _ choice _ selector ( pval , it )	i it	EMPTY
395	162	2	-1	0	-1	if ( ( i >= 0 ) && ( i < it -> tcount ) )	i i it tcount	EMPTY
395	163	2	-1	0	-1	{	EMPTY	EMPTY
395	164	2	-1	0	-1	asn1 _ value * * pchval ;	asn1 _ value	EMPTY
395	165	2	-1	0	-1	const asn1 _ template * chtt ;	asn1 _ template	EMPTY
395	166	2	-1	0	-1	chtt = it -> templates + i ;	it templates i	EMPTY
395	167	2	-1	0	-1	pchval = asn1 _ get _ field _ ptr ( pval , chtt ) ;	EMPTY	EMPTY
395	168	2	-1	0	-1	return asn1 _ template _ ex _ i2d ( pchval , out , chtt ,	out	EMPTY
395	169	2	-1	0	-1	- 1 , aclass ) ;	EMPTY	EMPTY
395	170	2	-1	0	-1	}	EMPTY	EMPTY
395	172	2	-1	1	-1	if ( asn1 _ cb && ! asn1 _ cb ( asn1 _ op _ i2d _ post , pval , it , null ) )	asn1 _ cb asn1 _ cb it	EMPTY
395	173	2	-1	0	-1	return 0	EMPTY	EMPTY
395	174	3	-1	0	-1	break	EMPTY	EMPTY
395	176	1	1	0	-1	case asn1 _ itype _ extern :	EMPTY	EMPTY
395	178	2	-1	1	-1	ef = it -> funcs ;	it funcs	EMPTY
395	179	3	-1	0	-1	return ef -> asn1 _ ex _ i2d ( pval , out , it , tag , aclass )	out it tag	EMPTY
395	181	1	1	0	-1	case asn1 _ itype _ compat :	EMPTY	EMPTY
395	183	2	-1	1	-1	cf = it -> funcs ;	it funcs	EMPTY
395	184	2	-1	0	-1	if ( out )	out	EMPTY
395	185	2	-1	0	-1	p = * out	p out	EMPTY
395	186	2	-1	0	-1	i = cf -> asn1 _ i2d ( * pval , out )	i out	EMPTY
395	190	2	-1	1	-1	if ( out && ( tag != - 1 ) )	out tag	EMPTY
395	191	2	-1	0	-1	* p = aclass | tag | ( * p & v _ asn1 _ constructed )	p tag p	EMPTY
395	192	2	-1	0	-1	return i	i	EMPTY
395	193	2	-1	0	-1	case	EMPTY	EMPTY
395	194	2	-1	0	-1	case asn1 _ itype _ ndef _ sequence :	EMPTY	EMPTY
395	196	3	-1	1	-1	if ( aclass & asn1 _ tflg _ ndef ) ndef = numconst ;	EMPTY	EMPTY
395	199	1	1	1	-1	case asn1 _ itype _ sequence :	EMPTY	EMPTY
395	200	2	-1	0	-1	i = asn1 _ enc _ restore ( & seqcontlen , out , pval , it )	i out it	EMPTY
395	202	2	-1	1	-1	if ( i < 0 )	i	EMPTY
395	203	2	-1	0	-1	return 0	EMPTY	EMPTY
395	205	2	-1	1	-1	if ( i > 0 )	i	EMPTY
395	206	2	-1	0	-1	return seqcontlen	EMPTY	EMPTY
395	208	2	-1	1	-1	seqcontlen = 0	EMPTY	EMPTY
395	210	2	-1	1	-1	if ( tag == - numconst )	tag	EMPTY
395	211	2	-1	0	-1	{	EMPTY	EMPTY
395	212	2	-1	0	-1	tag = v _ asn1 _ sequence ;	tag	EMPTY
395	214	2	-1	1	-1	aclass = ( aclass & ~ asn1 _ tflg _ tag _ class )	EMPTY	EMPTY
395	215	2	-1	0	-1	| v _ asn1 _ universal ;	EMPTY	EMPTY
395	216	2	-1	0	-1	}	EMPTY	EMPTY
395	217	2	-1	0	-1	if ( asn1 _ cb && ! asn1 _ cb ( asn1 _ op _ i2d _ pre  pval  it  null ) )	asn1 _ cb asn1 _ cb it	EMPTY
395	218	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
395	220	2	-1	1	-1	for ( i = numconst  tt = it -> templates ; i < it -> tcount ; tt ++  i ++ )	i tt it templates i it tcount tt i	EMPTY
395	221	2	-1	0	-1	{	EMPTY	EMPTY
395	222	2	-1	0	-1	const asn1 _ template * seqtt ;	asn1 _ template	EMPTY
395	223	2	-1	0	-1	asn1 _ value * * pseqval ;	asn1 _ value	EMPTY
395	224	2	-1	0	-1	seqtt = asn1 _ do _ adb ( pval , tt , 1 )	tt	EMPTY
395	225	2	-1	0	-1	if ( ! seqtt )	EMPTY	EMPTY
395	226	2	-1	0	-1	return 0	EMPTY	EMPTY
395	227	2	-1	0	-1	pseqval = asn1 _ get _ field _ ptr ( pval , seqtt )	EMPTY	EMPTY
395	229	2	-1	1	-1	seqcontlen += asn1 _ template _ ex _ i2d ( pseqval , null , seqtt ,	EMPTY	EMPTY
395	230	2	-1	0	-1	- 1 , aclass )	EMPTY	EMPTY
395	231	3	-1	0	-1	}	EMPTY	EMPTY
395	233	1	1	0	-1	seqlen = asn1 _ object _ size ( ndef  seqcontlen  tag ) ;	tag	EMPTY
395	234	2	-1	0	-1	if ( ! out )	out	EMPTY
395	235	2	-1	0	-1	return seqlen ;	EMPTY	EMPTY
395	237	2	-1	1	-1	asn1 _ put _ object ( out , ndef , seqcontlen , tag , aclass )	out tag	EMPTY
395	238	2	-1	0	-1	for ( i = numconst  tt = it -> templates ; i < it -> tcount ; tt ++  i ++ )	i tt it templates i it tcount tt i	EMPTY
395	239	2	-1	0	-1	{	EMPTY	EMPTY
395	240	2	-1	0	-1	const asn1 _ template * seqtt ;	asn1 _ template	EMPTY
395	241	2	-1	0	-1	asn1 _ value * * pseqval ;	asn1 _ value	EMPTY
395	242	2	-1	0	-1	seqtt = asn1 _ do _ adb ( pval , tt , 1 )	tt	EMPTY
395	243	2	-1	0	-1	if ( ! seqtt )	EMPTY	EMPTY
395	244	2	-1	0	-1	return 0	EMPTY	EMPTY
395	245	2	-1	0	-1	pseqval = asn1 _ get _ field _ ptr ( pval , seqtt )	EMPTY	EMPTY
395	247	2	-1	1	-1	asn1 _ template _ ex _ i2d ( pseqval , out , seqtt , - 1 , aclass )	out	EMPTY
395	248	2	-1	0	-1	}	EMPTY	EMPTY
395	249	2	-1	0	-1	if ( ndef == numconst )	EMPTY	EMPTY
395	250	2	-1	0	-1	asn1 _ put _ eoc ( out ) ;	out	EMPTY
395	251	2	-1	0	-1	if ( asn1 _ cb && ! asn1 _ cb ( asn1 _ op _ i2d _ post  pval  it  null ) )	asn1 _ cb asn1 _ cb it	EMPTY
395	252	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
395	253	3	-1	0	-1	return seqlen ;	EMPTY	EMPTY
395	255	1	0	0	-1	default :	EMPTY	EMPTY
395	256	3	-1	0	-1	return numconst ;	EMPTY	EMPTY
395	258	1	0	0	-1	}	EMPTY	EMPTY
395	259	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
395	260	3	-1	0	-1	}	EMPTY	EMPTY
395	262	1	0	0	-1	int asn1 _ template _ i2d ( asn1 _ value * * pval  unsigned char * * out	asn1 _ value out	EMPTY
395	263	2	-1	0	-1	const asn1 _ template * tt )	asn1 _ template tt	EMPTY
395	264	2	-1	0	-1	{	EMPTY	EMPTY
395	265	2	-1	0	-1	return asn1 _ template _ ex _ i2d ( pval  out  tt  - numconst  numconst ) ;	out tt	EMPTY
395	266	3	-1	0	-1	}	EMPTY	EMPTY
395	268	1	0	0	-1	static int asn1 _ template _ ex _ i2d ( asn1 _ value * * pval  unsigned char * * out	asn1 _ value out	EMPTY
395	269	2	-1	0	-1	const asn1 _ template * tt  int tag  int iclass )	asn1 _ template tt tag	EMPTY
395	270	2	-1	0	-1	{	EMPTY	EMPTY
395	271	2	-1	0	-1	int i  ret  flags  ttag  tclass  ndef ;	i ret flags	EMPTY
395	272	2	-1	0	-1	size _ t j ;	EMPTY	EMPTY
395	273	3	-1	0	-1	flags = tt -> flags ;	flags tt flags	EMPTY
395	280	1	1	0	-1	if ( flags & asn1 _ tflg _ tag _ mask )	flags	EMPTY
395	281	2	-1	0	-1	{	EMPTY	EMPTY
395	283	2	-1	1	-1	if ( tag != - numconst )	tag	EMPTY
395	285	2	-1	1	-1	return - numconst ;	EMPTY	EMPTY
395	287	2	-1	1	-1	ttag = tt -> tag	tt tag	EMPTY
395	288	2	-1	0	-1	tclass = flags & asn1 _ tflg _ tag _ class ;	flags	EMPTY
395	289	2	-1	0	-1	}	EMPTY	EMPTY
395	290	2	-1	0	-1	if ( tag != - numconst )	tag	EMPTY
395	291	2	-1	0	-1	{	EMPTY	EMPTY
395	293	2	-1	1	-1	ttag = tag	tag	EMPTY
395	294	2	-1	0	-1	tclass = iclass & asn1 _ tflg _ tag _ class ;	EMPTY	EMPTY
395	295	2	-1	0	-1	}	EMPTY	EMPTY
395	296	2	-1	0	-1	else	EMPTY	EMPTY
395	297	2	-1	0	-1	{	EMPTY	EMPTY
395	298	2	-1	0	-1	ttag = - numconst ;	EMPTY	EMPTY
395	299	2	-1	0	-1	tclass = numconst ;	EMPTY	EMPTY
395	300	2	-1	0	-1	}	EMPTY	EMPTY
395	304	3	-1	1	-1	iclass &= ~ asn1 _ tflg _ tag _ class ;	EMPTY	EMPTY
395	312	1	1	1	1	if ( ( flags & asn1 _ tflg _ ndef ) && ( iclass & asn1 _ tflg _ ndef ) )	flags	EMPTY
395	313	2	-1	0	-1	ndef = 2 ;	EMPTY	EMPTY
395	314	3	-1	0	-1	else ndef = 1	EMPTY	EMPTY
395	316	1	1	0	1	if ( flags & asn1 _ tflg _ sk _ mask )	flags	EMPTY
395	317	2	-1	0	-1	{	EMPTY	EMPTY
395	319	2	-1	1	-1	stack _ of ( asn1 _ value ) * sk = ( stack _ of ( asn1 _ value ) * ) * pval ;	asn1 _ value sk asn1 _ value	EMPTY
395	320	2	-1	0	-1	int isset , sktag , skaclass ;	EMPTY	EMPTY
395	321	2	-1	0	-1	int skcontlen , sklen ;	EMPTY	EMPTY
395	322	3	-1	0	-1	asn1 _ value * skitem ;	asn1 _ value	EMPTY
395	324	1	0	0	0	if ( ! * pval )	EMPTY	EMPTY
395	325	3	-1	0	-1	return 0	EMPTY	EMPTY
395	327	1	1	0	1	if ( flags & asn1 _ tflg _ set _ of )	flags	EMPTY
395	328	2	-1	0	-1	{	EMPTY	EMPTY
395	329	2	-1	0	-1	isset = 1	EMPTY	EMPTY
395	331	2	-1	1	-1	if ( flags & asn1 _ tflg _ sequence _ of )	flags	EMPTY
395	332	2	-1	0	-1	isset = 2	EMPTY	EMPTY
395	333	2	-1	0	-1	}	EMPTY	EMPTY
395	334	3	-1	0	-1	else isset = numconst ;	EMPTY	EMPTY
395	339	1	1	1	1	if ( ( ttag != - 1 ) && ! ( flags & asn1 _ tflg _ exptag ) )	flags	EMPTY
395	340	2	-1	0	-1	{	EMPTY	EMPTY
395	341	2	-1	0	-1	sktag = ttag ;	EMPTY	EMPTY
395	342	2	-1	0	-1	skaclass = tclass ;	EMPTY	EMPTY
395	343	2	-1	0	-1	}	EMPTY	EMPTY
395	344	2	-1	0	-1	else	EMPTY	EMPTY
395	345	2	-1	0	-1	{	EMPTY	EMPTY
395	346	2	-1	0	-1	skaclass = v _ asn1 _ universal ;	EMPTY	EMPTY
395	347	2	-1	0	-1	if ( isset )	EMPTY	EMPTY
395	348	2	-1	0	-1	sktag = v _ asn1 _ set ;	EMPTY	EMPTY
395	349	2	-1	0	-1	else sktag = v _ asn1 _ sequence ;	EMPTY	EMPTY
395	350	3	-1	0	-1	}	EMPTY	EMPTY
395	353	1	1	1	-1	skcontlen = 0	EMPTY	EMPTY
395	354	2	-1	0	-1	for ( j = 0 ; j < sk _ asn1 _ value _ num ( sk ) ; j ++ )	sk	EMPTY
395	355	2	-1	0	-1	{	EMPTY	EMPTY
395	356	2	-1	0	-1	skitem = sk _ asn1 _ value _ value ( sk , j ) ;	sk	EMPTY
395	357	2	-1	0	-1	skcontlen += asn1 _ item _ ex _ i2d ( & skitem , null ,	EMPTY	EMPTY
395	358	2	-1	0	-1	asn1 _ item _ ptr ( tt -> item ) ,	tt item	EMPTY
395	359	2	-1	0	-1	- 1 , iclass ) ;	EMPTY	EMPTY
395	360	2	-1	0	-1	}	EMPTY	EMPTY
395	361	2	-1	0	-1	sklen = asn1 _ object _ size ( ndef , skcontlen , sktag )	EMPTY	EMPTY
395	363	2	-1	1	-1	if ( flags & asn1 _ tflg _ exptag )	flags	EMPTY
395	364	2	-1	0	-1	ret = asn1 _ object _ size ( ndef , sklen , ttag ) ;	ret	EMPTY
395	365	3	-1	0	-1	else ret = sklen	ret	EMPTY
395	367	1	0	0	0	if ( ! out )	out	EMPTY
395	368	3	-1	0	-1	return ret	ret	EMPTY
395	372	1	1	1	1	if ( flags & asn1 _ tflg _ exptag )	flags	EMPTY
395	373	2	-1	0	-1	asn1 _ put _ object ( out , ndef , sklen , ttag , tclass )	out	EMPTY
395	375	2	-1	1	-1	asn1 _ put _ object ( out , ndef , skcontlen , sktag , skaclass )	out	EMPTY
395	377	2	-1	1	-1	asn1 _ set _ seq _ out ( sk , out , skcontlen , asn1 _ item _ ptr ( tt -> item ) ,	sk out tt item	EMPTY
395	378	2	-1	0	-1	isset , iclass )	EMPTY	EMPTY
395	379	2	-1	0	-1	if ( ndef == 2 )	EMPTY	EMPTY
395	380	2	-1	0	-1	{	EMPTY	EMPTY
395	381	2	-1	0	-1	asn1 _ put _ eoc ( out ) ;	out	EMPTY
395	382	2	-1	0	-1	if ( flags & asn1 _ tflg _ exptag )	flags	EMPTY
395	383	2	-1	0	-1	asn1 _ put _ eoc ( out ) ;	out	EMPTY
395	384	3	-1	0	-1	}	EMPTY	EMPTY
395	386	1	0	0	0	return ret	ret	EMPTY
395	387	3	-1	0	-1	}	EMPTY	EMPTY
395	389	1	1	0	1	if ( flags & asn1 _ tflg _ exptag )	flags	EMPTY
395	390	2	-1	0	-1	{	EMPTY	EMPTY
395	393	2	-1	1	-1	i = asn1 _ item _ ex _ i2d ( pval , null , asn1 _ item _ ptr ( tt -> item ) ,	i tt item	EMPTY
395	394	2	-1	0	-1	- 1 , iclass )	EMPTY	EMPTY
395	395	2	-1	0	-1	if ( ! i )	i	EMPTY
395	396	2	-1	0	-1	return 0	EMPTY	EMPTY
395	398	2	-1	1	-1	ret = asn1 _ object _ size ( ndef , i , ttag )	ret i	EMPTY
395	399	2	-1	0	-1	if ( out )	out	EMPTY
395	400	2	-1	0	-1	{	EMPTY	EMPTY
395	402	2	-1	1	-1	asn1 _ put _ object ( out , ndef , i , ttag , tclass )	out i	EMPTY
395	403	2	-1	0	-1	asn1 _ item _ ex _ i2d ( pval , out , asn1 _ item _ ptr ( tt -> item ) ,	out tt item	EMPTY
395	404	2	-1	0	-1	- 1 , iclass )	EMPTY	EMPTY
395	405	2	-1	0	-1	if ( ndef == 2 )	EMPTY	EMPTY
395	406	2	-1	0	-1	asn1 _ put _ eoc ( out )	out	EMPTY
395	407	2	-1	0	-1	}	EMPTY	EMPTY
395	408	2	-1	0	-1	return ret ;	ret	EMPTY
395	409	3	-1	0	-1	}	EMPTY	EMPTY
395	412	1	0	0	-1	return asn1 _ item _ ex _ i2d ( pval , out , asn1 _ item _ ptr ( tt -> item ) ,	out tt item	EMPTY
395	413	3	-1	0	-1	ttag , tclass | iclass )	EMPTY	EMPTY
395	415	1	0	0	-1	}	EMPTY	EMPTY
395	419	1	1	1	1	struct {	EMPTY	EMPTY
395	420	2	-1	0	-1	unsigned char * data ;	data	EMPTY
395	421	2	-1	0	-1	int length ;	length	EMPTY
395	422	2	-1	0	-1	asn1 _ value * field ;	asn1 _ value	EMPTY
395	423	3	-1	0	-1	} der _ enc ;	EMPTY	EMPTY
395	425	1	0	0	-1	static int der _ cmp ( const void * a  const void * b )	a b	EMPTY
395	426	2	-1	0	-1	{	EMPTY	EMPTY
395	427	2	-1	0	-1	const der _ enc * d1 = a , * d2 = b ;	a b	EMPTY
395	428	2	-1	0	-1	int cmplen , i ;	i	EMPTY
395	429	2	-1	0	-1	cmplen = ( d1 -> length < d2 -> length ) ? d1 -> length : d2 -> length	length length length length	EMPTY
395	430	2	-1	0	-1	i = memcmp ( d1 -> data , d2 -> data , cmplen )	i data data	EMPTY
395	431	2	-1	0	-1	if ( i )	i	EMPTY
395	432	2	-1	0	-1	return i	i	EMPTY
395	433	2	-1	0	-1	return d1 -> length - d2 -> length	length length	EMPTY
395	434	3	-1	0	-1	}	EMPTY	EMPTY
395	438	1	1	1	-1	static int asn1 _ set _ seq _ out ( stack _ of ( asn1 _ value ) * sk  unsigned char * * out	asn1 _ value sk out	EMPTY
395	439	2	-1	0	-1	int skcontlen  const asn1 _ item * item	item	EMPTY
395	440	2	-1	0	-1	int do _ sort  int iclass )	EMPTY	EMPTY
395	441	2	-1	0	-1	{	EMPTY	EMPTY
395	442	2	-1	0	-1	size _ t i ;	i	EMPTY
395	443	2	-1	0	-1	asn1 _ value * skitem ;	asn1 _ value	EMPTY
395	444	2	-1	0	-1	unsigned char * tmpdat = null , * p = null ;	p	EMPTY
395	445	2	-1	0	-1	der _ enc * derlst = null , * tder ;	EMPTY	EMPTY
395	446	2	-1	0	-1	if ( do _ sort )	EMPTY	EMPTY
395	447	2	-1	0	-1	{	EMPTY	EMPTY
395	449	2	-1	1	-1	if ( sk _ asn1 _ value _ num ( sk ) < 2 )	sk	EMPTY
395	450	2	-1	0	-1	do _ sort = 0 ;	EMPTY	EMPTY
395	451	2	-1	0	-1	else	EMPTY	EMPTY
395	452	2	-1	0	-1	{	EMPTY	EMPTY
395	453	2	-1	0	-1	derlst = openssl _ malloc ( sk _ asn1 _ value _ num ( sk )	sk	EMPTY
395	454	2	-1	0	-1	* sizeof ( * derlst ) ) ;	EMPTY	EMPTY
395	455	2	-1	0	-1	if ( ! derlst )	EMPTY	EMPTY
395	456	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
395	457	2	-1	0	-1	tmpdat = openssl _ malloc ( skcontlen ) ;	EMPTY	EMPTY
395	458	2	-1	0	-1	if ( ! tmpdat )	EMPTY	EMPTY
395	459	2	-1	0	-1	{	EMPTY	EMPTY
395	460	2	-1	0	-1	openssl _ free ( derlst ) ;	EMPTY	EMPTY
395	461	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
395	462	2	-1	0	-1	}	EMPTY	EMPTY
395	463	2	-1	0	-1	}	EMPTY	EMPTY
395	464	3	-1	0	-1	}	EMPTY	EMPTY
395	466	1	0	0	-1	if ( ! do _ sort )	EMPTY	EMPTY
395	467	2	-1	0	-1	{	EMPTY	EMPTY
395	468	2	-1	0	-1	for ( i = 0 ; i < sk _ asn1 _ value _ num ( sk ) ; i ++ )	i i sk i	EMPTY
395	469	2	-1	0	-1	{	EMPTY	EMPTY
395	470	2	-1	0	-1	skitem = sk _ asn1 _ value _ value ( sk , i ) ;	sk i	EMPTY
395	471	2	-1	0	-1	asn1 _ item _ ex _ i2d ( & skitem , out , item , - 1 , iclass ) ;	out item	EMPTY
395	472	2	-1	0	-1	}	EMPTY	EMPTY
395	473	2	-1	0	-1	return 1 ;	EMPTY	EMPTY
395	474	2	-1	0	-1	}	EMPTY	EMPTY
395	475	3	-1	0	-1	p = tmpdat	p	EMPTY
395	478	1	0	0	-1	for ( i = 0 , tder = derlst ; i < sk _ asn1 _ value _ num ( sk ) ; i ++ , tder ++ )	i i sk i	EMPTY
395	479	2	-1	0	-1	{	EMPTY	EMPTY
395	480	2	-1	0	-1	skitem = sk _ asn1 _ value _ value ( sk , i ) ;	sk i	EMPTY
395	481	2	-1	0	-1	tder -> data = p ;	data p	EMPTY
395	482	2	-1	0	-1	tder -> length = asn1 _ item _ ex _ i2d ( & skitem , & p , item , - 1 , iclass ) ;	length p item	EMPTY
395	483	2	-1	0	-1	tder -> field = skitem ;	EMPTY	EMPTY
395	484	3	-1	0	-1	}	EMPTY	EMPTY
395	487	1	1	0	-1	qsort ( derlst , sk _ asn1 _ value _ num ( sk ) , sizeof ( * derlst ) , der _ cmp )	sk	EMPTY
395	489	2	-1	1	-1	p = * out	p out	EMPTY
395	490	2	-1	0	-1	for ( i = 0 , tder = derlst ; i < sk _ asn1 _ value _ num ( sk ) ; i ++ , tder ++ )	i i sk i	EMPTY
395	491	2	-1	0	-1	{	EMPTY	EMPTY
395	492	2	-1	0	-1	memcpy ( p , tder -> data , tder -> length ) ;	p data length	EMPTY
395	493	2	-1	0	-1	p += tder -> length ;	p length	EMPTY
395	494	2	-1	0	-1	}	EMPTY	EMPTY
395	495	3	-1	0	-1	* out = p	out p	EMPTY
395	497	1	0	0	-1	if ( do _ sort == 2 )	EMPTY	EMPTY
395	498	2	-1	0	-1	{	EMPTY	EMPTY
395	499	2	-1	0	-1	for ( i = 0 , tder = derlst ; i < sk _ asn1 _ value _ num ( sk ) ;	i i sk	EMPTY
395	500	2	-1	0	-1	i ++ , tder ++ )	i	EMPTY
395	501	2	-1	0	-1	( void ) sk _ asn1 _ value _ set ( sk , i , tder -> field ) ;	sk i	EMPTY
395	502	2	-1	0	-1	}	EMPTY	EMPTY
395	503	2	-1	0	-1	openssl _ free ( derlst ) ;	EMPTY	EMPTY
395	504	2	-1	0	-1	openssl _ free ( tmpdat ) ;	EMPTY	EMPTY
395	505	2	-1	0	-1	return 1	EMPTY	EMPTY
395	506	3	-1	0	-1	}	EMPTY	EMPTY
395	508	1	0	0	-1	static int asn1 _ i2d _ ex _ primitive ( asn1 _ value * * pval  unsigned char * * out	asn1 _ value out	EMPTY
395	509	2	-1	0	-1	const asn1 _ item * it  int tag  int aclass )	it tag	EMPTY
395	510	2	-1	0	-1	{	EMPTY	EMPTY
395	511	2	-1	0	-1	int len ;	len	EMPTY
395	512	2	-1	0	-1	int utype ;	utype	EMPTY
395	513	2	-1	0	-1	int usetag ;	EMPTY	EMPTY
395	514	3	-1	0	-1	int ndef = numconst ;	EMPTY	EMPTY
395	516	1	0	0	-1	utype = it -> utype ;	utype it utype	EMPTY
395	522	1	1	1	-1	len = asn1 _ ex _ i2c ( pval , null , & utype , it )	len utype it	EMPTY
395	530	1	0	0	-1	if ( ( utype == v _ asn1 _ sequence ) || ( utype == v _ asn1 _ set ) ||	utype utype	EMPTY
395	531	2	-1	0	-1	( utype == v _ asn1 _ other ) )	utype	EMPTY
395	532	2	-1	0	-1	usetag = 0 ;	EMPTY	EMPTY
395	533	3	-1	0	-1	else usetag = 1	EMPTY	EMPTY
395	537	1	1	1	1	if ( len == - 1 )	len	EMPTY
395	538	3	-1	0	-1	return 0	EMPTY	EMPTY
395	541	1	0	0	-1	if ( len == - 2 )	len	EMPTY
395	542	2	-1	0	-1	{	EMPTY	EMPTY
395	543	2	-1	0	-1	ndef = 2 ;	EMPTY	EMPTY
395	544	2	-1	0	-1	len = 0 ;	len	EMPTY
395	545	3	-1	0	-1	}	EMPTY	EMPTY
395	548	1	0	0	-1	if ( tag == - 1 ) tag = utype	tag tag utype	EMPTY
395	551	1	0	0	-1	if ( out )	out	EMPTY
395	552	2	-1	0	-1	{	EMPTY	EMPTY
395	553	2	-1	0	-1	if ( usetag )	EMPTY	EMPTY
395	554	2	-1	0	-1	asn1 _ put _ object ( out , ndef , len , tag , aclass ) ;	out len tag	EMPTY
395	555	2	-1	0	-1	asn1 _ ex _ i2c ( pval , * out , & utype , it ) ;	out utype it	EMPTY
395	556	2	-1	0	-1	if ( ndef )	EMPTY	EMPTY
395	557	2	-1	0	-1	asn1 _ put _ eoc ( out ) ;	out	EMPTY
395	558	2	-1	0	-1	else	EMPTY	EMPTY
395	559	2	-1	0	-1	* out += len ;	out len	EMPTY
395	560	3	-1	0	-1	}	EMPTY	EMPTY
395	562	1	0	0	0	if ( usetag )	EMPTY	EMPTY
395	563	2	-1	0	-1	return asn1 _ object _ size ( ndef , len , tag )	len tag	EMPTY
395	564	2	-1	0	-1	return len	len	EMPTY
395	565	3	-1	0	-1	}	EMPTY	EMPTY
395	569	1	1	1	-1	int asn1 _ ex _ i2c ( asn1 _ value * * pval  unsigned char * cout  int * putype	asn1 _ value	EMPTY
395	570	2	-1	0	-1	const asn1 _ item * it )	it	EMPTY
395	571	2	-1	0	-1	{	EMPTY	EMPTY
395	572	2	-1	0	-1	asn1 _ boolean * tbool = null ;	EMPTY	EMPTY
395	573	2	-1	0	-1	asn1 _ string * strtmp ;	EMPTY	EMPTY
395	574	2	-1	0	-1	asn1 _ object * otmp ;	EMPTY	EMPTY
395	575	2	-1	0	-1	int utype ;	utype	EMPTY
395	576	2	-1	0	-1	const unsigned char * cont ;	EMPTY	EMPTY
395	577	2	-1	0	-1	unsigned char c ;	c	EMPTY
395	578	2	-1	0	-1	int len ;	len	EMPTY
395	579	2	-1	0	-1	const asn1 _ primitive _ funcs * pf ;	EMPTY	EMPTY
395	580	2	-1	0	-1	pf = it -> funcs	it funcs	EMPTY
395	581	2	-1	0	-1	if ( pf && pf -> prim _ i2c )	EMPTY	EMPTY
395	582	3	-1	0	-1	return pf -> prim _ i2c ( pval , cout , putype , it )	it	EMPTY
395	585	1	0	0	-1	if ( ( it -> itype != asn1 _ itype _ primitive )	it itype	EMPTY
395	586	2	-1	0	-1	|| ( it -> utype != v _ asn1 _ boolean ) )	it utype	EMPTY
395	587	2	-1	0	-1	{	EMPTY	EMPTY
395	588	2	-1	0	-1	if ( ! * pval ) return - 1 ;	EMPTY	EMPTY
395	589	3	-1	0	-1	}	EMPTY	EMPTY
395	591	1	1	0	1	if ( it -> itype == asn1 _ itype _ mstring )	it itype	EMPTY
395	592	2	-1	0	-1	{	EMPTY	EMPTY
395	594	2	-1	1	-1	strtmp = ( asn1 _ string * ) * pval	EMPTY	EMPTY
395	595	2	-1	0	-1	utype = strtmp -> type	utype type	EMPTY
395	596	2	-1	0	-1	* putype = utype	utype	EMPTY
395	597	2	-1	0	-1	}	EMPTY	EMPTY
395	598	2	-1	0	-1	if ( it -> utype == v _ asn1 _ any )	it utype	EMPTY
395	599	2	-1	0	-1	{	EMPTY	EMPTY
395	601	2	-1	1	-1	asn1 _ type * typ ;	typ	EMPTY
395	602	2	-1	0	-1	typ = ( asn1 _ type * ) * pval	typ	EMPTY
395	603	2	-1	0	-1	utype = typ -> type	utype typ type	EMPTY
395	604	2	-1	0	-1	* putype = utype	utype	EMPTY
395	605	2	-1	0	-1	pval = & typ -> value . asn1 _ value	typ value	EMPTY
395	606	2	-1	0	-1	}	EMPTY	EMPTY
395	607	3	-1	0	-1	else utype = * putype ;	utype	EMPTY
395	609	1	0	0	0	switch ( utype )	utype	EMPTY
395	610	2	-1	0	-1	{	EMPTY	EMPTY
395	611	2	-1	0	-1	case v _ asn1 _ object :	EMPTY	EMPTY
395	612	2	-1	0	-1	otmp = ( asn1 _ object * ) * pval ;	EMPTY	EMPTY
395	613	2	-1	0	-1	cont = otmp -> data ;	data	EMPTY
395	614	2	-1	0	-1	len = otmp -> length ;	len length	EMPTY
395	615	3	-1	0	-1	break ;	EMPTY	EMPTY
395	617	1	0	0	-1	case v _ asn1 _ null :	EMPTY	EMPTY
395	618	2	-1	0	-1	cont = null ;	EMPTY	EMPTY
395	619	2	-1	0	-1	len = numconst ;	len	EMPTY
395	620	3	-1	0	-1	break ;	EMPTY	EMPTY
395	622	1	1	0	-1	case v _ asn1 _ boolean :	EMPTY	EMPTY
395	623	2	-1	0	-1	tbool = ( asn1 _ boolean * ) pval ;	EMPTY	EMPTY
395	624	2	-1	0	-1	if ( * tbool == - numconst )	EMPTY	EMPTY
395	625	2	-1	0	-1	return - numconst ;	EMPTY	EMPTY
395	626	2	-1	0	-1	if ( it -> utype != v _ asn1 _ any )	it utype	EMPTY
395	627	2	-1	0	-1	{	EMPTY	EMPTY
395	629	2	-1	1	-1	if ( * tbool && ( it -> size > 0 ) )	it size	EMPTY
395	630	2	-1	0	-1	return - 1	EMPTY	EMPTY
395	631	2	-1	0	-1	if ( ! * tbool && ! it -> size )	it size	EMPTY
395	632	2	-1	0	-1	return - 1	EMPTY	EMPTY
395	633	2	-1	0	-1	}	EMPTY	EMPTY
395	634	2	-1	0	-1	c = ( unsigned char ) * tbool ;	c	EMPTY
395	635	2	-1	0	-1	cont = & c ;	c	EMPTY
395	636	2	-1	0	-1	len = numconst ;	len	EMPTY
395	637	3	-1	0	-1	break ;	EMPTY	EMPTY
395	639	1	0	0	-1	case v _ asn1 _ bit _ string :	EMPTY	EMPTY
395	640	2	-1	0	-1	return i2c _ asn1 _ bit _ string ( ( asn1 _ bit _ string * ) * pval	EMPTY	EMPTY
395	641	2	-1	0	-1	cout ? & cout : null ) ;	EMPTY	EMPTY
395	642	3	-1	0	-1	break ;	EMPTY	EMPTY
395	644	1	1	0	-1	case v _ asn1 _ integer :	EMPTY	EMPTY
395	645	2	-1	0	-1	case v _ asn1 _ neg _ integer :	EMPTY	EMPTY
395	646	2	-1	0	-1	case v _ asn1 _ enumerated :	EMPTY	EMPTY
395	647	2	-1	0	-1	case v _ asn1 _ neg _ enumerated :	EMPTY	EMPTY
395	651	2	-1	1	-1	return i2c _ asn1 _ integer ( ( asn1 _ integer * ) * pval	EMPTY	EMPTY
395	652	2	-1	0	-1	cout ? & cout : null ) ;	EMPTY	EMPTY
395	653	3	-1	0	-1	break	EMPTY	EMPTY
395	655	1	1	0	-1	case v _ asn1 _ octet _ string :	EMPTY	EMPTY
395	656	2	-1	0	-1	case v _ asn1 _ numericstring :	EMPTY	EMPTY
395	657	2	-1	0	-1	case v _ asn1 _ printablestring :	EMPTY	EMPTY
395	658	2	-1	0	-1	case v _ asn1 _ t61string :	EMPTY	EMPTY
395	659	2	-1	0	-1	case v _ asn1 _ videotexstring :	EMPTY	EMPTY
395	660	2	-1	0	-1	case v _ asn1 _ ia5string :	EMPTY	EMPTY
395	661	2	-1	0	-1	case v _ asn1 _ utctime :	EMPTY	EMPTY
395	662	2	-1	0	-1	case v _ asn1 _ generalizedtime :	EMPTY	EMPTY
395	663	2	-1	0	-1	case v _ asn1 _ graphicstring :	EMPTY	EMPTY
395	664	2	-1	0	-1	case v _ asn1 _ visiblestring :	EMPTY	EMPTY
395	665	2	-1	0	-1	case v _ asn1 _ generalstring :	EMPTY	EMPTY
395	666	2	-1	0	-1	case v _ asn1 _ universalstring :	EMPTY	EMPTY
395	667	2	-1	0	-1	case v _ asn1 _ bmpstring :	EMPTY	EMPTY
395	668	2	-1	0	-1	case v _ asn1 _ utf8string :	EMPTY	EMPTY
395	669	2	-1	0	-1	case v _ asn1 _ sequence :	EMPTY	EMPTY
395	670	2	-1	0	-1	case v _ asn1 _ set :	EMPTY	EMPTY
395	671	2	-1	0	-1	default :	EMPTY	EMPTY
395	673	2	-1	1	-1	strtmp = ( asn1 _ string * ) * pval ;	EMPTY	EMPTY
395	675	2	-1	1	-1	if ( ( it -> size == asn1 _ tflg _ ndef )	it size	EMPTY
395	676	2	-1	0	-1	&& ( strtmp -> flags & asn1 _ string _ flag _ ndef ) )	flags	EMPTY
395	677	2	-1	0	-1	{	EMPTY	EMPTY
395	678	2	-1	0	-1	if ( cout )	EMPTY	EMPTY
395	679	2	-1	0	-1	{	EMPTY	EMPTY
395	680	2	-1	0	-1	strtmp -> data = cout ;	data	EMPTY
395	681	2	-1	0	-1	strtmp -> length = 0 ;	length	EMPTY
395	682	2	-1	0	-1	}	EMPTY	EMPTY
395	684	2	-1	1	-1	return - 2	EMPTY	EMPTY
395	685	2	-1	0	-1	}	EMPTY	EMPTY
395	686	2	-1	0	-1	cont = strtmp -> data ;	data	EMPTY
395	687	3	-1	0	-1	len = strtmp -> length ;	len length	EMPTY
395	689	1	0	0	-1	break ;	EMPTY	EMPTY
395	691	1	0	0	-1	}	EMPTY	EMPTY
395	692	2	-1	0	-1	if ( cout && len )	len	EMPTY
395	693	2	-1	0	-1	memcpy ( cout  cont  len ) ;	len	EMPTY
395	694	2	-1	0	-1	return len ;	len	EMPTY
395	695	3	-1	0	-1	}	EMPTY	EMPTY
402	94	1	0	0	-1	asn1 _ time * asn1 _ time _ set ( asn1 _ time * s  time _ t t )	s t	EMPTY
402	95	2	-1	0	-1	{	EMPTY	EMPTY
402	96	2	-1	0	-1	return asn1 _ time _ adj ( s , t , 0 , 0 )	s t	EMPTY
402	97	3	-1	0	-1	}	EMPTY	EMPTY
402	99	1	0	0	-1	asn1 _ time * asn1 _ time _ adj ( asn1 _ time * s  time _ t t	s t	EMPTY
402	100	2	-1	0	-1	int offset _ day  long offset _ sec )	offset _ day offset _ sec	EMPTY
402	101	2	-1	0	-1	{	EMPTY	EMPTY
402	102	2	-1	0	-1	struct tm * ts ;	tm	EMPTY
402	103	3	-1	0	-1	struct tm data ;	tm data	EMPTY
402	105	1	0	0	-1	ts = openssl _ gmtime ( & t , & data )	openssl _ gmtime t data	EMPTY
402	106	2	-1	0	-1	if ( ts == null )	EMPTY	EMPTY
402	107	2	-1	0	-1	{	EMPTY	EMPTY
402	108	2	-1	0	-1	openssl _ put _ error ( asn1 , asn1 _ r _ error _ getting _ time ) ;	EMPTY	EMPTY
402	109	2	-1	0	-1	return null ;	EMPTY	EMPTY
402	110	2	-1	0	-1	}	EMPTY	EMPTY
402	111	2	-1	0	-1	if ( offset _ day || offset _ sec )	offset _ day offset _ sec	EMPTY
402	112	2	-1	0	-1	{	EMPTY	EMPTY
402	113	2	-1	0	-1	if ( ! openssl _ gmtime _ adj ( ts , offset _ day , offset _ sec ) )	openssl _ gmtime _ adj offset _ day offset _ sec	EMPTY
402	114	2	-1	0	-1	return null ;	EMPTY	EMPTY
402	115	2	-1	0	-1	}	EMPTY	EMPTY
402	116	2	-1	0	-1	if ( ( ts -> tm _ year >= 50 ) && ( ts -> tm _ year < 150 ) )	EMPTY	EMPTY
402	117	2	-1	0	-1	return asn1 _ utctime _ adj ( s , t , offset _ day , offset _ sec )	s t offset _ day offset _ sec	EMPTY
402	118	2	-1	0	-1	return asn1 _ generalizedtime _ adj ( s , t , offset _ day , offset _ sec )	s t offset _ day offset _ sec	EMPTY
402	119	3	-1	0	-1	}	EMPTY	EMPTY
402	121	1	0	0	-1	int asn1 _ time _ check ( asn1 _ time * t )	t	EMPTY
402	122	2	-1	0	-1	{	EMPTY	EMPTY
402	123	2	-1	0	-1	if ( t -> type == v _ asn1 _ generalizedtime )	t type	EMPTY
402	124	2	-1	0	-1	return asn1 _ generalizedtime _ check ( t ) ;	t	EMPTY
402	125	2	-1	0	-1	else if ( t -> type == v _ asn1 _ utctime )	t type	EMPTY
402	126	2	-1	0	-1	return asn1 _ utctime _ check ( t )	t	EMPTY
402	127	2	-1	0	-1	return 0	EMPTY	EMPTY
402	128	3	-1	0	-1	}	EMPTY	EMPTY
402	131	1	0	0	-1	asn1 _ generalizedtime * asn1 _ time _ to _ generalizedtime ( asn1 _ time * t  asn1 _ generalizedtime * * out )	asn1 _ time _ to _ generalizedtime t out	EMPTY
402	132	2	-1	0	-1	{	EMPTY	EMPTY
402	133	2	-1	0	-1	asn1 _ generalizedtime * ret ;	ret	EMPTY
402	134	2	-1	0	-1	char * str ;	str	EMPTY
402	135	3	-1	0	-1	int newlen ;	EMPTY	EMPTY
402	137	1	0	0	0	return null ;	EMPTY	EMPTY
402	139	1	0	0	0	if ( ! out || ! * out )	out out	EMPTY
402	140	2	-1	0	-1	{	EMPTY	EMPTY
402	141	2	-1	0	-1	if ( ! ( ret = asn1 _ generalizedtime _ new ( ) ) )	ret	EMPTY
402	142	2	-1	0	-1	return null ;	EMPTY	EMPTY
402	143	2	-1	0	-1	if ( out ) * out = ret ;	out out ret	EMPTY
402	144	2	-1	0	-1	}	EMPTY	EMPTY
402	145	3	-1	0	-1	else ret = * out	ret out	EMPTY
402	148	1	0	0	-1	if ( t -> type == v _ asn1 _ generalizedtime )	t type	EMPTY
402	149	2	-1	0	-1	{	EMPTY	EMPTY
402	150	2	-1	0	-1	if ( ! asn1 _ string _ set ( ret , t -> data , t -> length ) )	asn1 _ string _ set ret t data t length	EMPTY
402	151	2	-1	0	-1	return null ;	EMPTY	EMPTY
402	152	2	-1	0	-1	return ret ;	ret	EMPTY
402	153	3	-1	0	-1	}	EMPTY	EMPTY
402	156	1	1	0	-1	if ( ! asn1 _ string _ set ( ret  null  t -> length + numconst ) )	asn1 _ string _ set ret t length	EMPTY
402	157	2	-1	0	-1	return null ;	EMPTY	EMPTY
402	159	2	-1	1	-1	newlen = t -> length + 2 + 1	t length	EMPTY
402	160	3	-1	0	-1	str = ( char * ) ret -> data	str ret data	EMPTY
402	162	1	0	0	-1	if ( t -> data [ 0 ] >= '5' ) buf _ strlcpy ( str ,  " 19 "  , newlen ) ;	t data buf _ strlcpy str	EMPTY
402	163	3	-1	0	-1	else buf _ strlcpy ( str ,  " 20 "  , newlen )	buf _ strlcpy str	EMPTY
402	165	1	0	0	0	buf _ strlcat ( str , ( char * ) t -> data , newlen )	buf _ strlcat str t data	EMPTY
402	167	1	0	0	0	return ret	ret	EMPTY
402	168	3	-1	0	-1	}	EMPTY	EMPTY
402	170	1	0	0	-1	int asn1 _ time _ set _ string ( asn1 _ time * s  const char * str )	s str	EMPTY
402	171	2	-1	0	-1	{	EMPTY	EMPTY
402	172	3	-1	0	-1	asn1 _ time t ;	t	EMPTY
402	174	1	0	0	-1	t . length = strlen ( str ) ;	t length str	EMPTY
402	175	2	-1	0	-1	t . data = ( unsigned char * ) str ;	t data str	EMPTY
402	176	2	-1	0	-1	t . flags = numconst ;	t flags	EMPTY
402	177	2	-1	0	-1	t	t	EMPTY
402	178	3	-1	0	-1	t . type = v _ asn1 _ utctime ;	t type	EMPTY
402	180	1	0	0	0	if ( ! asn1 _ time _ check ( & t ) )	t	EMPTY
402	181	2	-1	0	-1	{	EMPTY	EMPTY
402	182	2	-1	0	-1	t . type = v _ asn1 _ generalizedtime ;	t type	EMPTY
402	183	2	-1	0	-1	if ( ! asn1 _ time _ check ( & t ) )	t	EMPTY
402	184	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
402	185	2	-1	0	-1	}	EMPTY	EMPTY
402	186	2	-1	0	-1	if	EMPTY	EMPTY
402	187	2	-1	0	-1	if ( s && ! asn1 _ string _ copy ( ( asn1 _ string * ) s  ( asn1 _ string * ) & t ) )	s s t	EMPTY
402	188	3	-1	0	-1	return numconst ;	EMPTY	EMPTY
402	190	1	0	0	0	return numconst ;	EMPTY	EMPTY
402	191	3	-1	0	-1	}	EMPTY	EMPTY
402	193	1	0	0	-1	static int asn1 _ time _ to _ tm ( struct tm * tm  const asn1 _ time * t )	tm tm t	EMPTY
402	194	2	-1	0	-1	{	EMPTY	EMPTY
402	195	2	-1	0	-1	if ( t == null )	t	EMPTY
402	196	2	-1	0	-1	{	EMPTY	EMPTY
402	197	2	-1	0	-1	time _ t now _ t ;	EMPTY	EMPTY
402	198	2	-1	0	-1	time ( & now _ t ) ;	EMPTY	EMPTY
402	199	2	-1	0	-1	if ( openssl _ gmtime ( & now _ t  tm ) )	openssl _ gmtime tm	EMPTY
402	200	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
402	201	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
402	202	2	-1	0	-1	}	EMPTY	EMPTY
402	203	2	-1	0	-1	if	EMPTY	EMPTY
402	204	2	-1	0	-1	if ( t -> type == v _ asn1 _ utctime )	t type	EMPTY
402	205	2	-1	0	-1	return asn1 _ utctime _ to _ tm ( tm  t ) ;	tm t	EMPTY
402	206	2	-1	0	-1	if ( t -> type == v _ asn1 _ generalizedtime )	t type	EMPTY
402	207	3	-1	0	-1	return asn1 _ generalizedtime _ to _ tm ( tm  t ) ;	tm t	EMPTY
402	209	1	0	0	0	return numconst ;	EMPTY	EMPTY
402	210	3	-1	0	-1	}	EMPTY	EMPTY
402	212	1	0	0	-1	int asn1 _ time _ diff ( int * pday  int * psec	EMPTY	EMPTY
402	213	2	-1	0	-1	const asn1 _ time * from  const asn1 _ time * to )	from to	EMPTY
402	214	2	-1	0	-1	{	EMPTY	EMPTY
402	215	2	-1	0	-1	struct tm tm _ from  tm _ to ;	tm	EMPTY
402	216	2	-1	0	-1	if ( ! asn1 _ time _ to _ tm ( & tm _ from  from ) )	from	EMPTY
402	217	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
402	218	2	-1	0	-1	if ( ! asn1 _ time _ to _ tm ( & tm _ to  to ) )	to	EMPTY
402	219	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
402	220	2	-1	0	-1	return openssl _ gmtime _ diff ( pday  psec  & tm _ from  & tm _ to ) ;	openssl _ gmtime _ diff	EMPTY
402	221	3	-1	0	-1	}	EMPTY	EMPTY
405	66	1	0	0	-1	static int asn1 _ collate _ primitive ( asn1 _ string * a  asn1 _ const _ ctx * c ) ;	asn1 _ collate _ primitive a c	EMPTY
405	69	1	1	0	-1	asn1 _ string * d2i _ asn1 _ type _ bytes ( asn1 _ string * * a  const unsigned char * * pp	d2i _ asn1 _ type _ bytes a pp	EMPTY
405	70	2	-1	0	-1	long length  int type )	length type	EMPTY
405	71	2	-1	0	-1	{	EMPTY	EMPTY
405	72	2	-1	1	-1	asn1 _ string * ret = null ;	ret	EMPTY
405	73	2	-1	0	-1	const unsigned char * p ;	p	EMPTY
405	74	2	-1	0	-1	unsigned char * s ;	s	EMPTY
405	75	2	-1	0	-1	long len ;	len	EMPTY
405	76	2	-1	0	-1	int inf , tag , xclass ;	inf tag xclass	EMPTY
405	77	3	-1	0	-1	int i = 0 ;	i	EMPTY
405	79	1	0	0	-1	p = * pp	p pp	EMPTY
405	80	2	-1	0	-1	inf = asn1 _ get _ object ( & p , & len , & tag , & xclass , length )	inf asn1 _ get _ object p len tag xclass length	EMPTY
405	81	3	-1	0	-1	if ( inf & 0x80 ) goto err	inf	EMPTY
405	83	1	0	0	0	if ( tag >= 32 )	tag	EMPTY
405	84	2	-1	0	-1	{	EMPTY	EMPTY
405	85	2	-1	0	-1	i = asn1 _ r _ tag _ value _ too _ high ;	i	EMPTY
405	86	2	-1	0	-1	goto err ;	EMPTY	EMPTY
405	87	2	-1	0	-1	}	EMPTY	EMPTY
405	88	2	-1	0	-1	if ( ! ( asn1 _ tag2bit ( tag ) & type ) )	tag type	EMPTY
405	89	2	-1	0	-1	{	EMPTY	EMPTY
405	90	2	-1	0	-1	i = asn1 _ r _ wrong _ type ;	i	EMPTY
405	91	2	-1	0	-1	goto err ;	EMPTY	EMPTY
405	92	3	-1	0	-1	}	EMPTY	EMPTY
405	95	1	1	1	1	if ( tag == v _ asn1 _ bit _ string )	tag	EMPTY
405	96	3	-1	0	-1	return ( d2i _ asn1 _ bit _ string ( a , pp , length ) )	a pp length	EMPTY
405	98	1	0	0	0	if ( ( a == null ) || ( ( * a ) == null ) )	a a	EMPTY
405	99	2	-1	0	-1	{	EMPTY	EMPTY
405	100	2	-1	0	-1	if ( ( ret = asn1 _ string _ new ( ) ) == null ) return ( null ) ;	ret	EMPTY
405	101	2	-1	0	-1	}	EMPTY	EMPTY
405	102	2	-1	0	-1	else	EMPTY	EMPTY
405	103	3	-1	0	-1	ret = ( * a )	ret a	EMPTY
405	105	1	0	0	0	if ( len != numconst )	len	EMPTY
405	106	2	-1	0	-1	{	EMPTY	EMPTY
405	107	2	-1	0	-1	s = ( unsigned char * ) openssl _ malloc ( ( int ) len + 1 )	s len	EMPTY
405	108	2	-1	0	-1	if ( s == null )	s	EMPTY
405	109	2	-1	0	-1	{	EMPTY	EMPTY
405	110	2	-1	0	-1	i = err _ r _ malloc _ failure ;	i	EMPTY
405	111	2	-1	0	-1	goto err ;	EMPTY	EMPTY
405	112	2	-1	0	-1	}	EMPTY	EMPTY
405	113	2	-1	0	-1	memcpy ( s  p  ( int ) len ) ;	s p len	EMPTY
405	114	2	-1	0	-1	s [ len ] = '\0'	s len	EMPTY
405	115	2	-1	0	-1	p += len	p len	EMPTY
405	116	2	-1	0	-1	}	EMPTY	EMPTY
405	117	2	-1	0	-1	else	EMPTY	EMPTY
405	118	3	-1	0	-1	s = null ;	s	EMPTY
405	120	1	0	0	0	if ( ret -> data != null ) openssl _ free ( ret -> data )	ret data ret data	EMPTY
405	121	2	-1	0	-1	ret -> length = ( int ) len	ret length len	EMPTY
405	122	2	-1	0	-1	ret -> data = s	ret data s	EMPTY
405	123	2	-1	0	-1	ret -> type = tag	ret type tag	EMPTY
405	124	2	-1	0	-1	if ( a != null ) ( * a ) = ret	a a ret	EMPTY
405	125	2	-1	0	-1	* pp = p	pp p	EMPTY
405	126	2	-1	0	-1	return ( ret )	ret	EMPTY
405	127	2	-1	0	-1	err :	EMPTY	EMPTY
405	128	2	-1	0	-1	openssl _ put _ error ( asn1  i ) ;	i	EMPTY
405	129	2	-1	0	-1	if ( ( ret != null ) && ( ( a == null ) || ( * a != ret ) ) )	ret a a ret	EMPTY
405	130	2	-1	0	-1	asn1 _ string _ free ( ret )	ret	EMPTY
405	131	2	-1	0	-1	return ( null )	EMPTY	EMPTY
405	132	3	-1	0	-1	}	EMPTY	EMPTY
405	134	1	0	0	-1	int i2d _ asn1 _ bytes ( asn1 _ string * a  unsigned char * * pp  int tag  int xclass )	a pp tag xclass	EMPTY
405	135	2	-1	0	-1	{	EMPTY	EMPTY
405	136	2	-1	0	-1	int ret  r  constructed ;	ret r	EMPTY
405	137	3	-1	0	-1	unsigned char * p ;	p	EMPTY
405	139	1	0	0	0	return ( numconst ) ;	EMPTY	EMPTY
405	141	1	0	0	0	if ( tag == v _ asn1 _ bit _ string )	tag	EMPTY
405	142	2	-1	0	-1	return ( i2d _ asn1 _ bit _ string ( a  pp ) ) ;	a pp	EMPTY
405	143	2	-1	0	-1	ret	ret	EMPTY
405	144	2	-1	0	-1	ret = a -> length ;	ret a length	EMPTY
405	145	2	-1	0	-1	r = asn1 _ object _ size ( numconst  ret  tag ) ;	r ret tag	EMPTY
405	146	2	-1	0	-1	return ( r ) ;	r	EMPTY
405	147	3	-1	0	-1	p = * pp ;	p pp	EMPTY
405	149	1	0	0	0	if ( ( tag == v _ asn1 _ sequence ) || ( tag == v _ asn1 _ set ) )	tag tag	EMPTY
405	150	2	-1	0	-1	constructed = numconst ;	EMPTY	EMPTY
405	151	2	-1	0	-1	else	EMPTY	EMPTY
405	152	2	-1	0	-1	constructed = numconst ;	EMPTY	EMPTY
405	153	2	-1	0	-1	asn1 _ put _ object ( & p  constructed  ret  tag  xclass ) ;	p ret tag xclass	EMPTY
405	154	2	-1	0	-1	memcpy ( p  a -> data  a -> length ) ;	p a data a length	EMPTY
405	155	3	-1	0	-1	p += a -> length ;	p a length	EMPTY
405	157	1	0	0	0	return ( r ) ;	r	EMPTY
405	158	3	-1	0	-1	}	EMPTY	EMPTY
405	160	1	0	0	-1	asn1 _ string * d2i _ asn1 _ bytes ( asn1 _ string * * a  const unsigned char * * pp	a pp	EMPTY
405	161	2	-1	0	-1	long length  int ptag  int pclass )	length	EMPTY
405	162	2	-1	0	-1	{	EMPTY	EMPTY
405	163	2	-1	0	-1	asn1 _ string * ret = null ;	ret	EMPTY
405	164	2	-1	0	-1	const unsigned char * p ;	p	EMPTY
405	165	2	-1	0	-1	unsigned char * s ;	s	EMPTY
405	166	2	-1	0	-1	long len ;	len	EMPTY
405	167	2	-1	0	-1	int inf  tag  xclass ;	inf tag xclass	EMPTY
405	168	3	-1	0	-1	int i = numconst ;	i	EMPTY
405	170	1	0	0	0	if ( ( a == null ) || ( ( * a ) == null ) )	a a	EMPTY
405	171	2	-1	0	-1	{	EMPTY	EMPTY
405	172	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
405	173	2	-1	0	-1	}	EMPTY	EMPTY
405	174	2	-1	0	-1	else	EMPTY	EMPTY
405	175	3	-1	0	-1	ret = ( * a ) ;	ret a	EMPTY
405	177	1	0	0	-1	p = * pp ;	p pp	EMPTY
405	178	2	-1	0	-1	inf = asn1 _ get _ object ( & p  & len  & tag  & xclass  length ) ;	inf asn1 _ get _ object p len tag xclass length	EMPTY
405	179	2	-1	0	-1	if ( inf & numconst )	inf	EMPTY
405	180	2	-1	0	-1	{	EMPTY	EMPTY
405	181	2	-1	0	-1	i = asn1 _ r _ bad _ object _ header ;	i	EMPTY
405	182	2	-1	0	-1	goto err ;	EMPTY	EMPTY
405	183	3	-1	0	-1	}	EMPTY	EMPTY
405	185	1	0	0	0	if ( tag != ptag )	tag	EMPTY
405	186	2	-1	0	-1	{	EMPTY	EMPTY
405	187	2	-1	0	-1	i = asn1 _ r _ wrong _ tag ;	i	EMPTY
405	188	2	-1	0	-1	goto err ;	EMPTY	EMPTY
405	189	3	-1	0	-1	}	EMPTY	EMPTY
405	191	1	0	0	0	if ( inf & v _ asn1 _ constructed )	inf	EMPTY
405	192	2	-1	0	-1	{	EMPTY	EMPTY
405	193	3	-1	0	-1	asn1 _ const _ ctx c ;	c	EMPTY
405	195	1	0	0	-1	c . pp = pp ;	c pp pp	EMPTY
405	196	2	-1	0	-1	c . p = p ;	c p p	EMPTY
405	197	2	-1	0	-1	c . inf = inf ;	c inf inf	EMPTY
405	198	2	-1	0	-1	c . slen = len ;	c slen len	EMPTY
405	199	2	-1	0	-1	c . tag = ptag ;	c tag	EMPTY
405	200	2	-1	0	-1	c . xclass = pclass ;	c xclass	EMPTY
405	201	2	-1	0	-1	c . max = ( length == numconst ) ? numconst : ( p + length ) ;	c max length p length	EMPTY
405	202	2	-1	0	-1	if ( ! asn1 _ collate _ primitive ( ret  & c ) ) goto	asn1 _ collate _ primitive ret c	EMPTY
405	203	2	-1	0	-1	goto err ; else	EMPTY	EMPTY
405	204	2	-1	0	-1	else	EMPTY	EMPTY
405	205	2	-1	0	-1	{	EMPTY	EMPTY
405	206	2	-1	0	-1	p = c . p ;	p c p	EMPTY
405	207	2	-1	0	-1	}	EMPTY	EMPTY
405	208	2	-1	0	-1	}	EMPTY	EMPTY
405	209	2	-1	0	-1	else	EMPTY	EMPTY
405	210	2	-1	0	-1	{	EMPTY	EMPTY
405	211	2	-1	0	-1	if ( len != numconst )	len	EMPTY
405	212	2	-1	0	-1	{	EMPTY	EMPTY
405	213	2	-1	0	-1	if ( ( ret -> length < len ) || ( ret -> data == null ) )	ret length len ret data	EMPTY
405	214	2	-1	0	-1	{	EMPTY	EMPTY
405	215	2	-1	0	-1	if ( ret -> data != null ) openssl _ free ( ret -> data ) ;	ret data ret data	EMPTY
405	216	2	-1	0	-1	s = ( unsigned char * ) openssl _ malloc ( ( int ) len + numconst ) ;	s len	EMPTY
405	217	2	-1	0	-1	if ( s == null )	s	EMPTY
405	218	2	-1	0	-1	{	EMPTY	EMPTY
405	219	2	-1	0	-1	i = err _ r _ malloc _ failure ;	i	EMPTY
405	220	2	-1	0	-1	goto err ;	EMPTY	EMPTY
405	221	2	-1	0	-1	}	EMPTY	EMPTY
405	222	2	-1	0	-1	}	EMPTY	EMPTY
405	223	2	-1	0	-1	else	EMPTY	EMPTY
405	224	3	-1	0	-1	s = ret -> data ;	s ret data	EMPTY
405	225	1	0	0	-1	memcpy ( s  p  ( int ) len ) ;	s p len	EMPTY
405	226	2	-1	0	-1	s [ len ] = '\\0' ;	s len	EMPTY
405	227	2	-1	0	-1	p += len ;	p len	EMPTY
405	228	2	-1	0	-1	}	EMPTY	EMPTY
405	229	2	-1	0	-1	else	EMPTY	EMPTY
405	230	2	-1	0	-1	{	EMPTY	EMPTY
405	231	2	-1	0	-1	s = null ;	s	EMPTY
405	232	2	-1	0	-1	if ( ret -> data != null ) openssl _ free ( ret -> data ) ;	ret data ret data	EMPTY
405	233	3	-1	0	-1	}	EMPTY	EMPTY
405	235	1	0	0	-1	ret -> length = ( int ) len ;	ret length len	EMPTY
405	236	2	-1	0	-1	ret -> data = s ;	ret data s	EMPTY
405	237	2	-1	0	-1	ret -> type = ptag ;	ret type	EMPTY
405	238	3	-1	0	-1	}	EMPTY	EMPTY
405	240	1	0	0	0	if ( a != null ) ( * a ) = ret ;	a a ret	EMPTY
405	242	1	0	0	0	return ( ret ) ;	ret	EMPTY
405	243	2	-1	0	-1	err :	EMPTY	EMPTY
405	244	2	-1	0	-1	if ( ( ret != null ) && ( ( a == null ) || ( * a != ret ) ) )	ret a a ret	EMPTY
405	245	2	-1	0	-1	asn1 _ string _ free ( ret ) ;	ret	EMPTY
405	246	2	-1	0	-1	openssl _ put _ error ( asn1  i ) ;	i	EMPTY
405	247	2	-1	0	-1	return ( null ) ;	EMPTY	EMPTY
405	248	3	-1	0	-1	}	EMPTY	EMPTY
405	255	1	1	0	-1	static int asn1 _ collate _ primitive ( asn1 _ string * a  asn1 _ const _ ctx * c )	asn1 _ collate _ primitive a c	EMPTY
405	256	2	-1	0	-1	{	EMPTY	EMPTY
405	257	2	-1	1	-1	asn1 _ string * os = null ;	EMPTY	EMPTY
405	258	2	-1	0	-1	buf _ mem b ;	b	EMPTY
405	259	3	-1	0	-1	int num ;	num	EMPTY
405	261	1	0	0	-1	b . length = 0	b length	EMPTY
405	262	2	-1	0	-1	b . max = 0	b max	EMPTY
405	263	3	-1	0	-1	b . data = null ;	b data	EMPTY
405	265	1	0	0	0	if ( a == null )	a	EMPTY
405	266	2	-1	0	-1	{	EMPTY	EMPTY
405	267	2	-1	0	-1	c -> error = err _ r _ passed _ null _ parameter ;	c error	EMPTY
405	268	2	-1	0	-1	goto err ;	EMPTY	EMPTY
405	269	3	-1	0	-1	}	EMPTY	EMPTY
405	271	1	0	0	-1	num = 0	num	EMPTY
405	272	2	-1	0	-1	for ( ; ; )	EMPTY	EMPTY
405	273	2	-1	0	-1	{	EMPTY	EMPTY
405	274	2	-1	0	-1	if ( c -> inf & 1 )	c inf	EMPTY
405	275	2	-1	0	-1	{	EMPTY	EMPTY
405	276	2	-1	0	-1	c -> eos = asn1 _ const _ check _ infinite _ end ( & c -> p ,	c eos c p	EMPTY
405	277	2	-1	0	-1	( long ) ( c -> max - c -> p ) ) ;	c max c p	EMPTY
405	278	2	-1	0	-1	if ( c -> eos ) break ;	c eos	EMPTY
405	279	2	-1	0	-1	}	EMPTY	EMPTY
405	280	2	-1	0	-1	else	EMPTY	EMPTY
405	281	2	-1	0	-1	{	EMPTY	EMPTY
405	282	2	-1	0	-1	if ( c -> slen <= 0 ) break ;	c slen	EMPTY
405	283	3	-1	0	-1	}	EMPTY	EMPTY
405	285	1	0	0	-1	c -> q = c -> p ;	c q c p	EMPTY
405	286	2	-1	0	-1	if ( d2i _ asn1 _ bytes ( & os , & c -> p , c -> max - c -> p , c -> tag , c -> xclass )	c p c max c p c tag c xclass	EMPTY
405	287	2	-1	0	-1	== null )	EMPTY	EMPTY
405	288	2	-1	0	-1	{	EMPTY	EMPTY
405	289	2	-1	0	-1	c -> error = err _ r _ asn1 _ lib ;	c error	EMPTY
405	290	2	-1	0	-1	goto err ;	EMPTY	EMPTY
405	291	3	-1	0	-1	}	EMPTY	EMPTY
405	293	1	0	0	0	if ( ! buf _ mem _ grow _ clean ( & b , num + os -> length ) )	buf _ mem _ grow _ clean b num length	EMPTY
405	294	2	-1	0	-1	{	EMPTY	EMPTY
405	295	2	-1	0	-1	c -> error = err _ r _ buf _ lib ;	c error	EMPTY
405	296	2	-1	0	-1	goto err ;	EMPTY	EMPTY
405	297	2	-1	0	-1	}	EMPTY	EMPTY
405	298	2	-1	0	-1	memcpy ( & ( b . data [ num ] ) , os -> data , os -> length ) ;	b data num data length	EMPTY
405	299	2	-1	0	-1	if ( ! ( c -> inf & 1 ) )	c inf	EMPTY
405	300	2	-1	0	-1	c -> slen -= ( c -> p - c -> q ) ;	c slen c p c q	EMPTY
405	301	2	-1	0	-1	num += os -> length ;	num length	EMPTY
405	302	3	-1	0	-1	}	EMPTY	EMPTY
405	304	1	0	0	0	if ( ! asn1 _ const _ finish ( c ) ) goto err	c	EMPTY
405	306	1	0	0	-1	a -> length = num	a length num	EMPTY
405	307	2	-1	0	-1	if ( a -> data != null ) openssl _ free ( a -> data )	a data a data	EMPTY
405	308	2	-1	0	-1	a -> data = ( unsigned char * ) b . data	a data b data	EMPTY
405	309	2	-1	0	-1	if ( os != null ) asn1 _ string _ free ( os )	EMPTY	EMPTY
405	310	2	-1	0	-1	return ( 1 )	EMPTY	EMPTY
405	311	2	-1	0	-1	err :	EMPTY	EMPTY
405	312	2	-1	0	-1	openssl _ put _ error ( asn1  c -> error ) ;	c error	EMPTY
405	313	2	-1	0	-1	if ( os != null ) asn1 _ string _ free ( os )	EMPTY	EMPTY
405	314	2	-1	0	-1	if ( b . data != null ) openssl _ free ( b . data )	b data b data	EMPTY
405	315	2	-1	0	-1	return ( 0 )	EMPTY	EMPTY
405	316	3	-1	0	-1	}	EMPTY	EMPTY
411	27	1	0	0	-1	struct engine _ st {	EMPTY	EMPTY
411	28	2	-1	0	-1	rsa _ method * rsa _ method ;	EMPTY	EMPTY
411	29	2	-1	0	-1	ecdsa _ method * ecdsa _ method ;	EMPTY	EMPTY
411	30	3	-1	0	-1	} ;	EMPTY	EMPTY
411	32	1	0	0	-1	engine * engine _ new ( void ) {	engine _ new	EMPTY
411	33	2	-1	0	-1	engine * engine = openssl _ malloc ( sizeof ( engine ) ) ;	engine	EMPTY
411	34	2	-1	0	-1	if ( engine == null ) {	engine	EMPTY
411	35	2	-1	0	-1	return null ;	EMPTY	EMPTY
411	36	3	-1	0	-1	}	EMPTY	EMPTY
411	38	1	0	0	0	memset ( engine  numconst  sizeof ( engine ) ) ;	engine	EMPTY
411	39	2	-1	0	-1	return engine	engine	EMPTY
411	40	3	-1	0	-1	}	EMPTY	EMPTY
411	42	1	1	0	-1	void engine _ free ( engine * engine ) {	engine _ free engine	EMPTY
411	44	2	-1	1	-1	openssl _ free ( engine ) ;	engine	EMPTY
411	45	3	-1	0	-1	}	EMPTY	EMPTY
411	52	1	0	0	-1	static int set _ method ( void * * out _ member  const void * method  size _ t method _ size	set _ method out _ member method method _ size	EMPTY
411	53	2	-1	0	-1	size _ t compiled _ size ) {	EMPTY	EMPTY
411	54	2	-1	0	-1	const struct openssl _ method _ common _ st * common = method ;	openssl _ method _ common _ st method	EMPTY
411	55	2	-1	0	-1	if ( method _ size != compiled _ size || ! common -> is _ static ) {	method _ size is _ static	EMPTY
411	56	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
411	57	3	-1	0	-1	}	EMPTY	EMPTY
411	59	1	0	0	-1	* out _ member = ( void * ) method	out _ member method	EMPTY
411	60	2	-1	0	-1	return 1	EMPTY	EMPTY
411	61	3	-1	0	-1	}	EMPTY	EMPTY
411	63	1	0	0	-1	int engine _ set _ rsa _ method ( engine * engine  const rsa _ method * method	engine method	EMPTY
411	64	2	-1	0	-1	size _ t method _ size ) {	method _ size	EMPTY
411	65	2	-1	0	-1	return set _ method ( ( void * * ) & engine -> rsa _ method , method , method _ size ,	set _ method engine method method _ size	EMPTY
411	66	2	-1	0	-1	sizeof ( rsa _ method ) )	EMPTY	EMPTY
411	67	3	-1	0	-1	}	EMPTY	EMPTY
411	69	1	0	0	-1	rsa _ method * engine _ get _ rsa _ method ( const engine * engine ) {	engine	EMPTY
411	70	2	-1	0	-1	return engine -> rsa _ method	engine	EMPTY
411	71	3	-1	0	-1	}	EMPTY	EMPTY
411	73	1	0	0	-1	int engine _ set _ ecdsa _ method ( engine * engine  const ecdsa _ method * method	engine method	EMPTY
411	74	2	-1	0	-1	size _ t method _ size ) {	method _ size	EMPTY
411	75	2	-1	0	-1	return set _ method ( ( void * * ) & engine -> ecdsa _ method , method , method _ size ,	set _ method engine method method _ size	EMPTY
411	76	2	-1	0	-1	sizeof ( ecdsa _ method ) )	EMPTY	EMPTY
411	77	3	-1	0	-1	}	EMPTY	EMPTY
411	79	1	0	0	-1	ecdsa _ method * engine _ get _ ecdsa _ method ( const engine * engine ) {	engine	EMPTY
411	80	2	-1	0	-1	return engine -> ecdsa _ method	engine	EMPTY
411	81	3	-1	0	-1	}	EMPTY	EMPTY
411	83	1	0	0	-1	void method _ ref ( void * method _ in ) {	method _ ref	EMPTY
411	84	2	-1	0	-1	assert ( ( ( struct openssl _ method _ common _ st * ) method _ in ) -> is _ static ) ;	openssl _ method _ common _ st is _ static	EMPTY
411	85	3	-1	0	-1	}	EMPTY	EMPTY
411	87	1	0	0	-1	void method _ unref ( void * method _ in ) {	method _ unref	EMPTY
411	88	3	-1	0	-1	struct openssl _ method _ common _ st * method = method _ in ;	openssl _ method _ common _ st method	EMPTY
411	90	1	0	0	0	if ( method == null ) {	method	EMPTY
411	91	2	-1	0	-1	return ;	EMPTY	EMPTY
411	92	2	-1	0	-1	}	EMPTY	EMPTY
411	93	2	-1	0	-1	assert ( method -> is _ static ) ;	method is _ static	EMPTY
411	94	3	-1	0	-1	}	EMPTY	EMPTY
411	96	1	0	0	-1	openssl _ declare _ error _ reason ( engine  operation _ not _ supported ) ;	EMPTY	EMPTY
417	82	1	1	0	-1	static const struct curve _ data p224 = {	curve _ data	EMPTY
417	83	2	-1	0	-1	strlit	EMPTY	EMPTY
417	84	2	-1	0	-1	numconst	EMPTY	EMPTY
417	85	2	-1	0	-1	numconst	EMPTY	EMPTY
417	86	2	-1	1	-1	{	EMPTY	EMPTY
417	87	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	88	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	89	2	-1	0	-1	numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	91	2	-1	1	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	92	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	93	2	-1	0	-1	numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	95	2	-1	1	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	96	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	97	2	-1	0	-1	numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	99	2	-1	1	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	100	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	101	2	-1	0	-1	numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	103	2	-1	1	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	104	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	105	2	-1	0	-1	numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	107	2	-1	1	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	108	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	109	2	-1	0	-1	numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	110	3	-1	0	-1	} } ;	EMPTY	EMPTY
417	112	1	1	0	-1	static const struct curve _ data p256 = {	curve _ data	EMPTY
417	113	2	-1	0	-1	strlit	EMPTY	EMPTY
417	114	2	-1	0	-1	numconst	EMPTY	EMPTY
417	115	2	-1	0	-1	numconst	EMPTY	EMPTY
417	116	2	-1	1	-1	{	EMPTY	EMPTY
417	117	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	118	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	119	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	121	2	-1	1	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	122	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	123	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	125	2	-1	1	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	126	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	127	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	129	2	-1	1	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	130	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	131	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	133	2	-1	1	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	134	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	135	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	137	2	-1	1	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	138	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	139	3	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst } } ;	EMPTY	EMPTY
417	141	1	1	0	-1	static const struct curve _ data p384 = {	curve _ data	EMPTY
417	142	2	-1	0	-1	strlit	EMPTY	EMPTY
417	143	2	-1	0	-1	numconst	EMPTY	EMPTY
417	144	2	-1	0	-1	numconst	EMPTY	EMPTY
417	145	2	-1	1	-1	{	EMPTY	EMPTY
417	146	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	147	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	148	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	149	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	151	2	-1	1	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	152	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	153	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	154	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	156	2	-1	1	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	157	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	158	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	159	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	161	2	-1	1	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	162	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	163	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	164	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	166	2	-1	1	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	167	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	168	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	169	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	171	2	-1	1	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	172	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	173	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	174	3	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst } } ;	EMPTY	EMPTY
417	176	1	1	0	-1	static const struct curve _ data p521 = {	curve _ data	EMPTY
417	177	2	-1	0	-1	strlit	EMPTY	EMPTY
417	178	2	-1	0	-1	numconst	EMPTY	EMPTY
417	179	2	-1	0	-1	numconst	EMPTY	EMPTY
417	180	2	-1	1	-1	{	EMPTY	EMPTY
417	181	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	182	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	183	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	184	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	185	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	186	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	188	2	-1	1	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	189	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	190	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	191	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	192	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	193	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	195	2	-1	1	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	196	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	197	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	198	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	199	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	200	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	202	2	-1	1	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	203	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	204	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	205	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	206	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	207	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	209	3	-1	1	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	210	1	1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	211	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	212	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	213	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	214	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	216	2	-1	1	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	217	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	218	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	219	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	220	2	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst	EMPTY	EMPTY
417	221	3	-1	0	-1	numconst  numconst  numconst  numconst  numconst  numconst } } ;	EMPTY	EMPTY
417	225	1	1	1	-1	# if defined ( openssl _ 64 _ bit ) && ! defined ( openssl _ windows ) && \\	EMPTY	EMPTY
417	226	2	-1	0	-1	! defined ( memory _ sanitizer )	EMPTY	EMPTY
417	227	2	-1	0	-1	# define boringssl _ use _ int128 _ code	EMPTY	EMPTY
417	228	3	-1	0	-1	# endif	EMPTY	EMPTY
417	230	1	0	0	-1	const struct built _ in _ curve openssl _ built _ in _ curves [ ] = {	openssl _ built _ in _ curves	EMPTY
417	231	2	-1	0	-1	{ nid _ secp521r1  & p521  numconst }	EMPTY	EMPTY
417	232	2	-1	0	-1	{ nid _ secp384r1  & p384  numconst }	EMPTY	EMPTY
417	233	2	-1	0	-1	{	EMPTY	EMPTY
417	234	2	-1	0	-1	nid _ x9 _ 62 _ prime256v1  & p256	EMPTY	EMPTY
417	235	2	-1	0	-1	# if defined ( boringssl _ use _ int128 _ code )	EMPTY	EMPTY
417	236	2	-1	0	-1	# if ! defined ( openssl _ no _ asm ) && defined ( openssl _ x86 _ 64 ) && \\	EMPTY	EMPTY
417	237	2	-1	0	-1	! defined ( openssl _ small )	EMPTY	EMPTY
417	238	2	-1	0	-1	ec _ gfp _ nistz256 _ method	ec _ gfp _ nistz256 _ method	EMPTY
417	239	2	-1	0	-1	# else	EMPTY	EMPTY
417	240	2	-1	0	-1	ec _ gfp _ nistp256 _ method	EMPTY	EMPTY
417	241	2	-1	0	-1	# endif	EMPTY	EMPTY
417	242	2	-1	0	-1	# else	EMPTY	EMPTY
417	243	2	-1	0	-1	numconst	EMPTY	EMPTY
417	244	2	-1	0	-1	# endif	EMPTY	EMPTY
417	245	2	-1	0	-1	}	EMPTY	EMPTY
417	246	2	-1	0	-1	{	EMPTY	EMPTY
417	247	2	-1	0	-1	nid _ secp224r1  & p224	EMPTY	EMPTY
417	248	2	-1	0	-1	# if defined ( boringssl _ use _ int128 _ code ) && ! defined ( openssl _ small )	EMPTY	EMPTY
417	249	2	-1	0	-1	ec _ gfp _ nistp224 _ method	EMPTY	EMPTY
417	250	2	-1	0	-1	# else	EMPTY	EMPTY
417	251	2	-1	0	-1	numconst	EMPTY	EMPTY
417	252	2	-1	0	-1	# endif	EMPTY	EMPTY
417	253	2	-1	0	-1	}	EMPTY	EMPTY
417	254	2	-1	0	-1	{ nid _ undef  numconst  numconst }	EMPTY	EMPTY
417	255	3	-1	0	-1	} ;	EMPTY	EMPTY
417	260	1	0	0	-1	static const bn _ mont _ ctx * * built _ in _ curve _ scalar _ field _ monts ;	built _ in _ curve _ scalar _ field _ monts	EMPTY
417	262	1	0	0	-1	static crypto _ once _ t built _ in _ curve _ scalar _ field _ monts _ once ;	EMPTY	EMPTY
417	264	1	0	0	-1	static void built _ in _ curve _ scalar _ field _ monts _ init ( void ) {	EMPTY	EMPTY
417	265	2	-1	0	-1	unsigned num _ built _ in _ curves ;	EMPTY	EMPTY
417	266	2	-1	0	-1	for ( num _ built _ in _ curves = 0 ; ; num _ built _ in _ curves ++ ) {	EMPTY	EMPTY
417	267	2	-1	0	-1	if ( openssl _ built _ in _ curves [ num _ built _ in _ curves ] . nid == nid _ undef ) {	openssl _ built _ in _ curves nid	EMPTY
417	268	2	-1	0	-1	break ;	EMPTY	EMPTY
417	269	2	-1	0	-1	}	EMPTY	EMPTY
417	270	3	-1	0	-1	}	EMPTY	EMPTY
417	272	1	0	0	-1	assert ( numconst < num _ built _ in _ curves ) ;	EMPTY	EMPTY
417	274	1	0	0	-1	built _ in _ curve _ scalar _ field _ monts =	built _ in _ curve _ scalar _ field _ monts	EMPTY
417	275	2	-1	0	-1	openssl _ malloc ( sizeof ( bn _ mont _ ctx * ) * num _ built _ in _ curves )	EMPTY	EMPTY
417	276	2	-1	0	-1	if ( built _ in _ curve _ scalar _ field _ monts == null ) {	built _ in _ curve _ scalar _ field _ monts	EMPTY
417	277	2	-1	0	-1	return ;	EMPTY	EMPTY
417	278	3	-1	0	-1	}	EMPTY	EMPTY
417	280	1	0	0	0	bignum * order = bn _ new ( ) ;	order bn _ new	EMPTY
417	281	2	-1	0	-1	bn _ ctx * bn _ ctx = bn _ ctx _ new ( ) ;	bn _ ctx _ new	EMPTY
417	282	3	-1	0	-1	bn _ mont _ ctx * mont _ ctx = null ;	EMPTY	EMPTY
417	284	1	0	0	0	if ( bn _ ctx == null ||	EMPTY	EMPTY
417	285	2	-1	0	-1	order == null ) {	order	EMPTY
417	286	2	-1	0	-1	goto err ;	EMPTY	EMPTY
417	287	3	-1	0	-1	}	EMPTY	EMPTY
417	289	1	0	0	0	unsigned i ;	i	EMPTY
417	290	2	-1	0	-1	for ( i = 0 ; i < num _ built _ in _ curves ; i ++ ) {	i i i	EMPTY
417	291	2	-1	0	-1	const struct curve _ data * curve = openssl _ built _ in _ curves [ i ] . data ;	curve _ data openssl _ built _ in _ curves i data	EMPTY
417	292	2	-1	0	-1	const unsigned param _ len = curve -> param _ len ;	param _ len param _ len	EMPTY
417	293	3	-1	0	-1	const uint8 _ t * params = curve -> data ;	data	EMPTY
417	295	1	0	0	-1	mont _ ctx = bn _ mont _ ctx _ new ( ) ;	bn _ mont _ ctx _ new	EMPTY
417	296	2	-1	0	-1	if ( mont _ ctx == null ) {	EMPTY	EMPTY
417	297	2	-1	0	-1	goto err ;	EMPTY	EMPTY
417	298	3	-1	0	-1	}	EMPTY	EMPTY
417	300	1	0	0	0	if ( ! bn _ bin2bn ( params + 5 * param _ len , param _ len , order ) ||	bn _ bin2bn param _ len param _ len order	EMPTY
417	301	2	-1	0	-1	! bn _ mont _ ctx _ set ( mont _ ctx , order , bn _ ctx ) ) {	bn _ mont _ ctx _ set order	EMPTY
417	302	2	-1	0	-1	goto err ;	EMPTY	EMPTY
417	303	3	-1	0	-1	}	EMPTY	EMPTY
417	305	1	0	0	-1	built _ in _ curve _ scalar _ field _ monts [ i ] = mont _ ctx ;	built _ in _ curve _ scalar _ field _ monts i	EMPTY
417	306	2	-1	0	-1	mont _ ctx = null ;	EMPTY	EMPTY
417	307	3	-1	0	-1	}	EMPTY	EMPTY
417	309	1	0	0	-1	goto out	out	EMPTY
417	311	1	0	0	-1	err :	EMPTY	EMPTY
417	312	2	-1	0	-1	bn _ mont _ ctx _ free ( mont _ ctx )	bn _ mont _ ctx _ free	EMPTY
417	313	2	-1	0	-1	openssl _ free ( ( bn _ mont _ ctx * * ) built _ in _ curve _ scalar _ field _ monts ) ;	built _ in _ curve _ scalar _ field _ monts	EMPTY
417	314	3	-1	0	-1	built _ in _ curve _ scalar _ field _ monts = null ;	built _ in _ curve _ scalar _ field _ monts	EMPTY
417	316	1	0	0	-1	out :	out	EMPTY
417	317	2	-1	0	-1	bn _ free ( order )	bn _ free order	EMPTY
417	318	2	-1	0	-1	bn _ ctx _ free ( bn _ ctx )	bn _ ctx _ free	EMPTY
417	319	3	-1	0	-1	}	EMPTY	EMPTY
417	321	1	0	0	-1	ec _ group * ec _ group _ new ( const ec _ method * meth ) {	meth	EMPTY
417	322	3	-1	0	-1	ec _ group * ret ;	ret	EMPTY
417	324	1	0	0	0	if ( meth == null ) {	meth	EMPTY
417	325	2	-1	0	-1	openssl _ put _ error ( ec , ec _ r _ slot _ full ) ;	EMPTY	EMPTY
417	326	2	-1	0	-1	return null ;	EMPTY	EMPTY
417	327	3	-1	0	-1	}	EMPTY	EMPTY
417	329	1	0	0	0	if ( meth -> group _ init == 0 ) {	meth group _ init	EMPTY
417	330	2	-1	0	-1	openssl _ put _ error ( ec , err _ r _ should _ not _ have _ been _ called ) ;	EMPTY	EMPTY
417	331	2	-1	0	-1	return null ;	EMPTY	EMPTY
417	332	3	-1	0	-1	}	EMPTY	EMPTY
417	334	1	0	0	-1	ret = openssl _ malloc ( sizeof ( ec _ group ) )	ret	EMPTY
417	335	2	-1	0	-1	if ( ret == null ) {	ret	EMPTY
417	336	2	-1	0	-1	openssl _ put _ error ( ec , err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
417	337	2	-1	0	-1	return null ;	EMPTY	EMPTY
417	338	2	-1	0	-1	}	EMPTY	EMPTY
417	339	3	-1	0	-1	memset ( ret  numconst  sizeof ( ec _ group ) ) ;	ret	EMPTY
417	341	1	0	0	-1	ret -> meth = meth	ret meth meth	EMPTY
417	342	2	-1	0	-1	bn _ init ( & ret -> order )	bn _ init ret order	EMPTY
417	343	3	-1	0	-1	bn _ init ( & ret -> cofactor )	bn _ init ret cofactor	EMPTY
417	345	1	0	0	0	if ( ! meth -> group _ init ( ret ) ) {	meth group _ init ret	EMPTY
417	346	2	-1	0	-1	openssl _ free ( ret ) ;	ret	EMPTY
417	347	2	-1	0	-1	return null ;	EMPTY	EMPTY
417	348	3	-1	0	-1	}	EMPTY	EMPTY
417	350	1	0	0	0	return ret	ret	EMPTY
417	351	3	-1	0	-1	}	EMPTY	EMPTY
417	353	1	0	0	-1	ec _ group * ec _ group _ new _ curve _ gfp ( const bignum * p  const bignum * a	ec _ group _ new _ curve _ gfp p a	EMPTY
417	354	2	-1	0	-1	const bignum * b  bn _ ctx * ctx ) {	b ctx	EMPTY
417	355	2	-1	0	-1	const ec _ method * meth = ec _ gfp _ mont _ method ( ) ;	meth	EMPTY
417	356	3	-1	0	-1	ec _ group * ret ;	ret	EMPTY
417	358	1	0	0	-1	ret = ec _ group _ new ( meth )	ret meth	EMPTY
417	359	2	-1	0	-1	if ( ret == null ) {	ret	EMPTY
417	360	2	-1	0	-1	return null ;	EMPTY	EMPTY
417	361	3	-1	0	-1	}	EMPTY	EMPTY
417	363	1	0	0	0	if ( ret -> meth -> group _ set _ curve == 0 ) {	ret meth group _ set _ curve	EMPTY
417	364	2	-1	0	-1	openssl _ put _ error ( ec , err _ r _ should _ not _ have _ been _ called ) ;	EMPTY	EMPTY
417	365	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
417	366	2	-1	0	-1	}	EMPTY	EMPTY
417	367	2	-1	0	-1	if ( ! ret -> meth -> group _ set _ curve ( ret , p , a , b , ctx ) ) {	ret meth group _ set _ curve ret p a b ctx	EMPTY
417	368	2	-1	0	-1	ec _ group _ free ( ret ) ;	ec _ group _ free ret	EMPTY
417	369	2	-1	0	-1	return null ;	EMPTY	EMPTY
417	370	2	-1	0	-1	}	EMPTY	EMPTY
417	371	2	-1	0	-1	return ret	ret	EMPTY
417	372	3	-1	0	-1	}	EMPTY	EMPTY
417	374	1	1	0	-1	int ec _ group _ set _ generator ( ec _ group * group  const ec _ point * generator	ec _ group _ set _ generator group generator	EMPTY
417	375	2	-1	0	-1	const bignum * order  const bignum * cofactor ) {	order cofactor	EMPTY
417	376	2	-1	0	-1	if ( group -> curve _ name != nid _ undef ) {	group curve _ name	EMPTY
417	379	2	-1	1	-1	return 0	EMPTY	EMPTY
417	380	3	-1	0	-1	}	EMPTY	EMPTY
417	382	1	0	0	0	if ( group -> generator == null ) {	group generator	EMPTY
417	383	2	-1	0	-1	group -> generator = ec _ point _ new ( group ) ;	group generator ec _ point _ new group	EMPTY
417	384	2	-1	0	-1	if ( group -> generator == null ) {	group generator	EMPTY
417	385	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	386	2	-1	0	-1	}	EMPTY	EMPTY
417	387	3	-1	0	-1	}	EMPTY	EMPTY
417	389	1	0	0	0	if ( ! ec _ point _ copy ( group -> generator  generator ) ) {	ec _ point _ copy group generator generator	EMPTY
417	390	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	391	3	-1	0	-1	}	EMPTY	EMPTY
417	393	1	0	0	0	if ( order != null ) {	order	EMPTY
417	394	2	-1	0	-1	if ( ! bn _ copy ( & group -> order  order ) ) {	bn _ copy group order order	EMPTY
417	395	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	396	2	-1	0	-1	}	EMPTY	EMPTY
417	397	2	-1	0	-1	}	EMPTY	EMPTY
417	398	2	-1	0	-1	bn _ zero ( & group -> order ) ;	bn _ zero group order	EMPTY
417	399	3	-1	0	-1	}	EMPTY	EMPTY
417	401	1	0	0	0	if ( cofactor != null ) {	cofactor	EMPTY
417	402	2	-1	0	-1	if ( ! bn _ copy ( & group -> cofactor  cofactor ) ) {	bn _ copy group cofactor cofactor	EMPTY
417	403	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	404	2	-1	0	-1	}	EMPTY	EMPTY
417	405	2	-1	0	-1	}	EMPTY	EMPTY
417	406	2	-1	0	-1	bn _ zero ( & group -> cofactor ) ;	bn _ zero group cofactor	EMPTY
417	407	3	-1	0	-1	}	EMPTY	EMPTY
417	409	1	0	0	0	return numconst ;	EMPTY	EMPTY
417	410	3	-1	0	-1	}	EMPTY	EMPTY
417	412	1	0	0	-1	static ec _ group * ec _ group _ new _ from _ data ( unsigned built _ in _ index ) {	EMPTY	EMPTY
417	413	2	-1	0	-1	const struct built _ in _ curve * curve = & openssl _ built _ in _ curves [ built _ in _ index ] ;	openssl _ built _ in _ curves	EMPTY
417	414	2	-1	0	-1	ec _ group * group = null ;	group	EMPTY
417	415	2	-1	0	-1	ec _ point * p = null ;	EMPTY	EMPTY
417	416	2	-1	0	-1	bignum * p = null  * a = null  * b = null  * x = null  * y = null ;	p a b	EMPTY
417	417	2	-1	0	-1	const ec _ method * meth ;	meth	EMPTY
417	418	3	-1	0	-1	int ok = numconst ;	EMPTY	EMPTY
417	420	1	0	0	0	bn _ ctx * ctx = bn _ ctx _ new ( ) ;	ctx bn _ ctx _ new	EMPTY
417	421	2	-1	0	-1	if ( ctx == null ) {	ctx	EMPTY
417	422	2	-1	0	-1	openssl _ put _ error ( ec  err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
417	423	2	-1	0	-1	goto err ;	EMPTY	EMPTY
417	424	3	-1	0	-1	}	EMPTY	EMPTY
417	426	1	0	0	0	const struct curve _ data * data = curve -> data ;	curve _ data data data	EMPTY
417	427	2	-1	0	-1	const unsigned param _ len = data -> param _ len ;	param _ len data param _ len	EMPTY
417	428	3	-1	0	-1	const uint8 _ t * params = data -> data ;	data data	EMPTY
417	430	1	0	0	0	if ( ! ( p = bn _ bin2bn ( params + numconst * param _ len  param _ len  null ) ) ||	p bn _ bin2bn param _ len param _ len	EMPTY
417	431	2	-1	0	-1	! ( a = bn _ bin2bn ( params + numconst * param _ len  param _ len  null ) ) ||	a bn _ bin2bn param _ len param _ len	EMPTY
417	432	2	-1	0	-1	! ( b = bn _ bin2bn ( params + numconst * param _ len  param _ len  null ) ) ) {	b bn _ bin2bn param _ len param _ len	EMPTY
417	433	2	-1	0	-1	openssl _ put _ error ( ec  err _ r _ bn _ lib ) ;	EMPTY	EMPTY
417	434	2	-1	0	-1	goto err ;	EMPTY	EMPTY
417	435	3	-1	0	-1	}	EMPTY	EMPTY
417	437	1	0	0	0	if ( curve -> method != numconst ) {	method	EMPTY
417	438	2	-1	0	-1	meth = curve -> method ( ) ;	meth method	EMPTY
417	439	2	-1	0	-1	if ( ( ( group = ec _ group _ new ( meth ) ) == null ) ||	group meth	EMPTY
417	440	2	-1	0	-1	( ! ( group -> meth -> group _ set _ curve ( group  p  a  b  ctx ) ) ) ) {	group meth group _ set _ curve group p a b ctx	EMPTY
417	441	2	-1	0	-1	openssl _ put _ error ( ec  err _ r _ ec _ lib ) ;	EMPTY	EMPTY
417	442	2	-1	0	-1	goto err ;	EMPTY	EMPTY
417	443	2	-1	0	-1	}	EMPTY	EMPTY
417	444	2	-1	0	-1	}	EMPTY	EMPTY
417	445	2	-1	0	-1	if ( ( group = ec _ group _ new _ curve _ gfp ( p  a  b  ctx ) ) == null ) {	group ec _ group _ new _ curve _ gfp p a b ctx	EMPTY
417	446	2	-1	0	-1	openssl _ put _ error ( ec  err _ r _ ec _ lib ) ;	EMPTY	EMPTY
417	447	2	-1	0	-1	goto err ;	EMPTY	EMPTY
417	448	2	-1	0	-1	}	EMPTY	EMPTY
417	449	3	-1	0	-1	}	EMPTY	EMPTY
417	451	1	0	0	0	if ( ( p = ec _ point _ new ( group ) ) == null ) {	ec _ point _ new group	EMPTY
417	452	2	-1	0	-1	openssl _ put _ error ( ec  err _ r _ ec _ lib ) ;	EMPTY	EMPTY
417	453	2	-1	0	-1	goto err ;	EMPTY	EMPTY
417	454	3	-1	0	-1	}	EMPTY	EMPTY
417	456	1	0	0	0	if ( ! ( x = bn _ bin2bn ( params + numconst * param _ len  param _ len  null ) ) ||	bn _ bin2bn param _ len param _ len	EMPTY
417	457	2	-1	0	-1	! ( y = bn _ bin2bn ( params + numconst * param _ len  param _ len  null ) ) ) {	bn _ bin2bn param _ len param _ len	EMPTY
417	458	2	-1	0	-1	openssl _ put _ error ( ec  err _ r _ bn _ lib ) ;	EMPTY	EMPTY
417	459	2	-1	0	-1	goto err ;	EMPTY	EMPTY
417	460	3	-1	0	-1	}	EMPTY	EMPTY
417	462	1	0	0	0	if ( ! ec _ point _ set _ affine _ coordinates _ gfp ( group  p  x  y  ctx ) ) {	ec _ point _ set _ affine _ coordinates _ gfp group ctx	EMPTY
417	463	2	-1	0	-1	openssl _ put _ error ( ec  err _ r _ ec _ lib ) ;	EMPTY	EMPTY
417	464	2	-1	0	-1	goto err ;	EMPTY	EMPTY
417	465	2	-1	0	-1	}	EMPTY	EMPTY
417	466	2	-1	0	-1	if ( ! bn _ bin2bn ( params + numconst * param _ len  param _ len  & group -> order ) ||	bn _ bin2bn param _ len param _ len group order	EMPTY
417	467	2	-1	0	-1	! bn _ set _ word ( & group -> cofactor  ( bn _ ulong ) data -> cofactor ) ) {	bn _ set _ word group cofactor data cofactor	EMPTY
417	468	2	-1	0	-1	openssl _ put _ error ( ec  err _ r _ bn _ lib ) ;	EMPTY	EMPTY
417	469	2	-1	0	-1	goto err ;	EMPTY	EMPTY
417	470	3	-1	0	-1	}	EMPTY	EMPTY
417	472	1	0	0	0	crypto _ once ( & built _ in _ curve _ scalar _ field _ monts _ once	crypto _ once	EMPTY
417	473	2	-1	0	-1	built _ in _ curve _ scalar _ field _ monts _ init ) ;	EMPTY	EMPTY
417	474	2	-1	0	-1	if ( built _ in _ curve _ scalar _ field _ monts != null ) {	built _ in _ curve _ scalar _ field _ monts	EMPTY
417	475	2	-1	0	-1	group -> mont _ data = built _ in _ curve _ scalar _ field _ monts [ built _ in _ index ] ;	group mont _ data built _ in _ curve _ scalar _ field _ monts	EMPTY
417	476	3	-1	0	-1	}	EMPTY	EMPTY
417	478	1	0	0	-1	group -> generator = p ;	group generator	EMPTY
417	479	2	-1	0	-1	p = null ;	EMPTY	EMPTY
417	480	3	-1	0	-1	ok = numconst ;	EMPTY	EMPTY
417	482	1	0	0	-1	err :	EMPTY	EMPTY
417	483	2	-1	0	-1	if ( ! ok ) {	EMPTY	EMPTY
417	484	2	-1	0	-1	ec _ group _ free ( group ) ;	ec _ group _ free group	EMPTY
417	485	2	-1	0	-1	group = null ;	group	EMPTY
417	486	2	-1	0	-1	}	EMPTY	EMPTY
417	487	2	-1	0	-1	ec _ point _ free ( p ) ;	ec _ point _ free	EMPTY
417	488	2	-1	0	-1	bn _ ctx _ free ( ctx ) ;	bn _ ctx _ free ctx	EMPTY
417	489	2	-1	0	-1	bn _ free ( p ) ;	bn _ free p	EMPTY
417	490	2	-1	0	-1	bn _ free ( a ) ;	bn _ free a	EMPTY
417	491	2	-1	0	-1	bn _ free ( b ) ;	bn _ free b	EMPTY
417	492	2	-1	0	-1	bn _ free ( x ) ;	bn _ free	EMPTY
417	493	2	-1	0	-1	bn _ free ( y ) ;	bn _ free	EMPTY
417	494	2	-1	0	-1	return group ;	group	EMPTY
417	495	3	-1	0	-1	}	EMPTY	EMPTY
417	497	1	0	0	-1	ec _ group * ec _ group _ new _ by _ curve _ name ( int nid ) {	ec _ group _ new _ by _ curve _ name nid	EMPTY
417	498	2	-1	0	-1	unsigned i ;	i	EMPTY
417	499	2	-1	0	-1	const struct built _ in _ curve * curve ;	EMPTY	EMPTY
417	500	3	-1	0	-1	ec _ group * ret = null ;	ret	EMPTY
417	502	1	0	0	0	for ( i = numconst ; openssl _ built _ in _ curves [ i ] . nid != nid _ undef ; i ++ ) {	i openssl _ built _ in _ curves i nid i	EMPTY
417	503	2	-1	0	-1	curve = & openssl _ built _ in _ curves [ i ] ;	openssl _ built _ in _ curves i	EMPTY
417	504	2	-1	0	-1	if ( curve -> nid == nid ) {	nid nid	EMPTY
417	505	2	-1	0	-1	ret = ec _ group _ new _ from _ data ( i ) ;	ret i	EMPTY
417	506	2	-1	0	-1	break ;	EMPTY	EMPTY
417	507	2	-1	0	-1	}	EMPTY	EMPTY
417	508	3	-1	0	-1	}	EMPTY	EMPTY
417	510	1	0	0	0	if ( ret == null ) {	ret	EMPTY
417	511	2	-1	0	-1	openssl _ put _ error ( ec  ec _ r _ unknown _ group ) ;	EMPTY	EMPTY
417	512	2	-1	0	-1	return null ;	EMPTY	EMPTY
417	513	3	-1	0	-1	}	EMPTY	EMPTY
417	515	1	0	0	-1	ret -> curve _ name = nid ;	ret curve _ name nid	EMPTY
417	516	2	-1	0	-1	return ret ;	ret	EMPTY
417	517	3	-1	0	-1	}	EMPTY	EMPTY
417	519	1	0	0	-1	void ec _ group _ free ( ec _ group * group ) {	ec _ group _ free group	EMPTY
417	520	2	-1	0	-1	if ( ! group ) {	group	EMPTY
417	521	2	-1	0	-1	return ;	EMPTY	EMPTY
417	522	3	-1	0	-1	}	EMPTY	EMPTY
417	524	1	0	0	0	if ( group -> meth -> group _ finish != numconst ) {	group meth	EMPTY
417	525	2	-1	0	-1	group -> meth -> group _ finish ( group ) ;	group meth group	EMPTY
417	526	3	-1	0	-1	}	EMPTY	EMPTY
417	528	1	0	0	0	ec _ point _ free ( group -> generator ) ;	ec _ point _ free group generator	EMPTY
417	529	2	-1	0	-1	bn _ free ( & group -> order ) ;	bn _ free group order	EMPTY
417	530	3	-1	0	-1	bn _ free ( & group -> cofactor ) ;	bn _ free group cofactor	EMPTY
417	532	1	0	0	0	openssl _ free ( group ) ;	group	EMPTY
417	533	3	-1	0	-1	}	EMPTY	EMPTY
417	535	1	0	0	-1	int ec _ group _ copy ( ec _ group * dest  const ec _ group * src ) {	dest src	EMPTY
417	536	2	-1	0	-1	if ( dest -> meth -> group _ copy == numconst ) {	dest meth	EMPTY
417	537	2	-1	0	-1	openssl _ put _ error ( ec  err _ r _ should _ not _ have _ been _ called ) ;	EMPTY	EMPTY
417	538	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	539	2	-1	0	-1	}	EMPTY	EMPTY
417	540	2	-1	0	-1	if ( dest -> meth != src -> meth ) {	dest meth src meth	EMPTY
417	541	2	-1	0	-1	openssl _ put _ error ( ec  ec _ r _ incompatible _ objects ) ;	EMPTY	EMPTY
417	542	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	543	2	-1	0	-1	}	EMPTY	EMPTY
417	544	2	-1	0	-1	if ( dest == src ) {	dest src	EMPTY
417	545	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	546	3	-1	0	-1	}	EMPTY	EMPTY
417	548	1	0	0	-1	dest -> mont _ data = src -> mont _ data ;	dest mont _ data src mont _ data	EMPTY
417	550	1	0	0	0	if ( src -> generator != null ) {	src generator	EMPTY
417	551	2	-1	0	-1	if ( dest -> generator == null ) {	dest generator	EMPTY
417	552	2	-1	0	-1	dest -> generator = ec _ point _ new ( dest ) ;	dest generator ec _ point _ new dest	EMPTY
417	553	2	-1	0	-1	if ( dest -> generator == null ) {	dest generator	EMPTY
417	554	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	555	2	-1	0	-1	}	EMPTY	EMPTY
417	556	2	-1	0	-1	}	EMPTY	EMPTY
417	557	2	-1	0	-1	if ( ! ec _ point _ copy ( dest -> generator  src -> generator ) ) {	ec _ point _ copy dest generator src generator	EMPTY
417	558	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	559	2	-1	0	-1	}	EMPTY	EMPTY
417	560	2	-1	0	-1	}	EMPTY	EMPTY
417	561	2	-1	0	-1	ec _ point _ clear _ free ( dest -> generator ) ;	ec _ point _ clear _ free dest generator	EMPTY
417	562	2	-1	0	-1	dest -> generator = null ;	dest generator	EMPTY
417	563	3	-1	0	-1	}	EMPTY	EMPTY
417	565	1	0	0	0	if ( ! bn _ copy ( & dest -> order  & src -> order ) ||	bn _ copy dest order src order	EMPTY
417	566	2	-1	0	-1	! bn _ copy ( & dest -> cofactor  & src -> cofactor ) ) {	bn _ copy dest cofactor src cofactor	EMPTY
417	567	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	568	3	-1	0	-1	}	EMPTY	EMPTY
417	570	1	0	0	-1	dest -> curve _ name = src -> curve _ name ;	dest curve _ name src curve _ name	EMPTY
417	572	1	0	0	0	return dest -> meth -> group _ copy ( dest  src ) ;	dest meth dest src	EMPTY
417	573	3	-1	0	-1	}	EMPTY	EMPTY
417	575	1	0	0	-1	const bn _ mont _ ctx * ec _ group _ get _ mont _ data ( const ec _ group * group ) {	ec _ group _ get _ mont _ data group	EMPTY
417	576	2	-1	0	-1	return group -> mont _ data ;	group mont _ data	EMPTY
417	577	3	-1	0	-1	}	EMPTY	EMPTY
417	579	1	0	0	-1	ec _ group * ec _ group _ dup ( const ec _ group * a ) {	ec _ group _ dup a	EMPTY
417	580	2	-1	0	-1	ec _ group * t = null ;	EMPTY	EMPTY
417	581	3	-1	0	-1	int ok = numconst ;	EMPTY	EMPTY
417	583	1	0	0	0	if ( a == null ) {	a	EMPTY
417	584	2	-1	0	-1	return null ;	EMPTY	EMPTY
417	585	3	-1	0	-1	}	EMPTY	EMPTY
417	587	1	0	0	-1	t = ec _ group _ new ( a -> meth ) ;	a meth	EMPTY
417	588	2	-1	0	-1	if ( t == null ) {	EMPTY	EMPTY
417	589	2	-1	0	-1	return null ;	EMPTY	EMPTY
417	590	2	-1	0	-1	}	EMPTY	EMPTY
417	591	2	-1	0	-1	if ( ! ec _ group _ copy ( t  a ) ) {	a	EMPTY
417	592	2	-1	0	-1	goto err ;	EMPTY	EMPTY
417	593	3	-1	0	-1	}	EMPTY	EMPTY
417	595	1	0	0	-1	ok = numconst ;	EMPTY	EMPTY
417	597	1	0	0	-1	err :	EMPTY	EMPTY
417	598	2	-1	0	-1	if ( ! ok ) {	EMPTY	EMPTY
417	599	2	-1	0	-1	ec _ group _ free ( t ) ;	ec _ group _ free	EMPTY
417	600	2	-1	0	-1	return null ;	EMPTY	EMPTY
417	601	2	-1	0	-1	}	EMPTY	EMPTY
417	602	2	-1	0	-1	return t ;	EMPTY	EMPTY
417	603	2	-1	0	-1	}	EMPTY	EMPTY
417	604	3	-1	0	-1	}	EMPTY	EMPTY
417	606	1	0	0	-1	int ec _ group _ cmp ( const ec _ group * a  const ec _ group * b  bn _ ctx * ignored ) {	ec _ group _ cmp a b	EMPTY
417	607	2	-1	0	-1	return a -> curve _ name == nid _ undef ||	a curve _ name	EMPTY
417	608	2	-1	0	-1	b -> curve _ name == nid _ undef ||	b curve _ name	EMPTY
417	609	2	-1	0	-1	a -> curve _ name != b -> curve _ name ;	a curve _ name b curve _ name	EMPTY
417	610	3	-1	0	-1	}	EMPTY	EMPTY
417	612	1	0	0	-1	const ec _ point * ec _ group _ get0 _ generator ( const ec _ group * group ) {	ec _ group _ get0 _ generator group	EMPTY
417	613	2	-1	0	-1	return group -> generator ;	group generator	EMPTY
417	614	3	-1	0	-1	}	EMPTY	EMPTY
417	616	1	0	0	-1	const bignum * ec _ group _ get0 _ order ( const ec _ group * group ) {	ec _ group _ get0 _ order group	EMPTY
417	617	2	-1	0	-1	assert ( ! bn _ is _ zero ( & group -> order ) ) ;	bn _ is _ zero group order	EMPTY
417	618	2	-1	0	-1	return & group -> order ;	group order	EMPTY
417	619	3	-1	0	-1	}	EMPTY	EMPTY
417	621	1	0	0	-1	int ec _ group _ get _ order ( const ec _ group * group  bignum * order  bn _ ctx * ctx ) {	ec _ group _ get _ order group order ctx	EMPTY
417	622	2	-1	0	-1	if ( bn _ copy ( order  ec _ group _ get0 _ order ( group ) ) == null ) {	bn _ copy order ec _ group _ get0 _ order group	EMPTY
417	623	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	624	2	-1	0	-1	}	EMPTY	EMPTY
417	625	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	626	3	-1	0	-1	}	EMPTY	EMPTY
417	628	1	0	0	-1	int ec _ group _ get _ cofactor ( const ec _ group * group  bignum * cofactor	ec _ group _ get _ cofactor group cofactor	EMPTY
417	629	2	-1	0	-1	bn _ ctx * ctx ) {	ctx	EMPTY
417	630	2	-1	0	-1	if ( ! bn _ copy ( cofactor  & group -> cofactor ) ) {	bn _ copy cofactor group cofactor	EMPTY
417	631	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	632	3	-1	0	-1	}	EMPTY	EMPTY
417	634	1	0	0	0	return ! bn _ is _ zero ( & group -> cofactor ) ;	bn _ is _ zero group cofactor	EMPTY
417	635	3	-1	0	-1	}	EMPTY	EMPTY
417	637	1	0	0	-1	int ec _ group _ get _ curve _ gfp ( const ec _ group * group  bignum * out _ p  bignum * out _ a	ec _ group _ get _ curve _ gfp group out _ p	EMPTY
417	638	2	-1	0	-1	bignum * out _ b  bn _ ctx * ctx ) {	ctx	EMPTY
417	639	2	-1	0	-1	return ec _ gfp _ simple _ group _ get _ curve ( group  out _ p  out _ a  out _ b  ctx ) ;	group out _ p ctx	EMPTY
417	640	3	-1	0	-1	}	EMPTY	EMPTY
417	642	1	0	0	0	return group -> curve _ name ;	group curve _ name	EMPTY
417	644	1	0	0	-1	unsigned ec _ group _ get _ degree ( const ec _ group * group ) {	ec _ group _ get _ degree group	EMPTY
417	645	2	-1	0	-1	return ec _ gfp _ simple _ group _ get _ degree ( group ) ;	group	EMPTY
417	646	3	-1	0	-1	}	EMPTY	EMPTY
417	648	1	0	0	-1	ec _ point * ec _ point _ new ( const ec _ group * group ) {	ec _ point _ new group	EMPTY
417	649	3	-1	0	-1	ec _ point * ret ;	ret	EMPTY
417	651	1	0	0	0	if ( group == null ) {	group	EMPTY
417	652	2	-1	0	-1	openssl _ put _ error ( ec  err _ r _ passed _ null _ parameter ) ;	EMPTY	EMPTY
417	653	2	-1	0	-1	return null ;	EMPTY	EMPTY
417	654	3	-1	0	-1	}	EMPTY	EMPTY
417	656	1	0	0	-1	ret = openssl _ malloc ( sizeof * ret ) ;	ret ret	EMPTY
417	657	2	-1	0	-1	if ( ret == null ) {	ret	EMPTY
417	658	2	-1	0	-1	openssl _ put _ error ( ec  err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
417	659	2	-1	0	-1	return null ;	EMPTY	EMPTY
417	660	3	-1	0	-1	}	EMPTY	EMPTY
417	662	1	0	0	-1	ret -> meth = group -> meth ;	ret meth group meth	EMPTY
417	664	1	0	0	0	if ( ! ec _ gfp _ simple _ point _ init ( ret ) ) {	ret	EMPTY
417	665	2	-1	0	-1	openssl _ free ( ret ) ;	ret	EMPTY
417	666	2	-1	0	-1	return null ;	EMPTY	EMPTY
417	667	3	-1	0	-1	}	EMPTY	EMPTY
417	669	1	0	0	0	return ret ;	ret	EMPTY
417	670	3	-1	0	-1	}	EMPTY	EMPTY
417	672	1	0	0	-1	void ec _ point _ free ( ec _ point * point ) {	ec _ point _ free point	EMPTY
417	673	2	-1	0	-1	if ( ! point ) {	point	EMPTY
417	674	2	-1	0	-1	return ;	EMPTY	EMPTY
417	675	3	-1	0	-1	}	EMPTY	EMPTY
417	677	1	0	0	0	ec _ gfp _ simple _ point _ finish ( point ) ;	point	EMPTY
417	679	1	0	0	0	openssl _ free ( point ) ;	point	EMPTY
417	680	3	-1	0	-1	}	EMPTY	EMPTY
417	682	1	0	0	-1	void ec _ point _ clear _ free ( ec _ point * point ) {	ec _ point _ clear _ free point	EMPTY
417	683	2	-1	0	-1	if ( ! point ) {	point	EMPTY
417	684	2	-1	0	-1	return ;	EMPTY	EMPTY
417	685	3	-1	0	-1	}	EMPTY	EMPTY
417	687	1	0	0	0	ec _ gfp _ simple _ point _ clear _ finish ( point ) ;	point	EMPTY
417	689	1	0	0	0	openssl _ cleanse ( point  sizeof * point ) ;	openssl _ cleanse point point	EMPTY
417	690	2	-1	0	-1	openssl _ free ( point ) ;	point	EMPTY
417	691	3	-1	0	-1	}	EMPTY	EMPTY
417	693	1	0	0	-1	int ec _ point _ copy ( ec _ point * dest  const ec _ point * src ) {	ec _ point _ copy dest src	EMPTY
417	694	2	-1	0	-1	if ( dest -> meth != src -> meth ) {	dest meth src meth	EMPTY
417	695	2	-1	0	-1	openssl _ put _ error ( ec  ec _ r _ incompatible _ objects ) ;	EMPTY	EMPTY
417	696	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	697	2	-1	0	-1	}	EMPTY	EMPTY
417	698	2	-1	0	-1	if ( dest == src ) {	dest src	EMPTY
417	699	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	700	2	-1	0	-1	}	EMPTY	EMPTY
417	701	2	-1	0	-1	return ec _ gfp _ simple _ point _ copy ( dest  src ) ;	dest src	EMPTY
417	702	3	-1	0	-1	}	EMPTY	EMPTY
417	704	1	0	0	-1	ec _ point * ec _ point _ dup ( const ec _ point * a  const ec _ group * group ) {	ec _ point _ dup a group	EMPTY
417	705	2	-1	0	-1	ec _ point * t ;	EMPTY	EMPTY
417	706	3	-1	0	-1	int r ;	r	EMPTY
417	708	1	0	0	0	if ( a == null ) {	a	EMPTY
417	709	2	-1	0	-1	return null ;	EMPTY	EMPTY
417	710	3	-1	0	-1	}	EMPTY	EMPTY
417	712	1	0	0	-1	t = ec _ point _ new ( group ) ;	ec _ point _ new group	EMPTY
417	713	2	-1	0	-1	if ( t == null ) {	EMPTY	EMPTY
417	714	2	-1	0	-1	openssl _ put _ error ( ec  err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
417	715	2	-1	0	-1	return null ;	EMPTY	EMPTY
417	716	2	-1	0	-1	}	EMPTY	EMPTY
417	717	2	-1	0	-1	r = ec _ point _ copy ( t  a ) ;	r ec _ point _ copy a	EMPTY
417	718	2	-1	0	-1	if ( ! r ) {	r	EMPTY
417	719	2	-1	0	-1	ec _ point _ free ( t ) ;	ec _ point _ free	EMPTY
417	720	2	-1	0	-1	return null ;	EMPTY	EMPTY
417	721	2	-1	0	-1	}	EMPTY	EMPTY
417	722	2	-1	0	-1	return t ;	EMPTY	EMPTY
417	723	2	-1	0	-1	}	EMPTY	EMPTY
417	724	3	-1	0	-1	}	EMPTY	EMPTY
417	726	1	0	0	-1	int ec _ point _ set _ to _ infinity ( const ec _ group * group  ec _ point * point ) {	ec _ point _ set _ to _ infinity group point	EMPTY
417	727	2	-1	0	-1	if ( group -> meth != point -> meth ) {	group meth point meth	EMPTY
417	728	2	-1	0	-1	openssl _ put _ error ( ec  ec _ r _ incompatible _ objects ) ;	EMPTY	EMPTY
417	729	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	730	2	-1	0	-1	}	EMPTY	EMPTY
417	731	2	-1	0	-1	return ec _ gfp _ simple _ point _ set _ to _ infinity ( group  point ) ;	group point	EMPTY
417	732	3	-1	0	-1	}	EMPTY	EMPTY
417	734	1	0	0	-1	int ec _ point _ is _ at _ infinity ( const ec _ group * group  const ec _ point * point ) {	ec _ point _ is _ at _ infinity group point	EMPTY
417	735	2	-1	0	-1	if ( group -> meth != point -> meth ) {	group meth point meth	EMPTY
417	736	2	-1	0	-1	openssl _ put _ error ( ec  ec _ r _ incompatible _ objects ) ;	EMPTY	EMPTY
417	737	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	738	2	-1	0	-1	}	EMPTY	EMPTY
417	739	2	-1	0	-1	return ec _ gfp _ simple _ is _ at _ infinity ( group  point ) ;	group point	EMPTY
417	740	3	-1	0	-1	}	EMPTY	EMPTY
417	742	1	0	0	-1	int ec _ point _ is _ on _ curve ( const ec _ group * group  const ec _ point * point	ec _ point _ is _ on _ curve group point	EMPTY
417	743	2	-1	0	-1	bn _ ctx * ctx ) {	ctx	EMPTY
417	744	2	-1	0	-1	if ( group -> meth != point -> meth ) {	group meth point meth	EMPTY
417	745	2	-1	0	-1	openssl _ put _ error ( ec  ec _ r _ incompatible _ objects ) ;	EMPTY	EMPTY
417	746	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	747	2	-1	0	-1	}	EMPTY	EMPTY
417	748	2	-1	0	-1	return ec _ gfp _ simple _ is _ on _ curve ( group  point  ctx ) ;	group point ctx	EMPTY
417	749	3	-1	0	-1	}	EMPTY	EMPTY
417	751	1	0	0	-1	int ec _ point _ cmp ( const ec _ group * group  const ec _ point * a  const ec _ point * b	ec _ point _ cmp group a b	EMPTY
417	752	2	-1	0	-1	bn _ ctx * ctx ) {	ctx	EMPTY
417	753	2	-1	0	-1	if ( ( group -> meth != a -> meth ) || ( a -> meth != b -> meth ) ) {	group meth a meth a meth b meth	EMPTY
417	754	2	-1	0	-1	openssl _ put _ error ( ec  ec _ r _ incompatible _ objects ) ;	EMPTY	EMPTY
417	755	2	-1	0	-1	return - numconst ;	EMPTY	EMPTY
417	756	2	-1	0	-1	}	EMPTY	EMPTY
417	757	2	-1	0	-1	return ec _ gfp _ simple _ cmp ( group  a  b  ctx ) ;	group a b ctx	EMPTY
417	758	3	-1	0	-1	}	EMPTY	EMPTY
417	760	1	0	0	-1	int ec _ point _ make _ affine ( const ec _ group * group  ec _ point * point  bn _ ctx * ctx ) {	ec _ point _ make _ affine group point ctx	EMPTY
417	761	2	-1	0	-1	if ( group -> meth != point -> meth ) {	group meth point meth	EMPTY
417	762	2	-1	0	-1	openssl _ put _ error ( ec  ec _ r _ incompatible _ objects ) ;	EMPTY	EMPTY
417	763	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	764	2	-1	0	-1	}	EMPTY	EMPTY
417	765	2	-1	0	-1	return ec _ gfp _ simple _ make _ affine ( group  point  ctx ) ;	group point ctx	EMPTY
417	766	3	-1	0	-1	}	EMPTY	EMPTY
417	768	1	0	0	-1	int ec _ points _ make _ affine ( const ec _ group * group  size _ t num  ec _ point * points [ ]	ec _ points _ make _ affine group num	EMPTY
417	769	2	-1	0	-1	bn _ ctx * ctx ) {	ctx	EMPTY
417	770	3	-1	0	-1	size _ t i ;	i	EMPTY
417	772	1	0	0	0	for ( i = numconst ; i < num ; i ++ ) {	i i num i	EMPTY
417	773	2	-1	0	-1	if ( group -> meth != points [ i ] -> meth ) {	group meth i meth	EMPTY
417	774	2	-1	0	-1	openssl _ put _ error ( ec  ec _ r _ incompatible _ objects ) ;	EMPTY	EMPTY
417	775	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	776	2	-1	0	-1	}	EMPTY	EMPTY
417	777	2	-1	0	-1	}	EMPTY	EMPTY
417	778	2	-1	0	-1	return ec _ gfp _ simple _ points _ make _ affine ( group  num  points  ctx ) ;	group num ctx	EMPTY
417	779	3	-1	0	-1	}	EMPTY	EMPTY
417	781	1	0	0	-1	int ec _ point _ get _ affine _ coordinates _ gfp ( const ec _ group * group	ec _ point _ get _ affine _ coordinates _ gfp group	EMPTY
417	782	2	-1	0	-1	const ec _ point * point  bignum * x	point	EMPTY
417	783	2	-1	0	-1	bignum * y  bn _ ctx * ctx ) {	ctx	EMPTY
417	784	2	-1	0	-1	if ( group -> meth -> point _ get _ affine _ coordinates == numconst ) {	group meth point _ get _ affine _ coordinates	EMPTY
417	785	2	-1	0	-1	openssl _ put _ error ( ec  err _ r _ should _ not _ have _ been _ called ) ;	EMPTY	EMPTY
417	786	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	787	2	-1	0	-1	}	EMPTY	EMPTY
417	788	2	-1	0	-1	if ( group -> meth != point -> meth ) {	group meth point meth	EMPTY
417	789	2	-1	0	-1	openssl _ put _ error ( ec  ec _ r _ incompatible _ objects ) ;	EMPTY	EMPTY
417	790	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	791	2	-1	0	-1	}	EMPTY	EMPTY
417	792	2	-1	0	-1	return group -> meth -> point _ get _ affine _ coordinates ( group  point  x  y  ctx ) ;	group meth point _ get _ affine _ coordinates group point ctx	EMPTY
417	793	3	-1	0	-1	}	EMPTY	EMPTY
417	795	1	0	0	-1	int ec _ point _ set _ affine _ coordinates _ gfp ( const ec _ group * group  ec _ point * point	ec _ point _ set _ affine _ coordinates _ gfp group point	EMPTY
417	796	2	-1	0	-1	const bignum * x  const bignum * y	EMPTY	EMPTY
417	797	2	-1	0	-1	bn _ ctx * ctx ) {	ctx	EMPTY
417	798	2	-1	0	-1	if ( group -> meth != point -> meth ) {	group meth point meth	EMPTY
417	799	2	-1	0	-1	openssl _ put _ error ( ec  ec _ r _ incompatible _ objects ) ;	EMPTY	EMPTY
417	800	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	801	2	-1	0	-1	}	EMPTY	EMPTY
417	802	2	-1	0	-1	if ( ! ec _ gfp _ simple _ point _ set _ affine _ coordinates ( group  point  x  y  ctx ) ) {	group point ctx	EMPTY
417	803	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	804	3	-1	0	-1	}	EMPTY	EMPTY
417	806	1	0	0	0	if ( ! ec _ point _ is _ on _ curve ( group  point  ctx ) ) {	ec _ point _ is _ on _ curve group point ctx	EMPTY
417	807	2	-1	0	-1	openssl _ put _ error ( ec  ec _ r _ point _ is _ not _ on _ curve ) ;	EMPTY	EMPTY
417	808	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	809	3	-1	0	-1	}	EMPTY	EMPTY
417	811	1	0	0	0	return numconst ;	EMPTY	EMPTY
417	812	3	-1	0	-1	}	EMPTY	EMPTY
417	814	1	0	0	-1	int ec _ point _ add ( const ec _ group * group  ec _ point * r  const ec _ point * a	ec _ point _ add group r a	EMPTY
417	815	2	-1	0	-1	const ec _ point * b  bn _ ctx * ctx ) {	b ctx	EMPTY
417	816	2	-1	0	-1	if ( ( group -> meth != r -> meth ) || ( r -> meth != a -> meth ) ||	group meth r meth r meth a meth	EMPTY
417	817	2	-1	0	-1	( a -> meth != b -> meth ) ) {	a meth b meth	EMPTY
417	818	2	-1	0	-1	openssl _ put _ error ( ec  ec _ r _ incompatible _ objects ) ;	EMPTY	EMPTY
417	819	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	820	2	-1	0	-1	}	EMPTY	EMPTY
417	821	2	-1	0	-1	return ec _ gfp _ simple _ add ( group  r  a  b  ctx ) ;	group r a b ctx	EMPTY
417	822	3	-1	0	-1	}	EMPTY	EMPTY
417	825	1	0	0	-1	int ec _ point _ dbl ( const ec _ group * group  ec _ point * r  const ec _ point * a	ec _ point _ dbl group r a	EMPTY
417	826	2	-1	0	-1	bn _ ctx * ctx ) {	ctx	EMPTY
417	827	2	-1	0	-1	if ( ( group -> meth != r -> meth ) || ( r -> meth != a -> meth ) ) {	group meth r meth r meth a meth	EMPTY
417	828	2	-1	0	-1	openssl _ put _ error ( ec  ec _ r _ incompatible _ objects ) ;	EMPTY	EMPTY
417	829	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	830	2	-1	0	-1	}	EMPTY	EMPTY
417	831	2	-1	0	-1	return ec _ gfp _ simple _ dbl ( group  r  a  ctx ) ;	group r a ctx	EMPTY
417	832	3	-1	0	-1	}	EMPTY	EMPTY
417	835	1	0	0	-1	int ec _ point _ invert ( const ec _ group * group  ec _ point * a  bn _ ctx * ctx ) {	ec _ point _ invert group a ctx	EMPTY
417	836	2	-1	0	-1	if ( group -> meth != a -> meth ) {	group meth a meth	EMPTY
417	837	2	-1	0	-1	openssl _ put _ error ( ec  ec _ r _ incompatible _ objects ) ;	EMPTY	EMPTY
417	838	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	839	2	-1	0	-1	}	EMPTY	EMPTY
417	840	2	-1	0	-1	return ec _ gfp _ simple _ invert ( group  a  ctx ) ;	group a ctx	EMPTY
417	841	3	-1	0	-1	}	EMPTY	EMPTY
417	843	1	1	0	-1	int ec _ point _ mul ( const ec _ group * group  ec _ point * r  const bignum * g _ scalar	ec _ point _ mul group r g _ scalar	EMPTY
417	844	2	-1	0	-1	const ec _ point * p  const bignum * p _ scalar  bn _ ctx * ctx ) {	p ctx	EMPTY
417	848	2	-1	1	-1	if ( ( g _ scalar == null && p _ scalar == null ) ||	g _ scalar	EMPTY
417	849	2	-1	0	-1	( ( p == null ) != ( p _ scalar == null ) ) ) {	p	EMPTY
417	850	2	-1	0	-1	openssl _ put _ error ( ec , err _ r _ passed _ null _ parameter ) ;	EMPTY	EMPTY
417	851	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
417	852	3	-1	0	-1	}	EMPTY	EMPTY
417	854	1	0	0	0	if ( group -> meth != r -> meth ||	group meth r meth	EMPTY
417	855	2	-1	0	-1	( p != null && group -> meth != p -> meth ) ) {	p group meth p meth	EMPTY
417	856	2	-1	0	-1	openssl _ put _ error ( ec , ec _ r _ incompatible _ objects ) ;	EMPTY	EMPTY
417	857	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
417	858	3	-1	0	-1	}	EMPTY	EMPTY
417	860	1	0	0	0	return group -> meth -> mul ( group , r , g _ scalar , p , p _ scalar , ctx )	group meth mul group r g _ scalar p ctx	EMPTY
417	861	3	-1	0	-1	}	EMPTY	EMPTY
417	863	1	0	0	-1	int ec _ point _ set _ jprojective _ coordinates _ gfp ( const ec _ group * group  ec _ point * point	group point	EMPTY
417	864	2	-1	0	-1	const bignum * x  const bignum * y	EMPTY	EMPTY
417	865	2	-1	0	-1	const bignum * z  bn _ ctx * ctx ) {	ctx	EMPTY
417	866	2	-1	0	-1	if ( group -> meth != point -> meth ) {	group meth point meth	EMPTY
417	867	2	-1	0	-1	openssl _ put _ error ( ec  ec _ r _ incompatible _ objects ) ;	EMPTY	EMPTY
417	868	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
417	869	2	-1	0	-1	}	EMPTY	EMPTY
417	870	2	-1	0	-1	return ec _ gfp _ simple _ set _ jprojective _ coordinates _ gfp ( group  point  x  y  z	group point	EMPTY
417	871	2	-1	0	-1	ctx ) ;	ctx	EMPTY
417	872	3	-1	0	-1	}	EMPTY	EMPTY
417	874	1	0	0	-1	void ec _ group _ set _ asn1 _ flag ( ec _ group * group  int flag ) { }	ec _ group _ set _ asn1 _ flag group flag	EMPTY
417	876	1	0	0	-1	const ec _ method * ec _ group _ method _ of ( const ec _ group * group ) {	ec _ group _ method _ of group	EMPTY
417	877	2	-1	0	-1	return null ;	EMPTY	EMPTY
417	878	3	-1	0	-1	}	EMPTY	EMPTY
417	880	1	0	0	-1	int ec _ method _ get _ field _ type ( const ec _ method * meth ) {	ec _ method _ get _ field _ type meth	EMPTY
417	881	2	-1	0	-1	return nid _ x9 _ 62 _ prime _ field ;	EMPTY	EMPTY
417	882	3	-1	0	-1	}	EMPTY	EMPTY
417	884	1	0	0	-1	void ec _ group _ set _ point _ conversion _ form ( ec _ group * group	ec _ group _ set _ point _ conversion _ form group	EMPTY
417	885	2	-1	0	-1	point _ conversion _ form _ t form ) {	point _ conversion _ form _ t	EMPTY
417	886	2	-1	0	-1	if ( form != point _ conversion _ uncompressed ) {	point _ conversion _ uncompressed	EMPTY
417	887	2	-1	0	-1	abort ( ) ;	EMPTY	EMPTY
417	888	2	-1	0	-1	}	EMPTY	EMPTY
417	889	3	-1	0	-1	}	EMPTY	EMPTY
424	33	1	0	0	-1	void ec _ gfp _ nistp _ points _ make _ affine _ internal (	EMPTY	EMPTY
424	34	2	-1	0	-1	size _ t num  void * point _ array  size _ t felem _ size  void * tmp _ felems	EMPTY	EMPTY
424	35	2	-1	0	-1	void ( * felem _ one ) ( void * out )  int ( * felem _ is _ zero ) ( const void * in )	EMPTY	EMPTY
424	36	2	-1	0	-1	void ( * felem _ assign ) ( void * out  const void * in )	EMPTY	EMPTY
424	37	2	-1	0	-1	void ( * felem _ square ) ( void * out  const void * in )	EMPTY	EMPTY
424	38	2	-1	0	-1	void ( * felem _ mul ) ( void * out  const void * in1  const void * in2 )	EMPTY	EMPTY
424	39	2	-1	0	-1	void ( * felem _ inv ) ( void * out  const void * in )	EMPTY	EMPTY
424	40	2	-1	0	-1	void ( * felem _ contract ) ( void * out  const void * in ) ) {	EMPTY	EMPTY
424	41	3	-1	0	-1	int i = numconst ;	EMPTY	EMPTY
424	43	1	0	0	-1	# define tmp _ felem ( i ) ( & ( ( char * ) tmp _ felems ) [ ( i ) * felem _ size ] )	EMPTY	EMPTY
424	44	2	-1	0	-1	# define x ( i ) ( & ( ( char * ) point _ array ) [ numconst * ( i ) * felem _ size ] )	EMPTY	EMPTY
424	45	2	-1	0	-1	# define y ( i ) ( & ( ( char * ) point _ array ) [ ( numconst * ( i ) + numconst ) * felem _ size ] )	EMPTY	EMPTY
424	46	3	-1	0	-1	# define z ( i ) ( & ( ( char * ) point _ array ) [ ( numconst * ( i ) + numconst ) * felem _ size ] )	EMPTY	EMPTY
424	48	1	0	0	0	if ( ! felem _ is _ zero ( z ( numconst ) ) ) {	EMPTY	EMPTY
424	49	2	-1	0	-1	felem _ assign ( tmp _ felem ( numconst )  z ( numconst ) ) ;	EMPTY	EMPTY
424	50	2	-1	0	-1	}	EMPTY	EMPTY
424	51	2	-1	0	-1	felem _ one ( tmp _ felem ( numconst ) ) ;	EMPTY	EMPTY
424	52	3	-1	0	-1	}	EMPTY	EMPTY
424	54	1	0	0	0	for ( i = numconst ; i < ( int ) num ; i ++ ) {	EMPTY	EMPTY
424	55	2	-1	0	-1	if ( ! felem _ is _ zero ( z ( i ) ) ) {	EMPTY	EMPTY
424	56	2	-1	0	-1	felem _ mul ( tmp _ felem ( i )  tmp _ felem ( i - numconst )  z ( i ) ) ;	EMPTY	EMPTY
424	57	2	-1	0	-1	}	EMPTY	EMPTY
424	58	2	-1	0	-1	felem _ assign ( tmp _ felem ( i )  tmp _ felem ( i - numconst ) ) ;	EMPTY	EMPTY
424	59	2	-1	0	-1	}	EMPTY	EMPTY
424	60	3	-1	0	-1	}	EMPTY	EMPTY
424	64	1	1	1	1	felem _ inv ( tmp _ felem ( num - numconst )  tmp _ felem ( num - numconst ) ) ;	EMPTY	EMPTY
424	65	2	-1	0	-1	for ( i = num - numconst ; i >= numconst ; i -- ) {	EMPTY	EMPTY
424	66	3	-1	0	-1	if ( i > numconst ) {	EMPTY	EMPTY
424	70	1	1	1	1	felem _ mul ( tmp _ felem ( num )  tmp _ felem ( i - numconst )  tmp _ felem ( i ) ) ;	EMPTY	EMPTY
424	71	2	-1	0	-1	}	EMPTY	EMPTY
424	72	2	-1	0	-1	felem _ assign ( tmp _ felem ( num )  tmp _ felem ( numconst ) ) ;	EMPTY	EMPTY
424	73	3	-1	0	-1	}	EMPTY	EMPTY
424	75	1	1	0	1	if ( ! felem _ is _ zero ( z ( i ) ) ) {	EMPTY	EMPTY
424	76	2	-1	0	-1	if ( i > numconst ) {	EMPTY	EMPTY
424	78	2	-1	1	-1	felem _ mul ( tmp _ felem ( i - numconst )  tmp _ felem ( i )  z ( i ) ) ;	EMPTY	EMPTY
424	79	3	-1	0	-1	}	EMPTY	EMPTY
424	82	1	1	1	1	felem _ square ( z ( i )  tmp _ felem ( num ) ) ;	EMPTY	EMPTY
424	83	2	-1	1	-1	felem _ mul ( x ( i )  x ( i )  z ( i ) ) ;	EMPTY	EMPTY
424	84	2	-1	0	-1	felem _ mul ( z ( i )  z ( i )  tmp _ felem ( num ) ) ;	EMPTY	EMPTY
424	85	2	-1	1	-1	felem _ mul ( y ( i )  y ( i )  z ( i ) ) ;	EMPTY	EMPTY
424	86	2	-1	0	-1	felem _ contract ( x ( i )  x ( i ) ) ;	EMPTY	EMPTY
424	87	2	-1	0	-1	felem _ contract ( y ( i )  y ( i ) ) ;	EMPTY	EMPTY
424	88	2	-1	0	-1	felem _ one ( z ( i ) ) ;	EMPTY	EMPTY
424	89	2	-1	0	-1	}	EMPTY	EMPTY
424	90	2	-1	0	-1	if ( i > numconst ) {	EMPTY	EMPTY
424	92	2	-1	1	-1	felem _ assign ( tmp _ felem ( i - numconst )  tmp _ felem ( i ) ) ;	EMPTY	EMPTY
424	93	2	-1	0	-1	}	EMPTY	EMPTY
424	94	2	-1	0	-1	}	EMPTY	EMPTY
424	95	2	-1	0	-1	}	EMPTY	EMPTY
424	96	3	-1	0	-1	}	EMPTY	EMPTY
424	169	1	0	0	-1	void ec _ gfp _ nistp _ recode _ scalar _ bits ( uint8 _ t * sign  uint8 _ t * digit	EMPTY	EMPTY
424	170	2	-1	0	-1	uint8 _ t in ) {	EMPTY	EMPTY
424	171	3	-1	0	-1	uint8 _ t s  d ;	EMPTY	EMPTY
424	173	1	1	1	-1	s = ~ ( ( in >> numconst ) - numconst ) ;	EMPTY	EMPTY
424	175	1	1	1	-1	d = ( numconst << numconst ) - in - numconst ;	EMPTY	EMPTY
424	176	2	-1	0	-1	d = ( d & s ) | ( in & ~ s ) ;	EMPTY	EMPTY
424	177	3	-1	0	-1	d = ( d >> numconst ) + ( d & numconst ) ;	EMPTY	EMPTY
424	181	1	0	0	-1	}	EMPTY	EMPTY
424	183	1	1	1	-1	# endif	EMPTY	EMPTY
431	61	1	0	0	-1	static void ctr128 _ inc ( uint8 _ t * counter ) {	ctr128 _ inc counter	EMPTY
431	62	2	-1	0	-1	uint32 _ t n = 16 ;	EMPTY	EMPTY
431	63	3	-1	0	-1	uint8 _ t c ;	EMPTY	EMPTY
431	65	1	0	0	-1	do {	EMPTY	EMPTY
431	66	2	-1	0	-1	-- n ;	EMPTY	EMPTY
431	67	2	-1	0	-1	c = counter [ n ] ;	counter	EMPTY
431	68	2	-1	0	-1	++ c ;	EMPTY	EMPTY
431	69	2	-1	0	-1	counter [ n ] = c ;	counter	EMPTY
431	70	2	-1	0	-1	if ( c ) {	EMPTY	EMPTY
431	71	2	-1	0	-1	return ;	EMPTY	EMPTY
431	72	2	-1	0	-1	}	EMPTY	EMPTY
431	73	2	-1	0	-1	} while ( n )	EMPTY	EMPTY
431	74	3	-1	0	-1	}	EMPTY	EMPTY
431	76	1	0	0	-1	openssl _ compile _ assert ( ( numconst % sizeof ( size _ t ) ) == numconst  bad _ size _ t _ size ) ;	EMPTY	EMPTY
431	88	1	0	0	-1	void crypto _ ctr128 _ encrypt ( const uint8 _ t * in  uint8 _ t * out  size _ t len	crypto _ ctr128 _ encrypt in out len	EMPTY
431	89	2	-1	0	-1	const void * key  uint8 _ t ivec [ numconst ]	key	EMPTY
431	90	2	-1	0	-1	uint8 _ t ecount _ buf [ numconst ]  unsigned int * num	EMPTY	EMPTY
431	91	2	-1	0	-1	block128 _ f block ) {	block128 _ f	EMPTY
431	92	3	-1	0	-1	unsigned int n ;	EMPTY	EMPTY
431	94	1	0	0	-1	assert ( key && ecount _ buf && num ) ;	key	EMPTY
431	95	2	-1	0	-1	assert ( len == numconst || ( in && out ) ) ;	len in out	EMPTY
431	96	3	-1	0	-1	assert ( * num < numconst ) ;	EMPTY	EMPTY
431	98	1	0	0	-1	n = * num	EMPTY	EMPTY
431	100	1	0	0	0	while ( n && len ) {	len	EMPTY
431	101	2	-1	0	-1	* ( out ++ ) = * ( in ++ ) ^ ecount _ buf [ n ] ;	out in	EMPTY
431	102	2	-1	0	-1	-- len ;	len	EMPTY
431	103	2	-1	0	-1	n = ( n + 1 ) % 16 ;	EMPTY	EMPTY
431	104	3	-1	0	-1	}	EMPTY	EMPTY
431	106	1	0	0	-1	# if strict _ alignment	EMPTY	EMPTY
431	107	2	-1	0	-1	if ( ( ( size _ t ) in | ( size _ t ) out | ( size _ t ) ivec ) % sizeof ( size _ t ) != numconst ) {	in out	EMPTY
431	108	2	-1	0	-1	size _ t l = numconst ;	EMPTY	EMPTY
431	109	2	-1	0	-1	while ( l < len ) {	len	EMPTY
431	110	2	-1	0	-1	if ( n == numconst ) {	EMPTY	EMPTY
431	111	2	-1	0	-1	( * block ) ( ivec  ecount _ buf  key ) ;	key	EMPTY
431	112	2	-1	0	-1	ctr128 _ inc ( ivec ) ;	ctr128 _ inc	EMPTY
431	113	2	-1	0	-1	}	EMPTY	EMPTY
431	114	2	-1	0	-1	out [ l ] = in [ l ] ^ ecount _ buf [ n ] ;	out in	EMPTY
431	115	2	-1	0	-1	++ l ;	EMPTY	EMPTY
431	116	2	-1	0	-1	n = ( n + numconst ) % numconst ;	EMPTY	EMPTY
431	117	3	-1	0	-1	}	EMPTY	EMPTY
431	120	1	0	0	-1	return ;	EMPTY	EMPTY
431	121	2	-1	0	-1	}	EMPTY	EMPTY
431	122	3	-1	0	-1	# endif	EMPTY	EMPTY
431	124	1	0	0	0	while ( len >= 16 ) {	len	EMPTY
431	125	2	-1	0	-1	( * block ) ( ivec , ecount _ buf , key ) ;	key	EMPTY
431	126	2	-1	0	-1	ctr128 _ inc ( ivec ) ;	ctr128 _ inc	EMPTY
431	127	2	-1	0	-1	for ( ; n < 16 ; n += sizeof ( size _ t ) ) {	EMPTY	EMPTY
431	128	2	-1	0	-1	* ( size _ t * ) ( out + n ) = * ( size _ t * ) ( in + n ) ^ * ( size _ t * ) ( ecount _ buf + n ) ;	out in	EMPTY
431	129	2	-1	0	-1	}	EMPTY	EMPTY
431	130	2	-1	0	-1	len -= 16 ;	len	EMPTY
431	131	2	-1	0	-1	out += 16 ;	out	EMPTY
431	132	2	-1	0	-1	in += 16 ;	in	EMPTY
431	133	2	-1	0	-1	n = 0 ;	EMPTY	EMPTY
431	134	2	-1	0	-1	}	EMPTY	EMPTY
431	135	2	-1	0	-1	if ( len ) {	len	EMPTY
431	136	2	-1	0	-1	( * block ) ( ivec , ecount _ buf , key ) ;	key	EMPTY
431	137	2	-1	0	-1	ctr128 _ inc ( ivec ) ;	ctr128 _ inc	EMPTY
431	138	2	-1	0	-1	while ( len -- ) {	len	EMPTY
431	139	2	-1	0	-1	out [ n ] = in [ n ] ^ ecount _ buf [ n ] ;	out in	EMPTY
431	140	2	-1	0	-1	++ n ;	EMPTY	EMPTY
431	141	2	-1	0	-1	}	EMPTY	EMPTY
431	142	2	-1	0	-1	}	EMPTY	EMPTY
431	143	2	-1	0	-1	* num = n	EMPTY	EMPTY
431	144	3	-1	0	-1	}	EMPTY	EMPTY
431	147	1	0	0	-1	static void ctr96 _ inc ( uint8 _ t * counter ) {	ctr96 _ inc counter	EMPTY
431	148	2	-1	0	-1	uint32 _ t n = 12 ;	EMPTY	EMPTY
431	149	3	-1	0	-1	uint8 _ t c ;	EMPTY	EMPTY
431	151	1	0	0	-1	do {	EMPTY	EMPTY
431	152	2	-1	0	-1	-- n ;	EMPTY	EMPTY
431	153	2	-1	0	-1	c = counter [ n ] ;	counter	EMPTY
431	154	2	-1	0	-1	++ c ;	EMPTY	EMPTY
431	155	2	-1	0	-1	counter [ n ] = c ;	counter	EMPTY
431	156	2	-1	0	-1	if ( c ) {	EMPTY	EMPTY
431	157	2	-1	0	-1	return ;	EMPTY	EMPTY
431	158	2	-1	0	-1	}	EMPTY	EMPTY
431	159	2	-1	0	-1	} while ( n )	EMPTY	EMPTY
431	160	3	-1	0	-1	}	EMPTY	EMPTY
431	162	1	0	0	-1	void crypto _ ctr128 _ encrypt _ ctr32 ( const uint8 _ t * in  uint8 _ t * out	crypto _ ctr128 _ encrypt _ ctr32 in out	EMPTY
431	163	2	-1	0	-1	size _ t len  const void * key	len key	EMPTY
431	164	2	-1	0	-1	uint8 _ t ivec [ numconst ]	EMPTY	EMPTY
431	165	2	-1	0	-1	uint8 _ t ecount _ buf [ numconst ]	EMPTY	EMPTY
431	166	2	-1	0	-1	unsigned int * num  ctr128 _ f func ) {	ctr128 _ f	EMPTY
431	167	3	-1	0	-1	unsigned int n , ctr32 ;	EMPTY	EMPTY
431	169	1	0	0	-1	assert ( key && ecount _ buf && num ) ;	key	EMPTY
431	170	2	-1	0	-1	assert ( len == numconst || ( in && out ) ) ;	len in out	EMPTY
431	171	3	-1	0	-1	assert ( * num < numconst ) ;	EMPTY	EMPTY
431	173	1	0	0	-1	n = * num	EMPTY	EMPTY
431	175	1	0	0	0	while ( n && len ) {	len	EMPTY
431	176	2	-1	0	-1	* ( out ++ ) = * ( in ++ ) ^ ecount _ buf [ n ] ;	out in	EMPTY
431	177	2	-1	0	-1	-- len ;	len	EMPTY
431	178	2	-1	0	-1	n = ( n + 1 ) % 16 ;	EMPTY	EMPTY
431	179	3	-1	0	-1	}	EMPTY	EMPTY
431	181	1	1	0	-1	ctr32 = getu32 ( ivec + numconst ) ;	EMPTY	EMPTY
431	182	2	-1	0	-1	while ( len >= numconst ) {	len	EMPTY
431	183	2	-1	0	-1	size _ t blocks = len / 16 ;	blocks len	EMPTY
431	187	2	-1	1	-1	if ( sizeof ( size _ t ) > sizeof ( unsigned int ) && blocks > ( 1u << 28 ) ) {	blocks	EMPTY
431	188	2	-1	0	-1	blocks = ( 1u << 28 ) ;	blocks	EMPTY
431	189	2	-1	0	-1	}	EMPTY	EMPTY
431	194	2	-1	1	-1	ctr32 += ( uint32 _ t ) blocks	blocks	EMPTY
431	195	2	-1	0	-1	if ( ctr32 < blocks ) {	blocks	EMPTY
431	196	2	-1	0	-1	blocks -= ctr32 ;	blocks	EMPTY
431	197	2	-1	0	-1	ctr32 = 0 ;	EMPTY	EMPTY
431	198	2	-1	0	-1	}	EMPTY	EMPTY
431	199	2	-1	0	-1	( * func ) ( in , out , blocks , key , ivec )	in out blocks key	EMPTY
431	201	2	-1	1	-1	putu32 ( ivec + numconst  ctr32 ) ;	EMPTY	EMPTY
431	203	2	-1	1	-1	if ( ctr32 == 0 ) {	EMPTY	EMPTY
431	204	2	-1	0	-1	ctr96 _ inc ( ivec ) ;	ctr96 _ inc	EMPTY
431	205	2	-1	0	-1	}	EMPTY	EMPTY
431	206	2	-1	0	-1	blocks *= 16	blocks	EMPTY
431	207	2	-1	0	-1	len -= blocks	len blocks	EMPTY
431	208	2	-1	0	-1	out += blocks	out blocks	EMPTY
431	209	2	-1	0	-1	in += blocks	in blocks	EMPTY
431	210	2	-1	0	-1	}	EMPTY	EMPTY
431	211	2	-1	0	-1	if ( len ) {	len	EMPTY
431	212	2	-1	0	-1	memset ( ecount _ buf  numconst  numconst ) ;	EMPTY	EMPTY
431	213	2	-1	0	-1	( * func ) ( ecount _ buf  ecount _ buf  numconst  key  ivec ) ;	key	EMPTY
431	214	2	-1	0	-1	++ ctr32 ;	EMPTY	EMPTY
431	215	2	-1	0	-1	putu32 ( ivec + numconst  ctr32 ) ;	EMPTY	EMPTY
431	216	2	-1	0	-1	if ( ctr32 == numconst ) {	EMPTY	EMPTY
431	217	2	-1	0	-1	ctr96 _ inc ( ivec ) ;	ctr96 _ inc	EMPTY
431	218	2	-1	0	-1	}	EMPTY	EMPTY
431	219	3	-1	0	-1	while ( len -- ) {	len	EMPTY
431	220	1	0	0	-1	out [ n ] = in [ n ] ^ ecount _ buf [ n ] ;	out in	EMPTY
431	221	2	-1	0	-1	++ n ;	EMPTY	EMPTY
431	222	2	-1	0	-1	}	EMPTY	EMPTY
431	223	3	-1	0	-1	}	EMPTY	EMPTY
431	226	1	0	0	-1	}	EMPTY	EMPTY
441	66	1	0	0	-1	static int null _ init _ key ( evp _ cipher _ ctx * ctx  const uint8 _ t * key	ctx key	EMPTY
441	67	2	-1	0	-1	const uint8 _ t * iv  int enc ) {	iv	EMPTY
441	68	2	-1	0	-1	return 1	EMPTY	EMPTY
441	69	3	-1	0	-1	}	EMPTY	EMPTY
441	71	1	0	0	-1	static int null _ cipher ( evp _ cipher _ ctx * ctx  uint8 _ t * out	ctx out	EMPTY
441	72	2	-1	0	-1	const uint8 _ t * in  size _ t in _ len ) {	EMPTY	EMPTY
441	73	2	-1	0	-1	if ( in != out ) {	out	EMPTY
441	74	2	-1	0	-1	memcpy ( out , in , in _ len ) ;	out	EMPTY
441	75	2	-1	0	-1	}	EMPTY	EMPTY
441	76	2	-1	0	-1	return 1	EMPTY	EMPTY
441	77	3	-1	0	-1	}	EMPTY	EMPTY
441	79	1	1	0	-1	static const evp _ cipher n _ cipher = {	EMPTY	EMPTY
441	80	2	-1	1	-1	nid _ undef  numconst  numconst  numconst	EMPTY	EMPTY
441	81	2	-1	1	-1	numconst  numconst  null  null _ init _ key	EMPTY	EMPTY
441	82	2	-1	1	-1	null _ cipher  null  null	EMPTY	EMPTY
441	83	3	-1	0	-1	} ;	EMPTY	EMPTY
441	85	1	0	0	0	return & n _ cipher	EMPTY	EMPTY
459	47	1	0	0	-1	static int i2r _ pci ( x509v3 _ ext _ method * method  proxy _ cert _ info _ extension * ext	method	EMPTY
459	48	2	-1	0	-1	bio * out  int indent )	out indent	EMPTY
459	49	2	-1	0	-1	static proxy _ cert _ info _ extension * r2i _ pci ( x509v3 _ ext _ method * method	method	EMPTY
459	50	3	-1	0	-1	x509v3 _ ctx * ctx  char * str ) ;	ctx str	EMPTY
459	52	1	0	0	-1	const x509v3 _ ext _ method v3 _ pci =	EMPTY	EMPTY
459	53	2	-1	0	-1	{ nid _ proxycertinfo  numconst  asn1 _ item _ ref ( proxy _ cert _ info _ extension )	EMPTY	EMPTY
459	54	2	-1	0	-1	numconst  numconst  numconst  numconst	EMPTY	EMPTY
459	55	2	-1	0	-1	numconst  numconst	EMPTY	EMPTY
459	56	2	-1	0	-1	null  null	EMPTY	EMPTY
459	57	2	-1	0	-1	( x509v3 _ ext _ i2r ) i2r _ pci	EMPTY	EMPTY
459	58	2	-1	0	-1	( x509v3 _ ext _ r2i ) r2i _ pci	EMPTY	EMPTY
459	59	2	-1	0	-1	null	EMPTY	EMPTY
459	60	3	-1	0	-1	} ;	EMPTY	EMPTY
459	62	1	0	0	-1	static int i2r _ pci ( x509v3 _ ext _ method * method  proxy _ cert _ info _ extension * pci	method	EMPTY
459	63	2	-1	0	-1	bio * out  int indent )	out indent	EMPTY
459	64	2	-1	0	-1	{	EMPTY	EMPTY
459	65	2	-1	0	-1	bio _ printf ( out ,  " %*spath length constraint:  "  , indent ,  "  "  )	out indent	EMPTY
459	66	2	-1	0	-1	if ( pci -> pcpathlengthconstraint )	EMPTY	EMPTY
459	67	2	-1	0	-1	i2a _ asn1 _ integer ( out , pci -> pcpathlengthconstraint ) ;	out	EMPTY
459	68	2	-1	0	-1	else	EMPTY	EMPTY
459	69	2	-1	0	-1	bio _ printf ( out ,  " infinite "  )	out	EMPTY
459	70	2	-1	0	-1	bio _ puts ( out ,  " \n "  )	bio _ puts out	EMPTY
459	71	2	-1	0	-1	bio _ printf ( out ,  " %*spolicy language:  "  , indent ,  "  "  )	out indent	EMPTY
459	72	2	-1	0	-1	i2a _ asn1 _ object ( out , pci -> proxypolicy -> policylanguage )	out	EMPTY
459	73	2	-1	0	-1	bio _ puts ( out ,  " \n "  )	bio _ puts out	EMPTY
459	74	2	-1	0	-1	if ( pci -> proxypolicy -> policy && pci -> proxypolicy -> policy -> data )	data	EMPTY
459	75	2	-1	0	-1	bio _ printf ( out ,  " %*spolicy text: %s\n "  , indent ,  "  "  ,	out indent	EMPTY
459	76	2	-1	0	-1	pci -> proxypolicy -> policy -> data )	data	EMPTY
459	77	2	-1	0	-1	return 1	EMPTY	EMPTY
459	78	3	-1	0	-1	}	EMPTY	EMPTY
459	80	1	0	0	-1	static int process _ pci _ value ( conf _ value * val	EMPTY	EMPTY
459	81	2	-1	0	-1	asn1 _ object * * language  asn1 _ integer * * pathlen	EMPTY	EMPTY
459	82	2	-1	0	-1	asn1 _ octet _ string * * policy )	EMPTY	EMPTY
459	83	2	-1	0	-1	{	EMPTY	EMPTY
459	84	3	-1	0	-1	int free _ policy = 0 ;	EMPTY	EMPTY
459	86	1	0	0	0	if ( strcmp ( val -> name  strlit ) == numconst )	name	EMPTY
459	87	2	-1	0	-1	{	EMPTY	EMPTY
459	88	2	-1	0	-1	if ( * language )	EMPTY	EMPTY
459	89	2	-1	0	-1	{	EMPTY	EMPTY
459	90	2	-1	0	-1	openssl _ put _ error ( x509v3 , x509v3 _ r _ policy _ language _ already _ defined ) ;	EMPTY	EMPTY
459	91	2	-1	0	-1	x509v3 _ conf _ err ( val ) ;	EMPTY	EMPTY
459	92	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
459	93	2	-1	0	-1	}	EMPTY	EMPTY
459	94	2	-1	0	-1	if ( ! ( * language = obj _ txt2obj ( val -> value , 0 ) ) )	obj _ txt2obj value	EMPTY
459	95	2	-1	0	-1	{	EMPTY	EMPTY
459	96	2	-1	0	-1	openssl _ put _ error ( x509v3 , x509v3 _ r _ invalid _ object _ identifier ) ;	EMPTY	EMPTY
459	97	2	-1	0	-1	x509v3 _ conf _ err ( val ) ;	EMPTY	EMPTY
459	98	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
459	99	2	-1	0	-1	}	EMPTY	EMPTY
459	100	2	-1	0	-1	}	EMPTY	EMPTY
459	101	2	-1	0	-1	if ( strcmp ( val -> name  strlit ) == numconst )	name	EMPTY
459	102	2	-1	0	-1	{	EMPTY	EMPTY
459	103	2	-1	0	-1	if ( * pathlen )	EMPTY	EMPTY
459	104	2	-1	0	-1	{	EMPTY	EMPTY
459	105	2	-1	0	-1	openssl _ put _ error ( x509v3 , x509v3 _ r _ policy _ path _ length _ already _ defined ) ;	EMPTY	EMPTY
459	106	2	-1	0	-1	x509v3 _ conf _ err ( val ) ;	EMPTY	EMPTY
459	107	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
459	108	2	-1	0	-1	}	EMPTY	EMPTY
459	109	2	-1	0	-1	if ( ! x509v3 _ get _ value _ int ( val , pathlen ) )	EMPTY	EMPTY
459	110	2	-1	0	-1	{	EMPTY	EMPTY
459	111	2	-1	0	-1	openssl _ put _ error ( x509v3 , x509v3 _ r _ policy _ path _ length ) ;	EMPTY	EMPTY
459	112	2	-1	0	-1	x509v3 _ conf _ err ( val ) ;	EMPTY	EMPTY
459	113	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
459	114	2	-1	0	-1	}	EMPTY	EMPTY
459	115	3	-1	0	-1	}	EMPTY	EMPTY
459	116	1	0	0	-1	if ( strcmp ( val -> name  strlit ) == numconst )	name	EMPTY
459	117	2	-1	0	-1	{	EMPTY	EMPTY
459	118	2	-1	0	-1	unsigned char * tmp _ data = null ;	EMPTY	EMPTY
459	119	2	-1	0	-1	long val _ len ;	EMPTY	EMPTY
459	120	2	-1	0	-1	if ( ! * policy )	EMPTY	EMPTY
459	121	2	-1	0	-1	{	EMPTY	EMPTY
459	122	2	-1	0	-1	* policy = asn1 _ octet _ string _ new ( ) ;	EMPTY	EMPTY
459	123	2	-1	0	-1	if ( ! * policy )	EMPTY	EMPTY
459	124	2	-1	0	-1	{	EMPTY	EMPTY
459	125	2	-1	0	-1	openssl _ put _ error ( x509v3 , err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
459	126	2	-1	0	-1	x509v3 _ conf _ err ( val ) ;	EMPTY	EMPTY
459	127	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
459	128	2	-1	0	-1	}	EMPTY	EMPTY
459	129	2	-1	0	-1	free _ policy = 1 ;	EMPTY	EMPTY
459	130	2	-1	0	-1	}	EMPTY	EMPTY
459	131	2	-1	0	-1	if ( strncmp ( val -> value  strlit  numconst ) == numconst )	value	EMPTY
459	132	2	-1	0	-1	{	EMPTY	EMPTY
459	133	2	-1	0	-1	unsigned char * tmp _ data2 =	EMPTY	EMPTY
459	134	3	-1	0	-1	string _ to _ hex ( val -> value + 4 , & val _ len ) ;	value	EMPTY
459	136	1	0	0	0	if ( ! tmp _ data2 )	EMPTY	EMPTY
459	137	2	-1	0	-1	{	EMPTY	EMPTY
459	138	2	-1	0	-1	openssl _ put _ error ( x509v3 , x509v3 _ r _ illegal _ hex _ digit ) ;	EMPTY	EMPTY
459	139	2	-1	0	-1	x509v3 _ conf _ err ( val ) ;	EMPTY	EMPTY
459	140	2	-1	0	-1	goto err ;	EMPTY	EMPTY
459	141	3	-1	0	-1	}	EMPTY	EMPTY
459	143	1	1	0	-1	tmp _ data = openssl _ realloc ( ( * policy ) -> data ,	data	EMPTY
459	144	2	-1	0	-1	( * policy ) -> length + val _ len + 1 )	length	EMPTY
459	145	2	-1	0	-1	if ( tmp _ data )	EMPTY	EMPTY
459	146	2	-1	0	-1	{	EMPTY	EMPTY
459	147	2	-1	0	-1	( * policy ) -> data = tmp _ data	data	EMPTY
459	148	2	-1	0	-1	memcpy ( & ( * policy ) -> data [ ( * policy ) -> length ]	data length	EMPTY
459	149	2	-1	0	-1	tmp _ data2  val _ len ) ;	EMPTY	EMPTY
459	150	2	-1	0	-1	( * policy ) -> length += val _ len	length	EMPTY
459	151	2	-1	0	-1	( * policy ) -> data [ ( * policy ) -> length ] = '\0'	data length	EMPTY
459	152	2	-1	0	-1	}	EMPTY	EMPTY
459	153	2	-1	0	-1	else	EMPTY	EMPTY
459	154	2	-1	0	-1	{	EMPTY	EMPTY
459	155	2	-1	0	-1	empty	EMPTY	EMPTY
459	157	2	-1	1	-1	( * policy ) -> data = null ;	data	EMPTY
459	158	2	-1	0	-1	( * policy ) -> length = 0	length	EMPTY
459	159	2	-1	0	-1	openssl _ put _ error ( x509v3  err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
459	160	2	-1	0	-1	;	EMPTY	EMPTY
459	161	2	-1	0	-1	goto err	EMPTY	EMPTY
459	162	2	-1	0	-1	}	EMPTY	EMPTY
459	163	2	-1	0	-1	openssl _ free ( tmp _ data2 ) ;	EMPTY	EMPTY
459	164	2	-1	0	-1	}	EMPTY	EMPTY
459	165	2	-1	0	-1	if ( strncmp ( val -> value  strlit  numconst ) == numconst )	value	EMPTY
459	166	2	-1	0	-1	{	EMPTY	EMPTY
459	167	2	-1	0	-1	unsigned char buf [ numconst ] ;	buf	EMPTY
459	168	2	-1	0	-1	int n ;	n	EMPTY
459	169	2	-1	0	-1	bio * b = bio _ new _ file ( val -> value + numconst  strlit ) ;	b bio _ new _ file value	EMPTY
459	170	2	-1	0	-1	if ( ! b )	b	EMPTY
459	171	2	-1	0	-1	{	EMPTY	EMPTY
459	172	2	-1	0	-1	openssl _ put _ error ( x509v3  err _ r _ bio _ lib ) ;	EMPTY	EMPTY
459	173	3	-1	0	-1	x509v3 _ conf _ err ( val ) ;	EMPTY	EMPTY
459	174	1	0	0	-1	goto err ;	EMPTY	EMPTY
459	175	2	-1	0	-1	}	EMPTY	EMPTY
459	176	2	-1	0	-1	while ( ( n = bio _ read ( b  buf  sizeof ( buf ) ) ) > numconst	n bio _ read b buf buf	EMPTY
459	177	2	-1	0	-1	|| ( n == numconst && bio _ should _ retry ( b ) ) )	n bio _ should _ retry b	EMPTY
459	178	2	-1	0	-1	{	EMPTY	EMPTY
459	179	3	-1	0	-1	if ( ! n ) continue ;	n	EMPTY
459	181	1	0	0	-1	tmp _ data = openssl _ realloc ( ( * policy ) -> data	data	EMPTY
459	182	3	-1	0	-1	( * policy ) -> length + n + numconst ) ;	length n	EMPTY
459	184	1	0	0	0	if ( ! tmp _ data )	EMPTY	EMPTY
459	185	3	-1	0	-1	break ;	EMPTY	EMPTY
459	187	1	0	0	-1	( * policy ) -> data = tmp _ data ;	data	EMPTY
459	188	2	-1	0	-1	memcpy ( & ( * policy ) -> data [ ( * policy ) -> length ]	data length	EMPTY
459	189	2	-1	0	-1	buf  n ) ;	buf n	EMPTY
459	190	2	-1	0	-1	( * policy ) -> length += n ;	length n	EMPTY
459	191	2	-1	0	-1	( * policy ) -> data [ ( * policy ) -> length ] = '\\0' ;	data length	EMPTY
459	192	2	-1	0	-1	}	EMPTY	EMPTY
459	193	3	-1	0	-1	bio _ free _ all ( b ) ;	bio _ free _ all b	EMPTY
459	195	1	1	0	1	if ( n < numconst )	n	EMPTY
459	196	2	-1	0	-1	{	EMPTY	EMPTY
459	197	2	-1	0	-1	openssl _ put _ error ( x509v3  err _ r _ bio _ lib ) ;	EMPTY	EMPTY
459	198	2	-1	0	-1	x509v3 _ conf _ err ( val ) ;	EMPTY	EMPTY
459	199	2	-1	0	-1	goto err ;	EMPTY	EMPTY
459	200	2	-1	0	-1	}	EMPTY	EMPTY
459	201	2	-1	0	-1	}	EMPTY	EMPTY
459	202	2	-1	0	-1	if ( strncmp ( val -> value  strlit  numconst ) == numconst )	value	EMPTY
459	203	2	-1	0	-1	{	EMPTY	EMPTY
459	204	2	-1	0	-1	val _ len = strlen ( val -> value + numconst ) ;	value	EMPTY
459	205	2	-1	0	-1	tmp _ data = openssl _ realloc ( ( * policy ) -> data	data	EMPTY
459	206	2	-1	0	-1	( * policy ) -> length + val _ len + numconst ) ;	length	EMPTY
459	207	2	-1	0	-1	if ( tmp _ data )	EMPTY	EMPTY
459	208	2	-1	0	-1	{	EMPTY	EMPTY
459	209	2	-1	0	-1	( * policy ) -> data = tmp _ data ;	data	EMPTY
459	210	2	-1	0	-1	memcpy ( & ( * policy ) -> data [ ( * policy ) -> length ]	data length	EMPTY
459	211	2	-1	0	-1	val -> value + numconst  val _ len ) ;	value	EMPTY
459	212	2	-1	0	-1	( * policy ) -> length += val _ len ;	length	EMPTY
459	213	2	-1	0	-1	( * policy ) -> data [ ( * policy ) -> length ] = '\\0' ;	data length	EMPTY
459	214	2	-1	0	-1	}	EMPTY	EMPTY
459	215	2	-1	0	-1	else	EMPTY	EMPTY
459	216	2	-1	0	-1	{	EMPTY	EMPTY
459	218	2	-1	1	-1	( * policy ) -> data = null ;	data	EMPTY
459	219	2	-1	0	-1	( * policy ) -> length = 0	length	EMPTY
459	220	2	-1	0	-1	openssl _ put _ error ( x509v3  err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
459	221	2	-1	0	-1	;	EMPTY	EMPTY
459	222	2	-1	0	-1	goto err	EMPTY	EMPTY
459	223	2	-1	0	-1	}	EMPTY	EMPTY
459	224	2	-1	0	-1	}	EMPTY	EMPTY
459	225	3	-1	0	-1	else	EMPTY	EMPTY
459	226	1	0	0	-1	{	EMPTY	EMPTY
459	227	2	-1	0	-1	openssl _ put _ error ( x509v3  x509v3 _ r _ incorrect _ policy _ syntax _ tag ) ;	EMPTY	EMPTY
459	228	2	-1	0	-1	x509v3 _ conf _ err ( val ) ;	EMPTY	EMPTY
459	229	2	-1	0	-1	goto err ;	EMPTY	EMPTY
459	230	2	-1	0	-1	}	EMPTY	EMPTY
459	231	2	-1	0	-1	if ( ! tmp _ data )	EMPTY	EMPTY
459	232	2	-1	0	-1	{	EMPTY	EMPTY
459	233	2	-1	0	-1	openssl _ put _ error ( x509v3  err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
459	234	2	-1	0	-1	x509v3 _ conf _ err ( val ) ;	EMPTY	EMPTY
459	235	2	-1	0	-1	goto err ;	EMPTY	EMPTY
459	236	2	-1	0	-1	}	EMPTY	EMPTY
459	237	2	-1	0	-1	}	EMPTY	EMPTY
459	238	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
459	239	2	-1	0	-1	err :	EMPTY	EMPTY
459	240	2	-1	0	-1	if ( free _ policy )	EMPTY	EMPTY
459	241	2	-1	0	-1	{	EMPTY	EMPTY
459	242	3	-1	0	-1	asn1 _ octet _ string _ free ( * policy ) ;	EMPTY	EMPTY
459	244	1	0	0	-1	}	EMPTY	EMPTY
459	245	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
459	246	3	-1	0	-1	}	EMPTY	EMPTY
459	248	1	0	0	-1	static proxy _ cert _ info _ extension * r2i _ pci ( x509v3 _ ext _ method * method	method	EMPTY
459	249	2	-1	0	-1	x509v3 _ ctx * ctx  char * value )	ctx value	EMPTY
459	250	2	-1	0	-1	{	EMPTY	EMPTY
459	251	2	-1	0	-1	proxy _ cert _ info _ extension * pci = null ;	EMPTY	EMPTY
459	252	2	-1	0	-1	stack _ of ( conf _ value ) * vals ;	EMPTY	EMPTY
459	253	2	-1	0	-1	asn1 _ object * language = null ;	EMPTY	EMPTY
459	254	2	-1	0	-1	asn1 _ integer * pathlen = null ;	EMPTY	EMPTY
459	255	2	-1	0	-1	asn1 _ octet _ string * policy = null ;	EMPTY	EMPTY
459	256	2	-1	0	-1	size _ t i  j ;	i	EMPTY
459	257	3	-1	0	-1	int nid ;	nid	EMPTY
459	259	1	0	0	-1	vals = x509v3 _ parse _ list ( value ) ;	value	EMPTY
459	260	2	-1	0	-1	for ( i = numconst ; i < sk _ conf _ value _ num ( vals ) ; i ++ )	i i i	EMPTY
459	261	2	-1	0	-1	{	EMPTY	EMPTY
459	262	2	-1	0	-1	conf _ value * cnf = sk _ conf _ value _ value ( vals  i ) ;	i	EMPTY
459	263	2	-1	0	-1	if ( ! cnf -> name || ( * cnf -> name != '@' && ! cnf -> value ) )	name name value	EMPTY
459	264	2	-1	0	-1	{	EMPTY	EMPTY
459	265	2	-1	0	-1	openssl _ put _ error ( x509v3  x509v3 _ r _ invalid _ proxy _ policy _ setting ) ;	EMPTY	EMPTY
459	266	2	-1	0	-1	x509v3 _ conf _ err ( cnf ) ;	EMPTY	EMPTY
459	267	2	-1	0	-1	goto err ;	EMPTY	EMPTY
459	268	2	-1	0	-1	}	EMPTY	EMPTY
459	269	2	-1	0	-1	if ( * cnf -> name == '@' )	name	EMPTY
459	270	2	-1	0	-1	{	EMPTY	EMPTY
459	271	2	-1	0	-1	stack _ of ( conf _ value ) * sect ;	EMPTY	EMPTY
459	272	3	-1	0	-1	int success _ p = numconst ;	EMPTY	EMPTY
459	274	1	0	0	-1	sect = x509v3 _ get _ section ( ctx  cnf -> name + numconst ) ;	ctx name	EMPTY
459	275	2	-1	0	-1	if ( ! sect )	EMPTY	EMPTY
459	276	2	-1	0	-1	{	EMPTY	EMPTY
459	277	2	-1	0	-1	openssl _ put _ error ( x509v3  x509v3 _ r _ invalid _ section ) ;	EMPTY	EMPTY
459	278	2	-1	0	-1	x509v3 _ conf _ err ( cnf ) ;	EMPTY	EMPTY
459	279	2	-1	0	-1	goto err ;	EMPTY	EMPTY
459	280	2	-1	0	-1	}	EMPTY	EMPTY
459	281	2	-1	0	-1	for ( j = numconst ; success _ p && j < sk _ conf _ value _ num ( sect ) ; j ++ )	EMPTY	EMPTY
459	282	2	-1	0	-1	{	EMPTY	EMPTY
459	283	2	-1	0	-1	success _ p =	EMPTY	EMPTY
459	284	2	-1	0	-1	process _ pci _ value ( sk _ conf _ value _ value ( sect  j )	EMPTY	EMPTY
459	285	2	-1	0	-1	& language  & pathlen  & policy ) ;	EMPTY	EMPTY
459	286	2	-1	0	-1	}	EMPTY	EMPTY
459	287	2	-1	0	-1	x509v3 _ section _ free ( ctx  sect ) ;	ctx	EMPTY
459	288	2	-1	0	-1	if ( ! success _ p )	EMPTY	EMPTY
459	289	2	-1	0	-1	goto err ;	EMPTY	EMPTY
459	290	2	-1	0	-1	}	EMPTY	EMPTY
459	291	2	-1	0	-1	else	EMPTY	EMPTY
459	292	2	-1	0	-1	{	EMPTY	EMPTY
459	293	2	-1	0	-1	if ( ! process _ pci _ value ( cnf	EMPTY	EMPTY
459	294	2	-1	0	-1	& language  & pathlen  & policy ) )	EMPTY	EMPTY
459	295	2	-1	0	-1	{	EMPTY	EMPTY
459	296	2	-1	0	-1	x509v3 _ conf _ err ( cnf ) ;	EMPTY	EMPTY
459	297	2	-1	0	-1	goto err ;	EMPTY	EMPTY
459	298	2	-1	0	-1	}	EMPTY	EMPTY
459	299	2	-1	0	-1	}	EMPTY	EMPTY
459	300	3	-1	0	-1	}	EMPTY	EMPTY
459	303	1	0	0	-1	if ( ! language )	EMPTY	EMPTY
459	304	2	-1	0	-1	{	EMPTY	EMPTY
459	305	2	-1	0	-1	openssl _ put _ error ( x509v3 , x509v3 _ r _ no _ proxy _ cert _ policy _ language _ defined ) ;	EMPTY	EMPTY
459	306	2	-1	0	-1	goto err ;	EMPTY	EMPTY
459	307	2	-1	0	-1	}	EMPTY	EMPTY
459	308	2	-1	0	-1	nid = obj _ obj2nid ( language )	nid obj _ obj2nid	EMPTY
459	309	2	-1	0	-1	if ( ( nid == nid _ independent || nid == nid _ id _ ppl _ inheritall ) && policy )	nid nid	EMPTY
459	310	2	-1	0	-1	{	EMPTY	EMPTY
459	311	2	-1	0	-1	openssl _ put _ error ( x509v3 ,	EMPTY	EMPTY
459	312	2	-1	0	-1	x509v3 _ r _ policy _ when _ proxy _ language _ requires _ no _ policy ) ;	EMPTY	EMPTY
459	313	2	-1	0	-1	goto err ;	EMPTY	EMPTY
459	314	3	-1	0	-1	}	EMPTY	EMPTY
459	316	1	0	0	-1	pci = proxy _ cert _ info _ extension _ new ( )	EMPTY	EMPTY
459	317	2	-1	0	-1	if ( ! pci )	EMPTY	EMPTY
459	318	2	-1	0	-1	{	EMPTY	EMPTY
459	319	2	-1	0	-1	openssl _ put _ error ( x509v3 , err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
459	320	2	-1	0	-1	goto err ;	EMPTY	EMPTY
459	321	3	-1	0	-1	}	EMPTY	EMPTY
459	323	1	0	0	-1	pci -> proxypolicy -> policylanguage = language	EMPTY	EMPTY
459	324	2	-1	0	-1	pci -> proxypolicy -> policy = policy	EMPTY	EMPTY
459	325	2	-1	0	-1	pci -> pcpathlengthconstraint = pathlen	EMPTY	EMPTY
459	326	2	-1	0	-1	goto end	EMPTY	EMPTY
459	327	2	-1	0	-1	err :	EMPTY	EMPTY
459	328	2	-1	0	-1	if ( language ) { asn1 _ object _ free ( language ) ; language = null ; }	EMPTY	EMPTY
459	329	2	-1	0	-1	if ( pathlen ) { asn1 _ integer _ free ( pathlen ) ; pathlen = null ; }	EMPTY	EMPTY
459	330	2	-1	0	-1	if ( policy ) { asn1 _ octet _ string _ free ( policy ) ; policy = null ; }	EMPTY	EMPTY
459	331	2	-1	0	-1	if ( pci ) { proxy _ cert _ info _ extension _ free ( pci ) ; pci = null ; }	EMPTY	EMPTY
459	332	2	-1	0	-1	end :	EMPTY	EMPTY
459	333	2	-1	0	-1	sk _ conf _ value _ pop _ free ( vals  x509v3 _ conf _ free ) ;	EMPTY	EMPTY
459	334	2	-1	0	-1	return pci	EMPTY	EMPTY
459	335	3	-1	0	-1	}	EMPTY	EMPTY
460	75	1	0	0	-1	static int sxnet _ i2r ( x509v3 _ ext _ method * method  sxnet * sx  bio * out  int indent ) ;	method out indent	EMPTY
460	76	2	-1	0	-1	# ifdef sxnet _ test	EMPTY	EMPTY
460	77	2	-1	0	-1	static sxnet * sxnet _ v2i ( x509v3 _ ext _ method * method  x509v3 _ ctx * ctx	method ctx	EMPTY
460	78	2	-1	0	-1	stack _ of ( conf _ value ) * nval ) ;	EMPTY	EMPTY
460	79	2	-1	0	-1	# endif	EMPTY	EMPTY
460	80	2	-1	0	-1	const x509v3 _ ext _ method v3 _ sxnet = {	EMPTY	EMPTY
460	81	2	-1	0	-1	nid _ sxnet  x509v3 _ ext _ multiline  asn1 _ item _ ref ( sxnet )	EMPTY	EMPTY
460	82	2	-1	0	-1	numconst  numconst  numconst  numconst	EMPTY	EMPTY
460	83	2	-1	0	-1	numconst  numconst	EMPTY	EMPTY
460	84	2	-1	0	-1	numconst  #	EMPTY	EMPTY
460	85	2	-1	0	-1	# ifdef sxnet _ test	EMPTY	EMPTY
460	86	2	-1	0	-1	( x509v3 _ ext _ v2i ) sxnet _ v2i	EMPTY	EMPTY
460	87	2	-1	0	-1	# else	EMPTY	EMPTY
460	88	2	-1	0	-1	numconst	EMPTY	EMPTY
460	89	2	-1	0	-1	# endif	EMPTY	EMPTY
460	90	2	-1	0	-1	( x509v3 _ ext _ i2r ) sxnet _ i2r	EMPTY	EMPTY
460	91	2	-1	0	-1	numconst	EMPTY	EMPTY
460	92	2	-1	0	-1	null	EMPTY	EMPTY
460	93	3	-1	0	-1	} ;	EMPTY	EMPTY
460	95	1	0	0	-1	asn1 _ sequence ( sxnetid ) = {	EMPTY	EMPTY
460	96	2	-1	0	-1	asn1 _ simple ( sxnetid  zone  asn1 _ integer )	EMPTY	EMPTY
460	97	2	-1	0	-1	asn1 _ simple ( sxnetid  user  asn1 _ octet _ string )	EMPTY	EMPTY
460	98	3	-1	0	-1	} asn1 _ sequence _ end ( sxnetid )	EMPTY	EMPTY
460	100	1	0	0	-1	implement _ asn1 _ functions ( sxnetid )	EMPTY	EMPTY
460	102	1	0	0	-1	asn1 _ sequence ( sxnet ) = {	EMPTY	EMPTY
460	103	2	-1	0	-1	asn1 _ simple ( sxnet  version  asn1 _ integer )	version	EMPTY
460	104	2	-1	0	-1	asn1 _ sequence _ of ( sxnet  ids  sxnetid )	EMPTY	EMPTY
460	105	3	-1	0	-1	} asn1 _ sequence _ end ( sxnet )	EMPTY	EMPTY
460	107	1	0	0	-1	implement _ asn1 _ functions ( sxnet )	EMPTY	EMPTY
460	109	1	0	0	-1	static int sxnet _ i2r ( x509v3 _ ext _ method * method  sxnet * sx  bio * out	method out	EMPTY
460	110	2	-1	0	-1	int indent )	indent	EMPTY
460	111	2	-1	0	-1	{	EMPTY	EMPTY
460	112	2	-1	0	-1	long v ;	EMPTY	EMPTY
460	113	2	-1	0	-1	char * tmp ;	EMPTY	EMPTY
460	114	2	-1	0	-1	sxnetid * id ;	id	EMPTY
460	115	2	-1	0	-1	size _ t i ;	i	EMPTY
460	116	2	-1	0	-1	v = asn1 _ integer _ get ( sx -> version )	version	EMPTY
460	117	2	-1	0	-1	bio _ printf ( out ,  " %*sversion: %ld (0x%lx) "  , indent ,  "  "  , v + 1 , v )	out indent	EMPTY
460	118	2	-1	0	-1	for ( i = 0 ; i < sk _ sxnetid _ num ( sx -> ids ) ; i ++ ) {	i i i	EMPTY
460	119	2	-1	0	-1	id = sk _ sxnetid _ value ( sx -> ids , i ) ;	id i	EMPTY
460	120	2	-1	0	-1	tmp = i2s _ asn1 _ integer ( null , id -> zone ) ;	id	EMPTY
460	121	2	-1	0	-1	bio _ printf ( out ,  " \n%*szone: %s, user:  "  , indent ,  "  "  , tmp ) ;	out indent	EMPTY
460	122	2	-1	0	-1	openssl _ free ( tmp ) ;	EMPTY	EMPTY
460	123	2	-1	0	-1	m _ asn1 _ octet _ string _ print ( out , id -> user ) ;	out id	EMPTY
460	124	2	-1	0	-1	}	EMPTY	EMPTY
460	125	2	-1	0	-1	return 1	EMPTY	EMPTY
460	126	3	-1	0	-1	}	EMPTY	EMPTY
460	128	1	0	0	-1	# ifdef sxnet _ test	EMPTY	EMPTY
460	136	1	1	1	-1	static sxnet * sxnet _ v2i ( x509v3 _ ext _ method * method  x509v3 _ ctx * ctx	method ctx	EMPTY
460	137	2	-1	0	-1	stack _ of ( conf _ value ) * nval )	EMPTY	EMPTY
460	138	2	-1	0	-1	{	EMPTY	EMPTY
460	139	2	-1	0	-1	conf _ value * cnf ;	EMPTY	EMPTY
460	140	2	-1	0	-1	sxnet * sx = null ;	EMPTY	EMPTY
460	141	2	-1	0	-1	size _ t i ;	i	EMPTY
460	142	2	-1	0	-1	for ( i = 0 ; i < sk _ conf _ value _ num ( nval ) ; i ++ ) {	i i i	EMPTY
460	143	2	-1	0	-1	cnf = sk _ conf _ value _ value ( nval , i ) ;	i	EMPTY
460	144	2	-1	0	-1	if ( ! sxnet _ add _ id _ asc ( & sx , cnf -> name , cnf -> value , - 1 ) )	name value	EMPTY
460	145	2	-1	0	-1	return null ;	EMPTY	EMPTY
460	146	2	-1	0	-1	}	EMPTY	EMPTY
460	147	2	-1	0	-1	return sx	EMPTY	EMPTY
460	148	2	-1	0	-1	}	EMPTY	EMPTY
460	149	2	-1	0	-1	#	EMPTY	EMPTY
460	150	2	-1	0	-1	#	EMPTY	EMPTY
460	151	3	-1	0	-1	# endif	EMPTY	EMPTY
460	157	1	1	1	-1	int sxnet _ add _ id _ asc ( sxnet * * psx  char * zone  char * user	EMPTY	EMPTY
460	158	2	-1	0	-1	int userlen )	EMPTY	EMPTY
460	159	2	-1	0	-1	{	EMPTY	EMPTY
460	160	2	-1	0	-1	asn1 _ integer * izone = null ;	EMPTY	EMPTY
460	161	2	-1	0	-1	if ( ! ( izone = s2i _ asn1 _ integer ( null , zone ) ) ) {	EMPTY	EMPTY
460	162	2	-1	0	-1	openssl _ put _ error ( x509v3 , x509v3 _ r _ error _ converting _ zone ) ;	EMPTY	EMPTY
460	163	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
460	164	2	-1	0	-1	}	EMPTY	EMPTY
460	165	2	-1	0	-1	return sxnet _ add _ id _ integer ( psx , izone , user , userlen )	EMPTY	EMPTY
460	166	3	-1	0	-1	}	EMPTY	EMPTY
460	170	1	1	1	-1	int sxnet _ add _ id _ ulong ( sxnet * * psx  unsigned long lzone  char * user	EMPTY	EMPTY
460	171	2	-1	0	-1	int userlen )	EMPTY	EMPTY
460	172	2	-1	0	-1	{	EMPTY	EMPTY
460	173	2	-1	0	-1	asn1 _ integer * izone = null ;	EMPTY	EMPTY
460	174	2	-1	0	-1	if ( ! ( izone = m _ asn1 _ integer _ new ( ) ) || ! asn1 _ integer _ set ( izone , lzone ) ) {	EMPTY	EMPTY
460	175	2	-1	0	-1	openssl _ put _ error ( x509v3 , err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
460	176	2	-1	0	-1	m _ asn1 _ integer _ free ( izone ) ;	EMPTY	EMPTY
460	177	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
460	178	2	-1	0	-1	}	EMPTY	EMPTY
460	179	2	-1	0	-1	return sxnet _ add _ id _ integer ( psx , izone , user , userlen )	EMPTY	EMPTY
460	180	2	-1	0	-1	}	EMPTY	EMPTY
460	181	3	-1	0	-1	}	EMPTY	EMPTY
460	188	1	1	1	-1	int sxnet _ add _ id _ integer ( sxnet * * psx  asn1 _ integer * zone  char * user	EMPTY	EMPTY
460	189	2	-1	0	-1	int userlen )	EMPTY	EMPTY
460	190	2	-1	0	-1	{	EMPTY	EMPTY
460	191	2	-1	0	-1	sxnet * sx = null ;	EMPTY	EMPTY
460	192	2	-1	0	-1	sxnetid * id = null ;	id	EMPTY
460	193	2	-1	0	-1	if ( ! psx || ! zone || ! user ) {	EMPTY	EMPTY
460	194	2	-1	0	-1	openssl _ put _ error ( x509v3 , x509v3 _ r _ invalid _ null _ argument ) ;	EMPTY	EMPTY
460	195	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
460	196	2	-1	0	-1	}	EMPTY	EMPTY
460	197	2	-1	0	-1	if ( userlen == - 1 ) userlen = strlen ( user )	EMPTY	EMPTY
460	198	2	-1	0	-1	if ( userlen > 64 ) {	EMPTY	EMPTY
460	199	2	-1	0	-1	openssl _ put _ error ( x509v3 , x509v3 _ r _ user _ too _ long ) ;	EMPTY	EMPTY
460	200	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
460	201	2	-1	0	-1	}	EMPTY	EMPTY
460	202	2	-1	0	-1	if ( ! * psx ) {	EMPTY	EMPTY
460	203	2	-1	0	-1	if ( ! ( sx = sxnet _ new ( ) ) ) goto err ;	EMPTY	EMPTY
460	204	2	-1	0	-1	if ( ! asn1 _ integer _ set ( sx -> version , 0 ) ) goto err ;	version	EMPTY
460	205	2	-1	0	-1	* psx = sx ;	EMPTY	EMPTY
460	206	2	-1	0	-1	} else sx = * psx	EMPTY	EMPTY
460	207	2	-1	0	-1	if ( sxnet _ get _ id _ integer ( sx , zone ) ) {	EMPTY	EMPTY
460	208	2	-1	0	-1	openssl _ put _ error ( x509v3 , x509v3 _ r _ duplicate _ zone _ id ) ;	EMPTY	EMPTY
460	209	2	-1	0	-1	return 0 ;	EMPTY	EMPTY
460	210	3	-1	0	-1	}	EMPTY	EMPTY
460	212	1	0	0	0	if ( ! ( id = sxnetid _ new ( ) ) ) goto err	id	EMPTY
460	213	2	-1	0	-1	if ( userlen == - 1 ) userlen = strlen ( user )	EMPTY	EMPTY
460	214	2	-1	0	-1	if	EMPTY	EMPTY
460	215	2	-1	0	-1	if ( ! m _ asn1 _ octet _ string _ set ( id -> user , user , userlen ) ) goto err	id	EMPTY
460	216	2	-1	0	-1	if ( ! sk _ sxnetid _ push ( sx -> ids , id ) ) goto err	id	EMPTY
460	217	2	-1	0	-1	id -> zone = zone	id	EMPTY
460	218	2	-1	0	-1	return 1	EMPTY	EMPTY
460	219	2	-1	0	-1	err	EMPTY	EMPTY
460	220	2	-1	0	-1	err :	EMPTY	EMPTY
460	221	2	-1	0	-1	openssl _ put _ error ( x509v3  err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
460	222	2	-1	0	-1	sxnetid _ free ( id )	id	EMPTY
460	223	3	-1	0	-1	sxnet _ free ( sx )	EMPTY	EMPTY
460	225	1	0	0	0	return 0	EMPTY	EMPTY
460	226	3	-1	0	-1	}	EMPTY	EMPTY
460	228	1	0	0	-1	asn1 _ octet _ string * sxnet _ get _ id _ asc ( sxnet * sx  char * zone )	EMPTY	EMPTY
460	229	2	-1	0	-1	{	EMPTY	EMPTY
460	230	2	-1	0	-1	asn1 _ integer * izone = null ;	EMPTY	EMPTY
460	231	2	-1	0	-1	asn1 _ octet _ string * oct ;	EMPTY	EMPTY
460	232	2	-1	0	-1	if ( ! ( izone = s2i _ asn1 _ integer ( null , zone ) ) ) {	EMPTY	EMPTY
460	233	2	-1	0	-1	openssl _ put _ error ( x509v3 , x509v3 _ r _ error _ converting _ zone ) ;	EMPTY	EMPTY
460	234	2	-1	0	-1	return null ;	EMPTY	EMPTY
460	235	2	-1	0	-1	}	EMPTY	EMPTY
460	236	2	-1	0	-1	oct = sxnet _ get _ id _ integer ( sx , izone )	EMPTY	EMPTY
460	237	2	-1	0	-1	m _ asn1 _ integer _ free ( izone ) ;	EMPTY	EMPTY
460	238	2	-1	0	-1	return oct	EMPTY	EMPTY
460	239	3	-1	0	-1	}	EMPTY	EMPTY
460	241	1	0	0	-1	asn1 _ octet _ string * sxnet _ get _ id _ ulong ( sxnet * sx  unsigned long lzone )	EMPTY	EMPTY
460	242	2	-1	0	-1	{	EMPTY	EMPTY
460	243	2	-1	0	-1	asn1 _ integer * izone = null ;	EMPTY	EMPTY
460	244	2	-1	0	-1	asn1 _ octet _ string * oct ;	EMPTY	EMPTY
460	245	2	-1	0	-1	if ( ! ( izone = m _ asn1 _ integer _ new ( ) ) || ! asn1 _ integer _ set ( izone , lzone ) ) {	EMPTY	EMPTY
460	246	2	-1	0	-1	openssl _ put _ error ( x509v3 , err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
460	247	2	-1	0	-1	m _ asn1 _ integer _ free ( izone ) ;	EMPTY	EMPTY
460	248	2	-1	0	-1	return null ;	EMPTY	EMPTY
460	249	2	-1	0	-1	}	EMPTY	EMPTY
460	250	2	-1	0	-1	oct = sxnet _ get _ id _ integer ( sx , izone )	EMPTY	EMPTY
460	251	2	-1	0	-1	m _ asn1 _ integer _ free ( izone ) ;	EMPTY	EMPTY
460	252	2	-1	0	-1	return oct	EMPTY	EMPTY
460	253	3	-1	0	-1	}	EMPTY	EMPTY
460	255	1	0	0	-1	asn1 _ octet _ string * sxnet _ get _ id _ integer ( sxnet * sx  asn1 _ integer * zone )	EMPTY	EMPTY
460	256	2	-1	0	-1	{	EMPTY	EMPTY
460	257	2	-1	0	-1	sxnetid * id ;	id	EMPTY
460	258	2	-1	0	-1	size _ t i ;	i	EMPTY
460	259	2	-1	0	-1	for ( i = 0 ; i < sk _ sxnetid _ num ( sx -> ids ) ; i ++ ) {	i i i	EMPTY
460	260	2	-1	0	-1	id = sk _ sxnetid _ value ( sx -> ids , i ) ;	id i	EMPTY
460	261	2	-1	0	-1	if ( ! m _ asn1 _ integer _ cmp ( id -> zone , zone ) ) return id -> user ;	id id	EMPTY
460	262	2	-1	0	-1	}	EMPTY	EMPTY
460	263	2	-1	0	-1	return null ;	EMPTY	EMPTY
460	264	3	-1	0	-1	}	EMPTY	EMPTY
460	266	1	0	0	-1	implement _ asn1 _ set _ of ( sxnetid )	EMPTY	EMPTY
465	69	1	0	0	-1	static stack _ of ( conf _ value ) * i2v _ authority _ keyid ( x509v3 _ ext _ method * method	method	EMPTY
465	70	2	-1	0	-1	authority _ keyid * akeyid  stack _ of ( conf _ value ) * extlist )	EMPTY	EMPTY
465	71	2	-1	0	-1	static authority _ keyid * v2i _ authority _ keyid ( x509v3 _ ext _ method * method	method	EMPTY
465	72	3	-1	0	-1	x509v3 _ ctx * ctx  stack _ of ( conf _ value ) * values ) ;	ctx	EMPTY
465	74	1	0	0	-1	const x509v3 _ ext _ method v3 _ akey _ id =	EMPTY	EMPTY
465	75	2	-1	0	-1	{	EMPTY	EMPTY
465	76	2	-1	0	-1	nid _ authority _ key _ identifier	EMPTY	EMPTY
465	77	2	-1	0	-1	x509v3 _ ext _ multiline  asn1 _ item _ ref ( authority _ keyid )	EMPTY	EMPTY
465	78	2	-1	0	-1	numconst  numconst  numconst  numconst	EMPTY	EMPTY
465	79	2	-1	0	-1	numconst  numconst	EMPTY	EMPTY
465	80	2	-1	0	-1	( x509v3 _ ext _ i2v ) i2v _ authority _ keyid	EMPTY	EMPTY
465	81	2	-1	0	-1	( x509v3 _ ext _ v2i ) v2i _ authority _ keyid	EMPTY	EMPTY
465	82	2	-1	0	-1	numconst  numconst	EMPTY	EMPTY
465	83	2	-1	0	-1	null	EMPTY	EMPTY
465	84	3	-1	0	-1	} ;	EMPTY	EMPTY
465	86	1	0	0	-1	static stack _ of ( conf _ value ) * i2v _ authority _ keyid ( x509v3 _ ext _ method * method	method	EMPTY
465	87	2	-1	0	-1	authority _ keyid * akeyid  stack _ of ( conf _ value ) * extlist )	EMPTY	EMPTY
465	88	2	-1	0	-1	{	EMPTY	EMPTY
465	89	2	-1	0	-1	char * tmp ;	EMPTY	EMPTY
465	90	2	-1	0	-1	if ( akeyid -> keyid ) {	keyid	EMPTY
465	91	2	-1	0	-1	tmp = hex _ to _ string ( akeyid -> keyid -> data , akeyid -> keyid -> length ) ;	keyid data keyid length	EMPTY
465	92	2	-1	0	-1	x509v3 _ add _ value (  " keyid "  , tmp , & extlist ) ;	EMPTY	EMPTY
465	93	2	-1	0	-1	openssl _ free ( tmp ) ;	EMPTY	EMPTY
465	94	2	-1	0	-1	}	EMPTY	EMPTY
465	95	2	-1	0	-1	if ( akeyid -> issuer )	issuer	EMPTY
465	96	2	-1	0	-1	extlist = i2v _ general _ names ( null , akeyid -> issuer , extlist )	issuer	EMPTY
465	97	2	-1	0	-1	if ( akeyid -> serial ) {	EMPTY	EMPTY
465	98	2	-1	0	-1	tmp = hex _ to _ string ( akeyid -> serial -> data ,	data	EMPTY
465	99	2	-1	0	-1	akeyid -> serial -> length ) ;	length	EMPTY
465	100	2	-1	0	-1	x509v3 _ add _ value (  " serial "  , tmp , & extlist ) ;	EMPTY	EMPTY
465	101	2	-1	0	-1	openssl _ free ( tmp ) ;	EMPTY	EMPTY
465	102	2	-1	0	-1	}	EMPTY	EMPTY
465	103	2	-1	0	-1	return extlist	EMPTY	EMPTY
465	104	3	-1	0	-1	}	EMPTY	EMPTY
465	114	1	1	1	-1	static authority _ keyid * v2i _ authority _ keyid ( x509v3 _ ext _ method * method	method	EMPTY
465	115	2	-1	0	-1	x509v3 _ ctx * ctx  stack _ of ( conf _ value ) * values )	ctx	EMPTY
465	116	2	-1	0	-1	{	EMPTY	EMPTY
465	117	2	-1	0	-1	char keyid = 0 , issuer = 0 ;	keyid issuer	EMPTY
465	118	2	-1	0	-1	size _ t i ;	i	EMPTY
465	119	2	-1	0	-1	int j ;	EMPTY	EMPTY
465	120	2	-1	0	-1	conf _ value * cnf ;	EMPTY	EMPTY
465	121	2	-1	0	-1	asn1 _ octet _ string * ikeyid = null ;	EMPTY	EMPTY
465	122	2	-1	0	-1	x509 _ name * isname = null ;	EMPTY	EMPTY
465	123	2	-1	0	-1	general _ names * gens = null ;	EMPTY	EMPTY
465	124	2	-1	0	-1	general _ name * gen = null ;	EMPTY	EMPTY
465	125	2	-1	0	-1	asn1 _ integer * serial = null ;	EMPTY	EMPTY
465	126	2	-1	0	-1	x509 _ extension * ext ;	EMPTY	EMPTY
465	127	2	-1	0	-1	x509 * cert ;	cert	EMPTY
465	128	3	-1	0	-1	authority _ keyid * akeyid ;	EMPTY	EMPTY
465	130	1	0	0	0	for ( i = 0 ; i < sk _ conf _ value _ num ( values ) ; i ++ )	i i i	EMPTY
465	131	2	-1	0	-1	{	EMPTY	EMPTY
465	132	2	-1	0	-1	cnf = sk _ conf _ value _ value ( values , i ) ;	i	EMPTY
465	133	2	-1	0	-1	if ( ! strcmp ( cnf -> name ,  " keyid "  ) )	name	EMPTY
465	134	2	-1	0	-1	{	EMPTY	EMPTY
465	135	2	-1	0	-1	keyid = 1 ;	keyid	EMPTY
465	136	2	-1	0	-1	if ( cnf -> value && ! strcmp ( cnf -> value ,  " always "  ) )	value value	EMPTY
465	137	2	-1	0	-1	keyid = 2 ;	keyid	EMPTY
465	138	2	-1	0	-1	}	EMPTY	EMPTY
465	139	2	-1	0	-1	else if ( ! strcmp ( cnf -> name ,  " issuer "  ) )	name	EMPTY
465	140	2	-1	0	-1	{	EMPTY	EMPTY
465	141	2	-1	0	-1	issuer = 1 ;	issuer	EMPTY
465	142	2	-1	0	-1	if ( cnf -> value && ! strcmp ( cnf -> value ,  " always "  ) )	value value	EMPTY
465	143	2	-1	0	-1	issuer = 2 ;	issuer	EMPTY
465	144	2	-1	0	-1	}	EMPTY	EMPTY
465	145	2	-1	0	-1	else	EMPTY	EMPTY
465	146	2	-1	0	-1	{	EMPTY	EMPTY
465	147	2	-1	0	-1	openssl _ put _ error ( x509v3 , x509v3 _ r _ unknown _ option ) ;	EMPTY	EMPTY
465	148	2	-1	0	-1	err _ add _ error _ data ( 2 ,  " name= "  , cnf -> name ) ;	err _ add _ error _ data name	EMPTY
465	149	2	-1	0	-1	return null ;	EMPTY	EMPTY
465	150	2	-1	0	-1	}	EMPTY	EMPTY
465	151	3	-1	0	-1	}	EMPTY	EMPTY
465	153	1	0	0	0	if ( ! ctx || ! ctx -> issuer _ cert )	ctx ctx	EMPTY
465	154	2	-1	0	-1	{	EMPTY	EMPTY
465	155	2	-1	0	-1	if ( ctx && ( ctx -> flags == ctx _ test ) )	ctx ctx flags	EMPTY
465	156	2	-1	0	-1	return authority _ keyid _ new ( ) ;	EMPTY	EMPTY
465	157	2	-1	0	-1	openssl _ put _ error ( x509v3 , x509v3 _ r _ no _ issuer _ certificate ) ;	EMPTY	EMPTY
465	158	2	-1	0	-1	return null ;	EMPTY	EMPTY
465	159	3	-1	0	-1	}	EMPTY	EMPTY
465	161	1	0	0	-1	cert = ctx -> issuer _ cert	cert ctx	EMPTY
465	163	1	0	0	0	if ( keyid )	keyid	EMPTY
465	164	2	-1	0	-1	{	EMPTY	EMPTY
465	165	2	-1	0	-1	j = x509 _ get _ ext _ by _ nid ( cert , nid _ subject _ key _ identifier , - 1 ) ;	cert	EMPTY
465	166	2	-1	0	-1	if ( ( j >= 0 ) && ( ext = x509 _ get _ ext ( cert , j ) ) )	cert	EMPTY
465	167	2	-1	0	-1	ikeyid = x509v3 _ ext _ d2i ( ext ) ;	EMPTY	EMPTY
465	168	2	-1	0	-1	if ( keyid == 2 && ! ikeyid )	keyid	EMPTY
465	169	2	-1	0	-1	{	EMPTY	EMPTY
465	170	2	-1	0	-1	openssl _ put _ error ( x509v3 , x509v3 _ r _ unable _ to _ get _ issuer _ keyid ) ;	EMPTY	EMPTY
465	171	2	-1	0	-1	return null ;	EMPTY	EMPTY
465	172	2	-1	0	-1	}	EMPTY	EMPTY
465	173	3	-1	0	-1	}	EMPTY	EMPTY
465	175	1	0	0	0	if ( ( issuer && ! ikeyid ) || ( issuer == 2 ) )	issuer issuer	EMPTY
465	176	2	-1	0	-1	{	EMPTY	EMPTY
465	177	2	-1	0	-1	isname = x509 _ name _ dup ( x509 _ get _ issuer _ name ( cert ) ) ;	cert	EMPTY
465	178	2	-1	0	-1	serial = m _ asn1 _ integer _ dup ( x509 _ get _ serialnumber ( cert ) ) ;	cert	EMPTY
465	179	2	-1	0	-1	if ( ! isname || ! serial )	EMPTY	EMPTY
465	180	2	-1	0	-1	{	EMPTY	EMPTY
465	181	2	-1	0	-1	openssl _ put _ error ( x509v3 , x509v3 _ r _ unable _ to _ get _ issuer _ details ) ;	EMPTY	EMPTY
465	182	2	-1	0	-1	goto err ;	EMPTY	EMPTY
465	183	2	-1	0	-1	}	EMPTY	EMPTY
465	184	3	-1	0	-1	}	EMPTY	EMPTY
465	186	1	0	0	0	if ( ! ( akeyid = authority _ keyid _ new ( ) ) ) goto err	EMPTY	EMPTY
465	188	1	0	0	0	if ( isname )	EMPTY	EMPTY
465	189	2	-1	0	-1	{	EMPTY	EMPTY
465	190	2	-1	0	-1	if ( ! ( gens = sk _ general _ name _ new _ null ( ) )	EMPTY	EMPTY
465	191	2	-1	0	-1	|| ! ( gen = general _ name _ new ( ) )	EMPTY	EMPTY
465	192	2	-1	0	-1	|| ! sk _ general _ name _ push ( gens , gen ) )	EMPTY	EMPTY
465	193	2	-1	0	-1	{	EMPTY	EMPTY
465	194	2	-1	0	-1	openssl _ put _ error ( x509v3 , err _ r _ malloc _ failure ) ;	EMPTY	EMPTY
465	195	2	-1	0	-1	goto err ;	EMPTY	EMPTY
465	196	2	-1	0	-1	}	EMPTY	EMPTY
465	197	2	-1	0	-1	gen -> type = gen _ dirname ;	type	EMPTY
465	198	2	-1	0	-1	gen -> d . dirn = isname ;	dirn	EMPTY
465	199	3	-1	0	-1	}	EMPTY	EMPTY
465	201	1	0	0	-1	akeyid -> issuer = gens	issuer	EMPTY
465	202	2	-1	0	-1	akeyid -> serial = serial	EMPTY	EMPTY
465	203	3	-1	0	-1	akeyid -> keyid = ikeyid	keyid	EMPTY
465	205	1	0	0	0	return akeyid	EMPTY	EMPTY
465	207	1	0	0	-1	err :	EMPTY	EMPTY
465	208	2	-1	0	-1	x509 _ name _ free ( isname )	EMPTY	EMPTY
465	209	2	-1	0	-1	m _ asn1 _ integer _ free ( serial ) ;	EMPTY	EMPTY
465	210	2	-1	0	-1	m _ asn1 _ octet _ string _ free ( ikeyid ) ;	EMPTY	EMPTY
465	211	2	-1	0	-1	return null ;	EMPTY	EMPTY
465	212	3	-1	0	-1	}	EMPTY	EMPTY
506	92	1	0	0	-1	word32 ideint _ weave _ pic ( icv _ pic _ t * ps _ src _ top	ideint _ weave _ pic icv _ pic _ t ps _ src _ top	EMPTY
506	93	2	-1	0	-1	icv _ pic _ t * ps _ src _ bot	icv _ pic _ t	EMPTY
506	94	2	-1	0	-1	icv _ pic _ t * ps _ dst _ frm	icv _ pic _ t	EMPTY
506	95	2	-1	0	-1	word32 start _ row	EMPTY	EMPTY
506	96	2	-1	0	-1	word32 num _ rows )	EMPTY	EMPTY
506	97	2	-1	0	-1	{	EMPTY	EMPTY
506	98	2	-1	0	-1	uword8 * pu1 _ src , * pu1 _ dst ;	uword8 pu1 _ src	EMPTY
506	99	2	-1	0	-1	word32 i , j , num _ comp ;	EMPTY	EMPTY
506	100	2	-1	0	-1	icv _ pic _ t * ps _ src _ fld ;	icv _ pic _ t	EMPTY
506	101	2	-1	0	-1	word32 fld ;	EMPTY	EMPTY
506	102	3	-1	0	-1	icv _ pic _ t * ps _ src _ flds [ 2 ] ;	icv _ pic _ t	EMPTY
506	104	1	0	0	-1	num _ comp = 3	EMPTY	EMPTY
506	105	2	-1	0	-1	ps _ src _ flds [ 0 ] = ps _ src _ top	ps _ src _ top	EMPTY
506	106	3	-1	0	-1	ps _ src _ flds [ 1 ] = ps _ src _ bot	EMPTY	EMPTY
506	108	1	0	0	0	for ( fld = numconst ; fld < numconst ; fld ++ )	EMPTY	EMPTY
506	109	2	-1	0	-1	{	EMPTY	EMPTY
506	110	2	-1	0	-1	ps _ src _ fld = ps _ src _ flds [ fld ]	EMPTY	EMPTY
506	111	2	-1	0	-1	for ( i = numconst ; i < num _ comp ; i ++ )	EMPTY	EMPTY
506	112	2	-1	0	-1	{	EMPTY	EMPTY
506	113	2	-1	0	-1	word32 src _ strd ;	EMPTY	EMPTY
506	114	2	-1	0	-1	word32 dst _ strd ;	EMPTY	EMPTY
506	115	2	-1	0	-1	word32 comp _ row _ start , comp _ row _ end ;	EMPTY	EMPTY
506	116	2	-1	0	-1	comp _ row _ start = start _ row	EMPTY	EMPTY
506	117	2	-1	0	-1	comp _ row _ end = comp _ row _ start + num _ rows	EMPTY	EMPTY
506	118	2	-1	0	-1	if ( i )	EMPTY	EMPTY
506	119	2	-1	0	-1	{	EMPTY	EMPTY
506	120	2	-1	0	-1	comp _ row _ start >>= 1 ;	EMPTY	EMPTY
506	121	2	-1	0	-1	comp _ row _ end >>= 1 ;	EMPTY	EMPTY
506	122	3	-1	0	-1	}	EMPTY	EMPTY
506	124	1	0	0	-1	comp _ row _ end = min ( comp _ row _ end  ps _ dst _ frm -> ai4 _ ht [ i ] ) ;	ai4 _ ht	EMPTY
506	126	1	0	0	-1	pu1 _ src = ps _ src _ fld -> apu1 _ buf [ i ]	pu1 _ src apu1 _ buf	EMPTY
506	127	3	-1	0	-1	pu1 _ dst = ps _ dst _ frm -> apu1 _ buf [ i ]	apu1 _ buf	EMPTY
506	129	1	0	0	-1	src _ strd = ps _ src _ fld -> ai4 _ strd [ i ]	ai4 _ strd	EMPTY
506	130	3	-1	0	-1	dst _ strd = ps _ dst _ frm -> ai4 _ strd [ i ]	ai4 _ strd	EMPTY
506	133	1	1	1	-1	pu1 _ dst += fld * dst _ strd	EMPTY	EMPTY
506	136	1	1	1	1	if ( ( pu1 _ src != pu1 _ dst ) || ( ( 2 * dst _ strd ) != src _ strd ) )	pu1 _ src	EMPTY
506	137	2	-1	0	-1	{	EMPTY	EMPTY
506	138	2	-1	0	-1	pu1 _ dst += ps _ dst _ frm -> ai4 _ strd [ i ] * comp _ row _ start ;	ai4 _ strd	EMPTY
506	139	3	-1	0	-1	pu1 _ src += ps _ src _ fld -> ai4 _ strd [ i ] * comp _ row _ start / 2 ;	pu1 _ src ai4 _ strd	EMPTY
506	141	1	0	0	0	for ( j = comp _ row _ start ; j < comp _ row _ end ; j += 2 )	EMPTY	EMPTY
506	142	2	-1	0	-1	{	EMPTY	EMPTY
506	143	2	-1	0	-1	memcpy ( pu1 _ dst , pu1 _ src , ps _ dst _ frm -> ai4 _ wd [ i ] ) ;	pu1 _ src ai4 _ wd	memcpy
506	144	2	-1	0	-1	pu1 _ dst += ps _ dst _ frm -> ai4 _ strd [ i ] * 2 ;	ai4 _ strd	EMPTY
506	145	2	-1	0	-1	pu1 _ src += ps _ src _ fld -> ai4 _ strd [ i ] ;	pu1 _ src ai4 _ strd	EMPTY
506	146	2	-1	0	-1	}	EMPTY	EMPTY
506	147	2	-1	0	-1	}	EMPTY	EMPTY
506	148	2	-1	0	-1	}	EMPTY	EMPTY
506	149	2	-1	0	-1	}	EMPTY	EMPTY
506	150	2	-1	0	-1	return numconst ;	EMPTY	EMPTY
506	151	3	-1	0	-1	}	EMPTY	EMPTY
506	185	1	0	0	-1	word32 ideint _ weave _ blk ( uword8 * pu1 _ top	ideint _ weave _ blk uword8 pu1 _ top	EMPTY
506	186	2	-1	0	-1	uword8 * pu1 _ bot	uword8	EMPTY
506	187	2	-1	0	-1	uword8 * pu1 _ dst	uword8	EMPTY
506	188	2	-1	0	-1	word32 dst _ strd	EMPTY	EMPTY
506	189	2	-1	0	-1	word32 src _ strd	EMPTY	EMPTY
506	190	2	-1	0	-1	word32 wd	EMPTY	EMPTY
506	191	2	-1	0	-1	word32 ht )	EMPTY	EMPTY
506	192	2	-1	0	-1	{	EMPTY	EMPTY
506	193	3	-1	0	-1	word32 j ;	EMPTY	EMPTY
506	195	1	0	0	0	for ( j = 0 ; j < ht ; j += 2 )	EMPTY	EMPTY
506	196	2	-1	0	-1	{	EMPTY	EMPTY
506	197	2	-1	0	-1	memcpy ( pu1 _ dst , pu1 _ top , wd ) ;	pu1 _ top	memcpy
506	198	2	-1	0	-1	pu1 _ dst += dst _ strd ;	EMPTY	EMPTY
506	199	3	-1	0	-1	pu1 _ top += src _ strd ;	pu1 _ top	EMPTY
506	201	1	0	0	0	memcpy ( pu1 _ dst , pu1 _ bot , wd ) ;	EMPTY	memcpy
506	202	2	-1	0	-1	pu1 _ dst += dst _ strd ;	EMPTY	EMPTY
506	203	2	-1	0	-1	pu1 _ bot += src _ strd ;	EMPTY	EMPTY
506	204	2	-1	0	-1	}	EMPTY	EMPTY
506	205	2	-1	0	-1	return 0	EMPTY	EMPTY
506	206	3	-1	0	-1	}	EMPTY	EMPTY
506	248	1	0	0	-1	void ideint _ pad _ blk ( uword8 * pu1 _ top	ideint _ pad _ blk uword8 pu1 _ top	EMPTY
506	249	2	-1	0	-1	uword8 * pu1 _ bot	uword8	EMPTY
506	250	2	-1	0	-1	uword8 * pu1 _ pad	uword8	EMPTY
506	251	2	-1	0	-1	word32 cur _ strd	EMPTY	EMPTY
506	252	2	-1	0	-1	word32 row	EMPTY	EMPTY
506	253	2	-1	0	-1	word32 col	EMPTY	EMPTY
506	254	2	-1	0	-1	word32 num _ blks _ y	EMPTY	EMPTY
506	255	2	-1	0	-1	word32 num _ blks _ x	EMPTY	EMPTY
506	256	2	-1	0	-1	word32 blk _ wd	EMPTY	EMPTY
506	257	2	-1	0	-1	word32 blk _ ht )	EMPTY	EMPTY
506	258	2	-1	0	-1	{	EMPTY	EMPTY
506	259	2	-1	0	-1	word32 i ;	EMPTY	EMPTY
506	260	2	-1	0	-1	word32 num _ cols , num _ rows ;	EMPTY	EMPTY
506	261	2	-1	0	-1	uword8 * pu1 _ dst ;	uword8	EMPTY
506	262	2	-1	0	-1	uword8 * pu1 _ src _ top ;	uword8	EMPTY
506	263	3	-1	0	-1	uword8 * pu1 _ src _ bot ;	uword8	EMPTY
506	265	1	0	0	-1	num _ rows = blk _ ht + 4	EMPTY	EMPTY
506	266	3	-1	0	-1	num _ cols = blk _ wd + 4	EMPTY	EMPTY
506	268	1	0	0	-1	pu1 _ src _ top = pu1 _ top - cur _ strd - 2	pu1 _ top	EMPTY
506	269	2	-1	0	-1	pu1 _ src _ bot = pu1 _ bot - cur _ strd - 2	EMPTY	EMPTY
506	270	3	-1	0	-1	pu1 _ dst = pu1 _ pad	EMPTY	EMPTY
506	272	1	0	0	0	if ( 0 == col )	EMPTY	EMPTY
506	273	2	-1	0	-1	{	EMPTY	EMPTY
506	274	2	-1	0	-1	num _ cols -= 2 ;	EMPTY	EMPTY
506	275	2	-1	0	-1	pu1 _ dst += 2 ;	EMPTY	EMPTY
506	276	2	-1	0	-1	pu1 _ src _ top += 2 ;	EMPTY	EMPTY
506	277	2	-1	0	-1	pu1 _ src _ bot += 2 ;	EMPTY	EMPTY
506	278	3	-1	0	-1	}	EMPTY	EMPTY
506	280	1	0	0	0	if ( 0 == row )	EMPTY	EMPTY
506	281	2	-1	0	-1	{	EMPTY	EMPTY
506	282	2	-1	0	-1	num _ rows -= 2 ;	EMPTY	EMPTY
506	283	2	-1	0	-1	pu1 _ dst += 2 * ( blk _ wd + 4 ) ;	EMPTY	EMPTY
506	284	2	-1	0	-1	pu1 _ src _ top += cur _ strd ;	EMPTY	EMPTY
506	285	2	-1	0	-1	pu1 _ src _ bot += cur _ strd ;	EMPTY	EMPTY
506	286	3	-1	0	-1	}	EMPTY	EMPTY
506	288	1	0	0	0	if ( ( num _ blks _ x - 1 ) == col )	EMPTY	EMPTY
506	289	3	-1	0	-1	num _ cols -= 2	EMPTY	EMPTY
506	291	1	0	0	0	if ( ( num _ blks _ y - 1 ) == row )	EMPTY	EMPTY
506	292	3	-1	0	-1	num _ rows -= 2	EMPTY	EMPTY
506	294	1	0	0	0	for ( i = 0 ; i < num _ rows ; i += 2 )	EMPTY	EMPTY
506	295	2	-1	0	-1	{	EMPTY	EMPTY
506	296	2	-1	0	-1	memcpy ( pu1 _ dst , pu1 _ src _ top , num _ cols ) ;	EMPTY	memcpy
506	297	3	-1	0	-1	pu1 _ dst += ( blk _ wd + 4 ) ;	EMPTY	EMPTY
506	299	1	0	0	0	memcpy ( pu1 _ dst , pu1 _ src _ bot , num _ cols ) ;	EMPTY	memcpy
506	300	3	-1	0	-1	pu1 _ dst += ( blk _ wd + 4 ) ;	EMPTY	EMPTY
506	302	1	0	0	-1	pu1 _ src _ top += cur _ strd ;	EMPTY	EMPTY
506	303	2	-1	0	-1	pu1 _ src _ bot += cur _ strd ;	EMPTY	EMPTY
506	304	3	-1	0	-1	}	EMPTY	EMPTY
506	308	1	1	1	1	if ( 0 == col )	EMPTY	EMPTY
506	309	2	-1	0	-1	{	EMPTY	EMPTY
506	310	2	-1	0	-1	for ( i = 0 ; i < ( blk _ ht + 4 ) ; i ++ )	EMPTY	EMPTY
506	311	2	-1	0	-1	{	EMPTY	EMPTY
506	312	2	-1	0	-1	word32 ofst = i * ( blk _ wd + 4 ) + 2 ;	EMPTY	EMPTY
506	313	2	-1	0	-1	pu1 _ pad [ ofst - 1 ] = pu1 _ pad [ ofst ] ;	EMPTY	EMPTY
506	314	2	-1	0	-1	pu1 _ pad [ ofst - 2 ] = pu1 _ pad [ ofst ] ;	EMPTY	EMPTY
506	315	2	-1	0	-1	}	EMPTY	EMPTY
506	316	3	-1	0	-1	}	EMPTY	EMPTY
506	319	1	1	1	1	if ( ( num _ blks _ x - numconst ) == col )	EMPTY	EMPTY
506	320	2	-1	0	-1	{	EMPTY	EMPTY
506	321	2	-1	0	-1	for ( i = numconst ; i < ( blk _ ht + numconst ) ; i ++ )	EMPTY	EMPTY
506	322	2	-1	0	-1	{	EMPTY	EMPTY
506	323	2	-1	0	-1	word32 ofst = i * ( blk _ wd + 4 ) + 2 + blk _ wd - 1 ;	EMPTY	EMPTY
506	324	2	-1	0	-1	word32 size = ( blk _ wd - blk _ wd ) + 2 ;	size	EMPTY
506	328	2	-1	1	-1	memset ( & pu1 _ pad [ ofst + 1 ] , pu1 _ pad [ ofst ] , size )	size	memset
506	329	2	-1	0	-1	}	EMPTY	EMPTY
506	330	3	-1	0	-1	}	EMPTY	EMPTY
506	333	1	1	1	1	if ( 0 == row )	EMPTY	EMPTY
506	334	2	-1	0	-1	{	EMPTY	EMPTY
506	335	2	-1	0	-1	word32 src _ ofst = 2 * ( blk _ wd + 4 ) ;	EMPTY	EMPTY
506	336	2	-1	0	-1	word32 dst _ ofst = 0 ;	EMPTY	EMPTY
506	337	2	-1	0	-1	memcpy ( pu1 _ pad + dst _ ofst , pu1 _ pad + src _ ofst , ( blk _ wd + 4 ) ) ;	EMPTY	memcpy
506	338	2	-1	0	-1	src _ ofst += ( blk _ wd + 4 ) ;	EMPTY	EMPTY
506	339	2	-1	0	-1	dst _ ofst += ( blk _ wd + 4 ) ;	EMPTY	EMPTY
506	340	2	-1	0	-1	memcpy ( pu1 _ pad + dst _ ofst , pu1 _ pad + src _ ofst , ( blk _ wd + 4 ) ) ;	EMPTY	memcpy
506	341	3	-1	0	-1	}	EMPTY	EMPTY
506	344	1	1	1	1	if ( ( num _ blks _ y - numconst ) == row )	EMPTY	EMPTY
506	345	2	-1	0	-1	{	EMPTY	EMPTY
506	346	2	-1	0	-1	word32 src _ ofst = ( 0 + blk _ ht ) * ( blk _ wd + 4 ) ;	EMPTY	EMPTY
506	347	2	-1	0	-1	word32 dst _ ofst = ( 1 + blk _ ht ) * ( blk _ wd + 4 ) ;	EMPTY	EMPTY
506	348	3	-1	0	-1	word32 size = ( blk _ ht - blk _ ht ) + 2 ;	size	EMPTY
506	353	1	1	1	1	for ( i = 0 ; i < size ; i ++ )	size	EMPTY
506	354	2	-1	0	-1	{	EMPTY	EMPTY
506	355	2	-1	0	-1	memcpy ( pu1 _ pad + dst _ ofst , pu1 _ pad + src _ ofst , ( blk _ wd + 4 ) ) ;	EMPTY	memcpy
506	356	2	-1	0	-1	dst _ ofst += ( blk _ wd + 4 ) ;	EMPTY	EMPTY
506	357	2	-1	0	-1	}	EMPTY	EMPTY
506	358	2	-1	0	-1	}	EMPTY	EMPTY
506	359	3	-1	0	-1	}	EMPTY	EMPTY
506	389	1	0	0	-1	void ideint _ spatial _ filter ( uword8 * pu1 _ src	ideint _ spatial _ filter uword8 pu1 _ src	EMPTY
506	390	2	-1	0	-1	uword8 * pu1 _ out	uword8	EMPTY
506	391	2	-1	0	-1	word32 src _ strd	EMPTY	EMPTY
506	392	2	-1	0	-1	word32 out _ strd )	EMPTY	EMPTY
506	393	2	-1	0	-1	{	EMPTY	EMPTY
506	394	2	-1	0	-1	word32 i ;	EMPTY	EMPTY
506	395	2	-1	0	-1	word32 j ;	EMPTY	EMPTY
506	396	3	-1	0	-1	word32 k ;	EMPTY	EMPTY
506	401	1	1	1	1	for ( k = numconst ; k < numconst ; k ++ )	EMPTY	EMPTY
506	402	2	-1	0	-1	{	EMPTY	EMPTY
506	403	2	-1	0	-1	word32 adiff [ 3 ] = { 0 , 0 , 0 } ;	EMPTY	EMPTY
506	404	2	-1	0	-1	word32 shift ;	EMPTY	EMPTY
506	405	2	-1	0	-1	word32 dir _ 45 _ le _ 90 , dir _ 45 _ le _ 135 , dir _ 135 _ le _ 90 ;	EMPTY	EMPTY
506	406	3	-1	0	-1	uword8 * pu1 _ row _ 1 , * pu1 _ row _ 2 , * pu1 _ dst ;	uword8	EMPTY
506	411	1	1	1	-1	pu1 _ row _ 1 = pu1 _ src	pu1 _ src	EMPTY
506	412	3	-1	0	-1	pu1 _ row _ 2 = pu1 _ src + src _ strd	pu1 _ src	EMPTY
506	417	1	1	1	1	for ( j = numconst ; j < sub _ blk _ ht ; j ++ )	EMPTY	EMPTY
506	418	2	-1	0	-1	{	EMPTY	EMPTY
506	419	2	-1	0	-1	for ( i = numconst ; i < sub _ blk _ wd ; i ++ )	EMPTY	EMPTY
506	420	2	-1	0	-1	{	EMPTY	EMPTY
506	421	3	-1	1	-1	adiff [ numconst ] += abs _ dif ( pu1 _ row _ 1 [ i ]  pu1 _ row _ 2 [ i ] ) ;	EMPTY	EMPTY
506	423	1	1	1	-1	adiff [ numconst ] += abs _ dif ( pu1 _ row _ 1 [ i - numconst ]  pu1 _ row _ 2 [ i + numconst ] ) ;	EMPTY	EMPTY
506	425	1	1	1	-1	adiff [ numconst ] += abs _ dif ( pu1 _ row _ 1 [ i + numconst ]  pu1 _ row _ 2 [ i - numconst ] ) ;	EMPTY	EMPTY
506	426	2	-1	0	-1	}	EMPTY	EMPTY
506	427	2	-1	0	-1	pu1 _ row _ 1 += src _ strd ;	EMPTY	EMPTY
506	428	2	-1	0	-1	pu1 _ row _ 2 += src _ strd ;	EMPTY	EMPTY
506	429	3	-1	0	-1	}	EMPTY	EMPTY
506	434	1	1	1	-1	adiff [ numconst ] *= edge _ bias _ 0 ;	EMPTY	EMPTY
506	435	2	-1	0	-1	adiff [ numconst ] *= edge _ bias _ 1 ;	EMPTY	EMPTY
506	436	3	-1	0	-1	adiff [ numconst ] *= edge _ bias _ 1 ;	EMPTY	EMPTY
506	441	1	1	1	-1	dir _ 45 _ le _ 90 = ( adiff [ 2 ] <= adiff [ 0 ] )	EMPTY	EMPTY
506	442	2	-1	0	-1	dir _ 45 _ le _ 135 = ( adiff [ 2 ] <= adiff [ 1 ] )	EMPTY	EMPTY
506	443	3	-1	0	-1	dir _ 135 _ le _ 90 = ( adiff [ 1 ] <= adiff [ 0 ] )	EMPTY	EMPTY
506	448	1	1	1	-1	shift = 0	EMPTY	EMPTY
506	449	2	-1	0	-1	if ( 1 == dir _ 45 _ le _ 135 )	EMPTY	EMPTY
506	450	2	-1	0	-1	{	EMPTY	EMPTY
506	451	2	-1	0	-1	if ( 1 == dir _ 45 _ le _ 90 )	EMPTY	EMPTY
506	452	2	-1	0	-1	shift = 1 ;	EMPTY	EMPTY
506	453	2	-1	0	-1	}	EMPTY	EMPTY
506	454	2	-1	0	-1	else	EMPTY	EMPTY
506	455	2	-1	0	-1	{	EMPTY	EMPTY
506	456	2	-1	0	-1	if ( 1 == dir _ 135 _ le _ 90 )	EMPTY	EMPTY
506	457	2	-1	0	-1	shift = - 1 ;	EMPTY	EMPTY
506	458	3	-1	0	-1	}	EMPTY	EMPTY
506	463	1	1	1	-1	pu1 _ row _ 1 = pu1 _ src + shift	pu1 _ src	EMPTY
506	464	2	-1	0	-1	pu1 _ row _ 2 = pu1 _ src + src _ strd - shift	pu1 _ src	EMPTY
506	465	3	-1	0	-1	pu1 _ dst = pu1 _ out	EMPTY	EMPTY
506	467	1	0	0	0	for ( j = 0 ; j < sub _ blk _ ht ; j ++ )	EMPTY	EMPTY
506	468	2	-1	0	-1	{	EMPTY	EMPTY
506	469	2	-1	0	-1	for ( i = 0 ; i < sub _ blk _ wd ; i ++ )	EMPTY	EMPTY
506	470	2	-1	0	-1	{	EMPTY	EMPTY
506	471	2	-1	0	-1	pu1 _ dst [ i ] = ( uword8 ) avg ( pu1 _ row _ 1 [ i ] , pu1 _ row _ 2 [ i ] ) ;	uword8	EMPTY
506	472	2	-1	0	-1	}	EMPTY	EMPTY
506	473	2	-1	0	-1	pu1 _ row _ 1 += src _ strd ;	EMPTY	EMPTY
506	474	2	-1	0	-1	pu1 _ row _ 2 += src _ strd ;	EMPTY	EMPTY
506	475	2	-1	0	-1	pu1 _ dst += out _ strd ;	EMPTY	EMPTY
506	476	3	-1	0	-1	}	EMPTY	EMPTY
506	478	1	0	0	-1	pu1 _ out += sub _ blk _ wd ;	EMPTY	EMPTY
506	479	2	-1	0	-1	pu1 _ src += sub _ blk _ wd ;	pu1 _ src	EMPTY
506	480	2	-1	0	-1	}	EMPTY	EMPTY
506	481	3	-1	0	-1	}	EMPTY	EMPTY
507	84	1	1	0	-1	void ideint _ init _ function _ ptr ( ctxt _ t * ps _ ctxt )	ideint _ init _ function _ ptr ctxt _ t ps _ ctxt	EMPTY
507	85	2	-1	0	-1	{	EMPTY	EMPTY
507	86	3	-1	1	-1	ideint _ init _ function _ ptr _ generic ( ps _ ctxt )	ps _ ctxt	EMPTY
507	88	1	0	0	0	switch ( ps _ ctxt -> s _ params . e _ arch )	ps _ ctxt s _ params e _ arch	EMPTY
507	89	2	-1	0	-1	{	EMPTY	EMPTY
507	90	2	-1	0	-1	# if defined ( armv8 )	EMPTY	EMPTY
507	91	2	-1	0	-1	default :	EMPTY	EMPTY
507	92	2	-1	0	-1	ideint _ init _ function _ ptr _ av8 ( ps _ ctxt ) ;	ps _ ctxt	EMPTY
507	93	2	-1	0	-1	break ;	EMPTY	EMPTY
507	94	2	-1	0	-1	# elif ! defined ( disable _ neon )	EMPTY	EMPTY
507	95	2	-1	0	-1	case icv _ arm _ noneon :	EMPTY	EMPTY
507	96	2	-1	0	-1	break ;	EMPTY	EMPTY
507	97	2	-1	0	-1	case icv _ arm _ a5 :	EMPTY	EMPTY
507	98	2	-1	0	-1	case icv _ arm _ a7 :	EMPTY	EMPTY
507	99	2	-1	0	-1	case icv _ arm _ a9 :	EMPTY	EMPTY
507	100	2	-1	0	-1	case icv _ arm _ a15 :	EMPTY	EMPTY
507	101	2	-1	0	-1	case icv _ arm _ a9q :	EMPTY	EMPTY
507	102	2	-1	0	-1	default :	EMPTY	EMPTY
507	103	2	-1	0	-1	ideint _ init _ function _ ptr _ a9 ( ps _ ctxt ) ;	ps _ ctxt	EMPTY
507	104	2	-1	0	-1	break ;	EMPTY	EMPTY
507	105	2	-1	0	-1	# else	EMPTY	EMPTY
507	106	2	-1	0	-1	default :	EMPTY	EMPTY
507	107	2	-1	0	-1	break ;	EMPTY	EMPTY
507	108	2	-1	0	-1	# endif	EMPTY	EMPTY
507	109	3	-1	0	-1	}	EMPTY	EMPTY
507	111	1	0	0	-1	}	EMPTY	EMPTY
507	130	1	1	0	-1	icv _ arch _ t ideint _ default _ arch ( void )	icv _ arch _ t ideint _ default _ arch	EMPTY
507	131	2	-1	0	-1	{	EMPTY	EMPTY
507	132	2	-1	1	-1	return icv _ arm _ a9q	EMPTY	EMPTY
507	133	3	-1	0	-1	}	EMPTY	EMPTY
511	44	1	1	0	-1	const mc _ type _ consts _ t gas _ impeg2d _ mc _ params _ luma [ ] [ numconst ] =	gas _ impeg2d _ mc _ params _ luma	EMPTY
511	45	2	-1	0	-1	{	EMPTY	EMPTY
511	47	2	-1	1	-1	{ { numconst  numconst  numconst  numconst  mb _ size  mb _ size  numconst }	EMPTY	EMPTY
511	48	2	-1	0	-1	{ numconst  numconst  numconst  numconst  mb _ size  mb _ size  numconst } }	EMPTY	EMPTY
511	50	2	-1	1	-1	{ { numconst  numconst  numconst  numconst  mb _ size / numconst  mb _ size * numconst  numconst }	EMPTY	EMPTY
511	51	2	-1	0	-1	{ numconst  numconst  numconst  numconst  mb _ size / numconst  mb _ size * numconst  numconst } }	EMPTY	EMPTY
511	53	2	-1	1	-1	{ { numconst  numconst  numconst  numconst  mb _ size  mb _ size  numconst }	EMPTY	EMPTY
511	54	2	-1	0	-1	{ numconst  numconst  numconst  numconst  mb _ size  mb _ size  numconst } }	EMPTY	EMPTY
511	56	2	-1	1	-1	{ { numconst  numconst  numconst  numconst  mb _ size / numconst  mb _ size * numconst  numconst }	EMPTY	EMPTY
511	57	2	-1	0	-1	{ numconst  numconst  numconst  numconst  mb _ size / numconst  mb _ size * numconst  numconst } }	EMPTY	EMPTY
511	59	2	-1	1	-1	{ { numconst  numconst  numconst  numconst  mb _ size / numconst  mb _ size * numconst  numconst }	EMPTY	EMPTY
511	60	3	-1	0	-1	{ numconst  numconst  numconst  numconst  mb _ size / numconst  mb _ size * numconst  numconst } }	EMPTY	EMPTY
511	63	1	1	1	-1	{ { numconst  numconst  numconst  numconst  mb _ size  mb _ size  numconst }  { numconst  numconst  numconst  numconst  mb _ size  mb _ size  numconst } }	EMPTY	EMPTY
511	65	2	-1	1	-1	{ { numconst  numconst  numconst  numconst  mb _ size / numconst  mb _ size  numconst }  { numconst  numconst  numconst  numconst  mb _ size / numconst  mb _ size  ( numconst * mb _ size / numconst ) } }	EMPTY	EMPTY
511	67	2	-1	1	-1	{ { numconst  numconst  numconst  numconst  mb _ size  mb _ size  numconst }  { numconst  numconst  numconst  numconst  mb _ size  mb _ size  numconst } }	EMPTY	EMPTY
511	69	2	-1	1	-1	{ { numconst  numconst  numconst  numconst  mb _ size / numconst  mb _ size  numconst }  { numconst  numconst  numconst  numconst  mb _ size / numconst  mb _ size  ( numconst * mb _ size / numconst ) } }	EMPTY	EMPTY
511	71	3	-1	1	-1	{ { numconst  numconst  numconst  numconst  mb _ size  mb _ size  numconst }  { numconst  numconst  numconst  numconst  mb _ size  mb _ size  numconst } }	EMPTY	EMPTY
511	73	1	0	0	-1	} ;	EMPTY	EMPTY
511	75	1	1	0	-1	const mc _ type _ consts _ t gas _ impeg2d _ mc _ params _ chroma [ numconst ] [ numconst ] =	EMPTY	EMPTY
511	76	2	-1	0	-1	{	EMPTY	EMPTY
511	78	2	-1	1	-1	{ { numconst  numconst  numconst  numconst  mb _ chroma _ size  mb _ chroma _ size  numconst }  { numconst  numconst  numconst  numconst  mb _ chroma _ size  mb _ chroma _ size  numconst } }	EMPTY	EMPTY
511	80	2	-1	1	-1	{ { numconst  numconst  numconst  numconst  mb _ chroma _ size / numconst  mb _ chroma _ size * numconst  numconst }  { numconst  numconst  numconst  numconst  mb _ chroma _ size / numconst	EMPTY	EMPTY
511	81	2	-1	0	-1	mb _ chroma _ size * numconst  numconst } }	EMPTY	EMPTY
511	83	2	-1	1	-1	{ { numconst  numconst  numconst  numconst  mb _ chroma _ size  mb _ chroma _ size  numconst }  { numconst  numconst  numconst  numconst  mb _ chroma _ size	EMPTY	EMPTY
511	84	2	-1	0	-1	mb _ chroma _ size  numconst } }	EMPTY	EMPTY
511	86	2	-1	1	-1	{ { numconst  numconst  numconst  numconst  mb _ chroma _ size / numconst  mb _ chroma _ size * numconst  numconst }  { numconst  numconst  numconst  numconst  mb _ chroma _ size / numconst	EMPTY	EMPTY
511	87	2	-1	0	-1	mb _ chroma _ size * numconst  numconst } }	EMPTY	EMPTY
511	89	2	-1	1	-1	{ { numconst  numconst  numconst  numconst  mb _ chroma _ size / numconst  mb _ chroma _ size * numconst  numconst }  { numconst  numconst  numconst  numconst  mb _ chroma _ size / numconst	EMPTY	EMPTY
511	90	3	-1	0	-1	mb _ chroma _ size * numconst  numconst } }	EMPTY	EMPTY
511	93	1	1	1	-1	{ { numconst  numconst  numconst  numconst  mb _ chroma _ size  mb _ chroma _ size  numconst }  { numconst  numconst  numconst  numconst  mb _ chroma _ size	EMPTY	EMPTY
511	94	2	-1	0	-1	mb _ chroma _ size  numconst } }	EMPTY	EMPTY
511	96	2	-1	1	-1	{ { numconst  numconst  numconst  numconst  mb _ chroma _ size / numconst  mb _ chroma _ size  numconst }  { numconst  numconst  numconst  numconst  mb _ chroma _ size / numconst	EMPTY	EMPTY
511	97	2	-1	0	-1	mb _ chroma _ size  ( numconst * mb _ chroma _ size / numconst ) } }	EMPTY	EMPTY
511	99	2	-1	1	-1	{ { numconst  numconst  numconst  numconst  mb _ chroma _ size  mb _ chroma _ size  numconst }  { numconst  numconst  numconst  numconst  mb _ chroma _ size	EMPTY	EMPTY
511	100	2	-1	0	-1	mb _ chroma _ size  numconst } }	EMPTY	EMPTY
511	102	2	-1	1	-1	{ { numconst  numconst  numconst  numconst  mb _ chroma _ size / numconst  mb _ chroma _ size  numconst }  { numconst  numconst  numconst  numconst  mb _ chroma _ size / numconst	EMPTY	EMPTY
511	103	2	-1	0	-1	mb _ chroma _ size  ( numconst * mb _ chroma _ size / numconst ) } }	EMPTY	EMPTY
511	105	2	-1	1	-1	{ { numconst  numconst  numconst  numconst  mb _ chroma _ size  mb _ chroma _ size  numconst }  { numconst  numconst  numconst  numconst  mb _ chroma _ size	EMPTY	EMPTY
511	106	3	-1	0	-1	mb _ chroma _ size  numconst } }	EMPTY	EMPTY
511	108	1	0	0	-1	} ;	EMPTY	EMPTY
511	113	1	1	0	-1	const dec _ mb _ params _ t gas _ impeg2d _ func _ frm _ fw _ or _ bk [ numconst ] =	gas _ impeg2d _ func _ frm _ fw _ or _ bk	EMPTY
511	114	2	-1	0	-1	{	EMPTY	EMPTY
511	116	2	-1	1	-1	{ impeg2d _ dec _ 1mv _ mb  mc _ frm _ fw _ or _ bk _ 1mv  impeg2d _ mc _ 1mv }	mc _ frm _ fw _ or _ bk _ 1mv	EMPTY
511	118	2	-1	1	-1	{ impeg2d _ dec _ 2mv _ fw _ or _ bk _ mb  mc _ frm _ fw _ or _ bk _ 2mv  impeg2d _ mc _ fw _ or _ bk _ mb }	mc _ frm _ fw _ or _ bk _ 2mv	EMPTY
511	120	2	-1	1	-1	{ impeg2d _ dec _ 1mv _ mb  mc _ frm _ fw _ or _ bk _ 1mv  impeg2d _ mc _ 1mv }	mc _ frm _ fw _ or _ bk _ 1mv	EMPTY
511	122	2	-1	1	-1	{ impeg2d _ dec _ frm _ dual _ prime  mc _ frm _ fw _ dual _ prime _ 1mv  impeg2d _ mc _ frm _ dual _ prime }	mc _ frm _ fw _ dual _ prime _ 1mv	EMPTY
511	123	3	-1	0	-1	} ;	EMPTY	EMPTY
511	125	1	1	0	-1	const dec _ mb _ params _ t gas _ impeg2d _ func _ fld _ fw _ or _ bk [ numconst ] =	EMPTY	EMPTY
511	126	2	-1	0	-1	{	EMPTY	EMPTY
511	128	2	-1	1	-1	{ impeg2d _ dec _ 1mv _ mb  mc _ frm _ fw _ or _ bk _ 1mv  impeg2d _ mc _ 1mv }	mc _ frm _ fw _ or _ bk _ 1mv	EMPTY
511	130	2	-1	1	-1	{ impeg2d _ dec _ 1mv _ mb  mc _ fld _ fw _ or _ bk _ 1mv  impeg2d _ mc _ 1mv }	mc _ fld _ fw _ or _ bk _ 1mv	EMPTY
511	132	2	-1	1	-1	{ impeg2d _ dec _ 2mv _ fw _ or _ bk _ mb  mc _ fld _ fw _ or _ bk _ 2mv  impeg2d _ mc _ fw _ or _ bk _ mb }	mc _ fld _ fw _ or _ bk _ 2mv	EMPTY
511	134	2	-1	1	-1	{ impeg2d _ dec _ fld _ dual _ prime  mc _ fld _ fw _ dual _ prime _ 1mv  impeg2d _ mc _ fld _ dual _ prime }	mc _ fld _ fw _ dual _ prime _ 1mv	EMPTY
511	135	3	-1	0	-1	} ;	EMPTY	EMPTY
511	138	1	1	0	-1	const dec _ mb _ params _ t gas _ impeg2d _ func _ frm _ bi _ direct [ numconst ] =	EMPTY	EMPTY
511	139	2	-1	0	-1	{	EMPTY	EMPTY
511	140	2	-1	0	-1	{ null  mc _ frm _ fw _ or _ bk _ 1mv  null }	mc _ frm _ fw _ or _ bk _ 1mv	EMPTY
511	142	2	-1	1	-1	{ impeg2d _ dec _ 4mv _ mb  mc _ frm _ fw _ and _ bk _ 4mv  impeg2d _ mc _ 4mv }	mc _ frm _ fw _ and _ bk _ 4mv	EMPTY
511	144	2	-1	1	-1	{ impeg2d _ dec _ 2mv _ interp _ mb  mc _ frm _ fw _ and _ bk _ 2mv  impeg2d _ mc _ 2mv }	mc _ frm _ fw _ and _ bk _ 2mv	EMPTY
511	146	2	-1	1	-1	{ null  mc _ frm _ fw _ or _ bk _ 1mv  null }	mc _ frm _ fw _ or _ bk _ 1mv	EMPTY
511	147	3	-1	0	-1	} ;	EMPTY	EMPTY
511	149	1	1	0	-1	const dec _ mb _ params _ t gas _ impeg2d _ func _ fld _ bi _ direct [ numconst ] =	EMPTY	EMPTY
511	150	2	-1	0	-1	{	EMPTY	EMPTY
511	151	2	-1	0	-1	{ null  mc _ frm _ fw _ or _ bk _ 1mv  null }	mc _ frm _ fw _ or _ bk _ 1mv	EMPTY
511	153	2	-1	1	-1	{ impeg2d _ dec _ 2mv _ interp _ mb  mc _ fld _ fw _ and _ bk _ 2mv  impeg2d _ mc _ 2mv }	mc _ fld _ fw _ and _ bk _ 2mv	EMPTY
511	155	2	-1	1	-1	{ impeg2d _ dec _ 4mv _ mb  mc _ fld _ fw _ and _ bk _ 4mv  impeg2d _ mc _ 4mv }	mc _ fld _ fw _ and _ bk _ 4mv	EMPTY
511	157	2	-1	1	-1	{ null  mc _ frm _ fw _ or _ bk _ 1mv  null }	mc _ frm _ fw _ or _ bk _ 1mv	EMPTY
511	158	3	-1	0	-1	} ;	EMPTY	EMPTY
558	40	1	1	0	1	local unsigned long crc32 _ little of ( ( unsigned long	crc32 _ little	EMPTY
558	41	2	-1	0	-1	const unsigned char far *  unsigned ) ) ;	EMPTY	EMPTY
558	42	2	-1	0	-1	local unsigned long crc32 _ big of ( ( unsigned long	crc32 _ big	EMPTY
558	43	2	-1	0	-1	const unsigned char far *  unsigned ) ) ;	EMPTY	EMPTY
558	44	2	-1	0	-1	# define tbls numconst	EMPTY	EMPTY
558	45	2	-1	0	-1	# else	EMPTY	EMPTY
558	46	2	-1	0	-1	# define tbls numconst	EMPTY	EMPTY
558	47	3	-1	1	-1	# endif	EMPTY	EMPTY
558	50	1	0	0	-1	local unsigned long gf2 _ matrix _ times of ( ( unsigned long * mat	gf2 _ matrix _ times mat	EMPTY
558	51	2	-1	0	-1	unsigned long vec ) )	vec	EMPTY
558	52	2	-1	0	-1	local void gf2 _ matrix _ square of ( ( unsigned long * square  unsigned long * mat ) )	gf2 _ matrix _ square mat	EMPTY
558	53	3	-1	0	-1	local ulong crc32 _ combine _  of ( ( ulong crc1  ulong crc2  z _ off64 _ t len2 ) ) ;	ulong crc32 _ combine _  ulong ulong	EMPTY
558	56	1	0	0	-1	# ifdef dynamic _ crc _ table	EMPTY	EMPTY
558	58	1	1	0	-1	local volatile int crc _ table _ empty = numconst ;	EMPTY	EMPTY
558	59	2	-1	0	-1	local z _ crc _ t far crc _ table [ tbls ] [ numconst ] ;	EMPTY	EMPTY
558	60	2	-1	0	-1	local void make _ crc _ table of ( ( void ) ) ;	EMPTY	EMPTY
558	61	2	-1	0	-1	# ifdef makecrch	EMPTY	EMPTY
558	62	2	-1	0	-1	local void write _ table of ( ( file *  const z _ crc _ t far * ) ) ;	EMPTY	EMPTY
558	63	2	-1	1	-1	# endif	EMPTY	EMPTY
558	90	2	-1	1	-1	local void make _ crc _ table ( )	EMPTY	EMPTY
558	91	2	-1	0	-1	{	EMPTY	EMPTY
558	92	2	-1	0	-1	z _ crc _ t c ;	EMPTY	EMPTY
558	93	2	-1	0	-1	int n  k ;	EMPTY	EMPTY
558	94	2	-1	1	-1	z _ crc _ t poly ;	EMPTY	EMPTY
558	96	2	-1	1	-1	static volatile int first = numconst ;	EMPTY	EMPTY
558	97	3	-1	0	-1	static const unsigned char p [ ] = { numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst  numconst } ;	EMPTY	EMPTY
558	102	1	1	1	-1	if ( first ) {	EMPTY	EMPTY
558	103	3	-1	0	-1	first = numconst ;	EMPTY	EMPTY
558	106	1	1	1	-1	poly = numconst ;	EMPTY	EMPTY
558	107	2	-1	0	-1	for ( n = numconst ; n < ( int ) ( sizeof ( p ) / sizeof ( unsigned char ) ) ; n ++ )	EMPTY	EMPTY
558	108	3	-1	0	-1	poly |= ( z _ crc _ t ) numconst << ( numconst - p [ n ] ) ;	EMPTY	EMPTY
558	111	1	1	1	-1	for ( n = numconst ; n < numconst ; n ++ ) {	EMPTY	EMPTY
558	112	2	-1	0	-1	c = ( z _ crc _ t ) n ;	EMPTY	EMPTY
558	113	2	-1	0	-1	for ( k = numconst ; k < numconst ; k ++ )	EMPTY	EMPTY
558	114	2	-1	0	-1	c = c & numconst ? poly ^ ( c >> numconst ) : c >> numconst ;	EMPTY	EMPTY
558	115	2	-1	0	-1	crc _ table [ numconst ] [ n ] = c ;	EMPTY	EMPTY
558	116	3	-1	0	-1	}	EMPTY	EMPTY
558	118	1	1	0	-1	# ifdef byfour	EMPTY	EMPTY
558	121	2	-1	1	-1	for ( n = numconst ; n < numconst ; n ++ ) {	EMPTY	EMPTY
558	122	2	-1	0	-1	c = crc _ table [ numconst ] [ n ] ;	EMPTY	EMPTY
558	123	2	-1	0	-1	crc _ table [ numconst ] [ n ] = zswap32 ( c ) ;	EMPTY	EMPTY
558	124	2	-1	0	-1	for ( k = numconst ; k < numconst ; k ++ ) {	EMPTY	EMPTY
558	125	2	-1	0	-1	c = crc _ table [ numconst ] [ c & numconst ] ^ ( c >> numconst ) ;	EMPTY	EMPTY
558	126	2	-1	0	-1	crc _ table [ k ] [ n ] = c ;	EMPTY	EMPTY
558	127	2	-1	0	-1	crc _ table [ k + numconst ] [ n ] = zswap32 ( c ) ;	EMPTY	EMPTY
558	128	2	-1	0	-1	}	EMPTY	EMPTY
558	129	2	-1	0	-1	}	EMPTY	EMPTY
558	130	3	-1	1	-1	# endif	EMPTY	EMPTY
558	132	1	1	0	-1	crc _ table _ empty = numconst ;	EMPTY	EMPTY
558	133	2	-1	0	-1	}	EMPTY	EMPTY
558	134	2	-1	1	-1	else {	EMPTY	EMPTY
558	136	2	-1	1	-1	while ( crc _ table _ empty )	EMPTY	EMPTY
558	137	2	-1	0	-1	;	EMPTY	EMPTY
558	138	3	-1	0	-1	}	EMPTY	EMPTY
558	140	1	1	0	-1	# ifdef makecrch	EMPTY	EMPTY
558	142	2	-1	1	-1	{	EMPTY	EMPTY
558	143	3	-1	0	-1	file * out ;	EMPTY	EMPTY
558	145	1	1	0	-1	out = fopen ( strlit  strlit ) ;	EMPTY	EMPTY
558	146	2	-1	0	-1	if ( out == null ) return ;	EMPTY	EMPTY
558	147	2	-1	0	-1	fprintf ( out  strlit ) ;	EMPTY	EMPTY
558	148	2	-1	0	-1	fprintf ( out  strlit ) ;	EMPTY	EMPTY
558	149	2	-1	0	-1	fprintf ( out  strlit ) ;	EMPTY	EMPTY
558	150	2	-1	0	-1	fprintf ( out  strlit ) ;	EMPTY	EMPTY
558	151	2	-1	0	-1	write _ table ( out  crc _ table [ numconst ] ) ;	EMPTY	EMPTY
558	152	2	-1	0	-1	# ifdef byfour	EMPTY	EMPTY
558	153	2	-1	0	-1	fprintf ( out  strlit ) ;	EMPTY	EMPTY
558	154	2	-1	0	-1	for ( k = numconst ; k < numconst ; k ++ ) {	EMPTY	EMPTY
558	155	2	-1	0	-1	fprintf ( out  strlit ) ;	EMPTY	EMPTY
558	156	2	-1	0	-1	write _ table ( out  crc _ table [ k ] ) ;	EMPTY	EMPTY
558	157	2	-1	0	-1	}	EMPTY	EMPTY
558	158	2	-1	0	-1	fprintf ( out  strlit ) ;	EMPTY	EMPTY
558	159	2	-1	1	-1	# endif	EMPTY	EMPTY
558	160	2	-1	0	-1	fprintf ( out  strlit ) ;	EMPTY	EMPTY
558	161	2	-1	0	-1	fclose ( out ) ;	EMPTY	EMPTY
558	162	2	-1	0	-1	}	EMPTY	EMPTY
558	163	2	-1	1	-1	# endif	EMPTY	EMPTY
558	164	3	-1	0	-1	}	EMPTY	EMPTY
558	166	1	0	0	-1	# ifdef makecrch	EMPTY	EMPTY
558	167	2	-1	0	-1	local void write _ table ( out  table )	EMPTY	EMPTY
558	168	2	-1	0	-1	file * out ;	EMPTY	EMPTY
558	169	2	-1	0	-1	const z _ crc _ t far * table ;	EMPTY	EMPTY
558	170	2	-1	0	-1	{	EMPTY	EMPTY
558	171	3	-1	0	-1	int n ;	EMPTY	EMPTY
558	173	1	1	0	-1	for ( n = numconst ; n < numconst ; n ++ )	EMPTY	EMPTY
558	174	2	-1	0	-1	fprintf ( out  strlit  n % numconst ? strlit : strlit	EMPTY	EMPTY
558	175	2	-1	0	-1	( unsigned long ) ( table [ n ] )	EMPTY	EMPTY
558	176	2	-1	0	-1	n == numconst ? strlit : ( n % numconst == numconst ? strlit : strlit ) ) ;	EMPTY	EMPTY
558	177	2	-1	0	-1	}	EMPTY	EMPTY
558	178	3	-1	1	-1	# endif	EMPTY	EMPTY
558	180	1	1	1	-1	# else	EMPTY	EMPTY
558	184	2	-1	1	-1	# include strlit	EMPTY	EMPTY
558	185	3	-1	1	-1	# endif	EMPTY	EMPTY
558	190	1	0	0	-1	const z _ crc _ t far * zexport get _ crc _ table ( )	get _ crc _ table	EMPTY
558	191	2	-1	0	-1	{	EMPTY	EMPTY
558	192	2	-1	0	-1	# ifdef dynamic _ crc _ table	EMPTY	EMPTY
558	193	2	-1	0	-1	if ( crc _ table _ empty )	EMPTY	EMPTY
558	194	2	-1	0	-1	make _ crc _ table ( ) ;	EMPTY	EMPTY
558	195	2	-1	0	-1	# endif	EMPTY	EMPTY
558	196	2	-1	0	-1	return ( const z _ crc _ t far * ) crc _ table	EMPTY	EMPTY
558	197	3	-1	0	-1	}	EMPTY	EMPTY
558	200	1	1	1	1	# define do1 crc = crc _ table [ numconst ] [ ( ( int ) crc ^ ( * buf ++ ) ) & numconst ] ^ ( crc >> numconst )	EMPTY	EMPTY
558	201	3	-1	0	-1	# define do8 do1 ; do1 ; do1 ; do1 ; do1 ; do1 ; do1 ; do1	EMPTY	EMPTY
558	204	1	0	0	-1	unsigned long zexport crc32 ( crc  buf  len )	crc32	EMPTY
558	205	2	-1	0	-1	unsigned long crc ;	EMPTY	EMPTY
558	206	2	-1	0	-1	const unsigned char far * buf ;	EMPTY	EMPTY
558	207	2	-1	0	-1	uint len ;	uint	EMPTY
558	208	2	-1	0	-1	{	EMPTY	EMPTY
558	209	3	-1	0	-1	if ( buf == z _ null ) return 0ul	EMPTY	EMPTY
558	211	1	1	0	-1	# ifdef dynamic _ crc _ table	EMPTY	EMPTY
558	212	2	-1	0	-1	if ( crc _ table _ empty )	EMPTY	EMPTY
558	213	2	-1	0	-1	make _ crc _ table ( ) ;	EMPTY	EMPTY
558	214	3	-1	1	-1	# endif	EMPTY	EMPTY
558	216	1	0	0	-1	# ifdef byfour	EMPTY	EMPTY
558	217	2	-1	0	-1	if ( sizeof ( void * ) == sizeof ( ptrdiff _ t ) ) {	EMPTY	EMPTY
558	218	3	-1	0	-1	z _ crc _ t endian ;	EMPTY	EMPTY
558	220	1	1	0	-1	endian = 1 ;	EMPTY	EMPTY
558	221	2	-1	0	-1	if ( * ( ( unsigned char * ) ( & endian ) ) )	EMPTY	EMPTY
558	222	2	-1	0	-1	return crc32 _ little ( crc , buf , len ) ;	crc32 _ little	EMPTY
558	223	2	-1	0	-1	else	EMPTY	EMPTY
558	224	2	-1	0	-1	return crc32 _ big ( crc , buf , len ) ;	crc32 _ big	EMPTY
558	225	2	-1	0	-1	}	EMPTY	EMPTY
558	226	2	-1	1	-1	# endif	EMPTY	EMPTY
558	227	2	-1	0	-1	crc = crc ^ 0xfffffffful	EMPTY	EMPTY
558	228	2	-1	0	-1	while ( len >= 8 ) {	EMPTY	EMPTY
558	229	2	-1	0	-1	do8 ;	EMPTY	EMPTY
558	230	2	-1	0	-1	len -= 8 ;	EMPTY	EMPTY
558	231	2	-1	0	-1	}	EMPTY	EMPTY
558	232	2	-1	0	-1	if ( len ) do {	EMPTY	EMPTY
558	233	2	-1	0	-1	do1 ;	EMPTY	EMPTY
558	234	2	-1	0	-1	} while ( -- len )	EMPTY	EMPTY
558	235	2	-1	0	-1	return crc ^ 0xfffffffful	EMPTY	EMPTY
558	236	3	-1	0	-1	}	EMPTY	EMPTY
558	238	1	0	0	-1	# ifdef byfour	EMPTY	EMPTY
558	241	1	1	1	-1	# define dolit4 c ^= * buf4 ++ ; c	EMPTY	EMPTY
558	242	2	-1	0	-1	c = crc _ table [ numconst ] [ c & numconst ] ^ crc _ table [ numconst ] [ ( c >> numconst ) & numconst ] ^ crc _ table	EMPTY	EMPTY
558	243	2	-1	0	-1	crc _ table [ numconst ] [ ( c >> numconst ) & numconst ] ^ crc _ table [ numconst ] [ c >> numconst ]	EMPTY	EMPTY
558	244	3	-1	0	-1	# define dolit32 dolit4 ; dolit4 ; dolit4 ; dolit4 ; dolit4 ; dolit4 ; dolit4 ; dolit4	EMPTY	EMPTY
558	247	1	0	0	-1	local unsigned long crc32 _ little ( crc  buf  len )	crc32 _ little	EMPTY
558	248	2	-1	0	-1	unsigned long crc ;	EMPTY	EMPTY
558	249	2	-1	0	-1	const unsigned char far * buf ;	EMPTY	EMPTY
558	250	2	-1	0	-1	unsigned len ;	EMPTY	EMPTY
558	251	2	-1	0	-1	{	EMPTY	EMPTY
558	252	2	-1	0	-1	register z _ crc _ t c ;	EMPTY	EMPTY
558	253	3	-1	0	-1	register const z _ crc _ t far * buf4 ;	EMPTY	EMPTY
558	255	1	0	0	-1	c = ( z _ crc _ t ) crc	EMPTY	EMPTY
558	256	2	-1	0	-1	c = ~ c	EMPTY	EMPTY
558	257	2	-1	0	-1	while ( len && ( ( ptrdiff _ t ) buf & 3 ) ) {	EMPTY	EMPTY
558	258	2	-1	0	-1	c = crc _ table [ 0 ] [ ( c ^ * buf ++ ) & 0xff ] ^ ( c >> 8 ) ;	EMPTY	EMPTY
558	259	2	-1	0	-1	len -- ;	EMPTY	EMPTY
558	260	3	-1	0	-1	}	EMPTY	EMPTY
558	262	1	0	0	-1	buf4 = ( const z _ crc _ t far * ) ( const void far * ) buf	EMPTY	EMPTY
558	263	2	-1	0	-1	while ( len >= 32 ) {	EMPTY	EMPTY
558	264	2	-1	0	-1	dolit32 ;	EMPTY	EMPTY
558	265	2	-1	0	-1	len -= 32 ;	EMPTY	EMPTY
558	266	2	-1	0	-1	}	EMPTY	EMPTY
558	267	2	-1	0	-1	while ( len >= 4 ) {	EMPTY	EMPTY
558	268	2	-1	0	-1	dolit4 ;	EMPTY	EMPTY
558	269	2	-1	0	-1	len -= 4 ;	EMPTY	EMPTY
558	270	2	-1	0	-1	}	EMPTY	EMPTY
558	271	3	-1	0	-1	buf = ( const unsigned char far * ) buf4	EMPTY	EMPTY
558	273	1	0	0	0	if ( len ) do {	EMPTY	EMPTY
558	274	2	-1	0	-1	c = crc _ table [ 0 ] [ ( c ^ * buf ++ ) & 0xff ] ^ ( c >> 8 ) ;	EMPTY	EMPTY
558	275	2	-1	0	-1	} while ( -- len )	EMPTY	EMPTY
558	276	2	-1	0	-1	c = ~ c	EMPTY	EMPTY
558	277	2	-1	0	-1	return ( unsigned long ) c	EMPTY	EMPTY
558	278	3	-1	0	-1	}	EMPTY	EMPTY
558	281	1	1	1	-1	# define dobig4 c ^= * ++ buf4 ; c	EMPTY	EMPTY
558	282	2	-1	0	-1	c = crc _ table [ numconst ] [ c & numconst ] ^ crc _ table [ numconst ] [ ( c >> numconst ) & numconst ] ^ crc _ table	EMPTY	EMPTY
558	283	2	-1	0	-1	crc _ table [ numconst ] [ ( c >> numconst ) & numconst ] ^ crc _ table [ numconst ] [ c >> numconst ]	EMPTY	EMPTY
558	284	3	-1	0	-1	# define dobig32 dobig4 ; dobig4 ; dobig4 ; dobig4 ; dobig4 ; dobig4 ; dobig4 ; dobig4	EMPTY	EMPTY
558	287	1	0	0	-1	local unsigned long crc32 _ big ( crc  buf  len )	crc32 _ big	EMPTY
558	288	2	-1	0	-1	unsigned long crc ;	EMPTY	EMPTY
558	289	2	-1	0	-1	const unsigned char far * buf ;	EMPTY	EMPTY
558	290	2	-1	0	-1	unsigned len ;	EMPTY	EMPTY
558	291	2	-1	0	-1	{	EMPTY	EMPTY
558	292	2	-1	0	-1	register z _ crc _ t c ;	EMPTY	EMPTY
558	293	3	-1	0	-1	register const z _ crc _ t far * buf4 ;	EMPTY	EMPTY
558	295	1	0	0	-1	c = zswap32 ( ( z _ crc _ t ) crc ) ;	EMPTY	EMPTY
558	296	2	-1	0	-1	c = ~ c	EMPTY	EMPTY
558	297	2	-1	0	-1	while ( len && ( ( ptrdiff _ t ) buf & 3 ) ) {	EMPTY	EMPTY
558	298	2	-1	0	-1	c = crc _ table [ 4 ] [ ( c >> 24 ) ^ * buf ++ ] ^ ( c << 8 ) ;	EMPTY	EMPTY
558	299	2	-1	0	-1	len -- ;	EMPTY	EMPTY
558	300	3	-1	0	-1	}	EMPTY	EMPTY
558	302	1	0	0	-1	buf4 = ( const z _ crc _ t far * ) ( const void far * ) buf	EMPTY	EMPTY
558	303	2	-1	0	-1	buf4 --	EMPTY	EMPTY
558	304	2	-1	0	-1	while ( len >= 32 ) {	EMPTY	EMPTY
558	305	2	-1	0	-1	dobig32 ;	EMPTY	EMPTY
558	306	2	-1	0	-1	len -= 32 ;	EMPTY	EMPTY
558	307	2	-1	0	-1	}	EMPTY	EMPTY
558	308	2	-1	0	-1	while ( len >= 4 ) {	EMPTY	EMPTY
558	309	2	-1	0	-1	dobig4 ;	EMPTY	EMPTY
558	310	2	-1	0	-1	len -= 4 ;	EMPTY	EMPTY
558	311	2	-1	0	-1	}	EMPTY	EMPTY
558	312	2	-1	0	-1	buf4 ++	EMPTY	EMPTY
558	313	3	-1	0	-1	buf = ( const unsigned char far * ) buf4	EMPTY	EMPTY
558	315	1	0	0	0	if ( len ) do {	EMPTY	EMPTY
558	316	2	-1	0	-1	c = crc _ table [ 4 ] [ ( c >> 24 ) ^ * buf ++ ] ^ ( c << 8 ) ;	EMPTY	EMPTY
558	317	2	-1	0	-1	} while ( -- len )	EMPTY	EMPTY
558	318	2	-1	0	-1	c = ~ c	EMPTY	EMPTY
558	319	2	-1	0	-1	return ( unsigned long ) ( zswap32 ( c ) )	EMPTY	EMPTY
558	320	3	-1	0	-1	}	EMPTY	EMPTY
558	322	1	1	1	-1	# endif	EMPTY	EMPTY
558	324	1	1	1	-1	# define gf2 _ dim numconst	EMPTY	EMPTY
558	327	1	0	0	-1	local unsigned long gf2 _ matrix _ times ( mat  vec )	gf2 _ matrix _ times mat vec	EMPTY
558	328	2	-1	0	-1	unsigned long * mat ;	mat	EMPTY
558	329	2	-1	0	-1	unsigned long vec ;	vec	EMPTY
558	330	2	-1	0	-1	{	EMPTY	EMPTY
558	331	3	-1	0	-1	unsigned long sum ;	EMPTY	EMPTY
558	333	1	0	0	-1	sum = 0	EMPTY	EMPTY
558	334	2	-1	0	-1	while ( vec ) {	vec	EMPTY
558	335	2	-1	0	-1	if ( vec & 1 )	vec	EMPTY
558	336	2	-1	0	-1	sum ^= * mat ;	mat	EMPTY
558	337	2	-1	0	-1	vec >>= 1 ;	vec	EMPTY
558	338	2	-1	0	-1	mat ++ ;	mat	EMPTY
558	339	2	-1	0	-1	}	EMPTY	EMPTY
558	340	2	-1	0	-1	return sum	EMPTY	EMPTY
558	341	3	-1	0	-1	}	EMPTY	EMPTY
558	344	1	0	0	-1	local void gf2 _ matrix _ square ( square  mat )	gf2 _ matrix _ square mat	EMPTY
558	345	2	-1	0	-1	unsigned long * square ;	EMPTY	EMPTY
558	346	2	-1	0	-1	unsigned long * mat ;	mat	EMPTY
558	347	2	-1	0	-1	{	EMPTY	EMPTY
558	348	3	-1	0	-1	int n ;	EMPTY	EMPTY
558	350	1	0	0	0	for ( n = 0 ; n < gf2 _ dim ; n ++ )	EMPTY	EMPTY
558	351	2	-1	0	-1	square [ n ] = gf2 _ matrix _ times ( mat , mat [ n ] )	gf2 _ matrix _ times mat mat	EMPTY
558	352	3	-1	0	-1	}	EMPTY	EMPTY
558	355	1	1	0	-1	local ulong crc32 _ combine _  ( crc1  crc2  len2 )	ulong crc32 _ combine _	EMPTY
558	356	2	-1	0	-1	ulong crc1 ;	ulong	EMPTY
558	357	2	-1	0	-1	ulong crc2 ;	ulong	EMPTY
558	358	2	-1	0	-1	z _ off64 _ t len2 ;	EMPTY	EMPTY
558	359	2	-1	0	-1	{	EMPTY	EMPTY
558	360	2	-1	0	-1	int n ;	EMPTY	EMPTY
558	361	2	-1	0	-1	unsigned long row ;	EMPTY	EMPTY
558	362	2	-1	1	-1	unsigned long even [ gf2 _ dim ] ;	even	EMPTY
558	363	3	-1	1	-1	unsigned long odd [ gf2 _ dim ] ;	odd	EMPTY
558	366	1	1	1	1	if ( len2 <= 0 )	EMPTY	EMPTY
558	367	3	-1	0	-1	return crc1	EMPTY	EMPTY
558	370	1	1	1	-1	odd [ 0 ] = 0xedb88320ul	odd	EMPTY
558	371	2	-1	0	-1	row = 1	EMPTY	EMPTY
558	372	2	-1	0	-1	for ( n = 1 ; n < gf2 _ dim ; n ++ ) {	EMPTY	EMPTY
558	373	2	-1	0	-1	odd [ n ] = row ;	odd	EMPTY
558	374	2	-1	0	-1	row <<= 1 ;	EMPTY	EMPTY
558	375	3	-1	0	-1	}	EMPTY	EMPTY
558	378	1	1	1	1	gf2 _ matrix _ square ( even , odd )	gf2 _ matrix _ square even odd	EMPTY
558	381	1	1	1	1	gf2 _ matrix _ square ( odd , even )	gf2 _ matrix _ square odd even	EMPTY
558	385	1	1	1	-1	do {	EMPTY	EMPTY
558	387	2	-1	1	-1	gf2 _ matrix _ square ( even , odd )	gf2 _ matrix _ square even odd	EMPTY
558	388	2	-1	0	-1	if ( len2 & 1 )	EMPTY	EMPTY
558	389	2	-1	0	-1	crc1 = gf2 _ matrix _ times ( even , crc1 )	gf2 _ matrix _ times even	EMPTY
558	390	3	-1	0	-1	len2 >>= 1	EMPTY	EMPTY
558	393	1	1	1	1	if ( len2 == 0 )	EMPTY	EMPTY
558	394	3	-1	0	-1	break	EMPTY	EMPTY
558	397	1	1	1	1	gf2 _ matrix _ square ( odd , even )	gf2 _ matrix _ square odd even	EMPTY
558	398	2	-1	0	-1	if ( len2 & 1 )	EMPTY	EMPTY
558	399	2	-1	0	-1	crc1 = gf2 _ matrix _ times ( odd , crc1 )	gf2 _ matrix _ times odd	EMPTY
558	400	3	-1	0	-1	len2 >>= 1	EMPTY	EMPTY
558	403	1	1	1	-1	}	EMPTY	EMPTY
558	406	1	1	1	-1	crc1 ^= crc2	EMPTY	EMPTY
558	407	2	-1	0	-1	return crc1	EMPTY	EMPTY
558	408	3	-1	0	-1	}	EMPTY	EMPTY
558	411	1	0	0	-1	ulong zexport crc32 _ combine ( crc1  crc2  len2 )	ulong crc32 _ combine	EMPTY
558	412	2	-1	0	-1	ulong crc1 ;	ulong	EMPTY
558	413	2	-1	0	-1	ulong crc2 ;	ulong	EMPTY
558	414	2	-1	0	-1	z _ off _ t len2 ;	EMPTY	EMPTY
558	415	2	-1	0	-1	{	EMPTY	EMPTY
558	416	2	-1	0	-1	return crc32 _ combine _  ( crc1 , crc2 , len2 )	crc32 _ combine _	EMPTY
558	417	3	-1	0	-1	}	EMPTY	EMPTY
558	419	1	0	0	-1	ulong zexport crc32 _ combine64 ( crc1  crc2  len2 )	ulong	EMPTY
558	420	2	-1	0	-1	ulong crc1 ;	ulong	EMPTY
558	421	2	-1	0	-1	ulong crc2 ;	ulong	EMPTY
558	422	2	-1	0	-1	z _ off64 _ t len2 ;	EMPTY	EMPTY
558	423	2	-1	0	-1	{	EMPTY	EMPTY
558	424	2	-1	0	-1	return crc32 _ combine _  ( crc1 , crc2 , len2 )	crc32 _ combine _	EMPTY
558	425	3	-1	0	-1	}	EMPTY	EMPTY
560	67	1	1	0	-1	void zlib _ internal inflate _ fast ( strm  start )	inflate _ fast strm start	EMPTY
560	68	2	-1	0	-1	z _ streamp strm ;	strm	EMPTY
560	69	2	-1	1	-1	unsigned start ;	start	EMPTY
560	70	2	-1	0	-1	{	EMPTY	EMPTY
560	71	2	-1	0	-1	struct inflate _ state far * state ;	inflate _ state state	EMPTY
560	72	2	-1	1	-1	unsigned char far * in ;	in	EMPTY
560	73	2	-1	1	-1	unsigned char far * last ;	last	EMPTY
560	74	2	-1	1	-1	unsigned char far * out ;	out	EMPTY
560	75	2	-1	1	-1	unsigned char far * beg ;	beg	EMPTY
560	76	2	-1	1	-1	unsigned char far * end ;	end	EMPTY
560	77	2	-1	0	-1	# ifdef inflate _ strict	EMPTY	EMPTY
560	78	2	-1	1	-1	unsigned dmax ;	dmax	EMPTY
560	79	2	-1	0	-1	# endif	EMPTY	EMPTY
560	80	2	-1	1	-1	unsigned wsize ;	wsize	EMPTY
560	81	2	-1	1	-1	unsigned whave ;	whave	EMPTY
560	82	2	-1	1	-1	unsigned wnext ;	wnext	EMPTY
560	83	2	-1	1	-1	unsigned char far * window ;	window	EMPTY
560	84	2	-1	1	-1	unsigned long hold ;	hold	EMPTY
560	85	2	-1	1	-1	unsigned bits ;	bits	EMPTY
560	86	2	-1	1	-1	code const far * lcode ;	code lcode	EMPTY
560	87	2	-1	1	-1	code const far * dcode ;	code dcode	EMPTY
560	88	2	-1	1	-1	unsigned lmask ;	lmask	EMPTY
560	89	2	-1	1	-1	unsigned dmask ;	dmask	EMPTY
560	90	2	-1	1	-1	code here ;	code here	EMPTY
560	91	3	-1	1	-1	unsigned op ;	op	EMPTY
560	93	1	1	1	1	unsigned len ;	len	EMPTY
560	94	2	-1	1	-1	unsigned dist ;	dist	EMPTY
560	95	3	-1	1	-1	unsigned char far * from ;	from	EMPTY
560	98	1	1	1	1	state = ( struct inflate _ state far * ) strm -> state	state inflate _ state strm state	EMPTY
560	99	2	-1	0	-1	in = strm -> next _ in - off ;	in strm next _ in	EMPTY
560	100	2	-1	0	-1	last = in + ( strm -> avail _ in - 5 )	last in strm avail _ in	EMPTY
560	101	2	-1	0	-1	out = strm -> next _ out - off ;	out strm next _ out	EMPTY
560	102	2	-1	0	-1	beg = out - ( start - strm -> avail _ out )	beg out start strm avail _ out	EMPTY
560	103	2	-1	0	-1	end = out + ( strm -> avail _ out - 257 )	end out strm avail _ out	EMPTY
560	104	2	-1	0	-1	# ifdef inflate _ strict	EMPTY	EMPTY
560	105	2	-1	0	-1	dmax = state -> dmax ;	dmax state dmax	EMPTY
560	106	2	-1	0	-1	# endif	EMPTY	EMPTY
560	107	2	-1	0	-1	wsize = state -> wsize	wsize state wsize	EMPTY
560	108	2	-1	0	-1	whave = state -> whave	whave state whave	EMPTY
560	109	2	-1	0	-1	wnext = state -> wnext	wnext state wnext	EMPTY
560	110	2	-1	0	-1	window = state -> window	window state window	EMPTY
560	111	2	-1	0	-1	hold = state -> hold	hold state hold	EMPTY
560	112	2	-1	0	-1	bits = state -> bits	bits state bits	EMPTY
560	113	2	-1	0	-1	lcode = state -> lencode	lcode state lencode	EMPTY
560	114	2	-1	0	-1	dcode = state -> distcode	dcode state distcode	EMPTY
560	115	2	-1	0	-1	lmask = ( 1u << state -> lenbits ) - 1	lmask state lenbits	EMPTY
560	116	3	-1	0	-1	dmask = ( 1u << state -> distbits ) - 1	dmask state distbits	EMPTY
560	120	1	1	1	-1	do {	EMPTY	EMPTY
560	121	2	-1	0	-1	if ( bits < 15 ) {	bits	EMPTY
560	122	2	-1	0	-1	hold += ( unsigned long ) ( pup ( in ) ) << bits ;	hold in bits	EMPTY
560	123	2	-1	0	-1	bits += 8 ;	bits	EMPTY
560	124	2	-1	0	-1	hold += ( unsigned long ) ( pup ( in ) ) << bits ;	hold in bits	EMPTY
560	125	2	-1	0	-1	bits += 8 ;	bits	EMPTY
560	126	2	-1	0	-1	}	EMPTY	EMPTY
560	127	2	-1	0	-1	here = lcode [ hold & lmask ]	here lcode hold lmask	EMPTY
560	128	2	-1	0	-1	dolen :	EMPTY	EMPTY
560	129	2	-1	0	-1	op = ( unsigned ) ( here . bits )	op here bits	EMPTY
560	130	2	-1	0	-1	hold >>= op	hold op	EMPTY
560	131	2	-1	0	-1	bits -= op	bits op	EMPTY
560	132	2	-1	0	-1	op = ( unsigned ) ( here . op )	op here op	EMPTY
560	133	2	-1	1	-1	if ( op == numconst ) {	op	EMPTY
560	134	2	-1	0	-1	tracevv ( ( stderr  here . val >= numconst && here . val < numconst ?	here val here val	EMPTY
560	135	2	-1	0	-1	strlit :	EMPTY	EMPTY
560	136	2	-1	0	-1	;	EMPTY	EMPTY
560	137	2	-1	0	-1	pup ( out ) = ( unsigned char ) ( here . val ) ;	out here val	EMPTY
560	138	2	-1	0	-1	}	EMPTY	EMPTY
560	139	2	-1	1	-1	else if ( op & numconst ) {	op	EMPTY
560	140	2	-1	0	-1	len = ( unsigned ) ( here . val )	len here val	EMPTY
560	141	2	-1	1	-1	op &= 15	op	EMPTY
560	142	2	-1	0	-1	if ( op ) {	op	EMPTY
560	143	2	-1	0	-1	if ( bits < op ) {	bits op	EMPTY
560	144	2	-1	0	-1	hold += ( unsigned long ) ( pup ( in ) ) << bits ;	hold in bits	EMPTY
560	145	2	-1	0	-1	bits += 8 ;	bits	EMPTY
560	146	2	-1	0	-1	}	EMPTY	EMPTY
560	147	2	-1	0	-1	len += ( unsigned ) hold & ( ( 1u << op ) - 1 ) ;	len hold op	EMPTY
560	148	2	-1	0	-1	hold >>= op ;	hold op	EMPTY
560	149	3	-1	0	-1	bits -= op ;	bits op	EMPTY
560	150	1	1	0	-1	}	EMPTY	EMPTY
560	151	2	-1	0	-1	;	EMPTY	EMPTY
560	152	2	-1	0	-1	if ( bits < 15 ) {	bits	EMPTY
560	153	2	-1	0	-1	hold += ( unsigned long ) ( pup ( in ) ) << bits ;	hold in bits	EMPTY
560	154	2	-1	0	-1	bits += 8 ;	bits	EMPTY
560	155	2	-1	0	-1	hold += ( unsigned long ) ( pup ( in ) ) << bits ;	hold in bits	EMPTY
560	156	2	-1	0	-1	bits += 8 ;	bits	EMPTY
560	157	2	-1	0	-1	}	EMPTY	EMPTY
560	158	2	-1	0	-1	here = dcode [ hold & dmask ]	here dcode hold dmask	EMPTY
560	159	2	-1	0	-1	dodist :	EMPTY	EMPTY
560	160	2	-1	0	-1	op = ( unsigned ) ( here . bits )	op here bits	EMPTY
560	161	2	-1	0	-1	hold >>= op	hold op	EMPTY
560	162	2	-1	0	-1	bits -= op	bits op	EMPTY
560	163	2	-1	0	-1	op = ( unsigned ) ( here . op )	op here op	EMPTY
560	164	2	-1	1	-1	if ( op & numconst ) {	op	EMPTY
560	165	2	-1	0	-1	dist = ( unsigned ) ( here . val )	dist here val	EMPTY
560	166	2	-1	1	-1	op &= 15	op	EMPTY
560	167	2	-1	0	-1	if ( bits < op ) {	bits op	EMPTY
560	168	2	-1	0	-1	hold += ( unsigned long ) ( pup ( in ) ) << bits ;	hold in bits	EMPTY
560	169	2	-1	0	-1	bits += 8 ;	bits	EMPTY
560	170	2	-1	0	-1	if ( bits < op ) {	bits op	EMPTY
560	171	2	-1	0	-1	hold += ( unsigned long ) ( pup ( in ) ) << bits ;	hold in bits	EMPTY
560	172	2	-1	0	-1	bits += 8 ;	bits	EMPTY
560	173	2	-1	0	-1	}	EMPTY	EMPTY
560	174	2	-1	0	-1	}	EMPTY	EMPTY
560	175	2	-1	0	-1	dist += ( unsigned ) hold & ( ( 1u << op ) - 1 )	dist hold op	EMPTY
560	176	2	-1	0	-1	# ifdef inflate _ strict	EMPTY	EMPTY
560	177	2	-1	0	-1	if ( dist > dmax ) {	dist dmax	EMPTY
560	178	2	-1	0	-1	strm -> msg = ( char * ) strlit ;	strm msg	EMPTY
560	179	3	-1	0	-1	state -> mode = bad ;	state mode bad	EMPTY
560	180	1	1	0	-1	break ;	EMPTY	EMPTY
560	181	2	-1	0	-1	}	EMPTY	EMPTY
560	182	2	-1	0	-1	# endif	EMPTY	EMPTY
560	183	2	-1	0	-1	hold >>= op	hold op	EMPTY
560	184	2	-1	0	-1	bits -= op	bits op	EMPTY
560	185	2	-1	0	-1	;	EMPTY	EMPTY
560	186	2	-1	1	-1	op = ( unsigned ) ( out - beg )	op out beg	EMPTY
560	187	2	-1	1	-1	if ( dist > op ) {	dist op	EMPTY
560	188	2	-1	1	-1	op = dist - op	op dist op	EMPTY
560	189	2	-1	0	-1	if ( op > whave ) {	op whave	EMPTY
560	190	2	-1	0	-1	if ( state -> sane ) {	state sane	EMPTY
560	191	2	-1	0	-1	strm -> msg =	strm msg	EMPTY
560	192	2	-1	0	-1	( char * )  " invalid distance too far back "  ;	EMPTY	EMPTY
560	193	2	-1	0	-1	state -> mode = bad ;	state mode bad	EMPTY
560	194	2	-1	0	-1	break ;	EMPTY	EMPTY
560	195	2	-1	0	-1	}	EMPTY	EMPTY
560	196	2	-1	0	-1	# ifdef inflate _ allow _ invalid _ distance _ toofar _ arrr	EMPTY	EMPTY
560	197	2	-1	0	-1	if ( len <= op - whave ) {	len op whave	EMPTY
560	198	2	-1	0	-1	do {	EMPTY	EMPTY
560	199	2	-1	0	-1	pup ( out ) = 0 ;	out	EMPTY
560	200	2	-1	0	-1	} while ( -- len ) ;	len	EMPTY
560	201	2	-1	0	-1	continue ;	EMPTY	EMPTY
560	202	2	-1	0	-1	}	EMPTY	EMPTY
560	203	2	-1	0	-1	len -= op - whave ;	len op whave	EMPTY
560	204	2	-1	0	-1	do {	EMPTY	EMPTY
560	205	2	-1	0	-1	pup ( out ) = 0 ;	out	EMPTY
560	206	2	-1	0	-1	} while ( -- op > whave ) ;	op whave	EMPTY
560	207	2	-1	0	-1	if ( op == 0 ) {	op	EMPTY
560	208	2	-1	0	-1	from = out - dist ;	from out dist	EMPTY
560	209	3	-1	0	-1	do {	EMPTY	EMPTY
560	210	1	1	0	-1	pup ( out ) = pup ( from ) ;	out from	EMPTY
560	211	2	-1	0	-1	} while ( -- len ) ;	len	EMPTY
560	212	2	-1	0	-1	continue ;	EMPTY	EMPTY
560	213	2	-1	0	-1	}	EMPTY	EMPTY
560	214	2	-1	0	-1	# endif	EMPTY	EMPTY
560	215	2	-1	0	-1	}	EMPTY	EMPTY
560	216	2	-1	0	-1	from = window - off ;	from window	EMPTY
560	217	2	-1	1	-1	if ( wnext == numconst ) {	wnext	EMPTY
560	218	2	-1	0	-1	from += wsize - op	from wsize op	EMPTY
560	219	2	-1	1	-1	if ( op < len ) {	op len	EMPTY
560	220	2	-1	0	-1	len -= op	len op	EMPTY
560	221	2	-1	0	-1	do {	EMPTY	EMPTY
560	222	2	-1	0	-1	pup ( out ) = pup ( from ) ;	out from	EMPTY
560	223	2	-1	0	-1	} while ( -- op )	op	EMPTY
560	224	2	-1	1	-1	from = out - dist	from out dist	EMPTY
560	225	2	-1	0	-1	}	EMPTY	EMPTY
560	226	2	-1	0	-1	}	EMPTY	EMPTY
560	227	2	-1	1	-1	else if ( wnext < op ) {	wnext op	EMPTY
560	228	2	-1	0	-1	from += wsize + wnext - op	from wsize wnext op	EMPTY
560	229	2	-1	0	-1	op -= wnext	op wnext	EMPTY
560	230	2	-1	1	-1	if ( op < len ) {	op len	EMPTY
560	231	2	-1	0	-1	len -= op	len op	EMPTY
560	232	2	-1	0	-1	do {	EMPTY	EMPTY
560	233	2	-1	0	-1	pup ( out ) = pup ( from ) ;	out from	EMPTY
560	234	2	-1	0	-1	} while ( -- op )	op	EMPTY
560	235	2	-1	0	-1	from = window - off ;	from window	EMPTY
560	236	2	-1	1	-1	if ( wnext < len ) {	wnext len	EMPTY
560	237	2	-1	0	-1	op = wnext	op wnext	EMPTY
560	238	2	-1	0	-1	len -= op	len op	EMPTY
560	239	3	-1	0	-1	do {	EMPTY	EMPTY
560	240	1	1	0	-1	pup ( out ) = pup ( from ) ;	out from	EMPTY
560	241	2	-1	0	-1	} while ( -- op )	op	EMPTY
560	242	2	-1	1	-1	from = out - dist	from out dist	EMPTY
560	243	2	-1	0	-1	}	EMPTY	EMPTY
560	244	2	-1	0	-1	}	EMPTY	EMPTY
560	245	2	-1	0	-1	}	EMPTY	EMPTY
560	246	2	-1	1	-1	else {	EMPTY	EMPTY
560	247	2	-1	0	-1	from += wnext - op	from wnext op	EMPTY
560	248	2	-1	1	-1	if ( op < len ) {	op len	EMPTY
560	249	2	-1	0	-1	len -= op	len op	EMPTY
560	250	2	-1	0	-1	do {	EMPTY	EMPTY
560	251	2	-1	0	-1	pup ( out ) = pup ( from ) ;	out from	EMPTY
560	252	2	-1	0	-1	} while ( -- op )	op	EMPTY
560	253	2	-1	1	-1	from = out - dist	from out dist	EMPTY
560	254	2	-1	0	-1	}	EMPTY	EMPTY
560	255	2	-1	0	-1	}	EMPTY	EMPTY
560	256	2	-1	0	-1	while ( len > numconst ) {	len	EMPTY
560	257	2	-1	0	-1	pup ( out ) = pup ( from ) ;	out from	EMPTY
560	258	2	-1	0	-1	pup ( out ) = pup ( from ) ;	out from	EMPTY
560	259	2	-1	0	-1	pup ( out ) = pup ( from ) ;	out from	EMPTY
560	260	2	-1	0	-1	len -= numconst ;	len	EMPTY
560	261	2	-1	0	-1	}	EMPTY	EMPTY
560	262	2	-1	0	-1	if ( len ) {	len	EMPTY
560	263	2	-1	0	-1	pup ( out ) = pup ( from ) ;	out from	EMPTY
560	264	2	-1	0	-1	if ( len > numconst )	len	EMPTY
560	265	2	-1	0	-1	pup ( out ) = pup ( from ) ;	out from	EMPTY
560	266	2	-1	0	-1	}	EMPTY	EMPTY
560	267	2	-1	0	-1	}	EMPTY	EMPTY
560	268	2	-1	0	-1	else {	EMPTY	EMPTY
560	269	3	-1	1	-1	from = out - dist ;	from out dist	EMPTY
560	270	1	1	1	-1	do {	EMPTY	EMPTY
560	271	2	-1	0	-1	pup ( out ) = pup ( from ) ;	out from	EMPTY
560	272	2	-1	0	-1	pup ( out ) = pup ( from ) ;	out from	EMPTY
560	273	2	-1	0	-1	pup ( out ) = pup ( from ) ;	out from	EMPTY
560	274	2	-1	0	-1	len -= 3	len	EMPTY
560	275	2	-1	0	-1	} while ( len > numconst ) ;	len	EMPTY
560	276	2	-1	0	-1	if ( len ) {	len	EMPTY
560	277	2	-1	0	-1	pup ( out ) = pup ( from ) ;	out from	EMPTY
560	278	2	-1	0	-1	if ( len > numconst )	len	EMPTY
560	279	2	-1	0	-1	pup ( out ) = pup ( from ) ;	out from	EMPTY
560	280	2	-1	0	-1	}	EMPTY	EMPTY
560	281	2	-1	0	-1	}	EMPTY	EMPTY
560	282	2	-1	0	-1	}	EMPTY	EMPTY
560	283	2	-1	1	-1	else if ( ( op & numconst ) == numconst ) {	op	EMPTY
560	284	2	-1	0	-1	here = dcode [ here . val + ( hold & ( ( 1u << op ) - 1 ) ) ]	here dcode here val hold op	EMPTY
560	285	2	-1	0	-1	goto dodist	EMPTY	EMPTY
560	286	2	-1	0	-1	}	EMPTY	EMPTY
560	287	2	-1	0	-1	else {	EMPTY	EMPTY
560	288	2	-1	0	-1	strm -> msg = ( char * ) strlit ;	strm msg	EMPTY
560	289	2	-1	0	-1	state -> mode = bad ;	state mode bad	EMPTY
560	290	2	-1	0	-1	break ;	EMPTY	EMPTY
560	291	2	-1	0	-1	}	EMPTY	EMPTY
560	292	2	-1	0	-1	}	EMPTY	EMPTY
560	293	2	-1	1	-1	else if ( ( op & numconst ) == numconst ) {	op	EMPTY
560	294	2	-1	0	-1	here = lcode [ here . val + ( hold & ( ( 1u << op ) - 1 ) ) ]	here lcode here val hold op	EMPTY
560	295	2	-1	0	-1	goto dolen	EMPTY	EMPTY
560	296	2	-1	0	-1	}	EMPTY	EMPTY
560	297	2	-1	1	-1	else if ( op & numconst ) {	op	EMPTY
560	298	2	-1	0	-1	;	EMPTY	EMPTY
560	299	3	-1	0	-1	state -> mode = type	state mode type	EMPTY
560	300	1	0	0	-1	break	EMPTY	EMPTY
560	301	2	-1	0	-1	}	EMPTY	EMPTY
560	302	2	-1	0	-1	else {	EMPTY	EMPTY
560	303	2	-1	0	-1	strm -> msg = ( char * ) strlit ;	strm msg	EMPTY
560	304	2	-1	0	-1	state -> mode = bad ;	state mode bad	EMPTY
560	305	2	-1	0	-1	break ;	EMPTY	EMPTY
560	306	2	-1	0	-1	}	EMPTY	EMPTY
560	307	3	-1	0	-1	}	EMPTY	EMPTY
560	310	1	1	1	-1	len = bits >> 3	len bits	EMPTY
560	311	2	-1	0	-1	in -= len	in len	EMPTY
560	312	2	-1	0	-1	bits -= len << 3	bits len	EMPTY
560	313	3	-1	0	-1	hold &= ( 1u << bits ) - 1	hold bits	EMPTY
560	316	1	1	1	-1	strm -> next _ in = in + off ;	strm next _ in in	EMPTY
560	317	2	-1	0	-1	strm -> next _ out = out + off ;	strm next _ out out	EMPTY
560	318	2	-1	0	-1	strm -> avail _ in = ( unsigned ) ( in < last ? 5 + ( last - in ) : 5 - ( in - last ) )	strm avail _ in in last last in in last	EMPTY
560	319	2	-1	0	-1	strm -> avail _ out = ( unsigned ) ( out < end ?	strm avail _ out out end	EMPTY
560	320	2	-1	0	-1	257 + ( end - out ) : 257 - ( out - end ) )	end out out end	EMPTY
560	321	2	-1	0	-1	state -> hold = hold	state hold hold	EMPTY
560	322	2	-1	0	-1	state -> bits = bits	state bits bits	EMPTY
560	323	2	-1	0	-1	return	EMPTY	EMPTY
560	324	3	-1	0	-1	}	EMPTY	EMPTY
560	340	1	1	1	-1	# endif	EMPTY	EMPTY
566	12	1	0	0	-1	local ulong adler32 _ combine _  of ( ( ulong adler1  ulong adler2  z _ off64 _ t len2 ) ) ;	ulong adler32 _ combine _  ulong ulong	EMPTY
566	14	1	1	1	-1	# define base numconst	EMPTY	EMPTY
566	15	3	-1	0	-1	# define nmax numconst	EMPTY	EMPTY
566	18	1	1	1	-1	# define do1 ( buf  i ) { adler += ( buf ) [ i ] ; sum2 += adler ; }	adler adler	EMPTY
566	19	2	-1	0	-1	# define do2 ( buf  i ) do1 ( buf  i ) ; do1 ( buf  i + numconst ) ;	EMPTY	EMPTY
566	20	2	-1	0	-1	# define do4 ( buf  i ) do2 ( buf  i ) ; do2 ( buf  i + numconst ) ;	EMPTY	EMPTY
566	21	2	-1	0	-1	# define do8 ( buf  i ) do4 ( buf  i ) ; do4 ( buf  i + numconst ) ;	EMPTY	EMPTY
566	22	3	-1	0	-1	# define do16 ( buf ) do8 ( buf  numconst ) ; do8 ( buf  numconst ) ;	EMPTY	EMPTY
566	26	1	1	1	-1	# ifdef no _ divide	EMPTY	EMPTY
566	29	2	-1	1	-1	# define chop ( a ) do	EMPTY	EMPTY
566	30	2	-1	0	-1	do { unsigned	EMPTY	EMPTY
566	31	2	-1	0	-1	unsigned long tmp = a >> numconst ; a	EMPTY	EMPTY
566	32	2	-1	0	-1	a &= numconst ; a	EMPTY	EMPTY
566	33	2	-1	0	-1	a += ( tmp << numconst ) - tmp ; \\	EMPTY	EMPTY
566	34	2	-1	0	-1	} while ( numconst )	EMPTY	EMPTY
566	35	2	-1	0	-1	# define mod28 ( a ) do	EMPTY	EMPTY
566	36	2	-1	0	-1	do { chop	EMPTY	EMPTY
566	37	2	-1	0	-1	chop ( a ) ; if	EMPTY	EMPTY
566	38	2	-1	0	-1	if ( a >= base ) a -= base ; \\	EMPTY	EMPTY
566	39	2	-1	0	-1	} while ( numconst )	EMPTY	EMPTY
566	40	2	-1	0	-1	# define mod ( a ) do	EMPTY	EMPTY
566	41	2	-1	0	-1	do { chop	EMPTY	EMPTY
566	42	2	-1	0	-1	chop ( a ) ; mod28	EMPTY	EMPTY
566	43	2	-1	0	-1	mod28 ( a ) ; \\	EMPTY	EMPTY
566	44	2	-1	0	-1	} while ( numconst )	EMPTY	EMPTY
566	45	2	-1	0	-1	# define mod63 ( a ) do	EMPTY	EMPTY
566	46	2	-1	1	-1	do { z _ off64 _ t	EMPTY	EMPTY
566	47	2	-1	0	-1	z _ off64 _ t tmp = a >> numconst ; a	EMPTY	EMPTY
566	48	2	-1	0	-1	a &= numconst ; a	EMPTY	EMPTY
566	49	2	-1	0	-1	a += ( tmp << numconst ) - ( tmp << numconst ) + tmp ; tmp	EMPTY	EMPTY
566	50	2	-1	0	-1	tmp = a >> numconst ; a	EMPTY	EMPTY
566	51	2	-1	0	-1	a &= numconst ; a	EMPTY	EMPTY
566	52	2	-1	0	-1	a += ( tmp << numconst ) - tmp ; tmp	EMPTY	EMPTY
566	53	2	-1	0	-1	tmp = a >> numconst ; a	EMPTY	EMPTY
566	54	2	-1	0	-1	a &= numconst ; a	EMPTY	EMPTY
566	55	2	-1	0	-1	a += ( tmp << numconst ) - tmp ; if	EMPTY	EMPTY
566	56	2	-1	0	-1	if ( a >= base ) a -= base ; \\	EMPTY	EMPTY
566	57	3	-1	0	-1	} while ( numconst )	EMPTY	EMPTY
566	58	1	0	0	-1	# else	EMPTY	EMPTY
566	59	2	-1	0	-1	# define mod ( a ) a %= base	EMPTY	EMPTY
566	60	2	-1	0	-1	# define mod28 ( a ) a %= base	EMPTY	EMPTY
566	61	2	-1	0	-1	# define mod63 ( a ) a %= base	EMPTY	EMPTY
566	62	3	-1	0	-1	# endif	EMPTY	EMPTY
566	65	1	0	0	-1	ulong zexport adler32 ( adler  buf  len )	ulong adler32 adler	EMPTY
566	66	2	-1	0	-1	ulong adler ;	ulong adler	EMPTY
566	67	2	-1	0	-1	const bytef * buf ;	EMPTY	EMPTY
566	68	2	-1	0	-1	uint len ;	uint	EMPTY
566	69	2	-1	0	-1	{	EMPTY	EMPTY
566	70	2	-1	0	-1	unsigned long sum2 ;	EMPTY	EMPTY
566	71	3	-1	0	-1	unsigned n ;	EMPTY	EMPTY
566	74	1	1	1	-1	sum2 = ( adler >> 16 ) & 0xffff	adler	EMPTY
566	75	3	-1	0	-1	adler &= 0xffff	adler	EMPTY
566	78	1	1	1	1	if ( len == 1 ) {	EMPTY	EMPTY
566	79	2	-1	0	-1	adler += buf [ 0 ] ;	adler	EMPTY
566	80	2	-1	0	-1	if ( adler >= base )	adler	EMPTY
566	81	2	-1	0	-1	adler -= base ;	adler	EMPTY
566	82	2	-1	0	-1	sum2 += adler ;	adler	EMPTY
566	83	2	-1	0	-1	if ( sum2 >= base )	EMPTY	EMPTY
566	84	2	-1	0	-1	sum2 -= base ;	EMPTY	EMPTY
566	85	2	-1	0	-1	return adler | ( sum2 << 16 ) ;	adler	EMPTY
566	86	3	-1	0	-1	}	EMPTY	EMPTY
566	89	1	1	1	1	if ( buf == z _ null )	EMPTY	EMPTY
566	90	3	-1	0	-1	return 1l	EMPTY	EMPTY
566	93	1	1	1	1	if ( len < numconst ) {	EMPTY	EMPTY
566	94	2	-1	0	-1	while ( len -- ) {	EMPTY	EMPTY
566	95	2	-1	0	-1	adler += * buf ++ ;	adler	EMPTY
566	96	2	-1	0	-1	sum2 += adler ;	adler	EMPTY
566	97	2	-1	0	-1	}	EMPTY	EMPTY
566	98	2	-1	0	-1	if ( adler >= base )	adler	EMPTY
566	99	2	-1	0	-1	adler -= base ;	adler	EMPTY
566	100	2	-1	1	-1	mod28 ( sum2 ) ;	EMPTY	EMPTY
566	101	2	-1	0	-1	return adler | ( sum2 << 16 )	adler	EMPTY
566	102	3	-1	0	-1	}	EMPTY	EMPTY
566	105	1	1	1	1	while ( len >= nmax ) {	EMPTY	EMPTY
566	106	2	-1	0	-1	len -= nmax ;	EMPTY	EMPTY
566	107	2	-1	1	-1	n = nmax / 16	EMPTY	EMPTY
566	108	2	-1	0	-1	do {	EMPTY	EMPTY
566	109	2	-1	1	-1	;	EMPTY	EMPTY
566	110	2	-1	0	-1	buf += 16	EMPTY	EMPTY
566	111	2	-1	0	-1	} while ( -- n ) ;	EMPTY	EMPTY
566	112	2	-1	0	-1	mod ( adler ) ;	adler	EMPTY
566	113	2	-1	0	-1	mod ( sum2 ) ;	EMPTY	EMPTY
566	114	3	-1	0	-1	}	EMPTY	EMPTY
566	117	1	1	1	1	if ( len ) {	EMPTY	EMPTY
566	118	2	-1	0	-1	while ( len >= 16 ) {	EMPTY	EMPTY
566	119	2	-1	0	-1	len -= 16 ;	EMPTY	EMPTY
566	120	2	-1	0	-1	do16 ( buf ) ;	EMPTY	EMPTY
566	121	2	-1	0	-1	buf += 16 ;	EMPTY	EMPTY
566	122	2	-1	0	-1	}	EMPTY	EMPTY
566	123	2	-1	0	-1	while ( len -- ) {	EMPTY	EMPTY
566	124	2	-1	0	-1	adler += * buf ++ ;	adler	EMPTY
566	125	2	-1	0	-1	sum2 += adler ;	adler	EMPTY
566	126	2	-1	0	-1	}	EMPTY	EMPTY
566	127	2	-1	0	-1	mod ( adler ) ;	adler	EMPTY
566	128	2	-1	0	-1	mod ( sum2 ) ;	EMPTY	EMPTY
566	129	3	-1	0	-1	}	EMPTY	EMPTY
566	132	1	1	1	1	return adler | ( sum2 << 16 )	adler	EMPTY
566	133	3	-1	0	-1	}	EMPTY	EMPTY
566	136	1	0	0	-1	local ulong adler32 _ combine _  ( adler1  adler2  len2 )	ulong adler32 _ combine _	EMPTY
566	137	2	-1	0	-1	ulong adler1 ;	ulong	EMPTY
566	138	2	-1	0	-1	ulong adler2 ;	ulong	EMPTY
566	139	2	-1	0	-1	z _ off64 _ t len2 ;	EMPTY	EMPTY
566	140	2	-1	0	-1	{	EMPTY	EMPTY
566	141	2	-1	0	-1	unsigned long sum1 ;	EMPTY	EMPTY
566	142	2	-1	0	-1	unsigned long sum2 ;	EMPTY	EMPTY
566	143	3	-1	0	-1	unsigned rem ;	EMPTY	EMPTY
566	146	1	1	1	1	if ( len2 < 0 )	EMPTY	EMPTY
566	147	3	-1	0	-1	return 0xfffffffful	EMPTY	EMPTY
566	150	1	1	1	-1	mod63 ( len2 ) ;	EMPTY	EMPTY
566	151	2	-1	0	-1	rem = ( unsigned ) len2	EMPTY	EMPTY
566	152	2	-1	0	-1	sum1 = adler1 & 0xffff	EMPTY	EMPTY
566	153	2	-1	0	-1	sum2 = rem * sum1	EMPTY	EMPTY
566	154	2	-1	0	-1	mod ( sum2 ) ;	EMPTY	EMPTY
566	155	2	-1	0	-1	sum1 += ( adler2 & 0xffff ) + base - 1	EMPTY	EMPTY
566	156	2	-1	0	-1	sum2 += ( ( adler1 >> 16 ) & 0xffff ) + ( ( adler2 >> 16 ) & 0xffff ) + base - rem	EMPTY	EMPTY
566	157	2	-1	0	-1	if ( sum1 >= base ) sum1 -= base ;	EMPTY	EMPTY
566	158	2	-1	0	-1	if ( sum1 >= base ) sum1 -= base ;	EMPTY	EMPTY
566	159	2	-1	0	-1	if ( sum2 >= ( base << 1 ) ) sum2 -= ( base << 1 )	EMPTY	EMPTY
566	160	2	-1	0	-1	if ( sum2 >= base ) sum2 -= base ;	EMPTY	EMPTY
566	161	2	-1	0	-1	return sum1 | ( sum2 << 16 )	EMPTY	EMPTY
566	162	3	-1	0	-1	}	EMPTY	EMPTY
566	165	1	0	0	-1	ulong zexport adler32 _ combine ( adler1  adler2  len2 )	ulong adler32 _ combine	EMPTY
566	166	2	-1	0	-1	ulong adler1 ;	ulong	EMPTY
566	167	2	-1	0	-1	ulong adler2 ;	ulong	EMPTY
566	168	2	-1	0	-1	z _ off _ t len2 ;	EMPTY	EMPTY
566	169	2	-1	0	-1	{	EMPTY	EMPTY
566	170	2	-1	0	-1	return adler32 _ combine _  ( adler1 , adler2 , len2 )	adler32 _ combine _	EMPTY
566	171	3	-1	0	-1	}	EMPTY	EMPTY
566	173	1	0	0	-1	ulong zexport adler32 _ combine64 ( adler1  adler2  len2 )	ulong	EMPTY
566	174	2	-1	0	-1	ulong adler1 ;	ulong	EMPTY
566	175	2	-1	0	-1	ulong adler2 ;	ulong	EMPTY
566	176	2	-1	0	-1	z _ off64 _ t len2 ;	EMPTY	EMPTY
566	177	2	-1	0	-1	{	EMPTY	EMPTY
566	178	2	-1	0	-1	return adler32 _ combine _  ( adler1 , adler2 , len2 )	adler32 _ combine _	EMPTY
566	179	3	-1	0	-1	}	EMPTY	EMPTY
570	25	1	0	0	0	struct {	EMPTY	EMPTY
570	26	3	-1	0	-1	struct jpeg _ color _ deconverter pub ;	jpeg _ color _ deconverter pub	EMPTY
570	29	1	1	1	1	int * cr _ r _ tab ;	cr _ r _ tab	EMPTY
570	30	2	-1	1	-1	int * cb _ b _ tab ;	cb _ b _ tab	EMPTY
570	31	2	-1	1	-1	int32 * cr _ g _ tab ;	cr _ g _ tab	EMPTY
570	32	3	-1	1	-1	int32 * cb _ g _ tab ;	cb _ g _ tab	EMPTY
570	35	1	1	1	1	int32 * rgb _ y _ tab ;	rgb _ y _ tab	EMPTY
570	36	3	-1	0	-1	} my _ color _ deconverter ;	EMPTY	EMPTY
570	38	1	0	0	-1	typedef my _ color _ deconverter * my _ cconvert _ ptr ;	EMPTY	EMPTY
570	75	1	1	1	-1	# define scalebits numconst	EMPTY	EMPTY
570	76	2	-1	0	-1	# define one _ half ( ( int32 ) numconst << ( scalebits - numconst ) )	EMPTY	EMPTY
570	77	3	-1	0	-1	# define fix ( x ) ( ( int32 ) ( ( x ) * ( numconst << scalebits ) + numconst ) )	EMPTY	EMPTY
570	86	1	1	1	-1	# define r _ y _ off numconst	EMPTY	EMPTY
570	87	2	-1	1	-1	# define g _ y _ off ( numconst * ( maxjsample + numconst ) )	EMPTY	EMPTY
570	88	2	-1	1	-1	# define b _ y _ off ( numconst * ( maxjsample + numconst ) )	EMPTY	EMPTY
570	89	3	-1	0	-1	# define table _ size ( numconst * ( maxjsample + numconst ) )	EMPTY	EMPTY
570	94	1	1	1	-1	# include strlit	EMPTY	EMPTY
570	95	2	-1	0	-1	# undef rgb _ red	EMPTY	EMPTY
570	96	2	-1	0	-1	# undef rgb _ green	EMPTY	EMPTY
570	97	2	-1	0	-1	# undef rgb _ blue	EMPTY	EMPTY
570	98	3	-1	0	-1	# undef rgb _ pixelsize	EMPTY	EMPTY
570	100	1	0	0	-1	# define rgb _ red ext _ rgb _ red	EMPTY	EMPTY
570	101	2	-1	0	-1	# define rgb _ green ext _ rgb _ green	EMPTY	EMPTY
570	102	2	-1	0	-1	# define rgb _ blue ext _ rgb _ blue	EMPTY	EMPTY
570	103	2	-1	0	-1	# define rgb _ pixelsize ext _ rgb _ pixelsize	EMPTY	EMPTY
570	104	2	-1	0	-1	# define ycc _ rgb _ convert _ internal ycc _ extrgb _ convert _ internal	EMPTY	EMPTY
570	105	2	-1	0	-1	# define gray _ rgb _ convert _ internal gray _ extrgb _ convert _ internal	EMPTY	EMPTY
570	106	2	-1	0	-1	# define rgb _ rgb _ convert _ internal rgb _ extrgb _ convert _ internal	EMPTY	EMPTY
570	107	2	-1	0	-1	# include strlit	EMPTY	EMPTY
570	108	2	-1	0	-1	# undef rgb _ red	EMPTY	EMPTY
570	109	2	-1	0	-1	# undef rgb _ green	EMPTY	EMPTY
570	110	2	-1	0	-1	# undef rgb _ blue	EMPTY	EMPTY
570	111	2	-1	0	-1	# undef rgb _ pixelsize	EMPTY	EMPTY
570	112	2	-1	0	-1	# undef ycc _ rgb _ convert _ internal	EMPTY	EMPTY
570	113	2	-1	0	-1	# undef gray _ rgb _ convert _ internal	EMPTY	EMPTY
570	114	3	-1	0	-1	# undef rgb _ rgb _ convert _ internal	EMPTY	EMPTY
570	116	1	0	0	-1	# define rgb _ red ext _ rgbx _ red	EMPTY	EMPTY
570	117	2	-1	0	-1	# define rgb _ green ext _ rgbx _ green	EMPTY	EMPTY
570	118	2	-1	0	-1	# define rgb _ blue ext _ rgbx _ blue	EMPTY	EMPTY
570	119	2	-1	0	-1	# define rgb _ alpha numconst	EMPTY	EMPTY
570	120	2	-1	0	-1	# define rgb _ pixelsize ext _ rgbx _ pixelsize	EMPTY	EMPTY
570	121	2	-1	0	-1	# define ycc _ rgb _ convert _ internal ycc _ extrgbx _ convert _ internal	EMPTY	EMPTY
570	122	2	-1	0	-1	# define gray _ rgb _ convert _ internal gray _ extrgbx _ convert _ internal	EMPTY	EMPTY
570	123	2	-1	0	-1	# define rgb _ rgb _ convert _ internal rgb _ extrgbx _ convert _ internal	EMPTY	EMPTY
570	124	2	-1	0	-1	# include strlit	EMPTY	EMPTY
570	125	2	-1	0	-1	# undef rgb _ red	EMPTY	EMPTY
570	126	2	-1	0	-1	# undef rgb _ green	EMPTY	EMPTY
570	127	2	-1	0	-1	# undef rgb _ blue	EMPTY	EMPTY
570	128	2	-1	0	-1	# undef rgb _ alpha	EMPTY	EMPTY
570	129	2	-1	0	-1	# undef rgb _ pixelsize	EMPTY	EMPTY
570	130	2	-1	0	-1	# undef ycc _ rgb _ convert _ internal	EMPTY	EMPTY
570	131	2	-1	0	-1	# undef gray _ rgb _ convert _ internal	EMPTY	EMPTY
570	132	3	-1	0	-1	# undef rgb _ rgb _ convert _ internal	EMPTY	EMPTY
570	134	1	0	0	-1	# define rgb _ red ext _ bgr _ red	EMPTY	EMPTY
570	135	2	-1	0	-1	# define rgb _ green ext _ bgr _ green	EMPTY	EMPTY
570	136	2	-1	0	-1	# define rgb _ blue ext _ bgr _ blue	EMPTY	EMPTY
570	137	2	-1	0	-1	# define rgb _ pixelsize ext _ bgr _ pixelsize	EMPTY	EMPTY
570	138	2	-1	0	-1	# define ycc _ rgb _ convert _ internal ycc _ extbgr _ convert _ internal	EMPTY	EMPTY
570	139	2	-1	0	-1	# define gray _ rgb _ convert _ internal gray _ extbgr _ convert _ internal	EMPTY	EMPTY
570	140	2	-1	0	-1	# define rgb _ rgb _ convert _ internal rgb _ extbgr _ convert _ internal	EMPTY	EMPTY
570	141	2	-1	0	-1	# include strlit	EMPTY	EMPTY
570	142	2	-1	0	-1	# undef rgb _ red	EMPTY	EMPTY
570	143	2	-1	0	-1	# undef rgb _ green	EMPTY	EMPTY
570	144	2	-1	0	-1	# undef rgb _ blue	EMPTY	EMPTY
570	145	2	-1	0	-1	# undef rgb _ pixelsize	EMPTY	EMPTY
570	146	2	-1	0	-1	# undef ycc _ rgb _ convert _ internal	EMPTY	EMPTY
570	147	2	-1	0	-1	# undef gray _ rgb _ convert _ internal	EMPTY	EMPTY
570	148	3	-1	0	-1	# undef rgb _ rgb _ convert _ internal	EMPTY	EMPTY
570	150	1	0	0	-1	# define rgb _ red ext _ bgrx _ red	EMPTY	EMPTY
570	151	2	-1	0	-1	# define rgb _ green ext _ bgrx _ green	EMPTY	EMPTY
570	152	2	-1	0	-1	# define rgb _ blue ext _ bgrx _ blue	EMPTY	EMPTY
570	153	2	-1	0	-1	# define rgb _ alpha numconst	EMPTY	EMPTY
570	154	2	-1	0	-1	# define rgb _ pixelsize ext _ bgrx _ pixelsize	EMPTY	EMPTY
570	155	2	-1	0	-1	# define ycc _ rgb _ convert _ internal ycc _ extbgrx _ convert _ internal	EMPTY	EMPTY
570	156	2	-1	0	-1	# define gray _ rgb _ convert _ internal gray _ extbgrx _ convert _ internal	EMPTY	EMPTY
570	157	2	-1	0	-1	# define rgb _ rgb _ convert _ internal rgb _ extbgrx _ convert _ internal	EMPTY	EMPTY
570	158	2	-1	0	-1	# include strlit	EMPTY	EMPTY
570	159	2	-1	0	-1	# undef rgb _ red	EMPTY	EMPTY
570	160	2	-1	0	-1	# undef rgb _ green	EMPTY	EMPTY
570	161	2	-1	0	-1	# undef rgb _ blue	EMPTY	EMPTY
570	162	2	-1	0	-1	# undef rgb _ alpha	EMPTY	EMPTY
570	163	2	-1	0	-1	# undef rgb _ pixelsize	EMPTY	EMPTY
570	164	2	-1	0	-1	# undef ycc _ rgb _ convert _ internal	EMPTY	EMPTY
570	165	2	-1	0	-1	# undef gray _ rgb _ convert _ internal	EMPTY	EMPTY
570	166	3	-1	0	-1	# undef rgb _ rgb _ convert _ internal	EMPTY	EMPTY
570	168	1	0	0	-1	# define rgb _ red ext _ xbgr _ red	EMPTY	EMPTY
570	169	2	-1	0	-1	# define rgb _ green ext _ xbgr _ green	EMPTY	EMPTY
570	170	2	-1	0	-1	# define rgb _ blue ext _ xbgr _ blue	EMPTY	EMPTY
570	171	2	-1	0	-1	# define rgb _ alpha numconst	EMPTY	EMPTY
570	172	2	-1	0	-1	# define rgb _ pixelsize ext _ xbgr _ pixelsize	EMPTY	EMPTY
570	173	2	-1	0	-1	# define ycc _ rgb _ convert _ internal ycc _ extxbgr _ convert _ internal	EMPTY	EMPTY
570	174	2	-1	0	-1	# define gray _ rgb _ convert _ internal gray _ extxbgr _ convert _ internal	EMPTY	EMPTY
570	175	2	-1	0	-1	# define rgb _ rgb _ convert _ internal rgb _ extxbgr _ convert _ internal	EMPTY	EMPTY
570	176	2	-1	0	-1	# include strlit	EMPTY	EMPTY
570	177	2	-1	0	-1	# undef rgb _ red	EMPTY	EMPTY
570	178	2	-1	0	-1	# undef rgb _ green	EMPTY	EMPTY
570	179	2	-1	0	-1	# undef rgb _ blue	EMPTY	EMPTY
570	180	2	-1	0	-1	# undef rgb _ alpha	EMPTY	EMPTY
570	181	2	-1	0	-1	# undef rgb _ pixelsize	EMPTY	EMPTY
570	182	2	-1	0	-1	# undef ycc _ rgb _ convert _ internal	EMPTY	EMPTY
570	183	2	-1	0	-1	# undef gray _ rgb _ convert _ internal	EMPTY	EMPTY
570	184	3	-1	0	-1	# undef rgb _ rgb _ convert _ internal	EMPTY	EMPTY
570	186	1	0	0	-1	# define rgb _ red ext _ xrgb _ red	EMPTY	EMPTY
570	187	2	-1	0	-1	# define rgb _ green ext _ xrgb _ green	EMPTY	EMPTY
570	188	2	-1	0	-1	# define rgb _ blue ext _ xrgb _ blue	EMPTY	EMPTY
570	189	2	-1	0	-1	# define rgb _ alpha numconst	EMPTY	EMPTY
570	190	2	-1	0	-1	# define rgb _ pixelsize ext _ xrgb _ pixelsize	EMPTY	EMPTY
570	191	2	-1	0	-1	# define ycc _ rgb _ convert _ internal ycc _ extxrgb _ convert _ internal	EMPTY	EMPTY
570	192	2	-1	0	-1	# define gray _ rgb _ convert _ internal gray _ extxrgb _ convert _ internal	EMPTY	EMPTY
570	193	2	-1	0	-1	# define rgb _ rgb _ convert _ internal rgb _ extxrgb _ convert _ internal	EMPTY	EMPTY
570	194	2	-1	0	-1	# include strlit	EMPTY	EMPTY
570	195	2	-1	0	-1	# undef rgb _ red	EMPTY	EMPTY
570	196	2	-1	0	-1	# undef rgb _ green	EMPTY	EMPTY
570	197	2	-1	0	-1	# undef rgb _ blue	EMPTY	EMPTY
570	198	2	-1	0	-1	# undef rgb _ alpha	EMPTY	EMPTY
570	199	2	-1	0	-1	# undef rgb _ pixelsize	EMPTY	EMPTY
570	200	2	-1	0	-1	# undef ycc _ rgb _ convert _ internal	EMPTY	EMPTY
570	201	2	-1	0	-1	# undef gray _ rgb _ convert _ internal	EMPTY	EMPTY
570	202	3	-1	0	-1	# undef rgb _ rgb _ convert _ internal	EMPTY	EMPTY
570	209	1	1	1	-1	local ( void )	EMPTY	EMPTY
570	210	2	-1	0	-1	build _ ycc _ rgb _ table ( j _ decompress _ ptr cinfo )	cinfo	EMPTY
570	211	2	-1	0	-1	{	EMPTY	EMPTY
570	212	2	-1	0	-1	my _ cconvert _ ptr cconvert = ( my _ cconvert _ ptr ) cinfo -> cconvert ;	cinfo	EMPTY
570	213	2	-1	0	-1	int i ;	EMPTY	EMPTY
570	214	2	-1	0	-1	int32 x ;	EMPTY	EMPTY
570	215	3	-1	0	-1	shift _ temps	EMPTY	EMPTY
570	217	1	0	0	-1	cconvert -> cr _ r _ tab = ( int * )	cr _ r _ tab	EMPTY
570	218	2	-1	0	-1	( * cinfo -> mem -> alloc _ small ) ( ( j _ common _ ptr ) cinfo , jpool _ image ,	cinfo mem alloc _ small cinfo	EMPTY
570	219	2	-1	0	-1	( maxjsample + 1 ) * sizeof ( int ) )	EMPTY	EMPTY
570	220	2	-1	0	-1	cconvert -> cb _ b _ tab = ( int * )	cb _ b _ tab	EMPTY
570	221	2	-1	0	-1	( * cinfo -> mem -> alloc _ small ) ( ( j _ common _ ptr ) cinfo , jpool _ image ,	cinfo mem alloc _ small cinfo	EMPTY
570	222	2	-1	0	-1	( maxjsample + 1 ) * sizeof ( int ) )	EMPTY	EMPTY
570	223	2	-1	0	-1	cconvert -> cr _ g _ tab = ( int32 * )	cr _ g _ tab	EMPTY
570	224	2	-1	0	-1	( * cinfo -> mem -> alloc _ small ) ( ( j _ common _ ptr ) cinfo , jpool _ image ,	cinfo mem alloc _ small cinfo	EMPTY
570	225	2	-1	0	-1	( maxjsample + 1 ) * sizeof ( int32 ) )	EMPTY	EMPTY
570	226	2	-1	0	-1	cconvert -> cb _ g _ tab = ( int32 * )	cb _ g _ tab	EMPTY
570	227	2	-1	0	-1	( * cinfo -> mem -> alloc _ small ) ( ( j _ common _ ptr ) cinfo , jpool _ image ,	cinfo mem alloc _ small cinfo	EMPTY
570	228	3	-1	0	-1	( maxjsample + 1 ) * sizeof ( int32 ) )	EMPTY	EMPTY
570	230	1	1	0	1	for ( i = numconst  x = - centerjsample ; i <= maxjsample ; i ++  x ++ ) {	EMPTY	EMPTY
570	234	2	-1	1	-1	cconvert -> cr _ r _ tab [ i ] = ( int )	cr _ r _ tab	EMPTY
570	235	2	-1	0	-1	right _ shift ( fix ( numconst ) * x + one _ half  scalebits ) ;	EMPTY	EMPTY
570	237	2	-1	1	-1	cconvert -> cb _ b _ tab [ i ] = ( int )	cb _ b _ tab	EMPTY
570	238	2	-1	0	-1	right _ shift ( fix ( numconst ) * x + one _ half  scalebits ) ;	EMPTY	EMPTY
570	240	2	-1	1	-1	cconvert -> cr _ g _ tab [ i ] = ( - fix ( 0.71414 ) ) * x	cr _ g _ tab	EMPTY
570	243	2	-1	1	-1	cconvert -> cb _ g _ tab [ i ] = ( - fix ( numconst ) ) * x + one _ half ;	cb _ g _ tab	EMPTY
570	244	2	-1	0	-1	}	EMPTY	EMPTY
570	245	3	-1	0	-1	}	EMPTY	EMPTY
570	252	1	1	1	-1	methoddef ( void )	EMPTY	EMPTY
570	253	2	-1	0	-1	ycc _ rgb _ convert ( j _ decompress _ ptr cinfo	cinfo	EMPTY
570	254	2	-1	0	-1	jsampimage input _ buf  jdimension input _ row	jsampimage	EMPTY
570	255	2	-1	0	-1	jsamparray output _ buf  int num _ rows )	jsamparray	EMPTY
570	256	2	-1	0	-1	{	EMPTY	EMPTY
570	257	2	-1	0	-1	switch ( cinfo -> out _ color _ space ) {	cinfo out _ color _ space	EMPTY
570	258	2	-1	0	-1	case jcs _ ext _ rgb :	jcs _ ext _ rgb	EMPTY
570	259	2	-1	0	-1	ycc _ extrgb _ convert _ internal ( cinfo , input _ buf , input _ row , output _ buf ,	cinfo	EMPTY
570	260	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
570	261	2	-1	0	-1	break ;	EMPTY	EMPTY
570	262	2	-1	0	-1	case jcs _ ext _ rgbx :	jcs _ ext _ rgbx	EMPTY
570	263	2	-1	0	-1	case jcs _ ext _ rgba :	jcs _ ext _ rgba	EMPTY
570	264	2	-1	0	-1	ycc _ extrgbx _ convert _ internal ( cinfo , input _ buf , input _ row , output _ buf ,	cinfo	EMPTY
570	265	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
570	266	2	-1	0	-1	break ;	EMPTY	EMPTY
570	267	2	-1	0	-1	case jcs _ ext _ bgr :	jcs _ ext _ bgr	EMPTY
570	268	2	-1	0	-1	ycc _ extbgr _ convert _ internal ( cinfo , input _ buf , input _ row , output _ buf ,	cinfo	EMPTY
570	269	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
570	270	2	-1	0	-1	break ;	EMPTY	EMPTY
570	271	2	-1	0	-1	case jcs _ ext _ bgrx :	jcs _ ext _ bgrx	EMPTY
570	272	2	-1	0	-1	case jcs _ ext _ bgra :	jcs _ ext _ bgra	EMPTY
570	273	2	-1	0	-1	ycc _ extbgrx _ convert _ internal ( cinfo , input _ buf , input _ row , output _ buf ,	cinfo	EMPTY
570	274	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
570	275	2	-1	0	-1	break ;	EMPTY	EMPTY
570	276	2	-1	0	-1	case jcs _ ext _ xbgr :	jcs _ ext _ xbgr	EMPTY
570	277	2	-1	0	-1	case jcs _ ext _ abgr :	jcs _ ext _ abgr	EMPTY
570	278	2	-1	0	-1	ycc _ extxbgr _ convert _ internal ( cinfo , input _ buf , input _ row , output _ buf ,	cinfo	EMPTY
570	279	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
570	280	2	-1	0	-1	break ;	EMPTY	EMPTY
570	281	3	-1	0	-1	case jcs _ ext _ xrgb :	jcs _ ext _ xrgb	EMPTY
570	282	1	0	0	-1	case jcs _ ext _ argb :	jcs _ ext _ argb	EMPTY
570	283	2	-1	0	-1	ycc _ extxrgb _ convert _ internal ( cinfo , input _ buf , input _ row , output _ buf ,	cinfo	EMPTY
570	284	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
570	285	2	-1	0	-1	break ;	EMPTY	EMPTY
570	286	2	-1	0	-1	default :	EMPTY	EMPTY
570	287	2	-1	0	-1	ycc _ rgb _ convert _ internal ( cinfo , input _ buf , input _ row , output _ buf ,	cinfo	EMPTY
570	288	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
570	289	2	-1	0	-1	break ;	EMPTY	EMPTY
570	290	2	-1	0	-1	}	EMPTY	EMPTY
570	291	3	-1	0	-1	}	EMPTY	EMPTY
570	301	1	1	1	-1	local ( void )	EMPTY	EMPTY
570	302	2	-1	0	-1	build _ rgb _ y _ table ( j _ decompress _ ptr cinfo )	cinfo	EMPTY
570	303	2	-1	0	-1	{	EMPTY	EMPTY
570	304	2	-1	0	-1	my _ cconvert _ ptr cconvert = ( my _ cconvert _ ptr ) cinfo -> cconvert ;	cinfo	EMPTY
570	305	2	-1	0	-1	int32 * rgb _ y _ tab ;	rgb _ y _ tab	EMPTY
570	306	3	-1	0	-1	int32 i ;	EMPTY	EMPTY
570	309	1	1	1	-1	cconvert -> rgb _ y _ tab = rgb _ y _ tab = ( int32 * )	rgb _ y _ tab rgb _ y _ tab	EMPTY
570	310	2	-1	0	-1	( * cinfo -> mem -> alloc _ small ) ( ( j _ common _ ptr ) cinfo , jpool _ image ,	cinfo mem alloc _ small cinfo	EMPTY
570	311	3	-1	0	-1	( table _ size * sizeof ( int32 ) ) )	EMPTY	EMPTY
570	313	1	0	0	0	for ( i = 0 ; i <= maxjsample ; i ++ ) {	EMPTY	EMPTY
570	314	2	-1	0	-1	rgb _ y _ tab [ i + r _ y _ off ] = fix ( 0.29900 ) * i ;	rgb _ y _ tab	EMPTY
570	315	2	-1	0	-1	rgb _ y _ tab [ i + g _ y _ off ] = fix ( 0.58700 ) * i ;	rgb _ y _ tab	EMPTY
570	316	2	-1	0	-1	rgb _ y _ tab [ i + b _ y _ off ] = fix ( 0.11400 ) * i + one _ half ;	rgb _ y _ tab	EMPTY
570	317	2	-1	0	-1	}	EMPTY	EMPTY
570	318	3	-1	0	-1	}	EMPTY	EMPTY
570	325	1	1	1	-1	methoddef ( void )	EMPTY	EMPTY
570	326	2	-1	0	-1	rgb _ gray _ convert ( j _ decompress _ ptr cinfo	cinfo	EMPTY
570	327	2	-1	0	-1	jsampimage input _ buf  jdimension input _ row	jsampimage	EMPTY
570	328	2	-1	0	-1	jsamparray output _ buf  int num _ rows )	jsamparray	EMPTY
570	329	2	-1	0	-1	{	EMPTY	EMPTY
570	330	2	-1	0	-1	my _ cconvert _ ptr cconvert = ( my _ cconvert _ ptr ) cinfo -> cconvert ;	cinfo	EMPTY
570	331	2	-1	0	-1	register int r , g , b ;	b	EMPTY
570	332	2	-1	0	-1	register int32 * ctab = cconvert -> rgb _ y _ tab ;	rgb _ y _ tab	EMPTY
570	333	2	-1	0	-1	register jsamprow outptr ;	jsamprow	EMPTY
570	334	2	-1	0	-1	register jsamprow inptr0 , inptr1 , inptr2 ;	jsamprow	EMPTY
570	335	2	-1	0	-1	register jdimension col ;	EMPTY	EMPTY
570	336	3	-1	0	-1	jdimension num _ cols = cinfo -> output _ width ;	cinfo output _ width	EMPTY
570	338	1	1	0	1	while ( -- num _ rows >= numconst ) {	EMPTY	EMPTY
570	339	2	-1	0	-1	inptr0 = input _ buf [ 0 ] [ input _ row ]	EMPTY	EMPTY
570	340	2	-1	0	-1	inptr1 = input _ buf [ 1 ] [ input _ row ]	EMPTY	EMPTY
570	341	2	-1	0	-1	inptr2 = input _ buf [ 2 ] [ input _ row ]	EMPTY	EMPTY
570	342	2	-1	0	-1	input _ row ++	EMPTY	EMPTY
570	343	2	-1	0	-1	outptr = * output _ buf ++	EMPTY	EMPTY
570	344	2	-1	0	-1	for ( col = numconst ; col < num _ cols ; col ++ ) {	EMPTY	EMPTY
570	345	2	-1	0	-1	r = getjsample ( inptr0 [ col ] ) ;	EMPTY	EMPTY
570	346	2	-1	0	-1	g = getjsample ( inptr1 [ col ] ) ;	EMPTY	EMPTY
570	347	2	-1	0	-1	b = getjsample ( inptr2 [ col ] ) ;	b	EMPTY
570	349	2	-1	1	-1	outptr [ col ] = ( jsample )	EMPTY	EMPTY
570	350	2	-1	0	-1	( ( ctab [ r + r _ y _ off ] + ctab [ g + g _ y _ off ] + ctab [ b + b _ y _ off ] )	b	EMPTY
570	351	2	-1	0	-1	>> scalebits )	EMPTY	EMPTY
570	352	2	-1	0	-1	}	EMPTY	EMPTY
570	353	2	-1	0	-1	}	EMPTY	EMPTY
570	354	3	-1	0	-1	}	EMPTY	EMPTY
570	362	1	1	1	-1	methoddef ( void )	EMPTY	EMPTY
570	363	2	-1	0	-1	null _ convert ( j _ decompress _ ptr cinfo	cinfo	EMPTY
570	364	2	-1	0	-1	jsampimage input _ buf  jdimension input _ row	jsampimage	EMPTY
570	365	2	-1	0	-1	jsamparray output _ buf  int num _ rows )	jsamparray	EMPTY
570	366	2	-1	0	-1	{	EMPTY	EMPTY
570	367	2	-1	0	-1	register jsamprow inptr , inptr0 , inptr1 , inptr2 , inptr3 , outptr ;	jsamprow	EMPTY
570	368	2	-1	0	-1	register jdimension col ;	EMPTY	EMPTY
570	369	2	-1	0	-1	register int num _ components = cinfo -> num _ components ;	num _ components cinfo num _ components	EMPTY
570	370	2	-1	0	-1	jdimension num _ cols = cinfo -> output _ width ;	cinfo output _ width	EMPTY
570	371	3	-1	0	-1	int ci ;	EMPTY	EMPTY
570	373	1	0	0	0	if ( num _ components == 3 ) {	num _ components	EMPTY
570	374	2	-1	0	-1	while ( -- num _ rows >= 0 ) {	EMPTY	EMPTY
570	375	2	-1	0	-1	inptr0 = input _ buf [ 0 ] [ input _ row ] ;	EMPTY	EMPTY
570	376	2	-1	0	-1	inptr1 = input _ buf [ 1 ] [ input _ row ] ;	EMPTY	EMPTY
570	377	2	-1	0	-1	inptr2 = input _ buf [ 2 ] [ input _ row ] ;	EMPTY	EMPTY
570	378	2	-1	0	-1	input _ row ++ ;	EMPTY	EMPTY
570	379	2	-1	0	-1	outptr = * output _ buf ++ ;	EMPTY	EMPTY
570	380	2	-1	0	-1	for ( col = 0 ; col < num _ cols ; col ++ ) {	EMPTY	EMPTY
570	381	2	-1	0	-1	* outptr ++ = inptr0 [ col ] ;	EMPTY	EMPTY
570	382	2	-1	0	-1	* outptr ++ = inptr1 [ col ] ;	EMPTY	EMPTY
570	383	2	-1	0	-1	* outptr ++ = inptr2 [ col ] ;	EMPTY	EMPTY
570	384	2	-1	0	-1	}	EMPTY	EMPTY
570	385	2	-1	0	-1	}	EMPTY	EMPTY
570	386	2	-1	0	-1	} else if ( num _ components == 4 ) {	num _ components	EMPTY
570	387	2	-1	0	-1	while ( -- num _ rows >= 0 ) {	EMPTY	EMPTY
570	388	2	-1	0	-1	inptr0 = input _ buf [ 0 ] [ input _ row ] ;	EMPTY	EMPTY
570	389	2	-1	0	-1	inptr1 = input _ buf [ 1 ] [ input _ row ] ;	EMPTY	EMPTY
570	390	2	-1	0	-1	inptr2 = input _ buf [ 2 ] [ input _ row ] ;	EMPTY	EMPTY
570	391	2	-1	0	-1	inptr3 = input _ buf [ 3 ] [ input _ row ] ;	EMPTY	EMPTY
570	392	2	-1	0	-1	input _ row ++ ;	EMPTY	EMPTY
570	393	2	-1	0	-1	outptr = * output _ buf ++ ;	EMPTY	EMPTY
570	394	2	-1	0	-1	for ( col = 0 ; col < num _ cols ; col ++ ) {	EMPTY	EMPTY
570	395	2	-1	0	-1	* outptr ++ = inptr0 [ col ] ;	EMPTY	EMPTY
570	396	2	-1	0	-1	* outptr ++ = inptr1 [ col ] ;	EMPTY	EMPTY
570	397	2	-1	0	-1	* outptr ++ = inptr2 [ col ] ;	EMPTY	EMPTY
570	398	2	-1	0	-1	* outptr ++ = inptr3 [ col ] ;	EMPTY	EMPTY
570	399	2	-1	0	-1	}	EMPTY	EMPTY
570	400	2	-1	0	-1	}	EMPTY	EMPTY
570	401	2	-1	0	-1	} else {	EMPTY	EMPTY
570	402	3	-1	0	-1	while ( -- num _ rows >= 0 ) {	EMPTY	EMPTY
570	403	1	0	0	-1	for ( ci = 0 ; ci < num _ components ; ci ++ ) {	num _ components	EMPTY
570	404	2	-1	0	-1	inptr = input _ buf [ ci ] [ input _ row ] ;	EMPTY	EMPTY
570	405	2	-1	0	-1	outptr = * output _ buf ;	EMPTY	EMPTY
570	406	2	-1	0	-1	for ( col = 0 ; col < num _ cols ; col ++ ) {	EMPTY	EMPTY
570	407	2	-1	0	-1	outptr [ ci ] = inptr [ col ] ;	EMPTY	EMPTY
570	408	2	-1	0	-1	outptr += num _ components ;	num _ components	EMPTY
570	409	2	-1	0	-1	}	EMPTY	EMPTY
570	410	2	-1	0	-1	}	EMPTY	EMPTY
570	411	2	-1	0	-1	output _ buf ++ ;	EMPTY	EMPTY
570	412	2	-1	0	-1	input _ row ++ ;	EMPTY	EMPTY
570	413	2	-1	0	-1	}	EMPTY	EMPTY
570	414	2	-1	0	-1	}	EMPTY	EMPTY
570	415	3	-1	0	-1	}	EMPTY	EMPTY
570	424	1	1	1	-1	methoddef ( void )	EMPTY	EMPTY
570	425	2	-1	0	-1	grayscale _ convert ( j _ decompress _ ptr cinfo	cinfo	EMPTY
570	426	2	-1	0	-1	jsampimage input _ buf  jdimension input _ row	jsampimage	EMPTY
570	427	2	-1	0	-1	jsamparray output _ buf  int num _ rows )	jsamparray	EMPTY
570	428	2	-1	0	-1	{	EMPTY	EMPTY
570	429	2	-1	0	-1	jcopy _ sample _ rows ( input _ buf [ 0 ] , ( int ) input _ row , output _ buf , 0 ,	EMPTY	EMPTY
570	430	2	-1	0	-1	num _ rows , cinfo -> output _ width )	cinfo output _ width	EMPTY
570	431	3	-1	0	-1	}	EMPTY	EMPTY
570	438	1	1	1	-1	methoddef ( void )	EMPTY	EMPTY
570	439	2	-1	0	-1	gray _ rgb _ convert ( j _ decompress _ ptr cinfo	cinfo	EMPTY
570	440	2	-1	0	-1	jsampimage input _ buf  jdimension input _ row	jsampimage	EMPTY
570	441	2	-1	0	-1	jsamparray output _ buf  int num _ rows )	jsamparray	EMPTY
570	442	2	-1	0	-1	{	EMPTY	EMPTY
570	443	2	-1	0	-1	switch ( cinfo -> out _ color _ space ) {	cinfo out _ color _ space	EMPTY
570	444	2	-1	0	-1	case jcs _ ext _ rgb :	jcs _ ext _ rgb	EMPTY
570	445	2	-1	0	-1	gray _ extrgb _ convert _ internal ( cinfo , input _ buf , input _ row , output _ buf ,	cinfo	EMPTY
570	446	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
570	447	2	-1	0	-1	break ;	EMPTY	EMPTY
570	448	2	-1	0	-1	case jcs _ ext _ rgbx :	jcs _ ext _ rgbx	EMPTY
570	449	2	-1	0	-1	case jcs _ ext _ rgba :	jcs _ ext _ rgba	EMPTY
570	450	2	-1	0	-1	gray _ extrgbx _ convert _ internal ( cinfo , input _ buf , input _ row , output _ buf ,	cinfo	EMPTY
570	451	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
570	452	2	-1	0	-1	break ;	EMPTY	EMPTY
570	453	2	-1	0	-1	case jcs _ ext _ bgr :	jcs _ ext _ bgr	EMPTY
570	454	2	-1	0	-1	gray _ extbgr _ convert _ internal ( cinfo , input _ buf , input _ row , output _ buf ,	cinfo	EMPTY
570	455	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
570	456	2	-1	0	-1	break ;	EMPTY	EMPTY
570	457	2	-1	0	-1	case jcs _ ext _ bgrx :	jcs _ ext _ bgrx	EMPTY
570	458	2	-1	0	-1	case jcs _ ext _ bgra :	jcs _ ext _ bgra	EMPTY
570	459	2	-1	0	-1	gray _ extbgrx _ convert _ internal ( cinfo , input _ buf , input _ row , output _ buf ,	cinfo	EMPTY
570	460	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
570	461	2	-1	0	-1	break ;	EMPTY	EMPTY
570	462	2	-1	0	-1	case jcs _ ext _ xbgr :	jcs _ ext _ xbgr	EMPTY
570	463	2	-1	0	-1	case jcs _ ext _ abgr :	jcs _ ext _ abgr	EMPTY
570	464	2	-1	0	-1	gray _ extxbgr _ convert _ internal ( cinfo , input _ buf , input _ row , output _ buf ,	cinfo	EMPTY
570	465	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
570	466	2	-1	0	-1	break ;	EMPTY	EMPTY
570	467	3	-1	0	-1	case jcs _ ext _ xrgb :	jcs _ ext _ xrgb	EMPTY
570	468	1	0	0	-1	case jcs _ ext _ argb :	jcs _ ext _ argb	EMPTY
570	469	2	-1	0	-1	gray _ extxrgb _ convert _ internal ( cinfo , input _ buf , input _ row , output _ buf ,	cinfo	EMPTY
570	470	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
570	471	2	-1	0	-1	break ;	EMPTY	EMPTY
570	472	2	-1	0	-1	default :	EMPTY	EMPTY
570	473	2	-1	0	-1	gray _ rgb _ convert _ internal ( cinfo , input _ buf , input _ row , output _ buf ,	cinfo	EMPTY
570	474	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
570	475	2	-1	0	-1	break ;	EMPTY	EMPTY
570	476	2	-1	0	-1	}	EMPTY	EMPTY
570	477	3	-1	0	-1	}	EMPTY	EMPTY
570	484	1	1	1	-1	methoddef ( void )	EMPTY	EMPTY
570	485	2	-1	0	-1	rgb _ rgb _ convert ( j _ decompress _ ptr cinfo	cinfo	EMPTY
570	486	2	-1	0	-1	jsampimage input _ buf  jdimension input _ row	jsampimage	EMPTY
570	487	2	-1	0	-1	jsamparray output _ buf  int num _ rows )	jsamparray	EMPTY
570	488	2	-1	0	-1	{	EMPTY	EMPTY
570	489	2	-1	0	-1	switch ( cinfo -> out _ color _ space ) {	cinfo out _ color _ space	EMPTY
570	490	2	-1	0	-1	case jcs _ ext _ rgb :	jcs _ ext _ rgb	EMPTY
570	491	2	-1	0	-1	rgb _ extrgb _ convert _ internal ( cinfo , input _ buf , input _ row , output _ buf ,	cinfo	EMPTY
570	492	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
570	493	2	-1	0	-1	break ;	EMPTY	EMPTY
570	494	2	-1	0	-1	case jcs _ ext _ rgbx :	jcs _ ext _ rgbx	EMPTY
570	495	2	-1	0	-1	case jcs _ ext _ rgba :	jcs _ ext _ rgba	EMPTY
570	496	2	-1	0	-1	rgb _ extrgbx _ convert _ internal ( cinfo , input _ buf , input _ row , output _ buf ,	cinfo	EMPTY
570	497	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
570	498	2	-1	0	-1	break ;	EMPTY	EMPTY
570	499	2	-1	0	-1	case jcs _ ext _ bgr :	jcs _ ext _ bgr	EMPTY
570	500	2	-1	0	-1	rgb _ extbgr _ convert _ internal ( cinfo , input _ buf , input _ row , output _ buf ,	cinfo	EMPTY
570	501	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
570	502	2	-1	0	-1	break ;	EMPTY	EMPTY
570	503	2	-1	0	-1	case jcs _ ext _ bgrx :	jcs _ ext _ bgrx	EMPTY
570	504	2	-1	0	-1	case jcs _ ext _ bgra :	jcs _ ext _ bgra	EMPTY
570	505	2	-1	0	-1	rgb _ extbgrx _ convert _ internal ( cinfo , input _ buf , input _ row , output _ buf ,	cinfo	EMPTY
570	506	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
570	507	2	-1	0	-1	break ;	EMPTY	EMPTY
570	508	2	-1	0	-1	case jcs _ ext _ xbgr :	jcs _ ext _ xbgr	EMPTY
570	509	2	-1	0	-1	case jcs _ ext _ abgr :	jcs _ ext _ abgr	EMPTY
570	510	2	-1	0	-1	rgb _ extxbgr _ convert _ internal ( cinfo , input _ buf , input _ row , output _ buf ,	cinfo	EMPTY
570	511	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
570	512	2	-1	0	-1	break ;	EMPTY	EMPTY
570	513	3	-1	0	-1	case jcs _ ext _ xrgb :	jcs _ ext _ xrgb	EMPTY
570	514	1	0	0	-1	case jcs _ ext _ argb :	jcs _ ext _ argb	EMPTY
570	515	2	-1	0	-1	rgb _ extxrgb _ convert _ internal ( cinfo , input _ buf , input _ row , output _ buf ,	cinfo	EMPTY
570	516	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
570	517	2	-1	0	-1	break ;	EMPTY	EMPTY
570	518	2	-1	0	-1	default :	EMPTY	EMPTY
570	519	2	-1	0	-1	rgb _ rgb _ convert _ internal ( cinfo , input _ buf , input _ row , output _ buf ,	cinfo	EMPTY
570	520	2	-1	0	-1	num _ rows ) ;	EMPTY	EMPTY
570	521	2	-1	0	-1	break ;	EMPTY	EMPTY
570	522	2	-1	0	-1	}	EMPTY	EMPTY
570	523	3	-1	0	-1	}	EMPTY	EMPTY
570	533	1	1	1	-1	methoddef ( void )	EMPTY	EMPTY
570	534	2	-1	0	-1	ycck _ cmyk _ convert ( j _ decompress _ ptr cinfo	cinfo	EMPTY
570	535	2	-1	0	-1	jsampimage input _ buf  jdimension input _ row	jsampimage	EMPTY
570	536	2	-1	0	-1	jsamparray output _ buf  int num _ rows )	jsamparray	EMPTY
570	537	2	-1	0	-1	{	EMPTY	EMPTY
570	538	2	-1	0	-1	my _ cconvert _ ptr cconvert = ( my _ cconvert _ ptr ) cinfo -> cconvert ;	cinfo	EMPTY
570	539	2	-1	0	-1	register int y , cb , cr ;	EMPTY	EMPTY
570	540	2	-1	0	-1	register jsamprow outptr ;	jsamprow	EMPTY
570	541	2	-1	0	-1	register jsamprow inptr0 , inptr1 , inptr2 , inptr3 ;	jsamprow	EMPTY
570	542	2	-1	0	-1	register jdimension col ;	EMPTY	EMPTY
570	543	2	-1	0	-1	jdimension num _ cols = cinfo -> output _ width ;	cinfo output _ width	EMPTY
570	545	2	-1	1	-1	register jsample * range _ limit = cinfo -> sample _ range _ limit ;	range _ limit cinfo sample _ range _ limit	EMPTY
570	546	2	-1	0	-1	register int * crrtab = cconvert -> cr _ r _ tab ;	cr _ r _ tab	EMPTY
570	547	2	-1	0	-1	register int * cbbtab = cconvert -> cb _ b _ tab ;	cb _ b _ tab	EMPTY
570	548	2	-1	0	-1	register int32 * crgtab = cconvert -> cr _ g _ tab ;	cr _ g _ tab	EMPTY
570	549	2	-1	0	-1	register int32 * cbgtab = cconvert -> cb _ g _ tab ;	cb _ g _ tab	EMPTY
570	550	3	-1	0	-1	shift _ temps	EMPTY	EMPTY
570	552	1	1	0	1	while ( -- num _ rows >= numconst ) {	EMPTY	EMPTY
570	553	2	-1	0	-1	inptr0 = input _ buf [ 0 ] [ input _ row ]	EMPTY	EMPTY
570	554	2	-1	0	-1	inptr1 = input _ buf [ 1 ] [ input _ row ]	EMPTY	EMPTY
570	555	2	-1	0	-1	inptr2 = input _ buf [ 2 ] [ input _ row ]	EMPTY	EMPTY
570	556	2	-1	0	-1	inptr3 = input _ buf [ 3 ] [ input _ row ]	EMPTY	EMPTY
570	557	2	-1	0	-1	input _ row ++	EMPTY	EMPTY
570	558	2	-1	0	-1	outptr = * output _ buf ++	EMPTY	EMPTY
570	559	2	-1	0	-1	for ( col = numconst ; col < num _ cols ; col ++ ) {	EMPTY	EMPTY
570	560	2	-1	0	-1	y = getjsample ( inptr0 [ col ] ) ;	EMPTY	EMPTY
570	561	2	-1	0	-1	cb = getjsample ( inptr1 [ col ] ) ;	EMPTY	EMPTY
570	562	2	-1	0	-1	cr = getjsample ( inptr2 [ col ] ) ;	EMPTY	EMPTY
570	564	2	-1	1	-1	outptr [ 0 ] = range _ limit [ maxjsample - ( y + crrtab [ cr ] ) ]	range _ limit	EMPTY
570	565	2	-1	1	-1	outptr [ numconst ] = range _ limit [ maxjsample - ( y +	range _ limit	EMPTY
570	566	2	-1	0	-1	( ( int ) right _ shift ( cbgtab [ cb ] + crgtab [ cr ]	EMPTY	EMPTY
570	567	2	-1	0	-1	scalebits ) ) ) ] ;	EMPTY	EMPTY
570	568	2	-1	1	-1	outptr [ 2 ] = range _ limit [ maxjsample - ( y + cbbtab [ cb ] ) ]	range _ limit	EMPTY
570	570	2	-1	1	-1	outptr [ 3 ] = inptr3 [ col ]	EMPTY	EMPTY
570	571	2	-1	0	-1	outptr += 4	EMPTY	EMPTY
570	572	2	-1	0	-1	}	EMPTY	EMPTY
570	573	2	-1	0	-1	}	EMPTY	EMPTY
570	574	3	-1	0	-1	}	EMPTY	EMPTY
570	581	1	1	1	-1	# define pack _ short _ 565 _ le ( r  g  b ) ( ( ( ( r ) << numconst ) & numconst ) | \\	b	EMPTY
570	582	2	-1	0	-1	( ( ( g ) << numconst ) & numconst ) | ( ( b ) >> numconst ) )	b	EMPTY
570	583	2	-1	0	-1	# define pack _ short _ 565 _ be ( r  g  b ) ( ( ( r ) & numconst ) | ( ( g ) >> numconst ) | \\	b	EMPTY
570	584	2	-1	0	-1	( ( ( g ) << numconst ) & numconst ) | \\	EMPTY	EMPTY
570	585	3	-1	0	-1	( ( ( b ) << numconst ) & numconst ) )	b	EMPTY
570	587	1	0	0	-1	# define pack _ two _ pixels _ le ( l  r ) ( ( r << numconst ) | l )	EMPTY	EMPTY
570	588	3	-1	0	-1	# define pack _ two _ pixels _ be ( l  r ) ( ( l << numconst ) | r )	EMPTY	EMPTY
570	590	1	0	0	-1	# define pack _ need _ alignment ( ptr ) ( ( ( size _ t ) ( ptr ) ) & numconst )	EMPTY	EMPTY
570	592	1	0	0	-1	# define write _ two _ aligned _ pixels ( addr  pixels ) ( ( * ( int * ) ( addr ) ) = pixels )	EMPTY	EMPTY
570	594	1	0	0	-1	# define dither _ 565 _ r ( r  dither ) ( ( r ) + ( ( dither ) & numconst ) )	EMPTY	EMPTY
570	595	2	-1	0	-1	# define dither _ 565 _ g ( g  dither ) ( ( g ) + ( ( ( dither ) & numconst ) >> numconst ) )	EMPTY	EMPTY
570	596	3	-1	0	-1	# define dither _ 565 _ b ( b  dither ) ( ( b ) + ( ( dither ) & numconst ) )	b b	EMPTY
570	605	1	1	1	-1	# define dither _ mask numconst	EMPTY	EMPTY
570	606	2	-1	0	-1	# define dither _ rotate ( x ) ( ( ( x ) << numconst ) | ( ( ( x ) >> numconst ) & numconst )	EMPTY	EMPTY
570	607	2	-1	0	-1	static const int32 dither _ matrix [ numconst ] = {	EMPTY	EMPTY
570	608	2	-1	0	-1	numconst	EMPTY	EMPTY
570	609	2	-1	0	-1	numconst	EMPTY	EMPTY
570	610	2	-1	0	-1	numconst	EMPTY	EMPTY
570	611	2	-1	0	-1	numconst	EMPTY	EMPTY
570	612	3	-1	0	-1	} ;	EMPTY	EMPTY
570	615	1	0	0	-1	static inline boolean is _ big _ endian ( void )	EMPTY	EMPTY
570	616	2	-1	0	-1	{	EMPTY	EMPTY
570	617	2	-1	0	-1	int test _ value = 1 ;	EMPTY	EMPTY
570	618	2	-1	0	-1	if ( * ( char * ) & test _ value != numconst )	EMPTY	EMPTY
570	619	2	-1	0	-1	return true ;	EMPTY	EMPTY
570	620	2	-1	0	-1	return false ;	EMPTY	EMPTY
570	621	3	-1	0	-1	}	EMPTY	EMPTY
570	626	1	1	1	-1	# define pack _ short _ 565 pack _ short _ 565 _ le	EMPTY	EMPTY
570	627	2	-1	0	-1	# define pack _ two _ pixels pack _ two _ pixels _ le	EMPTY	EMPTY
570	628	2	-1	0	-1	# define ycc _ rgb565 _ convert _ internal ycc _ rgb565 _ convert _ le	EMPTY	EMPTY
570	629	2	-1	0	-1	# define ycc _ rgb565d _ convert _ internal ycc _ rgb565d _ convert _ le	EMPTY	EMPTY
570	630	2	-1	0	-1	# define rgb _ rgb565 _ convert _ internal rgb _ rgb565 _ convert _ le	EMPTY	EMPTY
570	631	2	-1	0	-1	# define rgb _ rgb565d _ convert _ internal rgb _ rgb565d _ convert _ le	EMPTY	EMPTY
570	632	2	-1	0	-1	# define gray _ rgb565 _ convert _ internal gray _ rgb565 _ convert _ le	EMPTY	EMPTY
570	633	2	-1	0	-1	# define gray _ rgb565d _ convert _ internal gray _ rgb565d _ convert _ le	EMPTY	EMPTY
570	634	2	-1	0	-1	# include strlit	EMPTY	EMPTY
570	635	2	-1	0	-1	# undef pack _ short _ 565	EMPTY	EMPTY
570	636	2	-1	0	-1	# undef pack _ two _ pixels	EMPTY	EMPTY
570	637	2	-1	0	-1	# undef ycc _ rgb565 _ convert _ internal	EMPTY	EMPTY
570	638	2	-1	0	-1	# undef ycc _ rgb565d _ convert _ internal	EMPTY	EMPTY
570	639	2	-1	0	-1	# undef rgb _ rgb565 _ convert _ internal	EMPTY	EMPTY
570	640	2	-1	0	-1	# undef rgb _ rgb565d _ convert _ internal	EMPTY	EMPTY
570	641	2	-1	0	-1	# undef gray _ rgb565 _ convert _ internal	EMPTY	EMPTY
570	642	3	-1	0	-1	# undef gray _ rgb565d _ convert _ internal	EMPTY	EMPTY
570	644	1	0	0	-1	# define pack _ short _ 565 pack _ short _ 565 _ be	EMPTY	EMPTY
570	645	2	-1	0	-1	# define pack _ two _ pixels pack _ two _ pixels _ be	EMPTY	EMPTY
570	646	2	-1	0	-1	# define ycc _ rgb565 _ convert _ internal ycc _ rgb565 _ convert _ be	EMPTY	EMPTY
570	647	2	-1	0	-1	# define ycc _ rgb565d _ convert _ internal ycc _ rgb565d _ convert _ be	EMPTY	EMPTY
570	648	2	-1	0	-1	# define rgb _ rgb565 _ convert _ internal rgb _ rgb565 _ convert _ be	EMPTY	EMPTY
570	649	2	-1	0	-1	# define rgb _ rgb565d _ convert _ internal rgb _ rgb565d _ convert _ be	EMPTY	EMPTY
570	650	2	-1	0	-1	# define gray _ rgb565 _ convert _ internal gray _ rgb565 _ convert _ be	EMPTY	EMPTY
570	651	2	-1	0	-1	# define gray _ rgb565d _ convert _ internal gray _ rgb565d _ convert _ be	EMPTY	EMPTY
570	652	2	-1	0	-1	# include strlit	EMPTY	EMPTY
570	653	2	-1	0	-1	# undef pack _ short _ 565	EMPTY	EMPTY
570	654	2	-1	0	-1	# undef pack _ two _ pixels	EMPTY	EMPTY
570	655	2	-1	0	-1	# undef ycc _ rgb565 _ convert _ internal	EMPTY	EMPTY
570	656	2	-1	0	-1	# undef ycc _ rgb565d _ convert _ internal	EMPTY	EMPTY
570	657	2	-1	0	-1	# undef rgb _ rgb565 _ convert _ internal	EMPTY	EMPTY
570	658	2	-1	0	-1	# undef rgb _ rgb565d _ convert _ internal	EMPTY	EMPTY
570	659	2	-1	0	-1	# undef gray _ rgb565 _ convert _ internal	EMPTY	EMPTY
570	660	3	-1	0	-1	# undef gray _ rgb565d _ convert _ internal	EMPTY	EMPTY
570	663	1	0	0	-1	methoddef ( void )	EMPTY	EMPTY
570	664	2	-1	0	-1	ycc _ rgb565 _ convert ( j _ decompress _ ptr cinfo	cinfo	EMPTY
570	665	2	-1	0	-1	jsampimage input _ buf  jdimension input _ row	jsampimage	EMPTY
570	666	2	-1	0	-1	jsamparray output _ buf  int num _ rows )	jsamparray	EMPTY
570	667	2	-1	0	-1	{	EMPTY	EMPTY
570	668	2	-1	0	-1	if ( is _ big _ endian ( ) )	EMPTY	EMPTY
570	669	2	-1	0	-1	ycc _ rgb565 _ convert _ be ( cinfo , input _ buf , input _ row , output _ buf , num _ rows ) ;	cinfo	EMPTY
570	670	2	-1	0	-1	else	EMPTY	EMPTY
570	671	2	-1	0	-1	ycc _ rgb565 _ convert _ le ( cinfo , input _ buf , input _ row , output _ buf , num _ rows )	cinfo	EMPTY
570	672	3	-1	0	-1	}	EMPTY	EMPTY
570	675	1	0	0	-1	methoddef ( void )	EMPTY	EMPTY
570	676	2	-1	0	-1	ycc _ rgb565d _ convert ( j _ decompress _ ptr cinfo	cinfo	EMPTY
570	677	2	-1	0	-1	jsampimage input _ buf  jdimension input _ row	jsampimage	EMPTY
570	678	2	-1	0	-1	jsamparray output _ buf  int num _ rows )	jsamparray	EMPTY
570	679	2	-1	0	-1	{	EMPTY	EMPTY
570	680	2	-1	0	-1	if ( is _ big _ endian ( ) )	EMPTY	EMPTY
570	681	2	-1	0	-1	ycc _ rgb565d _ convert _ be ( cinfo , input _ buf , input _ row , output _ buf , num _ rows ) ;	cinfo	EMPTY
570	682	2	-1	0	-1	else	EMPTY	EMPTY
570	683	2	-1	0	-1	ycc _ rgb565d _ convert _ le ( cinfo , input _ buf , input _ row , output _ buf , num _ rows )	cinfo	EMPTY
570	684	3	-1	0	-1	}	EMPTY	EMPTY
570	687	1	0	0	-1	methoddef ( void )	EMPTY	EMPTY
570	688	2	-1	0	-1	rgb _ rgb565 _ convert ( j _ decompress _ ptr cinfo	cinfo	EMPTY
570	689	2	-1	0	-1	jsampimage input _ buf  jdimension input _ row	jsampimage	EMPTY
570	690	2	-1	0	-1	jsamparray output _ buf  int num _ rows )	jsamparray	EMPTY
570	691	2	-1	0	-1	{	EMPTY	EMPTY
570	692	2	-1	0	-1	if ( is _ big _ endian ( ) )	EMPTY	EMPTY
570	693	2	-1	0	-1	rgb _ rgb565 _ convert _ be ( cinfo , input _ buf , input _ row , output _ buf , num _ rows ) ;	cinfo	EMPTY
570	694	2	-1	0	-1	else	EMPTY	EMPTY
570	695	2	-1	0	-1	rgb _ rgb565 _ convert _ le ( cinfo , input _ buf , input _ row , output _ buf , num _ rows )	cinfo	EMPTY
570	696	3	-1	0	-1	}	EMPTY	EMPTY
570	699	1	0	0	-1	methoddef ( void )	EMPTY	EMPTY
570	700	2	-1	0	-1	rgb _ rgb565d _ convert ( j _ decompress _ ptr cinfo	cinfo	EMPTY
570	701	2	-1	0	-1	jsampimage input _ buf  jdimension input _ row	jsampimage	EMPTY
570	702	2	-1	0	-1	jsamparray output _ buf  int num _ rows )	jsamparray	EMPTY
570	703	2	-1	0	-1	{	EMPTY	EMPTY
570	704	2	-1	0	-1	if ( is _ big _ endian ( ) )	EMPTY	EMPTY
570	705	2	-1	0	-1	rgb _ rgb565d _ convert _ be ( cinfo , input _ buf , input _ row , output _ buf , num _ rows ) ;	cinfo	EMPTY
570	706	2	-1	0	-1	else	EMPTY	EMPTY
570	707	2	-1	0	-1	rgb _ rgb565d _ convert _ le ( cinfo , input _ buf , input _ row , output _ buf , num _ rows )	cinfo	EMPTY
570	708	3	-1	0	-1	}	EMPTY	EMPTY
570	711	1	0	0	-1	methoddef ( void )	EMPTY	EMPTY
570	712	2	-1	0	-1	gray _ rgb565 _ convert ( j _ decompress _ ptr cinfo	cinfo	EMPTY
570	713	2	-1	0	-1	jsampimage input _ buf  jdimension input _ row	jsampimage	EMPTY
570	714	2	-1	0	-1	jsamparray output _ buf  int num _ rows )	jsamparray	EMPTY
570	715	2	-1	0	-1	{	EMPTY	EMPTY
570	716	2	-1	0	-1	if ( is _ big _ endian ( ) )	EMPTY	EMPTY
570	717	2	-1	0	-1	gray _ rgb565 _ convert _ be ( cinfo , input _ buf , input _ row , output _ buf , num _ rows ) ;	cinfo	EMPTY
570	718	2	-1	0	-1	else	EMPTY	EMPTY
570	719	2	-1	0	-1	gray _ rgb565 _ convert _ le ( cinfo , input _ buf , input _ row , output _ buf , num _ rows )	cinfo	EMPTY
570	720	3	-1	0	-1	}	EMPTY	EMPTY
570	723	1	0	0	-1	methoddef ( void )	EMPTY	EMPTY
570	724	2	-1	0	-1	gray _ rgb565d _ convert ( j _ decompress _ ptr cinfo	cinfo	EMPTY
570	725	2	-1	0	-1	jsampimage input _ buf  jdimension input _ row	jsampimage	EMPTY
570	726	2	-1	0	-1	jsamparray output _ buf  int num _ rows )	jsamparray	EMPTY
570	727	2	-1	0	-1	{	EMPTY	EMPTY
570	728	2	-1	0	-1	if ( is _ big _ endian ( ) )	EMPTY	EMPTY
570	729	2	-1	0	-1	gray _ rgb565d _ convert _ be ( cinfo , input _ buf , input _ row , output _ buf , num _ rows ) ;	cinfo	EMPTY
570	730	2	-1	0	-1	else	EMPTY	EMPTY
570	731	2	-1	0	-1	gray _ rgb565d _ convert _ le ( cinfo , input _ buf , input _ row , output _ buf , num _ rows )	cinfo	EMPTY
570	732	3	-1	0	-1	}	EMPTY	EMPTY
570	739	1	1	1	-1	methoddef ( void )	EMPTY	EMPTY
570	740	2	-1	0	-1	start _ pass _ dcolor ( j _ decompress _ ptr cinfo )	cinfo	EMPTY
570	741	2	-1	0	-1	{	EMPTY	EMPTY
570	743	3	-1	1	-1	}	EMPTY	EMPTY
570	750	1	1	1	-1	global ( void )	EMPTY	EMPTY
570	751	2	-1	0	-1	jinit _ color _ deconverter ( j _ decompress _ ptr cinfo )	cinfo	EMPTY
570	752	2	-1	0	-1	{	EMPTY	EMPTY
570	753	2	-1	0	-1	my _ cconvert _ ptr cconvert ;	EMPTY	EMPTY
570	754	3	-1	0	-1	int ci ;	EMPTY	EMPTY
570	756	1	0	0	-1	cconvert = ( my _ cconvert _ ptr )	EMPTY	EMPTY
570	757	2	-1	0	-1	( * cinfo -> mem -> alloc _ small ) ( ( j _ common _ ptr ) cinfo , jpool _ image ,	cinfo mem alloc _ small cinfo	EMPTY
570	758	2	-1	0	-1	sizeof ( my _ color _ deconverter ) )	EMPTY	EMPTY
570	759	2	-1	0	-1	cinfo -> cconvert = ( struct jpeg _ color _ deconverter * ) cconvert	cinfo jpeg _ color _ deconverter	EMPTY
570	760	3	-1	0	-1	cconvert -> pub . start _ pass = start _ pass _ dcolor	pub	EMPTY
570	763	1	1	1	1	switch ( cinfo -> jpeg _ color _ space ) {	cinfo jpeg _ color _ space	EMPTY
570	764	2	-1	0	-1	case jcs _ grayscale :	jcs _ grayscale	EMPTY
570	765	2	-1	0	-1	if ( cinfo -> num _ components != numconst )	cinfo num _ components	EMPTY
570	766	2	-1	0	-1	errexit ( cinfo  jerr _ bad _ j _ colorspace ) ;	cinfo	EMPTY
570	767	3	-1	0	-1	break	EMPTY	EMPTY
570	769	1	0	0	-1	case jcs _ rgb :	jcs _ rgb	EMPTY
570	770	2	-1	0	-1	case jcs _ ycbcr :	jcs _ ycbcr	EMPTY
570	771	2	-1	0	-1	if ( cinfo -> num _ components != numconst )	cinfo num _ components	EMPTY
570	772	2	-1	0	-1	errexit ( cinfo  jerr _ bad _ j _ colorspace ) ;	cinfo	EMPTY
570	773	3	-1	0	-1	break	EMPTY	EMPTY
570	775	1	0	0	-1	case jcs _ cmyk :	jcs _ cmyk	EMPTY
570	776	2	-1	0	-1	case jcs _ ycck :	jcs _ ycck	EMPTY
570	777	2	-1	0	-1	if ( cinfo -> num _ components != numconst )	cinfo num _ components	EMPTY
570	778	2	-1	0	-1	errexit ( cinfo  jerr _ bad _ j _ colorspace ) ;	cinfo	EMPTY
570	779	3	-1	0	-1	break	EMPTY	EMPTY
570	781	1	1	1	-1	default :	EMPTY	EMPTY
570	782	2	-1	0	-1	if ( cinfo -> num _ components < numconst )	cinfo num _ components	EMPTY
570	783	2	-1	0	-1	errexit ( cinfo  jerr _ bad _ j _ colorspace ) ;	cinfo	EMPTY
570	784	2	-1	0	-1	break	EMPTY	EMPTY
570	785	3	-1	0	-1	}	EMPTY	EMPTY
570	792	1	1	1	1	switch ( cinfo -> out _ color _ space ) {	cinfo out _ color _ space	EMPTY
570	793	2	-1	0	-1	case jcs _ grayscale :	jcs _ grayscale	EMPTY
570	794	2	-1	0	-1	cinfo -> out _ color _ components = 1	cinfo out _ color _ components	EMPTY
570	795	2	-1	0	-1	if ( cinfo -> jpeg _ color _ space == jcs _ grayscale ||	cinfo jpeg _ color _ space jcs _ grayscale	EMPTY
570	796	2	-1	0	-1	cinfo -> jpeg _ color _ space == jcs _ ycbcr ) {	cinfo jpeg _ color _ space jcs _ ycbcr	EMPTY
570	797	2	-1	0	-1	cconvert -> pub . color _ convert = grayscale _ convert	pub	EMPTY
570	799	2	-1	1	-1	for ( ci = numconst ; ci < cinfo -> num _ components ; ci ++ )	cinfo num _ components	EMPTY
570	800	2	-1	0	-1	cinfo -> comp _ info [ ci ] . component _ needed = false ;	cinfo component _ needed	EMPTY
570	801	2	-1	0	-1	if ( cinfo -> jpeg _ color _ space == jcs _ rgb ) {	cinfo jpeg _ color _ space jcs _ rgb	EMPTY
570	802	2	-1	0	-1	cconvert -> pub . color _ convert = rgb _ gray _ convert ;	pub	EMPTY
570	803	2	-1	0	-1	build _ rgb _ y _ table ( cinfo ) ;	cinfo	EMPTY
570	804	2	-1	0	-1	}	EMPTY	EMPTY
570	805	2	-1	0	-1	errexit ( cinfo  jerr _ conversion _ notimpl ) ;	cinfo	EMPTY
570	806	3	-1	0	-1	break ;	EMPTY	EMPTY
570	808	1	0	0	-1	case jcs _ rgb :	jcs _ rgb	EMPTY
570	809	2	-1	0	-1	case jcs _ ext _ rgb :	jcs _ ext _ rgb	EMPTY
570	810	2	-1	0	-1	case jcs _ ext _ rgbx :	jcs _ ext _ rgbx	EMPTY
570	811	2	-1	0	-1	case jcs _ ext _ bgr :	jcs _ ext _ bgr	EMPTY
570	812	2	-1	0	-1	case jcs _ ext _ bgrx :	jcs _ ext _ bgrx	EMPTY
570	813	2	-1	0	-1	case jcs _ ext _ xbgr :	jcs _ ext _ xbgr	EMPTY
570	814	2	-1	0	-1	case jcs _ ext _ xrgb :	jcs _ ext _ xrgb	EMPTY
570	815	2	-1	0	-1	case jcs _ ext _ rgba :	jcs _ ext _ rgba	EMPTY
570	816	2	-1	0	-1	case jcs _ ext _ bgra :	jcs _ ext _ bgra	EMPTY
570	817	2	-1	0	-1	case jcs _ ext _ abgr :	jcs _ ext _ abgr	EMPTY
570	818	2	-1	0	-1	case jcs _ ext _ argb :	jcs _ ext _ argb	EMPTY
570	819	2	-1	0	-1	cinfo -> out _ color _ components = rgb _ pixelsize [ cinfo -> out _ color _ space ] ;	cinfo out _ color _ components cinfo out _ color _ space	EMPTY
570	820	2	-1	0	-1	if ( cinfo -> jpeg _ color _ space == jcs _ ycbcr ) {	cinfo jpeg _ color _ space jcs _ ycbcr	EMPTY
570	821	2	-1	0	-1	if ( jsimd _ can _ ycc _ rgb ( ) )	EMPTY	EMPTY
570	822	2	-1	0	-1	cconvert -> pub . color _ convert = jsimd _ ycc _ rgb _ convert ;	pub	EMPTY
570	823	2	-1	0	-1	else {	EMPTY	EMPTY
570	824	2	-1	0	-1	cconvert -> pub . color _ convert = ycc _ rgb _ convert ;	pub	EMPTY
570	825	2	-1	0	-1	build _ ycc _ rgb _ table ( cinfo ) ;	cinfo	EMPTY
570	826	2	-1	0	-1	}	EMPTY	EMPTY
570	827	2	-1	0	-1	if ( cinfo -> jpeg _ color _ space == jcs _ grayscale ) {	cinfo jpeg _ color _ space jcs _ grayscale	EMPTY
570	828	2	-1	0	-1	cconvert -> pub . color _ convert = gray _ rgb _ convert ;	pub	EMPTY
570	829	2	-1	0	-1	if ( cinfo -> jpeg _ color _ space == jcs _ rgb ) {	cinfo jpeg _ color _ space jcs _ rgb	EMPTY
570	830	2	-1	0	-1	if ( rgb _ red [ cinfo -> out _ color _ space ] == numconst &&	cinfo out _ color _ space	EMPTY
570	831	2	-1	0	-1	rgb _ green [ cinfo -> out _ color _ space ] == numconst &&	cinfo out _ color _ space	EMPTY
570	832	2	-1	0	-1	rgb _ blue [ cinfo -> out _ color _ space ] == numconst &&	cinfo out _ color _ space	EMPTY
570	833	2	-1	0	-1	rgb _ pixelsize [ cinfo -> out _ color _ space ] == numconst )	cinfo out _ color _ space	EMPTY
570	834	2	-1	0	-1	cconvert -> pub . color _ convert = null _ convert ;	pub	EMPTY
570	835	2	-1	0	-1	else	EMPTY	EMPTY
570	836	2	-1	0	-1	cconvert -> pub . color _ convert = rgb _ rgb _ convert ;	pub	EMPTY
570	837	3	-1	0	-1	}	EMPTY	EMPTY
570	838	1	0	0	-1	errexit ( cinfo  jerr _ conversion _ notimpl ) ;	cinfo	EMPTY
570	839	3	-1	0	-1	break ;	EMPTY	EMPTY
570	841	1	1	0	-1	case jcs _ rgb565 :	jcs _ rgb565	EMPTY
570	842	2	-1	0	-1	cinfo -> out _ color _ components = numconst ;	cinfo out _ color _ components	EMPTY
570	843	2	-1	0	-1	if ( cinfo -> dither _ mode == jdither _ none ) {	cinfo dither _ mode jdither _ none	EMPTY
570	844	2	-1	0	-1	if ( cinfo -> jpeg _ color _ space == jcs _ ycbcr ) {	cinfo jpeg _ color _ space jcs _ ycbcr	EMPTY
570	845	2	-1	0	-1	if ( jsimd _ can _ ycc _ rgb565 ( ) )	EMPTY	EMPTY
570	846	2	-1	0	-1	cconvert -> pub . color _ convert = jsimd _ ycc _ rgb565 _ convert ;	pub	EMPTY
570	847	2	-1	0	-1	else {	EMPTY	EMPTY
570	848	2	-1	0	-1	cconvert -> pub . color _ convert = ycc _ rgb565 _ convert ;	pub	EMPTY
570	849	2	-1	0	-1	build _ ycc _ rgb _ table ( cinfo ) ;	cinfo	EMPTY
570	850	2	-1	0	-1	}	EMPTY	EMPTY
570	851	2	-1	0	-1	if ( cinfo -> jpeg _ color _ space == jcs _ grayscale ) {	cinfo jpeg _ color _ space jcs _ grayscale	EMPTY
570	852	2	-1	0	-1	cconvert -> pub . color _ convert = gray _ rgb565 _ convert ;	pub	EMPTY
570	853	2	-1	0	-1	if ( cinfo -> jpeg _ color _ space == jcs _ rgb ) {	cinfo jpeg _ color _ space jcs _ rgb	EMPTY
570	854	2	-1	0	-1	cconvert -> pub . color _ convert = rgb _ rgb565 _ convert ;	pub	EMPTY
570	855	2	-1	0	-1	} else	EMPTY	EMPTY
570	856	2	-1	0	-1	errexit ( cinfo  jerr _ conversion _ notimpl ) ;	cinfo	EMPTY
570	857	2	-1	0	-1	}	EMPTY	EMPTY
570	859	2	-1	1	-1	if ( cinfo -> jpeg _ color _ space == jcs _ ycbcr ) {	cinfo jpeg _ color _ space jcs _ ycbcr	EMPTY
570	860	2	-1	0	-1	cconvert -> pub . color _ convert = ycc _ rgb565d _ convert	pub	EMPTY
570	861	2	-1	0	-1	build _ ycc _ rgb _ table ( cinfo )	cinfo	EMPTY
570	862	2	-1	0	-1	if ( cinfo -> jpeg _ color _ space == jcs _ grayscale ) {	cinfo jpeg _ color _ space jcs _ grayscale	EMPTY
570	863	2	-1	0	-1	cconvert -> pub . color _ convert = gray _ rgb565d _ convert	pub	EMPTY
570	864	2	-1	0	-1	if ( cinfo -> jpeg _ color _ space == jcs _ rgb ) {	cinfo jpeg _ color _ space jcs _ rgb	EMPTY
570	865	2	-1	0	-1	cconvert -> pub . color _ convert = rgb _ rgb565d _ convert	pub	EMPTY
570	866	2	-1	0	-1	} else	EMPTY	EMPTY
570	867	2	-1	0	-1	errexit ( cinfo  jerr _ conversion _ notimpl ) ;	cinfo	EMPTY
570	868	2	-1	0	-1	}	EMPTY	EMPTY
570	869	3	-1	0	-1	break ;	EMPTY	EMPTY
570	871	1	0	0	-1	case jcs _ cmyk :	jcs _ cmyk	EMPTY
570	872	2	-1	0	-1	cinfo -> out _ color _ components = numconst ;	cinfo out _ color _ components	EMPTY
570	873	2	-1	0	-1	if ( cinfo -> jpeg _ color _ space == jcs _ ycck ) {	cinfo jpeg _ color _ space jcs _ ycck	EMPTY
570	874	2	-1	0	-1	cconvert -> pub . color _ convert = ycck _ cmyk _ convert ;	pub	EMPTY
570	875	2	-1	0	-1	build _ ycc _ rgb _ table ( cinfo ) ;	cinfo	EMPTY
570	876	2	-1	0	-1	if ( cinfo -> jpeg _ color _ space == jcs _ cmyk ) {	cinfo jpeg _ color _ space jcs _ cmyk	EMPTY
570	877	2	-1	0	-1	cconvert -> pub . color _ convert = null _ convert ;	pub	EMPTY
570	878	2	-1	0	-1	} else	EMPTY	EMPTY
570	879	2	-1	0	-1	errexit ( cinfo  jerr _ conversion _ notimpl ) ;	cinfo	EMPTY
570	880	3	-1	0	-1	break ;	EMPTY	EMPTY
570	882	1	1	0	-1	default :	EMPTY	EMPTY
570	884	2	-1	1	-1	if ( cinfo -> out _ color _ space == cinfo -> jpeg _ color _ space ) {	cinfo out _ color _ space cinfo jpeg _ color _ space	EMPTY
570	885	2	-1	0	-1	cinfo -> out _ color _ components = cinfo -> num _ components	cinfo out _ color _ components cinfo num _ components	EMPTY
570	886	2	-1	0	-1	cconvert -> pub . color _ convert = null _ convert	pub	EMPTY
570	887	2	-1	1	-1	} else	EMPTY	EMPTY
570	888	2	-1	0	-1	errexit ( cinfo  jerr _ conversion _ notimpl ) ;	cinfo	EMPTY
570	889	2	-1	0	-1	break	EMPTY	EMPTY
570	890	3	-1	0	-1	}	EMPTY	EMPTY
570	892	1	1	0	1	if ( cinfo -> quantize _ colors )	cinfo quantize _ colors	EMPTY
570	893	2	-1	1	-1	cinfo -> output _ components = numconst ;	cinfo output _ components	EMPTY
570	894	2	-1	0	-1	else	EMPTY	EMPTY
570	895	2	-1	0	-1	cinfo -> output _ components = cinfo -> out _ color _ components ;	cinfo output _ components cinfo out _ color _ components	EMPTY
570	896	3	-1	0	-1	}	EMPTY	EMPTY
582	48	1	0	0	-1	const char * const jpeg _ std _ message _ table [ ] = {	EMPTY	EMPTY
582	49	2	-1	0	-1	# include strlit	EMPTY	EMPTY
582	50	2	-1	0	-1	null	EMPTY	EMPTY
582	51	3	-1	0	-1	} ;	EMPTY	EMPTY
582	67	1	1	1	-1	methoddef ( void )	EMPTY	EMPTY
582	68	2	-1	0	-1	error _ exit ( j _ common _ ptr cinfo )	error _ exit cinfo	EMPTY
582	69	2	-1	0	-1	{	EMPTY	EMPTY
582	71	3	-1	1	-1	( * cinfo -> err -> output _ message ) ( cinfo )	cinfo err output _ message cinfo	EMPTY
582	74	1	1	1	1	jpeg _ destroy ( cinfo )	cinfo	EMPTY
582	76	1	0	0	0	exit ( exit _ failure )	EMPTY	exit
582	77	3	-1	0	-1	}	EMPTY	EMPTY
582	95	1	1	1	-1	methoddef ( void )	EMPTY	EMPTY
582	96	2	-1	0	-1	output _ message ( j _ common _ ptr cinfo )	output _ message cinfo	EMPTY
582	97	2	-1	0	-1	{	EMPTY	EMPTY
582	98	3	-1	0	-1	char buffer [ jmsg _ length _ max ] ;	buffer	EMPTY
582	101	1	1	1	1	( * cinfo -> err -> format _ message ) ( cinfo , buffer )	cinfo err format _ message cinfo buffer	EMPTY
582	103	1	1	0	-1	# ifdef use _ windows _ messagebox	EMPTY	EMPTY
582	105	2	-1	1	-1	messagebox ( getactivewindow ( )  buffer  strlit	buffer	EMPTY
582	106	2	-1	0	-1	mb _ ok | mb _ iconerror ) ;	EMPTY	EMPTY
582	107	2	-1	0	-1	# else	EMPTY	EMPTY
582	109	2	-1	1	-1	fprintf ( stderr ,  " %s\n "  , buffer )	buffer	fprintf stderr
582	110	2	-1	0	-1	# endif	EMPTY	EMPTY
582	111	3	-1	0	-1	}	EMPTY	EMPTY
582	125	1	1	1	-1	methoddef ( void )	EMPTY	EMPTY
582	126	2	-1	0	-1	emit _ message ( j _ common _ ptr cinfo  int msg _ level )	emit _ message cinfo msg _ level	EMPTY
582	127	2	-1	0	-1	{	EMPTY	EMPTY
582	128	3	-1	0	-1	struct jpeg _ error _ mgr * err = cinfo -> err ;	jpeg _ error _ mgr err cinfo err	EMPTY
582	130	1	1	0	1	if ( msg _ level < numconst ) {	msg _ level	EMPTY
582	135	2	-1	1	-1	if ( err -> num _ warnings == 0 || err -> trace _ level >= 3 )	err num _ warnings err trace _ level	EMPTY
582	136	2	-1	0	-1	( * err -> output _ message ) ( cinfo )	err output _ message cinfo	EMPTY
582	138	2	-1	1	-1	err -> num _ warnings ++	err num _ warnings	EMPTY
582	139	2	-1	0	-1	}	EMPTY	EMPTY
582	141	2	-1	1	-1	if ( err -> trace _ level >= msg _ level )	err trace _ level msg _ level	EMPTY
582	142	2	-1	0	-1	( * err -> output _ message ) ( cinfo )	err output _ message cinfo	EMPTY
582	143	2	-1	0	-1	}	EMPTY	EMPTY
582	144	3	-1	0	-1	}	EMPTY	EMPTY
582	154	1	1	1	-1	methoddef ( void )	EMPTY	EMPTY
582	155	2	-1	0	-1	format _ message ( j _ common _ ptr cinfo  char * buffer )	format _ message cinfo buffer	EMPTY
582	156	2	-1	0	-1	{	EMPTY	EMPTY
582	157	2	-1	0	-1	struct jpeg _ error _ mgr * err = cinfo -> err ;	jpeg _ error _ mgr err cinfo err	EMPTY
582	158	2	-1	0	-1	int msg _ code = err -> msg _ code ;	msg _ code err msg _ code	EMPTY
582	159	2	-1	0	-1	const char * msgtext = null ;	EMPTY	EMPTY
582	160	2	-1	0	-1	const char * msgptr ;	EMPTY	EMPTY
582	161	2	-1	0	-1	char ch ;	EMPTY	EMPTY
582	162	3	-1	0	-1	boolean isstring ;	EMPTY	EMPTY
582	165	1	1	1	1	if ( msg _ code > 0 && msg _ code <= err -> last _ jpeg _ message ) {	msg _ code msg _ code err last _ jpeg _ message	EMPTY
582	166	2	-1	0	-1	msgtext = err -> jpeg _ message _ table [ msg _ code ] ;	err jpeg _ message _ table msg _ code	EMPTY
582	167	2	-1	0	-1	} else if ( err -> addon _ message _ table != null &&	err addon _ message _ table	EMPTY
582	168	2	-1	0	-1	msg _ code >= err -> first _ addon _ message &&	msg _ code err first _ addon _ message	EMPTY
582	169	2	-1	0	-1	msg _ code <= err -> last _ addon _ message ) {	msg _ code err last _ addon _ message	EMPTY
582	170	2	-1	0	-1	msgtext = err -> addon _ message _ table [ msg _ code - err -> first _ addon _ message ] ;	err addon _ message _ table msg _ code err first _ addon _ message	EMPTY
582	171	3	-1	0	-1	}	EMPTY	EMPTY
582	174	1	1	1	1	if ( msgtext == null ) {	EMPTY	EMPTY
582	175	2	-1	0	-1	err -> msg _ parm . i [ 0 ] = msg _ code ;	err msg _ code	EMPTY
582	176	2	-1	0	-1	msgtext = err -> jpeg _ message _ table [ 0 ] ;	err jpeg _ message _ table	EMPTY
582	177	3	-1	0	-1	}	EMPTY	EMPTY
582	180	1	1	1	-1	isstring = false ;	EMPTY	EMPTY
582	181	2	-1	0	-1	msgptr = msgtext	EMPTY	EMPTY
582	182	2	-1	0	-1	while ( ( ch = * msgptr ++ ) != '\0' ) {	EMPTY	EMPTY
582	183	2	-1	0	-1	if ( ch == '%' ) {	EMPTY	EMPTY
582	184	2	-1	0	-1	if ( * msgptr == 's' ) isstring = true ;	EMPTY	EMPTY
582	185	2	-1	0	-1	break ;	EMPTY	EMPTY
582	186	2	-1	0	-1	}	EMPTY	EMPTY
582	187	3	-1	0	-1	}	EMPTY	EMPTY
582	190	1	1	1	1	if ( isstring )	EMPTY	EMPTY
582	191	2	-1	0	-1	sprintf ( buffer  msgtext  err -> msg _ parm . s ) ;	buffer err	EMPTY
582	192	2	-1	0	-1	else	EMPTY	EMPTY
582	193	2	-1	0	-1	sprintf ( buffer  msgtext	buffer	EMPTY
582	194	2	-1	0	-1	err -> msg _ parm . i [ numconst ]  err -> msg _ parm . i [ numconst ]	err err	EMPTY
582	195	2	-1	0	-1	err -> msg _ parm . i [ numconst ]  err -> msg _ parm . i [ numconst ]	err err	EMPTY
582	196	2	-1	0	-1	err -> msg _ parm . i [ numconst ]  err -> msg _ parm . i [ numconst ]	err err	EMPTY
582	197	2	-1	0	-1	err -> msg _ parm . i [ numconst ]  err -> msg _ parm . i [ numconst ] ) ;	err err	EMPTY
582	198	3	-1	0	-1	}	EMPTY	EMPTY
582	209	1	1	1	-1	methoddef ( void )	EMPTY	EMPTY
582	210	2	-1	0	-1	reset _ error _ mgr ( j _ common _ ptr cinfo )	reset _ error _ mgr cinfo	EMPTY
582	211	2	-1	0	-1	{	EMPTY	EMPTY
582	212	2	-1	0	-1	cinfo -> err -> num _ warnings = 0	cinfo err num _ warnings	EMPTY
582	214	2	-1	1	-1	cinfo -> err -> msg _ code = 0	cinfo err msg _ code	EMPTY
582	215	3	-1	0	-1	}	EMPTY	EMPTY
582	228	1	1	1	-1	global ( struct jpeg _ error _ mgr * )	jpeg _ error _ mgr	EMPTY
582	229	2	-1	0	-1	jpeg _ std _ error ( struct jpeg _ error _ mgr * err )	jpeg _ std _ error jpeg _ error _ mgr err	EMPTY
582	230	2	-1	0	-1	{	EMPTY	EMPTY
582	231	2	-1	0	-1	err -> error _ exit = error _ exit	err error _ exit error _ exit	EMPTY
582	232	2	-1	0	-1	err -> emit _ message = emit _ message	err emit _ message emit _ message	EMPTY
582	233	2	-1	0	-1	err -> output _ message = output _ message	err output _ message output _ message	EMPTY
582	234	2	-1	0	-1	err -> format _ message = format _ message	err format _ message format _ message	EMPTY
582	235	3	-1	0	-1	err -> reset _ error _ mgr = reset _ error _ mgr	err reset _ error _ mgr reset _ error _ mgr	EMPTY
582	237	1	1	1	-1	err -> trace _ level = 0	err trace _ level	EMPTY
582	238	2	-1	1	-1	err -> num _ warnings = 0	err num _ warnings	EMPTY
582	239	3	-1	1	-1	err -> msg _ code = 0	err msg _ code	EMPTY
582	242	1	1	1	-1	err -> jpeg _ message _ table = jpeg _ std _ message _ table	err jpeg _ message _ table	EMPTY
582	243	3	-1	0	-1	err -> last _ jpeg _ message = ( int ) jmsg _ lastmsgcode - 1	err last _ jpeg _ message	EMPTY
582	245	1	1	0	-1	err -> addon _ message _ table = null ;	err addon _ message _ table	EMPTY
582	246	2	-1	1	-1	err -> first _ addon _ message = 0	err first _ addon _ message	EMPTY
582	247	3	-1	0	-1	err -> last _ addon _ message = 0	err last _ addon _ message	EMPTY
582	249	1	0	0	0	return err	err	EMPTY
582	250	3	-1	0	-1	}	EMPTY	EMPTY
591	22	1	0	0	-1	local ( void ) transencode _ master _ selection	transencode _ master _ selection	EMPTY
591	23	2	-1	0	-1	( j _ compress _ ptr cinfo  jvirt _ barray _ ptr * coef _ arrays )	cinfo coef _ arrays	EMPTY
591	24	2	-1	0	-1	local ( void ) transencode _ coef _ controller	EMPTY	EMPTY
591	25	3	-1	0	-1	( j _ compress _ ptr cinfo  jvirt _ barray _ ptr * coef _ arrays ) ;	cinfo coef _ arrays	EMPTY
591	40	1	1	1	-1	global ( void )	EMPTY	EMPTY
591	41	2	-1	0	-1	jpeg _ write _ coefficients ( j _ compress _ ptr cinfo  jvirt _ barray _ ptr * coef _ arrays )	cinfo coef _ arrays	EMPTY
591	42	2	-1	0	-1	{	EMPTY	EMPTY
591	43	2	-1	0	-1	if ( cinfo -> global _ state != cstate _ start )	cinfo global _ state	EMPTY
591	44	2	-1	0	-1	errexit1 ( cinfo  jerr _ bad _ state  cinfo -> global _ state ) ;	cinfo cinfo global _ state	EMPTY
591	46	2	-1	1	-1	jpeg _ suppress _ tables ( cinfo , false )	cinfo	EMPTY
591	48	2	-1	1	-1	( * cinfo -> err -> reset _ error _ mgr ) ( ( j _ common _ ptr ) cinfo )	cinfo err reset _ error _ mgr cinfo	EMPTY
591	49	2	-1	0	-1	( * cinfo -> dest -> init _ destination ) ( cinfo )	cinfo dest cinfo	EMPTY
591	51	2	-1	1	-1	transencode _ master _ selection ( cinfo , coef _ arrays )	transencode _ master _ selection cinfo coef _ arrays	EMPTY
591	53	2	-1	1	-1	cinfo -> next _ scanline = 0	cinfo next _ scanline	EMPTY
591	54	2	-1	0	-1	cinfo -> global _ state = cstate _ wrcoefs ;	cinfo global _ state	EMPTY
591	55	3	-1	0	-1	}	EMPTY	EMPTY
591	65	1	1	1	-1	global ( void )	EMPTY	EMPTY
591	66	2	-1	0	-1	jpeg _ copy _ critical _ parameters ( j _ decompress _ ptr srcinfo	EMPTY	EMPTY
591	67	2	-1	0	-1	j _ compress _ ptr dstinfo )	EMPTY	EMPTY
591	68	2	-1	0	-1	{	EMPTY	EMPTY
591	69	2	-1	0	-1	jquant _ tbl * * qtblptr ;	EMPTY	EMPTY
591	70	2	-1	0	-1	jpeg _ component _ info * incomp , * outcomp ;	EMPTY	EMPTY
591	71	2	-1	0	-1	jquant _ tbl * c _ quant , * slot _ quant ;	EMPTY	EMPTY
591	72	3	-1	0	-1	int tblno , ci , coefi ;	EMPTY	EMPTY
591	75	1	1	1	1	if ( dstinfo -> global _ state != cstate _ start )	global _ state	EMPTY
591	76	2	-1	0	-1	errexit1 ( dstinfo  jerr _ bad _ state  dstinfo -> global _ state ) ;	global _ state	EMPTY
591	78	2	-1	1	-1	dstinfo -> image _ width = srcinfo -> image _ width	image _ width image _ width	EMPTY
591	79	2	-1	0	-1	dstinfo -> image _ height = srcinfo -> image _ height	image _ height image _ height	EMPTY
591	80	2	-1	0	-1	dstinfo -> input _ components = srcinfo -> num _ components	input _ components num _ components	EMPTY
591	81	2	-1	0	-1	dstinfo -> in _ color _ space = srcinfo -> jpeg _ color _ space	in _ color _ space jpeg _ color _ space	EMPTY
591	82	2	-1	0	-1	# if jpeg _ lib _ version >= numconst	EMPTY	EMPTY
591	83	2	-1	0	-1	dstinfo -> jpeg _ width = srcinfo -> output _ width ;	output _ width	EMPTY
591	84	2	-1	0	-1	dstinfo -> jpeg _ height = srcinfo -> output _ height ;	output _ height	EMPTY
591	85	2	-1	0	-1	dstinfo -> min _ dct _ h _ scaled _ size = srcinfo -> min _ dct _ h _ scaled _ size ;	EMPTY	EMPTY
591	86	2	-1	0	-1	dstinfo -> min _ dct _ v _ scaled _ size = srcinfo -> min _ dct _ v _ scaled _ size ;	EMPTY	EMPTY
591	87	2	-1	0	-1	# endif	EMPTY	EMPTY
591	89	2	-1	1	-1	jpeg _ set _ defaults ( dstinfo )	jpeg _ set _ defaults	EMPTY
591	93	2	-1	1	-1	jpeg _ set _ colorspace ( dstinfo , srcinfo -> jpeg _ color _ space )	jpeg _ set _ colorspace jpeg _ color _ space	EMPTY
591	94	2	-1	0	-1	dstinfo -> data _ precision = srcinfo -> data _ precision	data _ precision data _ precision	EMPTY
591	95	2	-1	0	-1	dstinfo -> ccir601 _ sampling = srcinfo -> ccir601 _ sampling	ccir601 _ sampling ccir601 _ sampling	EMPTY
591	97	2	-1	1	-1	for ( tblno = 0 ; tblno < num _ quant _ tbls ; tblno ++ ) {	EMPTY	EMPTY
591	98	2	-1	0	-1	if ( srcinfo -> quant _ tbl _ ptrs [ tblno ] != null ) {	EMPTY	EMPTY
591	99	2	-1	0	-1	qtblptr = & dstinfo -> quant _ tbl _ ptrs [ tblno ] ;	EMPTY	EMPTY
591	100	2	-1	0	-1	if ( * qtblptr == null )	EMPTY	EMPTY
591	101	2	-1	0	-1	* qtblptr = jpeg _ alloc _ quant _ table ( ( j _ common _ ptr ) dstinfo ) ;	EMPTY	EMPTY
591	102	2	-1	0	-1	memcopy ( ( * qtblptr ) -> quantval ,	quantval	EMPTY
591	103	2	-1	0	-1	srcinfo -> quant _ tbl _ ptrs [ tblno ] -> quantval ,	quantval	EMPTY
591	104	2	-1	0	-1	sizeof ( ( * qtblptr ) -> quantval ) ) ;	quantval	EMPTY
591	105	2	-1	0	-1	( * qtblptr ) -> sent _ table = false ;	sent _ table	EMPTY
591	106	2	-1	0	-1	}	EMPTY	EMPTY
591	107	2	-1	0	-1	}	EMPTY	EMPTY
591	111	2	-1	1	-1	dstinfo -> num _ components = srcinfo -> num _ components	num _ components num _ components	EMPTY
591	112	2	-1	0	-1	if ( dstinfo -> num _ components < numconst || dstinfo -> num _ components > max _ components )	num _ components num _ components	EMPTY
591	113	3	-1	0	-1	errexit2 ( dstinfo  jerr _ component _ count  dstinfo -> num _ components	num _ components	EMPTY
591	114	1	1	0	-1	max _ components ) ;	EMPTY	EMPTY
591	115	2	-1	0	-1	for ( ci = numconst  incomp = srcinfo -> comp _ info  outcomp = dstinfo -> comp _ info ;	EMPTY	EMPTY
591	116	2	-1	0	-1	ci < dstinfo -> num _ components ; ci ++  incomp ++  outcomp ++ ) {	num _ components	EMPTY
591	117	2	-1	0	-1	outcomp -> component _ id = incomp -> component _ id	component _ id component _ id	EMPTY
591	118	2	-1	0	-1	outcomp -> h _ samp _ factor = incomp -> h _ samp _ factor	h _ samp _ factor h _ samp _ factor	EMPTY
591	119	2	-1	0	-1	outcomp -> v _ samp _ factor = incomp -> v _ samp _ factor	v _ samp _ factor v _ samp _ factor	EMPTY
591	120	2	-1	0	-1	outcomp -> quant _ tbl _ no = incomp -> quant _ tbl _ no	quant _ tbl _ no quant _ tbl _ no	EMPTY
591	125	2	-1	1	-1	tblno = outcomp -> quant _ tbl _ no	quant _ tbl _ no	EMPTY
591	126	2	-1	0	-1	if ( tblno < numconst || tblno >= num _ quant _ tbls ||	EMPTY	EMPTY
591	127	2	-1	0	-1	srcinfo -> quant _ tbl _ ptrs [ tblno ] == null )	EMPTY	EMPTY
591	128	2	-1	0	-1	errexit1 ( dstinfo  jerr _ no _ quant _ table  tblno ) ;	EMPTY	EMPTY
591	129	2	-1	0	-1	slot _ quant = srcinfo -> quant _ tbl _ ptrs [ tblno ]	EMPTY	EMPTY
591	130	2	-1	0	-1	c _ quant = incomp -> quant _ table	quant _ table	EMPTY
591	131	2	-1	0	-1	if ( c _ quant != null ) {	EMPTY	EMPTY
591	132	2	-1	0	-1	for ( coefi = 0 ; coefi < dctsize2 ; coefi ++ ) {	EMPTY	EMPTY
591	133	2	-1	0	-1	if ( c _ quant -> quantval [ coefi ] != slot _ quant -> quantval [ coefi ] )	quantval quantval	EMPTY
591	134	2	-1	0	-1	errexit1 ( dstinfo , jerr _ mismatched _ quant _ table , tblno ) ;	EMPTY	EMPTY
591	135	2	-1	0	-1	}	EMPTY	EMPTY
591	136	2	-1	0	-1	}	EMPTY	EMPTY
591	140	2	-1	1	-1	}	EMPTY	EMPTY
591	149	2	-1	1	-1	if ( srcinfo -> saw _ jfif _ marker ) {	saw _ jfif _ marker	EMPTY
591	150	2	-1	0	-1	if ( srcinfo -> jfif _ major _ version == 1 ) {	jfif _ major _ version	EMPTY
591	151	2	-1	0	-1	dstinfo -> jfif _ major _ version = srcinfo -> jfif _ major _ version ;	jfif _ major _ version jfif _ major _ version	EMPTY
591	152	2	-1	0	-1	dstinfo -> jfif _ minor _ version = srcinfo -> jfif _ minor _ version ;	jfif _ minor _ version jfif _ minor _ version	EMPTY
591	153	2	-1	0	-1	}	EMPTY	EMPTY
591	154	2	-1	0	-1	dstinfo -> density _ unit = srcinfo -> density _ unit ;	density _ unit density _ unit	EMPTY
591	155	2	-1	0	-1	dstinfo -> x _ density = srcinfo -> x _ density ;	x _ density x _ density	EMPTY
591	156	2	-1	0	-1	dstinfo -> y _ density = srcinfo -> y _ density ;	y _ density y _ density	EMPTY
591	157	2	-1	0	-1	}	EMPTY	EMPTY
591	158	3	-1	0	-1	}	EMPTY	EMPTY
591	166	1	1	1	-1	local ( void )	EMPTY	EMPTY
591	167	2	-1	0	-1	transencode _ master _ selection ( j _ compress _ ptr cinfo	transencode _ master _ selection cinfo	EMPTY
591	168	2	-1	0	-1	jvirt _ barray _ ptr * coef _ arrays )	coef _ arrays	EMPTY
591	169	2	-1	0	-1	{	EMPTY	EMPTY
591	173	2	-1	1	-1	cinfo -> input _ components = 1	cinfo input _ components	EMPTY
591	175	3	-1	1	-1	;	EMPTY	EMPTY
591	178	1	1	1	1	if ( cinfo -> arith _ code ) {	cinfo arith _ code	EMPTY
591	179	2	-1	0	-1	# ifdef c _ arith _ coding _ supported	EMPTY	EMPTY
591	180	2	-1	0	-1	jinit _ arith _ encoder ( cinfo ) ;	cinfo	EMPTY
591	181	2	-1	0	-1	# else	EMPTY	EMPTY
591	182	2	-1	0	-1	errexit ( cinfo , jerr _ arith _ notimpl ) ;	cinfo	EMPTY
591	183	2	-1	0	-1	# endif	EMPTY	EMPTY
591	184	2	-1	0	-1	} else {	EMPTY	EMPTY
591	185	2	-1	0	-1	if ( cinfo -> progressive _ mode ) {	cinfo progressive _ mode	EMPTY
591	186	2	-1	0	-1	# ifdef c _ progressive _ supported	EMPTY	EMPTY
591	187	2	-1	0	-1	jinit _ phuff _ encoder ( cinfo ) ;	cinfo	EMPTY
591	188	2	-1	0	-1	# else	EMPTY	EMPTY
591	189	2	-1	0	-1	errexit ( cinfo , jerr _ not _ compiled ) ;	cinfo	EMPTY
591	190	2	-1	0	-1	# endif	EMPTY	EMPTY
591	191	2	-1	0	-1	} else	EMPTY	EMPTY
591	192	2	-1	0	-1	jinit _ huff _ encoder ( cinfo ) ;	cinfo	EMPTY
591	193	3	-1	0	-1	}	EMPTY	EMPTY
591	196	1	1	1	1	transencode _ coef _ controller ( cinfo , coef _ arrays )	cinfo coef _ arrays	EMPTY
591	198	1	0	0	0	jinit _ marker _ writer ( cinfo )	cinfo	EMPTY
591	201	1	1	1	1	( * cinfo -> mem -> realize _ virt _ arrays ) ( ( j _ common _ ptr ) cinfo )	cinfo mem cinfo	EMPTY
591	207	1	1	1	1	( * cinfo -> marker -> write _ file _ header ) ( cinfo )	cinfo marker cinfo	EMPTY
591	208	3	-1	0	-1	}	EMPTY	EMPTY
591	221	1	1	1	1	struct {	EMPTY	EMPTY
591	222	3	-1	0	-1	struct jpeg _ c _ coef _ controller pub ;	jpeg _ c _ coef _ controller pub	EMPTY
591	224	1	1	1	1	jdimension imcu _ row _ num ;	imcu _ row _ num	EMPTY
591	225	2	-1	1	-1	jdimension mcu _ ctr ;	mcu _ ctr	EMPTY
591	226	2	-1	1	-1	int mcu _ vert _ offset ;	mcu _ vert _ offset	EMPTY
591	227	3	-1	1	-1	int mcu _ rows _ per _ imcu _ row ;	mcu _ rows _ per _ imcu _ row	EMPTY
591	230	1	1	1	1	jvirt _ barray _ ptr * whole _ image ;	whole _ image	EMPTY
591	233	1	1	1	1	jblockrow dummy _ buffer [ c _ max _ blocks _ in _ mcu ] ;	jblockrow dummy _ buffer	EMPTY
591	234	3	-1	0	-1	} my _ coef _ controller ;	EMPTY	EMPTY
591	236	1	0	0	-1	typedef my _ coef _ controller * my _ coef _ ptr ;	EMPTY	EMPTY
591	239	1	1	0	-1	local ( void )	EMPTY	EMPTY
591	240	2	-1	0	-1	start _ imcu _ row ( j _ compress _ ptr cinfo )	cinfo	EMPTY
591	242	2	-1	1	-1	{	EMPTY	EMPTY
591	243	3	-1	0	-1	my _ coef _ ptr coef = ( my _ coef _ ptr ) cinfo -> coef ;	cinfo	EMPTY
591	249	1	1	1	1	if ( cinfo -> comps _ in _ scan > 1 ) {	cinfo comps _ in _ scan	EMPTY
591	250	2	-1	0	-1	coef -> mcu _ rows _ per _ imcu _ row = 1 ;	mcu _ rows _ per _ imcu _ row	EMPTY
591	251	2	-1	0	-1	} else {	EMPTY	EMPTY
591	252	2	-1	0	-1	if ( coef -> imcu _ row _ num < ( cinfo -> total _ imcu _ rows - 1 ) )	imcu _ row _ num cinfo total _ imcu _ rows	EMPTY
591	253	2	-1	0	-1	coef -> mcu _ rows _ per _ imcu _ row = cinfo -> cur _ comp _ info [ 0 ] -> v _ samp _ factor ;	mcu _ rows _ per _ imcu _ row cinfo cur _ comp _ info v _ samp _ factor	EMPTY
591	254	2	-1	0	-1	else	EMPTY	EMPTY
591	255	2	-1	0	-1	coef -> mcu _ rows _ per _ imcu _ row = cinfo -> cur _ comp _ info [ 0 ] -> last _ row _ height ;	mcu _ rows _ per _ imcu _ row cinfo cur _ comp _ info last _ row _ height	EMPTY
591	256	3	-1	0	-1	}	EMPTY	EMPTY
591	258	1	0	0	-1	coef -> mcu _ ctr = 0	mcu _ ctr	EMPTY
591	259	2	-1	0	-1	coef -> mcu _ vert _ offset = 0	mcu _ vert _ offset	EMPTY
591	260	3	-1	0	-1	}	EMPTY	EMPTY
591	267	1	1	1	-1	methoddef ( void )	EMPTY	EMPTY
591	268	2	-1	0	-1	start _ pass _ coef ( j _ compress _ ptr cinfo  j _ buf _ mode pass _ mode )	cinfo j _ buf _ mode	EMPTY
591	269	2	-1	0	-1	{	EMPTY	EMPTY
591	270	3	-1	0	-1	my _ coef _ ptr coef = ( my _ coef _ ptr ) cinfo -> coef ;	cinfo	EMPTY
591	272	1	0	0	0	if ( pass _ mode != jbuf _ crank _ dest )	jbuf _ crank _ dest	EMPTY
591	273	3	-1	0	-1	errexit ( cinfo  jerr _ bad _ buffer _ mode ) ;	cinfo	EMPTY
591	275	1	0	0	-1	coef -> imcu _ row _ num = 0	imcu _ row _ num	EMPTY
591	276	2	-1	0	-1	start _ imcu _ row ( cinfo )	cinfo	EMPTY
591	277	3	-1	0	-1	}	EMPTY	EMPTY
591	290	1	1	1	-1	methoddef ( boolean )	EMPTY	EMPTY
591	291	2	-1	0	-1	compress _ output ( j _ compress _ ptr cinfo  jsampimage input _ buf )	cinfo jsampimage	EMPTY
591	292	2	-1	0	-1	{	EMPTY	EMPTY
591	293	2	-1	0	-1	my _ coef _ ptr coef = ( my _ coef _ ptr ) cinfo -> coef ;	cinfo	EMPTY
591	294	2	-1	1	-1	jdimension mcu _ col _ num ;	mcu _ col _ num	EMPTY
591	295	2	-1	0	-1	jdimension last _ mcu _ col = cinfo -> mcus _ per _ row - 1 ;	last _ mcu _ col cinfo mcus _ per _ row	EMPTY
591	296	2	-1	0	-1	jdimension last _ imcu _ row = cinfo -> total _ imcu _ rows - 1 ;	cinfo total _ imcu _ rows	EMPTY
591	297	2	-1	0	-1	int blkn , ci , xindex , yindex , yoffset , blockcnt ;	EMPTY	EMPTY
591	298	2	-1	0	-1	jdimension start _ col ;	EMPTY	EMPTY
591	299	2	-1	0	-1	jblockarray buffer [ max _ comps _ in _ scan ] ;	jblockarray buffer	EMPTY
591	300	2	-1	0	-1	jblockrow mcu _ buffer [ c _ max _ blocks _ in _ mcu ] ;	jblockrow	EMPTY
591	301	2	-1	0	-1	jblockrow buffer _ ptr ;	jblockrow	EMPTY
591	302	3	-1	0	-1	jpeg _ component _ info * compptr ;	compptr	EMPTY
591	305	1	1	1	1	for ( ci = 0 ; ci < cinfo -> comps _ in _ scan ; ci ++ ) {	cinfo comps _ in _ scan	EMPTY
591	306	2	-1	0	-1	compptr = cinfo -> cur _ comp _ info [ ci ] ;	compptr cinfo cur _ comp _ info	EMPTY
591	307	2	-1	0	-1	buffer [ ci ] = ( * cinfo -> mem -> access _ virt _ barray )	buffer cinfo mem	EMPTY
591	308	2	-1	0	-1	( ( j _ common _ ptr ) cinfo , coef -> whole _ image [ compptr -> component _ index ] ,	cinfo whole _ image compptr component _ index	EMPTY
591	309	2	-1	0	-1	coef -> imcu _ row _ num * compptr -> v _ samp _ factor ,	imcu _ row _ num compptr v _ samp _ factor	EMPTY
591	310	2	-1	0	-1	( jdimension ) compptr -> v _ samp _ factor , false ) ;	compptr v _ samp _ factor	EMPTY
591	311	3	-1	0	-1	}	EMPTY	EMPTY
591	314	1	1	1	1	for ( yoffset = coef -> mcu _ vert _ offset ; yoffset < coef -> mcu _ rows _ per _ imcu _ row ;	mcu _ vert _ offset mcu _ rows _ per _ imcu _ row	EMPTY
591	315	2	-1	0	-1	yoffset ++ ) {	EMPTY	EMPTY
591	316	2	-1	0	-1	for ( mcu _ col _ num = coef -> mcu _ ctr ; mcu _ col _ num < cinfo -> mcus _ per _ row ;	mcu _ col _ num mcu _ ctr mcu _ col _ num cinfo mcus _ per _ row	EMPTY
591	317	2	-1	0	-1	mcu _ col _ num ++ ) {	mcu _ col _ num	EMPTY
591	319	2	-1	1	-1	blkn = 0	EMPTY	EMPTY
591	320	2	-1	0	-1	for ( ci = numconst ; ci < cinfo -> comps _ in _ scan ; ci ++ ) {	cinfo comps _ in _ scan	EMPTY
591	321	2	-1	0	-1	compptr = cinfo -> cur _ comp _ info [ ci ]	compptr cinfo cur _ comp _ info	EMPTY
591	322	2	-1	0	-1	start _ col = mcu _ col _ num * compptr -> mcu _ width	mcu _ col _ num compptr mcu _ width	EMPTY
591	323	2	-1	0	-1	blockcnt = ( mcu _ col _ num < last _ mcu _ col ) ? compptr -> mcu _ width	mcu _ col _ num last _ mcu _ col compptr mcu _ width	EMPTY
591	324	2	-1	0	-1	: compptr -> last _ col _ width	compptr last _ col _ width	EMPTY
591	325	2	-1	0	-1	for ( yindex = numconst ; yindex < compptr -> mcu _ height ; yindex ++ ) {	compptr mcu _ height	EMPTY
591	326	2	-1	0	-1	if ( coef -> imcu _ row _ num < last _ imcu _ row ||	imcu _ row _ num	EMPTY
591	327	2	-1	0	-1	yindex + yoffset < compptr -> last _ row _ height ) {	compptr last _ row _ height	EMPTY
591	329	2	-1	1	-1	buffer _ ptr = buffer [ ci ] [ yindex + yoffset ] + start _ col	buffer	EMPTY
591	330	2	-1	0	-1	for ( xindex = 0 ; xindex < blockcnt ; xindex ++ )	EMPTY	EMPTY
591	331	2	-1	0	-1	mcu _ buffer [ blkn ++ ] = buffer _ ptr ++	EMPTY	EMPTY
591	332	2	-1	0	-1	}	EMPTY	EMPTY
591	334	2	-1	1	-1	xindex = 0	EMPTY	EMPTY
591	335	2	-1	0	-1	}	EMPTY	EMPTY
591	342	2	-1	1	-1	for ( ; xindex < compptr -> mcu _ width ; xindex ++ ) {	compptr mcu _ width	EMPTY
591	343	2	-1	0	-1	mcu _ buffer [ blkn ] = coef -> dummy _ buffer [ blkn ] ;	dummy _ buffer	EMPTY
591	344	2	-1	0	-1	mcu _ buffer [ blkn ] [ 0 ] [ 0 ] = mcu _ buffer [ blkn - 1 ] [ 0 ] [ 0 ] ;	EMPTY	EMPTY
591	345	2	-1	0	-1	blkn ++ ;	EMPTY	EMPTY
591	346	2	-1	0	-1	}	EMPTY	EMPTY
591	347	2	-1	0	-1	}	EMPTY	EMPTY
591	348	2	-1	0	-1	}	EMPTY	EMPTY
591	350	2	-1	1	-1	if ( ! ( * cinfo -> entropy -> encode _ mcu ) ( cinfo  mcu _ buffer ) ) {	cinfo cinfo	EMPTY
591	352	2	-1	1	-1	coef -> mcu _ vert _ offset = yoffset	mcu _ vert _ offset	EMPTY
591	353	2	-1	0	-1	coef -> mcu _ ctr = mcu _ col _ num	mcu _ ctr mcu _ col _ num	EMPTY
591	354	3	-1	0	-1	return false ;	EMPTY	EMPTY
591	355	1	1	0	-1	}	EMPTY	EMPTY
591	356	2	-1	0	-1	}	EMPTY	EMPTY
591	358	2	-1	1	-1	coef -> mcu _ ctr = 0	mcu _ ctr	EMPTY
591	359	2	-1	0	-1	}	EMPTY	EMPTY
591	361	2	-1	1	-1	coef -> imcu _ row _ num ++	imcu _ row _ num	EMPTY
591	362	2	-1	0	-1	start _ imcu _ row ( cinfo )	cinfo	EMPTY
591	363	2	-1	0	-1	return true ;	EMPTY	EMPTY
591	364	3	-1	0	-1	}	EMPTY	EMPTY
591	375	1	1	1	-1	local ( void )	EMPTY	EMPTY
591	376	2	-1	0	-1	transencode _ coef _ controller ( j _ compress _ ptr cinfo	cinfo	EMPTY
591	377	2	-1	0	-1	jvirt _ barray _ ptr * coef _ arrays )	coef _ arrays	EMPTY
591	378	2	-1	0	-1	{	EMPTY	EMPTY
591	379	2	-1	0	-1	my _ coef _ ptr coef ;	EMPTY	EMPTY
591	380	2	-1	0	-1	jblockrow buffer ;	jblockrow buffer	EMPTY
591	381	3	-1	0	-1	int i ;	EMPTY	EMPTY
591	383	1	0	0	-1	coef = ( my _ coef _ ptr )	EMPTY	EMPTY
591	384	2	-1	0	-1	( * cinfo -> mem -> alloc _ small ) ( ( j _ common _ ptr ) cinfo , jpool _ image ,	cinfo mem alloc _ small cinfo	EMPTY
591	385	2	-1	0	-1	sizeof ( my _ coef _ controller ) )	EMPTY	EMPTY
591	386	2	-1	0	-1	cinfo -> coef = ( struct jpeg _ c _ coef _ controller * ) coef	cinfo jpeg _ c _ coef _ controller	EMPTY
591	387	2	-1	0	-1	coef -> pub . start _ pass = start _ pass _ coef	pub	EMPTY
591	388	3	-1	0	-1	coef -> pub . compress _ data = compress _ output	pub	EMPTY
591	391	1	1	1	-1	coef -> whole _ image = coef _ arrays	whole _ image coef _ arrays	EMPTY
591	394	1	1	1	-1	buffer = ( jblockrow )	buffer jblockrow	EMPTY
591	395	2	-1	0	-1	( * cinfo -> mem -> alloc _ large ) ( ( j _ common _ ptr ) cinfo , jpool _ image ,	cinfo mem cinfo	EMPTY
591	396	2	-1	0	-1	c _ max _ blocks _ in _ mcu * sizeof ( jblock ) )	jblock	EMPTY
591	397	2	-1	0	-1	jzero _ far ( ( void * ) buffer , c _ max _ blocks _ in _ mcu * sizeof ( jblock ) )	buffer jblock	EMPTY
591	398	2	-1	0	-1	for ( i = 0 ; i < c _ max _ blocks _ in _ mcu ; i ++ ) {	EMPTY	EMPTY
591	399	2	-1	0	-1	coef -> dummy _ buffer [ i ] = buffer + i ;	dummy _ buffer buffer	EMPTY
591	400	2	-1	0	-1	}	EMPTY	EMPTY
591	401	3	-1	0	-1	}	EMPTY	EMPTY
604	34	1	0	0	-1	my _ cconvert _ ptr my _ cconvert _ ptr my _ cconvert _ ptr my _ cconvert _ ptr my _ cconvert _ ptr my _ cconvert _ ptr my _ cconvert _ ptr cconvert cconvert cconvert cconvert cconvert cconvert cconvert = = = = = = = ( ( ( ( ( ( ( my _ cconvert _ ptr my _ cconvert _ ptr my _ cconvert _ ptr my _ cconvert _ ptr my _ cconvert _ ptr my _ cconvert _ ptr my _ cconvert _ ptr ) ) ) ) ) ) ) cinfo cinfo cinfo cinfo cinfo cinfo cinfo -> -> -> -> -> -> -> cconvert cconvert cconvert cconvert cconvert cconvert cconvert ; ; ; ; ; ; ;	cinfo cinfo cinfo cinfo cinfo cinfo cinfo	EMPTY
604	35	2	-1	0	-1	register register register register register register register int int int int int int int y y y y y y y , , , , , , , cb cb cb cb cb cb cb , , , , , , , cr cr cr cr cr cr cr ; ; ; ; ; ; ;	EMPTY	EMPTY
604	36	2	-1	0	-1	register register register register register register register jsamprow jsamprow jsamprow jsamprow jsamprow jsamprow jsamprow outptr outptr outptr outptr outptr outptr outptr ; ; ; ; ; ; ;	jsamprow jsamprow jsamprow jsamprow jsamprow jsamprow jsamprow	EMPTY
604	37	2	-1	0	-1	register register register register register register register jsamprow jsamprow jsamprow jsamprow jsamprow jsamprow jsamprow inptr0 inptr0 inptr0 inptr0 inptr0 inptr0 inptr0 , , , , , , , inptr1 inptr1 inptr1 inptr1 inptr1 inptr1 inptr1 , , , , , , , inptr2 inptr2 inptr2 inptr2 inptr2 inptr2 inptr2 ; ; ; ; ; ; ;	jsamprow jsamprow jsamprow jsamprow jsamprow jsamprow jsamprow	EMPTY
604	38	2	-1	0	-1	register register register register register register register jdimension jdimension jdimension jdimension jdimension jdimension jdimension col col col col col col col ; ; ; ; ; ; ;	EMPTY	EMPTY
604	39	3	-1	0	-1	jdimension jdimension jdimension jdimension jdimension jdimension jdimension num _ cols num _ cols num _ cols num _ cols num _ cols num _ cols num _ cols = = = = = = = cinfo cinfo cinfo cinfo cinfo cinfo cinfo -> -> -> -> -> -> -> output _ width output _ width output _ width output _ width output _ width output _ width output _ width ; ; ; ; ; ; ;	cinfo cinfo cinfo cinfo cinfo cinfo cinfo output _ width output _ width output _ width output _ width output _ width output _ width output _ width	EMPTY
604	41	1	0	0	-1	register register register register register register register jsample jsample jsample jsample jsample jsample jsample * * * * * * * range _ limit range _ limit range _ limit range _ limit range _ limit range _ limit range _ limit = = = = = = = cinfo cinfo cinfo cinfo cinfo cinfo cinfo -> -> -> -> -> -> -> sample _ range _ limit sample _ range _ limit sample _ range _ limit sample _ range _ limit sample _ range _ limit sample _ range _ limit sample _ range _ limit ; ; ; ; ; ; ;	range _ limit range _ limit range _ limit range _ limit range _ limit range _ limit range _ limit cinfo cinfo cinfo cinfo cinfo cinfo cinfo sample _ range _ limit sample _ range _ limit sample _ range _ limit sample _ range _ limit sample _ range _ limit sample _ range _ limit sample _ range _ limit	EMPTY
604	42	2	-1	0	-1	register register register register register register register int int int int int int int * * * * * * * crrtab crrtab crrtab crrtab crrtab crrtab crrtab = = = = = = = cconvert cconvert cconvert cconvert cconvert cconvert cconvert -> -> -> -> -> -> -> cr _ r _ tab cr _ r _ tab cr _ r _ tab cr _ r _ tab cr _ r _ tab cr _ r _ tab cr _ r _ tab ; ; ; ; ; ; ;	cr _ r _ tab cr _ r _ tab cr _ r _ tab cr _ r _ tab cr _ r _ tab cr _ r _ tab cr _ r _ tab	EMPTY
604	43	2	-1	0	-1	register register register register register register register int int int int int int int * * * * * * * cbbtab cbbtab cbbtab cbbtab cbbtab cbbtab cbbtab = = = = = = = cconvert cconvert cconvert cconvert cconvert cconvert cconvert -> -> -> -> -> -> -> cb _ b _ tab cb _ b _ tab cb _ b _ tab cb _ b _ tab cb _ b _ tab cb _ b _ tab cb _ b _ tab ; ; ; ; ; ; ;	cb _ b _ tab cb _ b _ tab cb _ b _ tab cb _ b _ tab cb _ b _ tab cb _ b _ tab cb _ b _ tab	EMPTY
604	44	2	-1	0	-1	register register register register register register register int32 int32 int32 int32 int32 int32 int32 * * * * * * * crgtab crgtab crgtab crgtab crgtab crgtab crgtab = = = = = = = cconvert cconvert cconvert cconvert cconvert cconvert cconvert -> -> -> -> -> -> -> cr _ g _ tab cr _ g _ tab cr _ g _ tab cr _ g _ tab cr _ g _ tab cr _ g _ tab cr _ g _ tab ; ; ; ; ; ; ;	cr _ g _ tab cr _ g _ tab cr _ g _ tab cr _ g _ tab cr _ g _ tab cr _ g _ tab cr _ g _ tab	EMPTY
604	45	3	-1	0	-1	register register register register register register register int32 int32 int32 int32 int32 int32 int32 * * * * * * * cbgtab cbgtab cbgtab cbgtab cbgtab cbgtab cbgtab = = = = = = = cconvert cconvert cconvert cconvert cconvert cconvert cconvert -> -> -> -> -> -> -> cb _ g _ tab cb _ g _ tab cb _ g _ tab cb _ g _ tab cb _ g _ tab cb _ g _ tab cb _ g _ tab ; ; ; ; ; ; ;	cb _ g _ tab cb _ g _ tab cb _ g _ tab cb _ g _ tab cb _ g _ tab cb _ g _ tab cb _ g _ tab	EMPTY
604	49	1	0	0	-1	inptr0 inptr0 inptr0 inptr0 inptr0 inptr0 inptr0 = = = = = = = input _ buf input _ buf input _ buf input _ buf input _ buf input _ buf input _ buf [ [ [ [ [ [ [ 0 0 0 0 0 0 0 ] ] ] ] ] ] ] [ [ [ [ [ [ [ input _ row input _ row input _ row input _ row input _ row input _ row input _ row ] ] ] ] ] ] ]	EMPTY	EMPTY
604	50	2	-1	0	-1	inptr1 inptr1 inptr1 inptr1 inptr1 inptr1 inptr1 = = = = = = = input _ buf input _ buf input _ buf input _ buf input _ buf input _ buf input _ buf [ [ [ [ [ [ [ 1 1 1 1 1 1 1 ] ] ] ] ] ] ] [ [ [ [ [ [ [ input _ row input _ row input _ row input _ row input _ row input _ row input _ row ] ] ] ] ] ] ]	EMPTY	EMPTY
604	51	2	-1	0	-1	inptr2 inptr2 inptr2 inptr2 inptr2 inptr2 inptr2 = = = = = = = input _ buf input _ buf input _ buf input _ buf input _ buf input _ buf input _ buf [ [ [ [ [ [ [ 2 2 2 2 2 2 2 ] ] ] ] ] ] ] [ [ [ [ [ [ [ input _ row input _ row input _ row input _ row input _ row input _ row input _ row ] ] ] ] ] ] ]	EMPTY	EMPTY
604	52	2	-1	0	-1	input _ row input _ row input _ row input _ row input _ row input _ row input _ row ++ ++ ++ ++ ++ ++ ++	EMPTY	EMPTY
604	53	3	-1	0	-1	outptr outptr outptr outptr outptr outptr outptr = = = = = = = * * * * * * * output _ buf output _ buf output _ buf output _ buf output _ buf output _ buf output _ buf ++ ++ ++ ++ ++ ++ ++	EMPTY	EMPTY
604	59	1	0	0	-1	outptr outptr outptr outptr outptr outptr outptr [ [ [ [ [ [ [ rgb _ red rgb _ red rgb _ red rgb _ red rgb _ red rgb _ red rgb _ red ] ] ] ] ] ] ] = = = = = = = range _ limit range _ limit range _ limit range _ limit range _ limit range _ limit range _ limit [ [ [ [ [ [ [ y y y y y y y + + + + + + + crrtab crrtab crrtab crrtab crrtab crrtab crrtab [ [ [ [ [ [ [ cr cr cr cr cr cr cr ] ] ] ] ] ] ] ] ] ] ] ] ] ]	range _ limit range _ limit range _ limit range _ limit range _ limit range _ limit range _ limit	EMPTY
604	60	2	-1	0	-1	outptr outptr outptr outptr outptr outptr outptr [ [ [ [ [ [ [ rgb _ green rgb _ green rgb _ green rgb _ green rgb _ green rgb _ green rgb _ green ] ] ] ] ] ] ] = = = = = = = range _ limit range _ limit range _ limit range _ limit range _ limit range _ limit range _ limit [ [ [ [ [ [ [ y y y y y y y + + + + + + +	range _ limit range _ limit range _ limit range _ limit range _ limit range _ limit range _ limit	EMPTY
604	61	2	-1	0	-1	( ( ( ( ( ( ( ( ( ( ( ( ( ( int int int int int int int ) ) ) ) ) ) ) right _ shift right _ shift right _ shift right _ shift right _ shift right _ shift right _ shift ( ( ( ( ( ( ( cbgtab cbgtab cbgtab cbgtab cbgtab cbgtab cbgtab [ [ [ [ [ [ [ cb cb cb cb cb cb cb ] ] ] ] ] ] ] + + + + + + + crgtab crgtab crgtab crgtab crgtab crgtab crgtab [ [ [ [ [ [ [ cr cr cr cr cr cr cr ] ] ] ] ] ] ] , , , , , , ,	EMPTY	EMPTY
604	62	2	-1	0	-1	scalebits scalebits scalebits scalebits scalebits scalebits scalebits ) ) ) ) ) ) ) ) ) ) ) ) ) ) ] ] ] ] ] ] ]	EMPTY	EMPTY
604	63	3	-1	0	-1	outptr outptr outptr outptr outptr outptr outptr [ [ [ [ [ [ [ rgb _ blue rgb _ blue rgb _ blue rgb _ blue rgb _ blue rgb _ blue rgb _ blue ] ] ] ] ] ] ] = = = = = = = range _ limit range _ limit range _ limit range _ limit range _ limit range _ limit range _ limit [ [ [ [ [ [ [ y y y y y y y + + + + + + + cbbtab cbbtab cbbtab cbbtab cbbtab cbbtab cbbtab [ [ [ [ [ [ [ cb cb cb cb cb cb cb ] ] ] ] ] ] ] ] ] ] ] ] ] ]	range _ limit range _ limit range _ limit range _ limit range _ limit range _ limit range _ limit	EMPTY
604	67	1	0	0	-1	outptr outptr outptr outptr [ [ [ [ rgb _ alpha rgb _ alpha rgb _ alpha rgb _ alpha ] ] ] ] = = = = 0xff 0xff 0xff 0xff	EMPTY	EMPTY
604	87	1	0	0	-1	register register register register register register register jsamprow jsamprow jsamprow jsamprow jsamprow jsamprow jsamprow inptr inptr inptr inptr inptr inptr inptr , , , , , , , outptr outptr outptr outptr outptr outptr outptr ; ; ; ; ; ; ;	jsamprow jsamprow jsamprow jsamprow jsamprow jsamprow jsamprow	EMPTY
604	88	2	-1	0	-1	register register register register register register register jdimension jdimension jdimension jdimension jdimension jdimension jdimension col col col col col col col ; ; ; ; ; ; ;	EMPTY	EMPTY
604	89	3	-1	0	-1	jdimension jdimension jdimension jdimension jdimension jdimension jdimension num _ cols num _ cols num _ cols num _ cols num _ cols num _ cols num _ cols = = = = = = = cinfo cinfo cinfo cinfo cinfo cinfo cinfo -> -> -> -> -> -> -> output _ width output _ width output _ width output _ width output _ width output _ width output _ width ; ; ; ; ; ; ;	cinfo cinfo cinfo cinfo cinfo cinfo cinfo output _ width output _ width output _ width output _ width output _ width output _ width output _ width	EMPTY
604	92	1	0	0	-1	inptr inptr inptr inptr inptr inptr inptr = = = = = = = input _ buf input _ buf input _ buf input _ buf input _ buf input _ buf input _ buf [ [ [ [ [ [ [ 0 0 0 0 0 0 0 ] ] ] ] ] ] ] [ [ [ [ [ [ [ input _ row input _ row input _ row input _ row input _ row input _ row input _ row ++ ++ ++ ++ ++ ++ ++ ] ] ] ] ] ] ]	EMPTY	EMPTY
604	93	3	-1	0	-1	outptr outptr outptr outptr outptr outptr outptr = = = = = = = * * * * * * * output _ buf output _ buf output _ buf output _ buf output _ buf output _ buf output _ buf ++ ++ ++ ++ ++ ++ ++	EMPTY	EMPTY
604	96	1	0	0	-1	outptr outptr outptr outptr outptr outptr outptr [ [ [ [ [ [ [ rgb _ red rgb _ red rgb _ red rgb _ red rgb _ red rgb _ red rgb _ red ] ] ] ] ] ] ] = = = = = = = outptr outptr outptr outptr outptr outptr outptr [ [ [ [ [ [ [ rgb _ green rgb _ green rgb _ green rgb _ green rgb _ green rgb _ green rgb _ green ] ] ] ] ] ] ] = = = = = = = outptr outptr outptr outptr outptr outptr outptr [ [ [ [ [ [ [ rgb _ blue rgb _ blue rgb _ blue rgb _ blue rgb _ blue rgb _ blue rgb _ blue ] ] ] ] ] ] ] = = = = = = = inptr inptr inptr inptr inptr inptr inptr [ [ [ [ [ [ [ col col col col col col col ] ] ] ] ] ] ]	EMPTY	EMPTY
604	100	1	0	0	-1	outptr outptr outptr outptr [ [ [ [ rgb _ alpha rgb _ alpha rgb _ alpha rgb _ alpha ] ] ] ] = = = = 0xff 0xff 0xff 0xff	EMPTY	EMPTY
604	118	1	0	0	-1	register register register register register register register jsamprow jsamprow jsamprow jsamprow jsamprow jsamprow jsamprow inptr0 inptr0 inptr0 inptr0 inptr0 inptr0 inptr0 , , , , , , , inptr1 inptr1 inptr1 inptr1 inptr1 inptr1 inptr1 , , , , , , , inptr2 inptr2 inptr2 inptr2 inptr2 inptr2 inptr2 ; ; ; ; ; ; ;	jsamprow jsamprow jsamprow jsamprow jsamprow jsamprow jsamprow	EMPTY
604	119	2	-1	0	-1	register register register register register register register jsamprow jsamprow jsamprow jsamprow jsamprow jsamprow jsamprow outptr outptr outptr outptr outptr outptr outptr ; ; ; ; ; ; ;	jsamprow jsamprow jsamprow jsamprow jsamprow jsamprow jsamprow	EMPTY
604	120	2	-1	0	-1	register register register register register register register jdimension jdimension jdimension jdimension jdimension jdimension jdimension col col col col col col col ; ; ; ; ; ; ;	EMPTY	EMPTY
604	121	3	-1	0	-1	jdimension jdimension jdimension jdimension jdimension jdimension jdimension num _ cols num _ cols num _ cols num _ cols num _ cols num _ cols num _ cols = = = = = = = cinfo cinfo cinfo cinfo cinfo cinfo cinfo -> -> -> -> -> -> -> output _ width output _ width output _ width output _ width output _ width output _ width output _ width ; ; ; ; ; ; ;	cinfo cinfo cinfo cinfo cinfo cinfo cinfo output _ width output _ width output _ width output _ width output _ width output _ width output _ width	EMPTY
604	124	1	0	0	-1	inptr0 inptr0 inptr0 inptr0 inptr0 inptr0 inptr0 = = = = = = = input _ buf input _ buf input _ buf input _ buf input _ buf input _ buf input _ buf [ [ [ [ [ [ [ 0 0 0 0 0 0 0 ] ] ] ] ] ] ] [ [ [ [ [ [ [ input _ row input _ row input _ row input _ row input _ row input _ row input _ row ] ] ] ] ] ] ]	EMPTY	EMPTY
604	125	2	-1	0	-1	inptr1 inptr1 inptr1 inptr1 inptr1 inptr1 inptr1 = = = = = = = input _ buf input _ buf input _ buf input _ buf input _ buf input _ buf input _ buf [ [ [ [ [ [ [ 1 1 1 1 1 1 1 ] ] ] ] ] ] ] [ [ [ [ [ [ [ input _ row input _ row input _ row input _ row input _ row input _ row input _ row ] ] ] ] ] ] ]	EMPTY	EMPTY
604	126	2	-1	0	-1	inptr2 inptr2 inptr2 inptr2 inptr2 inptr2 inptr2 = = = = = = = input _ buf input _ buf input _ buf input _ buf input _ buf input _ buf input _ buf [ [ [ [ [ [ [ 2 2 2 2 2 2 2 ] ] ] ] ] ] ] [ [ [ [ [ [ [ input _ row input _ row input _ row input _ row input _ row input _ row input _ row ] ] ] ] ] ] ]	EMPTY	EMPTY
604	127	2	-1	0	-1	input _ row input _ row input _ row input _ row input _ row input _ row input _ row ++ ++ ++ ++ ++ ++ ++	EMPTY	EMPTY
604	128	3	-1	0	-1	outptr outptr outptr outptr outptr outptr outptr = = = = = = = * * * * * * * output _ buf output _ buf output _ buf output _ buf output _ buf output _ buf output _ buf ++ ++ ++ ++ ++ ++ ++	EMPTY	EMPTY
604	131	1	0	0	-1	outptr outptr outptr outptr outptr outptr outptr [ [ [ [ [ [ [ rgb _ red rgb _ red rgb _ red rgb _ red rgb _ red rgb _ red rgb _ red ] ] ] ] ] ] ] = = = = = = = inptr0 inptr0 inptr0 inptr0 inptr0 inptr0 inptr0 [ [ [ [ [ [ [ col col col col col col col ] ] ] ] ] ] ]	EMPTY	EMPTY
604	132	2	-1	0	-1	outptr outptr outptr outptr outptr outptr outptr [ [ [ [ [ [ [ rgb _ green rgb _ green rgb _ green rgb _ green rgb _ green rgb _ green rgb _ green ] ] ] ] ] ] ] = = = = = = = inptr1 inptr1 inptr1 inptr1 inptr1 inptr1 inptr1 [ [ [ [ [ [ [ col col col col col col col ] ] ] ] ] ] ]	EMPTY	EMPTY
604	133	3	-1	0	-1	outptr outptr outptr outptr outptr outptr outptr [ [ [ [ [ [ [ rgb _ blue rgb _ blue rgb _ blue rgb _ blue rgb _ blue rgb _ blue rgb _ blue ] ] ] ] ] ] ] = = = = = = = inptr2 inptr2 inptr2 inptr2 inptr2 inptr2 inptr2 [ [ [ [ [ [ [ col col col col col col col ] ] ] ] ] ] ]	EMPTY	EMPTY
604	137	1	0	0	-1	outptr outptr outptr outptr [ [ [ [ rgb _ alpha rgb _ alpha rgb _ alpha rgb _ alpha ] ] ] ] = = = = 0xff 0xff 0xff 0xff	EMPTY	EMPTY
610	37	1	1	1	-1	jinit _ color _ converter ( cinfo )	cinfo	EMPTY
610	38	3	-1	0	-1	jinit _ downsampler ( cinfo )	cinfo	EMPTY
610	42	1	1	1	-1	jinit _ forward _ dct ( cinfo )	cinfo	EMPTY
610	44	1	1	1	-1	if ( cinfo -> arith _ code ) {	cinfo arith _ code	EMPTY
610	45	2	-1	0	-1	# ifdef c _ arith _ coding _ supported	EMPTY	EMPTY
610	46	2	-1	0	-1	jinit _ arith _ encoder ( cinfo ) ;	cinfo	EMPTY
610	47	2	-1	0	-1	# else	EMPTY	EMPTY
610	48	2	-1	0	-1	errexit ( cinfo , jerr _ arith _ notimpl ) ;	cinfo	EMPTY
610	49	2	-1	0	-1	# endif	EMPTY	EMPTY
610	50	2	-1	0	-1	} else {	EMPTY	EMPTY
610	51	2	-1	0	-1	if ( cinfo -> progressive _ mode ) {	cinfo progressive _ mode	EMPTY
610	52	2	-1	0	-1	# ifdef c _ progressive _ supported	EMPTY	EMPTY
610	53	2	-1	0	-1	jinit _ phuff _ encoder ( cinfo ) ;	cinfo	EMPTY
610	54	2	-1	0	-1	# else	EMPTY	EMPTY
610	55	2	-1	0	-1	errexit ( cinfo , jerr _ not _ compiled ) ;	cinfo	EMPTY
610	56	2	-1	0	-1	# endif	EMPTY	EMPTY
610	57	2	-1	0	-1	} else	EMPTY	EMPTY
610	58	2	-1	0	-1	jinit _ huff _ encoder ( cinfo ) ;	cinfo	EMPTY
610	59	3	-1	0	-1	}	EMPTY	EMPTY
610	62	1	1	1	-1	jinit _ c _ coef _ controller ( cinfo ,	cinfo	EMPTY
610	63	3	-1	0	-1	( boolean ) ( cinfo -> num _ scans > 1 || cinfo -> optimize _ coding ) )	cinfo num _ scans cinfo optimize _ coding	EMPTY
610	66	1	1	1	-1	jinit _ marker _ writer ( cinfo )	cinfo	EMPTY
610	69	1	1	1	-1	( * cinfo -> mem -> realize _ virt _ arrays ) ( ( j _ common _ ptr ) cinfo )	cinfo mem cinfo	EMPTY
610	75	1	1	1	-1	( * cinfo -> marker -> write _ file _ header ) ( cinfo )	cinfo marker cinfo	EMPTY
